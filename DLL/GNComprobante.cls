VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "GNComprobante"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_Ext_KEY = "SavedWithClassBuilder6" ,"Yes"
Attribute VB_Ext_KEY = "Member0" ,"PCKardex"
Attribute VB_Ext_KEY = "Member1" ,"IVKardexRecargo"
Attribute VB_Ext_KEY = "Member2" ,"IVKardex"
Attribute VB_Ext_KEY = "Member3" ,"TSKardex"
Attribute VB_Ext_KEY = "Member4" ,"AFKardex"
Attribute VB_Ext_KEY = "Member5" ,"CTLibroDetalle"
Attribute VB_Ext_KEY = "Member6" ,"GNTrans"
Attribute VB_Ext_KEY = "Member7" ,"Empresa"
Attribute VB_Ext_KEY = "Top_Level" ,"Yes"
Option Explicit

Private Type T_PROPS
    transid As Long
    CodTrans As String
    NumTrans As Long
    CodAsiento As Long
    FechaTrans As Date
    HoraTrans As Date           '*** MAKOTO 07/dic/00 Agregado
    Descripcion As String
    codUsuario As String
    IdResponsable As Long
    CodResponsable As String
    NumDocRef As String
    Estado As Byte              'ESTADO_NOAPROBADO/ESTADO_APROBADO/ESTADO_DESPACHADO/ESTADO_ANULADO
    PosID As String
    NumTransCierrePOS As Long
    idCentro As Long
    CodCentro As String
    IdTransFuente As Long
    Cotizacion(2 To 4) As Double
    CodMoneda As String
    IdProveedorRef As Long
    CodProveedorRef As String
    IdClienteRef As Long
    CodClienteRef As String
    IdVendedor As Long
    CodVendedor As String
    Nombre As String                '*** MAKOTO 05/feb/01 Agregado
    
    '*** ALEX 13/Sept/2002
    CodCredTrib As String
    CodTipoComp As String
    NumAutSRI As String
    NumSerie As String
    NumSecuencial As String
    BandDevolucion As Boolean
    TransIDAfectada As Long
    FechaAnexos As Date  'Fecha de la Transaccion
    NumSerieEstablecimiento As String
    NumSeriePunto As String
    FechaCaducidad As Date  'Fecha de la Transaccion
    CodTipoTrans As String 'jeaa 10/08/2006
    BandCompraSinRetencion As Boolean '18/12/2006
    CodTipoRetencion  As String 'jeaa 18/12/2006
    BandNOCreditoTributario As Boolean   'jeaa 30/12/2011
    BandRISE As Boolean   'jeaa 30/12/2011
    BandFactElec As Boolean   'jeaa 30/12/2011
    BandRetOtro As Boolean   'jeaa 30/12/2011
    BandAplicaIvaAnt As Boolean   'jeaa 30/12/2011
    BandPagoExterior As Boolean   'jeaa 30/12/2011
    CodFormaPagoSRI As String
    CodPaisSRI As String
    BandDobleTributa As Boolean
    BandPagoSujRet As Boolean
    NombreArchivoXML As String
    
    CodCredTribMod As String
    CodTipoCompMod As String
    NumAutSRIMod As String
    NumSerieEstablecimientoMod As String
    NumSeriePuntoMod As String
    NumSecuencialMod As String
    
    
    ' Datos Exportaciones
    BandReferendo As Boolean
    CodDistrito As String
    Anio As String
    CodRegimen As String
    Correlativo As String
    Verificador As String
    DocTransporte As String
    ValorFOB As Currency
    ValorFOBLocal As Currency
    FechaEmbarque As Date
    fechagrabado As Date
    CodPuertoEmbarque As String
    CodPaisDestino As String
    
    RUC As String                     '********** jeaa 14-1-04 no se graban en la base de datos
    Direccion As String               '********** solamente para llenar la direccion
    Telefono As String                '**************************************************
    GrabaDatosPC As Boolean           '********** jeaa 14-1-04 para saber si es consumidor final
    Efectivo As String                '********** jeaa 14-1-04 para guardar el efectivo
    
    CodUsuarioModifica As String      '***Agregado. 06/Ago/2004. Angel
                                                            '********** jeaa 30-09-04 para reimpresion de facturas
    Impresion As Byte              'IMPRESION_NOIMPRIME/IMPRESION_YAIMPRIMIO
    IdMotivo As Long                'jeaa 25/04/2005 para guardar el motivo de la devolucion
    CodMotivo As String
    codMotivoDev As String
    Observacion As String         '********** para llenar las observaciones solamente AUC 31/08/2005
    Comision As Currency        'jeaa 06/02/2006   para señal X
    FechaDevol As Date            'AUC 13/03/06 agregado fecha devol para la casa del disfraz
    FechaAlquiler As Date            'AUC 13/03/06 agregado fecha devol para la casa del disfraz
    BandCierre As Byte      'AUC 08/12/06
    ComisionCobrador As Currency        'jeaa 27/05/2007 para Diprovetr
    AutorizacionSRI As String
    FechaCaducidadSRI As Date
    
    PrecioRef As Integer
    Estado1 As Byte 'AUC 31/10/07
    Estado2 As Byte
    
    'EXPORTACION / IMPORTACION  JEAA 24/03/2008
    ObservacionImpExp As String
    Consignatario As String
    FormaEnvio As String
    PesoNeto As String
    PesoBruto As String
    Referencia As String
    NumDias As Currency     'AUC para los alquileres o Numero de Pagos
    
    CodUsuarioAutoriza As String 'jeaa  25/09/2008 Autoriza facturacion distablasa
    CodFormnaCP As String   'jeaa 10/10/2008 Forma de Pago x descto MP3
    
    'Financiamiento 23/03/2009
    TasaMensual As Currency
    ValorEntrada As Currency
    MesesGracia As Integer
    DiaPago As Integer
    NumeroPagos As Integer
    FechaPrimerPago As Date
    FechaSegundoPago As Date
    ValorSegundaEntrada As Currency
    ValorIntereses As Currency
    FechaFuente As Date
    TipoCuota As Integer
    '--------------------------------
    idFuentes As String
    idCentros As String
    IdGaranteRef As Long
    CodGaranteRef As String
    
    IdObra As Long
    CodObra As String
    IdZona As Long
    CodZona As String
    
    'datos Adicionales Oferta
    
    Atencion As String
    FormaPago As String
    TiempoEntrega As String
    Validez As String
    
    Detalles As String      'memo
    IdGaranteRef2 As Long
    CodGaranteRef2 As String
    IdInventario As Long
    CodInventario As String
    FechaValidez As Date
    Observaciones As String      'memo
    FechaEntrega As Date
    TiempoEstimadoEntrega As Currency
    NumDireccion As String
    DirTransporte As String ' ,emo
    
    IDForma As Long
    CodForma As String
    
    IdDescuento As Long
    CodDescuento As String
    
    FechaAutorizacionSRI As Date
    NumSerieEstaSRI As String
    NumSeriePuntoSRI As String
   
    FechaInicioTrans As Date
    HoraInicioTrans As Date
    
    '********* PRESUPUESTO
    CodPRAsiento As Long
    'PorcentajeIVA As Currency
    PorcentIVA As Currency
    TransFuente As String
    IdEmpleadoRef As Long 'AUC
    CodEmpleadoRef As String
    IdTipoRol As Long
    CodTipoRol As String
    PCPorDesc As Currency 'AUC Para guardar el % descuento por  prov
    BandFinalizado As Boolean  'para eliminar busqueda para estados '1,2,4
    
    
    
    '********* Requerimiento JEAA
    
    TipoPago As Byte 'LIQUIDACION/ROLES/VIATICOS/OTROS/CAJACHICA/SUBSISTENCIA
    TipoCompra As Byte 'SERVICIO/GASTO
    TipoCuantia As Byte 'INCOP/INFIMA
    INCOP As String
    BandRevision As Boolean
    FechaRevision As Date
    EstadoReq As Byte 'INICIO/CERTIFICACION/PROFORMA/ACEPTACION/OBSERVACION/ACEPTACION/DIRECCION
    Comentarios As String      'memo
    BandCertifica As Boolean
    FechaCertifica As Date
    Proforma1 As String
    Monto1 As Currency
    Proforma2 As String
    Monto2 As Currency
    Proforma3 As String
    Monto3 As Currency
    ProfAdjudicada As Byte '0/1/2/3
    FechaProforma As Date
    BandAceptacion As Boolean
    FechaAceptacion As Date
    ObservacionesReq As String      'memo
    FechaObservacion As Date
    BandDireccion As Boolean
    FechaDireccion As Date

    Crono1 As String
    FechaCR1 As Date
    MontoCR1 As Currency
    ObsCrono1 As String
    Crono2 As String
    FechaCR2 As Date
    MontoCR2 As Currency
    ObsCrono2 As String
    Crono3 As String
    FechaCR3 As Date
    MontoCR3 As Currency
    ObsCrono3 As String
    BandPago As Boolean
    OtrosPagos As String
    Tiporec As Byte
    EstadoRevision As Byte
    EstadoCertifica As Byte
    'agt 2015
    EstadoRevisionActa As String
    FechaRevisionActa As Date
    ObservacionesRevisionActa As String
    Usuario1 As String
    Usuario2 As String
    Usuario3 As String
    IdProveedor1 As Long
    IdProveedor2 As Long
    IdProveedor3 As Long
    CodProveedor1 As String
    CodProveedor2 As String
    CodProveedor3 As String
    RutaOferta1 As String
    RutaOferta2 As String
    RutaOferta3 As String
    UsuarioActa As String
    UsuarioRevActa As String
    
    BandNoGrabaTransXML As Boolean
    objEmpresa As Empresa
    
    CodCentrosdet As String
    idCentroHijo As Long
    CodCentroHijo As String
    ClienteEnMora As Boolean
    ObservacionesCertifica As String
    FechaIngresoFicha As Date
    Codelemento As String 'ROLES
    BandInteresIncluyeEntrada As Boolean
    IntervaloCuotas As Integer
    ListaIVPrecio As String
    NumPrecioPred As String
    Opcion As String
    CodBodegaDest As String
    TasaAnual As Currency
    CodTipoRolProv As String
    BandPrecioDist As Boolean
    IdAgencia As Long
    Agencia As String
    BandDINARDAP As Boolean
    
    EstadoFacElect As Byte              'ESTADO_GENERADO/ESTADO_AUTORIZADO/ESTADO_NOAUTORIZADO/ESTADO_CONTINGENCIA
    '----------------------- datos documento electronicos
    
    ClaveAcceso As String
    ArchivoXML As String
    Enviado As Boolean
    CodigoMensaje As String
    InformacionAdicional As String
    TipoEmision As String
    NumeroAutorizacion As String
    FechaAutorizacion As Date
    TipoAmbiente As Byte
    BandAutorizado As Boolean
    '---------------------- fin datos documento electronicos
        
    idSolCredito As Long
    AprobadaSolCre As Boolean
 
    
    '---------------------- datos guia remision
    
    FechaInicio As Date
    FechaFin As Date
    TransIdFuenteGuia As Integer
    IdMotivoGuia As Long
    CodMotivoGuia As String
    PuntoPartida As String
    NombreDestino As String
    RucDestino As String
    DireccionDestino As String
    NombreTransporte As String
    RUCTransporte As String
    NombreChofer As String
    RUCChofer As String
    Placa As String
    BandTC As Boolean
    Plan As String ' AUC Ricaurtesa
    IdPlan As Long
    FechaIniSemanal As Date
    IdCobrador As Long
    CodCobrador As String
    PesoCarga As Currency
    BultosCarga As Currency
    ValorFlete As Currency
    GuiaCarga As String
    
    
    '------------------------  LACTEOS
    Solidos As Currency
    Lactasa As Currency
    Acidez As Currency
    Alcohol As Currency
    Filtrado As Currency
    Temperatura As Currency
    PH As Currency
    Grasa As Currency
    Proteina As Currency
    Agua As Currency
    QUIO As Currency
    Reduccion As Currency
    Merma As Currency
    BandTanqueLimpio As Boolean
    BandEnvaseLimpio As Boolean
    HoraLlegada As String
    IdTransportista As Long
    CodTransportista  As String
    IdTarifaTransp As Long
    CodTarifaTransp As String
    HoraMarcada As String
    BandMensajeDescto As Boolean
 'Curier
    IdAgeCurier As Long
    CodAgeCurier As String
    IdDestinatario As Long
    CodDestinatario As String
    EstadoGuia As Byte
    TipoPeso As String
    IdSeguro As Integer
    CodSeguro As String
    ValorDeclarado As Currency
    Peso As Currency

     'Receta
    IdReceta As Long
    CodReceta As String
    BandPorTC As Boolean
    BandImportoTrans As Boolean
    BandCHP As Boolean
    BandEmp As Boolean
    BandPorMovil As Boolean
    BandReproCostos As Boolean
    IdRuta As Long
    Codruta As String
        'SACA
    Aerolinea As String
    GuiaCurier As String
End Type

Private Type T_ASIENTO
    CodCuenta As String
    Valor As Currency
End Type

Private mProps As T_PROPS
Private mcolCTLibroDetalle As Collection
Private mcolTSKardex As Collection
Private mcolTSKardexRet As Collection           '*** MAKOTO 07/feb/01 Agregado
Private mcolIVKardex As Collection
Private mcolIVKardexRecargo As Collection
Private mcolPCKardex As Collection
Private mcolcCKardex As Collection
Private mcolPRLibroDetalle As Collection
Private mcolIVKardexArancel As Collection
Private mcolPCKardexCHP As Collection
Private mcolGNKardexDocumento As Collection
Private mcolRGKardex As Collection


Private mcolTransIDsPorPagar As Collection 'AUC 06/12/06



'jeaa 09/12/2008 activos fijos
Private mcolAFKardex As Collection
Private mcolAFKardexRecargo As Collection
Private mcolAFKardexCustodio As Collection

'jeaa 09/05/2009 Conciliacion Bancaria
Private mcolTSKardexConcilia As Collection
'jeaa 21/07/2010 detalle de efectivo en cierre de caja
Private mcolTSDetalleEfectivo As Collection
Private mcolTSDetalleCheque As Collection
Private mcolTSDetalleTarjeta As Collection
Private mcolTSDetalleVManuales As Collection
Private mcolTSDetalleEgreso As Collection
Private mcolTSDetalleVCredito As Collection
Private mcolTSDetalleVCreditoRet As Collection
Private mcolTSDetalleIngreso As Collection
Private mcolTSDetalleIngresoRT As Collection
Private mcolRoldetalle As Collection
Private mcolPRDetalleGasto As Collection
Private mcolTSResumen As Collection
Private mcolTSDetalleChequePosf As Collection
Private mcolTSResumenVCredito As Collection


Private mobjGNTrans As GNTrans
Private mcolIVInv As Collection 'AUC agregado grabar el costo ultimo en todos los items
Private mbooEsNuevo As Boolean
Private mbooModificado As Boolean
Private mbooSoloVer As Boolean      'True=No modificable, False=Modificable

Private mcolTransIDs As Collection  'Colección de TransIDs de fuente de importación     '*** MAKOTO 15/dic/00
Private mcolIVKProceso As Collection

Event Grabado()             'Ocurre cuando termina de grabar
Event FechaCambiado()       'Ocurre cuando cambia la fecha de transacción
Event MonedaCambiado()      'Ocurre cuando cambia la moneda
Event CotizacionCambiado()  'Ocurre cuando cambia la cotización
Event ClienteCambiado()     'Ocurre cuando cambia el cliente
Event PCGrupoCambiado()     'Ocurre cuando cambia el pcgrupo del cliente
Event CCCambiado() 'Ocurre cuando cambia el Centro Costo

Event EstadoGeneracion1AsientoxLote(ByVal ix As Long, ByVal Estado As String, ByRef Cancel As Boolean)   'enviar el estado del proceso de generacion de Un Asiento por Lote '*** Oliver 5/dic/2002
'''Event EstadoGeneracion1AsientoxLotePresupuesto(ByVal ix As Long, ByVal Estado As String, ByRef Cancel As Boolean)   'enviar el estado del proceso de generacion de Un Asiento por Lote '*** Oliver 5/dic/2002
Private mcolIRKardex As Collection 'AUC para guardar F107
Private mcolVTKardexConcilia As Collection
Private mcolVTKardexConciliaTrans As Collection
Private mcolVKardexConciliaCarcasa As Collection
Private mcolGNFinan As Collection 'AUC 02/06/2011
Private mcolIVKNumSerie As Collection
Private mcolGNCall As Collection
Private mcolPCKardexCopia As Collection

Public Sub Clone(ByRef GnFuente As GNComprobante)
    Dim i As Long, j As Long
    Dim ivk As IVKardex
    Dim IvkRecargo As IVKardexRecargo
    Dim pck As PCKardex
    Dim Tsk As TSKardex
    Dim Tskret As TSKardexRet
    Dim Ctd As CTLibroDetalle
    Dim cck As CcKardex
    Dim afk As AFKardex
    Dim AFkRecargo As AFKardexRecargo
    Dim TskConci As TSKardexConcilia
    Dim idbodDes As Long
    Dim IdInven As Long
    Dim IvkArancel As IVKardexRecargo
    Dim pckchp As PCKardexCHP
    Dim Rgk As RGKardex
    
    GnFuente.RecuperaDetalleTodo  'Recupera  todos los datos de origen
    'Copia las propiedades al nuevo objeto
    Me.NumTrans = GnFuente.NumTrans
    Me.CodAsiento = GnFuente.CodAsiento
    Me.FechaTrans = GnFuente.FechaTrans
    'me.FechaGrabado = Date  'fecha  actual
    Me.HoraTrans = GnFuente.HoraTrans
    Me.Descripcion = GnFuente.Descripcion
    Me.codUsuario = GnFuente.codUsuario
    Me.IdResponsable = GnFuente.IdResponsable
    Me.NumDocRef = GnFuente.NumDocRef
    Me.Nombre = GnFuente.Nombre
    Me.Estado = GnFuente.Estado
    'me.PosID = Gnfuente.PosID
    Me.NumTransCierrePOS = GnFuente.NumTransCierrePOS
    Me.idCentro = GnFuente.idCentro
    Me.IdTransFuente = GnFuente.IdTransFuente
    Me.CodMoneda = GnFuente.CodMoneda
    Me.Cotizacion(Me.CodMoneda) = GnFuente.Cotizacion(GnFuente.CodMoneda)
    Me.IdProveedorRef = GnFuente.IdProveedorRef
    Me.IdClienteRef = GnFuente.IdClienteRef
    Me.IdVendedor = GnFuente.IdVendedor
    Me.IdMotivo = GnFuente.IdMotivo             'jeaa 25/04/2005
    Me.PrecioRef = GnFuente.PrecioRef
    Me.FechaDevol = GnFuente.FechaDevol
    Me.CodUsuarioAutoriza = GnFuente.CodUsuarioAutoriza  'jeaa 25/09/2008
    Me.idFuentes = GnFuente.idFuentes  'jeaa 22/04/2009
    Me.idCentros = GnFuente.idCentros  'jeaa 22/04/2009
    Me.IdGaranteRef = GnFuente.IdGaranteRef  'jeaa 29/05/2009
    Me.IdObra = GnFuente.IdObra  'jeaa 01/02/2010
    Me.IdZona = GnFuente.IdZona 'jeaa 01/02/2010
    Me.IdDescuento = GnFuente.IdDescuento 'jeaa 16/11/2010
    Me.CodPRAsiento = GnFuente.CodPRAsiento
    Me.PorcentajeIVA = GnFuente.PorcentajeIVA
    Me.TransFuente = GnFuente.TransFuente
    Me.IdGaranteRef2 = GnFuente.IdGaranteRef2  'jeaa 29/05/2009
    Me.IdInventario = GnFuente.IdInventario  'jeaa 29/05/2009

    'Items
    If mcolIVKardex Is Nothing And GnFuente.CountIVKardex > 0 Then Set mcolIVKardex = New Collection
    BorrarIVKardex
    For i = 1 To GnFuente.CountIVKardex
        Set ivk = GnFuente.IVKardex(i).Clone
        Set ivk.GNComprobante = Me
        'AUC 03/03/2010
        idbodDes = Me.Empresa.RecuperarIDBodega(GnFuente.IVKardex(i).CodBodega)
        ivk.IdBodega = idbodDes
        IdInven = Me.Empresa.RecuperarIDInventario(GnFuente.IVKardex(i).CodInventario)
        ivk.IdInventario = IdInven
        mcolIVKardex.Add ivk
    Next i
    'Recargos
    If mcolIVKardexRecargo Is Nothing And GnFuente.CountIVKardexRecargo > 0 Then Set mcolIVKardexRecargo = New Collection
    BorrarIVKardexRecargo
    For i = 1 To GnFuente.CountIVKardexRecargo
        Set IvkRecargo = GnFuente.IVKardexRecargo(i).Clone
        Set IvkRecargo.GNComprobante = Me
        mcolIVKardexRecargo.Add IvkRecargo
    Next i
    
    'Cliente /Proveedor
    If mcolPCKardex Is Nothing And GnFuente.CountPCKardex > 0 Then Set mcolPCKardex = New Collection
    BorrarPCKardex
    For i = 1 To GnFuente.CountPCKardex
        Set pck = GnFuente.PCKardex(i).Clone
        Set pck.GNComprobante = Me
        mcolPCKardex.Add pck
    Next i
    
    'Cliente /Proveedor CHEQUE POSFECHADO
    If mcolPCKardexCHP Is Nothing And GnFuente.CountPCKardexCHP > 0 Then Set mcolPCKardexCHP = New Collection
    BorrarPCKardexCHP
    For i = 1 To GnFuente.CountPCKardexCHP
        Set pckchp = GnFuente.PCKardexCHP(i).Clone
        Set pckchp.GNComprobante = Me
        mcolPCKardexCHP.Add pckchp
    Next i
    
    
    'Bancos
    If mcolTSKardex Is Nothing And GnFuente.CountTSKardex > 0 Then Set mcolTSKardex = New Collection
    BorrarTSKardex
    For i = 1 To GnFuente.CountTSKardex
        Set Tsk = GnFuente.TSKardex(i).Clone
        Set Tsk.GNComprobante = Me
        mcolTSKardex.Add Tsk
    Next i
    'Retenciones
    If mcolTSKardexRet Is Nothing And GnFuente.CountTSKardexRet > 0 Then Set mcolTSKardexRet = New Collection
    BorrarTSKardexRet
    For i = 1 To GnFuente.CountTSKardexRet
        Set Tskret = GnFuente.TSKardexRet(i).Clone
        Set Tskret.GNComprobante = Me
        mcolTSKardexRet.Add Tskret
    Next i
    'Cuentas
    If mcolCTLibroDetalle Is Nothing And GnFuente.CountCTLibroDetalle Then Set mcolCTLibroDetalle = New Collection
    BorrarCTLibroDetalle
    For i = 1 To GnFuente.CountCTLibroDetalle
        Set Ctd = GnFuente.CTLibroDetalle(i).Clone
        Set Ctd.GNComprobante = Me
        mcolCTLibroDetalle.Add Ctd
    Next i
    
    'Centro de Costo
    If mcolcCKardex Is Nothing And GnFuente.CountCcKardex > 0 Then Set mcolcCKardex = New Collection
    BorrarCcKardex
    For i = 1 To GnFuente.CountCcKardex
        Set cck = GnFuente.CcKardex(i).Clone
        Set cck.GNComprobante = Me
        mcolcCKardex.Add cck
    Next i
    
    'ACtivos Fijos
    If mcolAFKardex Is Nothing And GnFuente.CountAFKardex > 0 Then Set mcolAFKardex = New Collection
    BorrarAFKardex
    For i = 1 To GnFuente.CountAFKardex
        Set afk = GnFuente.AFKardex(i).Clone
        Set afk.GNComprobante = Me
        mcolAFKardex.Add afk
    Next i
    'Recargos ACtivos Fijos
    If mcolAFKardexRecargo Is Nothing And GnFuente.CountAFKardexRecargo > 0 Then Set mcolAFKardexRecargo = New Collection
    BorrarAFKardexRecargo
    For i = 1 To GnFuente.CountAFKardexRecargo
        Set AFkRecargo = GnFuente.AFKardexRecargo(i).Clone
        Set AFkRecargo.GNComprobante = Me
        mcolAFKardexRecargo.Add AFkRecargo
    Next i
    
    'Conciliacion
    If mcolTSKardexConcilia Is Nothing And GnFuente.CountTSKardexConcilia > 0 Then Set mcolTSKardexConcilia = New Collection
    BorrarTSKardexConcilia
    For i = 1 To GnFuente.CountTSKardexConcilia
        Set TskConci = GnFuente.TSKardexConcilia(i).Clone
        Set TskConci.GNComprobante = Me
        mcolTSKardexConcilia.Add TskConci
    Next i
    
    'Aranceles
    If mcolIVKardexArancel Is Nothing And GnFuente.CountIVKardexArancel > 0 Then Set mcolIVKardexArancel = New Collection
    BorrarIVKardexArancel
    For i = 1 To GnFuente.CountIVKardexArancel
        Set IvkArancel = GnFuente.IVKardexArancel(i).Clone
        Set IvkArancel.GNComprobante = Me
        mcolIVKardexArancel.Add IvkArancel
    Next i
    
    'reembolso gastos
    If mcolRGKardex Is Nothing And GnFuente.CountRGKardex > 0 Then Set mcolRGKardex = New Collection
    BorrarRGKardex
    For i = 1 To GnFuente.CountRGKardex
        Set Rgk = GnFuente.RGKardex(i).Clone
        Set Rgk.GNComprobante = Me
        mcolRGKardex.Add Rgk
    Next i
    
    
    
    
     If Me.GNTrans.Empresa.GNOpcion.ObtenerValor("PermiteControlAspectosAnexos") = "1" And _
        Me.GNTrans.IVVisibleAnexos Then

        '***Agregado. 18/jun/2003. Angel
        'Pasa las propiedades para Anexos a la copia del comprobante
        Me.CodCredTrib = GnFuente.CodCredTrib
        Me.CodTipoComp = GnFuente.CodTipoComp
        Me.NumAutSRI = GnFuente.NumAutSRI
        Me.NumSerie = GnFuente.NumSerie
        Me.NumSerieEstablecimiento = GnFuente.NumSerieEstablecimiento
        Me.NumSeriePunto = GnFuente.NumSeriePunto
        'Me.NumSecuencial = GnFuente.NumSecuencial ***no entiendo porque no utilizan la misma propiedad . Angel 18/06/2003
        If Me.GNTrans.IVValNumDoc Then
            If Len(GnFuente.NumDocRef) = 13 Then
                Me.NumSecuencial = Right(GnFuente.NumDocRef, 7)
            Else
                Me.NumSecuencial = GnFuente.NumDocRef
            End If
        Else
            If Len(GnFuente.NumDocRef) = 13 Then
                Me.NumSecuencial = Right(GnFuente.NumDocRef, 7)
            Else
                Me.NumSecuencial = Mid$(GnFuente.NumDocRef, 1, 7)
            End If
        End If
        Me.BandDevolucion = GnFuente.BandDevolucion
        Me.TransIDAfectada = GnFuente.TransIDAfectada
        Me.FechaAnexos = GnFuente.FechaAnexos
        Me.FechaCaducidad = GnFuente.FechaCaducidad
        Me.Comision = GnFuente.Comision  'jeaa 06/02/2006
        Me.FechaDevol = GnFuente.FechaDevol ' auc 04/03/2006
        Me.CodTipoTrans = GnFuente.CodTipoTrans  'jeaa 10/08/2006
        Me.BandCompraSinRetencion = GnFuente.BandCompraSinRetencion 'jeaa 18/12/2006
        Me.CodTipoRetencion = GnFuente.CodTipoRetencion ' jeaa 18/12/2006
        Me.ComisionCobrador = GnFuente.ComisionCobrador  'jeaa 27/05/2007
        Me.AutorizacionSRI = GnFuente.AutorizacionSRI
        Me.FechaCaducidadSRI = GnFuente.FechaCaducidadSRI
        
        'Pasa las propiedades para Financiamiento a la copia del comprobante
        Me.TasaMensual = GnFuente.TasaMensual
        Me.ValorEntrada = GnFuente.ValorEntrada
        Me.MesesGracia = GnFuente.MesesGracia
        Me.DiaPago = GnFuente.DiaPago
        Me.NumeroPagos = GnFuente.NumeroPagos
        Me.FechaPrimerPago = GnFuente.FechaPrimerPago
        Me.FechaSegundoPago = GnFuente.FechaSegundoPago
        Me.ValorSegundaEntrada = GnFuente.ValorSegundaEntrada
        Me.ValorIntereses = GnFuente.ValorIntereses
        Me.FechaFuente = GnFuente.FechaFuente
        Me.FechaAutorizacionSRI = GnFuente.FechaAutorizacionSRI
        Me.NumSerieEstaSRI = GnFuente.NumSerieEstaSRI
        Me.NumSeriePuntoSRI = GnFuente.NumSeriePuntoSRI
        Me.BandNOCreditoTributario = GnFuente.BandNOCreditoTributario
        Me.BandRISE = GnFuente.BandRISE
        Me.BandFactElec = GnFuente.BandFactElec
        Me.BandRetOtro = GnFuente.BandRetOtro
        Me.BandPagoExterior = GnFuente.BandPagoExterior
        Me.CodFormaPagoSRI = GnFuente.CodFormaPagoSRI
        Me.CodPaisSRI = GnFuente.CodPaisSRI
        Me.BandDobleTributa = GnFuente.BandDobleTributa
        Me.BandPagoSujRet = GnFuente.BandPagoSujRet
        Me.EstadoFacElect = GnFuente.EstadoFacElect
        Me.BandAplicaIvaAnt = GnFuente.BandAplicaIvaAnt
        Me.NombreArchivoXML = GnFuente.NombreArchivoXML
        
        
        Me.CodCredTribMod = GnFuente.CodCredTribMod
        Me.CodTipoCompMod = GnFuente.CodTipoCompMod
        Me.NumAutSRIMod = GnFuente.NumAutSRIMod
        Me.NumSerieEstablecimientoMod = GnFuente.NumSerieEstablecimientoMod
        Me.NumSeriePuntoMod = GnFuente.NumSeriePuntoMod
        Me.NumSecuencialMod = GnFuente.NumSecuencialMod
        
        
    End If
        
    'JEAA 24/03/2008
    If Me.GNTrans.IVTipoTrans = "X" Or Me.GNTrans.IVTipoTrans = "Y" Then
        Me.ObservacionImpExp = GnFuente.ObservacionImpExp
        Me.Consignatario = GnFuente.Consignatario
        Me.FormaEnvio = GnFuente.FormaEnvio
        Me.PesoNeto = GnFuente.PesoNeto
        Me.PesoBruto = GnFuente.PesoBruto
        Me.Referencia = GnFuente.Referencia
    End If
    
    
    If Me.GNTrans.IVDatosExportacion Then
        Me.BandReferendo = GnFuente.BandReferendo
        Me.CodDistrito = GnFuente.CodDistrito
        Me.Anio = GnFuente.Anio
        Me.CodRegimen = GnFuente.CodRegimen
        Me.Correlativo = GnFuente.Correlativo
        Me.Verificador = GnFuente.Verificador
        Me.DocTransporte = GnFuente.DocTransporte
        Me.ValorFOB = GnFuente.ValorFOB
        Me.ValorFOBLocal = GnFuente.ValorFOBLocal
        Me.FechaEmbarque = GnFuente.FechaEmbarque
        Me.CodPuertoEmbarque = GnFuente.CodPuertoEmbarque
        Me.CodPaisDestino = GnFuente.CodPaisDestino
        
    End If
    
    
End Sub

Friend Property Let Props(value As T_PROPS)         'Para el método Clone
    mProps = value
    mbooModificado = True
End Property


Public Sub VerificaAsiento(VerificaCuadrado As Boolean, _
                           VerificaInteg As Boolean)
    Dim i As Long
    
    'Si está descuadrado
    If (Not Cuadrado) And VerificaCuadrado Then
        Err.Raise ERR_DESCUADRADO, "GNComprobante.Verificación", MSGERR_DESCUADRADO
    End If
    
    'Si verifia integridad
    If VerificaInteg Then
        VerificaIntegridad
    End If
End Sub

Public Sub VerificaIntegridad()
    Dim i As Long, IdCuenta As Long
    Dim sql As String
    Dim obj As CTLibroDetalle, encontrado As Boolean
    Dim rs As Recordset
    
    For i = 1 To CountCTLibroDetalle
        Set obj = CTLibroDetalle(i)
        'Si el detalle es agregado por usuario y no está verificado
        If obj.BandIntegridad <> INTEG_AUTO And _
           obj.BandIntegridad <> INTEG_INTEGRADO Then
            IdCuenta = obj.IdCuenta
            obj.BandIntegridad = INTEG_INTEGRADO
            
            'Verifica si hay un Inventario que usa el mismo IdCuenta de cuenta
            sql = "SELECT CodInventario FROM IVInventario WHERE " & _
                  "(IdCuentaActivo=" & IdCuenta & ") OR " & _
                  "(IdCuentaCosto=" & IdCuenta & ") OR " & _
                  "(IdCuentaVenta=" & IdCuenta & ")"
            Set rs = mProps.objEmpresa.OpenRecordset(sql)
            If Not rs.EOF Then
                encontrado = True
                obj.BandIntegridad = INTEG_IV
            End If
            rs.Close
            
            'Verifica si hay un Banco que usa el mismo IdCuentaigo de cuenta
            sql = "SELECT CodBanco FROM TSBanco WHERE IdCuentaContable=" & IdCuenta
            Set rs = mProps.objEmpresa.OpenRecordset(sql)
            If Not rs.EOF Then
                encontrado = True
                obj.BandIntegridad = INTEG_TS
            End If
            rs.Close
            
            'Verifica si hay un Proveedor/Cliente que usa el mismo IdCuenta de cuenta 1 de PCProvCli
            sql = "SELECT CodProvCli FROM PCProvCli WHERE (IdCuentaContable=" & IdCuenta & _
                  ") OR (IdCuentaContable2=" & IdCuenta & ")"  '***Angel. 20/Julio/2004. Agregado para que valide la cuenta contable2
            Set rs = mProps.objEmpresa.OpenRecordset(sql)
            If Not rs.EOF Then
                encontrado = True
                obj.BandIntegridad = INTEG_PC
            End If
            rs.Close
            'jeaa 25/04/2005
            'Verifica si hay un Motivo que usa el mismo IdMotivo
            sql = "SELECT CodMotivo FROM Motivo WHERE IdMotivo=" & IdMotivo
            Set rs = mProps.objEmpresa.OpenRecordset(sql)
            If Not rs.EOF Then
                encontrado = True
                obj.BandIntegridad = INTEG_TS
            End If
            rs.Close
            
        End If
    Next i
    Set rs = Nothing
    
    If encontrado Then
        Err.Raise ERR_INTEGRIDAD, "GNComprobante.VerificaIntegridad", MSGERR_INTEGRIDAD
    End If
End Sub



Public Function Cuadrado() As Boolean
    Dim i As Long, Debe As Currency, Haber As Currency
    
    'Calcula total de Debe y Haber en SUCRES
    For i = 1 To CountCTLibroDetalle
        Debe = Debe + CTLibroDetalle(i).DebeSucre
        Haber = Haber + CTLibroDetalle(i).HaberSucre
        'Debug.Print i, Debe, Haber
    Next i
'    Cuadrado = (Debe = Haber)
    Cuadrado = (Format(Debe, Me.FormatoMoneda) = Format(Haber, Me.FormatoMoneda))
    
End Function


'*** MAKOTO 19/nov/00 Modificado
'"_CTA" significa codigo de asiento
Private Function AsignaNumTrans(CodT As String) As Long
    Dim num As Long, sql As String, rs As Recordset, rs2 As Recordset
    
    'Obtiene el numero siguiente
    sql = "SELECT NumTransSiguiente FROM GNTrans WHERE CodTrans='" & CodT & "'"

#If DAOLIB Then
    Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
    rs.Edit                         'Para que otros usuarios no tengan accesso
#Else
    Set rs = New Recordset
    rs.CursorLocation = adUseServer
    rs.Open sql, mProps.objEmpresa.Coneccion, adOpenDynamic, adLockPessimistic
#End If
    num = rs!NumTransSiguiente          '*** MAKOTO 16/ene/01 Mod.
    
    '*** MAKOTO 11/ene/01 Agregado      '*** MAKOTO 16/ene/01 Mod.
'''    If CodT <> "_CTA" Then
    If CodT <> "_CTA" And CodT <> "_PRCT" Then

        'Si es que ya está asignado un número por UI
        If mProps.NumTrans <> 0 Then num = mProps.NumTrans      'Coge ese número
    End If
    
    'Asegura que no esté ocupado el número
    Do
        If CodT = "_CTA" Then
            sql = "SELECT TransID FROM GNComprobante WHERE CodAsiento=" & num
        ElseIf CodT = "_PRCT" Then
            sql = "SELECT TransID FROM GNComprobante WHERE CodPRAsiento=" & num
            Else
            sql = "SELECT TransID FROM GNComprobante " & _
                  "WHERE CodTrans='" & CodT & "' AND NumTrans=" & num
        End If
        Set rs2 = mProps.objEmpresa.OpenRecordset(sql)
        If rs2.EOF Then Exit Do
        num = num + 1
        rs2.Close
    Loop
    rs2.Close
    
'*** MAKOTO 16/ene/01 Eliminado, porque tiene que actualizar el NumTransSiguiente
'    '*** MAKOTO 11/ene/01 Agregado
'    'Si es que el número ha sido asignado por UI, NO actualiza NumTransSiguiente,
'    '   excepto en caso de Código de asiento(_CTA)
'    If (mProps.NumTrans = 0) Or (CodT = "_CTA") Then
        'Actualiza el numero siguiente
        rs!NumTransSiguiente = num + 1
        rs.Update
'    End If
    rs.Close

    Set rs = Nothing
    Set rs2 = Nothing
    AsignaNumTrans = num
End Function

Private Sub VerificaDEMO()
    Dim sql As String, c As Long, rs As Recordset
    
    sql = "SELECT Count(*) AS Cnt FROM GNComprobante"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)

    c = MAXTRANS_DEMO + 1
    If Not rs.EOF Then
        If Not IsNull(rs!cnt) Then c = rs!cnt
    End If
    rs.Close
    Set rs = Nothing
    
    If c > MAXTRANS_DEMO Then
        Err.Raise ERR_INVALIDO, "DEMO", _
            "*** GRACIAS POR USAR LA VERSION DEMO ***" & vbCr & vbCr & _
            "Ya está grabado " & MAXTRANS_DEMO & " transacciones, por lo tanto " & _
            "no podrá grabar más debido a que ésta versión es de demostración." & vbCr & vbCr & _
            "Para obtener mayor información, por favor contacte su proveedor." & vbCr & _
            "Gracias por probar éste producto."
    End If
End Sub

Public Sub Grabar(VerificaCuadrado As Boolean, _
                  VerificaInteg As Boolean)
    Dim sql As String, i As Long, fgrabado As Date, j As Long
    Dim rs As Recordset, pt As PermisoTrans, datos_pc As String
    Dim bandEstado As Integer  '***Agregado. Angel. 13/sep/2004
    Dim BandCuadrado As Boolean
    Dim resp As Boolean
    Dim Ven As FCVendedor
    Dim item As IVInventario 'AUC declaro esta variable para poder hacer referencia a la preaparcion
    Dim BandGrabado As Boolean, rsaux As Recordset
    Dim t As Currency, tdesc As Currency, tdesc0 As Currency
    Dim gnt As GNTrans, bandModif As Boolean
    Dim Nombre As String, Ruta As String, file As String, comando As String, pc As PCProvCli
    BandGrabado = False
    bandModif = True

    If Me.EsNuevo Then bandModif = False

    'jeaa 09/05/2005 para igualar la hora con el servidor
    If Me.Empresa.GNOpcion.ObtenerValor("IgualarHora") = "1" Then
        mProps.objEmpresa.AjustaHoraServidor
    End If
    'si otro usuario ha abierto esta transaccion para grabar.
    If UCase(mProps.codUsuario) <> UCase(gobjUsuarioActual.codUsuario) Then mbooModificado = True
    
'    Set gnt = Me.Empresa.RecuperaGNTrans(Me.CodTrans)
'
'    If gnt.FechaGrabado > (Me.FechaInicioTrans + Me.HoraInicioTrans) Then
'        MsgBox "La configuración de la Transacción " & Me.CodTrans & " ha sido modificada, por lo tanto no podrá grabarla."
'        Set gnt = Nothing
'        Exit Sub
'    End If
    
'    Set gnt = Nothing
    
    'Si no está modificado no hace nada
    If Not mbooModificado Then Exit Sub
    
    'Cuando SoloVer está establecido a True, no puede grabar
    If mbooSoloVer Then
        Err.Raise ERR_SOLOVER, "GNComprobante.Grabar", MSGERR_SOLOVER
    End If
    '20/05/2005 JEAA REVISA COTIZACION
    If Len(Me.Empresa.GNOpcion.ObtenerValor("CotizacionPred" & Me.Empresa.GNOpcion.IndiceMoneda(mProps.CodMoneda))) > 0 Then
        If Me.Cotizacion(Me.Empresa.GNOpcion.IndiceMoneda(mProps.CodMoneda)) <> Me.Empresa.GNOpcion.ObtenerValor("CotizacionPred" & Me.Empresa.GNOpcion.IndiceMoneda(mProps.CodMoneda)) Then
                Err.Raise ERR_REPITECODIGO, "GNComprobante.Grabar", "La cotizacion es diferente a la Predeterminada."
        End If
    End If
    'Verifica los detalles de asiento
    VerificaAsiento VerificaCuadrado, VerificaInteg
    
    'Si está en modo de DEMO, verifica número de transacción grabado
    If Me.Empresa.SiiMain.ModoDemo Then VerificaDEMO
    BandCuadrado = Cuadrado  ' *** Oliver Para controlar si esta cuadrado y tiene aprobacion automatica
    'Si no necesita aprobación y está cuadrado el asiento
    If (Not GNTrans.NecesitaAprobacion) And BandCuadrado Then
        bandEstado = ESTADO_APROBADO         '***Agregado. Angel. 13/sep/2004
        Set pt = gobjMain.GrupoActual.PermisoActual.Trans(Me.CodTrans)
        If pt Is Nothing Then
            If Me.Empresa.GNOpcion.AutoImpresor Then
                Set gnt = Me.Empresa.RecuperaGNTrans(Me.CodTrans)
                If gnt.Modulo = "CT" Then
                    If BandCuadrado Then
                        'Graba como despachado
                        bandEstado = ESTADO_DESPACHADO         '***Agregado. jeaa 26/09/2006
                    End If
                End If
                Set gnt = Nothing
            End If
        Else
            If pt.Despachar And BandCuadrado Then
                'Graba como despachado
                bandEstado = ESTADO_DESPACHADO         '***Agregado. jeaa 26/09/2006
            End If
        End If
        If GNTrans.IVActualizaDsctoItemxCli Then
            For i = 1 To Me.CountIVKardex
                If Len(Me.IVKardex(i).Nota) > 0 And Len(Me.IVKardex(i).TiempoEntrega) = 0 Then ' And Me.IVKardex(i).Descuento <> 0 Then anulado 15/02/2016 x se aprueban pedidos
                    bandEstado = ESTADO_NOAPROBADO
                    Exit For
                End If
            Next i
        End If
            Set pt = Nothing
    Else
        'mProps.Estado = ESTADO_NOAPROBADO   'Sino graba como pendiente
        If GNTrans.IVNoCambiaEstadoTrans Then
            bandEstado = Me.Estado
        Else
            bandEstado = ESTADO_NOAPROBADO       '***Agregado. Angel. 13/sep/2004
        End If
        If GNTrans.AprobacionAutomatica Then   'Si esta en modo automatico dede aprobacion
                                               ' revisa si tiene permiso de aprobacion
            Set pt = gobjMain.GrupoActual.PermisoActual.Trans(Me.CodTrans)
            If pt.Aprobar And BandCuadrado Then
                'mProps.Estado = ESTADO_APROBADO     'Graba como aprobado
                bandEstado = ESTADO_APROBADO         '***Agregado. Angel. 13/sep/2004
            End If
            Set pt = Nothing
        End If
    End If
    
    '***Agregado. Angel. 13/sep/2004
    If EsNuevo Then
            mProps.Estado = bandEstado
            If mProps.PorcentIVA = 0 Then
                        
                If Me.FechaTrans < "01/06/2016" Then
                    mProps.PorcentIVA = Me.Empresa.GNOpcion.PorcentajeIVA
                ElseIf Me.FechaTrans > "31/05/2016" And Me.FechaTrans < "01/06/2017" And Not Me.BandAplicaIvaAnt Then
                    mProps.PorcentIVA = Me.Empresa.GNOpcion.PorcentajeIVAAnt
                ElseIf Me.FechaTrans >= Me.Empresa.GNOpcion.FechaIVA And Not Me.BandAplicaIvaAnt Then
                    Set pc = Me.Empresa.RecuperaPCProvCliQuick(Me.IdClienteRef)
                    If Not pc Is Nothing Then
                        If pc.bandCompensaIVA Then
                            mProps.PorcentIVA = Me.Empresa.GNOpcion.PorcentajeIVAAnt
                        Else
                            mProps.PorcentIVA = Me.Empresa.GNOpcion.PorcentajeIVA
                        End If
                    Else
                        mProps.PorcentIVA = Me.Empresa.GNOpcion.PorcentajeIVA
                    End If
                    Set pc = Nothing
                Else
                    mProps.PorcentIVA = Me.Empresa.GNOpcion.PorcentajeIVAAnt
                End If
            End If
            Me.BandFinalizado = Not (Me.GNTrans.IVNoEstadoFinalizar = True)
    Else
        If (bandEstado = ESTADO_APROBADO) And (mProps.Estado = ESTADO_DESPACHADO) Then
            'deja como despachado no se modifica el estado
        Else
            mProps.Estado = bandEstado
        End If
    End If
    
    'recupera el numero de autorizacion del sri y fecha de caducidad
    If Me.EsNuevo Then
        
        
        If Me.GNTrans.IVAutoImpresor Then
            mProps.AutorizacionSRI = mProps.objEmpresa.GNOpcion.NumAutorizacion_AutoImp
            mProps.FechaCaducidadSRI = mProps.objEmpresa.GNOpcion.FechaCaducidad_AutoImp
            mProps.FechaAutorizacionSRI = mProps.objEmpresa.GNOpcion.FechaAutorizacion_AutoImp
            mProps.NumSerieEstaSRI = Me.GNTrans.NumSerieEstablecimiento
            mProps.NumSeriePuntoSRI = Me.GNTrans.NumSeriePunto
            If Len(mProps.NumDocRef) = 0 Then
                mProps.NumDocRef = mProps.NumSerieEstaSRI & "-" & mProps.NumSeriePuntoSRI & "-" & Right("000000000" + Trim(Str(Me.GNTrans.NumTransSiguiente)), 9)
            End If
        ElseIf Me.GNTrans.IVComprobanteElectronico And Not Me.GNTrans.IVAmbientePruebaFE Then
            sql = "SELECT NumAutorizacion, FechaCaducidad, NumSerieEstablecimiento ,NumSeriePunto, isnull(FechaAutorizacion,getdate()) as FechaAutorizacion FROM GNTrans " & _
              "WHERE CodTrans='" & mProps.CodTrans & "'"
            Set rsaux = mProps.objEmpresa.OpenRecordset(sql)
            mProps.NumSerieEstaSRI = rsaux.Fields("NumSerieEstablecimiento")
            mProps.NumSeriePuntoSRI = rsaux.Fields("NumSeriePunto")
            mProps.TipoAmbiente = IIf(Me.GNTrans.IVAmbientePruebaFE, "1", "2")
        
        Else
            sql = "SELECT NumAutorizacion, FechaCaducidad, NumSerieEstablecimiento ,NumSeriePunto, isnull(FechaAutorizacion,getdate()) as FechaAutorizacion FROM GNTrans " & _
              "WHERE CodTrans='" & mProps.CodTrans & "'"
            Set rsaux = mProps.objEmpresa.OpenRecordset(sql)
            mProps.AutorizacionSRI = rsaux.Fields("NumAutorizacion")
            mProps.FechaCaducidadSRI = rsaux.Fields("FechaCaducidad")
            mProps.FechaAutorizacionSRI = rsaux.Fields("FechaAutorizacion")
            mProps.NumSerieEstaSRI = rsaux.Fields("NumSerieEstablecimiento")
            mProps.NumSeriePuntoSRI = rsaux.Fields("NumSeriePunto")
            Set rsaux = Nothing
        End If
    End If
    
    
    
    'Asigna CodUsuario actual para que quede con nombre de usuario
    'que hizo la ultima modificación.
    'mProps.CodUsuario = gobjUsuarioActual.CodUsuario '***Quitado. 06/ago/04. Angel
    'Para evitar que se cambie el usuario en caso de modificaciòn se agrega otro
    'codigo de usuario que modifica
    
    'Comienza la transaccion ----------------------------
#If DAOLIB Then
    gobjWS.BeginTrans
#Else
    mProps.objEmpresa.Coneccion.BeginTrans
#End If
    On Error GoTo ErrTrap
    
    '*** MAKOTO 13/oct/00 Agregado
    'If Me.Estado = ESTADO_APROBADO Then
    If bandEstado = ESTADO_APROBADO Then  '***Agregado. Angel. 13/sep/2004
        'Desaprueba otras transacciones del mismo C.Costo
        'si es que está configurado 'Aprobación única'
        mProps.objEmpresa.ProcAprobacionUnica Me.CodTrans, Me.idCentro
    End If
    
    'Si es nuevo y NumTrans no está asignado
'    If (NumTrans = 0) And EsNuevo Then             '*** MAKOTO 04/dic/00 Modificado no era necesario primera condición
    If EsNuevo Then
        mProps.NumTrans = AsignaNumTrans(mProps.CodTrans)       'Asigna un numero cogiendo de NumTransSiguiente de GNTrans
        If mobjGNTrans.IVNumRefAuto Then
            mProps.NumDocRef = AsignaNumRef(mProps.CodTrans)
        End If
        
    End If
    
    'Si tiene asiento y no está asignado un número de asiento
    If (mProps.CodAsiento = 0) And (CountCTLibroDetalle > 0) Then
        mProps.CodAsiento = AsignaNumTrans("_CTA")    'Asigna un numero cogiendo de NumTransSiguiente de GNTrans '_CTA'
    End If
    
'    If Me.GNTrans.IVAutoImpresor Then
'        If mProps.CodAsiento <> 0 Then
'            mProps.CodAsiento = 0
'        End If
'    End If
    
'    If Me.GNTrans.IVVisiblePresupuesto Then
    If Len(mProps.objEmpresa.GNOpcion.ObtenerValor("Presupuesto")) > 0 Then
        If mProps.objEmpresa.GNOpcion.ObtenerValor("Presupuesto") = "1" Then
        'Si tiene asiento y no está asignado un número de asiento
            If (mProps.CodPRAsiento = 0) And (CountPRLibroDetalle > 0) Then
                mProps.CodPRAsiento = AsignaNumTrans("_PRCT")    'Asigna un numero cogiendo de NumTransSiguiente de GNTrans '_CTA'
            End If
        End If
    End If
    
    
    'Verifica que no repita CodTrans y NumTrans
    sql = "SELECT TransID FROM GNComprobante " & _
          "WHERE CodTrans='" & mProps.CodTrans & "' AND NumTrans=" & mProps.NumTrans
    If Not EsNuevo Then sql = sql & " AND TransID<>" & mProps.transid
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    If Not rs.EOF Then
        Err.Raise ERR_REPITECODIGO, "GNComprobante.Grabar", "El número de transacción ya existe."
    End If
    rs.Close


    'Cuando es nuevo
    If mbooEsNuevo Then
        '***Agregado. 06/ago/2004. Angel. Graba el usuario que crea y a la vez es el que modifica
        'mProps.CodUsuario = gobjUsuarioActual.CodUsuario
        If Not Me.GNTrans.RequierePasswordVen And Me.EsNuevo Then
            mProps.codUsuario = gobjUsuarioActual.codUsuario
        End If
        mProps.CodUsuarioModifica = mProps.codUsuario
        sql = "SELECT * FROM GNComprobante WHERE 1=0"
        Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
        rs.AddNew
        
    'Cuando es modificación
    Else
        '***Agregado. 06/ago/2004. Angel. Actualiza el usuario que modifica y no el que crea
        mProps.CodUsuarioModifica = gobjUsuarioActual.codUsuario
        mProps.CodUsuarioAutoriza = mProps.CodUsuarioAutoriza
        'Recupera el registro correspondiente para modificar
        sql = "SELECT * FROM GNComprobante WHERE TransID=" & mProps.transid
        Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
#If DAOLIB Then
        rs.Edit
#End If
        
        'Verifica la FechaGrabado para asegurar que otros usuarios no ha modificado el mismo registro
        If rs!fechagrabado <> mProps.fechagrabado Then
            Err.Raise ERR_MODIFICADO, "GNComprobante.Grabar", MSGERR_MODIFICADO
        End If
        
        'If Me.GNTrans.CodPantalla <> "IVOP" Then
            'Si no ESTABA anulado en la base (no en objeto de la memoria)
            If rs!Estado <> ESTADO_ANULADO Then
                'Devuelve la cantidad de la existencia
                If Me.Empresa.GNOpcion.IVKTipoDatoDouble Then
                    ActualizaCantidadDou "-"
                Else
                    ActualizaCantidad "-"
                End If
                'If Me.GNTrans.CodPantalla = "IVGNS" Then
                If Me.GNTrans.IVGeneraNumSerie Then
                    ActualizaCantidadIVSerie "-"
                End If
            End If
    
            'Elimina todos los registros relacionados en CTLibroDetalle
            sql = "DELETE FROM CTLibroDetalle WHERE CodAsiento=" & mProps.CodAsiento
            mProps.objEmpresa.Execute sql, True
        
            'Elimina todos los registros relacionados en TSKardex
            sql = "DELETE FROM TSKardex WHERE TransID=" & mProps.transid
            mProps.objEmpresa.Execute sql, True
        
            '*** MAKOTO 07/feb/01 Agregado
            'Elimina todos los registros relacionados en TSKardex
            sql = "DELETE FROM TSKardexRet WHERE TransID=" & mProps.transid
            mProps.objEmpresa.Execute sql, True
        
            
            'Elimina todos los registros relacionados en IVKardex
            sql = "DELETE FROM IVConsumoDetalle WHERE TransID=" & mProps.transid
            mProps.objEmpresa.Execute sql, True
            
            
            
            'Elimina todos los registros relacionados en IVKardex
            sql = "DELETE FROM IVKardex WHERE TransID=" & mProps.transid
            mProps.objEmpresa.Execute sql, True
            For i = 1 To Me.CountIVKardex
                sql = "DELETE FROM ivinventariodetallepaca WHERE idKardex=" & Me.IVKardex(i).Id
                mProps.objEmpresa.Execute sql, True
            Next
            
            sql = "DELETE FROM RolDetalle WHERE TransID=" & mProps.transid
            mProps.objEmpresa.Execute sql, True
    
        
            'Elimina todos los registros relacionados en IVKardexRecargo
            sql = "DELETE FROM IVKardexRecargo WHERE TransID=" & mProps.transid
            mProps.objEmpresa.Execute sql, True
        
            'Elimina todos los registros relacionados en PCKardex
            sql = "DELETE FROM PCKardex WHERE TransID=" & mProps.transid
            mProps.objEmpresa.Execute sql, True
            
            'Elimina todos los registros relacionados en PCKardexCHP
            sql = "DELETE FROM PCKardexCHP WHERE TransID=" & mProps.transid
            mProps.objEmpresa.Execute sql, True
            
            
            'Elimina todos los registros relacionados en CcKardex
            sql = "DELETE FROM CcKardex WHERE TransID=" & mProps.transid
            mProps.objEmpresa.Execute sql, True
        
            'Elimina todos los registros relacionados en AFKardex
            sql = "DELETE FROM AFKardex WHERE TransID=" & mProps.transid
            mProps.objEmpresa.Execute sql, True
            
            'Elimina todos los registros relacionados en AFKardexRecargo
            sql = "DELETE FROM AFKardexRecargo WHERE TransID=" & mProps.transid
            mProps.objEmpresa.Execute sql, True
        
            'Elimina todos los registros relacionados en TSKardexConcilia
            sql = "DELETE FROM TSKardexConcilia WHERE TransID=" & mProps.transid
            mProps.objEmpresa.Execute sql, True
        
            'Elimina todos los registros relacionados en AFKardexCustodio
            sql = "DELETE FROM AFKardexCustodio WHERE TransID=" & mProps.transid
            mProps.objEmpresa.Execute sql, True
            
            'Elimina todos los registros relacionados en IRKARDEX
            sql = "DELETE FROM IRKardex WHERE TransID=" & mProps.transid
            mProps.objEmpresa.Execute sql, True
        
        
            'Elimina todos los registros relacionados en gnoferta
            sql = "DELETE FROM gnoferta WHERE TransID=" & mProps.transid
            mProps.objEmpresa.Execute sql, True
        
            'Elimina todos los registros relacionados en VTKardexConcilia
            sql = "DELETE FROM VTKardexConcilia WHERE TransID=" & mProps.transid
            mProps.objEmpresa.Execute sql, True
        
            'Elimina todos los registros relacionados en IVKardexArancel
            sql = "DELETE FROM IVKardexArancel WHERE TransID=" & mProps.transid
            mProps.objEmpresa.Execute sql, True
        
        
            'Elimina todos los registros relacionados en ivkardexconciliacarcasa
            sql = "DELETE FROM ivkardexconciliacarcasa WHERE TransID=" & mProps.transid
            mProps.objEmpresa.Execute sql, True

        
        
            'Elimina todos los registros relacionados en TSKardexConcilia
            sql = "DELETE FROM VTKardexConciliaTrans WHERE TransID=" & mProps.transid
            mProps.objEmpresa.Execute sql, True
            
            sql = "DELETE FROM IVKProceso WHERE TransID=" & mProps.transid
            mProps.objEmpresa.Execute sql, True
        
            'Elimina todos los registros relacionados en RGKardex
            sql = "DELETE FROM RGKardex WHERE TransID=" & mProps.transid
            mProps.objEmpresa.Execute sql, True
     
           'auc esto no deberia ir esta borrando cuando regenera costos
            'sql = "DELETE FROM      GNExistDocumento WHERE TransID=" & mProps.transid
            'mProps.objEmpresa.Execute sql, True
     

            'Elimina todos los registros relacionados en IVKardexConciliaCarcasa
            sql = "DELETE FROM gnkardexdocumento WHERE TransID=" & mProps.transid
            mProps.objEmpresa.Execute sql, True
    
        'Elimina todos los registros relacionados en IVFinanciamientoItem
            sql = "DELETE FROM IVFinanciamientoItem WHERE TransID=" & mProps.transid
           mProps.objEmpresa.Execute sql, True
            'Elimina todos los registros relacionados en PCFinanciamiento
            sql = "DELETE FROM PCFinanciamiento WHERE TransID=" & mProps.transid
            mProps.objEmpresa.Execute sql, True
            'Elimina todos los registros relacionados en GNFinanciamiento
            sql = "DELETE FROM GNFinanciamiento WHERE TransID=" & mProps.transid
            mProps.objEmpresa.Execute sql, True
            
            sql = "DELETE FROM IVKardexSerie WHERE TransID=" & mProps.transid
            mProps.objEmpresa.Execute sql, True


            'sql = "DELETE FROM GNCall WHERE TransID=" & mProps.transid
           ' mProps.objEmpresa.Execute sql, True

            'Recupera datos del Detalle Efectivo
            If Me.GNTrans.CodPantalla = "TSIECC" Or Me.GNTrans.CodPantalla = "TSIECV" Then
        
                'Elimina todos los registros relacionados en TSDetalleEfectivo
                sql = "DELETE FROM TSDetalleEfectivo WHERE TransID=" & mProps.transid
                mProps.objEmpresa.Execute sql, True
            
                'Elimina todos los registros relacionados en TSDetalleCheque
                sql = "DELETE FROM TSDetalleCheque WHERE TransID=" & mProps.transid
                mProps.objEmpresa.Execute sql, True
                
                'Elimina todos los registros relacionados en TSDetalleTarjeta
                sql = "DELETE FROM TSDetalleTarjeta WHERE TransID=" & mProps.transid
                mProps.objEmpresa.Execute sql, True
            
                'Elimina todos los registros relacionados en TSDetalleVmanuales
                sql = "DELETE FROM TSDetalleVManuales WHERE TransID=" & mProps.transid
                mProps.objEmpresa.Execute sql, True
            
                'Elimina todos los registros relacionados en TSDetalleEgreso
                sql = "DELETE FROM TSDetalleEgreso WHERE TransID=" & mProps.transid
                mProps.objEmpresa.Execute sql, True
            
                'Elimina todos los registros relacionados en TSDetalleVCredito
                sql = "DELETE FROM TSDetalleVCredito WHERE TransID=" & mProps.transid
                mProps.objEmpresa.Execute sql, True
                
                'Elimina todos los registros relacionados en TSDetalleIngreso
                sql = "DELETE FROM TSDetalleIngreso WHERE TransID=" & mProps.transid
                mProps.objEmpresa.Execute sql, True
                
                'Elimina todos los registros relacionados en TSDetalleIngresoRT
                sql = "DELETE FROM TSDetalleIngresoRT WHERE TransID=" & mProps.transid
                mProps.objEmpresa.Execute sql, True
                
                
                 'Elimina todos los registros relacionados en TSRESUMEN
                sql = "DELETE FROM TSResumen WHERE TransID=" & mProps.transid
                mProps.objEmpresa.Execute sql, True
                
                'Elimina todos los registros relacionados en TSDetalleCheque
                sql = "DELETE FROM TSDetalleChequePosf WHERE TransID=" & mProps.transid
                mProps.objEmpresa.Execute sql, True
                
                
            End If
        End If
    'End If

     'AUC GNFUENTE 31/12/08, '16/05//2010 Revisar mas adelante si esto me servira en el futuro

    If Me.GNTrans.CodPantalla = "IVDEV" Or Me.GNTrans.CodPantalla = "IVDEVE" Or Me.GNTrans.CodPantalla = "IVDVALQ" Then
        sql = "DELETE FROM GNFUENTE WHERE TRANSID = " & mProps.transid  'mProps.IdTransFuente
        mProps.objEmpresa.Execute sql, True
    End If

    If Me.GNTrans.CodPantalla = "IVPVTS" And Me.GNTrans.IVVisItemPromocion And Me.EsNuevo Then
        'Agrega Items Promoción
        VerificarPromociones
    End If

    If Len(mProps.objEmpresa.GNOpcion.ObtenerValor("Presupuesto")) > 0 Then
        If mProps.objEmpresa.GNOpcion.ObtenerValor("Presupuesto") = "1" Then
            'Elimina todos los registros relacionados en PRLibroDetalle
            sql = "DELETE FROM PRLibroDetalle WHERE CodAsiento=" & mProps.CodPRAsiento
            mProps.objEmpresa.Execute sql, True
        End If
    End If


    'Graba en GNComprobante
    With rs
        !CodTrans = mProps.CodTrans
        !NumTrans = mProps.NumTrans
        If Not Me.GNTrans.IVAutoImpresor Then
            !CodAsiento = mProps.CodAsiento
        Else
            If Me.FechaTrans > "30/06/2011" Then
                !CodAsiento = 0
            Else
                !CodAsiento = mProps.CodAsiento
            End If
        End If
       
        '*** MAKOTO 06/mar/01 Mod.
'#If DAOLIB Then
'        sql = Format(mProps.HoraTrans, "1899/12/3\0 Hh:Nn:Ss")  'ejm. '1899/12/30 15:20:30'
'#Else
'        sql = Format(mProps.HoraTrans, "19\0\0/01/01 Hh:Nn:Ss")  'ejm. '1900/01/01 15:20:30'
'#End If
        sql = HoraHMS(mProps.HoraTrans, Me.Empresa.TipoDB, True, True)
        !HoraTrans = sql
        !FechaTrans = mProps.FechaTrans
        
        '***Modificado. 17/jun/04. Angel
        '***Controlar que el campo descripcion no se grabe más de 120 caracteres
        'jeaa 14-04-04 cooregido descripcion duplicada
        datos_pc = ""
        If GNTrans.IVMostrarVuelto Then
            If mProps.GrabaDatosPC And GNTrans.IVVisualizaDatosPC Then   '********** jeaa 14-1-04 si es true graba
                datos_pc = "[" & mProps.Telefono & ";" & mProps.RUC & ";" & mProps.Direccion & ";]"
            End If
            If (Len(datos_pc) + Len(mProps.Efectivo) + Len(mProps.Descripcion)) > 120 Then
                mProps.Descripcion = Mid$(mProps.Descripcion, 1, (120 - (Len(datos_pc) + Len(mProps.Efectivo) + 3)))
            End If
            mProps.Descripcion = mProps.Descripcion & datos_pc & mProps.Efectivo
            'Me.Descripcion = mProps.Descripcion & mProps.efectivo
        Else
            If mProps.GrabaDatosPC And GNTrans.IVVisualizaDatosPC Then   '********** jeaa 14-1-04 si es true graba
                datos_pc = "[" & mProps.Telefono & ";" & mProps.RUC & ";" & mProps.Direccion & ";]"
                If (Len(datos_pc) + Len(mProps.Descripcion)) > 120 Then
                    mProps.Descripcion = Mid$(mProps.Descripcion, 1, (120 - (Len(datos_pc))))
                End If
                mProps.Descripcion = mProps.Descripcion & datos_pc
            End If
        End If
        
        !Descripcion = mProps.Descripcion
        !codUsuario = UCase(mProps.codUsuario)
        !IdResponsable = mProps.IdResponsable
        !NumDocRef = mProps.NumDocRef
        !Estado = mProps.Estado
        !PosID = mProps.PosID
        !NumTransCierrePOS = mProps.NumTransCierrePOS
        !idCentro = mProps.idCentro
        !IdTransFuente = mProps.IdTransFuente
        For i = 2 To MONEDA_MAX
            .Fields("Cotizacion" & i) = mProps.Cotizacion(i)
        Next i
        !CodMoneda = mProps.CodMoneda
        If Me.GNTrans.Modulo = "CT" And mProps.IdEmpleadoRef <> 0 Then
            !IdProveedorRef = mProps.IdEmpleadoRef
        Else
            !IdProveedorRef = mProps.IdProveedorRef
        End If
        !IdClienteRef = mProps.IdClienteRef
        !IdVendedor = mProps.IdVendedor
        
        '*** MAKOTO 05/feb/01 Agregado
        !Nombre = mProps.Nombre
        
        '*** Agregado. 06/Ago/2004. Angel
        !CodUsuarioModifica = UCase(mProps.CodUsuarioModifica)
        
        '*** Agregado. 30/09/2004. jeaa
        !Impresion = mProps.Impresion
        !fechagrabado = Now
        '*** Agregado. 25/04/2005. jeaa
        !IdMotivo = mProps.IdMotivo
        '*** Agregado. 06/02/2006. jeaa
        !Comision = mProps.Comision
        !FechaDevol = mProps.FechaDevol ' AUC 13/03/06
        '*** Agregado. 27/05/2007 jeaa
        !ComisionCobrador = mProps.ComisionCobrador
        'jeaa 13/09/2007
        If Me.GNTrans.CodPantalla = "GNPENDIA" And Me.EsNuevo Then
            !AutorizacionSRI = Null
        Else
            !AutorizacionSRI = mProps.AutorizacionSRI
        End If
        
        !FechaCaducidadSRI = mProps.FechaCaducidadSRI

        !FechaAutorizacionSRI = mProps.FechaAutorizacionSRI
        !NumSerieEstaSRI = mProps.NumSerieEstaSRI
        !NumSeriePuntoSRI = mProps.NumSeriePuntoSRI
        
        
        'auc 24/10/07
        !Estado1 = mProps.Estado1
        !Estado2 = mProps.Estado2
        !NumDias = mProps.NumDias
        !CodUsuarioAutoriza = UCase(mProps.CodUsuarioAutoriza)  'jeaa 25/09/2008
        '!NumDias = mProps.NumDias
        !BandCierre = mProps.BandCierre 'AUC 08/12/06
        'AUC 12/02/07 graba fechadevol para alquileres
        If Me.GNTrans.CodPantalla = "IVRES_ALQ" Or Me.GNTrans.CodPantalla = "IVBQD2B" Or Me.GNTrans.CodPantalla = "IVBQD2BE" Or Me.GNTrans.CodPantalla = "GENROL" Or Me.GNTrans.CodPantalla = "GENRD" Then
            !FechaDevol = mProps.FechaDevol 'AUC
        Else
            !FechaDevol = Now
        End If
        !IdGaranteRef = mProps.IdGaranteRef
        !IdObra = mProps.IdObra
        !IdZona = mProps.IdZona
        !IdDescuento = mProps.IdDescuento
        !IDForma = mProps.IDForma
        If Len(mProps.objEmpresa.GNOpcion.ObtenerValor("Presupuesto")) > 0 Then
            If mProps.objEmpresa.GNOpcion.ObtenerValor("Presupuesto") = "1" Then
                !CodPRAsiento = mProps.CodPRAsiento
            End If
        End If
        !PorcentajeIVA = mProps.PorcentIVA
        '!IdEmpleadoRef = mProps.IdEmpleadoRef
        '!CodEmpleadoRef = mProps.CodEmpleadoRef
        !IdTipoRol = mProps.IdTipoRol
        !PCPorDesc = mProps.PCPorDesc
        !BandFinalizado = mProps.BandFinalizado
        !idCentroHijo = mProps.idCentroHijo
        !EstadoFacElect = mProps.EstadoFacElect
        .Update
#If DAOLIB Then
        rs.Bookmark = rs.LastModified
#End If
        .Move 0             'Para actualizar
        fgrabado = !fechagrabado            'Guarda la fecha de grabación para asignarla cuando logra grabar todo lo de mas
        mProps.transid = !transid             'Guarda el TransId(Autonumerico)
        If mProps.BandPorMovil Then
            mProps.FechaEntrega = fgrabado
        End If
        .Close
    End With

            If Not Me.GNTrans.IVAutoImpresor Then
                'Graba todos los Asientos
                For i = 1 To CountCTLibroDetalle
                    CTLibroDetalle(i).Grabar
                Next i
            Else
                If Me.FechaTrans < "01/07/2011" Then
                    For i = 1 To CountCTLibroDetalle
                        CTLibroDetalle(i).Grabar
                    Next i
                End If
            End If
            'Graba todos los TSKardex
            For i = 1 To CountTSKardex
                TSKardex(i).Grabar
            Next i
            'Graba todos los TSKardexRet        '*** MAKOTO 07/feb/01 Agregado
            For i = 1 To CountTSKardexRet
                TSKardexRet(i).Grabar
            Next i
            'Graba todos los IVKardex
            For i = 1 To CountIVKardex
                IVKardex(i).Grabar
            Next i
            'Graba todos los IVKardexRecargo
            For i = 1 To CountIVKardexRecargo
                IVKardexRecargo(i).Grabar
            Next i
            
            'Graba todos los PCKardex
            For i = 1 To CountPCKardex
                PCKardex(i).Grabar
            Next i
            
            'Graba todos los PCKardexCHP
            For i = 1 To CountPCKardexCHP
                PCKardexCHP(i).Grabar
            Next i
            
            
            'Graba todos los CcKardex
            For i = 1 To CountCcKardex
                CcKardex(i).Grabar
            Next i
            
            'Graba todos los AFKardex
            For i = 1 To CountAFKardex
                AFKardex(i).Grabar
            Next i
            
            'Graba todos los AFKardexRecargo
            For i = 1 To CountAFKardexRecargo
                AFKardexRecargo(i).Grabar
            Next i
            
            'Graba todos los TSKardexConcilia
            For i = 1 To CountTSKardexConcilia
                TSKardexConcilia(i).Grabar
            Next i
            
            
            If Me.GNTrans.CodPantalla = "GENROL" Or Me.GNTrans.CodPantalla = "GENROLP" Then
                For i = 1 To CountRolDetalle
                    RolDetalle(i).Grabar
                Next i
            End If

        If Len(mProps.objEmpresa.GNOpcion.ObtenerValor("Presupuesto")) > 0 Then
            If mProps.objEmpresa.GNOpcion.ObtenerValor("Presupuesto") = "1" Then
                'Graba todos los PRAsientos
                For i = 1 To CountPRLibroDetalle
                    PRLibroDetalle(i).Grabar
                Next i
                
                
            End If
        End If
        
         'Graba todos los AFKardexCustodio
        For i = 1 To CountAFKardexCustodio
            AFKardexCustodio(i).Grabar
        Next i
        'Graba todos los IVKardexArancel
        For i = 1 To CountIVKardexArancel
            IVKardexArancel(i).Grabar
        Next i
        'AUC Graba relacion de dependencia
        If Me.GNTrans.CodPantalla = "GENRD" Then
            For i = 1 To CountIRKardex
                IRKardex(i).Grabar
            Next i
        End If
        
        'Graba todos los VTKardexConcilia
        For i = 1 To CountVTKardexConcilia
            VTKardexConcilia(i).Grabar
        Next i
        
        'Graba todos los VTKardexConciliaTrans
        For i = 1 To CountVTKardexConciliaTrans
            VTKardexConciliaTrans(i).Grabar
       Next i
        
        
        'Graba todos los GNKardexDocumento
        For i = 1 To CountGNKardexDocumento
            GNKardexDocumento(i).Grabar
        Next i
        
        
        'Graba todos los RGKardex
        If Me.CodTipoComp = "41" Then
            For i = 1 To CountRGKardex
                RGKardex(i).Grabar
            Next i
        End If
        
        
            'Graba todos los TSKardexConcilia
''''            For i = 1 To CountGNKardexDocumento
''''                GNKardexDocumento(i).grabar
''''            Next i
        
        
            'Recupera datos del Detalle Efectivo
         If Me.GNTrans.CodPantalla = "TSIECC" Or Me.GNTrans.CodPantalla = "TSIECV" Then
            'Graba todos los TSDetalleEfectivo
            For i = 1 To CountTSDetalleEfectivo
                TSDetalleEfectivo(i).Grabar
            Next i
            
            'Graba todos los TSDetalleCheque
            For i = 1 To CountTSDetalleCheque
                TSDetalleCheque(i).Grabar
            Next i
            
            'Graba todos los TSDetalleTarjeta
            For i = 1 To CountTSDetalleTarjeta
                TSDetalleTarjeta(i).Grabar
            Next i
            'Graba todos los TSDetalleVmanuales
            For i = 1 To CountTSDetalleVManuales
                TSDetalleVManuales(i).Grabar
            Next i
        
            'Graba todos los TSDetalleEgreso
            For i = 1 To CountTSDetalleEgreso
                TSDetalleEgreso(i).Grabar
            Next i
        
            'Graba todos los TSDetalleVCredito
            For i = 1 To CountTSDetalleVCredito
                TSDetalleVCredito(i).Grabar
            Next i
        
            'Graba todos los TSDetalleVCreditoret
            For i = 1 To CountTSDetalleVCreditoRet
                TSDetalleVCreditoRet(i).Grabar
            Next i
            'Graba todos los TSDetalleIngreso
            For i = 1 To CountTSDetalleIngreso
                TSDetalleIngreso(i).Grabar
            Next i
            
            'Graba todos los TSDetalleIngresoRT
            For i = 1 To CountTSDetalleIngresoRT
                TSDetalleIngresoRT(i).Grabar
            Next i
            
            For i = 1 To CountTSResumen
                TSResumen(i).Grabar
            Next i
            
            'Graba todos los TSDetalleChequePosf
            For i = 1 To CountTSDetalleChequePosf
                TSDetalleChequePosf(i).Grabar
            Next i
            
            
        End If
        If InStr(1, UCase(Me.Empresa.CodEmpresa), "ECUA") And Me.GNTrans.CodPantalla = "IVOP" Then 'PARA ECUAMUEBLE
            For i = 1 To CountIVKProceso
                IVKProceso(i).Grabar
            Next i
        End If


        'Graba todos los VTKardexConcilia
        For i = 1 To CountIVKardexConciliaCarcasa
            IVKardexConciliaCarcasa(i).Grabar
        Next i
        
        For i = 1 To CountGNFinan
            GNFinan(i).Grabar
        Next i
        For i = 1 To CountIVKNumSerie
                IVKNumSerie(i).GrabarIVKardexSerie 1
        Next i
'        For i = 1 To CountGnCall
'                GNCall(i).Grabar
'        Next i
        
    If InStr(1, UCase(Me.Empresa.CodEmpresa), "ISO") > 0 And Not Me.NumDias <> 1 Then
    
        If Estado <> ESTADO_ANULADO Then
            'Suma la cantidad a la existencia
            If Me.GNTrans.Modulo = "AF" Then
                ActualizaCantidadAF "+"
            ElseIf Me.GNTrans.IVTipoTrans <> "A" Then
                If Me.Empresa.GNOpcion.IVKTipoDatoDouble Then
                    ActualizaCantidadDou "+"
                Else
                    ActualizaCantidad "+"
                End If
'                 If Me.GNTrans.CodPantalla = "IVGNS" Then
'                    ActualizaCantidadIVSerie "+"
'               End If
            End If
        End If
    Else
        'Si no está anulado el comprobante
        If Estado <> ESTADO_ANULADO Then
            'Suma la cantidad a la existencia
            If Me.GNTrans.Modulo = "AF" Then
                ActualizaCantidadAF "+"
                ActualizaCantidadAFCustodio "+"
            ElseIf Me.GNTrans.Modulo = "TS" Then
                ActualizaCantidadGNDocumento "+"
            
            Else
            'ElseIf Me.GNTrans.IVTipoTrans <> "A" Then
                If Me.Empresa.GNOpcion.IVKTipoDatoDouble Then
                    ActualizaCantidadDou "+"
                Else
                   ActualizaCantidad "+"
                End If
                 ' If Me.GNTrans.CodPantalla = "IVGNS" Then
                If Me.GNTrans.IVGeneraNumSerie Then 'AUC cambiado
                    ActualizaCantidadIVSerie "+"
               End If
            End If
            
        End If
    End If
    
    'Cambia a estado Despachado las transacciones de fuente
    'CambiaEstadoDeFuente            '*** MAKOTO 15/dic/00 'NO SE PORQUE ESTARIA OCULTA

''''    If Estado <> ESTADO_ANULADO And Me.GNTrans.IVTipoTrans <> "A" Then
''''        'Suma la cantidad a la existencia
''''        ActualizaCantidad "+"
''''    End If


    'actualiza detalle de items-proveedor 24/01/2006 jeaa
    If GNTrans.IVActualizaItemProv Then
        ActualizaDetalleItemProveedor
    End If
    '********************** jeaa 28/06/2007
    If GNTrans.IVActualizaPrecios Then
        ActualizaPrecio
    End If
    '**********************
    'Graba en GNLogAccion para utilizarlo como historial
    If mbooEsNuevo Then             '*** ANGEL 18/mar/02
        mProps.objEmpresa.GrabaGNLogAccion "NUE_TRANS", "Crea Transacción: " & _
                                                         mProps.CodTrans & mProps.NumTrans, GNTrans.Modulo
                                                         
        If Me.GNTrans.AfectaCantidadDocumento Then
            AseguraMovimientoExistenciaDocumento
        End If
    Else
        
        'jeaa 05/04/05 agregado quien creo transaccion
        mProps.objEmpresa.GrabaGNLogAccion "MOD_TRANS", "Modifica Transacción: " & _
                                                         mProps.CodTrans & mProps.NumTrans & " Creado por: " & mProps.codUsuario, GNTrans.Modulo
    End If
    
    'Si hay datos de anexos, grabarlos
    If Me.GNTrans.Empresa.GNOpcion.ObtenerValor("PermiteControlAspectosAnexos") = "1" And _
    Me.GNTrans.IVVisibleAnexos Then GrabarAnexos
    
    
    
    
    'Si hay datos de anexos, grabarlos
    If Me.GNTrans.Empresa.GNOpcion.ObtenerValor("PermiteControlAspectosAnexos") = "1" And _
    Me.GNTrans.IVDatosExportacion Then GrabarAnexosExportacion
    
    
    
    'Si hay datos de anexos, grabarlos
    If Me.GNTrans.Empresa.GNOpcion.ObtenerValor("PermiteControlAspectosAnexos") = "1" And _
            Me.GNTrans.Modulo = "TS" Then GrabarAnexos
    
    
    'jeaa 23/03/2009
    'graba datos del financiamiento
    If Me.GNTrans.IVVisualizarNumPagos Or Me.GNTrans.CodPantalla = "TSIER" Then
        GrabaFinanciamiento
    End If
    
    'AUC graba en Historial la transaccion
    If Me.GNTrans.GrabaHistorial Then
        t = Abs(Me.IVKardexTotal(False))    'Total NETO sin recargo prorateado
        tdesc = Me.IVKardexDescItemTotalTarifaconIVA
        tdesc0 = IVKardexDescItemTotalTarifasinIVA
        t = t - tdesc - tdesc0 + Me.TotalRecargos
        Me.Empresa.GrabaHistorial Me.IdClienteRef, Me.transid, Me.FechaTrans, Me.Estado, Me.CodTrans & " " & Me.NumTrans, Me.Descripcion, t, EsNuevo
    End If
        
    
        'jeaa 25/09/2007
    'alerta sobre transacciones con documentos preimpresos caducados o fuera
    'del rango de impresion
    If Me.GNTrans.Empresa.GNOpcion.ObtenerValor("AlertaRangoFechaCaducidad") = "1" Then
    
'        If Not ((Me.GNTrans.AnexoCodTipoTrans = "1" Or Me.GNTrans.AnexoCodTipoComp = "7") And Me.GNTrans.Empresa.GNOpcion.ObtenerValor("ImportaDatosFactura") = "0") Then
'            If Me.GNTrans.NumTransUltimoPreimpreso < mProps.NumDocRef Then
'                MsgBox "Esta creando una Transacción " & mProps.CodTrans & Chr(13) & "Que tiene el # de Formulario Preimpreso Fuera del Rango Configurado " & Chr(13) & "# Ultimo Preimpreso:" & Me.GNTrans.NumTransUltimoPreimpreso
'            End If
'        End If
    End If

    'jeaa 24/03/2008
    'Graba informacion de IMportaciones y Exportaciones
    'del rango de impresion
    If Me.GNTrans.IVTipoTrans = "X" Or Me.GNTrans.IVTipoTrans = "Y" Or Me.GNTrans.IVDatosImportacion Then
        GrabarDatosImportacionExportacion
    End If
    GrabarOferta
    If Me.GNTrans.CodPantalla = "PRPR" Or Me.GNTrans.CodPantalla = "PRPRRC" Then
        GrabarRequerimiento
    End If
    If Len(Me.idFuentes) > 0 Or Len(Me.idCentros) > 0 Then
        GrabaIdFuentes
    End If
    
    If Me.GNTrans.IVGuiaRemision Then
        GrabarGuia
    End If
    
    If Me.GNTrans.CodPantalla = "IVBQD2PCKL" Then
        GrabarLacteos
    End If
    
    
    If Me.GNTrans.IVAutoImpresor Then
        If Me.GNTrans.AnexoCodTipoTrans = "1" Then
            If Me.GNTrans.AnexoCodTipoComp Then
                GeneraRetencion
            End If
        Else
            Select Case Me.GNTrans.TipoTrans
            Case "1"
                GeneraFactura
            Case "2"
                GeneraFactura
            Case "4"
                GeneraNotaCredito
            
            End Select
        End If
        If Me.Empresa.GNOpcion.ObtenerValor("PermiteCrearTransacciones") = "1" Then
            Me.Empresa.GNOpcion.AsignarValor "PermiteCrearTransacciones", "0"
            Me.Empresa.GNOpcion.Grabar
        End If
        
    End If
    
    If Len(Me.Empresa.GNOpcion.ObtenerValor("OmitirAuditoriaTransaccional")) > 0 Then
        If Me.Empresa.GNOpcion.ObtenerValor("OmitirAuditoriaTransaccional") = 0 Then
            If BandNoGrabaTransXML Then
                GeneraArchivoTransXML (Not bandModif)
            End If
        End If
    End If
    
    If Me.EsNuevo Then
        If Me.GNTrans.IVComprobanteElectronico Then
            If Me.GNTrans.AnexoCodTipoTrans = "1" Then
                If Me.GNTrans.AnexoCodTipoComp = "7" Then
                    'GeneraArchivoXMLComprobanteElectronicoRetencion True
                End If
            ElseIf Me.GNTrans.AnexoCodTipoTrans = "2" Then
                If Me.GNTrans.AnexoCodTipoComp = "18" Then
                    If Me.GNTrans.IVGeneraFormatoEstandarXML Then
                        GeneraArchivoXMLComprobanteElectronicoFacturaUTF8 True
                    End If
                    'GrabarDatosElectronicos
                ElseIf Me.GNTrans.AnexoCodTipoComp = "4" Then
                    If Me.GNTrans.IVGeneraFormatoEstandarXML Then
                        GeneraArchivoXMLComprobanteElectronicoNotaCreditoUTF8 True
                    End If
                    'GrabarDatosElectronicos
                ElseIf Me.GNTrans.AnexoCodTipoComp = "5" Then
'                    GeneraArchivoXMLComprobanteElectronicoNotaDebitoUTF8 True
                    'GrabarDatosElectronicos
                End If
            End If
            GrabarDatosElectronicos
        End If
 '       End If
    End If
    'GrabarVehiculoPlan 'AUC para ricaurtesa
     If Me.GNTrans.CodPantalla = "IVBQDPACA" Then
        GrabarSacaHist
    End If
    BandGrabado = True
    'Completa la transacción ----------------------------
#If DAOLIB Then
    gobjWS.CommitTrans
#Else
    mProps.objEmpresa.Coneccion.CommitTrans
#End If
    'Cambia a estado Despachado las transacciones de fuente
    If BandGrabado Then
        CambiaEstadoDeFuente            '*** MAKOTO 15/dic/00
        'CambiaBandFinalizadoDeFuente
        If Me.GNTrans.IVCambiarEstadoFinalizar Then
            CambiaBandFinalizadoDeFuente
        End If
        CambiaEstadoOcupado
    End If
    
    If mProps.IdClienteRef <> 0 Then
        Set pc = Me.Empresa.RecuperaPCProvCliQuick(mProps.IdClienteRef)
        If pc.BandOmitirPendientes Then
            CambiaCliente_BandOmitirPendientes mProps.IdClienteRef, False
        End If
        Set pc = Nothing
    End If
    mProps.fechagrabado = fgrabado      'Aplica la fecha de grabación
    RaiseEvent Grabado
    mbooEsNuevo = False
    mbooModificado = False
    'RaiseEvent Grabado
        
     Exit Sub
    
       
ErrTrap:
    'Anula la transacción ----------------------------
#If DAOLIB Then
    gobjWS.Rollback
#Else
    mProps.objEmpresa.Coneccion.RollbackTrans
    
    If Me.GNTrans.IVAutoImpresor Then
    
        Ruta = Me.Empresa.GNOpcion.RutaXMLValido

        Nombre = "01" & "-" & Me.NumSerieEstaSRI & "-" & Me.NumSeriePuntoSRI & "-" & Right("000000000" + Trim(Str(Me.NumTrans)), 9) & ".XML"
        If Mid$(Ruta, Len(Ruta), 1) = "/" Then
            Ruta = Ruta & "\"
        End If
        file = Ruta & Nombre
        comando = "del """ & file & """"
'        If ExisteArchivo(file) Then
            Shell "cmd.exe /c  " & comando
            
 '       End If
    End If
#End If
    Err.Raise Err.Number, Err.Source, Err.Description
    Exit Sub
End Sub

Private Sub CambiaEstadoDeFuente()
    Dim tid As Variant, sql As String, BandTerminado As Boolean, cc As GNCentroCosto
    BandTerminado = False
    If mcolTransIDs Is Nothing Then Exit Sub
    For Each tid In mcolTransIDs
        'Cambia el estado de fuente a Despachado        '*** MAKOTO 15/dic/00
        'Si está anulado o no aprobado, no pasa al estado 'Despachado'     '*** MAKOTO 15/dic/00
        ' para evitar que un asiento descuadrado marque como Despachado y afecte al balance
'        sql = "UPDATE GNComprobante SET Estado=" & ESTADO_DESPACHADO & _
              " WHERE (TransID=" & tid & ") AND (Estado=" & ESTADO_APROBADO & ")"
        'VERIFICA SI ESTA ENTREGADO POR COMPLETO
'         If Me.GNTrans.CodPantalla = "IVOP" Then
'                sql = "UPDATE GNComprobante SET Estado=" & ESTADO_APROBADO & _
'              " WHERE (TransID=" & tid & ") AND (Estado=" & ESTADO_NOAPROBADO & ")"
'        Else
            If Me.Empresa.GNOpcion.ObtenerValor("UtilizaComprometido") = "1" Then
                If Not Me.GNTrans.NoCambiarEstadoTransFuente Then
                    If VerificaTotalDespacho Then
                    'Cambia el estado de fuente a Despachado        '*** MAKOTO 15/dic/00
                        sql = "UPDATE GNComprobante SET Estado=" & ESTADO_DESPACHADO & _
                          " WHERE (TransID=" & tid & ") AND ((Estado=" & ESTADO_APROBADO & ") or (EStado = " & ESTADO_SEMDESPACHADO & "))"
                          BandTerminado = True
                    Else
                        If InStr(1, UCase(Me.Empresa.GNOpcion.NombreEmpresa), "ISOLL") > 0 Then
                            '   Cambia el estado de fuente a Despachado        '*** MAKOTO 15/dic/00
                            sql = "UPDATE GNComprobante SET Estado=" & ESTADO_DESPACHADO & _
                              " WHERE (TransID=" & tid & ") AND ((Estado=" & ESTADO_APROBADO & ") or (Estado=" & ESTADO_SEMDESPACHADO & "))"
                        Else
                            'Cambia el estado de fuente a SemiDespachado        '*** MAKOTO 15/dic/00
                            
                            If Me.GNTrans.IVActualizaDsctoItemxCli Then
                            sql = "UPDATE GNComprobante SET Estado=" & ESTADO_DESPACHADO & _
                              " WHERE (TransID=" & tid & ") AND ((Estado=" & ESTADO_APROBADO & ") or (Estado=" & ESTADO_SEMDESPACHADO & "))"
                            
                            Else
                            
                            sql = "UPDATE GNComprobante SET Estado=" & ESTADO_SEMDESPACHADO & _
                              " WHERE (TransID=" & tid & ") AND ((Estado=" & ESTADO_APROBADO & ") or (Estado=" & ESTADO_SEMDESPACHADO & "))"
                            End If
                        End If
                    End If
                End If
            Else
                If Me.GNTrans.IVActualizaCantidadDespachada Then
                    If VerificaTotalDespacho Then
                    'Cambia el estado de fuente a Despachado        '*** MAKOTO 15/dic/00
                        sql = "UPDATE GNComprobante SET Estado=" & ESTADO_DESPACHADO & _
                          " WHERE (TransID=" & tid & ") AND ((Estado=" & ESTADO_APROBADO & ") or (EStado = " & ESTADO_SEMDESPACHADO & "))"
                          BandTerminado = True
                    Else
                        'Cambia el estado de fuente a SemiDespachado        '*** MAKOTO 15/dic/00
                        sql = "UPDATE GNComprobante SET Estado=" & ESTADO_SEMDESPACHADO & _
                          " WHERE (TransID=" & tid & ") AND ((Estado=" & ESTADO_APROBADO & ") or (Estado=" & ESTADO_SEMDESPACHADO & "))"
                    End If
                Else
                    If VerificaTotalDespacho Then
                    'Cambia el estado de fuente a Despachado        '*** MAKOTO 15/dic/00
                        sql = "UPDATE GNComprobante SET Estado=" & ESTADO_DESPACHADO & _
                          " WHERE (TransID=" & tid & ") AND ((Estado=" & ESTADO_APROBADO & ") or (EStado = " & ESTADO_SEMDESPACHADO & "))"
                          BandTerminado = True
                    Else
                        If Not Me.GNTrans.NoCambiarEstadoTransFuente Then
                            
                            sql = "UPDATE GNComprobante SET Estado=" & ESTADO_DESPACHADO & _
                              " WHERE (TransID=" & tid & ") AND ((Estado=" & ESTADO_APROBADO & ") or (EStado = " & ESTADO_SEMDESPACHADO & "))"
                        End If
                    End If
                End If
            End If
            'AUC 26/11/07
            If Me.GNTrans.CodPantalla = "IVGNG" Then
                    sql = "UPDATE GNComprobante SET Estado1=" & ESTADO_FACTURADO & _
                    " WHERE (TransID=" & tid & ")"
            End If
            If Me.GNTrans.CodPantalla = "IVGNG" And Me.GNTrans.IVTipoTrans = "I" Then
                    sql = "UPDATE GNComprobante SET Estado2=" & ESTADO_COMPRAS & _
                    " WHERE (TransID=" & tid & ")"
            End If
            If Len(sql) > 0 Then
                Me.Empresa.Execute sql, True
            End If
            
            
        If Me.GNTrans.CodPantalla = "IVDEVE" Or Me.GNTrans.CodPantalla = "IVDEVALQ" Then
                If CambiaEstadoAlquilerSemiDevuelto(tid) = 4 Then
                     sql = "UPDATE GNComprobante SET Estado=" & ESTADO_SEMDESPACHADO & _
                    " WHERE (TransID=" & tid & ") "
                    Me.Empresa.Execute sql, True
                    sql = "UPDATE PCHistorial set estado = " & ESTADO_SEMDESPACHADO & _
                    ",fechagrabado = '" & Me.FechaTrans & "'" & _
                    " WHERE (TransID =" & tid & " AND Estado = " & ESTADO_APROBADO & " ) "
                    Me.Empresa.Execute sql, True
                ElseIf CambiaEstadoAlquilerSemiDevuelto(tid) = 2 Then
                     sql = "UPDATE GNComprobante SET Estado=" & ESTADO_DESPACHADO & _
                    " WHERE (TransID=" & tid & ") "
                    Me.Empresa.Execute sql, True
                 sql = "UPDATE PCHistorial set estado = " & ESTADO_DESPACHADO & _
                    ",fechagrabado = '" & Now & "'" & _
                    " WHERE (TransID =" & tid & " AND Estado = " & ESTADO_APROBADO & " ) "
                    Me.Empresa.Execute sql, True
                End If
''         ElseIf Not Me.GNTrans.NoCambiarEstadoTransFuente Then
''                sql = "UPDATE GNComprobante SET Estado=" & ESTADO_DESPACHADO & _
''                " WHERE (TransID=" & tid & ") AND ((Estado=" & ESTADO_APROBADO & ") or (EStado = " & ESTADO_SEMDESPACHADO & "))"
''                Me.Empresa.Execute sql, True
        End If
        If Me.GNTrans.CodPantalla = "IVDEV" Then 'para disfraty
                sql = "UPDATE PCHistorial set estado = " & ESTADO_DESPACHADO & _
                    ",fechagrabado = '" & Now & "'" & _
                    " WHERE (TransID =" & tid & " AND Estado = " & ESTADO_APROBADO & " ) "
                    Me.Empresa.Execute sql, True
        End If
        'End If
       If Me.GNTrans.TerminarCentroAlGrabar Then
            If BandTerminado Then
                'Set cc = Me.Empresa.RecuperaGNCentroCosto(Me.CodCentro)
                sql = " update gncentrocosto set fechafinal='" & Me.FechaTrans & "'"
                If Len(Me.idCentros) > 0 Then
                    sql = sql & " where idcentro in (" & Me.idCentros & ")"
                Else
                    sql = sql & " where idcentro='" & Me.idCentro & "'"
                End If
                Me.Empresa.Execute sql, True
            End If
              'AUC solo para makaivakha porque es ingreso producto terminado
            If Me.GNTrans.IVTipoTrans = "I" Then
                sql = " update gncentrocosto set fechafinal='" & Me.FechaTrans & "'"
                sql = sql & " where idcentro='" & Me.idCentro & "'"
                Me.Empresa.Execute sql, True
            End If
        End If
    Next tid
End Sub
'Actualiza la existencia de item
'signo : '+':suma, '-':resta
Friend Sub ActualizaCantidad(ByVal Signo As String)
    Dim sql As String

    If CountIVKardex = 0 Then Exit Sub     'Si no tiene detalle de IVKardex, sale
    
    'Si la transaccion no afecta a la existencia, actualiza comprometido
    If Not GNTrans.AfectaCantidad Then
        'si afecta comprometido jeaa 24/10/2006
        If GNTrans.IVAfectaComprometido Then
            If GNTrans.IVTipoTrans = "E" Then
                If Signo = "-" Then
                    Signo = "+"
                Else
                    Signo = "-"
                End If
                sql = "spIVCompr '" & Signo & "', " & mProps.transid
                mProps.objEmpresa.Execute sql, True
            Else
                If Signo = "-" Then
                    Signo = "+"
                Else
                    Signo = "-"
                End If
                sql = "spIVCompr '" & Signo & "', " & mProps.transid
                mProps.objEmpresa.Execute sql, True
                If Signo = "-" Then
                     Signo = "+"
                Else
                     Signo = "-"
                End If
                '''jeaa 17/11/2009 no se porque puse esto aqui
'                sql = "spIVExist1 '" & Signo & "', " & mProps.TransID
'                mProps.objEmpresa.Execute sql, True
                
            End If
        End If
        Exit Sub
    Else
        If GNTrans.IVAfectaComprometido Then
            If Signo = "+" Then
                Signo = "+"
            Else
                Signo = "-"
            End If
            sql = "spIVCompr '" & Signo & "', " & mProps.transid
            mProps.objEmpresa.Execute sql, True
        End If
    End If

    'Aumenta o resta la existencia
#If DAOLIB Then
    sql = "UPDATE IVExist d, IVKardex k " & _
          "SET d.Exist = d.Exist" & Signo & "k.Cantidad " & _
          "WHERE (d.IdBodega = k.IdBodega) AND (d.IdInventario = k.IdInventario) " & _
                " AND k.TransID=" & mProps.transid
#Else
    sql = "spIVExist '" & Signo & "', " & mProps.transid
    
#End If
    
    mProps.objEmpresa.Execute sql, True
End Sub



Friend Sub Recuperar(Id As Long, Optional CodT As String, Optional NumT As Long)
    Dim sql As String, i As Long, ivkr As IVKardexRecargo
    Dim rs As Recordset
    'jeaa 09/05/2005 para igualar la hora con el servidor
    If Me.Empresa.GNOpcion.ObtenerValor("IgualarHora") = "1" Then
        mProps.objEmpresa.AjustaHoraServidor
    End If
    
    'Si no está especificado TransID, lo busca por CodTrans y NumTrans
    If Id = 0 Then
        sql = "SELECT TransID FROM GNComprobante WHERE CodTrans='" & _
                                CodT & "' and NumTrans=" & NumT
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
        If rs.RecordCount > 0 Then
            Id = rs!transid
        End If
        rs.Close
    End If

#If DAOLIB Then
    Dim qdef As DAO.QueryDef
    Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsGNComp")
    qdef.Parameters("tid").value = Id
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    sql = "spConsGNComp " & Id
    rs.Open sql, mProps.objEmpresa.Coneccion, adOpenStatic, adLockReadOnly
#End If
    
    'Recupera los datos de GNComprobante
    With rs
        mProps.transid = Id
        mProps.CodTrans = !CodTrans
        mProps.NumTrans = !NumTrans
        mProps.CodAsiento = !CodAsiento
        mProps.FechaTrans = !FechaTrans
        If Not IsNull(!HoraTrans) Then
            mProps.HoraTrans = !HoraTrans           '*** MAKOTO 07/dic/00 Agregar
        Else
            mProps.HoraTrans = 0
        End If
        mProps.Descripcion = !Descripcion
        mProps.codUsuario = !codUsuario
        
        '***Agregado. 09/ago/2004. Angel
        If Not IsNull(!CodUsuarioModifica) Then mProps.CodUsuarioModifica = !CodUsuarioModifica
        
        If Not IsNull(!IdResponsable) Then mProps.IdResponsable = !IdResponsable
        If Not IsNull(!CodResponsable) Then mProps.CodResponsable = !CodResponsable
        If Not IsNull(!NumDocRef) Then mProps.NumDocRef = !NumDocRef
        mProps.Estado = !Estado
       
        If Not IsNull(!PosID) Then mProps.PosID = !PosID 'Preguntar para que sirve
        mProps.NumTransCierrePOS = !NumTransCierrePOS
        mProps.idCentro = !idCentro
        If Not IsNull(!IdTransFuente) Then mProps.IdTransFuente = !IdTransFuente
        If Not IsNull(!CodCentro) Then mProps.CodCentro = !CodCentro
        For i = 2 To 4
            mProps.Cotizacion(i) = .Fields("Cotizacion" & i)
        Next i
        mProps.CodMoneda = !CodMoneda
        
        If Me.GNTrans.Modulo = "CT" And !IdProveedorRef <> 0 Then
            If Not IsNull(!IdProveedorRef) Then mProps.IdEmpleadoRef = !IdProveedorRef
            If Not IsNull(!CodProveedorRef) Then mProps.CodEmpleadoRef = !CodProveedorRef
        Else
            If Not IsNull(!IdProveedorRef) Then mProps.IdProveedorRef = !IdProveedorRef
            If Not IsNull(!CodProveedorRef) Then mProps.CodProveedorRef = !CodProveedorRef
        End If
        If Not IsNull(!IdClienteRef) Then mProps.IdClienteRef = !IdClienteRef
        If Not IsNull(!CodClienteRef) Then mProps.CodClienteRef = !CodClienteRef
        If Not IsNull(!IdVendedor) Then mProps.IdVendedor = !IdVendedor
        If Not IsNull(!CodVendedor) Then mProps.CodVendedor = !CodVendedor
        
        '*** MAKOTO 05/feb/01 Agregado
        If Not IsNull(!Nombre) Then mProps.Nombre = !Nombre
        '**** agregado jeaa 04/10/04
        mProps.Impresion = !Impresion
        mProps.fechagrabado = !fechagrabado
        RecuperaInfConsFinal '******* jeaa 14-01-04 para separar la direccion telefono y ruc en la descipcion
        '**** agregado jeaa 25/04/2005
        If Not IsNull(!IdMotivo) Then mProps.IdMotivo = !IdMotivo
        If Not IsNull(!CodMotivo) Then mProps.CodMotivo = !CodMotivo
        If Not IsNull(!codMotivoDev) Then mProps.codMotivoDev = !codMotivoDev
        '**** agregado jeaa 06/02/2006
        If Not IsNull(!Comision) Then mProps.Comision = !Comision
        If Not IsNull(!FechaDevol) Then mProps.FechaDevol = !FechaDevol 'AUC 13/03/06
        '**** agregado jeaa 27/05/7007
        If Not IsNull(!ComisionCobrador) Then mProps.ComisionCobrador = !ComisionCobrador
        '******* agegado jeaa 16/07/2007
        If Not IsNull(!AutorizacionSRI) Then mProps.AutorizacionSRI = !AutorizacionSRI
        If Not IsNull(!FechaCaducidadSRI) Then mProps.FechaCaducidadSRI = !FechaCaducidadSRI
        
        
        If Not IsNull(!NumSerieEstaSRI) Then mProps.NumSerieEstaSRI = !NumSerieEstaSRI
        If Not IsNull(!NumSeriePuntoSRI) Then mProps.NumSeriePuntoSRI = !NumSeriePuntoSRI
        If Not IsNull(!FechaAutorizacionSRI) Then mProps.FechaAutorizacionSRI = !FechaAutorizacionSRI
        
        
        
         mProps.Estado1 = !Estado1 'auc 24/10/07
         mProps.Estado2 = !Estado2
        If Not IsNull(!NumDias) Then mProps.NumDias = !NumDias  'AUC PARA LOS ALQUILERES o numero de pagos
        If Not IsNull(!CodUsuarioAutoriza) Then mProps.CodUsuarioAutoriza = !CodUsuarioAutoriza    'jeaa 28/09/2008
        'If Not IsNull(!NumDias) Then mProps.NumDias = !NumDias  'AUC PARA LOS ALQUILERES
        If Not IsNull(!IdGaranteRef) Then mProps.IdGaranteRef = !IdGaranteRef
        If Not IsNull(!CodGaranteRef) Then mProps.CodGaranteRef = !CodGaranteRef
        
        If Not IsNull(!IdObra) Then mProps.IdObra = !IdObra
        If Not IsNull(!CodObra) Then mProps.CodObra = !CodObra
        If Not IsNull(!IdZona) Then mProps.IdZona = !IdZona
        If Not IsNull(!CodZona) Then mProps.CodZona = !CodZona
        
        If Not IsNull(!IdDescuento) Then mProps.IdDescuento = !IdDescuento
        If Not IsNull(!CodDescuento) Then mProps.CodDescuento = !CodDescuento
        
        If Not IsNull(!IDForma) Then mProps.IDForma = !IDForma
        If Not IsNull(!CodForma) Then mProps.CodForma = !CodForma
        mProps.BandCierre = !BandCierre     'AUC 08/12/06
        
        If Len(mProps.objEmpresa.GNOpcion.ObtenerValor("Presupuesto")) > 0 Then
            If mProps.objEmpresa.GNOpcion.ObtenerValor("Presupuesto") = "1" Then
                mProps.CodPRAsiento = !CodPRAsiento
            End If
        End If
        If Not IsNull(!PorcentajeIVA) Then mProps.PorcentIVA = !PorcentajeIVA
        If Not IsNull(!IdTipoRol) Then mProps.IdTipoRol = !IdTipoRol   'AUC
        If Not IsNull(!CodTipoRol) Then mProps.CodTipoRol = !CodTipoRol
        If Not IsNull(!CodTipoRolProv) Then mProps.CodTipoRolProv = !CodTipoRolProv
        If Not IsNull(!PCPorDesc) Then mProps.PCPorDesc = !PCPorDesc
        mProps.idCentroHijo = !idCentroHijo
        If Not IsNull(!CentroHijo) Then mProps.CodCentroHijo = !CentroHijo
        If Not IsNull(!BandFinalizado) Then mProps.BandFinalizado = !BandFinalizado
        
        If Not IsNull(!IdEmpleadoRef) Then mProps.IdEmpleadoRef = !IdEmpleadoRef
        If Not IsNull(!CodEmpleadoRef) Then mProps.CodEmpleadoRef = !CodEmpleadoRef
        mProps.EstadoFacElect = !EstadoFacElect
    If Not IsNull(!idSolCredito) Then mProps.idSolCredito = !idSolCredito

        
        
        .Close
    End With
    
    mProps.BandNoGrabaTransXML = True
    Set rs = Nothing
    If Me.GNTrans.Empresa.GNOpcion.ObtenerValor("PermiteControlAspectosAnexos") = "1" And _
    Me.GNTrans.IVVisibleAnexos Then RecuperarAnexos
    
    If Me.GNTrans.Empresa.GNOpcion.ObtenerValor("PermiteControlAspectosAnexos") = "1" And _
    Me.GNTrans.IVDatosExportacion Then RecuperarAnexosExportacion
    
    
    If Me.GNTrans.IVTipoTrans = "X" Then RecuperaIVKardexArancel
    
    
        RecuperarOferta
        
    If Me.GNTrans.IVGuiaRemision Then
        RecuperarGuia
    End If
        
    If Me.GNTrans.CodPantalla = "IVBQD2PCKL" Then
        RecuperarLacteos
    End If
        
        

        'If Me.Empresa.GNOpcion.BandFactElect Then
        If Me.GNTrans.IVComprobanteElectronico Then
            RecuperarDatosElectronicos
        End If

        
        

    'Recupera datos del financiamiento
    
    If Me.GNTrans.CodPantalla = "PRPR" Or Me.GNTrans.CodPantalla = "PRPRRC" Then
        RecuperarRequerimiento
    End If
    
    If Me.GNTrans.IVVisualizarNumPagos Or Me.GNTrans.CodPantalla = "TSIER" Then
        RecuperarFinanciamiento
    End If
    'Recupera datos del Detalle Efectivo
    If Me.GNTrans.CodPantalla = "TSIECC" Then
        RecuperaTSDetalleEfectivo
        RecuperaTSDetalleCheque
        RecuperaTSDetalleTarjeta
        RecuperaTSDetalleVManuales
        RecuperaTSDetalleIngreso
        RecuperaTSDetalleIngresoRT
    End If
    If Me.GNTrans.CodPantalla = "IVBQDPACA" Then
        RecuperarSacaHist
    End If
    RecuperarVariosCentros
    'jeaa 24/03/2008
    If Me.GNTrans.IVTipoTrans = "X" Or Me.GNTrans.IVTipoTrans = "Y" Or Me.GNTrans.IVDatosImportacion Then
        RecuperarDatosImportacionExportacion
    End If
    mbooEsNuevo = False
    mbooModificado = False
End Sub


'Forza recuperar todos los detalles
' Es util para en caso de que recupera y graba sin visualizar algunos datos
' Por ejm. Se usa en proceso de Recalculo de costos del programa 'SiiTools.exe'
Public Sub RecuperaDetalleTodo()
    RecuperaIVKardex
    RecuperaIVKardexRecargo
    RecuperaPCKardex
    RecuperaTSKardex
    RecuperaTSKardexRet         '*** MAKOTO 07/feb/01 Agregado
    RecuperaAFKardex
    RecuperaAsiento
    RecuperaAsientoPresupuesto
    RecuperaPCKardexCHP
    RecuperaRGKardex
    RecuperarRolDetalle
    RecuperaIVKNumSerie
End Sub

Private Sub RecuperaAsiento()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
        
    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolCTLibroDetalle Is Nothing Then Set mcolCTLibroDetalle = New Collection
    
    BorrarCTLibroDetalle
    
    'Recupera los Asientos
    sql = "SELECT A.*,B.CodCuenta, G.*  FROM CTLibroDetalle A " & _
    " LEFT JOIN GNGASTO G ON A.IDGasto=G.IDGasto " & _
    " INNER JOIN CTCuenta B " & _
           "ON A.IdCuenta=B.IdCuenta WHERE CodAsiento=" & mProps.CodAsiento
           
    '*** MAKOTO 23/nov/00 Modificado para recuperar primero los Debes y luego Haber
    If Me.Empresa.GNOpcion.ObtenerValor("OrdenarAsientoPorDebe") = "0" Then
        sql = sql & " ORDER BY Orden"
    Else
#If DAOLIB Then
        sql = sql & " ORDER BY Iif(Haber>0, 1, 0), CodCuenta, Orden"
#Else
        sql = sql & " ORDER BY (CASE WHEN Haber>0 THEN 1 ELSE 0 END), CodCuenta, Orden"
#End If
    End If
    
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddCTLibroDetalle
                CTLibroDetalle(i).Recuperar rs
            End If
            .MoveNext
        Loop
        .Close
    End With

    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub

Private Sub RecuperaTSKardex()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolTSKardex Is Nothing Then Set mcolTSKardex = New Collection
    
    'Recupera los TSKardex
    sql = "SELECT * FROM vwTSKardex WHERE TransId=" & mProps.transid & " ORDER BY Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddTSKardex
                TSKardex(i).Recuperar rs
            End If
            .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub

'*** MAKOTO 07/feb/01 Agregado
Private Sub RecuperaTSKardexRet()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean

    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolTSKardexRet Is Nothing Then Set mcolTSKardexRet = New Collection
    
    'Recupera los registros de TSKardexRet
    sql = "SELECT tskr.*, tsr.CodRetencion, tsr.IdCuentaActivo, tsr.IdCuentaPasivo " & _
          "FROM TSKardexRet tskr INNER JOIN TSRetencion tsr " & _
                "ON tskr.IdRetencion = tsr.IdRetencion "
    sql = sql & "WHERE TransId=" & mProps.transid & " ORDER BY Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddTSKardexRet
                TSKardexRet(i).Recuperar rs
            End If
            .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub

Private Sub RecuperaIVKardex()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
        
    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolIVKardex Is Nothing Then Set mcolIVKardex = New Collection
    
    BorrarIVKardex
    
    
    'Recupera los IVKardex
    sql = "SELECT * FROM vwIVKardex WHERE TransId=" & mProps.transid & " ORDER BY Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddIVKardex
                IVKardex(i).Recuperar rs
            End If
            .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub

Private Sub RecuperaIVKardexRecargo()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
    
    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolIVKardexRecargo Is Nothing Then Set mcolIVKardexRecargo = New Collection
    
    'Recupera los IVKardexRecargo
    BorrarIVKardexRecargo
    sql = "SELECT A.*,B.CodRecargo FROM IVKardexRecargo A LEFT JOIN IVRecargo B ON A.IdRecargo=B.IdRecargo " & _
          " WHERE TransId=" & mProps.transid & " ORDER BY Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddIVKardexRecargo
                IVKardexRecargo(i).Recuperar rs
            End If
            .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub

Private Sub RecuperaPCKardex()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
    
    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolPCKardex Is Nothing Then Set mcolPCKardex = New Collection
    
    'Recupera los PCKardex
    BorrarPCKardex
    sql = "SELECT * FROM vwPCKardex WHERE TransID=" & mProps.transid & " ORDER BY Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddPCKardex
                PCKardex(i).Recuperar rs
                If Len(PCKardex(i).Codelemento) > 0 Then
                    PCKardex(i).RubroRol = PCKardex(i).Codelemento
                End If
            End If
            .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub

Private Sub RecuperaPCKardexCHP()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
    
    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolPCKardexCHP Is Nothing Then Set mcolPCKardexCHP = New Collection
    
    'Recupera los PCKardex
    BorrarPCKardexCHP
    sql = "SELECT * FROM vwPCKardexCHP WHERE TransID=" & mProps.transid & " ORDER BY Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddPCKardexCHP
                PCKardexCHP(i).Recuperar rs
            End If
            .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub


Public Sub Eliminar()
    Dim sql As String, pt As PermisoTrans
    Dim rsE As Recordset
    'Cuando SoloVer está establecido a True
    If mbooSoloVer Then
        Err.Raise ERR_SOLOVER, "GNComprobante.Grabar", MSGERR_SOLOVER
    End If
    
    '*** MAKOTO 17/feb/01 Agregado porque faltaba verificar el permiso
    'Recupera el permiso para la transacción
    Set pt = gobjMain.GrupoActual.PermisoActual.Trans(Me.CodTrans)
    If Not (pt Is Nothing) Then
        If Not pt.Eliminar Then
            Set pt = Nothing
            Err.Raise ERR_NODERECHO, "Empresa.CambiaEstadoGNComp", MSGERR_NODERECHO
        End If
    End If
    Set pt = Nothing
    
    'Si no está anulado, no puede eliminar
    If Estado <> ESTADO_ANULADO Then
        Err.Raise ERR_NODERECHO, "GNComprobante.Eliminar", _
            "No se puede eliminar la transacción si no está anulada, " & _
            "por favor primero anúlela e inténte de nuevo."
    End If
    
    'Verifica si existe cobros/pagos asignados (incluyendo los que estén anulados)
    Me.Empresa.VerificaAnulacion Me.transid, False

    'Comienza la transacción
#If DAOLIB Then
    gobjWS.BeginTrans
#Else
    mProps.objEmpresa.Coneccion.BeginTrans
#End If
    On Error GoTo ErrTrap

    'Elimina los Asientos
    sql = "DELETE FROM CTLibroDetalle WHERE CodAsiento=" & mProps.CodAsiento
    mProps.objEmpresa.Execute sql, True
    
    'Elimina los TSKardex
    sql = "DELETE FROM TSKardex WHERE TransID=" & transid
    mProps.objEmpresa.Execute sql, True
    
    'Elimina los TSKardexRet            '*** MAKOTO 07/feb/01 Agregado
    sql = "DELETE FROM TSKardexRet WHERE TransID=" & transid
    mProps.objEmpresa.Execute sql, True
    
    'Elimina los IVKardex consumos
    sql = "delete  IVConsumoDetalle from ivkardex ivk inner join IVConsumoDetalle ivcd on ivk.id=ivcd.idkardexref where ivcd.transid=" & transid
    mProps.objEmpresa.Execute sql, True
    
    
    'Elimina los IVKardex
    sql = "DELETE FROM IVKardex WHERE TransID=" & transid
    mProps.objEmpresa.Execute sql, True

    
    'Elimina los IVKardex
    sql = "DELETE FROM IVKardex WHERE TransID=" & transid
    mProps.objEmpresa.Execute sql, True
    
    'Elimina los IVInventarioDetalleISO
    If Me.GNTrans.IVSecuencialItem Then
        sql = "DELETE FROM IVInventarioDetalleISO WHERE TransID=" & transid
        mProps.objEmpresa.Execute sql, True
    End If
    
    'Elimina los IVKardexRecargo
    sql = "DELETE FROM IVKardexRecargo WHERE TransID=" & transid
    mProps.objEmpresa.Execute sql, True
    
    'Elimina los PCKardex
    sql = "DELETE FROM PCKardex WHERE TransID=" & transid
    mProps.objEmpresa.Execute sql, True
    
    'Elimina los PCKardexCHP
    sql = "DELETE FROM PCKardexCHP WHERE TransID=" & transid
    mProps.objEmpresa.Execute sql, True
    
    
    'Elimina el GNComprobante
    sql = "DELETE FROM GNComprobante WHERE TransID=" & transid
    mProps.objEmpresa.Execute sql, True
    
    'Elimina el pchistorial AUC 14/11/07
    sql = "DELETE FROM PCHistorial WHERE TransID=" & transid
    mProps.objEmpresa.Execute sql, True
    
    'Elimina los TSKardexConcilia
    sql = "DELETE FROM TSKardexConcilia WHERE TransID=" & transid
    mProps.objEmpresa.Execute sql, True
    
    'Elimina los Asientos PRESUPUESTO
    sql = "DELETE FROM PRLibroDetalle WHERE CodAsiento=" & mProps.CodPRAsiento
    mProps.objEmpresa.Execute sql, True
    
    'Elimina los Asientos RolDetalle
    sql = "DELETE FROM RolDetalle WHERE TransID=" & transid
    mProps.objEmpresa.Execute sql, True
    
    'Elimina los Asientos IRKardex
    sql = "DELETE FROM IRKardex WHERE TransID=" & transid
    mProps.objEmpresa.Execute sql, True
    
    'Elimina los VTKardexConcilia
    sql = "DELETE FROM VTKardexConcilia WHERE TransID=" & transid
    mProps.objEmpresa.Execute sql, True
    
    'Elimina los VTKardexConciliaTrans
    sql = "DELETE FROM VTKardexConciliaTrans WHERE TransID=" & transid
    mProps.objEmpresa.Execute sql, True
    
    'Elimina los GNKardexDocumento
    sql = "DELETE FROM GNKardexDocumento WHERE TransID=" & transid
    mProps.objEmpresa.Execute sql, True
    
        'Elimina todos los registros relacionados en ivkardexconciliacarcasa
    sql = "DELETE FROM ivkardexconciliacarcasa WHERE TransID=" & mProps.transid
    mProps.objEmpresa.Execute sql, True

    sql = "DELETE FROM Gnoferta WHERE TransID=" & mProps.transid
    mProps.objEmpresa.Execute sql, True

    
    'Elimina los RGKardex
    sql = "DELETE FROM RGKardex WHERE TransID=" & transid
    mProps.objEmpresa.Execute sql, True
    
    
    
    
    If Me.GNTrans.CodPantalla = "TSIECC" Then

        'Elimina todos los registros relacionados en TSDetalleEfectivo
        sql = "DELETE FROM TSDetalleEfectivo WHERE TransID=" & mProps.transid
        mProps.objEmpresa.Execute sql, True
    
        'Elimina todos los registros relacionados en TSDetalleCheque
        sql = "DELETE FROM TSDetalleCheque WHERE TransID=" & mProps.transid
        mProps.objEmpresa.Execute sql, True
        
        'Elimina todos los registros relacionados en TSDetalleTarjeta
        sql = "DELETE FROM TSDetalleTarjeta WHERE TransID=" & mProps.transid
        mProps.objEmpresa.Execute sql, True
    
        'Elimina todos los registros relacionados en TSDetalleVmanuales
        sql = "DELETE FROM TSDetalleVManuales WHERE TransID=" & mProps.transid
        mProps.objEmpresa.Execute sql, True
    
        'Elimina todos los registros relacionados en TSDetalleEgreso
        sql = "DELETE FROM TSDetalleEgreso WHERE TransID=" & mProps.transid
        mProps.objEmpresa.Execute sql, True
    
        'Elimina todos los registros relacionados en TSDetalleVCredito
        sql = "DELETE FROM TSDetalleVCredito WHERE TransID=" & mProps.transid
        mProps.objEmpresa.Execute sql, True
    
    'Elimina todos los registros relacionados en TSDetalleVCredito
        sql = "DELETE FROM TSResumen WHERE TransID=" & mProps.transid
        mProps.objEmpresa.Execute sql, True
        
    End If
      'Elimina todos los detalleproceso
    sql = "SELECT idkp from ivkproceso where transid = " & transid
    Set rsE = mProps.objEmpresa.OpenRecordset(sql)
    Do While Not rsE.EOF
        sql = "DELETE from detalleproceso  WHERE IDkp=" & rsE!IDkp
        mProps.objEmpresa.Execute sql, True
        rsE.MoveNext
    Loop
    Set rsE = Nothing
    'elimina los procesos de la orden de produccion
    sql = "DELETE FROM ivkproceso WHERE TransID=" & transid
    mProps.objEmpresa.Execute sql, True
     'Elimina los PCFINANCIAMIENTO
    sql = "DELETE FROM PCFINANCIAMIENTO WHERE TransID=" & transid
    mProps.objEmpresa.Execute sql, True
    'Elimina ivseriekardex
    sql = "DELETE FROM ivkardexserie WHERE TransID=" & transid
    mProps.objEmpresa.Execute sql, True

    'Registra en GNLogAccion
    mProps.objEmpresa.GrabaGNLogAccion "DEL_TRANS", _
                            "Transacción Eliminada: " & mProps.CodTrans & " " & _
                                mProps.NumTrans, _
                            Me.GNTrans.Modulo

    'Elimina la relación Anexos, si existe
    sql = "DELETE FROM Anexos WHERE TransID=" & transid
    mProps.objEmpresa.Execute sql, True


    'Concluye la transacción
#If DAOLIB Then
    gobjWS.CommitTrans
#Else
    mProps.objEmpresa.Coneccion.CommitTrans
#End If
    mbooEsNuevo = True
    mbooModificado = True
    Exit Sub

ErrTrap:
    'Cancela la transacción
#If DAOLIB Then
    gobjWS.Rollback
#Else
    mProps.objEmpresa.Coneccion.RollbackTrans
#End If
    Err.Raise Err.Number, Err.Source, Err.Description
    Exit Sub
End Sub

Public Sub GeneraAsiento()
    Dim i As Long, f As String, colAT As colAsientoTemp
    Dim obj As AsientoTemp, j As Long, ctl As CTLibroDetalle
    Dim Ctc As CTCuenta
    Dim gng As gnGasto
    'Cuando SoloVer está establecido a True
    If mbooSoloVer Then
        Err.Raise ERR_SOLOVER, "GNComprobante.Grabar", MSGERR_SOLOVER
    End If
    
    'Si es transacción de inventario, o Si es transacción de ACTIVO FIJO, jeaa 09/12/2008
    If GNTrans.Modulo = "IV" Or GNTrans.Modulo = "AF" Then
        'Y si tiene PCKardex y afecta saldo de Prov/Cli
        If (CountPCKardex > 0) And (GNTrans.AfectaSaldoPC = True) Then
            'Genera PCKardex/TSKardex para Cobro/Pago al Contado
                If Me.GNTrans.IVTipoTrans <> "A" Then
                    GeneraPCKardexContado
                End If
            End If
        End If
    
    
    'Remueve los asientos existentes (Solo auto-generados)
    For i = CountCTLibroDetalle To 1 Step -1
        'No elimina los asiento agregados por usuario
        If CTLibroDetalle(i).BandIntegridad = INTEG_AUTO Then
            mcolCTLibroDetalle.Remove i
            mbooModificado = True
        End If
    Next i
    
    With GNTrans
        For i = 1 To .CountAsiento
            Set colAT = Nothing
            f = UCase$(.Asientos(i).Formula)
            Select Case f
            Case "TSBANCO"
                Set colAT = GeneraAsientoTSBanco
            Case "TSRETACTIVO"                        '*** MAKOTO 07/feb/01
                Set colAT = GeneraAsientoTSRetencion(True)
            Case "TSRETPASIVO"                        '*** MAKOTO 12/feb/01
                Set colAT = GeneraAsientoTSRetencion(False)
            Case "TSBANCODEBE"
                Set colAT = GeneraAsientoTSBancoDebe
            Case "TSBANCOHABER"
                Set colAT = GeneraAsientoTSBancoHaber
            Case "PCTOTAL"
                Set colAT = GeneraAsientoPCTotal(True)
            Case "PCTOTAL2"
                Set colAT = GeneraAsientoPCTotal(False)
            Case "PCTOTALDEBE"
                Set colAT = GeneraAsientoPCTotalDebe(True)
            Case "PCTOTALDEBE2"
                Set colAT = GeneraAsientoPCTotalDebe(False)
            Case "PCTOTALHABER"
                Set colAT = GeneraAsientoPCTotalHaber(True)
            Case "PCTOTALHABER2"
                Set colAT = GeneraAsientoPCTotalHaber(False)
            Case "PCPAGO"
                Set colAT = GeneraAsientoPCPago(True)
            Case "PCPAGO2"
                Set colAT = GeneraAsientoPCPago(False)
            Case "PCCOBRO"
                Set colAT = GeneraAsientoPCCobro(True)
            Case "PCCOBRO2"
                Set colAT = GeneraAsientoPCCobro(False)
            Case "PCXCOBRAR"
                Set colAT = GeneraAsientoPCPorCobrarPagar(True)
            Case "PCXPAGAR"
                Set colAT = GeneraAsientoPCPorCobrarPagar(False)
            Case "IVACTIVO", "IVACTIVO+", "IVACTIVO-"
                If Me.Empresa.GNOpcion.IVKTipoDatoDouble Then
                    'Set colAT = GeneraAsientoIVActivoDou(f)
                    Set colAT = GeneraAsientoIVActivoDouNew(f, .Asientos(i).IdCuenta)
                Else
                   Set colAT = GeneraAsientoIVActivo(f)
                End If
            Case "PCGASTO"
                If Me.Empresa.GNOpcion.IVKTipoDatoDouble Then
'                    Set colAT = GeneraAsientoIVActivoDouNew(f, .Asientos(i).IdCuenta)
                Else
                   Set colAT = GeneraAsientoPcGasto(f)
                End If
            
            Case "IVCOSTO", "IVCOSTO+", "IVCOSTO-"
                If Me.Empresa.GNOpcion.IVKTipoDatoDouble Then
                    'Set colAT = GeneraAsientoIVCostoDou(f)
                    Set colAT = GeneraAsientoIVCostoDouNew(f, .Asientos(i).IdCuenta)
                Else
                    Set colAT = GeneraAsientoIVCosto(f)
                End If
            Case "IVVENTA", "IVVENTA+", "IVVENTA-", "IVVENTA*", "IVVENTA2"
                'Set colAT = GeneraAsientoIVVenta(f)
                If Me.GNTrans.CodPantalla = "IVRES_ALQ" Or Me.GNTrans.CodPantalla = "IVBQD2B" Or Me.GNTrans.CodPantalla = "IVBQD2BE" Then
                    Set colAT = GeneraAsientoIVVentaALQ(f)
                Else
                    If Me.Empresa.GNOpcion.IVKTipoDatoDouble Then
                        Set colAT = GeneraAsientoIVVentaDou(f)
                    Else
                        Set colAT = GeneraAsientoIVVenta(f)
                    End If
                End If
            Case "IVCOSTOTOTAL", "IVCOSTOTOTAL+", "IVCOSTOTOTAL-"
                If Me.Empresa.GNOpcion.IVKTipoDatoDouble Then
                    Set colAT = GeneraAsientoIVCostoTotalDou(f)
                Else
                    Set colAT = GeneraAsientoIVCostoTotal(f)
                End If
            Case "IVPRECIOTOTAL", "IVPRECIOTOTAL+", _
                 "IVPRECIOTOTAL-", "IVPRECIOTOTAL*"
                Set colAT = GeneraAsientoIVPrecioTotal(f)
            Case "IVCOSTOTOTAL2"
                Set colAT = GeneraAsientoIVCostoTotal2
            Case "IVPRECIOTOTAL2"
                Set colAT = GeneraAsientoIVPrecioTotal2
            Case "IVDESCITEMTOTAL" '***Agregado. 02/ago/2004. Angel
                Set colAT = GeneraAsientoIVDescItemTotal
            Case "AFACTIVO", "AFACTIVO+", "AFACTIVO-"
                Set colAT = GeneraAsientoAFActivo(f)
            Case "AFDEPREGASTO"
                Set colAT = GeneraAsientoAFDepreciacionGasto(f)
            Case "AFDEPREACUM"
                Set colAT = GeneraAsientoAFDepreciacionAcumulada(f)
            Case "AFDEPREGASTOREV"
                Set colAT = GeneraAsientoAFDepreciacionGastoRev(f)
            Case "AFDEPREACUMREV"
                Set colAT = GeneraAsientoAFDepreciacionAcumuladaRev(f)
             Case "ROLDEBE"
                Set colAT = GeneraAsientoRolTotalDebe
            Case "ROLHABER"
                Set colAT = GeneraAsientoRolTotalHaber
            Case "PCPAGOXIII"
                Set colAT = GeneraAsientoPCPagoXIII
             Case "PCPAGOXIV"
                Set colAT = GeneraAsientoPCPagoXIV
            Case "PCPAGOVACACION"
                Set colAT = GeneraAsientoPCPagoVacacion
            Case "PCPAGONETOROL"
                Set colAT = GeneraAsientoPCPagoNetoRol
             Case "IVVENTAD"
                Set colAT = GeneraAsientoIVVentaDiferida(f)
            Case "PCCOBROD"
                Set colAT = GeneraAsientoPCCobroDiferido(True)
            Case "PCVENTAD"
                Set colAT = GeneraAsientoPCVentaDiferido(True)
            Case "PCXCOBRARD"
                Set colAT = GeneraAsientoPCPorCobrarPagarDiferidoDebe(True, True)
            Case "PCXPAGARD"
                Set colAT = GeneraAsientoPCPorCobrarPagarDiferidoDebe(True, False)
             Case "PCPAGONETOROLH"
                Set colAT = GeneraAsientoPCPagoNetoRolH
            Case "PCCOBROCAP"
                Set colAT = GeneraAsientoPCCobroCap(True)
            Case "PCCOBROINT"
                Set colAT = GeneraAsientoPCCobroInt(True)
            Case "PCPAGOINT"
                Set colAT = GeneraAsientoPCPagarInt(True)
            Case "PCTOTALDEBECHP"
                Set colAT = GeneraAsientoPCTotalDebeCHP(True)
            Case "PCTOTALHABERCHP"
                Set colAT = GeneraAsientoPCTotalHaberCHP(True)
            Case "IVAJUSTEDIF" 'solo para tipo double
                Set colAT = GeneraAsientoIVActivoAjusteDou(f, .Asientos(i).IdCuenta)
            Case "IVDEVOLUCION"
                If Me.Empresa.GNOpcion.IVKTipoDatoDouble Then
                    Set colAT = GeneraAsientoIVVentaDou(f)
                Else
                    Set colAT = GeneraAsientoIVDevolucion(f)
                End If
        Case "IVGARANTIADEBE"
                    Set colAT = GeneraAsientoIVGarantiaDebe(f)
        Case "IVGARANTIAHABER"
                    Set colAT = GeneraAsientoIVGarantiaDebe(f)
            Case Else
                Select Case Left$(f, 1)
                Case "$"        'Documentos bancarios
                    Set colAT = GeneraAsientoTSDoc(Mid$(f, 2))
                Case "%"        'Recargos/Descuentos
'''                    Set colAT = GeneraAsientoIVRecargo(Mid$(f, 2))
                    If Mid$(f, 2) = "IVA" Then
                        If Not Me.BandNOCreditoTributario Then
                            Set colAT = GeneraAsientoIVRecargo(Mid$(f, 2))
                        End If
                    Else
                        Set colAT = GeneraAsientoIVRecargo(Mid$(f, 2))
                    End If

                Case "#"        'Formas de pago/cobro
                    Set colAT = GeneraAsientoFormaCobroPago(Mid$(f, 2))
                End Select
            End Select
            
            If Not colAT Is Nothing Then
                For Each obj In colAT
                    j = AddCTLibroDetalleAuto   'Agrega y pone INTEG_AUTO en BandIntegridad
                    Set ctl = CTLibroDetalle(j)
                    '0 significa que IdCuenta es variable
                    If .Asientos(i).IdCuenta <> 0 Then
                        ctl.SetIdCuentaAuto .Asientos(i).IdCuenta
                    Else
                        ctl.SetIdCuentaAuto obj.IdCuenta
                        If UCase$(.Asientos(i).Formula) = "PCGASTO" Then
                            ctl.BandIntegridad = 0
                        End If
                    End If
                    
                    '*** Eliminado, porque Descripcion siempre copia de GNComprobante en AddCTLibroDetalle
'                    ctl.Descripcion = .Asientos(i).Descripcion

                      If obj.bandDes Then
                        If obj.bandDebe Then
                            ctl.Debe = obj.Valor
                        ElseIf obj.bandHaber Then
                            ctl.Haber = obj.Valor
                        End If
                    Else
                       If .Asientos(i).BandDeudor Then
                            ctl.Debe = obj.Valor
                        Else
                            ctl.Haber = obj.Valor
                        End If
                    End If

                    
                    
'                If Me.Empresa.GNOpcion.ObtenerValor("DistribucionGastos") = "1" Then
                    
                    If .Asientos(i).IdCuenta <> 0 Then
                        Set Ctc = Me.Empresa.RecuperaCTCuenta(.Asientos(i).IdCuenta)
                    Else
                        Set Ctc = Me.Empresa.RecuperaCTCuenta(obj.IdCuenta)
                    End If
                    
                    
                    'Set Ctc = Me.Empresa.RecuperaCTCuenta(.Asientos(i).IdCuenta)
                    If Not Ctc Is Nothing Then
                        If Ctc.BandGastoDistribuido Then
                            If Me.GNTrans.AsientoGastoxZona Then
                                ctl.CodGasto = Me.CodZona
                            Else
                                ctl.CodGasto = Me.GNTrans.CodGastoPre
                            End If
                        ElseIf Me.GNTrans.CodPantalla = "AFBQD" Then 'AUC opcion para ACTIVOS
                            If Me.GNTrans.AsientoGastoxZona Then
                                Set gng = Me.Empresa.RecuperaGNGasto(obj.idGasto)
                                If Not gng Is Nothing Then
                                    ctl.CodGasto = gng.CodGasto
                                End If
                                Set gng = Nothing
                            End If
                        ElseIf Me.GNTrans.CodPantalla = "GENROL" Then 'AUC opcion para roles
                            If Me.GNTrans.AsientoGastoxZona Then
                                Set gng = Me.Empresa.RecuperaGNGasto(obj.idGasto)
                                If Not gng Is Nothing Then
                                    ctl.CodGasto = gng.CodGasto
                                End If
                                Set gng = Nothing
                            End If
                        End If
                    End If
 '               End If
                    
                Next obj
            End If
        Next i
    End With
End Sub

Private Function GeneraAsientoTSBanco() As colAsientoTemp
    Dim i As Long, v As Currency, k As TSKardex
    Dim col As colAsientoTemp
    
    Set col = New colAsientoTemp
    For i = 1 To CountTSKardex
        Set k = TSKardex(i)
        v = (k.Debe - k.Haber) * k.auxBandCalculoBanco
        col.Add k.auxIdCuenta, v
    Next i
    Set GeneraAsientoTSBanco = col
    Set col = Nothing
End Function

'*** MAKOTO 07/feb/01 Agregado
Private Function GeneraAsientoTSRetencion( _
                    ByVal BandActivo As Boolean) As colAsientoTemp
    Dim i As Long, v As Currency, k As TSKardexRet
    Dim col As colAsientoTemp
    
    Set col = New colAsientoTemp
    For i = 1 To CountTSKardexRet
        Set k = TSKardexRet(i)
        v = (k.Debe - k.Haber)
        If BandActivo Then
            col.Add k.auxIdCuentaActivo, v
        Else
            col.Add k.auxIdCuentaPasivo, v
        End If
    Next i
    Set GeneraAsientoTSRetencion = col
    Set col = Nothing
    Set k = Nothing
End Function

Private Function GeneraAsientoTSBancoDebe() As colAsientoTemp
    Dim i As Long, v As Currency, k As TSKardex
    Dim col As colAsientoTemp
    
    Set col = New colAsientoTemp
    For i = 1 To CountTSKardex
        Set k = TSKardex(i)
        v = k.Debe * k.auxBandCalculoBanco
        col.Add k.auxIdCuenta, v
    Next i
    Set GeneraAsientoTSBancoDebe = col
    Set col = Nothing
End Function


Private Function GeneraAsientoTSBancoHaber() As colAsientoTemp
    Dim i As Long, v As Currency, k As TSKardex
    Dim col As colAsientoTemp
    
    Set col = New colAsientoTemp
    For i = 1 To CountTSKardex
        Set k = TSKardex(i)
        v = k.Haber * k.auxBandCalculoBanco
        col.Add k.auxIdCuenta, v
    Next i
    Set GeneraAsientoTSBancoHaber = col
    Set col = Nothing
End Function



Private Function GeneraAsientoTSDoc(ByVal CodTipoDoc As String) As colAsientoTemp
    Dim i As Long, v As Currency, k As TSKardex
    Dim col As colAsientoTemp
    Dim td As TSTipoDocBanco
    
    Set td = mProps.objEmpresa.RecuperaTSTipoDocBanco(CodTipoDoc)
    If Not td Is Nothing Then
        Set col = New colAsientoTemp
        For i = 1 To CountTSKardex
            Set k = TSKardex(i)
            If k.IdTipoDoc = td.IdTipoDoc Then
                v = k.Debe - k.Haber
                col.Add 0, v
            End If
        Next i
    End If
    Set GeneraAsientoTSDoc = col
    Set col = Nothing
    Set k = Nothing
    Set td = Nothing
End Function



Private Function GeneraAsientoPCTotal( _
                    ByVal BandPrincipal As Boolean) As colAsientoTemp
    Dim i As Long, v As Currency, k As PCKardex
    Dim col As colAsientoTemp
    
    Set col = New colAsientoTemp
    For i = 1 To CountPCKardex
        Set k = PCKardex(i)
        v = k.Debe + k.Haber
        
        '*** MAKOTO 08/mar/01 Agregado
        'Si es que el prov/cli no tiene asignado una cuenta, genera error
        If (BandPrincipal And k.auxIdCuenta = 0) Or _
            (Not BandPrincipal And k.auxIdCuenta2 = 0) Then
            NoTieneCuentaAsignado False, "Cuenta " & IIf(BandPrincipal, "1", "2"), k.CodProvcli
        End If
        
        If BandPrincipal Then
            col.Add k.auxIdCuenta, v
        Else
            col.Add k.auxIdCuenta2, v
        End If
    Next i
    Set GeneraAsientoPCTotal = col
    Set col = Nothing
End Function

Private Function GeneraAsientoPCTotalDebe( _
                    ByVal BandPrincipal As Boolean) As colAsientoTemp
    Dim i As Long, v As Currency, k As PCKardex
    Dim col As colAsientoTemp
    'If Me.BandCHP Then Exit Function
    Set col = New colAsientoTemp
    For i = 1 To CountPCKardex
        Set k = PCKardex(i)
        If Not PCKardex(i).EsRubroRol Then
            v = k.Debe
        
        '*** MAKOTO 08/mar/01 Agregado
        'Si es que el prov/cli no tiene asignado una cuenta, genera error
            If (v > 0) And ((BandPrincipal And k.auxIdCuenta = 0) Or _
                (Not BandPrincipal And k.auxIdCuenta2 = 0)) Then
                NoTieneCuentaAsignado False, "Cuenta " & IIf(BandPrincipal, "1", "2"), k.CodProvcli
            End If
        
            If BandPrincipal Then
                col.Add k.auxIdCuenta, v
            Else
                col.Add k.auxIdCuenta2, v
            End If
        End If
    Next i
    Set GeneraAsientoPCTotalDebe = col
    Set col = Nothing
End Function

Private Function GeneraAsientoPCTotalHaber( _
                    ByVal BandPrincipal As Boolean) As colAsientoTemp
    Dim i As Long, v As Currency, k As PCKardex
    Dim col As colAsientoTemp
   ' If Me.BandCHP Then Exit Function
    Set col = New colAsientoTemp
    For i = 1 To CountPCKardex
        
        Set k = PCKardex(i)
        If Not k.BandPosf Then
            v = k.Haber
            '*** MAKOTO 08/mar/01 Agregado
            'Si es que el prov/cli no tiene asignado una cuenta, genera error
            If (v > 0) And ((BandPrincipal And k.auxIdCuenta = 0) Or _
                (Not BandPrincipal And k.auxIdCuenta2 = 0)) Then
                NoTieneCuentaAsignado False, "Cuenta " & IIf(BandPrincipal, "1", "2"), k.CodProvcli
            End If
            If BandPrincipal Then
                col.Add k.auxIdCuenta, v
            Else
                col.Add k.auxIdCuenta2, v
            End If
        End If
    Next i
    Set GeneraAsientoPCTotalHaber = col
    Set col = Nothing
End Function

Private Function GeneraAsientoPCPago( _
                    ByVal BandPrincipal As Boolean) As colAsientoTemp
    Dim i As Long, v As Currency, k As PCKardex
    Dim col As colAsientoTemp, Doc As PCDocAsignado
    
    Set col = New colAsientoTemp
    For i = 1 To CountPCKardex
        Set k = PCKardex(i)
         If Not k.EsRubroRol Then   'AUC asigna cuentas si no es un elemento del rol
            v = k.Debe
            
            'Cuando tiene documento asignado,
            ' convierte en valor correspondiente a la cotizacion del doc. asignado
            ' Esto sirve para autocalcular diferencial cambiario en asiento contable
            If k.IdAsignado <> 0 Then
                '*** MAKOTO 08/mar/01 Agregado
                'Si es que el prov/cli no tiene asignado una cuenta, genera error
                If (BandPrincipal And k.auxIdCuenta = 0) Or _
                    (Not BandPrincipal And k.auxIdCuenta2 = 0) Then
                    NoTieneCuentaAsignado False, "Cuenta " & IIf(BandPrincipal, "1", "2"), k.CodProvcli
                End If
                
                v = v * Me.Cotizacion("")           'Convierte en moneda nacional
                Set Doc = k.RecuperaPCDocAsignado   'Recupera el documento asignado
                If Not (Doc Is Nothing) Then
                    v = v / Me.Cotizacion(Doc.CodMoneda)    'Convierte en moneda original
                    v = v * Doc.Cotizacion              'Convierte en moneda nacional a cotizacion original
                End If
                v = v / Me.Cotizacion("")       'Convierte en moneda ex.
            
                If BandPrincipal Then
                    col.Add k.auxIdCuenta, v
                Else
                    col.Add k.auxIdCuenta2, v
                End If
            End If
       End If
    Next i
    Set GeneraAsientoPCPago = col
    Set k = Nothing
    Set col = Nothing
    Set Doc = Nothing
End Function

Private Function GeneraAsientoPCCobro( _
                    ByVal BandPrincipal As Boolean) As colAsientoTemp
    Dim i As Long, v As Currency, k As PCKardex
    Dim col As colAsientoTemp, Doc As PCDocAsignado
    Set col = New colAsientoTemp
    For i = 1 To CountPCKardex
        Set k = PCKardex(i)
        v = k.Haber
        ' Cuando tiene documento asignado,
        ' convierte en valor correspondiente a la cotizacion del doc. asignado
        ' Esto sirve para autocalcular diferencial cambiario en asiento contable
        If k.IdAsignado <> 0 Then
            '*** MAKOTO 08/mar/01 Agregado
            'Si es que el prov/cli no tiene asignado una cuenta, genera error
            If (BandPrincipal And k.auxIdCuenta = 0) Or _
                (Not BandPrincipal And k.auxIdCuenta2 = 0) Then
                NoTieneCuentaAsignado False, "Cuenta " & IIf(BandPrincipal, "1", "2"), k.CodProvcli
            End If
            v = v * Me.Cotizacion("")       'Convierte en moneda nacional
            Set Doc = k.RecuperaPCDocAsignado   'Recupera el documento asignado
            If Not (Doc Is Nothing) Then
                v = v / Me.Cotizacion(Doc.CodMoneda)    'Convierte en moneda original
                v = v * Doc.Cotizacion              'Convierte en moneda nacional a cotizacion original
            End If
            v = v / Me.Cotizacion("")       'Convierte en moneda ex.
            If BandPrincipal Then
                col.Add k.auxIdCuenta, v
            Else
                col.Add k.auxIdCuenta2, v
            End If
        End If
    Next i
    Set GeneraAsientoPCCobro = col
    Set k = Nothing
    Set col = Nothing
    Set Doc = Nothing
End Function

'*** MAKOTO 28/feb/01 Agregado
'Suma solo PCKardex que tengan IdAsignado=0
'y agrupa por cuenta 2
Private Function GeneraAsientoPCPorCobrarPagar( _
                    ByVal BandPorCobrar As Boolean) As colAsientoTemp
    Dim i As Long, v As Currency, k As PCKardex
    Dim col As colAsientoTemp
    
    Set col = New colAsientoTemp
    For i = 1 To CountPCKardex
        Set k = PCKardex(i)
        
        'Si es de Por Cobrar/Pagar
        If k.IdAsignado = 0 Then
            '*** MAKOTO 08/mar/01 Agregado
            'Si es que el item no tiene asignado una cuenta de Activo, genera error
            If k.auxIdCuenta2 = 0 Then
                NoTieneCuentaAsignado False, "Cuenta 2", k.CodProvcli
            End If
            
            v = IIf(BandPorCobrar, k.Debe, k.Haber)
            If Me.GNTrans.Empresa.GNOpcion.ObtenerValor("CalculoIVA4Decimales") = "1" Then
                If v > 0 Then col.Add k.auxIdCuenta2, MiCCur(Format$(v, Me.FormatoMoneda))
            Else
                If v > 0 Then col.Add k.auxIdCuenta2, v
            End If
'            If v > 0 Then Col.Add k.auxIdCuenta2, v
            
            
        End If
    Next i
    Set GeneraAsientoPCPorCobrarPagar = col
    Set col = Nothing
End Function




Private Function GeneraAsientoFormaCobroPago(CodForma As String) As colAsientoTemp
    Dim i As Long, k As PCKardex
    Dim col As colAsientoTemp, tsf As TSFormaCobroPago
    
    Set tsf = mProps.objEmpresa.RecuperaTSFormaCobroPago(CodForma)
    If Not tsf Is Nothing Then
        Set col = New colAsientoTemp
        For i = 1 To CountPCKardex
            Set k = PCKardex(i)
            If k.IDForma = tsf.IDForma Then
                col.Add 0, (k.Debe + k.Haber)
                Exit For
            End If
        Next i
    End If
    Set GeneraAsientoFormaCobroPago = col
    Set col = Nothing
    Set k = Nothing
    Set tsf = Nothing
End Function



Private Function GeneraAsientoIVRecargo(CodRecargo As String) As colAsientoTemp
    Dim i As Long, k As IVKardexRecargo, kaf As AFKardexRecargo
    Dim col As colAsientoTemp, ivr As IVRecargo
        
    If mobjGNTrans.Modulo <> "AF" Then
        Set ivr = mProps.objEmpresa.RecuperaIVRecargo(CodRecargo)
        If Not ivr Is Nothing Then
            Set col = New colAsientoTemp
            For i = 1 To CountIVKardexRecargo
                Set k = IVKardexRecargo(i)
                If k.IdRecargo = ivr.IdRecargo Then
                    If Me.GNTrans.Empresa.GNOpcion.ObtenerValor("CalculoIVA4Decimales") = "1" Then
                        col.Add 0, Abs(MiCCur(Format$(k.Valor, Me.FormatoMoneda)))
                    Else
                        col.Add 0, Abs(k.Valor)
                    End If
                    Exit For
                End If
            Next i
        End If
    Else
        Set ivr = mProps.objEmpresa.RecuperaIVRecargo(CodRecargo)
        If Not ivr Is Nothing Then
            Set col = New colAsientoTemp
            For i = 1 To CountAFKardexRecargo
                Set kaf = AFKardexRecargo(i)
                If kaf.IdRecargo = ivr.IdRecargo Then
                    If Me.GNTrans.Empresa.GNOpcion.ObtenerValor("CalculoIVA4Decimales") = "1" Then
                        col.Add 0, Abs(MiCCur(Format$(kaf.Valor, Me.FormatoMoneda)))
                    Else
                        col.Add 0, Abs(kaf.Valor)
                    End If
                    Exit For
                End If
            Next i
        End If
    End If
    Set GeneraAsientoIVRecargo = col
    Set col = Nothing
    Set k = Nothing
    Set kaf = Nothing
    Set ivr = Nothing
End Function

Private Sub NoTieneCuentaAsignado( _
                ByVal bandItem As Boolean, _
                ByVal Tipo As String, _
                ByVal cod As String)
    Dim iv As IVInventario, desc As String
    Dim pc As PCProvCli, cat As String, msg As String
    
    If bandItem Then
        cat = "ítem"
        Set iv = Me.Empresa.RecuperaIVInventario(cod)
        If Not (iv Is Nothing) Then desc = iv.Descripcion
        Set iv = Nothing
    Else
        cat = "registro"
        Set pc = Me.Empresa.RecuperaPCProvCli(cod)
        If Not (pc Is Nothing) Then desc = pc.Nombre
        Set pc = Nothing
    End If
    
    msg = "El siguiente " & cat & " no tiene asignado una cuenta contable de tipo " & Tipo & ", " & _
        "por lo que no se puede generar el asiento contable de ésta transacción. " & vbCr & vbCr & _
        "    Código:        " & cod & vbCr & _
        "    Descripción: " & desc & vbCr & vbCr & _
        "Para poder grabar la transacción, por favor habra datos del dicho " & cat & " " & _
        "y asigne una cuenta contable correspondiente."
    If bandItem Then
        msg = msg & vbCr & "Luego elimine de la transacción e inserte de nuevo el mismo ítem."
    End If
    Err.Raise ERR_NOHAYCODIGO, "GNComprobante.GeneraAsiento", msg
End Sub

Private Function GeneraAsientoIVActivo( _
                    Param As String) As colAsientoTemp
    Dim i As Long, v As Currency, k As IVKardex
    Dim col As colAsientoTemp
    
    Set col = New colAsientoTemp
    For i = 1 To CountIVKardex
        v = 0
        Set k = IVKardex(i)
        
        '*** MAKOTO 08/mar/01 Agregado
        'Si es que el item no tiene asignado una cuenta de Activo, genera error
        If k.auxIdCuentaActivo = 0 Then
            NoTieneCuentaAsignado True, "ACTIVO", k.CodInventario
        End If
        
        Select Case Right$(Param, 1)
        Case "+":   If k.CostoRealTotal > 0 Then v = Abs(k.CostoRealTotal)  'Sólo positivos
        Case "-":   If k.CostoRealTotal < 0 Then v = Abs(k.CostoRealTotal)  'Sólo negativos
        Case Else:  v = Abs(k.CostoRealTotal)       'Todos con valor absoluto
        End Select
        
        If v <> 0 Then
            'Redondea al formato de moneda               '*** MAKOTO 13/feb/01
            'No con FormatoCosto porque asiento tiene que ser cuadrado con valores de Ctas x Pagar/Cobrar
            'Por ejemplo si está FormatoMoneda con 2 decimales y FormatoCosto con 4 decimales,
            'va a haber una diferencia entre Kardex de inventario y Libro mayor de inventario, algo que ya es inevitable.
'            v = MiCCur(Format$(v, Me.FormatoMoneda))   '*** MAKOTO 01/mar/01 Error, era formato de costo
            'jeaa 02/10/2006 diferencia en asiento
            If mobjGNTrans.IVTipoTrans = "I" Then
                v = MiCCur(Format$(v, Me.FormatoCosto))
            Else
                If FormatoMoneda = "#,0.00" And Me.FormatoCosto = "#,#.0000" Then
                    v = MiCCur(Format$(v, Me.FormatoMoneda))
                Else
                    v = MiCCur(Format$(v, Me.FormatoCosto))
                End If
            End If
            col.Add k.auxIdCuentaActivo, v
        End If
    Next i
    
    'Al ultimo tiene que redondear al formato de Precio Total       '*** MAKOTO 01/mar/01
    RedondearAsiento col, Me.FormatoMoneda
    
    If col.Count Then Set GeneraAsientoIVActivo = col
    Set col = Nothing
End Function

Private Function GeneraAsientoIVCosto( _
                    Param As String) As colAsientoTemp
    Dim i As Long, v As Currency, k As IVKardex
    Dim col As colAsientoTemp
    
    Set col = New colAsientoTemp
    For i = 1 To CountIVKardex
        v = 0
        Set k = IVKardex(i)
        
        '*** MAKOTO 08/mar/01 Agregado
        'Si es que el item no tiene asignado una cuenta de Activo, genera error
        If k.auxIdCuentaCosto = 0 Then
            NoTieneCuentaAsignado True, "COSTO", k.CodInventario
        End If
        
        Select Case Right$(Param, 1)
        Case "+":   If k.CostoRealTotal > 0 Then v = Abs(k.CostoRealTotal)  'Sólo positivos
        Case "-":   If k.CostoRealTotal < 0 Then v = Abs(k.CostoRealTotal)  'Sólo negativos
        Case Else:  v = Abs(k.CostoRealTotal)       'Todos con valor absoluto
        End Select
        
        If v <> 0 Then
            'Redondea al formato de moneda               '*** MAKOTO 13/feb/01
            'No con FormatoCosto porque asiento tiene que ser cuadrado con valores de Ctas x Pagar/Cobrar
            'Por ejemplo si está FormatoMoneda con 2 decimales y FormatoCosto con 4 decimales,
            'va a haber una diferencia entre Kardex de inventario y Libro mayor de inventario, algo que ya es inevitable.
            'v = MiCCur(Format$(v, Me.FormatoMoneda))   '*** MAKOTO 01/mar/01 Error, era formato de costo
            'jeaa 02/10/2006 diferencia en asiento
            If FormatoMoneda = "#,0.00" And Me.FormatoCosto = "#,#.0000" Then
                v = MiCCur(Format$(v, Me.FormatoMoneda))
            Else
                v = MiCCur(Format$(v, Me.FormatoCosto))
            End If
            col.Add k.auxIdCuentaCosto, v
        End If
    Next i
    
    'Al ultimo tiene que redondear al formato de Precio Total       '*** MAKOTO 01/mar/01
    RedondearAsiento col, Me.FormatoMoneda
    
    If col.Count Then Set GeneraAsientoIVCosto = col
    Set col = Nothing
End Function

'*** MAKOTO 01/mar/01 Agregado
'Redondea todos los detalles que incluye la colección con formato enviado
Private Sub RedondearAsiento( _
                ByVal c As colAsientoTemp, _
                ByVal fmt As String)
    Dim obj As AsientoTemp
    Dim Valor As Currency
    For Each obj In c
        If Me.Empresa.GNOpcion.IVKTipoDatoDouble Then
            Valor = obj.ValorDou
            obj.Valor = MiCCur(Format$(obj.ValorDou, fmt))
            If (Valor <> 0) And (obj.ValorDou = 0) Then obj.ValorDou = Valor
        Else
            Valor = obj.Valor
            obj.Valor = MiCCur(Format$(obj.Valor, fmt))
           '***Agregado. 28/08/2003. Angel.
            '***Para controlar que no se pierdan valores pequeños luego del redondeo
            '***Ejm. Si el fmt=#,0.00 y obj.valor=0.0012 al aplicar format obj.valor=0.00
            If (Valor <> 0) And (obj.Valor = 0) Then obj.Valor = Valor
        End If
   Next obj

End Sub

Private Function GeneraAsientoIVVenta( _
                    Param As String) As colAsientoTemp
    Dim i As Long, v As Currency, k As IVKardex
    Dim col As colAsientoTemp
    
    Set col = New colAsientoTemp
    For i = 1 To CountIVKardex
        v = 0
        Set k = IVKardex(i)
        
        '*** MAKOTO 08/mar/01 Agregado
        'Si es que el item no tiene asignado una cuenta de Activo, genera error
        If k.auxIdCuentaVenta = 0 Then
            NoTieneCuentaAsignado True, "VENTA", k.CodInventario
        End If
        
        Select Case Right$(Param, 1)
        Case "+":   If k.PrecioRealTotal > 0 Then v = Abs(k.PrecioRealTotal)
        Case "-":   If k.PrecioRealTotal < 0 Then v = Abs(k.PrecioRealTotal)
        Case "*":   v = k.PrecioRealTotal
        Case "2":   v = Abs(k.PrecioTotal)           '*** DIEGO  14/07/03 Modificado Necesitamos Precio Total
        Case Else:
''            jeaa  09/02/2007 sii factura por impresion x item
            If Me.GNTrans.IVTipoTrans = "E" Then
                If k.PrecioRealTotal < 0 Then
                    v = Abs(k.PrecioRealTotal)      '*** MAKOTO 14/dic/00 Modificado para que tome PrecioRealTotal
                Else
                    'cuando esiste devolucion en la misma Factura CAMARI
                    v = (k.PrecioRealTotal) * -1
                End If
            Else
                    v = Abs(k.PrecioRealTotal)      '*** MAKOTO 14/dic/00 Modificado para que tome PrecioRealTotal
            End If
        End Select
        
        If v <> 0 Then
            'Redondea al formato de P.Total               '*** MAKOTO 13/feb/01
            'v = MiCCur(Format$(v, Me.FormatoMoneda))
            'jeaa 21/junio/2005 antes v = MiCCur(Format$(v, Me.Formatomoneda))
            v = MiCCur(Format$(v, Me.FormatoCosto))
            
            col.Add k.auxIdCuentaVenta, v
        End If
    Next i
    'Al ultimo tiene que redondear al formato de Precio Total       '*** MAKOTO 01/mar/01
    RedondearAsiento col, Me.FormatoMoneda
    
    
    If col.Count Then Set GeneraAsientoIVVenta = col
    Set col = Nothing
End Function

Private Function GeneraAsientoIVCostoTotal( _
                    Param As String) As colAsientoTemp
    Dim i As Long, k As IVKardex, v As Currency
    Dim col As colAsientoTemp
    
    Set col = New colAsientoTemp
    For i = 1 To CountIVKardex
        v = 0
        Set k = IVKardex(i)
    
        Select Case Right$(Param, 1)
        Case "+":   If k.CostoRealTotal > 0 Then v = Abs(k.CostoRealTotal)
        Case "-":   If k.CostoRealTotal < 0 Then v = Abs(k.CostoRealTotal)
        Case Else:  v = Abs(k.CostoRealTotal)
        End Select
        
        If v <> 0 Then
            'Redondea al formato de moneda               '*** MAKOTO 13/feb/01
            'No con FormatoCosto porque asiento tiene que ser cuadrado con valores de Ctas x Pagar/Cobrar
            'Por ejemplo si está FormatoMoneda con 2 decimales y FormatoCosto con 4 decimales,
            'va a haber una diferencia entre Kardex de inventario y Libro mayor de inventario, algo que ya es inevitable.
            v = MiCCur(Format$(v, Me.FormatoMoneda))
            col.Add 0, v
        End If
    Next i
    
    Set GeneraAsientoIVCostoTotal = col
    Set col = Nothing
End Function

Private Function GeneraAsientoIVPrecioTotal( _
                    Param As String) As colAsientoTemp
    Dim i As Long, k As IVKardex, v As Currency
    Dim col As colAsientoTemp
    
    Set col = New colAsientoTemp
    For i = 1 To CountIVKardex
        v = 0
        Set k = IVKardex(i)
        
        Select Case Right$(Param, 1)
'        Case "+":   If k.PrecioTotal > 0 Then v = Abs(k.PrecioTotal)    'Solo positivos
'        Case "-":   If k.PrecioTotal < 0 Then v = Abs(k.PrecioTotal)    'Solo negativos
'        Case "*":   v = k.PrecioTotal           'Suma real
'        Case Else:  v = Abs(k.PrecioTotal)      'Suma de valor absoluto
        Case "+":   If k.PrecioRealTotal > 0 Then v = Abs(k.PrecioRealTotal)    'Solo positivos
        Case "-":   If k.PrecioRealTotal < 0 Then v = Abs(k.PrecioRealTotal)    'Solo negativos
        Case "*":   v = k.PrecioRealTotal           'Suma real
        Case Else:  v = Abs(k.PrecioRealTotal)      'Suma de valor absoluto
        End Select
        
        If v <> 0 Then
            'Redondea al formato de P.Total               '*** MAKOTO 13/feb/01
            v = MiCCur(Format$(v, Me.FormatoMoneda))
            col.Add 0, v
        End If
    Next i
    
    Set GeneraAsientoIVPrecioTotal = col
    Set col = Nothing
End Function

'Costo total con recargos
Private Function GeneraAsientoIVCostoTotal2() As colAsientoTemp
    Dim i As Long, k As IVKardex, r As IVKardexRecargo
    Dim col As colAsientoTemp
    
    Set col = GeneraAsientoIVCostoTotal(0)
    
    For i = 1 To CountIVKardexRecargo
        Set r = IVKardexRecargo(i)
        col.Add 0, r.Valor
    Next i
    
    Set GeneraAsientoIVCostoTotal2 = col
    Set col = Nothing
End Function

'Precio total con recargos
Private Function GeneraAsientoIVPrecioTotal2() As colAsientoTemp
    Dim i As Long, k As IVKardex, r As IVKardexRecargo
    Dim col As colAsientoTemp
    
    Set col = GeneraAsientoIVPrecioTotal(0)
    
    For i = 1 To CountIVKardexRecargo
        Set r = IVKardexRecargo(i)
        col.Add 0, r.Valor
    Next i
    Set GeneraAsientoIVPrecioTotal2 = col
    Set col = Nothing
End Function

'***Agregado. 02/Ago/2004. Angel
'Total de Descuentos x Item
Private Function GeneraAsientoIVDescItemTotal() As colAsientoTemp
    Dim col As colAsientoTemp, Tdesc_item As Currency
    
    Set col = New colAsientoTemp
    Tdesc_item = IVKardexDescItemTotal
    col.Add 0, Tdesc_item
    Set GeneraAsientoIVDescItemTotal = col
    Set col = Nothing
End Function


Friend Property Set Empresa(objEmpresa As Empresa)
    Set mProps.objEmpresa = objEmpresa
End Property

Public Property Get Empresa() As Empresa
    Set Empresa = mProps.objEmpresa
End Property


Public Property Get GNTrans() As GNTrans
    If (mobjGNTrans Is Nothing) And (Len(mProps.CodTrans) > 0) Then
        'Recupera GNTrans
        Set mobjGNTrans = mProps.objEmpresa.RecuperaGNTrans(mProps.CodTrans)
        If mobjGNTrans Is Nothing Then
            Err.Raise ERR_NOHAYCODIGO, "GNComprobante.GNTrans", _
                "No se encuentra el código de transacción '" & mProps.CodTrans & "'." & vbCr & _
                "Por favor, revíse la configuración del sistema."
        End If
    End If
    Set GNTrans = mobjGNTrans
End Property

'--------------- Manejo de coleccion de CTLibroDetalle
Public Function AddCTLibroDetalle() As Long
    Dim nuevo As CTLibroDetalle
    
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.AddCTLibroDetalle", MSGERR_SOLOVER
    
    If mcolCTLibroDetalle Is Nothing Then Set mcolCTLibroDetalle = New Collection
    
    Set nuevo = New CTLibroDetalle
    Set nuevo.GNComprobante = Me
    mcolCTLibroDetalle.Add nuevo
'    nuevo.Orden = mcolCTLibroDetalle.Count + 1
    nuevo.Descripcion = Left$(Me.Descripcion, 80)
'    If Len(Me.GNTrans.CodGastoPre) > 0 Then
'        nuevo.CodGasto = Me.GNTrans.CodGastoPre
'    End If
   
    AddCTLibroDetalle = mcolCTLibroDetalle.Count   'Devuelve el indice de nuevo elemento
    Set nuevo = Nothing
    mbooModificado = True
End Function

'Llama solo desde GeneraAsiento
Friend Function AddCTLibroDetalleAuto() As Long
    Dim nuevo As CTLibroDetalle
    Dim pcg As PcGrupo
    Dim pc As PCProvCli
    
    If mcolCTLibroDetalle Is Nothing Then Set mcolCTLibroDetalle = New Collection
    
    Set nuevo = New CTLibroDetalle
    Set nuevo.GNComprobante = Me
    nuevo.BandIntegridad = INTEG_AUTO
    mcolCTLibroDetalle.Add nuevo
'    nuevo.Orden = mcolCTLibroDetalle.Count + 1
    nuevo.Descripcion = Left$(Me.Descripcion, 80)
    If Me.Empresa.GNOpcion.ObtenerValor("DistribucionGastos") = "1" Then
        If Me.GNTrans.AsientoxPCG Then
            If Len(Me.Empresa.GNOpcion.ObtenerValor("PCGrupoGastoCL")) > 0 Then
                Set pc = Me.Empresa.RecuperaPCProvCliQuick(Me.CodClienteRef)
                Select Case Me.Empresa.GNOpcion.ObtenerValor("PCGrupoGastoCL")
                    Case "1"
                        Set pcg = Me.Empresa.RecuperaPCGrupo(1, pc.CodGrupo1)
                    Case "2"
                        Set pcg = Me.Empresa.RecuperaPCGrupo(2, pc.CodGrupo2)
                    Case "3"
                        Set pcg = Me.Empresa.RecuperaPCGrupo(3, pc.CodGrupo3)
                    Case "4"
                        Set pcg = Me.Empresa.RecuperaPCGrupo(4, pc.CodGrupo4)
                End Select
                nuevo.CodGasto = pcg.CodGasto
            End If
        Else
            nuevo.CodGasto = Me.GNTrans.CodGastoPre
        End If
    End If
   
    AddCTLibroDetalleAuto = mcolCTLibroDetalle.Count   'Devuelve el indice de nuevo elemento
    Set nuevo = Nothing
    mbooModificado = True
End Function

Public Sub RemoveCTLibroDetalle(ByVal ix As Long, Optional obj As CTLibroDetalle)
    Dim Ctd As CTLibroDetalle

    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemoveCTLibroDetalle", MSGERR_SOLOVER
    If mcolCTLibroDetalle Is Nothing Then RecuperaAsiento
    
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolCTLibroDetalle.Count
            If mcolCTLibroDetalle.item(ix) Is obj Then Exit For
        Next ix
    End If
    
    'Si ha encontrado el item que se va a eliminar
    If ix <= mcolCTLibroDetalle.Count Then
        'Verifica el item no es generado por Generación automática de asiento
        Set Ctd = mcolCTLibroDetalle(ix)
        'Si lo es , no puede eliminar
        If Not Me.IdTransFuente <> 0 Then
            If Ctd.BandIntegridad = INTEG_AUTO Then
                Err.Raise ERR_INVALIDO, "GNComprobante.RemoveCTLibroDetalle", _
                     "No se puede eliminar porque la fila es generado automáticamente."
            End If
        End If
        mcolCTLibroDetalle.Remove ix
    End If
    
    mbooModificado = True
End Sub

'Elimina todos los detalles de asiento
Public Sub BorrarCTLibroDetalle()
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BorrarCTLibroDetalle", MSGERR_SOLOVER
    If mcolCTLibroDetalle Is Nothing Then Set mcolCTLibroDetalle = New Collection
    
    With mcolCTLibroDetalle
        Do While .Count > 0
            .Remove .Count
        Loop
    End With
    mbooModificado = True
End Sub

Public Property Get CountCTLibroDetalle() As Long
    If mcolCTLibroDetalle Is Nothing Then RecuperaAsiento
    CountCTLibroDetalle = mcolCTLibroDetalle.Count
End Property

Public Property Get CTLibroDetalle(ix As Long) As CTLibroDetalle
    If mcolCTLibroDetalle Is Nothing Then RecuperaAsiento
    Set CTLibroDetalle = mcolCTLibroDetalle.item(ix)
End Property


'--------------- Manejo de coleccion de TSKardex
Public Function AddTSKardex() As Long
    Dim nuevo As TSKardex, pc As PCProvCli
    
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.AddTSKardex", MSGERR_SOLOVER
    If mcolTSKardex Is Nothing Then RecuperaTSKardex
    
    Set nuevo = New TSKardex
    Set nuevo.GNComprobante = Me
    
    'Valores predeterminados
    nuevo.FechaEmision = mProps.FechaTrans
    nuevo.FechaVenci = nuevo.FechaEmision
    
    '*** MAKOTO 05/feb/01 Agregado
    nuevo.Nombre = mProps.Nombre
    
    'Si la transacción es de modulo de inventario
    If GNTrans.Modulo = "IV" And Len(nuevo.Nombre) = 0 Then
        'Si tiene asignado Proveedor/Cliente
        If GNTrans.IVPorPagar Then
            Set pc = mProps.objEmpresa.RecuperaPCProvCli(CodProveedorRef)
        Else
            Set pc = mProps.objEmpresa.RecuperaPCProvCli(CodClienteRef)
        End If
        'Asigna como nombre de documento el nombre de proveedor/cliente
        If Not (pc Is Nothing) Then nuevo.Nombre = pc.Nombre
        Set pc = Nothing
    End If
    
    mcolTSKardex.Add nuevo
    AddTSKardex = mcolTSKardex.Count    'Devuelve el indice de nuevo elemento
    Set nuevo = Nothing
    mbooModificado = True
End Function

Public Sub RemoveTSKardex(ByVal ix As Long, Optional obj As TSKardex)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemoveTSKardex", MSGERR_SOLOVER
    If mcolTSKardex Is Nothing Then RecuperaTSKardex
    
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolTSKardex.Count
            If mcolTSKardex.item(ix) Is obj Then
                mcolTSKardex.Remove ix
                Exit For
            End If
        Next ix
    Else
        mcolTSKardex.Remove ix
    End If
    
    mbooModificado = True
End Sub

'Elimina todos los detalles de TSKardex
Public Sub BorrarTSKardex()
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BorrarTSKardex", MSGERR_SOLOVER
    If mcolTSKardex Is Nothing Then Set mcolTSKardex = New Collection
    
    With mcolTSKardex
        Do While .Count > 0
            .Remove .Count
        Loop
    End With
    mbooModificado = True
End Sub

Public Property Get CountTSKardex() As Long
    If mcolTSKardex Is Nothing Then RecuperaTSKardex
    CountTSKardex = mcolTSKardex.Count
End Property

Public Property Get TSKardex(ix As Long) As TSKardex
    If mcolTSKardex Is Nothing Then RecuperaTSKardex
    Set TSKardex = mcolTSKardex.item(ix)
End Property

'--------------- Manejo de coleccion de IVKardex
Public Function AddIVKardex() As Long
    Dim nuevo As IVKardex
    
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.AddIVKardex", MSGERR_SOLOVER
    If mcolIVKardex Is Nothing Then RecuperaIVKardex
    
    'Si tiene límite de número de filas         '*** MAKOTO 14/oct/00 Agregado
    ' y es nuevo comprobante
    If Me.GNTrans.IVTipoTrans <> "A" Then
        If Me.GNTrans.CodPantalla <> "IVPVTS" Then
            If (Me.GNTrans.IVNumFilaMax > 0) And Me.EsNuevo Then
                'Verifica el número de filas, y no permite más del límite
                If mcolIVKardex.Count >= Me.GNTrans.IVNumFilaMax Then
                    Err.Raise ERR_INVALIDO, "GNComprobante.AddIVKardex", _
                        "No se puede agregar más filas porque está limitado hasta " & _
                         Me.GNTrans.IVNumFilaMax & " filas." & vbCr & vbCr & _
                        "Si hay más detalle de items, regístrelos en otro comprobante." & vbCr & _
                        "Si quiere cambiar el límite, váyase a la configuración de la transacción, por favor."
                End If
            End If
        End If
    End If
    
    Set nuevo = New IVKardex
    Set nuevo.GNComprobante = Me
        
        'Proporciona valores predeterminados
        If Me.EsNuevo Then
            If Me.Empresa.GNOpcion.IVKTipoDatoDouble Then
                nuevo.CantidadDou = GNTrans.CantidadPre
            Else
                nuevo.Cantidad = GNTrans.CantidadPre
            End If
        End If
        If Me.CountIVKardex = 0 Then                        '*** Makoto 16/dic/00 Modificado para que copie lo anterior
            'Si es primero, coge la bodega predeterminada
            If GNTrans.CodPantalla = "IVCAMIEPRD" Then
                nuevo.CodBodega = GNTrans.CodBodegaDestPre
            Else
                nuevo.CodBodega = GNTrans.CodBodegaPre
            End If
        Else
            'Si no es primero copia lo anterior
            nuevo.CodBodega = Me.IVKardex(Me.CountIVKardex).CodBodega
        End If
    mcolIVKardex.Add nuevo
    AddIVKardex = mcolIVKardex.Count    'Devuelve el indice de nuevo elemento
    Set nuevo = Nothing
    mbooModificado = True
End Function

Public Sub RemoveIVKardex(ByVal ix As Long, Optional obj As IVKardex)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemoveIVKardex", MSGERR_SOLOVER
    If mcolIVKardex Is Nothing Then RecuperaIVKardex
    
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolIVKardex.Count
            If mcolIVKardex.item(ix) Is obj Then
                mcolIVKardex.Remove ix
                Exit For
            End If
        Next ix
        Debug.Assert True   'No se puede dar
    Else
        mcolIVKardex.Remove ix
    End If
    
    mbooModificado = True
End Sub

'Elimina todos los detalles de IVKardex
Public Sub BorrarIVKardex()
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BorrarIVKardex", MSGERR_SOLOVER
    If mcolIVKardex Is Nothing Then Set mcolIVKardex = New Collection
    
    With mcolIVKardex
        Do While .Count > 0
            .Remove .Count
        Loop
    End With
    mbooModificado = True
End Sub

Public Property Get CountIVKardex() As Long
    If mcolIVKardex Is Nothing Then RecuperaIVKardex
    CountIVKardex = mcolIVKardex.Count
End Property

Public Property Get IVKardex(ix As Long) As IVKardex
    If mcolIVKardex Is Nothing Then RecuperaIVKardex
    Set IVKardex = mcolIVKardex.item(ix)
End Property


'*** MAKOTO 14/ago/2000 Agregado
'Une detalles si hay items repetidos
'Devuelve True si ha cambiado algo, sino False
Public Function TotalizaItemRepetido() As Boolean
    Dim ivk As IVKardex, i As Long, j As Long, ivk2 As IVKardex, rt As Boolean
    rt = False
    i = 1
    Do While i <= mcolIVKardex.Count        'Uso Do While para que evalue cada vez la condicion (Con For no está bien)
        Set ivk = mcolIVKardex.item(i)
        
        'Busca repetidos
        For j = mcolIVKardex.Count To i + 1 Step -1     'En orden al revez
            Set ivk2 = mcolIVKardex.item(j)
            
            'Si encuentra repetido en la misma bodega, con el mismo signo
            If ivk2.CodInventario = ivk.CodInventario And _
                ivk2.CodBodega = ivk.CodBodega And _
                Sgn(ivk2.Cantidad) = Sgn(ivk.Cantidad) And ivk.IdPadreSub = 0 And ivk2.IdPadreSub = 0 Then
                
                'Totaliza la cantidad y elimina el repetido
                ivk.PrecioTotal = ivk.PrecioTotal + ivk2.Cantidad * ivk2.Precio  'Para que no cambie de precio de primer item
                ivk.CostoTotal = ivk.CostoTotal + ivk2.Cantidad * ivk2.Costo  'Para que no cambie de costo de primer item
'                ivk.CostoRealTotal = ivk.CostoRealTotal + ivk2.Cantidad * ivk.Costo  'Para que no cambie de costo de primer item
                ivk.Cantidad = ivk.Cantidad + ivk2.Cantidad
'                ivk.CodBodega = ivk.CodBodega
                If Me.GNTrans.TotalizarAlImprimir Then
                    RemoveIVKardexImprimir j
                Else
                    RemoveIVKardex j
                End If
                'anulado jeaa 19/agt/2010
'                RemoveIVKardex j
                rt = True
            End If
        Next j
        i = i + 1
    Loop
    TotalizaItemRepetido = rt
End Function


'*** MAKOTO 14/oct/00 Agregado
'CodInventario: Código de item que vamos a verificar
'CantLimite:    Devuelve cantidad de límite
'CantGrabada:   Devuelve cantidad que ya está grabada en otros comprobantes
Public Function VerificarLimiteItem( _
                    ByVal CodInventario As String, _
                    ByRef CantLimite As Currency, _
                    ByRef cantGrabada As Currency) As Boolean
    Dim sql As String, rs As Recordset
    
    CantLimite = 0
    cantGrabada = 0
    
    'Obtiene Suma de cantidad de los comprobantes con los que vamos a comparar (Puede haber varios)
    sql = "SELECT Sum(ivk.Cantidad) AS SumaCant " & _
          "FROM GNComprobante gc INNER JOIN " & _
                        "(IVInventario iv INNER JOIN IVKardex ivk " & _
                            "ON iv.IdInventario = ivk.IdInventario) " & _
                    "ON gc.TransID=ivk.TransID "
    '*** MAKOTO 25/ene/01 Mod. Para sumar al presupuesto las transacción con 'M'. ejm. 'HC' y 'HCM' (M es de Modificación)
    
    If Me.GNTrans.IVactualizaTRansFuente Then
        sql = sql & " WHERE (gc.CodTrans IN ('" & Me.GNTrans.IVVerificaLimiteCon & "')) AND "
        
        sql = sql & " (gc.Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & ")) AND "
    
    Else
        If Not Me.GNTrans.ListaTranVerificaLimite Then
            sql = sql & " WHERE (gc.CodTrans IN ('" & Me.GNTrans.IVVerificaLimiteCon & "', '" & _
                                                 Me.GNTrans.IVVerificaLimiteCon & "M')) AND " & _
                        "(gc.Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & ")) AND "
        Else
            sql = sql & " WHERE gc.CodTrans IN (" & PreparaListaTransLimite(Me.GNTrans.TransDespuesDevolucion) & ")"
            sql = sql & " AND  (gc.Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & ")) AND "
        
        End If
    End If
        'jeaa 17/05/2006
        If Me.GNTrans.IVControlaLimitePorFactura Then
            sql = sql & "(gc.TransID=" & Me.IdTransFuente & ") AND "
        Else
            sql = sql & "(gc.IdCentro=" & Me.idCentro & ") AND "
        End If

        sql = sql & "(iv.CodInventario='" & CodInventario & "')"
        
            If InStr(1, UCase(gobjMain.EmpresaActual.GNOpcion.NombreEmpresa), "MONT") <> 0 Then
                sql = sql & " AND  cantidad<0"
            End If
        
        
    Set rs = Me.Empresa.OpenRecordset(sql)
    If Not IsNull(rs!sumaCant) Then CantLimite = rs!sumaCant
    rs.Close

    'Obtiene Suma de cantidad de los comprobantes 'hermanos' que son del mismo C.Costo
    sql = "SELECT Sum((ivk.Cantidad))*-1 AS SumaCant "
    sql = sql & " FROM GNTrans gt INNER JOIN "
    sql = sql & " (GNComprobante gc INNER JOIN "
    sql = sql & " (IVInventario iv INNER JOIN IVKardex ivk "
    sql = sql & " ON iv.IdInventario = ivk.IdInventario) "
    sql = sql & " ON gc.TransID=ivk.TransID) "
    sql = sql & " ON gt.CodTrans=gc.CodTrans "
    'sql = sql & " WHERE ((gt.VerificaLimiteCon='" & Me.GNTrans.IVVerificaLimiteCon & "') "
    'sql = sql & " or (gc.codtrans='" & Me.CodTrans & "M'))"
'''''    sql = sql & " WHERE gc.codtrans in('" & Me.CodTrans & "','" & Me.CodTrans & "M')"
'''''    sql = sql & " AND  (gc.Estado<>" & ESTADO_ANULADO & ") "
            
    sql = sql & " WHERE  (gc.Estado<>" & ESTADO_ANULADO & ")  "
        If Not Me.GNTrans.ListaTranVerificaLimite Then
            sql = sql & " AND ((gt.VerificaLimiteCon='" & Me.GNTrans.IVVerificaLimiteCon & "' or (gc.codtrans='" & Me.CodTrans & "M')) ) "
        Else
'            sql = sql & " AND (gt.TransDespuesDevolucion ='" & Me.GNTrans.TransDespuesDevolucion & "') "
        End If
            
        If Me.GNTrans.IVControlaLimitePorFactura Then
            sql = sql & " AND (gc.IDTransFuente=" & Me.IdTransFuente & ") "
        Else
            sql = sql & "AND (gc.IdCentro=" & Me.idCentro & ") "
        End If
            sql = sql & " AND (iv.CodInventario='" & CodInventario & "') AND " & _
            "(gc.TransID<>" & Me.transid & ")"      'Hay que excluir éste comprobante mismo

        If Not Me.GNTrans.ListaTranVerificaLimite Then
            sql = sql & " and (gc.codtrans<>'" & Me.GNTrans.IVVerificaLimiteCon & "M" & "')"
        Else
            sql = sql & " and (gc.codtrans not in (" & PreparaListaTransM(Me.GNTrans.TransDespuesDevolucion) & "))"
        End If
        
        If InStr(1, UCase(gobjMain.EmpresaActual.GNOpcion.NombreEmpresa), "MONT") <> 0 Then
            sql = sql & " AND  cantidad<0"
        End If



    Set rs = Me.Empresa.OpenRecordset(sql)
    If Not IsNull(rs!sumaCant) Then cantGrabada = rs!sumaCant
    rs.Close
    
    Set rs = Nothing
    VerificarLimiteItem = True
End Function

'Diego 006/08/2003
Public Function VerificaLimiteCredito(LimiteCredito As Currency, NuevoCredito As Currency) As Boolean
    'False = Ha  exedido  el limite de credito
    'True =  El  credito  esta permitido
    Dim sql As String, rs As Recordset, TOTAL  As Currency
    Dim Saldo As Currency
    Dim cli As PCProvCli
    Dim aux_codpc As String, aux_f1 As Date, aux_f2 As Date, aux_codpc2 As String
    Dim aux_PorCobrar As Boolean, aux_Cliente As Boolean, aux_Proveedor As Boolean
    Dim aux_CodForma As String, aux_CodMoneda As String, aux_codPCgrupo As String
    Dim aux_incluircero As Boolean, aux_NumGrupo As Byte
    Dim EsEfectivo As Boolean, i As Long
   VerificaLimiteCredito = True
    With gobjMain.objCondicion
        'Conservar valores actuales para que no afecte a otras consultas
        aux_codpc = .CodPC1
        aux_codpc2 = .CodPC2
        aux_f1 = .fecha1
        aux_f2 = .fecha2
        aux_PorCobrar = .PorCobrar
        aux_Cliente = .Cliente
        aux_Proveedor = .Proveedor
        aux_CodForma = .CodForma
        aux_CodMoneda = .CodMoneda
        aux_codPCgrupo = .CodPCGrupo
        aux_incluircero = .IncluirCero
        aux_NumGrupo = .NumPCGrupo
        aux_Proveedor = .Proveedor
        'jeaa 21/07/2009 anulado
        If Me.GNTrans.IVPideCliente Then
            If Me.IdClienteRef = 0 Then GoTo Salir  'controla  solo  para transacciones  con clientes
            Set cli = Me.Empresa.RecuperaPCProvCliQuick(Me.IdClienteRef)  'Solo  para  clientes
        ElseIf Me.GNTrans.IVPideProveedor Then
            If Me.IdProveedorRef = 0 Then GoTo Salir  'controla  solo  para transacciones  con proveedores
            Set cli = Me.Empresa.RecuperaPCProvCli(Me.IdProveedorRef)  'Solo  para  clientes
        End If
        If Not cli Is Nothing Then
            LimiteCredito = cli.LimiteCredito
            If LimiteCredito = 0 Then GoTo Salir
            'Este  es el valor  de la  transaccion  en proceso
            'jeaa 30/08/04 para saldos sin tomar en cuenta considerados como efectivo
            TOTAL = 0
            If Me.EsNuevo Then
                If Me.CountPCKardex > 0 Then
                    For i = 1 To Me.CountPCKardex
                        EsEfectivo = Me.Empresa.ConsTSConsideradoEfectivo(Me.PCKardex(i).CodForma)
                        If Not EsEfectivo Then
                            TOTAL = TOTAL + Me.PCKardex(i).Debe - Me.PCKardexHaberTotal
                        End If
                    Next i
                    
                End If
            End If
            If EsEfectivo Then
                VerificaLimiteCredito = EsEfectivo
                GoTo Salir
            End If
           .FechaCorte = Me.FechaTrans
            .CodPC1 = cli.CodProvcli
            .CodPC2 = cli.CodProvcli
            .IncluirCero = True
            .CodMoneda = Me.CodMoneda
            .NumPCGrupo = 0
            .CodPCGrupo = ""
            
            If Me.GNTrans.IvFiltrarFormaPendientes Then
                Set rs = Me.Empresa.ConsPCSaldoFormaCobroFiltro(False, True, False, Me.GNTrans.FormasLimteCredito)
            Else
                If Me.GNTrans.IVPideCliente Then
                    'Set rs = Me.Empresa.ConsPCSaldoFormaCobro(False, True, False)
                    Set rs = gobjMain.EmpresaActual.ConsTSPorCobrarPagar_SinEfectivos(True, cli.CodProvcli, DateAdd("yyyy", 2, Me.FechaTrans), "", Me.CodMoneda, "")
                    For i = 1 To rs.RecordCount
                        Saldo = Saldo + rs!Saldo
                        rs.MoveNext
                    Next i
                    If rs.RecordCount > 0 Then
                        rs.MoveFirst
                    End If
                ElseIf Me.GNTrans.IVPideProveedor Then
                    Set rs = Me.Empresa.ConsPCSaldoFormaCobro(True, False, False)
                End If
            End If
            If Not rs.EOF Then
                If IsNull(rs!Saldo) Then
                    Saldo = 0
                ElseIf rs!Saldo < 0 Then
                    'Saldo = 0
                    Saldo = rs!Saldo
                Else
                    If Saldo = 0 Then
                        Saldo = rs!Saldo
                    End If
                End If
                NuevoCredito = Abs(Saldo) + TOTAL
                If LimiteCredito < (NuevoCredito) Then
                    VerificaLimiteCredito = False
                End If
            End If
            rs.Close
        End If
        'regresa  a valores  anteriores
        .CodPC1 = aux_codpc
        .CodPC2 = aux_codpc2
        .fecha1 = aux_f1
        .fecha2 = aux_f2
        .PorCobrar = aux_PorCobrar
        .Cliente = aux_Cliente
        .Proveedor = aux_Proveedor
        .CodForma = aux_CodForma
        .CodMoneda = aux_CodMoneda
        .CodPCGrupo = aux_codPCgrupo
        .NumPCGrupo = aux_NumGrupo
        .IncluirCero = aux_incluircero
    End With
    ''rs.Close
Salir:
    Set rs = Nothing
    Set cli = Nothing
End Function

Public Function VerificaItemConFuente(ByVal CodInventario As String, _
                                      ByRef CantLimite As Currency) As Boolean
    Dim sql As String, rs As Recordset
    CantLimite = 0
    
    If Me.GNTrans.IVItemDevolucion Then
        If Me.GNTrans.CodLineaDevolucion = CodInventario Then
            CantLimite = 1
            VerificaItemConFuente = True
    Else
        sql = "SELECT Sum(IVK.Cantidad) as Total   FROM IVKardex IVK INNER JOIN " & _
          "IVINVENTARIO IV ON IVK.IdInventario = IV.IdInventario WHERE TransID = " & _
          Me.IdTransFuente & " AND CodInventario = '" & _
          CodInventario & "' "
    
        Set rs = Me.Empresa.OpenRecordset(sql)
        If rs.EOF Then
            VerificaItemConFuente = False
        Else
            If IsNull(rs!TOTAL) Then
                VerificaItemConFuente = False
            Else
                CantLimite = rs!TOTAL
                VerificaItemConFuente = True
            End If
        End If
        rs.Close
        Set rs = Nothing
    End If
 End If
End Function



'--------------- Manejo de coleccion de IVKardexRecargo
Public Function AddIVKardexRecargo() As Long
    Dim nuevo As IVKardexRecargo
    
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.AddIVKardexRecargo", MSGERR_SOLOVER
    If mcolIVKardexRecargo Is Nothing Then RecuperaIVKardexRecargo
    
    Set nuevo = New IVKardexRecargo
    Set nuevo.GNComprobante = Me
    mcolIVKardexRecargo.Add nuevo
    
    AddIVKardexRecargo = mcolIVKardexRecargo.Count    'Devuelve el indice de nuevo elemento
    Set nuevo = Nothing
    mbooModificado = True
End Function

Public Function BuscaIVKardexRecargo(IdRecargo As Long) As IVKardexRecargo
    Dim obj As IVKardexRecargo
    If mcolIVKardexRecargo Is Nothing Then RecuperaIVKardexRecargo
    
    For Each obj In mcolIVKardexRecargo
        If obj.IdRecargo = IdRecargo Then
            Set BuscaIVKardexRecargo = obj
            Exit For
        End If
    Next obj
    Set obj = Nothing
End Function

Public Sub RemoveIVKardexRecargo(ByVal ix As Long, Optional obj As IVKardexRecargo)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemoveIVKardexRecargo", MSGERR_SOLOVER
    If mcolIVKardexRecargo Is Nothing Then RecuperaIVKardexRecargo
    
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolIVKardexRecargo.Count
            If mcolIVKardexRecargo.item(ix) Is obj Then
                mcolIVKardexRecargo.Remove ix
                Exit For
            End If
        Next ix
        Debug.Assert True   'No se puede dar
    Else
        mcolIVKardexRecargo.Remove ix
    End If
    
    mbooModificado = True
End Sub

'Elimina todos los detalles de IVKardexRecargo
Public Sub BorrarIVKardexRecargo()
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BorrarIVKardexRecargo", MSGERR_SOLOVER
    If mcolIVKardexRecargo Is Nothing Then Set mcolIVKardexRecargo = New Collection
    
    With mcolIVKardexRecargo
        Do While .Count > 0
            .Remove .Count
        Loop
    End With
    mbooModificado = True
End Sub


Public Property Get CountIVKardexRecargo() As Long
    If mcolIVKardexRecargo Is Nothing Then RecuperaIVKardexRecargo
    CountIVKardexRecargo = mcolIVKardexRecargo.Count
End Property

Public Property Get IVKardexRecargo(ix As Long) As IVKardexRecargo
    If mcolIVKardexRecargo Is Nothing Then RecuperaIVKardexRecargo
    Set IVKardexRecargo = mcolIVKardexRecargo.item(ix)
End Property

'--------------- Manejo de coleccion de PCKardex
Public Function AddPCKardex() As Long
    Dim nuevo As PCKardex, tsf As TSFormaCobroPago
    
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.AddPCKardex", MSGERR_SOLOVER
    If mcolPCKardex Is Nothing Then RecuperaPCKardex
    
    Set nuevo = New PCKardex
    Set nuevo.GNComprobante = Me
    
    'Proporciona valores predeterminados
    If Me.CountPCKardex = 0 Then            '*** MAKOTO 14/oct/00 Modificado
        nuevo.CodForma = GNTrans.CodFormaPre
    Else
        nuevo.CodForma = Me.PCKardex(Me.CountPCKardex).CodForma     'Coge lo anterior
    End If
    
    nuevo.FechaEmision = mProps.FechaTrans
    
    '*** MAKOTO 05/dic/00 Agregado
    If Len(Me.NumDocRef) > 0 Then
        nuevo.NumLetra = Left$(Me.NumDocRef, 20)
    End If

    '*** MAKOTO 22/jun/2000. Para reflejar 'Plazo predeterminado' de forma de cobro/pago
    Set tsf = Me.Empresa.RecuperaTSFormaCobroPago(nuevo.CodForma)
    
    If Not (tsf Is Nothing) Then
        nuevo.FechaVenci = nuevo.FechaEmision + tsf.Plazo
    Else
        nuevo.FechaVenci = nuevo.FechaEmision
    End If
    
    Set tsf = Nothing
    
    'Decide el código de proveedor/cliente predeterminado
     If Me.GNTrans.CodPantalla <> "GENROL" Then
        If Not Me.BandEmp Then
            If Me.CountPCKardex > 0 And Len(Me.CodEmpleadoRef) = 0 Then
               'Si ya existe más de uno, copia lo anterior
                nuevo.CodProvcli = Me.PCKardex(Me.CountPCKardex).CodProvcli
            ElseIf Len(Me.CodProveedorRef) > 0 And Len(Me.CodClienteRef) > 0 Then
                nuevo.CodProvcli = Me.CodProveedorRef
            ElseIf Len(Me.CodProveedorRef) > 0 And Len(Me.CodClienteRef) = 0 Then
                nuevo.CodProvcli = Me.CodProveedorRef
            ElseIf Len(Me.CodProveedorRef) = 0 And Len(Me.CodClienteRef) > 0 Then
                nuevo.CodProvcli = Me.CodClienteRef
            ElseIf Len(Me.CodEmpleadoRef) > 0 And Len(Me.CodClienteRef) = 0 And Len(Me.CodProveedorRef) = 0 Then
                nuevo.CodEmpleado = Me.CodEmpleadoRef
            End If
        Else
            nuevo.CodEmpleado = Me.CodEmpleadoRef
        End If
    End If
    mcolPCKardex.Add nuevo
    AddPCKardex = mcolPCKardex.Count    'Devuelve el indice de nuevo elemento
    Set nuevo = Nothing
    mbooModificado = True
End Function

'----- Antiguo
'    If Me.GNTrans.Modulo = "IV" Then                '*** MAKOTO 14/oct/00 Modificado
        'Si pide proveedor y cliente no
'        If Me.GNTrans.IVPideProveedor And Not Me.GNTrans.IVPideCliente Then
'            nuevo.CodProvCli = Me.CodProveedorRef
        'Si pide cliente y proveedor no
'        ElseIf Me.GNTrans.IVPideCliente And Not Me.GNTrans.IVPideProveedor Then
'            nuevo.CodProvCli = Me.CodClienteRef
'        ElseIf Len(Me.CodProveedorRef) > 0 And Len(Me.CodClienteRef) > 0 Then
'            nuevo.CodProvCli = Me.CodProveedorRef
        'Si pide proveedor y cliente ambos ó pide ningúno
'        Else
'            If Me.CountPCKardex > 0 Then
'                'Copia lo anterior
'                nuevo.CodProvCli = Me.PCKardex(Me.CountPCKardex).CodProvCli
'            End If
'        End If
'    ElseIf (Me.GNTrans.Modulo = "PV") Or (Me.GNTrans.Modulo = "CL") Then
'    Else
'        If Me.CountPCKardex > 0 Then
'            'Copia lo anterior
'            nuevo.CodProvCli = Me.PCKardex(Me.CountPCKardex).CodProvCli
'        End If
'    End If

Public Sub RemovePCKardex(ByVal ix As Long, Optional obj As PCKardex)
    Dim Trans As String
   'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemovePCKardex", MSGERR_SOLOVER
    If mcolPCKardex Is Nothing Then RecuperaPCKardex
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolPCKardex.Count
            If mcolPCKardex.item(ix) Is obj Then Exit For
        Next ix
    Else
        Set obj = mcolPCKardex.item(ix)
    End If
    
   If Not obj.VerificaEliminacionGestion(Trans) Then
        Err.Raise ERR_INVALIDO, "GNComprobante.RemovePCKardex", _
            "No se puede eliminar debido a que existen documentos de gestion asignados" & Chr(13) & "con la Transacción: " & Trans
   End If
    
    'Verifia si tiene cobro/pago asignado
'    If Not obj.VerificaEliminacion(Trans) Then
'        Err.Raise ERR_INVALIDO, "GNComprobante.RemovePCKardex", _
'            "No se puede eliminar el documento debido a que existen cobros o pagos asignados."
'    End If
    'jeaa 31/08/2005 AGREGADA TRANSACCION A LA QUE ESTA ASIGNADA
    If Not obj.VerificaEliminacionNEW(Trans) Then
        Err.Raise ERR_INVALIDO, "GNComprobante.RemovePCKardex", _
            "No se puede eliminar el documento debido a que existen cobros o pagos asignados " & Chr(13) & "con la Transacción: " & Trans
   End If
   
    'jeaa 31/08/2005 AGREGADA TRANSACCION A LA QUE ESTA ASIGNADA
    If Not obj.VerificaEliminacionCHPNEW(Trans) Then
        Err.Raise ERR_INVALIDO, "GNComprobante.RemovePCKardex", _
            "No se puede eliminar el documento debido a que existen cobros o pagos asignados pckardex de Respaldo " & Chr(13) & "con la Transacción: " & Trans
   End If
   
   
    'Elimina de la colección
    If mcolPCKardex.Count >= ix Then mcolPCKardex.Remove ix
    mbooModificado = True
End Sub

'Elimina todos los detalles de PCKardex
Public Sub BorrarPCKardex()
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BorrarPCKardex", MSGERR_SOLOVER
    If mcolPCKardex Is Nothing Then Set mcolPCKardex = New Collection
    
    With mcolPCKardex
        Do While .Count > 0
            .Remove .Count
        Loop
    End With
    mbooModificado = True
End Sub

Public Property Get CountPCKardex() As Long
    If mcolPCKardex Is Nothing Then RecuperaPCKardex
    CountPCKardex = mcolPCKardex.Count
End Property

Public Property Get PCKardex(ix As Long) As PCKardex
    If mcolPCKardex Is Nothing Then RecuperaPCKardex
    Set PCKardex = mcolPCKardex.item(ix)
End Property


'--------------- Manejo de coleccion de TSKardexRet
Public Function AddTSKardexRet() As Long
    Dim nuevo As TSKardexRet
    
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.AddTSKardexRet", MSGERR_SOLOVER
    If mcolTSKardexRet Is Nothing Then RecuperaTSKardexRet
    
    Set nuevo = New TSKardexRet
    Set nuevo.GNComprobante = Me
    
    'Valores predeterminados
    If Me.CountTSKardexRet = 0 Then
        'nuevo.NumDoc = Left$(Me.NumDocRef, 20)
        nuevo.NumDoc = Mid$(Me.NumDocRef, 1, 3) & "-" & Mid$(Me.NumDocRef, 4, 3) & "-" & Mid$(Me.NumDocRef, 7, 9)
    Else
        'Copia los valores anteriores
        nuevo.CodRetencion = Me.TSKardexRet(Me.CountTSKardexRet).CodRetencion
        If Len(Me.TSKardexRet(Me.CountTSKardexRet).CodRetencion) <> 15 Then
            nuevo.NumDoc = Me.TSKardexRet(Me.CountTSKardexRet).NumDoc
        Else
            nuevo.NumDoc = Mid$(Me.TSKardexRet(Me.CountTSKardexRet).NumDoc, 1, 3) & "-" & Mid$(Me.TSKardexRet(Me.CountTSKardexRet).NumDoc, 4, 3) & "-" & Mid$(Me.TSKardexRet(Me.CountTSKardexRet).NumDoc, 7, 9)
        End If
        nuevo.Base = Me.TSKardexRet(Me.CountTSKardexRet).Base
    End If
    
    mcolTSKardexRet.Add nuevo
    AddTSKardexRet = mcolTSKardexRet.Count    'Devuelve el indice de nuevo elemento
    Set nuevo = Nothing
    mbooModificado = True
End Function

Public Sub RemoveTSKardexRet(ByVal ix As Long, Optional obj As TSKardexRet)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemoveTSKardexRet", MSGERR_SOLOVER
    If mcolTSKardexRet Is Nothing Then RecuperaTSKardexRet
    
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolTSKardexRet.Count
            If mcolTSKardexRet.item(ix) Is obj Then
                mcolTSKardexRet.Remove ix
                Exit For
            End If
        Next ix
    Else
        mcolTSKardexRet.Remove ix
    End If
    
    mbooModificado = True
End Sub

'Elimina todos los detalles de TSKardexRet
Public Sub BorrarTSKardexRet()
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BorrarTSKardexRet", MSGERR_SOLOVER
    If mcolTSKardexRet Is Nothing Then Set mcolTSKardexRet = New Collection
    
    With mcolTSKardexRet
        Do While .Count > 0
            .Remove .Count
        Loop
    End With
    mbooModificado = True
End Sub

Public Property Get CountTSKardexRet() As Long
    If mcolTSKardexRet Is Nothing Then RecuperaTSKardexRet
    CountTSKardexRet = mcolTSKardexRet.Count
End Property

Public Property Get TSKardexRet(ix As Long) As TSKardexRet
    If mcolTSKardexRet Is Nothing Then RecuperaTSKardexRet
    Set TSKardexRet = mcolTSKardexRet.item(ix)
End Property





Public Function ListaCTLibroDetalle() As Variant
    Dim sql As String, rs As Recordset, proc As String
    
    '*** MAKOTO 27/nov/00 Para preguntar si se ordena por orden o por Debe/Haber
    If Me.Empresa.GNOpcion.ObtenerValor("OrdenarAsientoPorDebe") = "0" Then
        If Me.Empresa.GNOpcion.ObtenerValor("PermitirDistribucionGastos") = "1" Then
            proc = "spConsCTDiarioDetallexGasto"      'Por Orden en la que ingresó
        Else
            proc = "spConsCTDiarioDetalle"      'Por Orden en la que ingresó
        End If
    Else
        If Me.Empresa.GNOpcion.ObtenerValor("PermitirDistribucionGastos") = "1" Then
            proc = "spConsCTDiarioDetalle2xGasto"     'Debe primero y luego Haber
        Else
            proc = "spConsCTDiarioDetalle2"     'Debe primero y luego Haber
        End If
    End If
    
#If DAOLIB Then
    Dim qdef As DAO.QueryDef
    Set qdef = mProps.objEmpresa.Database.QueryDefs(proc)
    qdef.Parameters("CodA") = mProps.CodAsiento
    qdef.Parameters("Cotizacion") = Me.Cotizacion("")
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Dim cmd As ADODB.Command
    Set cmd = New ADODB.Command
    cmd.ActiveConnection = mProps.objEmpresa.Coneccion
    
    'Si la base es de JET
    If mProps.objEmpresa.TipoDB = TIPODB_JET Then
        cmd.CommandType = adCmdTable
        cmd.CommandText = proc
        cmd.Parameters.Append cmd.CreateParameter("CodA", adInteger, adParamInput, , mProps.CodAsiento)
        cmd.Parameters.Append cmd.CreateParameter("Cotizacion", adDouble, adParamInput, , Me.Cotizacion(""))
        Set rs = cmd.Execute
       
    'Si la base es de SQLSvr
    Else
        sql = proc & " " & mProps.CodAsiento & "," & Me.Cotizacion("")
        Set rs = New ADODB.Recordset
        rs.CursorLocation = adUseClient
        rs.Open sql, mProps.objEmpresa.Coneccion, adOpenStatic, adLockReadOnly
    End If
#End If

    Set ListaCTLibroDetalle = rs
    Set rs = Nothing
End Function


Public Function ListaTSKardex() As Variant
    Dim sql As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As DAO.QueryDef
    Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsTSKardex")
    qdef.Parameters("tid") = mProps.transid
    qdef.Parameters("Cotizacion") = Me.Cotizacion("")
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Dim cmd As ADODB.Command
    Set cmd = New ADODB.Command
    cmd.ActiveConnection = mProps.objEmpresa.Coneccion
    
    'Si la base es de JET
    If mProps.objEmpresa.TipoDB = TIPODB_JET Then
        cmd.CommandType = adCmdTable
        cmd.CommandText = "spConsTSKardex"
        cmd.Parameters.Append cmd.CreateParameter("tid", adInteger, adParamInput, , mProps.transid)
        Set rs = cmd.Execute
       
    'Si la base es de SQLSvr
    Else
        sql = "spConsTSKardex " & mProps.transid & "," & Me.Cotizacion("")
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
    End If
#End If

    Set ListaTSKardex = rs
    Set rs = Nothing
End Function

'*** MAKOTO 07/feb/01 Agregado
Public Function ListaTSKardexRet() As Variant
    Dim sql As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As DAO.QueryDef
    Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsTSKardexRet")
    qdef.Parameters("tid") = mProps.transid
    qdef.Parameters("Cotizacion") = Me.Cotizacion("")
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Dim cmd As ADODB.Command
    Set cmd = New ADODB.Command
    cmd.ActiveConnection = mProps.objEmpresa.Coneccion
    
    'Si la base es de JET
    If mProps.objEmpresa.TipoDB = TIPODB_JET Then
        cmd.CommandType = adCmdTable
        cmd.CommandText = "spConsTSKardexRet"
        cmd.Parameters.Append cmd.CreateParameter("tid", adInteger, adParamInput, , mProps.transid)
        Set rs = cmd.Execute
       
    'Si la base es de SQLSvr
    Else
        sql = "spConsTSKardexRet " & mProps.transid & "," & Me.Cotizacion("")
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
    End If
#End If

    Set ListaTSKardexRet = rs
    Set rs = Nothing
End Function


'*** MAKOTO 16/dic/00 Modificado
Public Function ListaIVKardex() As Variant
    Set ListaIVKardex = ListaIVKardex2(True)
End Function

'*** MAKOTO 16/dic/00 Agregado
Public Function ListaIVKardex2( _
                    ByVal ExistPorBodega As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As DAO.QueryDef
    
    If ExistPorBodega Then
        Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsIVKardex")
    Else
        Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsIVKardex2")
    End If
    qdef.Parameters("tid") = mProps.transid
    qdef.Parameters("Cotizacion") = Me.Cotizacion("")
    qdef.Parameters("BandEgreso") = (Me.GNTrans.IVTipoTrans = "E")
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Dim cmd As ADODB.Command
    Set cmd = New ADODB.Command
    cmd.ActiveConnection = mProps.objEmpresa.Coneccion
    'Si la base es de JET
    If mProps.objEmpresa.TipoDB = TIPODB_JET Then
        cmd.CommandType = adCmdTable
        If ExistPorBodega Then
            cmd.CommandText = "spConsIVKardex"
        Else
            cmd.CommandText = "spConsIVKardex2"
        End If
        cmd.Parameters.Append cmd.CreateParameter("tid", adInteger, adParamInput, , mProps.transid)
        cmd.Parameters.Append cmd.CreateParameter("Cotizacion", adCurrency, adParamInput, , mProps.Cotizacion)
        Set rs = cmd.Execute
    'Si la base es de SQLSvr
    Else
         If Me.Empresa.GNOpcion.IVKTipoDatoDouble Then
            sql = "spConsIVKardexDou " & mProps.transid & ", " & _
                                  Me.Cotizacion("") & ", " & _
                                  CadenaBool(ExistPorBodega, Me.Empresa.TipoDB) & ", " & _
                                  CadenaBool((Me.GNTrans.IVTipoTrans = "E"), Me.Empresa.TipoDB) '*** MAKOTO 26/ene/01 Mod. Si es egreso multiplica -1
        Else
            sql = "spConsIVKardex " & mProps.transid & ", " & _
                                  Me.Cotizacion("") & ", " & _
                                  CadenaBool(ExistPorBodega, Me.Empresa.TipoDB) & ", " & _
                                  CadenaBool((Me.GNTrans.IVTipoTrans = "E"), Me.Empresa.TipoDB) '*** MAKOTO 26/ene/01 Mod. Si es egreso multiplica -1
        End If
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
    End If
#End If
    Set ListaIVKardex2 = rs
    Set rs = Nothing
End Function

Public Function ListaIVKardexRecargo() As Variant
    Dim sql As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As QueryDef
        If EsNuevo Then
            Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsIVKardexRecargoNuevo")
            qdef.Parameters("CodT") = Me.CodTrans
            qdef.Parameters("Cotizacion") = Me.Cotizacion("")
            Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
        Else
            Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsIVKardexRecargoMod")
            qdef.Parameters("tid") = Me.transid
            qdef.Parameters("Cotizacion") = Me.Cotizacion("")
            Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
        End If
#Else

    'Si la base es de JET
    If mProps.objEmpresa.TipoDB = TIPODB_JET Then
        Dim cmd As New ADODB.Command
        If EsNuevo Then
            Set cmd.ActiveConnection = mProps.objEmpresa.Coneccion
            cmd.CommandText = "spConsIVKardexRecargoNuevo"
            cmd.Parameters.Append cmd.CreateParameter("CodT", adVarChar, adParamInput, , Me.CodTrans)
            cmd.Parameters.Append cmd.CreateParameter("Cotizacion", adCurrency, adParamInput, , Me.Cotizacion(""))
            Set rs = cmd.Execute
        Else
            Set cmd.ActiveConnection = mProps.objEmpresa.Coneccion
            cmd.CommandText = "spConsIVKardexRecargoMod"
            cmd.Parameters.Append cmd.CreateParameter("tid", adVarChar, adParamInput, , Me.CodTrans)
            cmd.Parameters.Append cmd.CreateParameter("Cotizacion", adCurrency, adParamInput, , Me.Cotizacion(""))
            Set rs = cmd.Execute
        End If
        
    'Si la base es de SQLSvr
    Else
        If EsNuevo Then
            sql = "spConsIVKardexRecargoNuevo '" & mProps.CodTrans & "'," & Me.Cotizacion("")
        Else
            sql = "spConsIVKardexRecargoMod " & mProps.transid & "," & Me.Cotizacion("")
        End If
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
    End If
#End If

    Set ListaIVKardexRecargo = rs
    Set rs = Nothing
End Function

Public Function ListaPCKardex() As Variant
    Dim sql As String
    
#If DAOLIB Then
    Dim rs As DAO.Recordset, qdef As DAO.QueryDef
    Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsPCKardex")
    qdef.Parameters("tid") = mProps.transid
    qdef.Parameters("Cotizacion") = Me.Cotizacion("")
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Dim rs As ADODB.Recordset, cmd As ADODB.Command
    Set cmd = New ADODB.Command
    cmd.ActiveConnection = mProps.objEmpresa.Coneccion
    
    'Si la base es de JET
    If mProps.objEmpresa.TipoDB = TIPODB_JET Then
        cmd.CommandType = adCmdTable
        cmd.CommandText = "spConsPCKardex"
        cmd.Parameters.Append cmd.CreateParameter("tid", adInteger, adParamInput, , mProps.transid)
        Set rs = cmd.Execute
       
    'Si la base es de SQLSvr
    Else
        sql = "spConsPCKardex " & mProps.transid & "," & Me.Cotizacion("")
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
    End If
#End If

    Set ListaPCKardex = rs
    Set rs = Nothing
End Function

'Para visualizar docs pagados/cobrados de la transacción
Public Function ListaPCCobroPago() As Variant
    Dim sql As String
    
#If DAOLIB Then
    Dim rs As DAO.Recordset, qdef As DAO.QueryDef
    Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsPCCobroPago")
    qdef.Parameters("tid") = mProps.transid
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Dim rs As ADODB.Recordset, cmd As ADODB.Command
    Set cmd = New ADODB.Command
    cmd.ActiveConnection = mProps.objEmpresa.Coneccion
    
    'Si la base es de JET
    If mProps.objEmpresa.TipoDB = TIPODB_JET Then
        cmd.CommandType = adCmdTable
        cmd.CommandText = "spConsPCCobroPago"
        cmd.Parameters.Append cmd.CreateParameter("tid", adInteger, adParamInput, , mProps.transid)
        Set rs = cmd.Execute
       
    'Si la base es de SQLSvr
    Else
        sql = "spConsPCCobroPago " & mProps.transid
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
    End If
#End If

    Set ListaPCCobroPago = rs
    Set rs = Nothing
End Function



Public Function ListaTransFuente() As Variant
    Set ListaTransFuente = ListaTransFuente2(mProps.CodCentro)
End Function

Public Function ListaTransFuente2( _
                    ByVal CodCentro As String) As Variant
    Dim sql As String, s As String, v As Variant, i As Long, CodT As String
    Dim cond As String, rs As Recordset, cond1 As String
    If Len(GNTrans.CodTransFuente) > 0 Then
        'Puede tener varios codigos de transaccion de fuente    ejm. (FC);(OF)
        v = Split(GNTrans.CodTransFuente, ";")
        For i = 0 To UBound(v)
            If Len(s) > 0 Then s = s & ","
            CodT = v(i)
            CodT = Left$(CodT, Len(CodT) - 1)       'Quita el signo ')'
            CodT = Right$(CodT, Len(CodT) - 1)      'Quita el signo '('
            s = s & "'" & CodT & "'"
        Next i
    Else
        Err.Raise ERR_INVALIDO, "GNComprobante.ListaTransFuente", _
                    "No está definida ningúna transacción de fuente para ésta transacción."
    End If
    '*** MAKOTO 06/mar/01 Agregado 'Nombre'
    'cambiado por Oliver 27/08/2003
    sql = "SELECT"
    If Not Me.GNTrans.IVCambiarEstadoFinalizar Then
        If Not gobjMain.objCondicion.IncluirCero Then
            If gobjMain.objCondicion.TopN > 0 Then
                sql = sql & " TOP " & gobjMain.objCondicion.TopN
            End If
        End If
    End If
    '*** MAKOTO 05/feb/01 Mod. Aumentado 'NumDocRef' y 'Nombre'
    sql = sql & " gc.TransID, gc.FechaTrans, gc.CodTrans, gc.NumTrans, "
    sql = sql & " gc.NumdocRef, gc.Nombre, gc.Descripcion, "
    sql = sql & " cc.idCentro, cc.CodCentro, cc.Descripcion AS DescCentro, gnv.CodVehiculo, gc.Estado, "
    sql = sql & " case gc.Estado when '0' THEN 'NO CONT' when '1' THEN 'APROV' when '2' THEN 'DESPA' when '3' THEN 'ANULA' when '4' THEN 'SEM DESP' END AS estadoL "
    
    If Me.GNTrans.CodPantalla = "IVGNG" Then
        sql = sql & " ,gc.Estado1,gc.Estado2 "
    End If
    sql = sql & " , gof.FechaValidez, '' AS detalle "
    sql = sql & " , fd.FechaIngreso "
    
        sql = sql & "FROM GNCentroCosto cc LEFT JOIN  GNVehiculo gnv   ON cc.IdVehiculo = gnv.IdVehiculo RIGHT JOIN "
        sql = sql & "  GNComprobante gc "
        sql = sql & " LEFT JOIN gncentrocostodetalle ccd"
        sql = sql & "  LEFT JOIN fichadetalle fd on fd.id = ccd.idfichadet"
        sql = sql & "  ON ccd.idcentrodet = gc.idcentrohijo"
        
        sql = sql & " LEFT JOIN gnoferta gof ON  gc.transid=gof.transid "
        sql = sql & IIf(Len(gobjCond.CodPC1) > 0, " Inner join PcProvCli pc ON (gc.IdProveedorRef = pc.IDProvCli  OR gc.IdClienteRef = pc.IDProvCli) ", " ")
        sql = sql & " ON cc.IdCentro = gc.IdCentro "
        If Not gobjMain.objCondicion.IncluirCero Then
            If Len(cond) > 0 Then cond = cond & " AND "
            cond = cond & " gc.Estado IN ("
            If gobjMain.objCondicion.EstadoBool(ESTADO_NOAPROBADO) Then
                 cond = cond & ESTADO_NOAPROBADO & ","
            End If
            If gobjMain.objCondicion.EstadoBool(ESTADO_APROBADO) Then
                 cond = cond & ESTADO_APROBADO & ","
            End If
             If gobjMain.objCondicion.EstadoBool(ESTADO_DESPACHADO) Then
                 cond = cond & ESTADO_DESPACHADO & ","
            End If
             If gobjMain.objCondicion.EstadoBool(ESTADO_SEMDESPACHADO) Then
                 cond = cond & ESTADO_SEMDESPACHADO & ","
            End If
            cond = Mid$(cond, 1, Len(cond) - 1)
            cond = cond & ")"
            
        Else
            cond = cond & " bandfinalizado=0"
        End If
      'auc 26/10/07
        If Me.GNTrans.VerFacturados And Me.GNTrans.CodPantalla = "IVGNG" Then
                 If Len(cond) > 0 Then cond = cond & " AND "
                 cond = cond & " gc.Estado1 IN ("
             If gobjMain.objCondicion.Estado1Bool(ESTADO_FACTURADO) Then
                 cond = cond & ESTADO_FACTURADO & ","
            End If
            If gobjMain.objCondicion.Estado1Bool(ESTADO_NOFACTURADO) Then
                 cond = cond & ESTADO_NOFACTURADO & ","
            End If
                 cond = Mid$(cond, 1, Len(cond) - 1)
                 cond = cond & ")"
          ElseIf Me.GNTrans.VerComprados And Me.GNTrans.CodPantalla = "IVGNG" Then
                 If Len(cond) > 0 Then cond = cond & " AND "
                 cond = cond & " gc.Estado2 IN ("
            If gobjMain.objCondicion.Estado2Bool(ESTADO_COMPRAS) Then
                 cond = cond & ESTADO_COMPRAS & ","
            End If
            If gobjMain.objCondicion.Estado2Bool(ESTADO_NOCOMPRAS) Then
                 cond = cond & ESTADO_NOCOMPRAS & ","
            End If
            cond = Mid$(cond, 1, Len(cond) - 1)
                 cond = cond & ")"
        End If
       'hasta aqui
    ' Condicion de Busqueda de Fecha
    If Not gobjMain.objCondicion.IncluirCero Then
    If Len(cond) > 0 Then cond = cond & " AND "
     cond = cond & " (gc.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, gobjMain.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, gobjMain.TipoDB) & " ) "
        If Me.GNTrans.IVCambiarEstadoFinalizar Then
            cond = cond & " AND bandfinalizado=0 "
        End If
     
     'Condición de CodProvCli    (Opcional)
     End If
    If Len(gobjCond.CodPC1) > 0 Then
       If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(PC.CodProvCli='" & gobjCond.CodPC1 & "')"
   End If
    If Len(s) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gc.CodTrans IN (" & s & ")"
    End If
    
    If Me.GNTrans.CodPantalla <> "IVCOTROC" Then 'auc revisar bien y quitar si es necesario
        If Me.GNTrans.IVValidarFechaValidez Then
            If Len(s) > 0 Then
                If Len(cond) > 0 Then cond = cond & " AND "
                cond = cond & " (gof.FechaValidez >= " & FechaYMD(Date, gobjMain.TipoDB) & " ) "
            End If
        End If
    End If
    
    If Len(CodCentro) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " cc.CodCentro='" & CodCentro & "'"
    End If
    
    If gobjCond.NumTrans1 <> 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gc.Numtrans= " & gobjCond.NumTrans1
    End If
    
    If gobjCond.NumTrans2 <> 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gc.numdocref= '" & gobjCond.NumTrans2 & "'"
    End If
    
    'Condición de CodProvCli    (Opcional)
    If Len(gobjCond.CodVehiculo) > 0 Then
       If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(gnv.CodVehiculo='" & gobjCond.CodVehiculo & "')"
   End If
    
    
    'JEAA 01/06/2007
    If GNTrans.ImportacionUnicaTrans Then
        cond = cond & " AND GC.TRANSID NOT IN"
        cond = cond & " (SELECT IdTransFuente"
        cond = cond & " FROM GNCentroCosto cc"
        cond = cond & " LEFT JOIN  GNVehiculo gnv   ON cc.IdVehiculo = gnv.IdVehiculo"
        cond = cond & " RIGHT JOIN  GNComprobante gc   ON cc.IdCentro = gc.IdCentro"
       cond = cond & " where gc.Estado <> 3 "
        cond = cond & " AND (gc.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, gobjMain.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, gobjMain.TipoDB) & " ) "
        cond = cond & " AND  gc.CodTrans IN ('" & GNTrans.CodTrans & "')"
        cond = cond & " AND IdTransFuente<>0 )"
        cond = cond & " and gc.transid not in( select idfuente from GNTransIdFuente g inner join gncomprobante gc on gc.transid=g.transid where gc.estado<>3 )"
    End If
    
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
'        If Len(gobjCond.CodBodega1) > 0 Then
'           cond = cond & " AND IVB.CODBODEGA = '" & gobjCond.CodBodega1 & "'"
'       End If
  'AUC importa solo transacciones con sol credito aprobadas
        If Me.GNTrans.ImpTransSolCreApr Then
            sql = sql & " AND gc.transid  IN (select pcsc.idtransfuente FROM pcsolcreprovcli pcsc"
            sql = sql & " left join gncomprobante gc on pcsc.idtransfuente= gc.transid "
            sql = sql & " WHERE pcsc.bandaprobado = 1 and pcsc.TipoSolicitud = 0)"
            If Me.GNTrans.IVPideGarante Then
                sql = sql & " AND gc.transid  IN (select pcsc.idtransfuente FROM pcsolcreprovcli pcsc"
                sql = sql & " left join gncomprobante gc on pcsc.idtransfuente= gc.transid "
                sql = sql & " WHERE pcsc.bandaprobado = 1 and pcsc.TipoSolicitud = 1)"
            End If
        End If
        
        
'     If Len(cond) > 0 Then sql = sql & " WHERE " & cond
     sql = sql & " Group by gc.TransID, gc.FechaTrans, gc.horatrans, "
     sql = sql & " gc.CodTrans, gc.NumTrans, gc.NumdocRef, gc.Nombre, gc.Descripcion,"
     sql = sql & " cc.idCentro, cc.CodCentro, cc.Descripcion, gc.Estado, gnv.CodVehiculo "
      sql = sql & " , gof.FechaValidez,fd.FechaIngreso "
     'sql = sql & " ,ivb.descripcion"
    If Me.GNTrans.CodPantalla = "IVGNG" Then
            sql = sql & " ,gc.Estado1,gc.Estado2 "
    End If
    sql = sql & " ORDER BY gc.FechaTrans Desc, gc.horatrans desc  ,gc.CodTrans,gc.NumTrans"
   Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set ListaTransFuente2 = rs
    Set rs = Nothing
End Function

'*** MAKOTO 15/dic/00 Modificado
Public Sub ImportaDatos()
    ImportaDatos2 CStr(Me.IdTransFuente), False
End Sub

'*** MAKOTO 15/dic/00 Agregado
'TransIDs:    Cadena que contiene uno o varios TransIDs de fuente separados por coma ','
'Incremental: True=No se borra el contenido anterior sino se agrega
Public Sub ImportaDatos2( _
                ByVal TransIDs As String, _
                ByVal Incremental As Boolean)
    Dim Fuente As GNComprobante, i As Long, sql As String, rs As Recordset
    Dim v As Variant, tid As Long, aux_inc As Boolean
    Dim desc As String, pc As PCProvCli
    If Len(TransIDs) = 0 Then Exit Sub
    
    'Prepara una colección para almacenar TransIDs de fuente,
    ' para cuando graba la transacción cambiar de estado a Despachado
    If mcolTransIDs Is Nothing Then Set mcolTransIDs = New Collection
    
    'Separa los TransIDs en un vector
    v = Split(TransIDs, ",")
    aux_inc = Incremental
    
    'Si la transacción está configurada que importa solo desde transacciones Apropadas
    If Me.GNTrans.ImportaSoloAprobado Then
        sql = "SELECT CodTrans, NumTrans FROM GNComprobante " & _
              "WHERE (Not Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & ")) " & _
                    " AND (TransID IN (" & TransIDs & ")) "
        Set rs = Me.Empresa.OpenRecordset(sql)
        If Not rs.EOF Then
            sql = MSGERR_NOIMPORTA & vbCr & vbCr
            Do Until rs.EOF
                sql = sql & rs.Fields("CodTrans") & " " & rs.Fields("NumTrans") & vbCr
                rs.MoveNext
            Loop
            Err.Raise ERR_NOIMPORTA, "GNComprobante.ImportaDatos", sql
        End If
        rs.Close
        Set rs = Nothing
    End If
    desc = " Trans. Fuente: "
    'Repite para todas las transacciones de fuente
    For i = 0 To UBound(v, 1)
        tid = val(v(i))             'Convierte en numérico
        
        'Desde la segunda trans. hay que incrementar siempre
        If i > 0 Then aux_inc = True
        
        'Recupera la transaccioón de fuente
        Set Fuente = Empresa.RecuperaGNComprobante(tid)
        If Fuente Is Nothing Then
            Err.Raise ERR_NOHAYCODIGO, "GNComprobante.ImportaDatos", _
                        "No se puede recuperar la transacción de fuente."
        End If
    
        'Si está ImportaSoloAprobado=True y el origen no está 'aprobado' ni 'despachado'
        If GNTrans.ImportaSoloAprobado And _
            Not (Fuente.Estado = ESTADO_APROBADO Or Fuente.Estado = ESTADO_DESPACHADO Or Fuente.Estado = ESTADO_SEMDESPACHADO) Then
            Err.Raise ERR_NOIMPORTA, "GNComprobante.ImportaDatos", MSGERR_NOIMPORTA
        End If
        
        'Copia los datos de cabecera
        If Len(Me.idCentros) = 0 Then
            CodCentro = Fuente.CodCentro
            CodCentroHijo = Fuente.CodCentroHijo 'para bolivar
        End If
        
        'If Not Fuente.GNTrans.IVPideEmpleado Then
         '   If Len(Fuente.CodEmpleadoRef) = 0 Then
            CodProveedorRef = Fuente.CodProveedorRef
          '  Else
            CodEmpleadoRef = Fuente.CodEmpleadoRef
         '   End If
       ' Else
        '    If Len(Fuente.CodProveedorRef) > 0 Then
         '       CodEmpleadoRef = Fuente.CodEmpleadoRef
         '   Else
         '       CodEmpleadoRef = Fuente.CodEmpleadoRef
         '   End If
        'End If
        CodClienteRef = Fuente.CodClienteRef
        CodVendedor = Fuente.CodVendedor
        
        
        If Fuente.CodTrans <> "RI" Then
            If Me.GNTrans.IVValNumDoc Then
                NumDocRef = Fuente.NumSerieEstaSRI & "-" & Fuente.NumSeriePuntoSRI & "-" & Right("000000000" & Fuente.NumTrans, 9)
                If Me.GNTrans.IVComprobanteElectronico Then
                    NumSerieEstablecimiento = Fuente.NumSerieEstaSRI
                    NumSeriePunto = Fuente.NumSeriePuntoSRI
                    NumSecuencial = Right("000000000" & Fuente.NumTrans, 9)
                    NumSerie = Fuente.NumSerieEstaSRI & Fuente.NumSeriePuntoSRI
                    CodTipoComp = Fuente.GNTrans.TipoTrans
                    FechaAnexos = Fuente.FechaTrans

                End If
                
            Else
                If Me.GNTrans.IVVisibleReceta Then
                    NumDocRef = Fuente.CodTrans & "-" & Fuente.NumTrans
                Else
                    NumDocRef = Fuente.NumDocRef
                End If
            End If
        End If
        CodGaranteRef = Fuente.CodGaranteRef
        CodObra = Fuente.CodObra
        If Me.GNTrans.IVVisibleSucursalSolicita Then
            If Len(Fuente.CodZona) = 0 Then
                CodZona = Fuente.GNTrans.CodSucursal
            Else
                CodZona = Fuente.CodZona
            End If
        Else
            CodZona = Fuente.CodZona
        End If
        
        Estado1 = Fuente.Estado1
        Estado2 = Fuente.Estado2
        Atencion = Fuente.Atencion
        Detalles = Fuente.Detalles
        FechaEntrega = Fuente.FechaEntrega
        FormaPago = Fuente.FormaPago
        idCentroHijo = Fuente.idCentroHijo
        TiempoEntrega = Fuente.TiempoEntrega
        TiempoEstimadoEntrega = Fuente.TiempoEstimadoEntrega
        Validez = Fuente.Validez
        FechaValidez = Fuente.FechaValidez
        NumDireccion = Fuente.NumDireccion
        DirTransporte = Fuente.DirTransporte
        IdPlan = Fuente.IdPlan
        IdAgencia = Fuente.IdAgencia
        IdEmpleadoRef = Fuente.IdEmpleadoRef
        Estado1 = Fuente.Estado1
        RequiereTransporte = Fuente.RequiereTransporte
        
        If Fuente.FechaTrans < "01/06/2016" Then
            PorcentIVA = Me.Empresa.GNOpcion.PorcentajeIVA
        ElseIf Me.FechaTrans > "31/05/2016" And Me.FechaTrans < "01/06/2017" And Not Me.BandAplicaIvaAnt Then
            PorcentIVA = Me.Empresa.GNOpcion.PorcentajeIVAAnt
        ElseIf Me.FechaTrans >= Me.Empresa.GNOpcion.FechaIVA Then
            If Fuente.FechaTrans < Me.Empresa.GNOpcion.FechaIVA And Me.GNTrans.AnexoCodTipoComp = "4" Then
                PorcentIVA = Me.Empresa.GNOpcion.PorcentajeIVAAnt
            Else
                PorcentIVA = Me.Empresa.GNOpcion.PorcentajeIVA
            End If
        Else
            PorcentIVA = Me.Empresa.GNOpcion.PorcentajeIVAAnt
        End If
        
        
        'jeaa 04-04-2005 aumentado para saber de donde importo
        If UBound(v, 1) = 0 Then
            If Not Me.GNTrans.VisualizaTransFuente Then
                If Len(desc & " " & Fuente.CodTrans & " No. " & Fuente.NumTrans & " / ") > 120 Then
                    desc = desc & " " & Fuente.CodTrans & " No. " & Fuente.NumTrans & " / " & Mid$(Fuente.Descripcion, 1, Len(Fuente.Descripcion) - Len(Descripcion) - 20 - Len(Fuente.CodTrans))
                Else
                    desc = desc & " " & Fuente.CodTrans & " No. " & Fuente.NumTrans & " / " & Left$(Fuente.Descripcion, 120 - (Len(desc) + 5))
                End If
            Else
                desc = Left$(Fuente.Descripcion, 120)
                TransFuente = Fuente.CodTrans & " -" & Fuente.NumTrans
            End If
        Else
            If Len(Me.idCentros) = 0 Then
                desc = desc & Fuente.CodTrans & "-" & Fuente.NumTrans & " / "
            Else
                If InStr(1, desc, Fuente.CodCentro) = 0 Then
                    desc = desc & Fuente.CodCentro & " / "
                End If
            End If
        End If
        
        CodResponsable = Fuente.CodResponsable  '*** MAKOTO 16/ago/2000
        Nombre = Fuente.Nombre                  '*** MAKOTO 06/feb/01 Agregado
        
        If Fuente.GNTrans.CodPantalla = "PRPR" Then
            If Fuente.GNTrans.CodTrans <> "RI" Then
                CodGaranteRef = Fuente.CodProveedorRef
                If Fuente.ProfAdjudicada = 1 Then
                    CodProveedorRef = Fuente.Proforma1
                ElseIf Fuente.ProfAdjudicada = 2 Then
                    CodProveedorRef = Fuente.Proforma2
                ElseIf Fuente.ProfAdjudicada = 3 Then
                    CodProveedorRef = Fuente.Proforma3
                End If
            End If
            Set pc = Me.Empresa.RecuperaPCProvCliQuick(CodProveedorRef)
               If Not pc Is Nothing Then
                    Nombre = pc.Nombre
               End If
               Set pc = Nothing

    End If
       If Me.GNTrans.IVVisualizarNumPagos Then 'AUC agregado para yolita importa las entradas
        Me.NumeroPagos = Fuente.NumeroPagos
        Me.FechaPrimerPago = Fuente.FechaPrimerPago
        Me.FechaSegundoPago = Fuente.FechaSegundoPago
        Me.ValorEntrada = Fuente.ValorEntrada
        Me.ValorSegundaEntrada = Fuente.ValorSegundaEntrada
        Me.DiaPago = Fuente.DiaPago
       End If
        Me.CodReceta = Fuente.CodReceta
        Me.CodSeguro = Fuente.CodSeguro
        Me.ValorDeclarado = Fuente.ValorDeclarado
        Me.Peso = Fuente.Peso
        Me.IdDestinatario = Fuente.IdDestinatario
        Me.IdAgeCurier = Fuente.IdAgeCurier
        
        'Si requiere importar TSKardex
        If GNTrans.ImportaTSK Then
            ImportaTSKardex Fuente
        End If
        
        'Si requiere importar TSKardexRet       '*** MAKOTO 07/feb/01 Agregado
        If GNTrans.ImportaTSKRet Then
            ImportaTSKardexRet Fuente
        End If
        
        'Si requiere importar IVKardex
        If GNTrans.Modulo <> "AF" Then
            If GNTrans.ImportaIVK Then
                If GNTrans.FiltroItemxBod Then
                    ImportaIVKardexsSucursal Fuente, False, aux_inc
                Else
                    If Me.Empresa.GNOpcion.IVKTipoDatoDouble Then
                        ImportaIVKardexDou Fuente, False, aux_inc
                    Else
                       ImportaIVKardex Fuente, False, aux_inc
                    End If
                End If
            End If
            'Si requiere importar IVKardex pero que pase CostoRealTotal a CostoTotal
            If GNTrans.ImportaIVKReal Then
                If GNTrans.FiltroItemxBod Then
                    ImportaIVKardexsSucursal Fuente, False, aux_inc
                Else
                    If Me.Empresa.GNOpcion.IVKTipoDatoDouble Then
                        ImportaIVKardexDou Fuente, True, aux_inc
                    Else
                       ImportaIVKardex Fuente, True, aux_inc
                    End If
                End If
            End If
            'Si requiere importar IVKardexRecargo
            If GNTrans.ImportaIVKR Then
                ImportaIVKardexRecargo Fuente
            End If
        End If
    
        'Si requiere importar PCKardex
        If GNTrans.ImportaPCK Then
            If Fuente.GNTrans.CodPantalla = "IVRES_ALQ" Or Fuente.GNTrans.CodPantalla = "IVBQD2B" Or Fuente.GNTrans.CodPantalla = "IVBQD2BE" Or Fuente.GNTrans.CodPantalla = "IVRES_ALQF" Then  'AUC 14/02/07
                ImportaPCKardex1 Fuente, aux_inc
            Else
                ImportaPCKardex Fuente
            End If
        End If
        'Si requiere importar PCKardexCHP
        If GNTrans.ImportaPCKCHP Then
            ImportaPCKardexCHP Fuente
        End If
        
        'Si requiere importar CTLibroDetalle
        If GNTrans.ImportaCTD Then
            ImportaAsiento Fuente, aux_inc
        End If
    
            'Si requiere importar Presupuesto
        If GNTrans.ImportaPRCTD Then
            ImportaPRAsiento Fuente, aux_inc
        End If
        
        If GNTrans.IVGuiaRemision Then
            FechaInicio = Date
            FechaFin = Date
        End If
        
        'Almacena TransID de fuente en la colección
        If Not aux_inc Then LimpiaColeccion mcolTransIDs
        mcolTransIDs.Add item:=Fuente.transid
    
        'Si es importación incremental, cambia estado del ogígen inmediatamente
        '  Si no es incremental, lo hace al momento de grabar la trans para que
        '  no cambie estado en case de que cancela la transaccion sin grabar
        If Incremental Then
            'Si no está aprobado, no pasa al estado 'Despachado'
            ' para evitar que un asiento descuadrado marque como Despachado y afecte al balance
            If Fuente.Estado = ESTADO_APROBADO Then
                'Cambia el estado de fuente a Despachado
                mProps.objEmpresa.CambiaEstadoGNComp Fuente.transid, ESTADO_DESPACHADO
            End If
        End If
    Next i
    If UBound(v, 1) = 0 Then
        Descripcion = Descripcion & Mid$(desc, 1, 120 - Len(Descripcion))
    Else
        Descripcion = Descripcion & Mid$(desc, 1, 120 - Len(Descripcion))
    End If
    If Len(Descripcion) > 120 Then Descripcion = Mid$(Descripcion, 1, 120)
    Set Fuente = Nothing
End Sub

'*** MAKOTO 18/nov/00 Agregado
Private Sub ImportaAsiento( _
                    ByVal Fuente As GNComprobante, _
                    ByVal Incremental As Boolean)
    Dim i As Long, Ctd As CTLibroDetalle
    
    If mcolCTLibroDetalle Is Nothing Then Set mcolCTLibroDetalle = New Collection
    
    'Si es importación incremental, no se borra lo anterior
    If Not Incremental Then             '*** MAKOTO 15/dic/00
        BorrarCTLibroDetalle
    End If
    
    'Importa detalles de asiento contable
    For i = 1 To Fuente.CountCTLibroDetalle
        Set Ctd = Fuente.CTLibroDetalle(i).Clone
        Set Ctd.GNComprobante = Me
        mcolCTLibroDetalle.Add Ctd
    Next i
End Sub


Private Sub ImportaTSKardex(ByVal Fuente As GNComprobante)
    Dim i As Long, ix As Long, Tsk As TSKardex, pck As PCKardex
    Dim Saldo As Currency
    
    If mcolTSKardex Is Nothing Then Set mcolTSKardex = New Collection
    BorrarTSKardex
    
    'Si la fuente es de modulo IV y destino es de modulo TS
    If Fuente.GNTrans.Modulo = "IV" And Me.GNTrans.Modulo = "TS" Then
        'Importa de PCKardex (por cobrar/pagar) a TSKardex
        For i = 1 To Fuente.CountPCKardex
            Set pck = Fuente.PCKardex(i)
            If pck.IdAsignado = 0 Then      'Si es doc. por cobrar/pagar
                Saldo = pck.CalculaSaldo
                If Saldo > 0 Then           'Solo si tiene saldo
                    ix = AddTSKardex
                    Set Tsk = TSKardex(ix)
                    If Me.GNTrans.TSDebeVisible Then Tsk.Debe = pck.Debe
                    If Me.GNTrans.TSHaberVisible Then Tsk.Haber = pck.Haber
                    Tsk.Observacion = pck.Observacion
                End If
            End If
        Next i
        
    'Otros casos (IV->IV, TS->IV, TS->TS etc.)
    Else
        'Importa de TSKardex a TSKardex
        For i = 1 To Fuente.CountTSKardex
            Set Tsk = Fuente.TSKardex(i).Clone
            Set Tsk.GNComprobante = Me
            mcolTSKardex.Add Tsk
        Next i
    End If
End Sub

Private Sub ImportaIVKardex( _
                ByVal Fuente As GNComprobante, _
                ByVal ConValorReal As Boolean, _
                ByVal Incremental As Boolean)
    Dim i As Long, ix As Long, ivk As IVKardex
    Dim Signo As Integer, item As IVInventario
    Dim CantOriginal As Currency, c As Currency, pc As PCProvCli, nunPCGrupo As Integer, idPcGrupo As Long, cadPrecios  As String, ListaPrecio As String
    Dim v As Variant, respIVA As Single
    If mcolIVKardex Is Nothing Then Set mcolIVKardex = New Collection
    'Si es importación incremental, no se borra lo anterior
    If Not Incremental Then             '*** MAKOTO 15/dic/00
        BorrarIVKardex
    End If
        For i = 1 To Fuente.CountIVKardex
                   If Me.GNTrans.CodPantalla = "IVBQD2B" Or Me.GNTrans.CodPantalla = "IVBQD2BE" Or Me.GNTrans.CodPantalla = "IVDVALQ" Then
                  If Fuente.IVKardex(i).Cantidad < 0 Then
                Set ivk = Fuente.IVKardex(i).Clone
                Set ivk.GNComprobante = Me
                Set item = Fuente.Empresa.RecuperaIVInventario(ivk.IdInventario)
                If Me.Empresa.GNOpcion.BandCostoUCParaCosto Then
                    c = item.CostoReferencial
                Else
                    c = item.CostoDouble2(Me.FechaTrans, _
                        ivk.Cantidad, _
                        Me.transid, _
                        Me.HoraTrans)  '*** MAKOTO 08/dic/00 Agregado Hora
                End If
            If (GNTrans.Modulo <> Fuente.GNTrans.Modulo) Or _
                    (GNTrans.Modulo = Fuente.GNTrans.Modulo) Then       '**** PEND
                    'Asegura que la cantidad tenga el signo correcto
                    ' Es necesario porque tiene que cambiar de signo cuando importa de
                    ' FC(Egreso) --> FCV(Ingreso) o CP(Ingreso) --> CPV(Egreso)
                    ' HC(Ingreso) --> OF(Egreso) etc...
                    Signo = IIf(GNTrans.IVTipoTrans = "E", -1, 1) '-1 si es egreso
                    ivk.Cantidad = Abs(ivk.Cantidad) * Signo
                End If
                If Me.GNTrans.IVTipoTrans = "I" Then
                 If Not ConValorReal Then
                        ivk.CostoTotal = Abs(ivk.CostoTotal) * Signo
                        ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
                    Else
                        ivk.CostoTotal = Abs(ivk.CostoRealTotal) * Signo
                        ivk.PrecioTotal = Abs(ivk.PrecioRealTotal) * Signo
                    End If
                    ivk.CostoRealTotal = Abs(ivk.CostoRealTotal) * Signo
                    ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
                    ivk.idpadre = Fuente.transid
                    ivk.IdPadreSub = Fuente.IVKardex(i).Orden
                Else
                    If Not ConValorReal Then
                        ivk.CostoTotal = c * ivk.Cantidad * Signo
'                        ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
                        If Me.GNTrans.IVActualizaPrecioLista Then
                            ivk.PrecioRealTotal = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.Cantidad
                            ivk.PrecioTotal = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.Cantidad
                        Else
                            ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
                        End If
                    Else
                        ivk.CostoTotal = c * ivk.Cantidad * Signo
                        ivk.PrecioTotal = Abs(ivk.PrecioRealTotal) * Signo
                        ivk.idpadre = Fuente.transid
                        ivk.IdPadreSub = Fuente.IVKardex(i).Orden
                    End If
'                    ivk.CostoRealTotal = c * ivk.Cantidad * Signo
 '                   ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
                End If
              mcolIVKardex.Add ivk
            End If
       ElseIf Me.GNTrans.CodPantalla = "IVRES_ALQ" Or Fuente.GNTrans.CodPantalla = "IVRES_ALQ" Or Fuente.GNTrans.CodPantalla = "IVBQD2BE" Then
            If Right(Fuente.CodTrans, 1) = "M" Then
                If Fuente.IVKardex(i).Cantidad < 0 Then
                    Set ivk = Fuente.IVKardex(i).Clone
                    Set ivk.GNComprobante = Me
                    Set item = Fuente.Empresa.RecuperaIVInventario(ivk.IdInventario)
                    If Me.Empresa.GNOpcion.BandCostoUCParaCosto Then
                        c = item.CostoReferencial
                    Else
                        c = item.CostoDouble2(Me.FechaTrans, _
                            ivk.Cantidad, _
                            Me.transid, _
                            Me.HoraTrans)  '*** MAKOTO 08/dic/00 Agregado Hora
                    End If
                   If (GNTrans.Modulo <> Fuente.GNTrans.Modulo) Or _
                        (GNTrans.Modulo = Fuente.GNTrans.Modulo) Then       '**** PEND
                        'Asegura que la cantidad tenga el signo correcto
                        ' Es necesario porque tiene que cambiar de signo cuando importa de
                        ' FC(Egreso) --> FCV(Ingreso) o CP(Ingreso) --> CPV(Egreso)
                        ' HC(Ingreso) --> OF(Egreso) etc...
                   If Fuente.GNTrans.CodPantalla = "IVRES_ALQ" Or Fuente.GNTrans.CodPantalla = "IVBQD2BE" Then
                            Signo = 1
                        Else
                            Signo = IIf(Fuente.GNTrans.IVTipoTrans = "A", 1, -1) '-1 si es egreso
                        End If
                        ivk.Cantidad = Abs(ivk.Cantidad) * Signo
                        If Fuente.IdTransFuente <> 0 Then
                            ivk.NumDias = Fuente.IdTransFuente
                        Else
                            ivk.NumDias = Fuente.transid
                        End If
                    End If
                    If Me.GNTrans.IVTipoTrans = "I" Then
                        If Not ConValorReal Then
                            ivk.CostoTotal = Abs(ivk.CostoTotal) * Signo
                            ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
                        Else
                            ivk.CostoTotal = Abs(ivk.CostoRealTotal) * Signo
                            ivk.PrecioTotal = Abs(ivk.PrecioRealTotal) * Signo
                        End If
                        ivk.CostoRealTotal = Abs(ivk.CostoRealTotal) * Signo
                        ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
                    Else
                        If Not ConValorReal Then
                            ivk.CostoTotal = c * ivk.Cantidad * Signo
    '                        ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
                            If Me.GNTrans.IVActualizaPrecioLista Then
                                ivk.PrecioRealTotal = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.Cantidad
                                ivk.PrecioTotal = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.Cantidad
                            Else
                                ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
                            End If
                        Else
                            ivk.CostoTotal = c * ivk.Cantidad * Signo
                            ivk.PrecioTotal = Abs(ivk.PrecioRealTotal) * Signo
                        End If
                    End If
                    mcolIVKardex.Add ivk
                End If
            Else
                If Fuente.IVKardex(i).Cantidad > 0 Then
                    Set ivk = Fuente.IVKardex(i).Clone
                    Set ivk.GNComprobante = Me
                    Set item = Fuente.Empresa.RecuperaIVInventario(ivk.IdInventario)
                    If Me.Empresa.GNOpcion.BandCostoUCParaCosto Then
                        c = item.CostoReferencial
                    Else
                        c = item.CostoDouble2(Me.FechaTrans, _
                            ivk.Cantidad, _
                            Me.transid, _
                            Me.HoraTrans)  '*** MAKOTO 08/dic/00 Agregado Hora
                    End If
                   If (GNTrans.Modulo <> Fuente.GNTrans.Modulo) Or _
                        (GNTrans.Modulo = Fuente.GNTrans.Modulo) Then       '**** PEND
                        'Asegura que la cantidad tenga el signo correcto
                        ' Es necesario porque tiene que cambiar de signo cuando importa de
                        ' FC(Egreso) --> FCV(Ingreso) o CP(Ingreso) --> CPV(Egreso)
                        ' HC(Ingreso) --> OF(Egreso) etc...
                        If Fuente.GNTrans.CodPantalla = "IVRES_ALQ" Or Fuente.GNTrans.CodPantalla = "IVBQD2BE" Then
                            Signo = -1
                        Else
                            Signo = IIf(Fuente.GNTrans.IVTipoTrans = "A", -1, 1) '-1 si es egreso
                        End If
                        ivk.Cantidad = Abs(ivk.Cantidad) * Signo
                        If Fuente.IdTransFuente <> 0 Then
                            ivk.NumDias = Fuente.IdTransFuente
                        Else
                            ivk.NumDias = Fuente.transid
                        End If
                    End If
                    If Me.GNTrans.IVTipoTrans = "I" Then
                        If Not ConValorReal Then
                            ivk.CostoTotal = Abs(ivk.CostoTotal) * Signo
                            ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
                        Else
                            ivk.CostoTotal = Abs(ivk.CostoRealTotal) * Signo
                            ivk.PrecioTotal = Abs(ivk.PrecioRealTotal) * Signo
                        End If
                        ivk.CostoRealTotal = Abs(ivk.CostoRealTotal) * Signo
                        ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
                    Else
                        If Not ConValorReal Then
                            ivk.CostoTotal = c * ivk.Cantidad '* Signo
                            ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
                            If Me.GNTrans.IVActualizaPrecioLista Then
                                ivk.PrecioRealTotal = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.Cantidad
                                ivk.PrecioTotal = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.Cantidad
                            Else
                                ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
                            End If
                        Else
                            ivk.CostoTotal = c * ivk.Cantidad * Signo
                            ivk.PrecioTotal = Abs(ivk.PrecioRealTotal) * Signo
                        End If
                    End If
                    mcolIVKardex.Add ivk
                Else
                    If Fuente.GNTrans.IVTipoTrans = "A" Then
                        If Fuente.IVKardex(i).Cantidad > 0 Then
                            Set ivk = Fuente.IVKardex(i).Clone
                            Set ivk.GNComprobante = Me
                            Set item = Fuente.Empresa.RecuperaIVInventario(ivk.IdInventario)
                            If Me.Empresa.GNOpcion.BandCostoUCParaCosto Then
                                c = item.CostoReferencial
                            Else
                                c = item.CostoDouble2(Me.FechaTrans, _
                                    ivk.Cantidad, _
                                    Me.transid, _
                                    Me.HoraTrans)  '*** MAKOTO 08/dic/00 Agregado Hora
                            End If
                           If (GNTrans.Modulo <> Fuente.GNTrans.Modulo) Or _
                                (GNTrans.Modulo = Fuente.GNTrans.Modulo) Then       '**** PEND
                                'Asegura que la cantidad tenga el signo correcto
                                ' Es necesario porque tiene que cambiar de signo cuando importa de
                                ' FC(Egreso) --> FCV(Ingreso) o CP(Ingreso) --> CPV(Egreso)
                                ' HC(Ingreso) --> OF(Egreso) etc...
                                If Fuente.GNTrans.CodPantalla = "IVRES_ALQ" Or Fuente.GNTrans.CodPantalla = "IVBQD2B" Or Fuente.GNTrans.CodPantalla = "IVBQD2BE" Then
                                    Signo = -1
                                Else
                                    Signo = IIf(Fuente.GNTrans.IVTipoTrans = "A", -1, 1) '-1 si es egreso
                                End If
                                ivk.Cantidad = Abs(ivk.Cantidad) * Signo
                                If Fuente.IdTransFuente <> 0 Then
                                    ivk.NumDias = Fuente.IdTransFuente
                                Else
                                    ivk.NumDias = Fuente.transid
                                End If
                            End If
                            If Me.GNTrans.IVTipoTrans = "I" Then
                                If Not ConValorReal Then
                                    ivk.CostoTotal = Abs(ivk.CostoTotal) * Signo
                                    ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
                                Else
                                    ivk.CostoTotal = Abs(ivk.CostoRealTotal) * Signo
                                    ivk.PrecioTotal = Abs(ivk.PrecioRealTotal) * Signo
                                End If
                                ivk.CostoRealTotal = Abs(ivk.CostoRealTotal) * Signo
                                ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
                            Else
                                If Not ConValorReal Then
                                    ivk.CostoTotal = c * ivk.Cantidad '* Signo
                                    ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
                                    If Me.GNTrans.IVActualizaPrecioLista Then
                                        ivk.PrecioRealTotal = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.Cantidad
                                        ivk.PrecioTotal = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.Cantidad
                                    Else
                                        ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
                                    End If
                                Else
                                    ivk.CostoTotal = c * ivk.Cantidad * Signo
                                    ivk.PrecioTotal = Abs(ivk.PrecioRealTotal) * Signo
                                End If
                            End If
                            mcolIVKardex.Add ivk
                        End If
                    Else
                        If Fuente.IVKardex(i).Cantidad < 0 Then
                            Set ivk = Fuente.IVKardex(i).Clone
                            Set ivk.GNComprobante = Me
                            Set item = Fuente.Empresa.RecuperaIVInventario(ivk.IdInventario)
                            If Me.Empresa.GNOpcion.BandCostoUCParaCosto Then
                                c = item.CostoReferencial
                            Else
                                c = item.CostoDouble2(Me.FechaTrans, _
                                ivk.Cantidad, _
                                Me.transid, _
                                Me.HoraTrans)  '*** MAKOTO 08/dic/00 Agregado Hora
                            End If
                           If (GNTrans.Modulo <> Fuente.GNTrans.Modulo) Or _
                                (GNTrans.Modulo = Fuente.GNTrans.Modulo) Then       '**** PEND
                                'Asegura que la cantidad tenga el signo correcto
                                ' Es necesario porque tiene que cambiar de signo cuando importa de
                                ' FC(Egreso) --> FCV(Ingreso) o CP(Ingreso) --> CPV(Egreso)
                                ' HC(Ingreso) --> OF(Egreso) etc...
                                If Fuente.GNTrans.CodPantalla = "IVRES_ALQ" Or Fuente.GNTrans.CodPantalla = "IVBQD2BE" Then
                                    Signo = -1
                                Else
                                    Signo = IIf(Fuente.GNTrans.IVTipoTrans = "A", -1, 1) '-1 si es egreso
                                    If Fuente.GNTrans.IVTipoTrans = "E" Then
                                        Signo = -1
                                    End If
                                End If
                                ivk.Cantidad = Abs(ivk.Cantidad) * Signo
                                If Fuente.IdTransFuente <> 0 Then
                                    ivk.NumDias = Fuente.IdTransFuente
                                Else
                                    ivk.NumDias = Fuente.transid
                                End If
                            End If
                            If Me.GNTrans.IVTipoTrans = "I" Then
                                If Not ConValorReal Then
                                    ivk.CostoTotal = Abs(ivk.CostoTotal) * Signo
                                    ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
                                Else
                                    ivk.CostoTotal = Abs(ivk.CostoRealTotal) * Signo
                                    ivk.PrecioTotal = Abs(ivk.PrecioRealTotal) * Signo
                                End If
                                ivk.CostoRealTotal = Abs(ivk.CostoRealTotal) * Signo
                                ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
                            Else
                                If Not ConValorReal Then
                                    ivk.CostoTotal = c * ivk.Cantidad '* Signo
                                    ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
                                    If Me.GNTrans.IVActualizaPrecioLista Then
                                        ivk.PrecioRealTotal = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.Cantidad
                                        ivk.PrecioTotal = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.Cantidad
                                    Else
                                        ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
                                    End If
                                Else
                                    ivk.CostoTotal = c * ivk.Cantidad * Signo
                                    ivk.PrecioTotal = Abs(ivk.PrecioRealTotal) * Signo
                                End If
                            End If
                            mcolIVKardex.Add ivk
                        End If
                    End If
                End If
            End If
        ElseIf Me.GNTrans.CodPantalla = "IVBD" Or Me.GNTrans.CodPantalla = "IVBDBQD" Then 'En caso que importe para transferencia de bodega
            If Fuente.IVKardex(i).Cantidad > 0 Then
                Set ivk = Fuente.IVKardex(i).Clone
                Set ivk.GNComprobante = Me
                Set item = Fuente.Empresa.RecuperaIVInventario(ivk.IdInventario)
                If Me.Empresa.GNOpcion.BandCostoUCParaCosto Then
                    c = item.CostoReferencial
                Else
                    c = item.CostoDouble2(Me.FechaTrans, _
                        ivk.Cantidad, _
                        Me.transid, _
                        Me.HoraTrans)  '*** MAKOTO 08/dic/00 Agregado Hora
                End If
               If (GNTrans.Modulo <> Fuente.GNTrans.Modulo) Or _
                    (GNTrans.Modulo = Fuente.GNTrans.Modulo) Then       '**** PEND
                    Signo = IIf(GNTrans.IVTipoTrans = "T", -1, 1)   '-1 si es egreso
                    ivk.Cantidad = Abs(ivk.Cantidad) * Signo
                End If
                If Me.GNTrans.IVTipoTrans = "I" Then
                    If Not ConValorReal Then
                        ivk.CostoTotal = Abs(ivk.CostoTotal) * Signo
                        ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
                    Else
                        ivk.CostoTotal = Abs(ivk.CostoRealTotal) * Signo
                        ivk.PrecioTotal = Abs(ivk.PrecioRealTotal) * Signo
                    End If
                    ivk.CostoRealTotal = Abs(ivk.CostoRealTotal) * Signo
                    ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
                ElseIf Fuente.GNTrans.IVTipoTrans = "I" Then
                    ivk.Cantidad = Abs(ivk.Cantidad) * Signo
                    ivk.CostoTotal = c * Abs(ivk.Cantidad) * Signo
                Else
                    If Not ConValorReal Then
                        ivk.CostoTotal = c * ivk.Cantidad * Signo
                        ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
                    Else
                        ivk.CostoTotal = c * ivk.Cantidad * Signo
                        ivk.PrecioTotal = Abs(ivk.PrecioRealTotal) * Signo
                    End If
                    ivk.CostoRealTotal = c * ivk.Cantidad * Signo
                    ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
                End If
                mcolIVKardex.Add ivk
            End If
        ElseIf Me.GNTrans.CodPantalla = "IVISOFAC" Then 'En caso que importe para transferencia de bodega
            If Fuente.IVKardex(i).BandVerifica And Fuente.IVKardex(i).Cantidad > 0 Then
                Set ivk = Fuente.IVKardex(i).Clone
                Set ivk.GNComprobante = Me
                Set item = Fuente.Empresa.RecuperaIVInventario(ivk.IdInventario)
                If Me.Empresa.GNOpcion.BandCostoUCParaCosto Then
                    c = item.CostoReferencial
                Else
                    c = item.CostoDouble2(Me.FechaTrans, _
                        ivk.Cantidad, _
                        Me.transid, _
                        Me.HoraTrans)  '*** MAKOTO 08/dic/00 Agregado Hora
                End If
               If (GNTrans.Modulo <> Fuente.GNTrans.Modulo) Or _
                    (GNTrans.Modulo = Fuente.GNTrans.Modulo) Then       '**** PEND
                    Signo = IIf(GNTrans.IVTipoTrans = "T", -1, 1)   '-1 si es egreso
                    ivk.Cantidad = Abs(ivk.Cantidad) * Signo
                End If
                If Me.GNTrans.IVTipoTrans = "I" Then
                    If Not ConValorReal Then
                        ivk.CostoTotal = Abs(ivk.CostoTotal) * Signo
                        ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
                    Else
                        ivk.CostoTotal = Abs(ivk.CostoRealTotal) * Signo
                        ivk.PrecioTotal = Abs(ivk.PrecioRealTotal) * Signo
                    End If
                    ivk.CostoRealTotal = Abs(ivk.CostoRealTotal) * Signo
                    ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
                Else
                    If Not ConValorReal Then
                        ivk.CostoTotal = c * ivk.Cantidad * Signo
                        ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
                    Else
                        ivk.CostoTotal = c * ivk.Cantidad * Signo
                        ivk.PrecioTotal = Abs(ivk.PrecioRealTotal) * Signo
                    End If
                    ivk.CostoRealTotal = c * ivk.Cantidad * Signo
                    ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
                End If
                mcolIVKardex.Add ivk
            Else
                ' PARA GUIA
                Set ivk = Fuente.IVKardex(i).Clone
                Set ivk.GNComprobante = Me
                Set item = Fuente.Empresa.RecuperaIVInventario(ivk.IdInventario)
                If ivk.GNComprobante.GNTrans.IVGuiaRemision Then
                    c = item.CostoReferencial
                Else
                    If Me.Empresa.GNOpcion.BandCostoUCParaCosto Then
                        c = item.CostoReferencial
                    Else
                        c = item.CostoDouble2(Me.FechaTrans, _
                            ivk.Cantidad, _
                            Me.transid, _
                            Me.HoraTrans)  '*** MAKOTO 08/dic/00 Agregado Hora
                    End If
                End If
               If (GNTrans.Modulo <> Fuente.GNTrans.Modulo) Or _
                    (GNTrans.Modulo = Fuente.GNTrans.Modulo) Then       '**** PEND
                    Signo = IIf(GNTrans.IVTipoTrans = "T", 1, -1)   '-1 si es egreso
                    ivk.Cantidad = Abs(ivk.Cantidad) * Signo
                End If
                If Me.GNTrans.IVTipoTrans = "I" Then
                    If Not ConValorReal Then
                        ivk.CostoTotal = Abs(ivk.CostoTotal) * Signo
                        ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
                    Else
                        ivk.CostoTotal = Abs(ivk.CostoRealTotal) * Signo
                        ivk.PrecioTotal = Abs(ivk.PrecioRealTotal) * Signo
                    End If
                    ivk.CostoRealTotal = Abs(ivk.CostoRealTotal) * Signo
                    ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
                Else
                    If Not ConValorReal Then
                        ivk.CostoTotal = c * ivk.Cantidad * Signo
                        ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
                    Else
                        ivk.CostoTotal = c * ivk.Cantidad * Signo
                        ivk.PrecioTotal = Abs(ivk.PrecioRealTotal) * Signo
                    End If
                    ivk.CostoRealTotal = c * ivk.Cantidad * Signo
                    ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
                End If
'                ivk.TiempoEntrega = Fuente.TiempoEntrega
                mcolIVKardex.Add ivk
                
                
'--------------
            End If
        '------------------------------------------------
                ElseIf Fuente.GNTrans.CodPantalla = "IVRES_ALQ" Or Fuente.GNTrans.CodPantalla = "IVBQD2BE" Then
            If Right(Fuente.GNTrans.CodTrans, 1) = "M" Then
                If Fuente.IVKardex(i).Cantidad < 0 Then
                    Set ivk = Fuente.IVKardex(i).Clone
                    Set ivk.GNComprobante = Me
                    Set item = Fuente.Empresa.RecuperaIVInventario(ivk.IdInventario)
                    If Me.Empresa.GNOpcion.BandCostoUCParaCosto Then
                        c = item.CostoReferencial
                    Else
                        c = item.CostoDouble2(Me.FechaTrans, _
                            ivk.Cantidad, _
                            Me.transid, _
                            Me.HoraTrans)  '*** MAKOTO 08/dic/00 Agregado Hora
                    End If
                   If (GNTrans.Modulo <> Fuente.GNTrans.Modulo) Or _
                        (GNTrans.Modulo = Fuente.GNTrans.Modulo) Then       '**** PEND
                        Signo = 1
                        ivk.Cantidad = Abs(ivk.Cantidad) * Signo
                        If Fuente.IdTransFuente <> 0 Then
                            ivk.NumDias = Fuente.IdTransFuente
                        Else
                            ivk.NumDias = Fuente.transid
                        End If
                    End If
                    If Me.GNTrans.IVTipoTrans = "I" Then
                        If Not ConValorReal Then
                            ivk.CostoTotal = Abs(ivk.CostoTotal) * Signo
                            ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
                        Else
                            ivk.CostoTotal = Abs(ivk.CostoRealTotal) * Signo
                            ivk.PrecioTotal = Abs(ivk.PrecioRealTotal) * Signo
                        End If
                        ivk.CostoRealTotal = Abs(ivk.CostoRealTotal) * Signo
                        ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
                    Else
                        If Not ConValorReal Then
                            ivk.CostoTotal = c * ivk.Cantidad * Signo
                            If Me.GNTrans.IVActualizaPrecioLista Then
                                ivk.PrecioRealTotal = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.Cantidad
                                ivk.PrecioTotal = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.Cantidad
                            Else
                                ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
                            End If
                        Else
                            ivk.CostoTotal = c * ivk.Cantidad * Signo
                            ivk.PrecioTotal = Abs(ivk.PrecioRealTotal) * Signo
                        End If
                    End If
                    mcolIVKardex.Add ivk
                End If
            Else
                If Fuente.IVKardex(i).Cantidad > 0 Then
                    Set ivk = Fuente.IVKardex(i).Clone
                    Set ivk.GNComprobante = Me
                    Set item = Fuente.Empresa.RecuperaIVInventario(ivk.IdInventario)
                    If Me.Empresa.GNOpcion.BandCostoUCParaCosto Then
                        c = item.CostoReferencial
                    Else
                        c = item.CostoDouble2(Me.FechaTrans, _
                            ivk.Cantidad, _
                            Me.transid, _
                            Me.HoraTrans)  '*** MAKOTO 08/dic/00 Agregado Hora
                    End If
                   If (GNTrans.Modulo <> Fuente.GNTrans.Modulo) Or _
                        (GNTrans.Modulo = Fuente.GNTrans.Modulo) Then       '**** PEND
                        'Asegura que la cantidad tenga el signo correcto
                        ' Es necesario porque tiene que cambiar de signo cuando importa de
                        ' FC(Egreso) --> FCV(Ingreso) o CP(Ingreso) --> CPV(Egreso)
                        ' HC(Ingreso) --> OF(Egreso) etc...
                        Signo = -1 ' IIf(GNTrans.IVTipoTrans = "E", -1, 1) '-1 si es egreso
                        ivk.Cantidad = Abs(ivk.Cantidad) * Signo
                        If Fuente.IdTransFuente <> 0 Then
                            ivk.NumDias = Fuente.IdTransFuente
                        Else
                            ivk.NumDias = Fuente.transid
                        End If
                    End If
                    If Me.GNTrans.IVTipoTrans = "I" Then
                        If Not ConValorReal Then
                            ivk.CostoTotal = Abs(ivk.CostoTotal) * Signo
                            ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
                        Else
                            ivk.CostoTotal = Abs(ivk.CostoRealTotal) * Signo
                            ivk.PrecioTotal = Abs(ivk.PrecioRealTotal) * Signo
                        End If
                        ivk.CostoRealTotal = Abs(ivk.CostoRealTotal) * Signo
                        ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
                    Else
                        If Not ConValorReal Then
                            ivk.CostoTotal = c * ivk.Cantidad * Signo
    '                        ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
                            If Me.GNTrans.IVActualizaPrecioLista Then
                                ivk.PrecioRealTotal = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.Cantidad
                                ivk.PrecioTotal = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.Cantidad
                            Else
                                ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
                            End If
                        Else
                            ivk.CostoTotal = c * ivk.Cantidad * Signo
                            ivk.PrecioTotal = Abs(ivk.PrecioRealTotal) * Signo
                        End If
    '                    ivk.CostoRealTotal = c * ivk.Cantidad * Signo
     '                   ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
                    End If
                   mcolIVKardex.Add ivk
                End If
            End If
        '-----------------------------------------------
        Else
                Set ivk = Fuente.IVKardex(i).Clone
                Set ivk.GNComprobante = Me
                Set item = Fuente.Empresa.RecuperaIVInventario(ivk.IdInventario)
                If Fuente.GNTrans.CodPantalla = "IVBQDISO" Then
                    c = 0
                Else
                    If Me.Empresa.GNOpcion.BandCostoUCParaCosto Then
                        c = item.CostoReferencial
                    Else
                        c = item.CostoDouble2(Me.FechaTrans, _
                            ivk.Cantidad, _
                            Me.transid, _
                            Me.HoraTrans)  '*** MAKOTO 08/dic/00 Agregado Hora
                    End If
                End If
                    CantOriginal = ivk.Cantidad
                    If (GNTrans.Modulo <> Fuente.GNTrans.Modulo) Or _
                        (GNTrans.Modulo = Fuente.GNTrans.Modulo) Then       '**** PEND
                        'Asegura que la cantidad tenga el signo correcto
                        ' Es necesario porque tiene que cambiar de signo cuando importa de
                        ' FC(Egreso) --> FCV(Ingreso) o CP(Ingreso) --> CPV(Egreso)
                        ' HC(Ingreso) --> OF(Egreso) etc...
                        If Me.GNTrans.ImpRespetarSignosCantidad Then
                            If Len(Me.idFuentes) > 0 Or Len(Me.TransFuente) <> 0 Then
                                Signo = IIf(Fuente.GNTrans.IVTipoTrans = "E", -1, 1) '-1 si es egreso
                            Else
                                Signo = IIf(Me.GNTrans.IVTipoTrans = "E", -1, 1) '-1 si es egreso
                            End If
                        Else
                            If Me.GNTrans.IVTransCal Then
                                Signo = IIf(Me.GNTrans.IVTipoTrans = "E", 1, -1) '-1 si es egreso
                            Else
                                Signo = IIf(Me.GNTrans.IVTipoTrans = "E", -1, 1) '-1 si es egreso
                            End If
                        End If
                        ivk.Cantidad = Abs(ivk.Cantidad) * Signo
                        If Len(Me.CodDistrito) <> 0 Then
                            ivk.CodBodega = Me.CodDistrito
                        End If
                        ivk.Descuento = ivk.Descuento
                                                           
                    End If
                    If Me.GNTrans.IVTipoTrans = "I" Or Me.GNTrans.IVTipoTrans = "X" Then
                        If Not ConValorReal Then
                            ivk.CostoTotal = Abs(ivk.CostoTotal) * Signo
                            ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
                        Else
                            ivk.CostoTotal = Abs(ivk.CostoRealTotal) * Signo
                            ivk.PrecioTotal = Abs(ivk.PrecioRealTotal) * Signo
                            ivk.Descuento = 0
                        End If
                        ivk.CostoRealTotal = Abs(ivk.CostoRealTotal) * Signo
                        ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo

                    Else
                        If Not ConValorReal Then
                                If Me.GNTrans.AnexoCodTipoTrans = "1" Then
                                    If Me.GNTrans.AnexoCodTipoComp = "4" Then
                                        ivk.CostoTotal = ivk.CostoTotal * Signo
                                    Else
                                        ivk.CostoTotal = ivk.CostoTotal
                                    End If
                                Else
                                    ivk.CostoTotal = c * ivk.Cantidad
                                End If
                            If Me.GNTrans.IVActualizaPrecioLista Then
                                If Me.GNTrans.IVPrecioxPCGrupo Then
                                            If Me.IdClienteRef <> 0 Then
                                                Set pc = Me.Empresa.RecuperaPCProvCli(Me.IdClienteRef)
                                                If Not pc Is Nothing Then
                                                    If Len(Me.Empresa.GNOpcion.ObtenerValor("PrecioxCGrupo")) > 0 Then
                                                        If CInt(Me.Empresa.GNOpcion.ObtenerValor("PrecioxCGrupo")) > 0 Then
                                                                nunPCGrupo = CInt(Me.Empresa.GNOpcion.ObtenerValor("PrecioxCGrupo"))
                                                            Select Case nunPCGrupo
                                                            Case 1
                                                                idPcGrupo = pc.IdGrupo1
                                                            Case 2
                                                                idPcGrupo = pc.IdGrupo2
                                                            Case 3
                                                                idPcGrupo = pc.IdGrupo3
                                                            Case 4
                                                                idPcGrupo = pc.IdGrupo4
                                                            End Select
                                                            If Me.CodForma = "TCC" Then
                                                                cadPrecios = "1000000"
                                                            Else
                                                                cadPrecios = item.RecuperaCadenaPreciosxGrupo(nunPCGrupo, idPcGrupo)
                                                            End If
                                                            ListaPrecio = item.ListaPrecioxPCGrupoParaFlex(Me, cadPrecios)
                                                            v = Split(ListaPrecio, "|")
                                                            
                                                            If ivk.PrecioTotal <> (Abs(v(1)) * ivk.Cantidad) Then
                                                                MsgBox " Para el item " & item.CodInventario & "-" & item.Descripcion & Chr(13) & "Se actualiza el precio de " & Abs(ivk.PrecioTotal) & " a " & Abs(Abs(v(1)) * ivk.Cantidad)
                                                            End If
                                                            ivk.PrecioTotal = Abs(v(1)) * ivk.Cantidad
                                                            Set pc = Nothing
                                                        End If
                                                    End If
                                                End If
                                            Else
                                                MsgBox "Debe primero seleccionar cliente," & Chr(13) & "Está Transacción está configurada con Precios por Grupo de Cliente"
                                                Exit Sub
                                            End If
                                Else
                                    ivk.PrecioTotal = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.Cantidad
                                End If
                            Else
                                ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
                            End If
                        Else
                            ivk.CostoTotal = c * ivk.Cantidad
                            ivk.PrecioTotal = Abs(ivk.PrecioRealTotal) * Signo
                            ivk.Descuento = 0
                        End If
                        ivk.CostoRealTotal = c * ivk.Cantidad
                        If Me.GNTrans.IVActualizaPrecioLista Then
                            ivk.PrecioRealTotal = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.Cantidad
                        Else
                            ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
                        End If
                    End If
                    If Me.GNTrans.IVControlaLimitePorFacturaxLinea Then
                        ivk.Nota1 = Fuente.IVKardex(i).Orden
                    End If
                    ivk.codItemPadre = Fuente.IVKardex(i).codItemPadre
                    'jeaa 23/03/2009
                    If item Is Nothing Then
                        Set item = Fuente.Empresa.RecuperaIVInventarioQuick(ivk.IdInventario)
                    End If
                    If Not item Is Nothing Then
                            If Not item.BandNoSeFactura Then
                                ' si se importa de un transferencia solo coge valores de ingreso
                                If Fuente.GNTrans.IVTipoTrans = "T" Or Fuente.GNTrans.IVTipoTrans = "A" Then
                                    If CantOriginal > 0 Then
                                        mcolIVKardex.Add ivk
                                    End If
                                Else
                                    mcolIVKardex.Add ivk
                                End If
                            End If
                    End If
                    If Fuente.PorcentIVA <> Me.Empresa.GNOpcion.PorcentajeIVA And Me.GNTrans.AnexoCodTipoComp <> "4" Then
                        If Not Me.BandAplicaIvaAnt Then
                            respIVA = MsgBox("La transaccion importada " & Fuente.CodTrans & "-" & Fuente.NumTrans & " tiene un porcentaje de IVA de: " & Fuente.PorcentIVA * 100 & Chr(13) & "El cual es  diferente al porcentaj Actual que es: " & Me.Empresa.GNOpcion.PorcentajeIVA * 100 & Chr(13) & "Desea manter el Porcentaje Anterior: " & Fuente.PorcentIVA * 100, vbYesNo)
                        Else
                            respIVA = vbYes
                        End If
                    End If
                    If respIVA = vbNo Or (respIVA = 0 And Me.GNTrans.AnexoCodTipoComp = "4") Then
                        If ivk.IVA <> 0 Then
                            If Me.FechaTrans < "01/06/2016" Or Fuente.FechaTrans < "01/06/2016" Then
                                ivk.IVA = Fuente.PorcentIVA
                                Me.PorcentIVA = Fuente.PorcentIVA
                            ElseIf Me.FechaTrans > "31/05/2016" And Me.FechaTrans < "01/06/2017" And Not Me.BandAplicaIvaAnt Then
                                ivk.IVA = Fuente.PorcentIVA
                                Me.PorcentIVA = Fuente.PorcentIVA
                            ElseIf Me.FechaTrans >= Me.Empresa.GNOpcion.FechaIVA Then
                                If Fuente.FechaTrans < Me.Empresa.GNOpcion.FechaIVA And Me.GNTrans.AnexoCodTipoComp = "4" Then
                                    ivk.IVA = Me.Empresa.GNOpcion.PorcentajeIVAAnt
                                    Me.PorcentIVA = Me.Empresa.GNOpcion.PorcentajeIVAAnt
                                Else
                                    If Me.GNTrans.AnexoCodTipoComp = "4" Then
                                        ivk.IVA = Fuente.PorcentIVA
                                        Me.PorcentIVA = Fuente.PorcentIVA
'                                        Me.BandAplicaIvaAnt = True
                                    Else
                                        ivk.IVA = Me.Empresa.GNOpcion.PorcentajeIVA
                                    End If
                                End If
                            Else
                                ivk.IVA = Me.Empresa.GNOpcion.PorcentajeIVAAnt
                                Me.PorcentIVA = Me.Empresa.GNOpcion.PorcentajeIVAAnt
                            End If
                        End If
                    ElseIf respIVA = vbYes Then
                        Me.BandAplicaIvaAnt = True
                        ivk.IVA = Me.Empresa.GNOpcion.PorcentajeIVAAnt
                        Me.PorcentIVA = Me.Empresa.GNOpcion.PorcentajeIVAAnt
                    End If
            End If
            Set item = Nothing
    Next i
End Sub

Private Sub ImportaIVKardexRecargo(ByVal Fuente As GNComprobante)
    Dim i As Long, ix As Long, ivrec As IVKardexRecargo
    Dim v As Currency, p As Currency
    
    If mcolIVKardexRecargo Is Nothing Then Set mcolIVKardexRecargo = New Collection
'    BorrarIVKardexRecargo
    
    For i = 1 To Fuente.CountIVKardexRecargo
        'Primero busca dentro de colección del mismo comprobante
        Set ivrec = BuscaIVKardexRecargo(Fuente.IVKardexRecargo(i).IdRecargo)
        'Si encuentra
        If Not (ivrec Is Nothing) Then
            ivrec.Porcentaje = 0                'Limpia el porcentaje (Importante)
        
            'Solo copia el valor y porcentaje
            v = Fuente.IVKardexRecargo(i).Valor
            p = Fuente.IVKardexRecargo(i).Porcentaje
            
            'Convierte en la moneda de la transaccion actual
            v = v * Fuente.Cotizacion("") / Me.Cotizacion("")
            ivrec.Valor = v
            If p <> 0 Then ivrec.Porcentaje = p
            
        'Si no encuentra en la colección
        Else
'*** NO importa si no hay
'            'Importa de la fuente
'            Set ivrec = fuente.IVKardexRecargo(i).Clone
'            Set ivrec.GNComprobante = Me
'            mcolIVKardexRecargo.Add ivrec
        End If
    Next i
End Sub

Private Sub ImportaPCKardex(ByVal Fuente As GNComprobante)
    Dim i As Long, ix As Long, pck As PCKardex, pck2 As PCKardex
    Dim Saldo  As Currency

    If mcolPCKardex Is Nothing Then Set mcolPCKardex = New Collection
    BorrarPCKardex
    
    'Si la fuente es de modulo IV/FC y destino es de modulo TS
    If (Fuente.GNTrans.Modulo = "IV" Or Fuente.GNTrans.Modulo = "FC") _
        And (Me.GNTrans.Modulo = "TS") Then
        If Fuente.GNTrans.AfectaSaldoPC Then
            'Importa de PCKardex (POR cobrar/pagar) a PCKardex (Cobro/Pago)
            For i = 1 To Fuente.CountPCKardex
                Set pck = Fuente.PCKardex(i)
                If pck.IdAsignado = 0 Then      'Si es doc. por cobrar/pagar
                    Saldo = pck.CalculaSaldo
                    If Saldo > 0 Then           'Solo si exite saldo
                        ix = AddPCKardex
                        Set pck2 = PCKardex(ix)
                        
                        pck2.IdAsignado = pck.Id
'                        pck2.IdProvCli = pck.IdProvCli
                        pck2.CodProvcli = pck.CodProvcli
'                        pck2.CotizacionAsignado = Me.Cotizacion(Me.CodMoneda)
                        pck2.FechaEmision = Me.FechaTrans
                        pck2.FechaVenci = pck2.FechaVenci
                        pck2.IDForma = pck.IDForma
                        pck2.NumLetra = pck.NumLetra
                        pck2.Observacion = pck.Observacion
                        pck2.Orden = Me.CountPCKardex
                        If pck.Debe > 0 Then
                            pck2.Haber = Saldo
                        Else
                            pck2.Debe = Saldo
                        End If
                        
                    End If
                End If
            Next i
        Else
            'Crea los anticipos
            For i = 1 To Fuente.CountPCKardex
                Set pck = Fuente.PCKardex(i).Clone
                pck.Guid = ""               'Diego 03/09/2002
                                            'Debe generar su propio GUID
                
                Set pck.GNComprobante = Me
                mcolPCKardex.Add pck
                
                'Intercambia Debe y Haber
                If pck.Debe Then
                    pck.Haber = pck.Debe
                Else
                    pck.Debe = pck.Haber
                End If
                
                'Para que no sea Fecha de vencimiento mal       '*** MAKOTO 15/dic/00
                If pck.FechaVenci < pck.FechaEmision Then
                    pck.FechaVenci = pck.FechaEmision
                End If
                
                'Limpia CodForma
                pck.CodForma = ""
            Next i
        End If
        
    'Otros casos (IV->IV, TS->IV, TS->TS etc.)
    Else
        For i = 1 To Fuente.CountPCKardex
            'Sólo importa los documentos originales (Cobros/Pagos asignados no)
            If Fuente.PCKardex(i).IdAsignado = 0 Then      '*** MAKOTO 15/dic/00
                Set pck = Fuente.PCKardex(i).Clone
                Set pck.GNComprobante = Me
                ''
                pck.Guid = ""   '*** Oliver 10 dic 2004,  para que genere otro GUID no como el original
                'Para que no sea Fecha de vencimiento mal       '*** MAKOTO 15/dic/00
                If pck.FechaVenci < pck.FechaEmision Then
                    pck.FechaVenci = pck.FechaEmision
                End If
                
                mcolPCKardex.Add pck
                
            End If
        Next i
    End If
End Sub

Private Sub ImportaTSKardexRet(ByVal Fuente As GNComprobante)
    Dim i As Long, ix As Long, tskr As TSKardexRet
    
    If mcolTSKardexRet Is Nothing Then Set mcolTSKardexRet = New Collection
    BorrarTSKardexRet
    
    'Importa de TSKardexRet a TSKardexRet
    For i = 1 To Fuente.CountTSKardexRet
        Set tskr = Fuente.TSKardexRet(i).Clone
        Set tskr.GNComprobante = Me
        mcolTSKardexRet.Add tskr
    Next i
End Sub


Public Sub VerificaDatos()
    Dim i As Long, BandCredito As Boolean, tsf As TSFormaCobroPago
    
    '*** MAKOTO 07/dic/00 Agregado
    If Not Me.GNTrans.PermitirFechaFutura Then
        'Fecha de transacción no puede ser mayor a la fecha actual
        If Me.FechaTrans >= Date + 1 Then
            Err.Raise ERR_INVALIDO, "GNComprobante.Grabar", _
                "La fecha no puede ser mayor a la fecha actual en ésta transacción." & vbCr & _
                 "Si prefiere que no salga éste mensaje, cambie la configuración " & _
                 "de la transacción '" & Me.CodTrans & "', por favor."
        End If
    End If
    
     If Me.FechaTrans < Me.Empresa.GNOpcion.FechaLimiteDesde And Me.SoloVer = False Then
            Err.Raise ERR_INVALIDO, "FechaLimiteDesde", _
                "La fecha de la transaccion esta  fuera del intervalo de fechas establecido"
        End If
    'jeaa 12/04/2006
     If Me.FechaTrans < Me.Empresa.GNOpcion.FechaInicio And Me.SoloVer = False Then
            Err.Raise ERR_INVALIDO, "FechaInicio ", _
                "La fecha de la transaccion esta  fuera del intervalo de fechas establecido"
        End If
    
    
    'La cotización nunca puede ser 0 o negativo
    For i = 2 To MONEDA_MAX
        If mProps.Cotizacion(i) <= 0 Then
            Err.Raise ERR_COTIZACION, "GNComprobante.Grabar", MSGERR_COTIZACION
        End If
    Next i
    
    'Si la transacción requiere ser asignada a un centro de costo
    If GNTrans.RequiereCentroCosto Then
        If mProps.idCentro = 0 And Len(mProps.idCentros) = 0 Then
            Err.Raise ERR_INVALIDO, "GNComprobante.Grabar", _
                "Esta transacción tiene que ser asignada a un centro de costo." & vbCr & _
                "Por favor, escoja un centro de costo e intente de nuevo."
        End If
    End If
       
       
''    If GNTrans.TSVisializaTransFuente Then
''        If mProps.IdTransFuente = 0 Then
''            Err.Raise ERR_INVALIDO, "GNComprobante.Grabar", _
''                "Esta transacción tiene que ser asignada a una Transacción Fuente." & vbCr & _
''                "Por favor, escoja un transacción e intente de nuevo."
''        End If
''    End If
       
       
       
       If GNTrans.CentroCostoDetalleVisible Then
        If mProps.idCentroHijo = 0 Then
            Err.Raise ERR_INVALIDO, "GNComprobante.Grabar", _
                "Esta transacción tiene que ser asignada a una " & Me.Empresa.GNOpcion.ObtenerValor("EtiquetaCCHijo") & vbCr & _
                "Por favor, escoja una  e intente de nuevo."
        End If
    End If
    
    'AUC para controlar que el cliente este en el centro de costo seleccionado
    If GNTrans.ControlaCCxCli And Len(mProps.idCentros) = 0 Then
            Dim cc As Long
            Dim pc As PCProvCli
            cc = Me.Empresa.RecuperarIDCC(Me.CodCentro)
            Set pc = Me.Empresa.RecuperaPCProvCli(Me.CodClienteRef)
               If cc <> pc.IdProvcli Then
                    Set pc = Nothing
                    Err.Raise ERR_INVALIDO, "GNComprobante.Grabar", _
                    "Este centro de costo NO corresponde al cliente asigndo ." & vbCr & _
                    "Por favor, escoja OTRO centro de costo e intente de nuevo."
            End If
        End If
    
    
    'Si la transacción requiere importación de datos
'    If GNTrans.RequiereFuente Then        '*** MAKOTO 08/feb/01 Mod. para no hacer ésta verificación si NO es nuevo
If GNTrans.CodPantalla <> "GENROL" Then
        If GNTrans.RequiereFuente And Me.EsNuevo And Not Me.GNTrans.IVDivideTrans Then 'AUC 01/08/2014 agregado opcion para que se salte esta opcion cuando divide fc
            If mProps.IdTransFuente = 0 Then
                Err.Raise ERR_INVALIDO, "GNComprobante.Grabar", _
                    "Primero debe hacer importación de datos para crear éste tipo de transacción. (" & Me.CodTrans & ")" & vbCr & _
                    "Haga la importación de datos e intente de nuevo."
            End If
        End If
    End If
    
    If GNTrans.IVTipoTrans <> "A" Then
        'Si la transacción tiene límite de número de filas      '*** MAKOTO 15/oct/00 Agregado
        If GNTrans.IVNumFilaMax > 0 Then
            If CountIVKardex > GNTrans.IVNumFilaMax Then
                Err.Raise ERR_INVALIDO, "GNComprobante.Grabar", _
                    "La transacción tiene límite de número de detalle de item " & _
                    "hasta " & GNTrans.IVNumFilaMax & " filas." & vbCr & vbCr & _
                    "Por favor elimine " & CountIVKardex - GNTrans.IVNumFilaMax & " filas e intente de nuevo."
            End If
        End If
    End If
    '*** MAKOTO 07/feb/01 Agregado
    'Verifica si las existencias no se hace negativa
    'VerificarExistencia
    If Me.GNTrans.Modulo = "IV" Then
        If Me.GNTrans.IVTipoTrans = "A" Then
            VerificarHayReservados (Me.FechaAlquiler)    ' 'Verifica si hay reservados para ese dia
         ElseIf Me.GNTrans.IVTipoTrans = "E" And (Me.GNTrans.CodPantalla = "IVRES_ALQ" Or Me.GNTrans.CodPantalla = "IVBQD2B" Or Me.GNTrans.CodPantalla = "IVBQD2BE") Then
            VerificaComprometido
        Else
            If Me.Empresa.GNOpcion.IVKTipoDatoDouble Then
                If Me.GNTrans.IVTransfAuto And Me.EsNuevo And Not Me.BandImportoTrans Then
                    VerificarExistenciaCP
                Else
                    VerificarExistenciaDou
                End If
            Else
                VerificarExistencia
            End If
        End If
    End If
    
    
    'Verifica todos los TSKardex
    For i = 1 To CountTSKardex
        TSKardex(i).VerificaDatos
    Next i
    
    'Verifica todos los TSKardex            '*** MAKOTO 07/feb/01 Agregado
    For i = 1 To CountTSKardexRet
        TSKardexRet(i).VerificaDatos
    Next i
    
    'Verifica todos los IVKardex
    For i = 1 To CountIVKardex
        IVKardex(i).VerificaDatos
    Next i
    
    'Verifica todos los IVKardexRecargo
    For i = 1 To CountIVKardexRecargo
        IVKardexRecargo(i).VerificaDatos
    Next i
    
    'Verifica todos los PCKardex
    For i = 1 To CountPCKardex
    'PCKardex(i).VerificaDatos
      If Not PCKardex(i).BandNoAfectaPckardex Then
        PCKardex(i).VerificaDatos
      End If
        
    Next i
    
    'Verifica todos los PCKardexCHP
    For i = 1 To CountPCKardexCHP
        PCKardexCHP(i).VerificaDatos
    Next i
    
    'Verifica todos los Asientos
    For i = 1 To CountCTLibroDetalle
        CTLibroDetalle(i).VerificaDatos
    Next i
    
    If Me.GNTrans.IVVisiblePresupuesto Then
        For i = 1 To CountPRLibroDetalle
            PRLibroDetalle(i).VerificaDatos
        Next i
    End If

    
        'Verifica todos los afKardex
    For i = 1 To CountAFKardex
        AFKardex(i).VerificaDatos
    Next i
    
    'Verifica todos los afKardexRecargo
    For i = 1 To CountAFKardexRecargo
        AFKardexRecargo(i).VerificaDatos
    Next i
   
    'Verifica si el documento ingresado no se repite (en Anexos)
    If Not Me.GNTrans.IVComprobanteElectronico Then
        If Me.GNTrans.IVVisibleAnexos Then
            VerificaNumDocRepetido_Anexos
        End If
    End If
    
    If Me.GNTrans.TSDatosRetencion Then
        VerificaNumDocRetencionRepetido_Anexos
    End If
    
    
    
    'jeaa 06/07/2005
    If GNTrans.IVValNumDoc And Me.EsNuevo Then
        VerificaNumDocRepetido
    End If

    If Me.GNTrans.CodPantalla = "IVIMBQD" Then
    'Verifica todos los CcKardex
        For i = 1 To CountCcKardex
            CcKardex(i).VerificaDatos
        Next i
    End If
    For i = 1 To CountIVKNumSerie
        IVKNumSerie(i).VerificaDatos
    Next i
'    If Not gobjMain.UsuarioActual.BandPresupuesto Then
'        If Me.GNTrans.CodPantalla = "GENROL" Then 'AUC MARZO 2012
'            VerificaCuadradoRol
'        End If
'    End If
    
    
    
    If Me.Empresa.GNOpcion.ObtenerValor("FactGrupoItem") = "1" Then 'AUC MARZO 2012
        If InStr(1, UCase(Me.Empresa.GNOpcion.NombreEmpresa), "MEGA") = 0 Then
            BandCredito = True
            For i = 1 To Me.CountPCKardex
                Set tsf = Me.Empresa.RecuperaTSFormaCobroPago(Me.PCKardex(i).CodForma)
                If tsf.ConsiderarComoEfectivo Then
                    BandCredito = False
                    Exit For
                End If
            Next i
        
            If Me.GNTrans.IVFiltroGrupoAlFact And BandCredito Then
                VerificaMismoIvGrupo
            End If
        Else
            If Me.GNTrans.IVFiltroGrupoAlFact Then
                VerificaMismoIvGrupo
            End If
        End If
    End If
    If Me.GNTrans.CodPantalla = "GENROL" Then
        If Me.CountRolDetalle = 0 Then
            Err.Raise ERR_INVALIDO, "GNComprobante.Grabar", _
                    "El rol de pagos no ha sido generado todavia " & vbCr & _
                    "Ingrese valores y calcule para grabar......."
        End If
    End If
End Sub

Public Function VerificarExistencia_CantOrig(ByVal Id As Long) As Currency
    Dim sql As String, rs As Recordset
    
    'Si es nuevo no hace nada
    If Id = 0 Then Exit Function
    
    sql = "SELECT Cantidad FROM IVKardex WHERE Id = " & Id
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    If Not rs.EOF Then
        VerificarExistencia_CantOrig = rs.Fields("Cantidad")
    End If
    rs.Close
    Set rs = Nothing
End Function

Private Sub VerificarExistencia()
    Dim item As IVInventario, i As Long, ivk As IVKardex, j As Long, ivk2 As IVKardex
    Dim exist As Currency, sumaCant As Currency
    Dim cant_ori As Currency
    Dim idpadre As Long
    Dim BandRestriccion As Boolean 'Para saber si utiliza la restriccion
    'Si no está configurado para verificar la existencia ó no es egreso, sale
'    If Not Me.GNTrans.IVVerificaExist Or Me.GNTrans.IVTipoTrans <> "E" Then
'        Exit Sub
'    End If
    If Not Me.GNTrans.IVVerificaExist Then
        Exit Sub
    End If
    'CAMBIADO SI NO NO VERIFICA LA TRANSFERENCIA
     If (Me.GNTrans.IVTipoTrans = "E" Or Me.GNTrans.IVTipoTrans = "T") Then
        'NO HACE NADA
    Else
        Exit Sub
    End If
    For i = 1 To CountIVKardex
        Set ivk = IVKardex(i)
        Set item = Empresa.RecuperaIVInventario(ivk.IdInventario)
        If item.BandServicio Then
            'Set item = nothing
            Exit Sub
        End If
        If Me.GNTrans.ItemsImportantes Then 'pregunta si se van a controlar los items importantes
            If item.Tipo = Preparacion Then idpadre = ivk.IdInventario
                BandRestriccion = siEsREstriccion(ivk.IdInventario, idpadre)
               If Not (item Is Nothing) And item.Tipo <> Preparacion And BandRestriccion Then  'AUC  12/04/06que no verifique el padre verificar la esta bien este if despues
                    If Not item.BandServicio Then
                        exist = item.Existencia(ivk.CodBodega)
                        sumaCant = 0
                        
                        'Obtiene la cantidad original en caso de modificación
                        cant_ori = VerificarExistencia_CantOrig(ivk.Id)
                        
                        'Obtiene la suma de cantidad del mismo ítem en la misma transacción
                        For j = 1 To CountIVKardex
                            Set ivk2 = IVKardex(j)
                            
                            'En otra fila,
                            If j <> i Then
                                'Si hay un item con el mismo item y la misma bodega
                                If ivk2.IdInventario = ivk.IdInventario And _
                                    ivk2.IdBodega = ivk.IdBodega Then
                                    sumaCant = sumaCant + ivk2.Cantidad
                                    
                                    'Resta la cantidad original en caso de modificación
                                    sumaCant = sumaCant - VerificarExistencia_CantOrig(ivk2.Id)
                                End If
                            End If
                        Next j
                        Set ivk2 = Nothing
                        
                        'Si se hace negativa al sumar
                        If exist + ivk.Cantidad + sumaCant - cant_ori < 0 Then
                            Err.Raise ERR_INVALIDO, "GNComprobante.VerificarDatos", _
                                "Al grabar la transacción la existencia se hace negativa, por lo que no puede grabarla." & vbCr & vbCr & _
                                "Item: " & item.CodInventario & " " & item.Descripcion & vbCr & _
                                "Existencia: " & exist & vbCr & _
                                "Cantidad: " & ivk.Cantidad & vbCr & _
                                "Cant. en otra fila: " & sumaCant & vbCr & _
                                "Existencia nueva: " & exist + ivk.Cantidad + sumaCant - cant_ori
                        End If
                    End If
                End If
        Else 'CASO QUE NO ESTE SELECCIONADO
            If Not (item Is Nothing) And item.Tipo <> Preparacion Then 'AUC  12/04/06que no verifique el padre verificar la esta bien este if despues
                If Not item.BandServicio Then
                    exist = item.Existencia(ivk.CodBodega)
                    sumaCant = 0
                    'Obtiene la cantidad original en caso de modificación
                    cant_ori = VerificarExistencia_CantOrig(ivk.Id)
                    'Obtiene la suma de cantidad del mismo ítem en la misma transacción
                    For j = 1 To CountIVKardex
                        Set ivk2 = IVKardex(j)
                        'En otra fila,
                        If j <> i Then
                            'Si hay un item con el mismo item y la misma bodega
                            If ivk2.IdInventario = ivk.IdInventario And _
                                ivk2.IdBodega = ivk.IdBodega Then
                                sumaCant = sumaCant + ivk2.Cantidad
                                'Resta la cantidad original en caso de modificación
                                sumaCant = sumaCant - VerificarExistencia_CantOrig(ivk2.Id)
                            End If
                        End If
                    Next j
                    Set ivk2 = Nothing
                    'Si se hace negativa al sumar
                    If exist + ivk.Cantidad + sumaCant - cant_ori < 0 Then
                        If Me.GNTrans.AfectaCantidad Then
                        Err.Raise ERR_INVALIDO, "GNComprobante.VerificarDatos", _
                            "Al grabar la transacción la existencia se hace negativa, por lo que no puede grabarla." & vbCr & vbCr & _
                            "Item: " & item.CodInventario & " " & item.Descripcion & vbCr & _
                            "Existencia: " & exist & vbCr & _
                            "Cantidad: " & ivk.Cantidad & vbCr & _
                            "Cant. en otra fila: " & sumaCant & vbCr & _
                            "Existencia nueva: " & exist + ivk.Cantidad + sumaCant - cant_ori
                        Else
                            MsgBox "No existe la cantidad solicitada,  " & vbCr & vbCr & _
                            "Item: " & item.CodInventario & " " & item.Descripcion & vbCr & _
                            "Existencia: " & exist & vbCr & _
                            "Cantidad: " & ivk.Cantidad & vbCr & _
                            "Cant. en otra fila: " & sumaCant & vbCr & _
                            "Existencia nueva: " & exist + ivk.Cantidad + sumaCant - cant_ori
                        
                        End If
                    End If
                End If
            End If
        End If
                
    Next i
    
    Set ivk = Nothing
    Set item = Nothing
End Sub


Public Property Get transid() As Long
    transid = mProps.transid
End Property

Public Property Let CodTrans(ByVal value As String)
    Dim i As Integer, codm As String
    
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.CodTrans", MSGERR_SOLOVER
    
    If Len(value) > 5 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.CodTrans", MSGERR_INVALIDO
    End If
    
    mProps.CodTrans = value
    mbooModificado = True
    
    'Codigo de responsable
    On Error Resume Next
    CodResponsable = gobjMain.UsuarioActual.codUsuario  'Primero intenta asignar codigo del usuario actual
    If Err.Number = ERR_NOHAYCODIGO Then                'Si no se encuentra en la tabla de Responsables
        CodResponsable = GNTrans.CodResponsablePre      '  asigna Cod.Responsable predeterminado de la transaccion.
    End If
    Err.Clear
    On Error GoTo 0
    
    'Descripcion predeterminada
    If Len(GNTrans.Descripcion) > 0 Then Descripcion = GNTrans.Descripcion & " "
    'Moneda predeterminada
    mProps.CodMoneda = GNTrans.MonedaPre
    
    'Si es transacción de inventario
    If GNTrans.Modulo = "IV" Then
        CodClienteRef = GNTrans.CodClientePre
        CodProveedorRef = GNTrans.CodProveedorPre
    End If
    
    'Asigna IVKardexRecargo
    RecuperaRecargos
    
    'Asigna cotización más actual hasta la fecha
    For i = 2 To 4
        codm = mProps.objEmpresa.GNOpcion.CodMoneda(i)
        If Len(codm) > 0 Then
            Me.Cotizacion(codm) = mProps.objEmpresa.ObtieneCotizacion(mProps.FechaTrans, codm)
        End If
    Next i
End Property

Public Property Get CodTrans() As String
    CodTrans = Trim$(mProps.CodTrans)
End Property

'''''Private Sub RecuperaRecargos()
'''''    Dim i As Long, j As Long, obj As IVKardexRecargo, mod_antes As Boolean
'''''    Dim gntr As GNTransRecargo
'''''
'''''    mod_antes = mbooModificado      'Guarda el estado de Modificado
'''''
'''''    'Carga el modelo de recargos cogiendo de GNTrans
'''''    For i = 1 To GNTrans.CountRecargo
'''''        Set gntr = GNTrans.Recargos(i)
'''''        j = AddIVKardexRecargo
'''''        Set obj = IVKardexRecargo(j)
'''''        obj.CodRecargo = gntr.CodRecargo
'''''        obj.Porcentaje = gntr.PorcentajePre
'''''        obj.Valor = gntr.ValorPre
'''''        obj.BandModificable = gntr.BandModificable
'''''        obj.BandOrigen = gntr.BandOrigen
'''''        obj.BandProrrateado = gntr.BandProrrateado
'''''        obj.AfectaIvaItem = gntr.AfectaIvaItem      '*** MAKOTO 13/dic/00
'''''    Next i
'''''
'''''    Set gntr = Nothing
'''''    Set obj = Nothing
'''''    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
'''''End Sub
Private Sub RecuperaRecargos()
    Dim i As Long, j As Long, obj As IVKardexRecargo, mod_antes As Boolean
    Dim objAF As AFKardexRecargo
    Dim gntr As GNTransRecargo
    mod_antes = mbooModificado      'Guarda el estado de Modificado
    'Carga el modelo de recargos cogiendo de GNTrans
    If GNTrans.Modulo <> "AF" Then
       For i = 1 To GNTrans.CountRecargo
            Set gntr = GNTrans.Recargos(i)
            j = AddIVKardexRecargo
            Set obj = IVKardexRecargo(j)
            obj.CodRecargo = gntr.CodRecargo
            obj.Porcentaje = gntr.PorcentajePre
            obj.Valor = gntr.ValorPre
            obj.BandModificable = gntr.BandModificable
            obj.BandOrigen = gntr.BandOrigen
            obj.BandProrrateado = gntr.BandProrrateado
            obj.AfectaIvaItem = gntr.AfectaIvaItem      '*** MAKOTO 13/dic/00
        Next i
    Else
        For i = 1 To GNTrans.CountRecargo
            Set gntr = GNTrans.Recargos(i)
            j = AddAFKardexRecargo
            Set objAF = AFKardexRecargo(j)
            objAF.CodRecargo = gntr.CodRecargo
            objAF.Porcentaje = gntr.PorcentajePre
            objAF.Valor = gntr.ValorPre
            objAF.BandModificable = gntr.BandModificable
            objAF.BandOrigen = gntr.BandOrigen
            objAF.BandProrrateado = gntr.BandProrrateado
            objAF.AfectaIvaItem = gntr.AfectaIvaItem      '*** MAKOTO 13/dic/00
        Next i
    End If
    Set gntr = Nothing
    Set obj = Nothing
    Set objAF = Nothing
   mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub

Public Property Let NumTrans(ByVal value As Long)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.NumTrans", MSGERR_SOLOVER
    
    'Solo cuando cambia el valor
    If mProps.NumTrans <> value Then
        mProps.NumTrans = value
        mbooModificado = True
    End If
End Property

Public Property Get NumTrans() As Long
    NumTrans = mProps.NumTrans
End Property

Public Property Let CodAsiento(value As Long)
    mProps.CodAsiento = value
    mbooModificado = True
End Property

Public Property Get CodAsiento() As Long
    CodAsiento = mProps.CodAsiento
End Property

Public Property Let FechaTrans(value As Date)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.FechaTrans", MSGERR_SOLOVER
    
    'Solo cuando cambia el valor
    If mProps.FechaTrans <> value Then
        mProps.FechaTrans = value
        mbooModificado = True
        RaiseEvent FechaCambiado
    End If
End Property

Public Property Get FechaTrans() As Date
    FechaTrans = mProps.FechaTrans
End Property

Public Property Let HoraTrans(value As Date)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.HoraTrans", MSGERR_SOLOVER
    
    'Solo cuando cambia el valor
    If mProps.HoraTrans <> value Then
        mProps.HoraTrans = value
        mbooModificado = True
'        RaiseEvent FechaCambiado
    End If
End Property

Public Property Get HoraTrans() As Date
    HoraTrans = mProps.HoraTrans
End Property


Public Property Let Descripcion(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.Descripcion", MSGERR_SOLOVER
    
    If Len(value) > 120 Then        '*** MAKOTO 22/jul/00 80 --> 120 Modificado
        Err.Raise ERR_INVALIDO, "GNComprobante.Descripcion", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.Descripcion <> value Then
        mProps.Descripcion = value
        mbooModificado = True
    End If
End Property

Public Property Get Descripcion() As String
    Descripcion = Trim$(mProps.Descripcion)
End Property



'*** MAKOTO 05/feb/01 Agregado
Public Property Let Nombre(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.Nombre", MSGERR_SOLOVER
    
    If Len(value) > 40 Then
        'Err.Raise ERR_INVALIDO, "GNComprobante.Nombre", MSGERR_INVALIDO
        value = Mid$(value, 1, 40)
    End If
    
    'Solo cuando cambia el valor
    If mProps.Nombre <> value Then
        mProps.Nombre = value
        mbooModificado = True
    End If
End Property

'*** MAKOTO 05/feb/01 Agregado
Public Property Get Nombre() As String
    Nombre = Trim$(mProps.Nombre)
End Property

'*** MAKOTO 12/feb/01 Mod.
'Normalmente coge automáticamente de gobjUsuarioActual
'Pero necesita asignar desde UI el el proceso de Importación en SiiTools.exe
'Por lo tanto éste metodo debe llamar únicamente desde SiiTools - Importar.
Public Property Let codUsuario(value As String)
    If Len(value) > 10 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.CodUsuario", MSGERR_INVALIDO
    End If

    mProps.codUsuario = value
    mbooModificado = True
End Property

Public Property Get codUsuario() As String
    codUsuario = Trim$(mProps.codUsuario)
End Property

'***Agregado. 06/ago/2004. Angel
Public Property Let CodUsuarioModifica(value As String)
    If Len(value) > 10 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.CodUsuarioModifica", MSGERR_INVALIDO
    End If

    mProps.CodUsuarioModifica = value
    mbooModificado = True
End Property

'***Agregado. 06/ago/2004. Angel
Public Property Get CodUsuarioModifica() As String
    CodUsuarioModifica = Trim$(mProps.CodUsuarioModifica)
End Property

Public Property Let IdResponsable(value As Long)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, _
            "GNComprobante.IdResponsable", MSGERR_SOLOVER
    
    mProps.IdResponsable = value
    mbooModificado = True
End Property

Public Property Get IdResponsable() As Long
    IdResponsable = mProps.IdResponsable
End Property

Public Property Let CodResponsable(value As String)
    Dim sql As String
    Dim rs As Recordset
    
    'Cuando cambia el valor
    If value <> mProps.CodResponsable Then
        If Len(value) > 0 Then
            'Actualiza IdResponsable también
            sql = "SELECT IdResponsable FROM GNResponsable WHERE CodResponsable='" & value & "'"
            Set rs = mProps.objEmpresa.OpenRecordset(sql)
            If rs.EOF Then
                Err.Raise ERR_NOHAYCODIGO, "GNComprobante.CodResponsable", MSGERR_NOHAYCODIGO
                Exit Property
            Else
                IdResponsable = rs!IdResponsable
            End If
            rs.Close
            Set rs = Nothing
        Else
            IdResponsable = 0
        End If
        
        mProps.CodResponsable = value
        mbooModificado = True
    End If
End Property

Public Property Get CodResponsable() As String
    CodResponsable = Trim$(mProps.CodResponsable)
End Property



Public Property Let NumDocRef(value As String)
    'Cuando SoloVer está establecido a True, genera error
    Dim max As Integer
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.NumDocRef", MSGERR_SOLOVER
    'jeaa 06/05/2005
    If GNTrans.IVValNumDoc Then
        If Len(value) = 17 Then
            If InStr(1, value, "-") Then
                value = Mid$(value, 1, 3) & Mid$(value, 5, 3) & Mid$(value, 9, 9)
            End If
        End If
        If Len(value) > 15 Then Err.Raise ERR_INVALIDO, "GNComprobante.NumDocRef", MSGERR_INVALIDO
    Else
        If Len(value) > 20 Then
            Err.Raise ERR_INVALIDO, "GNComprobante.NumDocRef", MSGERR_INVALIDO
        End If
    End If
    'Solo cuando cambia el valor
    If mProps.NumDocRef <> value Then
        mProps.NumDocRef = value
        mbooModificado = True
    End If
End Property

Public Property Get NumDocRef() As String
    NumDocRef = Trim$(mProps.NumDocRef)
End Property

'***ALEX 13/Sept/2002
'PROPIEDADES

Public Property Let FechaAnexos(value As Date)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.FechaAnexos", MSGERR_SOLOVER
    
    'Solo cuando cambia el valor
    If mProps.FechaAnexos <> value Then
        mProps.FechaAnexos = value
        mbooModificado = True
    End If
End Property

Public Property Get FechaAnexos() As Date
    FechaAnexos = mProps.FechaAnexos
End Property


Public Property Let CodCredTrib(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.CodCredTrib", MSGERR_SOLOVER
    
    If Len(value) > 2 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.CodCredTrib", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.CodCredTrib <> value Then
        mProps.CodCredTrib = value
        mbooModificado = True
    End If
End Property

Public Property Get CodCredTrib() As String
    CodCredTrib = Trim$(mProps.CodCredTrib)
End Property

Public Property Let CodTipoComp(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.CodTipoComp", MSGERR_SOLOVER
    
    If Len(value) > 2 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.CodTipoComp", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.CodTipoComp <> value Then
        mProps.CodTipoComp = value
        mbooModificado = True
    End If
End Property

Public Property Get CodTipoComp() As String
    CodTipoComp = Trim$(mProps.CodTipoComp)
End Property

Public Property Let NumAutSRI(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.NumAutSRI", MSGERR_SOLOVER
    If value = "" Then value = "0"
    If Not IsNumeric(value) Then Err.Raise ERR_INVALIDO, "GNComprobante.NumAutSRI", MSGERR_INVALIDO
    
    If Len(value) > 50 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.NumAutSRI", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.NumAutSRI <> value Then
        mProps.NumAutSRI = IIf(value = "0", "", value)
        mbooModificado = True
    End If
End Property

Public Property Get NumAutSRI() As String
    NumAutSRI = Trim$(mProps.NumAutSRI)
End Property

Public Property Let NumSerie(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.NumSerie", MSGERR_SOLOVER
    If Not IsNumeric(value) Then Err.Raise ERR_INVALIDO, "GNComprobante.NumSerie", MSGERR_INVALIDO
    
    If Len(value) > 6 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.NumSerie", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.NumSerie <> value Then
        mProps.NumSerie = value
        mbooModificado = True
    End If
End Property

Public Property Get NumSerie() As String
    NumSerie = Trim$(mProps.NumSerie)
End Property

Public Property Let NumSecuencial(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.NumSecuencial", MSGERR_SOLOVER
    If Not IsNumeric(value) Then Err.Raise ERR_INVALIDO, "GNComprobante.NumSecuencial", MSGERR_INVALIDO
    
    If Len(value) > 15 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.NumSecuencial", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.NumSecuencial <> value Then
        mProps.NumSecuencial = value
        mbooModificado = True
    End If
End Property

Public Property Get NumSecuencial() As String
    NumSecuencial = Trim$(mProps.NumSecuencial)
End Property

Public Property Let TransIDAfectada(ByVal value As Long)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.TransIDAfectada", MSGERR_SOLOVER
    'Solo cuando cambia el valor
    If mProps.TransIDAfectada <> value Then
        mProps.TransIDAfectada = value
        mbooModificado = True
    End If
End Property

Public Property Get TransIDAfectada() As Long
    TransIDAfectada = mProps.TransIDAfectada
End Property

Public Property Let BandDevolucion(value As Boolean)
        If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BandDevolucion", MSGERR_SOLOVER
        'Solo cuando cambia el valor
    If mProps.BandDevolucion <> value Then
        mProps.BandDevolucion = value
        mbooModificado = True
    End If
End Property

Public Property Get BandDevolucion() As Boolean
    BandDevolucion = mProps.BandDevolucion
End Property


Public Property Let BandCompraSinRetencion(value As Boolean)
        If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BandCompraSinRetencion", MSGERR_SOLOVER
        'Solo cuando cambia el valor
    If mProps.BandCompraSinRetencion <> value Then
        mProps.BandCompraSinRetencion = value
        mbooModificado = True
    End If
End Property

Public Property Get BandCompraSinRetencion() As Boolean
    BandCompraSinRetencion = mProps.BandCompraSinRetencion
End Property

'*** FUNCIONES
Public Function DebeTotal() As Currency
    Dim TOTAL As Currency, i As Long
    For i = 1 To CountCTLibroDetalle
        TOTAL = TOTAL + CTLibroDetalle(i).Debe
    Next i
    DebeTotal = TOTAL
End Function

Public Function HaberTotal() As Currency
    Dim TOTAL As Currency, i As Long
    
    For i = 1 To CountCTLibroDetalle
        TOTAL = TOTAL + CTLibroDetalle(i).Haber
    Next i
    HaberTotal = TOTAL
End Function

Public Function PRDebeTotal() As Currency
    Dim TOTAL As Currency, i As Long
    For i = 1 To CountPRLibroDetalle
        TOTAL = TOTAL + PRLibroDetalle(i).Debe
    Next i
    PRDebeTotal = TOTAL
End Function

Public Function PRHaberTotal() As Currency
    Dim TOTAL As Currency, i As Long
    For i = 1 To CountPRLibroDetalle
        TOTAL = TOTAL + PRLibroDetalle(i).Haber
    Next i
    PRHaberTotal = TOTAL
End Function



Public Function IVKardexCTotal(bandReal As Boolean) As Currency
    Dim t As Currency, i As Long, v As Currency
    t = 0
    For i = 1 To CountIVKardex
        If bandReal Then
            v = IVKardex(i).CostoRealTotal
        Else
            v = IVKardex(i).CostoTotal
        End If
        
        'Redondea con el formato para Costos      *** MAKOTO 13/feb/01 Mod.
        t = t + MiCCur(Format$(v, Me.FormatoCosto))
'        t = t + v
    Next i
    IVKardexCTotal = t
    'IVKardexCTotal = MiCCur(Format$(t, Me.FormatoCosto))
End Function

Public Function IVKardexPTotal(bandReal As Boolean) As Currency
'    Dim t As Currency, i As Long, v As Currency
'
'    For i = 1 To CountIVKardex
'        If bandReal Then
'            v = IVKardex(i).PrecioRealTotal
'        Else
'            v = IVKardex(i).PrecioTotal
'        End If
'
'        'Redondea con el formato para P.Total          ***MAKOTO 13/feb/01 Mod.
'        t = t + MiCCur(Format$(v, Me.FormatoMoneda)) '***Antes, quitado para pruebas. Angel. 27/08/2003
'        't = t + v '***Agregado. 28/08/2003. Angel. No funciona bien 01/jun/04
'    Next i
'    IVKardexPTotal = t '***Antes, quitado para pruebas. Angel. 27/08/2003
    '***Agregado. 28/08/2003. Angel. No funciona bien 01/jun/04
    'IVKardexPTotal = MiCCur(Format$(t, Me.FormatoMoneda))
''''***SOLUCION PARA PROBLEMAS DE DESCUADRE ENTRE F6 Y F7. ***ANGEL. 29/JULIO/2004
    Dim t As Currency, i As Long, v As Currency
    t = 0
    For i = 1 To CountIVKardex
        If Me.IVKardex(i).IdInventario <> 0 Then
        If Me.IVKardex(i).Cantidad <> 0 Then 'AUC agregado para que calcule cuando no tenga cant
            If bandReal Then
                v = IVKardex(i).PrecioRealTotal
                t = t + v '***Agregado. 28/08/2003. Angel. No funciona bien 01/jun/04
            Else
                v = IVKardex(i).PrecioTotal
                t = t + MiCCur(Format$(v, Me.FormatoMoneda)) '***Antes, quitado para pruebas. Angel. 27/08/2003
            End If
            End If
        End If
    Next i

    If bandReal Then
        IVKardexPTotal = MiCCur(Format$(t, Me.FormatoMoneda)) '***Antes, quitado para pruebas. Angel. 27/08/2003
    Else
        IVKardexPTotal = t '***Antes, quitado para pruebas. Angel. 27/08/2003
    End If
End Function

Public Function IVKardexTotal(bandReal As Boolean) As Currency
    Dim t As Currency
    'Decide si calcula en base de Precio o Costo
    If GNTrans.IVRecargoEnCosto Then
        t = IVKardexCTotal(bandReal)
    Else
        t = IVKardexPTotal(bandReal)
    End If
    IVKardexTotal = t
End Function


Public Function IVKardexIVAItemTotal() As Currency
    Dim t As Currency, i As Long, ivk As IVKardex
    Dim por As Double, v As Currency, bandCalculado As Boolean
    
    If Me.SoloVer Then
        'si era empresa publica no se ve
        For i = 1 To Me.CountIVKardexRecargo
            If Me.IVKardexRecargo(i).CodRecargo = "IVA" Then
                t = Me.IVKardexRecargo(i).Valor
                i = Me.CountIVKardexRecargo
            End If
        Next i
    Else
        For i = 1 To CountIVKardex
            Set ivk = IVKardex(i)
            If Me.IVKardex(i).Cantidad <> 0 Then 'AUC agregado para que no carge valores =0
                v = ivk.CalcularIvaItem(por, bandCalculado)
                t = t + v               'Suma valor de IVA de item
            End If
        Next i
    End If
    
'    IVKardexIVAItemTotal = t
    IVKardexIVAItemTotal = Abs(t)            '*** MAKOTO 29/ene/01 Mod.
    Set ivk = Nothing
End Function

'*** MAKOTO 13/dic/00
Public Function IVKardexRecAfectaIvaItem() As Currency
    Dim t As Currency, i As Long, ivkr As IVKardexRecargo
    
    For i = 1 To CountIVKardexRecargo
        Set ivkr = IVKardexRecargo(i)
        If ivkr.AfectaIvaItem Then
            t = t + ivkr.Valor
        End If
    Next i
    IVKardexRecAfectaIvaItem = t
    Set ivkr = Nothing
End Function

'*** MAKOTO 13/dic/00 Agregado
Public Function IVKardexDescItemTotal() As Currency
    Dim t As Currency, i As Long, ivk As IVKardex, bandCosto As Boolean
    Dim u As Currency
    
    'Decide si calcula en base a Precio o Costo
    bandCosto = GNTrans.IVRecargoEnCosto
    
    For i = 1 To CountIVKardex
        Set ivk = IVKardex(i)
        If bandCosto Then
            u = ivk.CostoTotal * ivk.Descuento           '*** MAKOTO 29/ene/01 Mod.
            'Redondea al formato de Costos
            u = MiCCur(Format$(u, Me.FormatoCosto))         '*** MAKOTO 29/ene/01 Mod.
        Else
            u = ivk.PrecioTotal * ivk.Descuento          '*** MAKOTO 29/ene/01 Mod.
            'Redondea al formato de P.Total
            u = MiCCur(Format$(u, Me.FormatoMoneda))        '*** MAKOTO 29/ene/01 Mod.
        End If
        
        t = t + u
    Next i
    IVKardexDescItemTotal = Abs(t)      '*** MAKOTO 29/ene/01 Mod. Devuelde en valor absoluto
    Set ivk = Nothing
End Function

Public Function IVRecargoTotal(NoProrrateados As Boolean, Prorrateados As Boolean) As Currency
    Dim t As Currency, gnt As GNTransRecargo, i As Long
    Dim pc As PCProvCli, BandEmpPub As Boolean
     
    BandEmpPub = False
    If Me.GNTrans.IVOmitirIVA Then
        Set pc = Me.Empresa.RecuperaPCProvCli(Me.IdClienteRef)
        If pc Is Nothing Then
            BandEmpPub = False
        Else
            If pc.BandEmpresaPublica Then
                BandEmpPub = True
            End If
        End If
    End If
    If Prorrateados And NoProrrateados Then
        For i = 1 To CountIVKardexRecargo
            t = t + IVKardexRecargo(i).Valor
        Next i
    ElseIf Prorrateados Then
        For i = 1 To CountIVKardexRecargo
            Set gnt = Me.GNTrans.BuscaRecargo(IVKardexRecargo(i).CodRecargo)
            If Me.Empresa.GNOpcion.ObtenerValor("OmitirIVA") = "1" And Me.GNTrans.IVOmitirIVA Then
                If Not (gnt Is Nothing) Then
                    If BandEmpPub Then
                        If gnt.CodRecargo <> Me.Empresa.GNOpcion.ObtenerValor("RecDescParaIVA") Then
                            If gnt.BandProrrateado Then
                                t = t + IVKardexRecargo(i).Valor
                            End If
                            If gnt.BandProrrateado <> IVKardexRecargo(i).BandProrrateado Then '18/3/2004 Diego  aqui actualiza  el valor prorrateado
                                IVKardexRecargo(i).BandProrrateado = gnt.BandProrrateado
                            End If
                        End If
                    Else
                        If gnt.BandProrrateado Then
                            t = t + IVKardexRecargo(i).Valor
                        End If
                        If gnt.BandProrrateado <> IVKardexRecargo(i).BandProrrateado Then '18/3/2004 Diego  aqui actualiza  el valor prorrateado
                            IVKardexRecargo(i).BandProrrateado = gnt.BandProrrateado
                        End If
                    End If
                End If
            Else
                If Not (gnt Is Nothing) Then
                        If gnt.BandProrrateado Then
                            t = t + IVKardexRecargo(i).Valor
                        End If
                        If gnt.BandProrrateado <> IVKardexRecargo(i).BandProrrateado Then '18/3/2004 Diego  aqui actualiza  el valor prorrateado
                            IVKardexRecargo(i).BandProrrateado = gnt.BandProrrateado
                        End If
                End If
            End If
        Next i
    Else
        For i = 1 To CountIVKardexRecargo
            Set gnt = GNTrans.BuscaRecargo(IVKardexRecargo(i).CodRecargo)
            If Me.Empresa.GNOpcion.ObtenerValor("OmitirIVA") = "1" And Me.GNTrans.IVOmitirIVA Then
                If Not (gnt Is Nothing) Then
                    If BandEmpPub Then
                        If gnt.CodRecargo <> Me.Empresa.GNOpcion.ObtenerValor("RecDescParaIVA") Then
                            If Not gnt.BandProrrateado Then
                                t = t + IVKardexRecargo(i).Valor
                            End If
                            If gnt.BandProrrateado <> IVKardexRecargo(i).BandProrrateado Then '18/3/2004 Diego  aqui actualiza  el valor prorrateado
                                IVKardexRecargo(i).BandProrrateado = gnt.BandProrrateado
                            End If
                        End If
                    Else
                        If Not gnt.BandProrrateado Then
                            t = t + IVKardexRecargo(i).Valor
                        End If
                        If gnt.BandProrrateado <> IVKardexRecargo(i).BandProrrateado Then '18/3/2004 Diego  aqui actualiza  el valor prorrateado
                            IVKardexRecargo(i).BandProrrateado = gnt.BandProrrateado
                        End If
                    End If
                End If
            Else
                    Set gnt = Me.GNTrans.BuscaRecargo(IVKardexRecargo(i).CodRecargo)
                    If Not (gnt Is Nothing) Then
                        If Not gnt.BandProrrateado Then
                            t = t + IVKardexRecargo(i).Valor
                        End If
                        If gnt.BandProrrateado <> IVKardexRecargo(i).BandProrrateado Then '18/3/2004 Diego  aqui actualiza  el valor prorrateado
                            IVKardexRecargo(i).BandProrrateado = gnt.BandProrrateado
                        End If
                    End If
            End If
        Next i
    End If
    
''    If bandReal Then
'        IVRecargoTotal = MiCCur(Format$(t, Me.FormatoMoneda)) '***Antes, quitado para pruebas. Angel. 27/08/2003
''    Else
''        IVRecargoTotal = t '***Antes, quitado para pruebas. Angel. 27/08/2003
''    End If
    IVRecargoTotal = t
    Set gnt = Nothing
    Set pc = Nothing
End Function

Public Sub ProrratearIVKardexRecargo()
    Dim i As Long, ivk As IVKardex, p As Currency, por As Double, Rebate As Currency
    Dim ct As Currency, pt As Currency, desc As Currency, descRebate As Currency
    Dim cpr As Currency 'para costo/precio redondeado
    Dim Arancel As Currency, aran As Currency, FODIN As Currency, fod As Currency, CT_AUX As Double, ICE As Currency
    Dim TotalNeto  As Currency, TotalPeso As Currency, CTP_AUX As Double, valFlete As Currency, valSeguro As Currency
    Dim Flete As Currency, SEG As Currency, item As IVInventario, recararan As Currency, SOBTA As Currency, sob As Currency
    TotalPeso = 0
    p = IVRecargoTotal(False, True) 'Total de recargos prorrateados
    If Me.GNTrans.IVTipoTrans = "X" Then
        Flete = IVRecargo("FLETE") 'Arancel 'Total de recargos arancel
        SEG = IVRecargo("SEG") 'Fodin 'Total de recargos arancel
        Arancel = IVRecargo("ARAN") 'Fodin 'Total de recargos arancel
        FODIN = IVRecargo("FODIN") 'Fodin 'Total de recargos arancel
        SOBTA = IVRecargo("SOBTA")
        If SOBTA = 0 Then
            SOBTA = IVRecargo("SALVA")
        End If
        ICE = IVRecargo("ICE") 'Fodin 'Total de recargos arancel
        p = p - Arancel - FODIN - ICE - SOBTA
    End If
    ct = Abs(IVKardexCTotal(False))       'Total de costo total neto
    If Me.GNTrans.CodPantalla = "IVRES_ALQ" Or Me.GNTrans.CodPantalla = "IVBQD2BE" Then
       pt = IVKardexPTotal1(False)
    Else
        pt = Abs(IVKardexPTotal(False))       'Total de precio total neto
    End If
    TotalPeso = 0
'    If Me.GNTrans.IVTipoTrans = "X" Then
'        For i = 1 To CountIVKardex
'                If Len(Me.IVKardex(i).CodInventario) > 0 Then
''                    Set item = Me.Empresa.RecuperaIVInventario(Me.IVKardex(i).CodInventario)
' '                   TotalPeso = TotalPeso + ((Me.IVKardex(i).Cantidad * item.PesoBruto))
'                End If
'        Next i
'    End If
'    Set item = Nothing

    'Si recargos son basados en Precio
    If Not GNTrans.IVRecargoEnCosto Then
        por = 0
        If pt Then por = p / pt
        For i = 1 To CountIVKardex
            Set ivk = IVKardex(i)
            If ivk.CodInventario <> "" Then
                'Costo real es lo mismo que costo
                ivk.CostoRealTotal = ivk.CostoTotal
                'Aplica %Descuento a precio total
                desc = ivk.PrecioTotal * ivk.Descuento          '*** MAKOTO 13/dic/00
                '***pruebas***Angel 01/jun/04
                '*** Esto no estaba pero si esta para compras
                '*** por eso le agrego hay que ver que resultados da
                '*** MAKOTO 29/ene/01 Redondear al formato de presentación
                desc = MiCCur(Format$(desc, Me.FormatoMoneda))
                'Desc = MiCCur(Desc) ''*** oLIVER PARA Q NO HAYA DIFERENCIA ENTRE PRECIOTOTAL Y PRECIOREALTOTAL
                'Prorratea al precio total
                'ivk.PrecioRealTotal = ivk.PrecioTotal * (1# + por) - Desc
                '***pruebas***Angel 01/jun/04
                cpr = MiCCur(Format$(ivk.PrecioTotal, Me.FormatoMoneda))
                'cpr = MiCCur(ivk.PrecioTotal)
                ivk.PrecioRealTotal = cpr * (1# + por) - desc
            End If
        Next i
    'Si recargos son basados en Costo
    Else
        por = 0
        Rebate = 0
        TotalNeto = Abs(Me.IVKardexTotal(False))    'Total NETO sin recargo prorateado
        If ct Then por = p / ct
        For i = 1 To CountIVKardex
            Set ivk = IVKardex(i)
            ivk.PrecioRealTotal = ivk.PrecioTotal   'Precio no prorratea
            '%Descuento aplica a costo total
            desc = ivk.CostoTotal * ivk.Descuento       '*** MAKOTO 13/dic/00
            If Me.Empresa.GNOpcion.BandRebateIVG Then
                descRebate = ivk.CostoTotal * ivk.Rebate
            Else
                descRebate = 0
            End If
            
            '*** MAKOTO 29/ene/01 Redondear al formato de presentación
            desc = MiCCur(Format$(desc, Me.FormatoMoneda))
            descRebate = MiCCur(Format$(descRebate, Me.FormatoMoneda))
            'Prorratea al costo total
            'ivk.CostoRealTotal = ivk.CostoTotal * (1# + por) - Desc
            '***pruebas***Angel 01/jun/04
            cpr = MiCCur(Format$(ivk.CostoTotal, Me.FormatoCosto))
            
                      
            
            ct = ivk.CostoTotal
            
            
            
            If Me.GNTrans.IVTipoTrans = "X" And TotalNeto <> 0 Then
'                Set item = Me.Empresa.RecuperaIVInventario(ivk.CodInventario)
'                CT_AUX = Round(ivk.CostoTotal / TotalNeto, 4)
'                CTP_AUX = Round((ivk.Cantidad * item.PesoBruto) / IIf(TotalPeso <> 0, TotalPeso, 1), 4)
'                If ivk.ICE <> 0 Then MsgBox "pro"
'                aran = Round((ivk.CostoTotal + ((Flete) * CTP_AUX) + ((SEG) * CTP_AUX)) * ivk.Arancel, 4)
'                fod = Round((ivk.CostoTotal + ((Flete + SEG) * CTP_AUX)), 4) * ivk.FODIN

                
                
                aran = ivk.ValArancel
                fod = ivk.ValFodin
                recararan = ivk.ValRecargoArancel
                If ivk.IdICE <> 0 Then
'                    ice = ((cpr * (1# + por) - desc) + aran + fod) * ivk.PorcentajeRecargoIce
'                Else
'                    ice = 0
                    'MsgBox "hola " & i
                End If
                
                ivk.CostoRealTotal = (cpr * (1# + por) - desc) + aran + fod + ivk.ICE + recararan
                valFlete = (((Flete) * CTP_AUX))
                valSeguro = (((SEG) * CTP_AUX))
'                ivk.valFlete = valFlete
'                ivk.valSeguro = valSeguro
'                ivk.ValArancel = aran
'                ivk.ValFodin = fod
'                ivk.ValCIF = ivk.CostoTotal + valFlete + valSeguro '+ aran + fod
                Set item = Nothing
            Else
                ivk.CostoRealTotal = cpr * (1# + por) - desc - descRebate
            End If
       Next i
    End If
    Set ivk = Nothing
End Sub

Public Function TSKardexDebeTotal() As Currency
    Dim t As Currency, i As Long
    
    For i = 1 To CountTSKardex
        t = t + TSKardex(i).Debe
    Next i
    TSKardexDebeTotal = t
End Function

Public Function TSKardexHaberTotal() As Currency
    Dim t As Currency, i As Long
    
    For i = 1 To CountTSKardex
        t = t + TSKardex(i).Haber
    Next i
    TSKardexHaberTotal = t
End Function

'*** MAKOTO 07/feb/01 Agregado
Public Function TSKardexRetDebeTotal() As Currency
    Dim t As Currency, i As Long
    
    For i = 1 To CountTSKardexRet
        t = t + TSKardexRet(i).Debe
    Next i
    TSKardexRetDebeTotal = t
End Function

'*** MAKOTO 07/feb/01 Agregado
Public Function TSKardexRetHaberTotal() As Currency
    Dim t As Currency, i As Long
    
    For i = 1 To CountTSKardexRet
        t = t + TSKardexRet(i).Haber
    Next i
    TSKardexRetHaberTotal = t
End Function



Public Function PCKardexDebeTotal() As Currency
    Dim t As Currency, i As Long
    
    For i = 1 To CountPCKardex
        t = t + PCKardex(i).Debe
    Next i
    PCKardexDebeTotal = t
End Function

Public Function PCKardexHaberTotal() As Currency
    Dim t As Currency, i As Long
    
    For i = 1 To CountPCKardex
        t = t + PCKardex(i).Haber
    Next i
    PCKardexHaberTotal = t
End Function

'***Diego 09/2003
''''Public Function CalculaCobroContado(CodForma As String) As Currency
''''    Dim t As Currency, i As Long
''''    For i = 1 To CountPCKardex
''''        If CodForma = PCKardex(i).CodForma Then
''''            t = t + PCKardex(i).Debe
''''        End If
''''    Next i
''''    CalculaCobroContado = t
''''End Function
''''
Public Function CalculaCobroContado(CodForma As String) As Currency
    Dim t As Currency, i As Long
     If Me.GNTrans.IVTipoTrans = "A" Then
        For i = 1 To CountPCKardex
           t = t + PCKardex(i).Haber
        Next i
    Else
      For i = 1 To CountPCKardex
            If CodForma = PCKardex(i).CodForma Then
                t = t + PCKardex(i).Debe
            End If
        Next i
    End If
   CalculaCobroContado = t
End Function



Public Property Let Estado(ByVal value As Byte)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.Estado", MSGERR_SOLOVER
    
    'Cuando intenta cambiar el estado
    If value <> mProps.Estado Then
        Dim pt As PermisoTrans
        
        'Recupera el permiso de la transacción
        Set pt = gobjMain.GrupoActual.PermisoActual.Trans(mProps.CodTrans)
        If Not (pt Is Nothing) Then
            Select Case value
            Case ESTADO_APROBADO
                If Not pt.Aprobar Then Err.Raise ERR_NODERECHO, "GNComprobante.Estado", MSGERR_NODERECHO
                
                'Verifica si está cuadrado el asiento
                If DebeTotal <> HaberTotal Then
                    Err.Raise ERR_INVALIDO, "GNComprobante.BandAprobado", "No puede aprobar mientras el asiento está descuadrado."
                End If
                
            Case ESTADO_NOAPROBADO
                If Not pt.Desaprobar Then Err.Raise ERR_NODERECHO, "GNComprobante.Estado", MSGERR_NODERECHO
            Case ESTADO_DESPACHADO
                If Not pt.Despachar Then Err.Raise ERR_NODERECHO, "GNComprobante.Estado", MSGERR_NODERECHO
            Case ESTADO_ANULADO
                If Not pt.Anular Then Err.Raise ERR_NODERECHO, "GNComprobante.Estado", MSGERR_NODERECHO
            End Select
        Else
            Err.Raise ERR_NODERECHO, "GNComprobante.Estado", MSGERR_NODERECHO
        End If
    
        mProps.Estado = value
        mbooModificado = True
    End If
End Property

Public Property Get Estado() As Byte
    Estado = mProps.Estado
End Property

'*** PosID coge automáticamente del objeto gobjMain ***
'Public Property Let PosID(value As String)
'    If  Len(value) > 20 Then
'        Err.Raise ERR_INVALIDO, "GNComprobante.PosID", MSGERR_INVALIDO
'    End If
'
'    mProps.PosID = value
'    mbooModificado = True
'End Property
'
Public Property Get PosID() As String
    PosID = Trim$(mProps.PosID)
End Property

Public Property Let NumTransCierrePOS(ByVal value As Long)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.NumTransCierrePOS", MSGERR_SOLOVER
    
    'Solo cuando cambia el valor
    If mProps.NumTransCierrePOS <> value Then
        mProps.NumTransCierrePOS = value
        mbooModificado = True
    End If
End Property

Public Property Get NumTransCierrePOS() As Long
    NumTransCierrePOS = mProps.NumTransCierrePOS
End Property

Public Property Let idCentro(ByVal value As Long)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.IdCentro", MSGERR_SOLOVER
    
    mProps.idCentro = value
    mbooModificado = True
End Property

Public Property Get idCentro() As Long
    idCentro = mProps.idCentro
End Property

Public Property Let CodCentro(ByVal value As String)
    Dim sql As String
    Dim rs As Recordset
    
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.IdCentro", MSGERR_SOLOVER
    
    'Cuando cambia el valor
    If value <> mProps.CodCentro Then
        If Len(value) > 0 Then
            'Actualiza IdCentro también
            sql = "SELECT IdCentro FROM GNCentroCosto WHERE CodCentro='" & value & "'"
            Set rs = mProps.objEmpresa.OpenRecordset(sql)
            If rs.EOF Then
                Err.Raise ERR_NOHAYCODIGO, "GNComprobante.CodCentro", MSGERR_NOHAYCODIGO
                Exit Property
            Else
                idCentro = rs!idCentro
            End If
            rs.Close
            Set rs = Nothing
        Else
            idCentro = 0
        End If
        
        RaiseEvent CCCambiado
        mProps.CodCentro = value
        SetModificado
    End If
End Property

Public Property Get CodCentro() As String
    CodCentro = Trim$(mProps.CodCentro)
End Property

Public Property Let IdTransFuente(ByVal value As Long)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.IdTransFuente", MSGERR_SOLOVER
    
    mProps.IdTransFuente = value
    mbooModificado = True
End Property

Public Property Get IdTransFuente() As Long
    IdTransFuente = mProps.IdTransFuente
End Property



Public Property Let Cotizacion(ByVal CodMoneda As String, ByVal value As Double)
    Dim i As Integer

    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.Cotizacion", MSGERR_SOLOVER
    
    'No puede ser negativo ni cero.
    If value <= 0 Then
        Err.Raise ERR_COTIZACION, "GNComprobante.Cotización", MSGERR_COTIZACION
    End If
    
    'Si no especifica código de moneda, toma el de la transacción
    If Len(CodMoneda) = 0 Then CodMoneda = mProps.CodMoneda
    
    'Busca el código de moneda
    i = mProps.objEmpresa.GNOpcion.IndiceMoneda(CodMoneda)
    
    'Catización de Moneda predeterminada no puede cambiar
    If i > 1 Then
        'Solo cuando cambia el valor
        If mProps.Cotizacion(i) <> value Then
            mProps.Cotizacion(i) = value
            mbooModificado = True
            RaiseEvent CotizacionCambiado
        End If
    End If
End Property

Public Property Get Cotizacion(ByVal CodMoneda As String) As Double
    Dim i As Integer
        
    'Si no especifica código de moneda, toma el de la transacción
    If Len(CodMoneda) = 0 Then CodMoneda = mProps.CodMoneda
    
    'Si envia número de indice de moneda
    If IsNumeric(CodMoneda) Then            '*** MAKOTO 13/ene/01 Mod.
        i = val(CodMoneda)                  '*** Para permitir enviar con índice directamente
    Else
        'Busca el código de moneda
        i = mProps.objEmpresa.GNOpcion.IndiceMoneda(CodMoneda)
    End If
    
    'Si es diferente de Moneda predeterminada
    If i > 1 Then
        Cotizacion = mProps.Cotizacion(i)
    Else
        'Si es moneda predeterminada siempre es devuelve 1
        Cotizacion = 1
    End If
End Property

Public Property Let CodMoneda(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.CodMoneda", MSGERR_SOLOVER
    
    If Len(value) > 5 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.CodMoneda", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.CodMoneda <> value Then
        mProps.CodMoneda = value
        mbooModificado = True
        RaiseEvent MonedaCambiado
    End If
End Property

Public Property Get CodMoneda() As String
    CodMoneda = Trim$(mProps.CodMoneda)
End Property

Public Property Get FormatoMoneda() As String
    FormatoMoneda = mProps.objEmpresa.GNOpcion.FormatoMoneda(mProps.CodMoneda)
End Property

'*** MAKOTO 31/ene/01 Agregado. para simplificar código de UI
Public Property Get FormatoCosto() As String
    FormatoCosto = mProps.objEmpresa.GNOpcion.ObtenerValor( _
            "FormatoCosto" & mProps.objEmpresa.GNOpcion.IndiceMoneda(mProps.CodMoneda))
End Property

'*** MAKOTO 13/feb/01 Agregado. para simplificar código de UI
Public Property Get FormatoPU() As String
    FormatoPU = mProps.objEmpresa.GNOpcion.ObtenerValor( _
            "FormatoPU" & mProps.objEmpresa.GNOpcion.IndiceMoneda(mProps.CodMoneda))
End Property

'*** jeaa 20/05/05 Agregado. para simplificar código de UI
Public Property Get CotizacionPred() As Long
    CotizacionPred = mProps.objEmpresa.GNOpcion.ObtenerValor( _
            "CotizacionPred" & mProps.objEmpresa.GNOpcion.IndiceMoneda(mProps.CodMoneda))
End Property



Public Property Let IdProveedorRef(ByVal value As Long)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.IdProveedorRef", MSGERR_SOLOVER
    
    mProps.IdProveedorRef = value
    mbooModificado = True
End Property

Public Property Get IdProveedorRef() As Long
    IdProveedorRef = mProps.IdProveedorRef
End Property

Public Property Let CodProveedorRef(ByVal value As String)
    Dim sql As String, rs As Recordset
    
    'Cuando cambia el valor
    If value <> mProps.CodProveedorRef Then
        If Len(value) > 0 Then
            'Actualiza IdProveedorRef también
            If Me.GNTrans.IVPideEmpleado Then
                sql = "SELECT IdProvCli FROM empleado PCProvCli WHERE CodProvCli='" & value & "'"
            Else
                sql = "SELECT IdProvCli FROM PCProvCli WHERE CodProvCli='" & value & "'"
            End If
            Set rs = mProps.objEmpresa.OpenRecordset(sql)
            If rs.EOF Then
                Err.Raise ERR_NOHAYCODIGO, "GNComprobante.CodProveedorRef", MSGERR_NOHAYCODIGO
                Exit Property
            Else
                IdProveedorRef = rs!IdProvcli
            End If
            rs.Close
            Set rs = Nothing
        Else
            IdProveedorRef = 0
        End If
        
        mProps.CodProveedorRef = value
        SetModificado
    End If
    Set rs = Nothing
End Property

Public Property Get CodProveedorRef() As String
    CodProveedorRef = Trim$(mProps.CodProveedorRef)
End Property




Public Property Let IdClienteRef(ByVal value As Long)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.IdClienteRef", MSGERR_SOLOVER
    
    mProps.IdClienteRef = value
    mbooModificado = True
End Property

Public Property Get IdClienteRef() As Long
    IdClienteRef = mProps.IdClienteRef
End Property


Public Property Let CodClienteRef(ByVal value As String)
    Dim sql As String, rs As Recordset
    
    'Cuando cambia el valor
    If value <> mProps.CodClienteRef Then
        If Len(value) > 0 Then
            'Actualiza IdClienteRef también
            sql = "SELECT IdProvCli FROM PCProvCli WHERE CodProvCli='" & value & "'"
            Set rs = mProps.objEmpresa.OpenRecordset(sql)
            If rs.EOF Then
                Err.Raise ERR_NOHAYCODIGO, "GNComprobante.CodClienteRef", MSGERR_NOHAYCODIGO
                Exit Property
            Else
                IdClienteRef = rs!IdProvcli
                RaiseEvent ClienteCambiado
            End If
            rs.Close
        Else
            IdClienteRef = 0
        End If
        
        mProps.CodClienteRef = value
        SetModificado
    End If
    Set rs = Nothing
End Property

Public Property Get CodClienteRef() As String
    CodClienteRef = Trim$(mProps.CodClienteRef)
End Property



Public Property Let IdVendedor(ByVal value As Long)
    mProps.IdVendedor = value
    SetModificado
End Property

Public Property Get IdVendedor() As Long
    IdVendedor = mProps.IdVendedor
End Property


Public Property Let CodVendedor(ByVal value As String)
    Dim sql As String, rs As Recordset

    'Cuando cambia el valor
    If value <> mProps.CodVendedor Then
        If Len(value) > 0 Then
            'Actualiza IdVendedor también
            sql = "SELECT IdVendedor FROM FCVendedor WHERE CodVendedor='" & value & "'"
            Set rs = mProps.objEmpresa.OpenRecordset(sql)
            If rs.EOF Then
                Err.Raise ERR_NOHAYCODIGO, "GNComprobante.CodVendedor", MSGERR_NOHAYCODIGO
                Exit Property
            Else
                IdVendedor = rs!IdVendedor
            End If
            rs.Close
            Set rs = Nothing
        Else
            IdVendedor = 0
        End If
        
        mProps.CodVendedor = value
        SetModificado
    End If
End Property

Public Property Get CodVendedor() As String
    CodVendedor = Trim$(mProps.CodVendedor)
End Property

'jeaa 25/04/2005
Public Property Let IdMotivo(ByVal value As Long)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.IdMotivo", MSGERR_SOLOVER
    
    mProps.IdMotivo = value
    mbooModificado = True
End Property

Public Property Get IdMotivo() As Long
    IdMotivo = mProps.IdMotivo
End Property

Public Property Let CodMotivo(ByVal value As String)
    Dim sql As String, rs As Recordset

    'Cuando cambia el valor
    If value <> mProps.CodMotivo Then
        If Len(value) > 0 Then
            'Actualiza IdMotivo también
            sql = "SELECT IdMotivo FROM Motivo WHERE CodMotivo='" & value & "'"
            Set rs = mProps.objEmpresa.OpenRecordset(sql)
            If rs.EOF Then
                Err.Raise ERR_NOHAYCODIGO, "GNComprobante.CodMotivo", MSGERR_NOHAYCODIGO
                Exit Property
            Else
                IdMotivo = rs!IdMotivo
            End If
            rs.Close
            Set rs = Nothing
        Else
            IdMotivo = 0
        End If
        
        mProps.CodMotivo = value
        SetModificado
    End If
End Property

Public Property Get CodMotivo() As String
    CodMotivo = Trim$(mProps.CodMotivo)
End Property

Public Property Get fechagrabado() As Date
    fechagrabado = mProps.fechagrabado
End Property

Public Property Get EsNuevo() As Boolean
    EsNuevo = mbooEsNuevo
End Property

Friend Sub SetModificado()
    mbooModificado = True
End Sub

Public Property Get Modificado() As Boolean
    Modificado = mbooModificado
End Property

Public Property Let Modificado(value As Boolean)
    mbooModificado = False
End Property


Public Property Let SoloVer(ByVal value As Boolean)
    mbooSoloVer = value
End Property

Public Property Get SoloVer() As Boolean
    SoloVer = mbooSoloVer
End Property

Private Sub Class_Initialize()
    Dim i As Integer
'    Set mcolCTLibroDetalle = New Collection
'    Set mcolAFKardex = New Collection
'    Set mcolTSKardex = New Collection
'    Set mcolIVKardex = New Collection
'    Set mcolIVKardexRecargo = New Collection
'    Set mcolPCKardex = New Collection
    
    'Valores predeterminados
    
    With mProps
        .FechaTrans = Date
        .HoraTrans = Time
        .Descripcion = ""
        .Direccion = ""
        .Telefono = ""
        .RUC = ""
        .codUsuario = gobjUsuarioActual.codUsuario 'Siempre coge del Usuario actual
        .PosID = gobjMain.PosID     'Siempre coge del gobjMain
        .NumTransCierrePOS = 0
        .idCentro = 0
        .FechaDevol = Date ' AUC 14/03/06 para la casa de disfraz
        .CodMoneda = MONEDA_PRE
        For i = 2 To 4
            .Cotizacion(i) = 1
        Next i
        .BandCierre = False
        .BandNoGrabaTransXML = True
        .BandFinalizado = False
        .FechaEntrega = Date
        .FechaCR1 = Date
        .FechaCR2 = Date
        .FechaCR3 = Date
        .ClienteEnMora = False
        .FechaAnexos = Date
        .BandDobleTributa = False
        .BandDobleTributa = False
        .BandPagoExterior = False
        .Opcion = "NNNNNNNNNNNNNNNNNNNN"  '20
        .EstadoFacElect = 0
        .EstadoRevisionActa = 0
        .BandPorMovil = False
        .BandReproCostos = False
    End With
    
    
    mbooEsNuevo = True
    mbooModificado = False
    mbooSoloVer = False

End Sub

Private Sub Class_Terminate()
    Set mcolCTLibroDetalle = Nothing
    Set mcolTSKardex = Nothing
    Set mcolTSKardexRet = Nothing           '*** MAKOTO 07/feb/01 Agregado
    Set mcolIVKardex = Nothing
    Set mcolIVKardexRecargo = Nothing
    Set mcolPCKardex = Nothing
    Set mcolIVKardexArancel = Nothing
    Set mcolIVKProceso = Nothing
    Set mProps.objEmpresa = Nothing
    Set mobjGNTrans = Nothing
End Sub


'Generación de PCKardex cuando cobra/paga al contado
'Llama desde frmIVTrans y frmIVDev
Private Sub GeneraPCKardexContado()
    Dim pck As PCKardex, ix As Long, tsf As TSFormaCobroPago
    Dim pck2 As PCKardex, Tsk As TSKardex, j As Long, pcd As PCDocAsignado
    
    BorrarTSKardex         'Elimina los TSKardexs

    'Elimina los PCKardexs asignados a cobro/pago directo
    For ix = CountPCKardex To 1 Step -1
        Set pck = PCKardex(ix)
        If pck.IdAsignado <> 0 Then
            If pck.IdAsignado = -1 Then
                RemovePCKardex ix      'Borra para crear de nuevo
            Else
                '*** MAKOTO 01/dic/00 Modificado para que elimina solo cuando es de la misma trans.
                On Error Resume Next
                Set pcd = pck.RecuperaPCDocAsignado
                Err.Clear
                On Error GoTo 0
                If Not (pcd Is Nothing) Then
                    If pcd.transid = Me.transid Then    'Si está asignado a otra trans. no tiene nada que ver
                        'Si es que ya está grabado, no ha de tener -1 por eso busca CodForma de asignado
                        Set tsf = Empresa.RecuperaTSFormaCobroPago(pck.CodForma)
                        If Not tsf Is Nothing Then
                            'Si está asignado a un documento que va directo a un banco
                            If tsf.IdBanco <> 0 Then
                                RemovePCKardex ix     'Borra para crear de nuevo
                            End If
                        End If
                    Else                        '*** MAKOTO 4/may/01 Mod.
                                           'No hace nada
                    End If
                Else                            '*** MAKOTO 27/abr/01 Mod.
                    RemovePCKardex ix           '***
                End If
                Set pcd = Nothing
            End If
        End If
    Next ix

    'Busca documenos que van directo a un banco
    For ix = 1 To CountPCKardex
        Set pck = PCKardex(ix)
        If pck.IdAsignado = 0 Then
            Set tsf = Empresa.RecuperaTSFormaCobroPago(pck.CodForma)
            If Not (tsf Is Nothing) Then
                If tsf.IdBanco <> 0 Then         'Si es documento que va directo a banco
                    'Genera un nuevo PCKardex
                    j = AddPCKardex
                    Set pck2 = PCKardex(j)
                    If pck.Haber Then
                        pck2.Debe = pck.Haber
                    Else
                        pck2.Haber = pck.Debe
                    End If
                    pck2.CodForma = pck.CodForma
                    pck2.NumLetra = pck.NumLetra
                    pck2.IdAsignado = -1         '-1 indica que hay que asignar cuando se graba
                    pck2.FechaEmision = FechaTrans
                    pck2.FechaVenci = FechaTrans
                    pck2.Observacion = pck.Observacion
                    pck2.Orden = CountPCKardex
                    pck2.CodProvcli = pck.CodProvcli
                    
                    'Genera un nuevo TSKardex
                    j = AddTSKardex
                    Set Tsk = TSKardex(j)
                    If pck.Debe Then
                        Tsk.Debe = pck.Debe
                    Else
                        Tsk.Haber = pck.Haber
                    End If
                    Tsk.CodBanco = tsf.CodBanco
                    Tsk.CodTipoDoc = tsf.CodTipoDoc
'                   tsk.nombre = "Contado"
                    Tsk.NumDoc = pck.NumLetra
                    Tsk.FechaEmision = FechaTrans
                    Tsk.FechaVenci = pck.FechaVenci
                    Tsk.Observacion = pck.Observacion
                    Tsk.Orden = CountTSKardex
                End If
            End If
        End If
    Next ix
    
    Set Tsk = Nothing
    Set tsf = Nothing
    Set pck = Nothing
    Set pck2 = Nothing
End Sub

'*** MAKOTO 17/feb/01 Agregado
'Asigna un valor al campo 'Nombre' sacando datos de PCKardex
Public Sub AsignarNombreTrans()
    Dim i As Long, pck As PCKardex, s As String
    Dim j As Long, pc As PCProvCli
    
    'Si está seleccionado sólo cliente ref.
    If Len(Me.CodClienteRef) > 0 And Len(Me.CodProveedorRef) = 0 And Len(Me.CodEmpleadoRef) = 0 Then
        Set pc = Empresa.RecuperaPCProvCli(Me.CodClienteRef)
        s = Left$(pc.Nombre, 40)
        
    'Si está seleccionado sólo proceedor ref.
    ElseIf Len(Me.CodProveedorRef) > 0 And Len(Me.CodClienteRef) = 0 And Len(Me.CodEmpleadoRef) = 0 Then
        Set pc = Empresa.RecuperaPCProvCli(Me.CodProveedorRef)
        s = Left$(pc.Nombre, 40)
    ElseIf Len(Me.CodEmpleadoRef) > 0 And Len(Me.CodClienteRef) = 0 And Len(Me.CodProveedorRef) = 0 Then
        Set pc = Empresa.RecuperaEmpleado(Me.CodEmpleadoRef)
        s = Left$(pc.Nombre, 40)

    'Si está seleccionado los dos ó ninguno
    Else
        'Busca todos los PCKardex
        For i = 1 To CountPCKardex
            Set pck = PCKardex(i)
            
            'Verifica si es repetido
            For j = 1 To i - 1
                'Si el codigo es el mismo que uno de los anteriores
                If PCKardex(j).CodProvcli = pck.CodProvcli Then
                    GoTo Siguiente  'Pasa al siguiente registro
                End If
            Next j
            
            'Si es la primera ocurriencia, agrega el nombre separando por coma si hay mas de uno
            Set pc = Empresa.RecuperaPCProvCli(pck.CodProvcli)
            If Not (pc Is Nothing) Then
                If Len(s) > 0 Then s = s & ", "
                s = s & Left$(pc.Nombre, 40)
            End If
Siguiente:
        Next i
    End If
    
    'Si no cabe en 40 caracteres, convierte en 'Varios'
    If Len(s) > 40 Then s = "Varios"
    
    'Asigna al campo Nombre
    Me.Nombre = s
'''    If Me.GNTrans.ClienteVisible Then
'''        Me.CodClienteRef = pc.CodProvCli
'''    ElseIf Me.GNTrans.ProveedorVisible Then
'''        Me.CodProveedorRef = pc.CodProvCli
'''    End If
    Set pc = Nothing
    Set pck = Nothing
End Sub


'Agregado Alex Sept/2002        --> siempre existirá relación 1 a 1, debido a que hay una sola factura por compra

Private Sub GrabarAnexos()
    Dim sql As String, rs As Recordset
    Dim AuxDesc As Integer
        'Recupera el registro correspondiente para modificar
        sql = "SELECT * FROM Anexos WHERE TransID=" & mProps.transid
        Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
        If Not rs.EOF Then
            #If DAOLIB Then
                rs.Edit
            #End If
        Else
            sql = "SELECT * FROM Anexos WHERE 1=0"
            Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
            rs.AddNew
        End If
        
    With rs
        !transid = mProps.transid                       'Es el mismo asignado a GnComprobante
        !CodCredTrib = mProps.CodCredTrib

        !CodTipoComp = mProps.CodTipoComp

        !NumAutSRI = mProps.NumAutSRI
        
        !NumSerie = mProps.NumSerie
        !NumSerieEstablecimiento = mProps.NumSerieEstablecimiento
        !NumSeriePunto = mProps.NumSeriePunto
        !NumSecuencial = mProps.NumSecuencial
        
        'auc 08/11/2005
        
        If (Me.GNTrans.IVTipoTrans = "E" Or Me.GNTrans.IVTipoTrans = "S") Then
            If Me.GNTrans.AnexoCodTipoComp = "4" Then
                If Len(mProps.objEmpresa.GNOpcion.ObtenerValor("ImportaDatosNotaCredito")) > 0 Then
                    AuxDesc = mProps.objEmpresa.GNOpcion.ObtenerValor("ImportaDatosNotaCredito")
                Else
                    AuxDesc = 0
                End If
            ElseIf Me.GNTrans.AnexoCodTipoComp = "18" Then
                If Len(mProps.objEmpresa.GNOpcion.ObtenerValor("ImportaDatosFactura")) > 0 Then
                    AuxDesc = mProps.objEmpresa.GNOpcion.ObtenerValor("ImportaDatosFactura")
                Else
                    AuxDesc = 0
                End If
            End If
            If AuxDesc = 0 Then
                If (mProps.CodTipoComp <> "4" And mProps.CodTipoComp <> "04") And (mProps.CodTipoComp <> "5" And mProps.CodTipoComp <> "05") Then
                    !NumSecuencial = Format(val(mProps.NumTrans), "000000000")
                Else
                    !NumSecuencial = Format(val(mProps.NumSecuencial), "000000000")
                End If
            Else
                If Len(mProps.NumDocRef) > 7 Then
                    AuxDesc = InStr(1, mProps.NumDocRef, "-")
                    If AuxDesc <> 0 Then
                        !NumSecuencial = Mid$(mProps.NumDocRef, AuxDesc + 1, 9)
                    Else
                        !NumSecuencial = Mid$(mProps.NumDocRef, 7, 9)
                    End If
                Else
                    !NumSecuencial = Format(val(mProps.NumDocRef), "000000000")
                End If
            End If
        Else
                If Len(mProps.NumSecuencial) > 9 Then
                    !NumSecuencial = Mid$(mProps.NumDocRef, 7, 9)
                Else
                    !NumSecuencial = Format(val(mProps.NumSecuencial), "000000000")
                End If
        End If
        !BandDevolucion = mProps.BandDevolucion
       
        If mProps.CodTipoComp = "7" Then
            !TransIDAfectada = mProps.IdTransFuente
        Else
            !TransIDAfectada = mProps.TransIDAfectada
        End If
        !FechaAnexos = mProps.FechaAnexos
        !FechaCaducidad = mProps.FechaCaducidad
        !CodTipoTrans = mProps.CodTipoTrans
        !BandCompraSinRetencion = mProps.BandCompraSinRetencion
        !CodTipoRetencion = mProps.CodTipoRetencion
        !BandNOCreditoTributario = mProps.BandNOCreditoTributario
        !BandRISE = mProps.BandRISE
        !BandFactElec = mProps.BandFactElec
        !BandRetOtro = mProps.BandRetOtro
        !BandPagoExterior = mProps.BandPagoExterior
        !CodFormaPagoSRI = mProps.CodFormaPagoSRI
        !CodPaisSRI = mProps.CodPaisSRI
        !BandDobleTributa = mProps.BandDobleTributa
        !BandPagoSujRet = mProps.BandPagoSujRet
        !BandAplicaIvaAnt = mProps.BandAplicaIvaAnt
        !NombreArchivoXML = mProps.NombreArchivoXML
        
        !CodCredTribMod = mProps.CodCredTribMod
        !CodTipoCompMod = mProps.CodTipoCompMod
        !NumAutSRIMod = mProps.NumAutSRIMod
        !NumSerieEstablecimientoMod = mProps.NumSerieEstablecimientoMod
        !NumSeriePuntoMod = mProps.NumSeriePuntoMod
        !NumSecuencialMod = mProps.NumSecuencialMod
        
        .Update
        #If DAOLIB Then
                rs.Bookmark = rs.LastModified
        #End If
        .Move 0             'Para actualizar
        .Close
    End With
End Sub

Public Sub RecuperarAnexos(Optional ByVal TransIDAnexos As Long)
    Dim sql As String, rs As Recordset
    
    If TransIDAnexos = 0 Then TransIDAnexos = mProps.transid
    
    sql = "SELECT * FROM Anexos WHERE TransID=" & TransIDAnexos
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    
    If rs.EOF Then Exit Sub
    With rs
        mProps.CodCredTrib = !CodCredTrib
        mProps.CodTipoComp = !CodTipoComp
        If Not IsNull(!NumAutSRI) Then mProps.NumAutSRI = !NumAutSRI
        If Not IsNull(!NumSerie) Then mProps.NumSerie = !NumSerie
        If Not IsNull(!NumSerieEstablecimiento) Then mProps.NumSerieEstablecimiento = !NumSerieEstablecimiento
        If Not IsNull(!NumSeriePunto) Then mProps.NumSeriePunto = !NumSeriePunto
        If Not IsNull(!NumSecuencial) Then mProps.NumSecuencial = !NumSecuencial
        If Not IsNull(!BandDevolucion) Then mProps.BandDevolucion = !BandDevolucion
        If Not IsNull(!TransIDAfectada) Then mProps.TransIDAfectada = !TransIDAfectada
        If Not IsNull(!FechaAnexos) Then mProps.FechaAnexos = !FechaAnexos
        If Not IsNull(!FechaCaducidad) Then mProps.FechaCaducidad = !FechaCaducidad
        If Not IsNull(!CodTipoTrans) Then mProps.CodTipoTrans = !CodTipoTrans
        If Not IsNull(!BandCompraSinRetencion) Then mProps.BandCompraSinRetencion = !BandCompraSinRetencion
        If Not IsNull(!CodTipoRetencion) Then mProps.CodTipoRetencion = !CodTipoRetencion
        If Not IsNull(!BandNOCreditoTributario) Then mProps.BandNOCreditoTributario = !BandNOCreditoTributario
        If Not IsNull(!BandRISE) Then mProps.BandRISE = !BandRISE
        If Not IsNull(!BandFactElec) Then mProps.BandFactElec = !BandFactElec
        If Not IsNull(!BandRetOtro) Then mProps.BandRetOtro = !BandRetOtro
        If Not IsNull(!BandPagoExterior) Then mProps.BandPagoExterior = !BandPagoExterior
        If Not IsNull(!CodFormaPagoSRI) Then mProps.CodFormaPagoSRI = !CodFormaPagoSRI
        If Not IsNull(!CodPaisSRI) Then mProps.CodPaisSRI = !CodPaisSRI
        If Not IsNull(!BandDobleTributa) Then mProps.BandDobleTributa = !BandDobleTributa
        If Not IsNull(!BandPagoSujRet) Then mProps.BandPagoSujRet = !BandPagoSujRet
        If Not IsNull(!BandAplicaIvaAnt) Then mProps.BandAplicaIvaAnt = !BandAplicaIvaAnt
        If Not IsNull(!NombreArchivoXML) Then mProps.NombreArchivoXML = !NombreArchivoXML
        
        If Not IsNull(!CodCredTribMod) Then mProps.CodCredTribMod = !CodCredTribMod
        If Not IsNull(!CodTipoCompMod) Then mProps.CodTipoCompMod = !CodTipoCompMod
        If Not IsNull(!NumAutSRIMod) Then mProps.NumAutSRIMod = !NumAutSRIMod
        If Not IsNull(!NumSerieEstablecimientoMod) Then mProps.NumSerieEstablecimientoMod = !NumSerieEstablecimientoMod
        If Not IsNull(!NumSeriePuntoMod) Then mProps.NumSeriePuntoMod = !NumSeriePuntoMod
        If Not IsNull(!NumSecuencialMod) Then mProps.NumSecuencialMod = !NumSecuencialMod
        

        
        
        
        .Close
    End With
    Set rs = Nothing
End Sub

Private Sub VerificaNumDocRepetido_Anexos()
    Dim sql As String, rs As Recordset, obj As GNComprobante
    
    
    If Len(mProps.NumAutSRI) > 0 And Len(mProps.NumSerie) > 0 Then
    
    sql = "SELECT GnComprobante.TransID, Anexos.NumAutSRI, Anexos.NumSerie, " & _
            " Anexos.NumSerieEstablecimiento, Anexos.NumSeriePunto," & _
            " GnComprobante.NumdocRef, Anexos.CodCredTrib, Anexos.CodTipoComp " & _
             " FROM GnComprobante INNER JOIN Anexos ON GnComprobante.TransId = Anexos.TransId " & _
             " Where Anexos.NumAutSRI = '" & mProps.NumAutSRI & "' " & _
             " AND Anexos.NumSerie = '" & mProps.NumSerie & "' " & _
             " AND Anexos.NumSerieEstablecimiento = '" & mProps.NumSerieEstablecimiento & "' " & _
             " AND Anexos.NumSeriePunto = '" & mProps.NumSeriePunto & "' " & _
             " AND GnComprobante.NumDocRef = '" & mProps.NumDocRef & "' " & _
             " AND Anexos.CodCredTrib = '" & mProps.CodCredTrib & "' " & _
            " AND Anexos.CodTipoComp = '" & mProps.CodTipoComp & "'"
    
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    If Not rs.EOF Then
        If Me.transid <> rs!transid Then
                Err.Raise ERR_INVALIDO, "Anexos.Verificación", _
                "Anexos: Los números que identifican al documento corresponden " & vbCrLf & _
                "a uno ingresado con anterioridad"
        End If
    End If
    Set rs = Nothing
    End If

    
End Sub

Public Function ExisteAnexoAsignado(ByVal TransIDAnexos As Long) As Boolean
    Dim sql As String, rs As Recordset
    sql = "Select * from anexos where TransId = " & TransIDAnexos
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    If Not rs.EOF Then ExisteAnexoAsignado = True
    Set rs = Nothing
End Function

'**********************************
'*** Agregado Oliver 3/12/2002
'*** todo lo que tiene que ver con
'*** generacion de un asiento  por
'*** lote de transacciones.
'**********************************


Public Sub Generar1AsientoxLote()
    Dim i As Long, f As String, colAT As colAsientoTemp
    Dim obj As AsientoTemp, j As Long, ctl As CTLibroDetalle
    Dim rs As Recordset
    Dim gnc As GNComprobante
    Dim ix As Long, pos_verifica_asiento As Long
    Dim cancelado As Boolean
    
    'Remueve los asientos existentes (Solo auto-generados)
    
    For i = CountCTLibroDetalle To 1 Step -1
        'No elimina los asiento agregados por usuario
        If CTLibroDetalle(i).BandIntegridad = INTEG_AUTO Then
            mcolCTLibroDetalle.Remove i
            mbooModificado = True
        End If
    Next i
    
    Set rs = mProps.objEmpresa.ConsGNTrans3(True)   'Ascendente.
    'Revisar una por una las Transacciones para ir sumando los asientos
    
    cancelado = False
    ix = 0
    pos_verifica_asiento = 1   'variable utilizada para verificar si esta cuadrado parcialmente
    Do While (Not rs.EOF)
        DoEvents
        ix = ix + 1
        'recuperar los Comprobantes uno por uno
        Set gnc = Me.Empresa.RecuperaGNComprobante(rs!transid)
        With GNTrans
            For i = 1 To .CountAsiento
                Set colAT = Nothing
                f = UCase$(.Asientos(i).Formula)
                Select Case f
                Case "TSBANCO"
                    Set colAT = GeneraAsientoTSBanco_Lote(gnc)
                Case "TSRETACTIVO"                        '*** MAKOTO 07/feb/01
                    Set colAT = GeneraAsientoTSRetencion_Lote(gnc, True)
                Case "TSRETPASIVO"                        '*** MAKOTO 12/feb/01
                    Set colAT = GeneraAsientoTSRetencion_Lote(gnc, False)
                Case "TSBANCODEBE"
                    Set colAT = GeneraAsientoTSBancoDebe_Lote(gnc)
                Case "TSBANCOHABER"
                    Set colAT = GeneraAsientoTSBancoHaber_Lote(gnc)
                Case "PCTOTAL"
                    Set colAT = GeneraAsientoPCTotal_Lote(gnc, True)
                Case "PCTOTAL2"
                    Set colAT = GeneraAsientoPCTotal_Lote(gnc, False)
                Case "PCTOTALDEBE"
                    Set colAT = GeneraAsientoPCTotalDebe_Lote(gnc, True)
                Case "PCTOTALDEBE2"
                    Set colAT = GeneraAsientoPCTotalDebe_Lote(gnc, False)
                Case "PCTOTALHABER"
                    Set colAT = GeneraAsientoPCTotalHaber_Lote(gnc, True)
                Case "PCTOTALHABER2"
                    Set colAT = GeneraAsientoPCTotalHaber_Lote(gnc, False)
                Case "PCPAGO"
                    Set colAT = GeneraAsientoPCPago_Lote(gnc, True)
                Case "PCPAGO2"
                    Set colAT = GeneraAsientoPCPago_Lote(gnc, False)
                Case "PCCOBRO"
                    Set colAT = GeneraAsientoPCCobro_Lote(gnc, True)
                Case "PCCOBRO2"
                    Set colAT = GeneraAsientoPCCobro_Lote(gnc, False)
                Case "PCXCOBRAR"
                    Set colAT = GeneraAsientoPCPorCobrarPagar_Lote(gnc, True)
                Case "PCXPAGAR"
                    Set colAT = GeneraAsientoPCPorCobrarPagar_Lote(gnc, False)
                Case "IVACTIVO", "IVACTIVO+", "IVACTIVO-"
                    Set colAT = GeneraAsientoIVActivo_Lote(gnc, f)
                Case "IVCOSTO", "IVCOSTO+", "IVCOSTO-"
                    Set colAT = GeneraAsientoIVCosto_Lote(gnc, f)
                Case "IVVENTA", "IVVENTA+", "IVVENTA-", "IVVENTA*", "IVVENTA2"
                    Set colAT = GeneraAsientoIVVenta_Lote(gnc, f)
                Case "IVCOSTOTOTAL", "IVCOSTOTOTAL+", "IVCOSTOTOTAL-"
                    Set colAT = GeneraAsientoIVCostoTotal_Lote(gnc, f)
                Case "IVPRECIOTOTAL", "IVPRECIOTOTAL+", _
                     "IVPRECIOTOTAL-", "IVPRECIOTOTAL*"
                    Set colAT = GeneraAsientoIVPrecioTotal_Lote(gnc, f)
                Case "IVCOSTOTOTAL2"
                    Set colAT = GeneraAsientoIVCostoTotal2_Lote(gnc)
                Case "IVPRECIOTOTAL2"
                    Set colAT = GeneraAsientoIVPrecioTotal2_Lote(gnc)
                Case "IVDESCITEMTOTAL" '***Agregado. 02/ago/2004. Angel
                    Set colAT = GeneraAsientoIVDescItemTotal_Lote(gnc)
                
                Case Else
                    Select Case Left$(f, 1)
                    Case "$"        'Documentos bancarios
                        Set colAT = GeneraAsientoTSDoc_Lote(gnc, Mid$(f, 2))
                    Case "%"        'Recargos/Descuentos
                        Set colAT = GeneraAsientoIVRecargo_Lote(gnc, Mid$(f, 2))
                    Case "#"        'Formas de pago/cobro
                        Set colAT = GeneraAsientoFormaCobroPago_lote(gnc, Mid$(f, 2))
                    End Select
                End Select
                
                If Not colAT Is Nothing Then
                    For Each obj In colAT
                        j = AddCTLibroDetalleAuto   'Agrega y pone INTEG_AUTO en BandIntegridad
                        Set ctl = CTLibroDetalle(j)
                        
                        '0 significa que IdCuenta es variable
                        If .Asientos(i).IdCuenta <> 0 Then
                            ctl.SetIdCuentaAuto .Asientos(i).IdCuenta
                        Else
                            ctl.SetIdCuentaAuto obj.IdCuenta
                        End If
                        
                        '*** Eliminado, porque Descripcion siempre copia de GNComprobante en AddCTLibroDetalle
    '                    ctl.Descripcion = .Asientos(i).Descripcion
    
                        If .Asientos(i).BandDeudor Then
                            ctl.Debe = obj.Valor
                        Else
                            ctl.Haber = obj.Valor
                        End If
                    Next obj
                End If
            Next i
        End With
        
        If (Not Cuadrado_parcial(pos_verifica_asiento)) Then
            RaiseEvent EstadoGeneracion1AsientoxLote(ix, "No Cuadrado", cancelado)
        Else
            RaiseEvent EstadoGeneracion1AsientoxLote(ix, "OK", cancelado)
        End If
        
        TotalizaAsientoRepetido
        pos_verifica_asiento = CountCTLibroDetalle + 1
        
        'Liberar de Memoria
        Set gnc = Nothing
        If cancelado Then
            Exit Do
        End If
        rs.MoveNext
    Loop
    TotalizaAsientoRepetido
End Sub


Private Function GeneraAsientoTSBanco_Lote(ByRef gnc As GNComprobante) As colAsientoTemp
    Dim i As Long, v As Currency, k As TSKardex
    Dim col As colAsientoTemp
    
    Set col = New colAsientoTemp
    For i = 1 To gnc.CountTSKardex
        Set k = gnc.TSKardex(i)
        v = (k.Debe - k.Haber) * k.auxBandCalculoBanco
        col.Add k.auxIdCuenta, v
    Next i
    Set GeneraAsientoTSBanco_Lote = col
    Set col = Nothing
End Function

Private Function GeneraAsientoTSRetencion_Lote(ByRef gnc As GNComprobante, _
                    ByVal BandActivo As Boolean) As colAsientoTemp
    Dim i As Long, v As Currency, k As TSKardexRet
    Dim col As colAsientoTemp
    
    Set col = New colAsientoTemp
    For i = 1 To gnc.CountTSKardexRet
        Set k = gnc.TSKardexRet(i)
        v = (k.Debe - k.Haber)
        If BandActivo Then
            col.Add k.auxIdCuentaActivo, v
        Else
            col.Add k.auxIdCuentaPasivo, v
        End If
    Next i
    Set GeneraAsientoTSRetencion_Lote = col
    Set col = Nothing
    Set k = Nothing
End Function

Private Function GeneraAsientoTSBancoDebe_Lote(ByRef gnc As GNComprobante) As colAsientoTemp
    Dim i As Long, v As Currency, k As TSKardex
    Dim col As colAsientoTemp
    
    Set col = New colAsientoTemp
    For i = 1 To gnc.CountTSKardex
        Set k = gnc.TSKardex(i)
        v = k.Debe * k.auxBandCalculoBanco
        col.Add k.auxIdCuenta, v
    Next i
    Set GeneraAsientoTSBancoDebe_Lote = col
    Set col = Nothing
End Function

Private Function GeneraAsientoTSBancoHaber_Lote(ByRef gnc As GNComprobante) As colAsientoTemp
    Dim i As Long, v As Currency, k As TSKardex
    Dim col As colAsientoTemp
    
    Set col = New colAsientoTemp
    For i = 1 To gnc.CountTSKardex
        Set k = gnc.TSKardex(i)
        v = k.Haber * k.auxBandCalculoBanco
        col.Add k.auxIdCuenta, v
    Next i
    Set GeneraAsientoTSBancoHaber_Lote = col
    Set col = Nothing
End Function



Private Function GeneraAsientoTSDoc_Lote(ByRef gnc As GNComprobante, ByVal CodTipoDoc As String) As colAsientoTemp
    Dim i As Long, v As Currency, k As TSKardex
    Dim col As colAsientoTemp
    Dim td As TSTipoDocBanco
    
    Set td = mProps.objEmpresa.RecuperaTSTipoDocBanco(CodTipoDoc)
    If Not td Is Nothing Then
        Set col = New colAsientoTemp
        For i = 1 To gnc.CountTSKardex
            Set k = gnc.TSKardex(i)
            If k.IdTipoDoc = td.IdTipoDoc Then
                v = k.Debe - k.Haber
                col.Add 0, v
            End If
        Next i
    End If
    Set GeneraAsientoTSDoc_Lote = col
    Set col = Nothing
    Set k = Nothing
    Set td = Nothing
End Function



Private Function GeneraAsientoPCTotal_Lote(ByRef gnc As GNComprobante, _
                    ByVal BandPrincipal As Boolean) As colAsientoTemp
    Dim i As Long, v As Currency, k As PCKardex
    Dim col As colAsientoTemp
    
    Set col = New colAsientoTemp
    For i = 1 To gnc.CountPCKardex
        Set k = gnc.PCKardex(i)
        v = k.Debe + k.Haber
        
        '*** MAKOTO 08/mar/01 Agregado
        'Si es que el prov/cli no tiene asignado una cuenta, genera error
        If (BandPrincipal And k.auxIdCuenta = 0) Or _
            (Not BandPrincipal And k.auxIdCuenta2 = 0) Then
            NoTieneCuentaAsignado False, "Cuenta " & IIf(BandPrincipal, "1", "2"), k.CodProvcli
        End If
        
        If BandPrincipal Then
            col.Add k.auxIdCuenta, v
        Else
            col.Add k.auxIdCuenta2, v
        End If
    Next i
    Set GeneraAsientoPCTotal_Lote = col
    Set col = Nothing
End Function

Private Function GeneraAsientoPCTotalDebe_Lote(ByRef gnc As GNComprobante, _
                    ByVal BandPrincipal As Boolean) As colAsientoTemp
    Dim i As Long, v As Currency, k As PCKardex
    Dim col As colAsientoTemp
    
    Set col = New colAsientoTemp
    For i = 1 To gnc.CountPCKardex
        Set k = gnc.PCKardex(i)
        v = k.Debe
        
        '*** MAKOTO 08/mar/01 Agregado
        'Si es que el prov/cli no tiene asignado una cuenta, genera error
        If (v > 0) And ((BandPrincipal And k.auxIdCuenta = 0) Or _
            (Not BandPrincipal And k.auxIdCuenta2 = 0)) Then
            NoTieneCuentaAsignado False, "Cuenta " & IIf(BandPrincipal, "1", "2"), k.CodProvcli
        End If
        
        If BandPrincipal Then
            col.Add k.auxIdCuenta, v
        Else
            col.Add k.auxIdCuenta2, v
        End If
    Next i
    Set GeneraAsientoPCTotalDebe_Lote = col
    Set col = Nothing
End Function

Private Function GeneraAsientoPCTotalHaber_Lote(ByRef gnc As GNComprobante, _
                    ByVal BandPrincipal As Boolean) As colAsientoTemp
    Dim i As Long, v As Currency, k As PCKardex
    Dim col As colAsientoTemp
    
    Set col = New colAsientoTemp
    For i = 1 To gnc.CountPCKardex
        Set k = gnc.PCKardex(i)
        v = k.Haber
        
        '*** MAKOTO 08/mar/01 Agregado
        'Si es que el prov/cli no tiene asignado una cuenta, genera error
        If (v > 0) And ((BandPrincipal And k.auxIdCuenta = 0) Or _
            (Not BandPrincipal And k.auxIdCuenta2 = 0)) Then
            NoTieneCuentaAsignado False, "Cuenta " & IIf(BandPrincipal, "1", "2"), k.CodProvcli
        End If
        
        If BandPrincipal Then
            col.Add k.auxIdCuenta, v
        Else
            col.Add k.auxIdCuenta2, v
        End If
    Next i
    Set GeneraAsientoPCTotalHaber_Lote = col
    Set col = Nothing
End Function

Private Function GeneraAsientoPCPago_Lote(ByRef gnc As GNComprobante, _
                    ByVal BandPrincipal As Boolean) As colAsientoTemp
    Dim i As Long, v As Currency, k As PCKardex
    Dim col As colAsientoTemp, Doc As PCDocAsignado
    
    Set col = New colAsientoTemp
    For i = 1 To gnc.CountPCKardex
        Set k = gnc.PCKardex(i)
        v = k.Debe
        
        'Cuando tiene documento asignado,
        ' convierte en valor correspondiente a la cotizacion del doc. asignado
        ' Esto sirve para autocalcular diferencial cambiario en asiento contable
        If k.IdAsignado <> 0 Then
            '*** MAKOTO 08/mar/01 Agregado
            'Si es que el prov/cli no tiene asignado una cuenta, genera error
            If (BandPrincipal And k.auxIdCuenta = 0) Or _
                (Not BandPrincipal And k.auxIdCuenta2 = 0) Then
                NoTieneCuentaAsignado False, "Cuenta " & IIf(BandPrincipal, "1", "2"), k.CodProvcli
            End If
            
            v = v * Me.Cotizacion("")       'Convierte en moneda nacional
            Set Doc = k.RecuperaPCDocAsignado   'Recupera el documento asignado
            If Not (Doc Is Nothing) Then
                v = v / Me.Cotizacion(Doc.CodMoneda)    'Convierte en moneda original
                v = v * Doc.Cotizacion              'Convierte en moneda nacional a cotizacion original
            End If
            v = v / Me.Cotizacion("")       'Convierte en moneda ex.
        
            If BandPrincipal Then
                col.Add k.auxIdCuenta, v
            Else
                col.Add k.auxIdCuenta2, v
            End If
        End If
    Next i
    Set GeneraAsientoPCPago_Lote = col
    Set k = Nothing
    Set col = Nothing
    Set Doc = Nothing
End Function

Private Function GeneraAsientoPCCobro_Lote(ByRef gnc As GNComprobante, _
                    ByVal BandPrincipal As Boolean) As colAsientoTemp
    Dim i As Long, v As Currency, k As PCKardex
    Dim col As colAsientoTemp, Doc As PCDocAsignado
    
    Set col = New colAsientoTemp
    For i = 1 To gnc.CountPCKardex
        Set k = gnc.PCKardex(i)
        v = k.Haber
        
        'Cuando tiene documento asignado,
        ' convierte en valor correspondiente a la cotizacion del doc. asignado
        ' Esto sirve para autocalcular diferencial cambiario en asiento contable
        If k.IdAsignado <> 0 Then
            '*** MAKOTO 08/mar/01 Agregado
            'Si es que el prov/cli no tiene asignado una cuenta, genera error
            If (BandPrincipal And k.auxIdCuenta = 0) Or _
                (Not BandPrincipal And k.auxIdCuenta2 = 0) Then
                NoTieneCuentaAsignado False, "Cuenta " & IIf(BandPrincipal, "1", "2"), k.CodProvcli
            End If
            
            v = v * Me.Cotizacion("")       'Convierte en moneda nacional
            Set Doc = k.RecuperaPCDocAsignado   'Recupera el documento asignado
            If Not (Doc Is Nothing) Then
                v = v / Me.Cotizacion(Doc.CodMoneda)    'Convierte en moneda original
                v = v * Doc.Cotizacion              'Convierte en moneda nacional a cotizacion original
            End If
            v = v / Me.Cotizacion("")       'Convierte en moneda ex.
        
            If BandPrincipal Then
                col.Add k.auxIdCuenta, v
            Else
                col.Add k.auxIdCuenta2, v
            End If
        End If
    Next i
    Set GeneraAsientoPCCobro_Lote = col
    Set k = Nothing
    Set col = Nothing
    Set Doc = Nothing
End Function


Private Function GeneraAsientoPCPorCobrarPagar_Lote(ByRef gnc As GNComprobante, _
                    ByVal BandPorCobrar As Boolean) As colAsientoTemp
    Dim i As Long, v As Currency, k As PCKardex
    Dim col As colAsientoTemp
    
    Set col = New colAsientoTemp
    For i = 1 To gnc.CountPCKardex
        Set k = gnc.PCKardex(i)
        
        'Si es de Por Cobrar/Pagar
        If k.IdAsignado = 0 Then
            'Si es que el item no tiene asignado una cuenta de Activo, genera error
            If k.auxIdCuenta2 = 0 Then
                NoTieneCuentaAsignado False, "Cuenta 2", k.CodProvcli
            End If
            
            v = IIf(BandPorCobrar, k.Debe, k.Haber)
            If Me.GNTrans.Empresa.GNOpcion.ObtenerValor("CalculoIVA4Decimales") = "1" Then
                If v > 0 Then col.Add k.auxIdCuenta2, MiCCur(Format$(v, Me.FormatoMoneda))
            Else
                If v > 0 Then col.Add k.auxIdCuenta2, v
            End If
            
        End If
    Next i
    Set GeneraAsientoPCPorCobrarPagar_Lote = col
    Set col = Nothing
End Function

Private Function GeneraAsientoIVActivo_Lote(ByRef gnc As GNComprobante, _
                    Param As String) As colAsientoTemp
    Dim i As Long, v As Currency, k As IVKardex
    Dim col As colAsientoTemp
    
    Set col = New colAsientoTemp
    For i = 1 To gnc.CountIVKardex
        v = 0
        Set k = gnc.IVKardex(i)
        
        '*** MAKOTO 08/mar/01 Agregado
        'Si es que el item no tiene asignado una cuenta de Activo, genera error
        If k.auxIdCuentaActivo = 0 Then
            NoTieneCuentaAsignado True, "ACTIVO", k.CodInventario
        End If
        
        Select Case Right$(Param, 1)
        Case "+":   If k.CostoRealTotal > 0 Then v = Abs(k.CostoRealTotal)  'Sólo positivos
        Case "-":   If k.CostoRealTotal < 0 Then v = Abs(k.CostoRealTotal)  'Sólo negativos
        Case Else:  v = Abs(k.CostoRealTotal)       'Todos con valor absoluto
        End Select
        
        If v <> 0 Then
            'Redondea al formato de moneda               '*** MAKOTO 13/feb/01
            'No con FormatoCosto porque asiento tiene que ser cuadrado con valores de Ctas x Pagar/Cobrar
            'Por ejemplo si está FormatoMoneda con 2 decimales y FormatoCosto con 4 decimales,
            'va a haber una diferencia entre Kardex de inventario y Libro mayor de inventario, algo que ya es inevitable.
            v = MiCCur(Format$(v, Me.FormatoMoneda))   '*** MAKOTO 01/mar/01 Error, era formato de costo
 '            v = MiCCur(Format$(v, Me.FormatoCosto))
            col.Add k.auxIdCuentaActivo, v
        End If
    Next i
    
    'Al ultimo tiene que redondear al formato de Precio Total       '*** MAKOTO 01/mar/01
    RedondearAsiento col, Me.FormatoMoneda
    
    If col.Count Then Set GeneraAsientoIVActivo_Lote = col
    Set col = Nothing
End Function


Private Function GeneraAsientoIVVenta_Lote(ByRef gnc As GNComprobante, _
                    Param As String) As colAsientoTemp
    Dim i As Long, v As Currency, k As IVKardex
    Dim col As colAsientoTemp
    
    Set col = New colAsientoTemp
    For i = 1 To gnc.CountIVKardex
        v = 0
        Set k = gnc.IVKardex(i)
        
        '*** MAKOTO 08/mar/01 Agregado
        'Si es que el item no tiene asignado una cuenta de Activo, genera error
        If k.auxIdCuentaVenta = 0 Then
            NoTieneCuentaAsignado True, "VENTA", k.CodInventario
        End If
        
        Select Case Right$(Param, 1)
        Case "+":   If k.PrecioRealTotal > 0 Then v = Abs(k.PrecioRealTotal)
        Case "-":   If k.PrecioRealTotal < 0 Then v = Abs(k.PrecioRealTotal)
        Case "*":   v = k.PrecioRealTotal
        Case "2":   v = Abs(k.PrecioTotal)           '*** DIEGO  14/07/03 Modificado Necesitamos Precio Total
        Case Else:  'v = Abs(k.PrecioRealTotal)      '*** MAKOTO 14/dic/00 Modificado para que tome PrecioRealTotal
        ''            jeaa  09/02/2007 sii factura por impresion x item
            If Me.GNTrans.IVTipoTrans = "E" Then
                If k.PrecioRealTotal < 0 Then
                    v = Abs(k.PrecioRealTotal)      '*** MAKOTO 14/dic/00 Modificado para que tome PrecioRealTotal
                Else
                    'cuando esiste devolucion en la misma Factura CAMARI
                    v = (k.PrecioRealTotal) * -1
                End If
            Else
                    v = Abs(k.PrecioRealTotal)      '*** MAKOTO 14/dic/00 Modificado para que tome PrecioRealTotal
            End If

        End Select
        
        If v <> 0 Then
            'Redondea al formato de P.Total               '*** MAKOTO 13/feb/01
            v = MiCCur(Format$(v, Me.FormatoMoneda))
            col.Add k.auxIdCuentaVenta, v
        End If
    Next i
    
    'Al ultimo tiene que redondear al formato de Precio Total       '*** MAKOTO 01/mar/01
    RedondearAsiento col, Me.FormatoMoneda

    
    If col.Count Then Set GeneraAsientoIVVenta_Lote = col
    Set col = Nothing
End Function


Private Function GeneraAsientoIVCosto_Lote(ByRef gnc As GNComprobante, _
                    Param As String) As colAsientoTemp
    Dim i As Long, v As Currency, k As IVKardex
    Dim col As colAsientoTemp
    
    Set col = New colAsientoTemp
    For i = 1 To gnc.CountIVKardex
        v = 0
        Set k = gnc.IVKardex(i)
        
        '*** MAKOTO 08/mar/01 Agregado
        'Si es que el item no tiene asignado una cuenta de Activo, genera error
        If k.auxIdCuentaCosto = 0 Then
            NoTieneCuentaAsignado True, "COSTO", k.CodInventario
        End If
        
        Select Case Right$(Param, 1)
        Case "+":   If k.CostoRealTotal > 0 Then v = Abs(k.CostoRealTotal)  'Sólo positivos
        Case "-":   If k.CostoRealTotal < 0 Then v = Abs(k.CostoRealTotal)  'Sólo negativos
        Case Else:  v = Abs(k.CostoRealTotal)       'Todos con valor absoluto
        End Select
        
        If v <> 0 Then
            'Redondea al formato de moneda               '*** MAKOTO 13/feb/01
            'No con FormatoCosto porque asiento tiene que ser cuadrado con valores de Ctas x Pagar/Cobrar
            'Por ejemplo si está FormatoMoneda con 2 decimales y FormatoCosto con 4 decimales,
            'va a haber una diferencia entre Kardex de inventario y Libro mayor de inventario, algo que ya es inevitable.
            v = MiCCur(Format$(v, Me.FormatoMoneda))   '*** MAKOTO 01/mar/01 Error, era formato de costo
'            v = MiCCur(Format$(v, Me.FormatoCosto))
            col.Add k.auxIdCuentaCosto, v
        End If
    Next i

    'Al ultimo tiene que redondear al formato de Precio Total       '*** MAKOTO 01/mar/01
    RedondearAsiento col, Me.FormatoMoneda
    
    If col.Count Then Set GeneraAsientoIVCosto_Lote = col
    Set col = Nothing
End Function

Private Function GeneraAsientoFormaCobroPago_lote(ByRef gnc As GNComprobante, CodForma As String) As colAsientoTemp
    Dim i As Long, k As PCKardex
    Dim col As colAsientoTemp, tsf As TSFormaCobroPago
    
    Set tsf = mProps.objEmpresa.RecuperaTSFormaCobroPago(CodForma)
    If Not tsf Is Nothing Then
        Set col = New colAsientoTemp
        For i = 1 To gnc.CountPCKardex
            Set k = gnc.PCKardex(i)
            If k.IDForma = tsf.IDForma Then
                col.Add 0, (k.Debe + k.Haber)
                Exit For
            End If
        Next i
    End If
    Set GeneraAsientoFormaCobroPago_lote = col
    Set col = Nothing
    Set k = Nothing
    Set tsf = Nothing
End Function



Private Function GeneraAsientoIVRecargo_Lote(ByRef gnc As GNComprobante, CodRecargo As String) As colAsientoTemp
    Dim i As Long, k As IVKardexRecargo
    Dim col As colAsientoTemp, ivr As IVRecargo
    
    Set ivr = mProps.objEmpresa.RecuperaIVRecargo(CodRecargo)
    If Not ivr Is Nothing Then
        Set col = New colAsientoTemp
        For i = 1 To gnc.CountIVKardexRecargo
            Set k = gnc.IVKardexRecargo(i)
            If k.IdRecargo = ivr.IdRecargo Then
                col.Add 0, Abs(k.Valor)
                Exit For
            End If
        Next i
    End If
    Set GeneraAsientoIVRecargo_Lote = col
    Set col = Nothing
    Set k = Nothing
    Set ivr = Nothing
End Function

Private Function GeneraAsientoIVCostoTotal_Lote(ByRef gnc As GNComprobante, _
                    Param As String) As colAsientoTemp
    Dim i As Long, k As IVKardex, v As Currency
    Dim col As colAsientoTemp
    
    Set col = New colAsientoTemp
    For i = 1 To gnc.CountIVKardex
        v = 0
        Set k = gnc.IVKardex(i)
    
        Select Case Right$(Param, 1)
        Case "+":   If k.CostoRealTotal > 0 Then v = Abs(k.CostoRealTotal)
        Case "-":   If k.CostoRealTotal < 0 Then v = Abs(k.CostoRealTotal)
        Case Else:  v = Abs(k.CostoRealTotal)
        End Select
        
        If v <> 0 Then
            'Redondea al formato de moneda               '*** MAKOTO 13/feb/01
            'No con FormatoCosto porque asiento tiene que ser cuadrado con valores de Ctas x Pagar/Cobrar
            'Por ejemplo si está FormatoMoneda con 2 decimales y FormatoCosto con 4 decimales,
            'va a haber una diferencia entre Kardex de inventario y Libro mayor de inventario, algo que ya es inevitable.
            v = MiCCur(Format$(v, Me.FormatoMoneda))
            col.Add 0, v
        End If
    Next i
    
    Set GeneraAsientoIVCostoTotal_Lote = col
    Set col = Nothing
End Function

Private Function GeneraAsientoIVPrecioTotal_Lote(ByRef gnc As GNComprobante, _
                    Param As String) As colAsientoTemp
    Dim i As Long, k As IVKardex, v As Currency
    Dim col As colAsientoTemp
    
    Set col = New colAsientoTemp
    For i = 1 To gnc.CountIVKardex
        v = 0
        Set k = gnc.IVKardex(i)
        
        Select Case Right$(Param, 1)
'        Case "+":   If k.PrecioTotal > 0 Then v = Abs(k.PrecioTotal)    'Solo positivos
'        Case "-":   If k.PrecioTotal < 0 Then v = Abs(k.PrecioTotal)    'Solo negativos
'        Case "*":   v = k.PrecioTotal           'Suma real
'        Case Else:  v = Abs(k.PrecioTotal)      'Suma de valor absoluto
        Case "+":   If k.PrecioRealTotal > 0 Then v = Abs(k.PrecioRealTotal)    'Solo positivos
        Case "-":   If k.PrecioRealTotal < 0 Then v = Abs(k.PrecioRealTotal)    'Solo negativos
        Case "*":   v = k.PrecioRealTotal           'Suma real
        Case Else:  v = Abs(k.PrecioRealTotal)      'Suma de valor absoluto
        End Select
        
        If v <> 0 Then
            'Redondea al formato de P.Total               '*** MAKOTO 13/feb/01
            v = MiCCur(Format$(v, Me.FormatoMoneda))
            col.Add 0, v
        End If
    Next i
    
    Set GeneraAsientoIVPrecioTotal_Lote = col
    Set col = Nothing
End Function

'Costo total con recargos
Private Function GeneraAsientoIVCostoTotal2_Lote(ByRef gnc As GNComprobante) As colAsientoTemp
    Dim i As Long, k As IVKardex, r As IVKardexRecargo
    Dim col As colAsientoTemp
    
    Set col = GeneraAsientoIVCostoTotal(0)
    
    For i = 1 To gnc.CountIVKardexRecargo
        Set r = gnc.IVKardexRecargo(i)
        col.Add 0, r.Valor
    Next i
    
    Set GeneraAsientoIVCostoTotal2_Lote = col
    Set col = Nothing
End Function

'Precio total con recargos
Private Function GeneraAsientoIVPrecioTotal2_Lote(ByRef gnc As GNComprobante) As colAsientoTemp
    Dim i As Long, k As IVKardex, r As IVKardexRecargo
    Dim col As colAsientoTemp
    
    Set col = GeneraAsientoIVPrecioTotal(0)
    
    For i = 1 To gnc.CountIVKardexRecargo
        Set r = gnc.IVKardexRecargo(i)
        col.Add 0, r.Valor
    Next i
    Set GeneraAsientoIVPrecioTotal2_Lote = col
    Set col = Nothing
End Function

'***Agregado. 02/ago/2004. Angel
'Total de Descuentos x Item
Private Function GeneraAsientoIVDescItemTotal_Lote(ByRef gnc As GNComprobante) As colAsientoTemp
    Dim col As colAsientoTemp, Tdesc_item As Currency
    
    Set col = New colAsientoTemp
    Tdesc_item = gnc.IVKardexDescItemTotal
    col.Add 0, Tdesc_item
    Set GeneraAsientoIVDescItemTotal_Lote = col
    Set col = Nothing
End Function



Public Function TotalizaAsientoRepetido() As Boolean
    Dim ctld As CTLibroDetalle, i As Long, j As Long, ctld2 As CTLibroDetalle, rt As Boolean
    rt = False
    i = 1
    Do While i <= mcolCTLibroDetalle.Count        'Uso Do While para que evalue cada vez la condicion (Con For no está bien)
        Set ctld = mcolCTLibroDetalle.item(i)
        
        'Busca repetidos
        For j = mcolCTLibroDetalle.Count To i + 1 Step -1     'En orden al revez
            Set ctld2 = mcolCTLibroDetalle.item(j)
            
            'Si encuentra repetido
            If (ctld2.CodCuenta = ctld.CodCuenta) And (ctld2.Debe = 0 And ctld.Debe = 0) Then
                
                ctld.Haber = ctld.Haber + ctld2.Haber
                mcolCTLibroDetalle.Remove j
                rt = True
            ElseIf (ctld2.CodCuenta = ctld.CodCuenta) And (ctld2.Haber = 0 And ctld.Haber = 0) Then
                ctld.Debe = ctld.Debe + ctld2.Debe
                mcolCTLibroDetalle.Remove j
                rt = True
            End If
        Next j
        i = i + 1
    Loop
    TotalizaAsientoRepetido = rt
End Function


Public Function Cuadrado_parcial(ByRef Desde As Long) As Boolean
    Dim i As Long, Debe As Currency, Haber As Currency
    
    'Calcula total de Debe y Haber en SUCRES
    For i = Desde To CountCTLibroDetalle
        Debe = Debe + CTLibroDetalle(i).DebeSucre
        Haber = Haber + CTLibroDetalle(i).HaberSucre
        'Debug.Print i, Debe, Haber
    Next i
    'Desde = CountCTLibroDetalle + 1
    Cuadrado_parcial = (Debe = Haber)
End Function

Public Sub RecuperaInfConsFinal()
    Dim posini As Integer, posfin As Integer, i As Integer
    Dim v As Variant, cadena As String, pos As Integer
    With mProps
        posini = InStr(1, .Descripcion, "[")
        If posini <> 0 Then
            posfin = InStr(posini, .Descripcion, "]")
            .Efectivo = Mid$(.Descripcion, posfin + 2, Len(.Descripcion))
        Else
            pos = InStr(1, .Descripcion, "- Efectivo (")
            If pos <> 0 Then
                .Efectivo = Mid$(.Descripcion, pos)
            End If
        End If
        If ((posini > 0) And (posfin > 0)) Then
            cadena = Mid$(.Descripcion, posini, posfin - posini)
            'Quita los corchetes
            cadena = Mid$(cadena, 2)
            cadena = Mid$(cadena, 1, Len(cadena) - 1)
            v = Split(cadena, ";")
            For i = 0 To UBound(v)
                Select Case i
                Case 0
                    .Telefono = v(i)
                Case 1
                    .RUC = v(i)
                Case 2
                    .Direccion = v(i)
                Case 3
                End Select
            Next i
            .Descripcion = Mid$(.Descripcion, 1, posini - 1)
        End If
        
        'se va ha cortar la palabra efectivo
        posini = InStr(1, .Descripcion, "- Efectivo (")
        If posini <> 0 Then
            .Descripcion = Mid$(.Descripcion, 1, posini - 1)
        End If
'        End If
    End With
End Sub

Public Property Let Telefono(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.Telefono", MSGERR_SOLOVER
    
    If Len(value) > 20 Then        '*** MAKOTO 22/jul/00 80 --> 120 Modificado
        Err.Raise ERR_INVALIDO, "GNComprobante.Telefono", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.Telefono <> value Then
        mProps.Telefono = value
        mbooModificado = True
    End If
End Property

Public Property Get Telefono() As String
    Telefono = Trim$(mProps.Telefono)
End Property

Public Property Let Direccion(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.Direccion", MSGERR_SOLOVER
    
    If Len(value) > 50 Then        '*** MAKOTO 22/jul/00 80 --> 120 Modificado
        Err.Raise ERR_INVALIDO, "GNComprobante.Direccion", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.Direccion <> value Then
        mProps.Direccion = value
        mbooModificado = True
    End If
End Property

Public Property Get Direccion() As String
    Direccion = Trim$(mProps.Direccion)
End Property

Public Property Let RUC(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RUC", MSGERR_SOLOVER
    
    If Len(value) > 13 Then        '*** MAKOTO 22/jul/00 80 --> 120 Modificado
        Err.Raise ERR_INVALIDO, "GNComprobante.RUC", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.RUC <> value Then
        mProps.RUC = value
        mbooModificado = True
    End If
End Property

Public Property Get RUC() As String
    RUC = Trim$(mProps.RUC)
End Property

Public Property Let GrabaDatosPC(ByVal value As Boolean)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.GrabaDatosPC", MSGERR_SOLOVER
    'Solo cuando cambia el valor
    If mProps.GrabaDatosPC <> value Then
        mProps.GrabaDatosPC = value
        mbooModificado = True
    End If
End Property

Public Property Get GrabaDatosPC() As Boolean
    GrabaDatosPC = mProps.GrabaDatosPC
End Property

Public Property Let Efectivo(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.efectivo", MSGERR_SOLOVER
    
    If Len(value) > 50 Then        '*** MAKOTO 22/jul/00 80 --> 120 Modificado
        Err.Raise ERR_INVALIDO, "GNComprobante.efectivo", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.Efectivo <> value Then
        mProps.Efectivo = value
        mbooModificado = True
    End If
End Property

Public Property Get Efectivo() As String
    Efectivo = Trim$(mProps.Efectivo)
End Property

'***Agregado. 29/jul/2004. Angel
Public Function IVKardexRecargoItemTotal() As Currency
    Dim t As Currency, i As Long, ivk As IVKardex, v As Currency
        
    For i = 1 To CountIVKardex
        Set ivk = IVKardex(i)
        v = ivk.Cantidad * ivk.ValorRecargoItem
        t = t + v               'Suma valor de recargo de item
    Next i
    
    IVKardexRecargoItemTotal = Abs(t)            '*** MAKOTO 29/ene/01 Mod.
    Set ivk = Nothing
End Function

'Agregado jeaa 30/09/04 para cambio de estado de impresion
'** oliver
' Es nesecario cambiar el estado via SQL, para no tener q acceder al comprobante,
' recuperarlo para modificar y grabar, se demora mucho
' y una ves modificado via SQL, solo cambiamos la propiedad
' del objeto mProps.Impresion a IMPRESION_YAIMPRIMIO para
' que si este en meroria el comprobante todavia y vuelve a
' imprimir ya sepa que ya imprimio.
Public Sub CambiaEstadoImpresion()
    Dim tid As Variant, sql As String
        'Cambia la bandera de impresion a ya imprimio
        'Si está anulado o no aprobado, no pasa al estado 'Despachado'     '*** MAKOTO 15/dic/00
        sql = "UPDATE GNComprobante SET Impresion=" & IMPRESION_YAIMPRIMIO & _
              " WHERE (TransID=" & mProps.transid & ") AND (Impresion=" & IMPRESION_NOIMPRIME & ")"
        Me.Empresa.Execute sql, True
        mProps.Impresion = IMPRESION_YAIMPRIMIO
End Sub

Public Property Let Impresion(ByVal value As Byte)
        mProps.Impresion = value
End Property

Public Property Get Impresion() As Byte
    Impresion = mProps.Impresion
End Property

Public Function ControlarLimiteItem( _
                    ByVal CodInventario As String, _
                    ByRef CantLimite As Currency, _
                    ByRef cantGrabada As Currency) As Boolean
    Dim sql As String, rs As Recordset
    CantLimite = 0
    cantGrabada = 0
    'Obtiene Suma de cantidad de los comprobantes con los que vamos a comparar (Puede haber varios)
    sql = "SELECT Sum(ivk.Cantidad) AS SumaCant " & _
          "FROM GNComprobante gc INNER JOIN " & _
                        "(IVInventario iv INNER JOIN IVKardex ivk " & _
                            "ON iv.IdInventario = ivk.IdInventario) " & _
                    "ON gc.TransID=ivk.TransID "
'          "WHERE (gc.CodTrans='" & Me.GNTrans.IVVerificaLimiteCon & "') AND "
    '*** MAKOTO 25/ene/01 Mod. Para sumar al presupuesto las transacción con 'M'. ejm. 'HC' y 'HCM' (M es de Modificación)
    sql = sql & "WHERE (gc.CodTrans = '" & Mid$(Me.GNTrans.CodTrans, 1, Len(Me.GNTrans.CodTrans) - 1) & "') AND " & _
            "(gc.Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & ")) AND " & _
            "(gc.IdCentro=" & Me.idCentro & ") AND " & _
            "(iv.CodInventario='" & CodInventario & "')"
    Set rs = Me.Empresa.OpenRecordset(sql)
    If Not IsNull(rs!sumaCant) Then CantLimite = rs!sumaCant
    rs.Close
    'Obtiene Suma de cantidad de los comprobantes 'hermanos' que son del mismo C.Costo
    sql = "SELECT Sum(ivk.Cantidad) AS SumaCant " & _
          "FROM GNTrans gt INNER JOIN " & _
                    "(GNComprobante gc INNER JOIN " & _
                        "(IVInventario iv INNER JOIN IVKardex ivk " & _
                            "ON iv.IdInventario = ivk.IdInventario) " & _
                        "ON gc.TransID=ivk.TransID) " & _
                    "ON gt.CodTrans=gc.CodTrans " & _
         "WHERE (gt.VerificaLimiteCon = '" & Mid$(Me.GNTrans.CodTrans, 1, Len(Me.GNTrans.CodTrans) - 1) & "') AND " & _
            "(gc.Estado<>" & ESTADO_ANULADO & ") AND " & _
            "(gc.IdCentro=" & Me.idCentro & ") AND " & _
            "(iv.CodInventario='" & CodInventario & "') AND " & _
            "(gc.TransID<>" & Me.transid & ") "      'Hay que excluir éste comprobante mismo
    Set rs = Me.Empresa.OpenRecordset(sql)
    If Not IsNull(rs!sumaCant) Then cantGrabada = rs!sumaCant
    rs.Close
    Set rs = Nothing
    ControlarLimiteItem = True
End Function
'jeaa 6 / 7 / 2005
Private Sub VerificaNumDocRepetido()
    Dim sql As String, rs As Recordset, obj As GNComprobante
    
    sql = " select  case when len(NumSecuencial)=13 then NumSecuencial "
    sql = sql & " when len(NumSecuencial)= 7 then NumSerieEstablecimiento+numSeriePunto+NumSecuencial  end as numComp "
    sql = sql & " from anexos inner join gncomprobante gnc inner join pcprovcli pc on gnc.IdProveedorRef=pc.idprovcli "
    sql = sql & " ON gnc.TransId = Anexos.TransId where pc.idprovcli=" & mProps.IdProveedorRef & " and "
    sql = sql & " Anexos.NumAutSRI = '" & mProps.NumAutSRI & "'"
    If Len(mProps.NumDocRef) = 13 Then
        sql = sql & " and " & " NumSecuencial  ='" & mProps.NumDocRef & "'"
    ElseIf Len(mProps.NumDocRef) = 7 Then
        sql = sql & "' and " & " NumSerieEstablecimiento+numSeriePunto+NumSecuencial  ='" & mProps.NumDocRef & "' "
    End If
    
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    If Not rs.EOF Then
        If Me.NumDocRef = rs!numComp Then
                Err.Raise ERR_INVALIDO, "GnComprobante.Verificación", _
                "GnComprobante: El número que identifican al documento corresponden " & vbCrLf & _
                "a uno ingresado con anterioridad del mismo Proveedor"
        End If
    End If
    Set rs = Nothing
    
End Sub


'jeaa 27/07/2005
Public Sub CambiaCodTrans(ByVal value As String)
    Dim i As Integer, codm As String
    
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.CodTrans", MSGERR_SOLOVER
    
    If Len(value) > 5 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.CodTrans", MSGERR_INVALIDO
    End If
    
    mProps.CodTrans = value
    mbooModificado = True
    
End Sub


'*** jeaa 13/10/2005
Public Function ListaTSKardexRetAsociada() As Variant
    Dim sql As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As DAO.QueryDef
    Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsTSKardexRetAsociada")
    qdef.Parameters("tid") = mProps.transid
    qdef.Parameters("Cotizacion") = Me.Cotizacion("")
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Dim cmd As ADODB.Command
    Set cmd = New ADODB.Command
    cmd.ActiveConnection = mProps.objEmpresa.Coneccion
    
    'Si la base es de JET
    If mProps.objEmpresa.TipoDB = TIPODB_JET Then
        cmd.CommandType = adCmdTable
        cmd.CommandText = "spConsTSKardexRetAsociada"
        cmd.Parameters.Append cmd.CreateParameter("tid", adInteger, adParamInput, , mProps.transid)
        Set rs = cmd.Execute
       
    'Si la base es de SQLSvr
    Else
        sql = "spConsTSKardexRetAsociada " & mProps.transid & "," & Me.Cotizacion("")
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
    End If
#End If

    Set ListaTSKardexRetAsociada = rs
    Set rs = Nothing
End Function

'*** JEAA 14/10/2005
'CodInventario: Código de item que vamos a verificar
'CantLimite:    Devuelve cantidad de límite
'CantGrabada:   Devuelve cantidad que ya está grabada en otros comprobantes
Public Function VerificarLimiteItemConTrans( _
                    ByVal CodTrans As String, _
                    ByVal NumTrans As Long, _
                    ByVal IdTransFuente As Long, _
                    ByVal CodInventario As String, _
                    ByRef CantLimite As Currency, _
                    ByRef cantGrabada As Currency) As Boolean
    Dim sql As String, rs As Recordset
    CantLimite = 0
    cantGrabada = 0
    'Obtiene Suma de cantidad de los comprobantes con los que vamos a comparar (Puede haber varios)
    sql = "SELECT Sum(ivk.Cantidad) AS SumaCant " & _
          "FROM GNComprobante gc INNER JOIN " & _
                        "(IVInventario iv INNER JOIN IVKardex ivk " & _
                            "ON iv.IdInventario = ivk.IdInventario) " & _
                    "ON gc.TransID=ivk.TransID "
'          "WHERE (gc.CodTrans='" & Me.GNTrans.IVVerificaLimiteCon & "') AND "
    '*** MAKOTO 25/ene/01 Mod. Para sumar al presupuesto las transacción con 'M'. ejm. 'HC' y 'HCM' (M es de Modificación)
    If Me.GNTrans.IVactualizaTRansFuente Then
        sql = sql & " WHERE (gc.CodTrans IN ('" & Me.GNTrans.IVVerificaLimiteCon & "')) AND "
        sql = sql & " (gc.Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & "))  "
    Else
        If Not Me.GNTrans.ListaTranVerificaLimite Then
            sql = sql & " WHERE (gc.CodTrans IN ('" & Me.GNTrans.IVVerificaLimiteCon & "', '" & _
                                                 Me.GNTrans.IVVerificaLimiteCon & "M')) AND " & _
                        "(gc.Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & "))  "
        Else
            sql = sql & " WHERE gc.CodTrans IN (" & PreparaListaTransLimite(Me.GNTrans.TransDespuesDevolucion) & ")"
            sql = sql & " AND  (gc.Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & "))  "
        
        End If
    End If
        'jeaa 17/05/2006
        If Me.GNTrans.IVControlaLimitePorFactura = False And Me.GNTrans.IVControlaLimitePorFacturaxLinea = False Then

            sql = sql & " and (gc.IdCentro=" & Me.idCentro & ") "
        End If
        sql = sql & " and (iv.CodInventario='" & CodInventario & "')"
        If Me.GNTrans.IVControlaLimitePorFactura Or Me.GNTrans.IVControlaLimitePorFacturaxLinea Then
            If NumTrans = 0 Then
                sql = sql & " and ( GC.TRANSID=" & Me.IdTransFuente & " or  gc.idtransfuente =" & Me.IdTransFuente & ")"
            Else
                If Me.GNTrans.IVTipoTrans <> "I" Then
                    sql = sql & " and ( GC.NUMTRANS=" & NumTrans & " or  gc.idtransfuente =" & Me.IdTransFuente & ")"
                Else
                    sql = sql & " and ( GC.TRANSID=" & Me.IdTransFuente & " or  gc.idtransfuente =" & Me.IdTransFuente & ")"
                End If
            End If
        End If
            
        Set rs = Me.Empresa.OpenRecordset(sql)
        
        
    If Not IsNull(rs!sumaCant) Then CantLimite = rs!sumaCant
    rs.Close
    'Obtiene Suma de cantidad de los comprobantes 'hermanos' que son del mismo C.Costo
    sql = "SELECT Sum((ivk.Cantidad)) AS SumaCant " & _
          "FROM GNTrans gt INNER JOIN " & _
                    "(GNComprobante gc INNER JOIN " & _
                        "(IVInventario iv INNER JOIN IVKardex ivk " & _
                            "ON iv.IdInventario = ivk.IdInventario) " & _
                        "ON gc.TransID=ivk.TransID) " & _
                    "ON gt.CodTrans=gc.CodTrans "
        sql = sql & " WHERE  (gc.Estado<>" & ESTADO_ANULADO & ")  "
        If Not Me.GNTrans.ListaTranVerificaLimite Then
            sql = sql & " AND ((gt.VerificaLimiteCon='" & Me.GNTrans.IVVerificaLimiteCon & "' or (gc.codtrans='" & Me.CodTrans & "M')) ) "
        Else
'            sql = sql & " AND (gt.TransDespuesDevolucion ='" & Me.GNTrans.TransDespuesDevolucion & "') "
        End If
            
            If Me.GNTrans.IVControlaLimitePorFactura = False Then
                sql = sql & " AND (gc.IdCentro=" & Me.idCentro & ")  "
            End If
            sql = sql & "  AND (iv.CodInventario='" & CodInventario & "') AND " & _
            "(gc.TransID<>" & Me.transid & ")"
'            If Me.GNTrans.IVTipoTrans <> "I" Then
                If Me.GNTrans.IVControlaLimitePorFactura Then
                    sql = sql & " and gc.idtransfuente=" & IdTransFuente
                End If
'            Else
            If Not Me.GNTrans.ListaTranVerificaLimite Then
                If InStr(1, UCase(Me.Empresa.GNOpcion.NombreEmpresa), "MEGA") = 0 Then
                    sql = sql & " and (gc.codtrans<>'" & Me.GNTrans.IVVerificaLimiteCon & "M" & "')"
                End If
            Else
                sql = sql & " and (gc.codtrans not in (" & PreparaListaTransM(Me.GNTrans.TransDespuesDevolucion) & "))"
            End If
                
'            End If
                  'Hay que excluir éste comprobante mismo
        Set rs = Me.Empresa.OpenRecordset(sql)
    If Not IsNull(rs!sumaCant) Then cantGrabada = rs!sumaCant
    rs.Close
    Set rs = Nothing
   VerificarLimiteItemConTrans = True
End Function


Public Property Let Observacion(ByVal value As String) 'AUC 31/08/2005
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.observacion", MSGERR_SOLOVER
    If Len(value) > 80 Then        '*** MAKOTO 22/jul/00 80 --> 120 Modificado
        Err.Raise ERR_INVALIDO, "GNComprobante.Observacion", MSGERR_INVALIDO
    End If
    'Solo cuando cambia el valor
    If mProps.Observacion <> value Then
        mProps.Observacion = value
        mbooModificado = True
    End If
End Property
Public Property Get Observacion() As String 'AUC 31/08/2005
    Observacion = Trim$(mProps.Observacion)
End Property

'--------------------------


Public Function VerificaPasswordVendedor(CodVendedor As String, Password As String) As FCVendedor
    Dim sql As String, objVen As FCVendedor, k As String
    Dim rs As Recordset
    k = CifrarTexto(LCase$(Password), "FCVendedor")
    sql = "SELECT password FROM FCVendedor " & _
          "WHERE Codvendedor='" & CodVendedor & "' AND password='" & k & "'"
    Set rs = Me.Empresa.OpenRecordset(sql)
    If rs.EOF Then
        Set VerificaPasswordVendedor = Nothing
    Else
        Set VerificaPasswordVendedor = objVen                 'Devuelve referencia al Usuario
        Set objVen = Nothing
        End If
    Set rs = Nothing
End Function


Public Sub GrabarConCodigoVendedor(VerificaCuadrado As Boolean, _
                  VerificaInteg As Boolean)
    Exit Sub
End Sub

Public Function IVRecargoIVA(NoProrrateados As Boolean, Prorrateados As Boolean) As Currency
    Dim t As Currency, gnt As GNTransRecargo, i As Long
    
    If Prorrateados And NoProrrateados Then
        For i = 1 To CountIVKardexRecargo
            If mProps.objEmpresa.GNOpcion.ObtenerValor("RecDescParaIVA") = IVKardexRecargo(i).CodRecargo Then
                t = IVKardexRecargo(i).Valor
            End If
        Next i
    ElseIf Prorrateados Then
        For i = 1 To CountIVKardexRecargo
            Set gnt = Me.GNTrans.BuscaRecargo(IVKardexRecargo(i).CodRecargo)
            If Not (gnt Is Nothing) Then
                If mProps.objEmpresa.GNOpcion.ObtenerValor("RecDescParaIVA") = IVKardexRecargo(i).CodRecargo Then
                    If gnt.BandProrrateado Then
                        t = IVKardexRecargo(i).Valor
                    End If
                    If gnt.BandProrrateado <> IVKardexRecargo(i).BandProrrateado Then '18/3/2004 Diego  aqui actualiza  el valor prorrateado
                        IVKardexRecargo(i).BandProrrateado = gnt.BandProrrateado
                    End If
                End If
            End If
        Next i
    Else
        For i = 1 To CountIVKardexRecargo
            Set gnt = GNTrans.BuscaRecargo(IVKardexRecargo(i).CodRecargo)
            If Not (gnt Is Nothing) Then
                If mProps.objEmpresa.GNOpcion.ObtenerValor("RecDescParaIVA") = IVKardexRecargo(i).CodRecargo Then
                    If Not gnt.BandProrrateado Then
                        t = IVKardexRecargo(i).Valor
                    End If
                    If gnt.BandProrrateado <> IVKardexRecargo(i).BandProrrateado Then '18/3/2004 Diego  aqui actualiza  el valor prorrateado
                        IVKardexRecargo(i).BandProrrateado = gnt.BandProrrateado
                    End If
                End If
            End If
        Next i
    End If
    IVRecargoIVA = t
End Function

Public Function IVRecargoAntesIVA(NoProrrateados As Boolean, Prorrateados As Boolean) As Currency
    Dim t As Currency, gnt As GNTransRecargo, i As Long
    
    If Prorrateados And NoProrrateados Then
        For i = 1 To CountIVKardexRecargo
            If mProps.objEmpresa.GNOpcion.ObtenerValor("RecDescParaIVA") = IVKardexRecargo(i).CodRecargo Then
                Exit For
            Else
                t = t + IVKardexRecargo(i).Valor
            End If
        Next i
    ElseIf Prorrateados Then
        For i = 1 To CountIVKardexRecargo
            Set gnt = Me.GNTrans.BuscaRecargo(IVKardexRecargo(i).CodRecargo)
            If Not (gnt Is Nothing) Then
                If gnt.BandProrrateado Then
                    If mProps.objEmpresa.GNOpcion.ObtenerValor("RecDescParaIVA") = IVKardexRecargo(i).CodRecargo Then
                        Exit For
                    Else
                        t = t + IVKardexRecargo(i).Valor
                    End If
                End If
                If gnt.BandProrrateado <> IVKardexRecargo(i).BandProrrateado Then '18/3/2004 Diego  aqui actualiza  el valor prorrateado
                    IVKardexRecargo(i).BandProrrateado = gnt.BandProrrateado
                End If
            End If
            
        Next i
    Else
        For i = 1 To CountIVKardexRecargo
            
            Set gnt = GNTrans.BuscaRecargo(IVKardexRecargo(i).CodRecargo)
            If Not (gnt Is Nothing) Then
                If Not gnt.BandProrrateado Then
                    If mProps.objEmpresa.GNOpcion.ObtenerValor("RecDescParaIVA") = IVKardexRecargo(i).CodRecargo Then
                        Exit For
                    Else
                        t = t + IVKardexRecargo(i).Valor
                    End If
                End If
                If gnt.BandProrrateado <> IVKardexRecargo(i).BandProrrateado Then '18/3/2004 Diego  aqui actualiza  el valor prorrateado
                    IVKardexRecargo(i).BandProrrateado = gnt.BandProrrateado
                End If
            End If
        Next i
    End If
    IVRecargoAntesIVA = t
End Function

'AUC 29/12/05 Verifica existencia para hacer la receta
Public Sub VerificarExistenciaReceta()
    Dim item As IVInventario, i As Long, ivk As IVKardex, j As Long, ivk2 As IVKardex
    Dim exist As Currency, sumaCant As Currency
    Dim cant_ori As Currency

    'Si no está configurado para verificar la existencia ó no es egreso, sale
    If Not Me.GNTrans.IVVerificaExist Or Me.GNTrans.IVTipoTrans <> "C" Then
        Exit Sub
    End If
    For i = 1 To CountIVKardex
        Set ivk = IVKardex(i)
        Set item = Empresa.RecuperaIVInventario(ivk.IdInventario)
        If Not (item Is Nothing) Then
            If Not item.BandServicio Then
                exist = item.Existencia(ivk.CodBodega)
                sumaCant = 0
                'Obtiene la cantidad original en caso de modificación
                cant_ori = VerificarExistencia_CantOrig(ivk.Id)
                'Obtiene la suma de cantidad del mismo ítem en la misma transacción
                For j = 1 To CountIVKardex
                    Set ivk2 = IVKardex(j)
                    'En otra fila,
                    If j <> i Then
                        'Si hay un item con el mismo item y la misma bodega
                        If ivk2.IdInventario = ivk.IdInventario And _
                            ivk2.IdBodega = ivk.IdBodega Then
                            sumaCant = sumaCant + ivk2.Cantidad
                            'Resta la cantidad original en caso de modificación
                            sumaCant = sumaCant - VerificarExistencia_CantOrig(ivk2.Id)
                        End If
                    End If
                Next j
                Set ivk2 = Nothing
                'Si se hace negativa al sumar
                If exist + ivk.Cantidad + sumaCant - cant_ori < 0 Then
                    Err.Raise ERR_INVALIDO, "GNComprobante.VerificarDatos", _
                        "Al grabar la transacción la existencia se hace negativa, por lo que no puede grabarla." & vbCr & vbCr & _
                       "Item: " & item.CodInventario & " " & item.Descripcion & vbCr & _
                        "Existencia: " & exist & vbCr & _
                        "Cantidad: " & ivk.Cantidad & vbCr & _
                        "Cant. en otra fila: " & sumaCant & vbCr & _
                        "Existencia nueva: " & exist + ivk.Cantidad + sumaCant - cant_ori
                End If
            End If
        End If
    Next i
    Set ivk = Nothing
    Set item = Nothing
End Sub


'jeaa 25/04/2005
Public Property Let Comision(ByVal value As Currency)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.Comision", MSGERR_SOLOVER
    mProps.Comision = value
    mbooModificado = True
End Property

Public Property Get Comision() As Currency
    Comision = mProps.Comision
End Property

'AUC 29/12/05 Verifica existencia para hacer la receta
Public Function NoExisteParaTransformar() As Boolean
   Dim item As IVInventario, i As Long, ivk As IVKardex, j As Long, ivk2 As IVKardex
    Dim exist As Currency, sumaCant As Currency
    Dim msgError As Variant
    Dim cant_ori As Currency
   'Si no está configurado para verificar la existencia ó no es egreso, sale
    If Not Me.GNTrans.IVVerificaExist Or Me.GNTrans.IVTipoTrans <> "C" Then
        Exit Function
    End If
    For i = 1 To CountIVKardex
        Set ivk = IVKardex(i)
        Set item = Empresa.RecuperaIVInventario(ivk.IdInventario)
        If Not (item Is Nothing) Then
            If Not item.BandServicio Then
                exist = item.Existencia(ivk.CodBodega)
                sumaCant = 0
                'Obtiene la cantidad original en caso de modificación
                cant_ori = VerificarExistencia_CantOrig(ivk.Id)
                'Obtiene la suma de cantidad del mismo ítem en la misma transacción
                For j = 1 To CountIVKardex
                    Set ivk2 = IVKardex(j)
                    'En otra fila,
                    If j <> i Then
                        'Si hay un item con el mismo item y la misma bodega
                        If ivk2.IdInventario = ivk.IdInventario And _
                            ivk2.IdBodega = ivk.IdBodega Then
                            sumaCant = sumaCant + ivk2.Cantidad
                            'Resta la cantidad original en caso de modificación
                            sumaCant = sumaCant - VerificarExistencia_CantOrig(ivk2.Id)
                        End If
                    End If
                Next j
                Set ivk2 = Nothing
                'Si se hace negativa al sumar
                If exist + ivk.Cantidad + sumaCant - cant_ori < 0 Then
                    msgError = "No puede generar la transformación la existencia se hace negativa" & vbCr & _
                               "Intente con mas items " & vbCr & vbCr & _
                               "Item: [" & item.CodInventario & "] " & item.Descripcion & vbCr & _
                              "Existencia: " & exist & vbCr & _
                               "Cantidad: " & ivk.Cantidad & vbCr & _
                               "Cant. en otra fila: " & sumaCant & vbCr & _
                               "Existencia nueva: " & exist + ivk.Cantidad + sumaCant - cant_ori
                    MsgBox msgError, vbInformation
                    NoExisteParaTransformar = True
                    Exit Function
                End If
            End If
        End If
    Next i
    Set ivk = Nothing
    Set item = Nothing
End Function

Public Property Let NumSerieEstablecimiento(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.NumSerieEstablecimiento", MSGERR_SOLOVER
    If Not IsNumeric(value) Then Err.Raise ERR_INVALIDO, "GNComprobante.NumAutSRI", MSGERR_INVALIDO
    
    If Len(value) > 3 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.NumSerieEstablecimiento", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.NumSerieEstablecimiento <> value Then
        mProps.NumSerieEstablecimiento = value
        mbooModificado = True
    End If
End Property

Public Property Get NumSerieEstablecimiento() As String
    NumSerieEstablecimiento = Trim$(mProps.NumSerieEstablecimiento)
End Property

Public Property Let NumSeriePunto(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.NumSeriePunto", MSGERR_SOLOVER
    If Not IsNumeric(value) Then Err.Raise ERR_INVALIDO, "GNComprobante.NumSeriePunto", MSGERR_INVALIDO
    
    If Len(value) > 3 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.NumSeriePunto", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.NumSeriePunto <> value Then
        mProps.NumSeriePunto = value
        mbooModificado = True
    End If
End Property

Public Property Get NumSeriePunto() As String
    NumSeriePunto = Trim$(mProps.NumSeriePunto)
End Property


Public Property Let FechaCaducidad(value As Date)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.FechaCaducidad", MSGERR_SOLOVER
    
    'Solo cuando cambia el valor
    If mProps.FechaCaducidad <> value Then
        mProps.FechaCaducidad = value
        mbooModificado = True
    End If
End Property

Public Property Get FechaCaducidad() As Date
    FechaCaducidad = mProps.FechaCaducidad
End Property

'Actualiza el detalle de item-proveedor
'signo : '+':suma, '-':resta
Friend Sub ActualizaDetalleItemProveedor()
    Dim sql As String, i As Long
    Dim rs As Recordset
    If CountIVKardex = 0 Then Exit Sub     'Si no tiene detalle de IVKardex, sale
    For i = 1 To CountIVKardex
        sql = "select IdProveedorDetalle from IvProveedorDetalle"
        sql = sql & " where IdInventario=" & IVKardex(i).IdInventario
        If Me.GNTrans.ClienteVisible Then
            sql = sql & " and IdProveedor= " & Me.IdClienteRef
        ElseIf Me.GNTrans.ProveedorVisible Then
            sql = sql & " and IdProveedor= " & Me.IdProveedorRef
        End If
        Set rs = Me.Empresa.OpenRecordset(sql)
        If rs.RecordCount = 0 Then
            'Aumenta el rpveedor al item
            sql = " insert into IvProveedorDetalle"
            sql = sql & " (IdInventario, IdProveedor,cantidad,costounitario, Fecha)"
            If Me.GNTrans.ClienteVisible Then
                sql = sql & " values(" & IVKardex(i).IdInventario & "," & Me.IdClienteRef & "," & IVKardex(i).Cantidad * -1 & "," & IVKardex(i).PrecioReal & ", '" & Me.FechaTrans & "'" & ")"
            ElseIf Me.GNTrans.ProveedorVisible Then
                sql = sql & " values(" & IVKardex(i).IdInventario & "," & Me.IdProveedorRef & "," & IVKardex(i).Cantidad & "," & IVKardex(i).CostoReal & ", '" & Me.FechaTrans & "'" & ")"
            End If
                
        Else
            'si no actualiza
            sql = " update IvProveedorDetalle"
            
            If Me.GNTrans.ClienteVisible Then
                sql = sql & " set Cantidad=" & IVKardex(i).Cantidad * -1 & ", CostoUnitario=" & IVKardex(i).PrecioReal & ", Fecha='" & Me.FechaTrans & "'"
                sql = sql & " where IdProveedorDetalle =" & rs.Fields("IdProveedorDetalle")
            ElseIf Me.GNTrans.ProveedorVisible Then
                sql = sql & " set Cantidad=" & IVKardex(i).Cantidad & ", CostoUnitario=" & IVKardex(i).CostoReal & ", Fecha='" & Me.FechaTrans & "'"
                sql = sql & " where IdProveedorDetalle =" & rs.Fields("IdProveedorDetalle")
            End If
        End If
        mProps.objEmpresa.Execute sql, True
        
        'en la otra tabla /jeaa 25/04/2008
        sql = "select IdInvPro from InventarioProveedor "
        sql = sql & " where IdInventario=" & IVKardex(i).IdInventario
        If Me.GNTrans.ClienteVisible Then
            sql = sql & " and IdProveedor= " & Me.IdClienteRef
        ElseIf Me.GNTrans.ProveedorVisible Then
            sql = sql & " and IdProveedor= " & Me.IdProveedorRef
        End If
        Set rs = Me.Empresa.OpenRecordset(sql)
        If rs.RecordCount = 0 Then
            'Aumenta el rpveedor al item
            sql = " insert into InventarioProveedor "
            'sql = sql & " (IdInventario, IdProveedor,cantidad,costounitario, Fecha)"
            sql = sql & " (IdInventario,IdProveedor,Cantidad, CostoUnitario, FechaGrabado)"
            If Me.GNTrans.ClienteVisible Then
                sql = sql & " values(" & IVKardex(i).IdInventario & "," & Me.IdClienteRef & "," & IVKardex(i).Cantidad * -1 & "," & IVKardex(i).PrecioReal & ", '" & Me.FechaTrans & "'" & ")"
            ElseIf Me.GNTrans.ProveedorVisible Then
                sql = sql & " values(" & IVKardex(i).IdInventario & "," & Me.IdProveedorRef & "," & IVKardex(i).Cantidad & "," & IVKardex(i).CostoReal & ", '" & Me.FechaTrans & "'" & ")"
            End If
        Else
            'si no actualiza
            sql = " update InventarioProveedor "
            sql = sql & " set Cantidad=" & IVKardex(i).Cantidad & ", CostoUnitario=" & IVKardex(i).Costo & ", FechaGrabado='" & Me.FechaTrans & "'"
            sql = sql & " where IdInvPro =" & rs.Fields("IdInvPro")
        End If
        mProps.objEmpresa.Execute sql, True
        
        
        sql = " UPDATE IVInventario "
        If Me.GNTrans.ClienteVisible Then
            sql = sql & " set  IdProveedor = " & Me.IdClienteRef
        ElseIf Me.GNTrans.ProveedorVisible Then
            sql = sql & " set  IdProveedor = " & Me.IdProveedorRef
        End If
        sql = sql & " WHERE IdInventario= " & IVKardex(i).IdInventario
        mProps.objEmpresa.Execute sql, True
    Next i
End Sub

Private Sub RestaExistenciaPreparacion(Signo As String, IdInventario As Long, cant As Currency)
    Dim sql As String
    Dim a   As Currency
    If Signo = "+" Then
        a = 1
    Else
        a = -1
    End If
    sql = "Update IVExist "
    sql = sql & "SET IVExist.Exist = IVExist.Exist + " & cant * a
    sql = sql & " FROM IVExist "
    sql = sql & " WHERE   (IVExist.IdBodega = IdBodega) AND "
    sql = sql & " IVExist.IdInventario =" & IdInventario
    mProps.objEmpresa.Execute sql, True
End Sub

'AUC  este procedimiento es para borrar todos los kardex que no quiero mostrar el momento
' de cargar en la grilla es diferente al otro por la band modificado
Public Sub RemoveIVKardexPreparacion(ByVal ix As Long, Optional obj As IVKardex)
    'Cuando SoloVer está establecido a True, genera error
    If mcolIVKardex Is Nothing Then RecuperaIVKardex
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolIVKardex.Count
            If mcolIVKardex.item(ix) Is obj Then
                mcolIVKardex.Remove ix
                Exit For
            End If
        Next ix
        Debug.Assert True   'No se puede dar
    Else
        mcolIVKardex.Remove ix
   End If
End Sub

Public Property Let FechaDevol(value As Date)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.FechaDevol", MSGERR_SOLOVER
    'Solo cuando cambia el valor
    If mProps.FechaDevol <> value Then
        mProps.FechaDevol = value
        mbooModificado = True
        RaiseEvent FechaCambiado
    End If
End Property

Public Property Get FechaDevol() As Date
    FechaDevol = mProps.FechaDevol
End Property

Private Function VerificaTotalDespacho() As Boolean
    Dim gnc As GNComprobante, contLImite As Currency, cantGrabada As Currency
    Dim i As Long
    
    VerificarDespachoTotal contLImite, cantGrabada
    
    If contLImite = cantGrabada Then
        VerificaTotalDespacho = True
    Else
        VerificaTotalDespacho = False
    End If
    
    'verifica la transaccion actual
''''    For i = 1 To CountIVKardex
''''        If VerificarDespachoTotalItem(IVKardex(i).IdInventario, "IVVerificaLimite") Then
''''            VerificaTotalDespacho = True
''''        Else
''''            VerificaTotalDespacho = False
''''        End If
''''    Next i
    
    'verifica con la transaccion fuente
''''    Set gnc = gobjMain.EmpresaActual.RecuperaGNComprobante(Me.IdTransFuente)
''''
''''    If Not gnc Is Nothing Then
''''        For i = 1 To gnc.CountIVKardex
''''            If VerificarDespachoTotalItem(gnc.IVKardex(i).IdInventario, "IVVerificaLimite") Then
''''                VerificaTotalDespacho = True
''''            Else
''''                VerificaTotalDespacho = False
''''                i = gnc.CountIVKardex
''''            End If
''''        Next i
''''    Else
''''        VerificaTotalDespacho = True
''''    End If
    
End Function

Private Function VerificarDespachoTotalItem( _
                    ByVal idInv As Long, _
                     Tipo As String, Optional CodBodega As String) As Currency
    'Tipo:
    'IVVerificaLimite:  verifica  limite de cantidad de Item  con  transaccion  establecida
    'IVVerificaItemsFuente: verifica limite de  items  con transaccion  fuente
    Const TIPOFUENTE As String = "IVVerificaItemFuente"
    Const TIPONORMAL As String = "IVVerificaLimite"
    Dim CantLimite As Currency, cantGrabada As Currency, msg As String
    Dim fmt As String, i As Long, cant As Currency, cantOtras As Currency
    Dim gnc As GNComprobante
    Dim Saldo As Long
    On Error GoTo ErrTrap
   'Si no está configurado para verificar, sale no más
    If Not Me.GNTrans.IVVerificaLimite And Tipo = TIPONORMAL Then
        VerificarDespachoTotalItem = True
        Exit Function
    End If
    If Not Me.GNTrans.IVVerificaItemsFuente And Tipo = TIPOFUENTE Then
        ' si no esta configurado para que verifique con la transaccion fuente
        VerificarDespachoTotalItem = True
        Exit Function
    ElseIf Me.IdTransFuente = 0 And Tipo = TIPOFUENTE And _
                                Me.GNTrans.IVVerificaItemsFuente Then
        'Sale  si no ha sido importacion
        VerificarDespachoTotalItem = True
        Exit Function
    End If
    'Calcula cantidad utilizada en las filas del mismo comprobante
    'Verifica el límite
    If Tipo = TIPONORMAL Then
        Set gnc = gobjMain.EmpresaActual.RecuperaGNComprobante(Me.IdTransFuente)
        If Not gnc Is Nothing Then
             Me.VerificarDespachoItemConTrans gnc.CodTrans, gnc.NumTrans, Me.IdTransFuente, idInv, Saldo
            Set gnc = Nothing
        End If
   ElseIf Tipo = TIPOFUENTE Then
        Me.VerificaItemConFuente idInv, CantLimite
    End If
    'Devuelve saldo de cantidad para que pueda corregir en la pantalla
    If Saldo = 0 Then
        VerificarDespachoTotalItem = True
    Else
        VerificarDespachoTotalItem = False
    End If
    Exit Function
ErrTrap:
    DispErr
    Exit Function
End Function
Public Function VerificarDespachoItemConTrans( _
                    ByVal CodTrans As String, _
                    ByVal NumTrans As Long, _
                    ByVal IdTransFuente As Long, _
                    ByVal IdInventario As Long, _
                    ByRef Saldo As Long) As Boolean
    Dim sql As String, rs As Recordset
    Dim CantLimite As Long
    Dim cantGrabada As Long
    CantLimite = 0
    cantGrabada = 0
    'Obtiene Suma de cantidad de los comprobantes con los que vamos a comparar (Puede haber varios)
    sql = "SELECT Sum(ivk.Cantidad) AS SumaCant " & _
          "FROM GNComprobante gc INNER JOIN " & _
                        "(IVInventario iv INNER JOIN IVKardex ivk " & _
                            "ON iv.IdInventario = ivk.IdInventario) " & _
                    "ON gc.TransID=ivk.TransID "
    '*** MAKOTO 25/ene/01 Mod. Para sumar al presupuesto las transacción con 'M'. ejm. 'HC' y 'HCM' (M es de Modificación)
    sql = sql & "WHERE (gc.CodTrans IN ('" & Me.GNTrans.IVVerificaLimiteCon & "', '" & _
                                             Me.GNTrans.IVVerificaLimiteCon & "M')) AND " & _
            "(gc.Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & "))  "
        'jeaa 17/05/2006
        If Me.GNTrans.IVControlaLimitePorFactura = False Then
            sql = sql & " and (gc.IdCentro=" & Me.idCentro & ") "
        End If
            sql = sql & " and (iv.IdInventario=" & IdInventario & ")" & _
            " and (gc.codtrans='" & Me.GNTrans.IVVerificaLimiteCon & "' or gc.codtrans='" & Me.GNTrans.IVVerificaLimiteCon & "M" & " ')"
        If Me.GNTrans.IVControlaLimitePorFactura Then
            sql = sql & " and ( GC.NUMTRANS=" & NumTrans & " or  gc.idtransfuente =" & Me.IdTransFuente & ")"
        End If
    Set rs = Me.Empresa.OpenRecordset(sql)
    If Not IsNull(rs!sumaCant) Then CantLimite = rs!sumaCant
    rs.Close
    'Obtiene Suma de cantidad de los comprobantes 'hermanos' que son del mismo C.Costo
    sql = "SELECT Sum((ivk.Cantidad)) AS SumaCant " & _
          "FROM GNTrans gt INNER JOIN " & _
                    "(GNComprobante gc INNER JOIN " & _
                        "(IVInventario iv INNER JOIN IVKardex ivk " & _
                            "ON iv.IdInventario = ivk.IdInventario) " & _
                        "ON gc.TransID=ivk.TransID) " & _
                    "ON gt.CodTrans=gc.CodTrans " & _
          "WHERE (gt.VerificaLimiteCon='" & Me.GNTrans.IVVerificaLimiteCon & "') AND " & _
            "(gc.Estado<>" & ESTADO_ANULADO & ")  "
            If Me.GNTrans.IVControlaLimitePorFactura = False Then
                sql = sql & " AND (gc.IdCentro=" & Me.idCentro & ")  "
            End If
            sql = sql & "  AND (iv.idInventario=" & IdInventario & ")"
            If Me.GNTrans.IVControlaLimitePorFactura Then
                sql = sql & " and gc.idtransfuente=" & IdTransFuente
            End If
            sql = sql & " and (gc.codtrans<>'" & Me.GNTrans.IVVerificaLimiteCon & "M" & " ')"
                  'Hay que excluir éste comprobante mismo
        Set rs = Me.Empresa.OpenRecordset(sql)
    If Not IsNull(rs!sumaCant) Then cantGrabada = rs!sumaCant
    Saldo = Abs(CantLimite) - Abs(cantGrabada)
    rs.Close
    Set rs = Nothing
   VerificarDespachoItemConTrans = True
End Function


'***Agregado. 09/08/2006
Public Function IVKardexICEItem(ByRef Porcentaje As Currency) As Currency
    Dim t As Currency, i As Long, ivk As IVKardex, v As Currency
    Porcentaje = 0
    For i = 1 To CountIVKardex
        Set ivk = IVKardex(i)
        
        If Me.GNTrans.IVTipoTrans = "X" Then
            t = t + ivk.ICE
        Else
            If GNTrans.IVRecargoEnCosto Then
                v = (ivk.CostoTotal + ivk.valFlete + ivk.valSeguro + ivk.ValArancel + ivk.ValFodin) * ivk.PorcentajeRecargoIce
            Else
                v = Abs(ivk.PrecioTotal) * ivk.PorcentajeRecargoIce
            End If
            t = t + v               'Suma valor de recargo de item
            If i <> 1 Then
                If Porcentaje = 0 Then
                If Porcentaje = ivk.PorcentajeRecargoIce Then
                    Porcentaje = ivk.PorcentajeRecargoIce
                Else
                    Porcentaje = 0
                End If
                End If
            Else
                Porcentaje = ivk.PorcentajeRecargoIce
            End If
        End If
    Next i
    Porcentaje = Porcentaje * 100
    IVKardexICEItem = Abs(t)            '*** MAKOTO 29/ene/01 Mod.
    Set ivk = Nothing
End Function


Public Property Let CodTipoTrans(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.CodTipoTrans", MSGERR_SOLOVER
    
    If Len(value) > 2 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.CodTipoTrans", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.CodTipoTrans <> value Then
        mProps.CodTipoTrans = value
        mbooModificado = True
    End If
End Property

Public Property Get CodTipoTrans() As String
    CodTipoTrans = Trim$(mProps.CodTipoTrans)
End Property

Public Function IVKardexSumaIVAItemTotal() As Currency
    Dim t As Currency, i As Long, ivk As IVKardex
    Dim por As Double, v As Currency, bandCalculado As Boolean
    Dim pc As PCProvCli
    
    For i = 1 To CountIVKardex
        Set ivk = IVKardex(i)
        If Me.IVKardex(i).Cantidad <> 0 Then 'AUC agregado para que no carge valores =0
            v = ivk.CalcularSumaIvaItem(por, bandCalculado)
            t = t + v               'Suma valor de IVA de item
        End If
    Next i
    
'    IVKardexIVAItemTotal = t
    'If  .ObtenerValor("PermiteControlAspectosAnexos") = "1" And _

    If Me.FechaTrans < "01/06/2016" Then
        IVKardexSumaIVAItemTotal = Abs(t) * Me.GNTrans.Empresa.GNOpcion.PorcentajeIVA
    ElseIf Me.FechaTrans > "31/05/2016" And Me.FechaTrans < "01/06/2017" And Not Me.BandAplicaIvaAnt Then
        IVKardexSumaIVAItemTotal = Abs(t) * Me.GNTrans.Empresa.GNOpcion.PorcentajeIVAAnt
    ElseIf Me.FechaTrans >= Me.GNTrans.Empresa.GNOpcion.FechaIVA And Not Me.BandAplicaIvaAnt Then
        If Me.IdTransFuente <> 0 And Me.PorcentIVA = Me.Empresa.GNOpcion.PorcentajeIVAAnt And Me.GNTrans.AnexoCodTipoComp = "4" Then
            IVKardexSumaIVAItemTotal = Abs(t) * Me.GNTrans.Empresa.GNOpcion.PorcentajeIVAAnt
        Else
            Set pc = Me.GNTrans.Empresa.RecuperaPCProvCliQuick(Me.IdClienteRef)
            If Not pc Is Nothing Then
                If pc.bandCompensaIVA Then
                    IVKardexSumaIVAItemTotal = Abs(t) * Me.GNTrans.Empresa.GNOpcion.PorcentajeIVAAnt          '*** MAKOTO 29/ene/01 Mod.
                Else
                    IVKardexSumaIVAItemTotal = Abs(t) * Me.GNTrans.Empresa.GNOpcion.PorcentajeIVA          '*** MAKOTO 29/ene/01 Mod.
                End If
            Else
                IVKardexSumaIVAItemTotal = Abs(t) * Me.GNTrans.Empresa.GNOpcion.PorcentajeIVA          '*** MAKOTO 29/ene/01 Mod.
            End If
            Set pc = Nothing
        End If
    Else
        If Me.BandAplicaIvaAnt Then
            IVKardexSumaIVAItemTotal = Abs(t) * Me.GNTrans.Empresa.GNOpcion.PorcentajeIVAAnt          '*** MAKOTO 29/ene/01 Mod.
        Else
            IVKardexSumaIVAItemTotal = Abs(t) * Me.GNTrans.Empresa.GNOpcion.PorcentajeIVA          '*** MAKOTO 29/ene/01 Mod.
        End If
    End If
    Set ivk = Nothing
    Set pc = Nothing
End Function

Private Sub RecuperaCcKardex()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
    
    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolcCKardex Is Nothing Then Set mcolcCKardex = New Collection
    
    'Recupera los CcKardex
    BorrarCcKardex
    sql = "SELECT * FROM vwCcKardex WHERE TransID=" & mProps.transid & " ORDER BY Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddCcKardex
                CcKardex(i).Recuperar rs
            End If
            .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub

'--------------- Manejo de coleccion de CcKardex
Public Function AddCcKardex() As Long
    Dim nuevo As CcKardex
    
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.AddCcKardex", MSGERR_SOLOVER
    If mcolcCKardex Is Nothing Then RecuperaCcKardex
    
    Set nuevo = New CcKardex
    Set nuevo.GNComprobante = Me
    
    nuevo.FechaEmision = mProps.FechaTrans
    
    
    'Decide el código de proveedor/cliente predeterminado
    If Me.CountCcKardex > 0 Then
        'Si ya existe más de uno, copia lo anterior
        nuevo.CodCentro = Me.CcKardex(Me.CountCcKardex).CodCentro
    End If
    
    mcolcCKardex.Add nuevo
    AddCcKardex = mcolcCKardex.Count    'Devuelve el indice de nuevo elemento
    Set nuevo = Nothing
    mbooModificado = True
End Function

Public Sub RemoveCcKardex(ByVal ix As Long, Optional obj As CcKardex)
    Dim Trans As String
   'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemoveCcKardex", MSGERR_SOLOVER
    If mcolcCKardex Is Nothing Then RecuperaCcKardex
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolcCKardex.Count
            If mcolcCKardex.item(ix) Is obj Then Exit For
        Next ix
    Else
        Set obj = mcolcCKardex.item(ix)
    End If
    'jeaa 31/08/2005 AGREGADA TRANSACCION A LA QUE ESTA ASIGNADA
    If Not obj.VerificaEliminacionNEW(Trans) Then
        Err.Raise ERR_INVALIDO, "GNComprobante.RemoveCcKardex", _
            "No se puede eliminar el documento debido a que existen cobros o pagos asignados " & Chr(13) & "con la Transacción: " & Trans
   End If
    'Elimina de la colección
    If mcolcCKardex.Count >= ix Then mcolcCKardex.Remove ix
    mbooModificado = True
End Sub

'Elimina todos los detalles de CcKardex
Public Sub BorrarCcKardex()
    'Cuando SoloVer está establecido a True, genera error
    If mcolcCKardex Is Nothing Then Set mcolcCKardex = New Collection
    
    With mcolcCKardex
        Do While .Count > 0
            .Remove .Count
        Loop
    End With
    mbooModificado = True
End Sub

Public Property Get CountCcKardex() As Long
    If mcolcCKardex Is Nothing Then RecuperaCcKardex
    CountCcKardex = mcolcCKardex.Count
End Property

Public Property Get CcKardex(ix As Long) As CcKardex
    If mcolcCKardex Is Nothing Then RecuperaCcKardex
    Set CcKardex = mcolcCKardex.item(ix)
End Property

Public Function CcKardexDebeTotal() As Currency
    Dim t As Currency, i As Long
    
    For i = 1 To CountCcKardex
        t = t + CcKardex(i).Debe * -1
    Next i
    CcKardexDebeTotal = t
End Function

Public Function CcKardexHaberTotal() As Currency
    Dim t As Currency, i As Long
    
    For i = 1 To CountCcKardex
        t = t + CcKardex(i).Haber
    Next i
    CcKardexHaberTotal = t
End Function

Public Function IVRecuperaGastosImportacionesParaRecargos(ByVal idCentro As Long, ByVal CodRecargo As String) As Currency
    Dim rs As Recordset, sql As String
    Dim t As Currency
    
        sql = " select sum(debe) as Tdebe from  "
        sql = sql & " GnComprobante GC inner join cckardex cc "
        sql = sql & " inner join ivrecargo ivr on cc.idrecargo=ivr.idrecargo"
        sql = sql & " on gc.transid=cc.transid"
        sql = sql & " where cc.IdCentro=" & idCentro
        sql = sql & " and codrecargo='" & CodRecargo & "'"
        'sql = sql & " and estado<>3"
        sql = sql & " and estado not in ('1','2','4')"
        Set rs = Me.Empresa.OpenRecordset(sql)

        If rs.RecordCount > 0 Then
            If Not IsNull(rs.Fields(0)) Then
                t = rs.Fields(0)
            Else
                t = 0
            End If
        End If
    
        IVRecuperaGastosImportacionesParaRecargos = Abs(t)
    Set rs = Nothing
End Function

Public Function RecuperaIdCCKardex(ByVal idCentro As Long, ByVal CodRecargo As String) As Long
    Dim rs As Recordset, sql As String
    Dim t As Currency
        sql = " select id from cckardex cc "
        sql = sql & " inner join ivrecargo ivr on cc.idrecargo=ivr.idrecargo"
        sql = sql & " where IdCentro=" & idCentro
        sql = sql & " and codrecargo='" & CodRecargo & "'"
        sql = sql & " and IdAsignado=0 "
        Set rs = Me.Empresa.OpenRecordset(sql)
        If rs.RecordCount > 0 Then
            RecuperaIdCCKardex = rs.Fields("Id")
        Else
            RecuperaIdCCKardex = 0
        End If
    
        
    Set rs = Nothing
End Function




Public Property Let CodTipoRetencion(value As String)
        If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.CodTipoRetencion", MSGERR_SOLOVER
        'Solo cuando cambia el valor
    If mProps.CodTipoRetencion <> value Then
        mProps.CodTipoRetencion = value
        mbooModificado = True
    End If
End Property

Public Property Get CodTipoRetencion() As String
    CodTipoRetencion = mProps.CodTipoRetencion
End Property

'jeaa 25/04/2005
Public Property Let ComisionCobrador(ByVal value As Currency)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.ComisionCobrador", MSGERR_SOLOVER
    mProps.ComisionCobrador = value
    mbooModificado = True
End Property

Public Property Get ComisionCobrador() As Currency
    ComisionCobrador = mProps.ComisionCobrador
End Property

'jeaa 16/07/2007
Public Property Let AutorizacionSRI(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.AutorizacionSRI", MSGERR_SOLOVER
    mProps.AutorizacionSRI = value
    mbooModificado = True
End Property

Public Property Get AutorizacionSRI() As String
    AutorizacionSRI = mProps.AutorizacionSRI
End Property

Public Property Let FechaCaducidadSRI(ByVal value As Date)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.FechaCaducidadSRI", MSGERR_SOLOVER
    mProps.FechaCaducidadSRI = value
    mbooModificado = True
End Property

Public Property Get FechaCaducidadSRI() As Date
    FechaCaducidadSRI = mProps.FechaCaducidadSRI
End Property

Public Property Let FechaAutorizacionSRI(ByVal value As Date)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.FechaAutorizacionSRI", MSGERR_SOLOVER
    mProps.FechaAutorizacionSRI = value
    mbooModificado = True
End Property

Public Property Get FechaAutorizacionSRI() As Date
    FechaAutorizacionSRI = mProps.FechaAutorizacionSRI
End Property




'Public Function VerificaItemConFuenteSoloCantidadxIVGrupo(ByVal CodInventario As String, _
'                                      ByRef CantLimite As Currency) As Boolean
'End Function

'*** JEAA 14/10/2005
'CodInventario: Código de item que vamos a verificar
'CantLimite:    Devuelve cantidad de límite
'CantGrabada:   Devuelve cantidad que ya está grabada en otros comprobantes
Public Function VerificaItemConFuenteSoloCantidadxIVGrupo( _
                    ByVal CodTrans As String, _
                    ByVal NumTrans As Long, _
                    ByVal IdTransFuente As Long, _
                    ByVal CodInventario As String, _
                    ByRef CantLimite As Currency, _
                    ByRef cantGrabada As Currency) As Boolean
    Dim sql As String, rs As Recordset, VerificaTrans As String
    CantLimite = 0
    cantGrabada = 0
    VerificaTrans = PreparaCadena(Me.GNTrans.TransDespuesDevolucion)
    'Obtiene Suma de cantidad de los comprobantes con los que vamos a comparar (Puede haber varios)
    sql = "SELECT Sum(ivk.Cantidad) AS SumaCant " & _
          "FROM GNComprobante gc INNER JOIN " & _
                        "(IVInventario iv "
            If Me.GNTrans.IvCambioColorGris Then
                sql = sql & " inner join ivgrupo" & Me.GNTrans.GrupoControlaMEMO
                sql = sql & " ivg on iv.idgrupo" & Me.GNTrans.GrupoControlaMEMO & "=ivg.idgrupo" & Me.GNTrans.GrupoControlaMEMO
            End If
            sql = sql & " INNER JOIN IVKardex ivk "
            sql = sql & " ON iv.IdInventario = ivk.IdInventario) "
            sql = sql & " ON gc.TransID=ivk.TransID "
            sql = sql & " WHERE (gc.CodTrans IN (" & VerificaTrans & "))  AND "
            sql = sql & " (gc.Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & "))  "
            sql = sql & " and (gc.IdCentro=" & Me.idCentro & ") "
            If Me.GNTrans.IvCambioColorGris Then
                sql = sql & "  AND left(ivg.codgrupo" & Me.GNTrans.GrupoControlaMEMO & ",2) = "
                sql = sql & "  (select (substring(ivg.codgrupo" & Me.GNTrans.GrupoControlaMEMO & ",1,2)) from ivinventario iv "
                sql = sql & "  inner join ivgrupo" & Me.GNTrans.GrupoControlaMEMO & "  ivg on iv.idgrupo" & Me.GNTrans.GrupoControlaMEMO & "=ivg.idgrupo" & Me.GNTrans.GrupoControlaMEMO
                sql = sql & "   where codinventario='" & CodInventario & "' )"
            Else
                sql = sql & "  AND IV.idgrupo" & Me.GNTrans.GrupoControlaMEMO & " = (select iv.idgrupo" & Me.GNTrans.GrupoControlaMEMO & " from ivinventario iv "
                sql = sql & "  inner join ivgrupo" & Me.GNTrans.GrupoControlaMEMO & "  ivg on iv.idgrupo" & Me.GNTrans.GrupoControlaMEMO & "=ivg.idgrupo" & Me.GNTrans.GrupoControlaMEMO
                sql = sql & "   where codinventario='" & CodInventario & "' )"
            End If
        If Me.GNTrans.IVControlaLimitePorFactura Then
            sql = sql & " and ( GC.NUMTRANS=" & NumTrans & " )"
        End If
    Set rs = Me.Empresa.OpenRecordset(sql)
    If Not IsNull(rs!sumaCant) Then CantLimite = rs!sumaCant
    rs.Close
    'Obtiene Suma de cantidad de los comprobantes 'hermanos' que son del mismo C.Costo
    sql = "SELECT Sum((ivk.Cantidad)) AS SumaCant " & _
          "FROM GNTrans gt INNER JOIN " & _
                    "(GNComprobante gc INNER JOIN " & _
                        "(IVInventario iv INNER JOIN IVKardex ivk " & _
                            "ON iv.IdInventario = ivk.IdInventario) " & _
                        "ON gc.TransID=ivk.TransID) " & _
                    "ON gt.CodTrans=gc.CodTrans " & _
          "WHERE (gt.TransDespuesDevolucion LIKE ('%" & Me.GNTrans.TransDespuesDevolucion & "') " & _
          " or gc.codtrans in ('MEM','MEG','MEQ') ) AND " & _
            "(gc.Estado<>" & ESTADO_ANULADO & ")  "
            sql = sql & " AND (gc.IdCentro=" & Me.idCentro & ")  "
            sql = sql & " and (gc.TransID<>" & Me.transid & ")"
            If Me.GNTrans.IVControlaLimitePorFactura Then
                sql = sql & " and gc.idtransfuente=" & IdTransFuente
            End If
            sql = sql & "  AND idgrupo" & Me.GNTrans.GrupoControlaMEMO & " = (select iv.idgrupo" & Me.GNTrans.GrupoControlaMEMO & " from ivinventario iv "
            sql = sql & "  inner join ivgrupo" & Me.GNTrans.GrupoControlaMEMO & "  ivg on iv.idgrupo" & Me.GNTrans.GrupoControlaMEMO & "=ivg.idgrupo" & Me.GNTrans.GrupoControlaMEMO
           sql = sql & "  where codinventario='" & CodInventario & "' )"
                  'Hay que excluir éste comprobante mismo
        Set rs = Me.Empresa.OpenRecordset(sql)
    If Not IsNull(rs!sumaCant) Then cantGrabada = rs!sumaCant
    rs.Close
    Set rs = Nothing
   VerificaItemConFuenteSoloCantidadxIVGrupo = True
End Function




Public Function VerificaItemConFuenteSoloCantidadFamilia(ByVal CodInventario As String, _
                                      ByRef CantLimite As Currency) As Boolean
    Dim sql As String, rs As Recordset
    CantLimite = 0
    
    If Me.GNTrans.IVItemDevolucion Then
        If Me.GNTrans.CodLineaDevolucion = CodInventario Then
            CantLimite = 1
            VerificaItemConFuenteSoloCantidadFamilia = True
        End If
    Else
          
        sql = " SELECT isnull(Sum(IVK.Cantidad),0) as Total"
        sql = sql & " FROM IVKardex IVK inner join gncomprobante gnc on ivk.transid=gnc.transid "
        sql = sql & " INNER JOIN IVINVENTARIO IV"
        sql = sql & " ON IVK.IdInventario = IV.IdInventario"
        sql = sql & " Where gnc.estado <>3 and ivk.TransID = "
        sql = sql & Me.IdTransFuente & " And "
        sql = sql & " iv.idinventario=  (select idmateria"
        sql = sql & " from ivinventario iv inner join ivmateria ivm"
        sql = sql & " on iv.idinventario=ivm.idinventario"
        sql = sql & " where codinventario='" & CodInventario & "')"

    
    
        Set rs = Me.Empresa.OpenRecordset(sql)
        If rs.EOF Then
            VerificaItemConFuenteSoloCantidadFamilia = False
        Else
            If IsNull(rs!TOTAL) Then
                VerificaItemConFuenteSoloCantidadFamilia = False
            Else
                CantLimite = rs!TOTAL
                VerificaItemConFuenteSoloCantidadFamilia = True
            End If
        End If
        rs.Close
        Set rs = Nothing
 End If
End Function


Public Function ObtieneIdPadre(ByVal CodInventario As String, _
                                      ByRef idpadre As Long, ByRef CodPadre As String, _
                                      ByRef DescPadre As String) As Boolean
    Dim sql As String, rs As Recordset
        idpadre = 0
        CodPadre = ""
         
        sql = "  select distinct iv1.codinventario as CodPadre,iv1.Descripcion as DescPadre, idmateria "
        sql = sql & " from ivinventario iv inner join ivmateria ivm"
        sql = sql & " inner join ivinventario iv1 on ivm.idmateria=iv1.idinventario"
        sql = sql & " on iv.idinventario=ivm.idinventario "
        sql = sql & " where iv.codinventario='" & CodInventario & "'"
    
    
    
        Set rs = Me.Empresa.OpenRecordset(sql)
        If rs.EOF Then
            ObtieneIdPadre = False
        Else
            If IsNull(rs!idMateria) Then
                ObtieneIdPadre = False
            Else
                idpadre = rs!idMateria
                CodPadre = rs!CodPadre
                DescPadre = rs!DescPadre
                ObtieneIdPadre = True
            End If
        End If
        rs.Close
        Set rs = Nothing
End Function

'Actualiza el precio segun costo jeaa 28/06/2007
Friend Sub ActualizaPrecio()
    Dim sql As String, i As Long
    Dim rs As Recordset, c As Double, cu As Double
    Dim item As IVInventario, ivk As IVKardex
    Dim ct As Currency, cad As String, CADU As String
    Dim Vector As Variant
    Dim k As Integer, j As Integer, Selec As Integer
    Dim sql1 As String
    Dim IndiceMoneda As Integer
    
    
    If CountIVKardex = 0 Then Exit Sub     'Si no tiene detalle de IVKardex, sale
    For i = 1 To CountIVKardex
        Set item = gobjMain.EmpresaActual.RecuperaIVInventario(Me.IVKardex(i).CodInventario)
            If Len(Me.GNTrans.Empresa.GNOpcion.ObtenerValor("TipoCostoParaPrecioAuto")) > 0 Then
                cad = Me.GNTrans.Empresa.GNOpcion.ObtenerValor("TipoCostoParaPrecioAuto")
                Select Case cad
                Case "Ninguno": Exit Sub
                Case "Costo Ultima Compra"
                    c = Format$(item.CostoUltimoIngreso, Me.FormatoPU)
                Case "Costo Promedio"
                    c = Format$(item.CostoDouble2(Date, 0, 0, Time), Me.FormatoPU)
                Case "UtilidadxCosto U.C." 'AUC 13/02/2010
                    IndiceMoneda = Me.Empresa.GNOpcion.IndiceMoneda(Me.CodMoneda)
                    c = Me.Empresa.ObtenerCostoMasAlto(Me.IVKardex(i).CodInventario, IndiceMoneda, True)
               
                End Select
            Else
                Exit Sub
            End If
            
            Select Case cad
            Case "UtilidadxCosto U.C." 'AUC 13/02/2010
                    sql1 = "Select "
                    sql = " update  IvInventario set "
                    CADU = Me.GNTrans.Empresa.GNOpcion.ObtenerValor("ListaParaPrecioAuto")
                    If CADU <> "_VACIO_" Then
                        Vector = Split(CADU, ",")
                         Selec = UBound(Vector, 1)
                         For k = 0 To Selec
                            sql1 = sql1 & "Utilidad" & (k + 1) & ","
                         Next k
                         sql1 = Mid$(sql1, 1, Len(sql1) - 1)
                         sql1 = sql1 & " From ivinventario where  codInventario ='" & Me.IVKardex(i).CodInventario & "'"
                       Set rs = mProps.objEmpresa.OpenRecordset(sql1)
                    End If
                    If CADU <> "_VACIO_" Then
                        Vector = Split(CADU, ",")
                         Selec = UBound(Vector, 1)
                         rs.MoveFirst
                         For k = 0 To Selec
                            cu = c * (1# + rs.Fields(k) / 100)
                            sql = sql & Vector(k) & "=" & cu & ","
                         Next k
                         sql = Mid$(sql, 1, Len(sql) - 1)
                    End If
            Case Else
                
                sql = " update IvInventario set "
                If Len(Me.GNTrans.Empresa.GNOpcion.ObtenerValor("ListaParaPrecioAuto")) > 0 Then
                    cad = Me.GNTrans.Empresa.GNOpcion.ObtenerValor("ListaParaPrecioAuto")
                        If cad <> "_VACIO_" Then
                            Vector = Split(cad, ",")
                             Selec = UBound(Vector, 1)
                             For k = 0 To Selec
                                sql = sql & Vector(k) & "=" & c & ","
                             Next k
                             sql = Mid$(sql, 1, Len(sql) - 1)
                        End If
                Else
                    Exit Sub
                End If
            End Select
            sql = sql & " where codInventario ='" & Me.IVKardex(i).CodInventario & "'"
            mProps.objEmpresa.Execute sql, True
    Next i
End Sub

Public Function ActualizaTransFuente(ByVal CodCentro As String, ByVal Trans As String) As Boolean
    Dim sql As String, gn As GNComprobante
    Dim rs As Recordset, rsaux As Record
    sql = " select TransID from gncomprobante gnc"
    sql = sql & "  inner join gnCentroCosto gcc on gnc.idcentro=gcc.idcentro"
    sql = sql & " where gcc.codcentro='" & CodCentro & "'"
    If InStr(1, Trans, ",") > 0 Then
        sql = sql & " and codtrans in (" & PreparaCadena(Trans) & ")"
    Else
        sql = sql & " and codtrans='" & Trans & "'"
    End If
    
    sql = sql & " and estado <> 3 "
    Set rs = Me.Empresa.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        rs.MoveFirst
        If rs.RecordCount = 1 Then
            If IdTransFuente <> rs.Fields("TransID") Then
                IdTransFuente = rs.Fields("TransID")
            End If
        ElseIf rs.RecordCount = 2 Then
            If Me.CountIVKardex <> 0 Then
                While Not rs.EOF
                    Set gn = Me.Empresa.RecuperaGNComprobante(rs.Fields("TransID"))
                    If gn.IVKardex(1).CodBodega = Me.IVKardex(1).CodBodega Then
                        IdTransFuente = rs.Fields("TransID")
                        rs.MoveLast
                    End If
                    rs.MoveNext
                Wend
            Else
                MsgBox "Existen varios transacciones que afectan al Centro de Costo: " & CodCentro & Chr(13) & " Debe seleccionar la Primero la Bodega, para actualizar el Centro de Costo"
            End If
        End If
    End If
End Function

'*** JEAA 14/10/2005
'CodInventario: Código de item que vamos a verificar
'CantLimite:    Devuelve cantidad de límite
'CantGrabada:   Devuelve cantidad que ya está grabada en otros comprobantes
Public Function VerificaItemConFuenteSoloCantidadxIVGrupoSoloTotal( _
                    ByVal CodTrans As String, _
                    ByVal NumTrans As Long, _
                    ByVal IdTransFuente As Long, _
                    ByVal CodInventario As String, _
                    ByRef CantLimite As Currency, _
                    ByRef cantGrabada As Currency _
                    ) As Boolean
    Dim sql As String, rs As Recordset, VerificaTrans As String, Tipo As String
    CantLimite = 0
    cantGrabada = 0
    VerificaTrans = PreparaCadena(Me.GNTrans.TransDespuesDevolucion)
    sql = "select  substring(ivg.descripcion,9,2) as tipo from ivinventario iv   "
    sql = sql & " inner join ivgrupo" & Me.GNTrans.GrupoControlaMEMO & "  ivg "
    sql = sql & " on iv.idgrupo" & Me.GNTrans.GrupoControlaMEMO & "="
    sql = sql & " ivg.idgrupo" & Me.GNTrans.GrupoControlaMEMO
    sql = sql & "   where codinventario='" & CodInventario & "' "
    Set rs = Me.Empresa.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        Tipo = rs.Fields("tipo")
    End If
    'Obtiene Suma de cantidad de los comprobantes con los que vamos a comparar (Puede haber varios)
    sql = "SELECT Sum(ivk.Cantidad) AS SumaCant " & _
          "FROM GNComprobante gc INNER JOIN " & _
                        "(  IVKardex ivk INNER JOIN IVInventario iv  " & _
                        " inner join ivgrupo" & Me.GNTrans.GrupoControlaMEMO & _
                        " ivg on iv.idgrupo" & Me.GNTrans.GrupoControlaMEMO & _
                        "=ivg.idgrupo" & Me.GNTrans.GrupoControlaMEMO & _
                            " ON iv.IdInventario = ivk.IdInventario) " & _
                    "ON gc.TransID=ivk.TransID "
            sql = sql & "WHERE (gc.CodTrans IN (" & VerificaTrans & "))  AND " & _
            "(gc.Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & "))  "
            sql = sql & " and (gc.IdCentro=" & Me.idCentro & ") "
            sql = sql & "  and ivg.descripcion like ('%" & Tipo & "%')"
        If Me.GNTrans.IVControlaLimitePorFactura Then
            sql = sql & " and ( GC.NUMTRANS=" & NumTrans & " )"
        End If
    Set rs = Me.Empresa.OpenRecordset(sql)
    If Not IsNull(rs!sumaCant) Then CantLimite = rs!sumaCant
    rs.Close
    'Obtiene Suma de cantidad de los comprobantes 'hermanos' que son del mismo C.Costo
    sql = "SELECT Sum((ivk.Cantidad)) AS SumaCant " & _
          "FROM GNTrans gt INNER JOIN " & _
                    "(GNComprobante gc INNER JOIN " & _
                        "(  IVKardex ivk  INNER JOIN IVInventario iv" & _
                            " ON iv.IdInventario = ivk.IdInventario) " & _
                        " inner join ivgrupo" & Me.GNTrans.GrupoControlaMEMO & _
                        " ivg on iv.idgrupo" & Me.GNTrans.GrupoControlaMEMO & _
                        " =ivg.idgrupo" & Me.GNTrans.GrupoControlaMEMO & _
                        " ON gc.TransID=ivk.TransID) " & _
                    " ON gt.CodTrans=gc.CodTrans " & _
          "WHERE (gt.TransDespuesDevolucion LIKE ('" & Me.GNTrans.TransDespuesDevolucion & "')) AND " & _
            "(gc.Estado<>" & ESTADO_ANULADO & ")  "
                sql = sql & " AND (gc.IdCentro=" & Me.idCentro & ")  "
            sql = sql & " and (gc.TransID<>" & Me.transid & ")"
            If Me.GNTrans.IVControlaLimitePorFactura Then
                sql = sql & " and gc.idtransfuente=" & IdTransFuente
            End If
            sql = sql & "  and ivg.descripcion like ('%" & Tipo & "%')"
                  'Hay que excluir éste comprobante mismo
        Set rs = Me.Empresa.OpenRecordset(sql)
    If Not IsNull(rs!sumaCant) Then cantGrabada = rs!sumaCant
    rs.Close
    Set rs = Nothing
   VerificaItemConFuenteSoloCantidadxIVGrupoSoloTotal = True
End Function


Public Function VerificaLimiteCreditoPrestamos(LimiteCredito As Currency, NuevoCredito As Currency) As Boolean
    'False = Ha  exedido  el limite de credito
    'True =  El  credito  esta permitido
    Dim v As Variant
    Dim sql As String, rs As Recordset, TOTAL  As Currency
    Dim Saldo As Currency
    Dim cli As PCProvCli
    Dim aux_codpc As String, aux_f1 As Date, aux_f2 As Date
    Dim aux_PorCobrar As Boolean, aux_Cliente As Boolean, aux_Proveedor As Boolean
    Dim aux_CodForma As String, aux_CodMoneda As String, aux_codPCgrupo As String
    Dim aux_incluircero As Boolean, aux_NumGrupo As Byte
    Dim EsEfectivo As Boolean, i As Long
   VerificaLimiteCreditoPrestamos = True

    With gobjMain.objCondicion
        'Conservar valores actuales para que no afecte a otras consultas
        aux_codpc = .CodPC1
        aux_f1 = .fecha1
        aux_f2 = .fecha2
        aux_PorCobrar = .PorCobrar
        aux_Cliente = .Cliente
        aux_Proveedor = .Proveedor
        aux_CodForma = .CodForma
        aux_CodMoneda = .CodMoneda
        aux_codPCgrupo = .CodPCGrupo
        aux_incluircero = .IncluirCero
        aux_NumGrupo = .NumPCGrupo
        If Me.IdClienteRef = 0 Then GoTo Salir  'controla  solo  para transacciones  con clientes
        Set cli = Me.Empresa.RecuperaPCProvCli(Me.IdClienteRef)  'Solo  para  clientes
        If Not cli Is Nothing Then
            'Obtiene el numero siguiente
            sql = "SELECT TransDespuesDevolucion FROM GNTrans WHERE CodTrans='" & Me.CodTrans & "'"
            Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
            If Len(rs.Fields("TransDespuesDevolucion") > 0) Then
                v = Split(rs.Fields("TransDespuesDevolucion"), ";")
                'v(3) monto maximo
                If UBound(v) > 3 Then
                    LimiteCredito = v(3)
                Else
                    LimiteCredito = 0
                End If
            Else
                LimiteCredito = 0
            End If
            If LimiteCredito = 0 Then GoTo Salir
            'Este  es el valor  de la  transaccion  en proceso
            'jeaa 30/08/04 para saldos sin tomar en cuenta considerados como efectivo
            TOTAL = 0
            For i = 1 To Me.CountPCKardex
                EsEfectivo = Me.Empresa.ConsTSConsideradoEfectivo(Me.PCKardex(i).CodForma)
                If Not EsEfectivo Then
                    TOTAL = TOTAL + Me.PCKardex(i).Debe - Me.PCKardexHaberTotal
                End If
            Next i
           .FechaCorte = Me.FechaTrans
            .CodPC1 = cli.CodProvcli
            .CodPC2 = cli.CodProvcli
            .IncluirCero = True
            .CodMoneda = Me.CodMoneda
            .NumPCGrupo = 0
            .CodPCGrupo = ""
            If Me.GNTrans.IvFiltrarFormaPendientes Then
                Set rs = Me.Empresa.ConsPCSaldoFormaCobroFiltro(False, True, False, Me.GNTrans.FormasLimteCredito)
            Else
                Set rs = Me.Empresa.ConsPCSaldoFormaCobro(False, True, False)
            End If
            If Not rs.EOF Then
                If IsNull(rs!Saldo) Then
                    Saldo = 0
                Else
                    Saldo = rs!Saldo
                End If
                NuevoCredito = Abs(Saldo) + TOTAL
                If LimiteCredito < (NuevoCredito) Then
                    VerificaLimiteCreditoPrestamos = False
                End If
            End If
        End If
        'regresa  a valores  anteriores
        .CodPC1 = aux_codpc
        .fecha1 = aux_f1
        .fecha2 = aux_f2
        .PorCobrar = aux_PorCobrar
        .Cliente = aux_Cliente
        .Proveedor = aux_Proveedor
        .CodForma = aux_CodForma
        .CodMoneda = aux_CodMoneda
        .CodPCGrupo = aux_codPCgrupo
        .NumPCGrupo = aux_NumGrupo
        .IncluirCero = aux_incluircero
    End With
    rs.Close
Salir:
    Set rs = Nothing
    Set cli = Nothing
End Function

Public Function LimiteCreditoUtilizado(IdProvcli As Long) As Currency
    Dim rs As Recordset
    Dim Saldo As Currency
    Dim cli As PCProvCli, TOTAL   As Currency
    Dim LimiteCredito As Currency, NuevoCredito As Currency
'    Dim aux_codpc As String, aux_f1 As Date, aux_f2 As Date
'    Dim aux_PorCobrar As Boolean, aux_Cliente As Boolean, aux_Proveedor As Boolean
'    Dim aux_CodForma As String, aux_CodMoneda As String, aux_codPCgrupo As String
'    Dim aux_incluircero As Boolean, aux_NumGrupo As Byte
    Dim EsEfectivo As Boolean, i As Long
   LimiteCreditoUtilizado = 0
    With gobjMain.objCondicion
        If IdProvcli = 0 Then GoTo Salir  'controla  solo  para transacciones  con clientes
        Set cli = Me.Empresa.RecuperaPCProvCli(IdProvcli)  'Solo  para  clientes
        If Not cli Is Nothing Then
            LimiteCredito = cli.LimiteCredito
            If LimiteCredito = 0 Then GoTo Salir
            'Este  es el valor  de la  transaccion  en proceso
            'jeaa 30/08/04 para saldos sin tomar en cuenta considerados como efectivo
            TOTAL = 0
            For i = 1 To Me.CountPCKardex
                EsEfectivo = Me.Empresa.ConsTSConsideradoEfectivo(Me.PCKardex(i).CodForma)
                If Not EsEfectivo Then
                    TOTAL = TOTAL + Me.PCKardex(i).Debe - Me.PCKardexHaberTotal
                End If
            Next i
            If Me.GNTrans.IvFiltrarFormaPendientes Then
                Set rs = Me.Empresa.ConsPCSaldoFormaCobroFiltro(False, True, False, Me.GNTrans.FormasLimteCredito)
            Else
                Set rs = Me.Empresa.ConsPCSaldoFormaCobro(False, True, False)
            End If
            If Not rs.EOF Then
                If IsNull(rs!Saldo) Then
                    Saldo = 0
                Else
                    Saldo = rs!Saldo
                End If
                NuevoCredito = Abs(Saldo) + TOTAL
                If LimiteCredito < (NuevoCredito) Then
                    LimiteCreditoUtilizado = False
                End If
            End If
        End If
    End With
    rs.Close
Salir:
    Set rs = Nothing
    Set cli = Nothing
End Function

'AUC  11/05/06
Public Property Let EsNuevo(ByVal value As Boolean)
    mbooEsNuevo = value
End Property

Public Sub ImportaDatos3( _
                ByVal TransIDs As String, _
                ByVal Incremental As Boolean, ByVal CodTrans As String)
    Dim Fuente As GNComprobante, i As Long, sql As String, rs As Recordset
    Dim v As Variant, tid As Long, aux_inc As Boolean
    Dim vCodTrans As Variant
    If Len(TransIDs) = 0 Then Exit Sub
    'Prepara una colección para almacenar TransIDs de fuente,
    ' para cuando graba la transacción cambiar de estado a Despachado
    If mcolTransIDs Is Nothing Then Set mcolTransIDs = New Collection
    'Separa los TransIDs en un vector
    v = Split(TransIDs, ",")
    vCodTrans = Split(CodTrans, ",")
    aux_inc = Incremental
    'Si la transacción está configurada que importa solo desde transacciones Apropadas
    If Me.GNTrans.ImportaSoloAprobado Then
        sql = "SELECT CodTrans, NumTrans FROM GNComprobante " & _
              "WHERE (Not Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & ")) " & _
                    " AND (TransID IN (" & TransIDs & ")) "
        Set rs = Me.Empresa.OpenRecordset(sql)
        If Not rs.EOF Then
            sql = MSGERR_NOIMPORTA & vbCr & vbCr
            Do Until rs.EOF
                sql = sql & rs.Fields("CodTrans") & " " & rs.Fields("NumTrans") & vbCr
                rs.MoveNext
            Loop
            Err.Raise ERR_NOIMPORTA, "GNComprobante.ImportaDatos", sql
        End If
        rs.Close
        Set rs = Nothing
    End If
    'Repite para todas las transacciones de fuente
    For i = 0 To UBound(v, 1)
        tid = val(v(i))             'Convierte en numérico
        'Desde la segunda trans. hay que incrementar siempre
        If i > 0 Then aux_inc = True
        'Recupera la transaccioón de fuente
        Set Fuente = Empresa.RecuperaGNComprobante(tid)
        If Fuente Is Nothing Then
            Err.Raise ERR_NOHAYCODIGO, "GNComprobante.ImportaDatos", _
                        "No se puede recuperar la transacción de fuente."
        End If
        'Si está ImportaSoloAprobado=True y el origen no está 'aprobado' ni 'despachado'
        If GNTrans.ImportaSoloAprobado And _
            Not (Fuente.Estado = ESTADO_APROBADO Or Fuente.Estado = ESTADO_DESPACHADO Or Fuente.Estado = ESTADO_SEMDESPACHADO) Then
            Err.Raise ERR_NOIMPORTA, "GNComprobante.ImportaDatos", MSGERR_NOIMPORTA
        End If
        'Copia los datos de cabecera
        CodCentro = Fuente.CodCentro
        CodProveedorRef = Fuente.CodProveedorRef
        CodClienteRef = Fuente.CodClienteRef
        CodVendedor = Fuente.CodVendedor
        NumDocRef = Fuente.NumDocRef
        'jeaa 04-04-2005 aumentado para saber de donde importo
        Descripcion = Mid$(mProps.Descripcion & " Trans. Fuente: " & Fuente.CodTrans & " No. " & Fuente.NumTrans & " / " & Fuente.Descripcion, 1, 120)          '*** MAKOTO 11/jul/2000
        If Len(Descripcion) > 120 Then Descripcion = Mid$(Descripcion, 1, 120)
        CodResponsable = Fuente.CodResponsable  '*** MAKOTO 16/ago/2000
        Nombre = Fuente.Nombre                  '*** MAKOTO 06/feb/01 Agregado
        'Si requiere importar TSKardex
        If GNTrans.ImportaTSK Then
            ImportaTSKardex Fuente
        End If
        'Si requiere importar TSKardexRet       '*** MAKOTO 07/feb/01 Agregado
        If GNTrans.ImportaTSKRet Then
            ImportaTSKardexRet Fuente
        End If
        'Si requiere importar IVKardex
        If GNTrans.ImportaIVK Then
            If Not GNTrans.IVBodegasDestinos Then
                'ImportaIVKardex fuente, False, aux_inc
                If GNTrans.ImportaSoloMateriales Then
                    ImportaIVKardexSoloMateriales Fuente, False, aux_inc
                Else
                    ImportaIVKardex Fuente, False, aux_inc
                End If
            Else
                ImportaIVKardex1 Fuente, False, aux_inc, vCodTrans(i)
            End If
        End If
        'Si requiere importar IVKardex pero que pase CostoRealTotal a CostoTotal
        If GNTrans.ImportaIVKReal Then
            ImportaIVKardex Fuente, True, aux_inc
        End If
        'Si requiere importar IVKardexRecargo
        If GNTrans.ImportaIVKR Then
            ImportaIVKardexRecargo Fuente
        End If
        'Si requiere importar PCKardex
        If GNTrans.ImportaPCK Then
            ImportaPCKardex Fuente
        End If
        'Si requiere importar CTLibroDetalle
        If GNTrans.ImportaCTD Then
            ImportaAsiento Fuente, aux_inc
        End If
        
        If GNTrans.ImportaPRCTD Then
            ImportaPRAsiento Fuente, aux_inc
        End If
        
        
        'Almacena TransID de fuente en la colección
        If Not aux_inc Then LimpiaColeccion mcolTransIDs
        mcolTransIDs.Add item:=Fuente.transid
        'Si es importación incremental, cambia estado del ogígen inmediatamente
        '  Si no es incremental, lo hace al momento de grabar la trans para que
        '  no cambie estado en case de que cancela la transaccion sin grabar
        If Incremental Then
            'Si no está aprobado, no pasa al estado 'Despachado'
            ' para evitar que un asiento descuadrado marque como Despachado y afecte al balance
            If Fuente.Estado = ESTADO_APROBADO Then
                'Cambia el estado de fuente a Despachado
                mProps.objEmpresa.CambiaEstadoGNComp Fuente.transid, ESTADO_DESPACHADO
            End If
        End If
    Next i
    Set Fuente = Nothing
End Sub
Private Sub ImportaIVKardex1( _
                ByVal Fuente As GNComprobante, _
                ByVal ConValorReal As Boolean, _
                ByVal Incremental As Boolean, ByVal CodTrans As String)
    Dim i As Long, ix As Long, ivk As IVKardex
    Dim Signo As Integer
    If mcolIVKardex Is Nothing Then Set mcolIVKardex = New Collection
    'Si es importación incremental, no se borra lo anterior
    If Not Incremental Then             '*** MAKOTO 15/dic/00
        BorrarIVKardex
    End If
    For i = 1 To Fuente.CountIVKardex
        Set ivk = Fuente.IVKardex(i).Clone
        Set ivk.GNComprobante = Me
        If (GNTrans.Modulo <> Fuente.GNTrans.Modulo) Or _
            (GNTrans.Modulo = Fuente.GNTrans.Modulo) Then       '**** PEND
            'Asegura que la cantidad tenga el signo correcto
            ' Es necesario porque tiene que cambiar de signo cuando importa de
            ' FC(Egreso) --> FCV(Ingreso) o CP(Ingreso) --> CPV(Egreso)
            ' HC(Ingreso) --> OF(Egreso) etc...
            Signo = IIf(GNTrans.IVTipoTrans = "E", -1, 1) '-1 si es egreso
            ivk.Cantidad = Abs(ivk.Cantidad) * Signo
        End If
        If Not ConValorReal Then
            ivk.CostoTotal = Abs(ivk.CostoTotal) * Signo
            ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
        Else
            ivk.CostoTotal = Abs(ivk.CostoRealTotal) * Signo
            ivk.PrecioTotal = Abs(ivk.PrecioRealTotal) * Signo
        End If
        ivk.CostoRealTotal = Abs(ivk.CostoRealTotal) * Signo
        ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
        ivk.Nota = CodTrans
        mcolIVKardex.Add ivk
    Next i
End Sub


Public Property Let PrecioRef(value As Integer)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, _
            "GNComprobante.PrecioRef", MSGERR_SOLOVER
    
    mProps.PrecioRef = value
    mbooModificado = True
End Property

Public Property Get PrecioRef() As Integer
    PrecioRef = mProps.PrecioRef
End Property
'AUC 24/11/07
Public Property Let Estado1(ByVal value As Byte)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.Estado1", MSGERR_SOLOVER
        mProps.Estado1 = value
        mbooModificado = True
End Property

Public Property Get Estado1() As Byte
    Estado1 = mProps.Estado1
End Property

Public Property Let Estado2(ByVal value As Byte)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.Estado2", MSGERR_SOLOVER
        mProps.Estado2 = value
        mbooModificado = True
End Property

Public Property Get Estado2() As Byte
    Estado2 = mProps.Estado2
End Property


Public Function IVKardexTotalIVA(bandReal As Boolean, BandIVA As Boolean) As Currency
    Dim t As Currency
    'Decide si calcula en base de Precio o Costo
    If GNTrans.IVRecargoEnCosto Then
        t = IVKardexCTotalIVA(bandReal, BandIVA)
    Else
        t = IVKardexPTotalIVA(bandReal, BandIVA)
    End If
    IVKardexTotalIVA = t
End Function

Public Function IVKardexCTotalIVA(bandReal As Boolean, BandIVA As Boolean) As Currency
    Dim t As Currency, i As Long, v As Currency
    Dim item As IVInventario
    For i = 1 To CountIVKardex
        Set item = Me.Empresa.RecuperaIVInventarioQuick(IVKardex(i).IdInventario)
        If Not item Is Nothing Then
            If item.BandIVA = BandIVA And item.BandNoObjetoIVA = False Then
                If bandReal Then
                    v = IVKardex(i).CostoRealTotal
                Else
                    v = IVKardex(i).CostoTotal
                End If
                'Redondea con el formato para Costos      *** MAKOTO 13/feb/01 Mod.
                t = t + MiCCur(Format$(v, Me.FormatoCosto))
            End If
        End If
    Next i
    Set item = Nothing
    IVKardexCTotalIVA = t
End Function

Public Function IVKardexPTotalIVA(bandReal As Boolean, BandIVA As Boolean) As Currency
    Dim t As Currency, i As Long, v As Currency
    Dim item As IVInventario
    For i = 1 To CountIVKardex
        If IVKardex(i).IdInventario <> 0 Then
            Set item = Me.Empresa.RecuperaIVInventarioQuick(IVKardex(i).IdInventario)
            If Not item Is Nothing Then
                If item.BandIVA = BandIVA Then
                    If Me.IVKardex(i).Cantidad <> 0 Then 'AUC agregado para que calcule cuando no tenga cant
                        If bandReal Then
                            v = IVKardex(i).PrecioRealTotal
                            t = t + v '***Agregado. 28/08/2003. Angel. No funciona bien 01/jun/04
                        Else
                            v = IVKardex(i).PrecioTotal
                            t = t + MiCCur(Format$(v, Me.FormatoMoneda)) '***Antes, quitado para pruebas. Angel. 27/08/2003
                        End If
                    End If
                End If
            End If
        End If
    Next i
    Set item = Nothing
    If bandReal Then
        IVKardexPTotalIVA = MiCCur(Format$(t, Me.FormatoMoneda)) '***Antes, quitado para pruebas. Angel. 27/08/2003
    Else
        IVKardexPTotalIVA = t '***Antes, quitado para pruebas. Angel. 27/08/2003
    End If
End Function

Public Function ListaTransFuente3( _
                    ByVal CodCentro As String) As Variant
    Dim sql As String, s As String, v As Variant, i As Long, CodT As String
    Dim cond As String, rs As Recordset, cond1 As String
    If Len(GNTrans.CodTransFuente) > 0 Then
        'Puede tener varios codigos de transaccion de fuente    ejm. (FC);(OF)
        v = Split(GNTrans.CodTransFuente, ";")
        For i = 0 To UBound(v)
            If Len(s) > 0 Then s = s & ","
            CodT = v(i)
            CodT = Left$(CodT, Len(CodT) - 1)       'Quita el signo ')'
            CodT = Right$(CodT, Len(CodT) - 1)      'Quita el signo '('
            s = s & "'" & CodT & "'"
        Next i
    Else
        Err.Raise ERR_INVALIDO, "GNComprobante.ListaTransFuente", _
                    "No está definida ningúna transacción de fuente para ésta transacción."
    End If
    '*** MAKOTO 06/mar/01 Agregado 'Nombre'
    'cambiado por Oliver 27/08/2003
    sql = "SELECT"
    If gobjMain.objCondicion.TopN > 0 Then
        sql = sql & " TOP " & gobjMain.objCondicion.TopN
    End If
    '*** MAKOTO 05/feb/01 Mod. Aumentado 'NumDocRef' y 'Nombre'
    sql = sql & " gc.TransID, gc.FechaTrans, gc.CodTrans, gc.NumTrans, "
    sql = sql & " gc.NumdocRef, gc.Nombre, gc.Descripcion, "
    sql = sql & " cc.CodCentro, cc.Descripcion AS DescCentro, gc.Estado "
    If Me.GNTrans.CodPantalla = "IVGNG" Then
        sql = sql & " ,gc.Estado1,gc.Estado2 "
    End If
    'sql = sql & " ,ivb.descripcion "
    
        sql = sql & "FROM GNCentroCosto cc RIGHT JOIN "
        sql = sql & "  GNComprobante gc "
        'sql = sql & LEFT JOIN IVKARDEX IVK ON IVK.TRANSID = GC.TRANSID  "
        'sql = sql & " LEFT JOIN IVBODEGA IVB ON  IVB.IDBODEGA = IVK.IDBODEGA "
        sql = sql & IIf(Len(gobjCond.CodPC1) > 0, " Inner join PcProvCli pc ON (gc.IdProveedorRef = pc.IDProvCli  OR gc.IdClienteRef = pc.IDProvCli) ", " ")
        sql = sql & " ON cc.IdCentro = gc.IdCentro "
        If Len(cond) > 0 Then cond = cond & " AND "
       cond = cond & " gc.Estado IN ("
       If gobjMain.objCondicion.EstadoBool(ESTADO_NOAPROBADO) Then
            cond = cond & ESTADO_NOAPROBADO & ","
       End If
       If gobjMain.objCondicion.EstadoBool(ESTADO_APROBADO) Then
            cond = cond & ESTADO_APROBADO & ","
       End If
        If gobjMain.objCondicion.EstadoBool(ESTADO_DESPACHADO) Then
            cond = cond & ESTADO_DESPACHADO & ","
       End If
        If gobjMain.objCondicion.EstadoBool(ESTADO_SEMDESPACHADO) Then
            cond = cond & ESTADO_SEMDESPACHADO & ","
       End If
    cond = Mid$(cond, 1, Len(cond) - 1)
    cond = cond & ")"
      'auc 26/10/07
        If Me.GNTrans.VerFacturados And Me.GNTrans.CodPantalla = "IVGNG" Then
                 If Len(cond) > 0 Then cond = cond & " AND "
                 cond = cond & " gc.Estado1 IN ("
             If gobjMain.objCondicion.Estado1Bool(ESTADO_FACTURADO) Then
                 cond = cond & ESTADO_FACTURADO & ","
            End If
            If gobjMain.objCondicion.Estado1Bool(ESTADO_NOFACTURADO) Then
                 cond = cond & ESTADO_NOFACTURADO & ","
            End If
                 cond = Mid$(cond, 1, Len(cond) - 1)
                 cond = cond & ")"
          ElseIf Me.GNTrans.VerComprados And Me.GNTrans.CodPantalla = "IVGNG" Then
                 If Len(cond) > 0 Then cond = cond & " AND "
                 cond = cond & " gc.Estado2 IN ("
            If gobjMain.objCondicion.Estado2Bool(ESTADO_COMPRAS) Then
                 cond = cond & ESTADO_COMPRAS & ","
            End If
            If gobjMain.objCondicion.Estado2Bool(ESTADO_NOCOMPRAS) Then
                 cond = cond & ESTADO_NOCOMPRAS & ","
            End If
            cond = Mid$(cond, 1, Len(cond) - 1)
                 cond = cond & ")"
        End If
       'hasta aqui
    ' Condicion de Busqueda de Fecha
   If Len(cond) > 0 Then cond = cond & " AND "
    cond = cond & " (gc.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, gobjMain.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, gobjMain.TipoDB) & " ) "
    'Condición de CodProvCli    (Opcional)
    If Len(gobjCond.CodPC1) > 0 Then
       If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(PC.CodProvCli='" & gobjCond.CodPC1 & "')"
   End If
    If Len(s) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gc.CodTrans IN (" & s & ")"
    End If
    If Len(CodCentro) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " cc.CodCentro='" & CodCentro & "'"
    End If
    
    If gobjCond.NumTrans1 <> 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gc.Numtrans= " & gobjCond.NumTrans1
    End If

    
    
    
    'JEAA 01/06/2007
    If GNTrans.ImportacionUnicaTrans Then
        cond = cond & " AND GC.TRANSID NOT IN"
        cond = cond & " (SELECT IdTransFuente"
        cond = cond & " FROM GNCentroCosto cc"
        cond = cond & " RIGHT JOIN  GNComprobante gc   ON cc.IdCentro = gc.IdCentro"
       cond = cond & " where gc.Estado <> 3 "
        cond = cond & " AND (gc.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, gobjMain.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, gobjMain.TipoDB) & " ) "
        cond = cond & " AND  gc.CodTrans IN ('" & GNTrans.CodTrans & "')"
        cond = cond & " AND IdTransFuente<>0 )"
    End If
    
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
'        If Len(gobjCond.CodBodega1) > 0 Then
'           cond = cond & " AND IVB.CODBODEGA = '" & gobjCond.CodBodega1 & "'"
'       End If
'     If Len(cond) > 0 Then sql = sql & " WHERE " & cond
     sql = sql & " Group by gc.TransID, gc.FechaTrans, gc.horatrans, "
     sql = sql & " gc.CodTrans, gc.NumTrans, gc.NumdocRef, gc.Nombre, gc.Descripcion,"
     sql = sql & " cc.CodCentro, cc.Descripcion, gc.Estado "
     'sql = sql & " ,ivb.descripcion"
    If Me.GNTrans.CodPantalla = "IVGNG" Then
            sql = sql & " ,gc.Estado1,gc.Estado2 "
    End If
    sql = sql & " ORDER BY gc.FechaTrans Desc, gc.horatrans desc  ,gc.CodTrans,gc.NumTrans"
   Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set ListaTransFuente3 = rs
    Set rs = Nothing
End Function

'************************** EXPORTACION IMPORTACION

Public Property Let ObservacionImpExp(ByVal value As String)
    value = RTrim$(value)
    If Len(value) > 300 Then
        Err.Raise ERR_INVALIDO, "IVKardex_ObservacionImpExp", MSGERR_INVALIDO
    End If

    mProps.ObservacionImpExp = value
    mbooModificado = True
End Property

Public Property Get ObservacionImpExp() As String
    ObservacionImpExp = RTrim$(mProps.ObservacionImpExp)
End Property



Public Property Let Consignatario(ByVal value As String)
    value = RTrim$(value)
    If Len(value) > 300 Then
        Err.Raise ERR_INVALIDO, "IVKardex_Consignatario", MSGERR_INVALIDO
    End If

    mProps.Consignatario = value
    mbooModificado = True
End Property

Public Property Get Consignatario() As String
    Consignatario = RTrim$(mProps.Consignatario)
End Property

Public Property Let FormaEnvio(ByVal value As String)
    value = RTrim$(value)
    If Len(value) > 120 Then
        Err.Raise ERR_INVALIDO, "IVKardex_FormaEnvio", MSGERR_INVALIDO
    End If

    mProps.FormaEnvio = value
    mbooModificado = True
End Property

Public Property Get FormaEnvio() As String
    FormaEnvio = RTrim$(mProps.FormaEnvio)
End Property

Public Property Let PesoNeto(ByVal value As String)
    value = RTrim$(value)
    If Len(value) > 60 Then
        Err.Raise ERR_INVALIDO, "IVKardex_PesoNeto", MSGERR_INVALIDO
    End If

    mProps.PesoNeto = value
    mbooModificado = True
End Property

Public Property Get PesoNeto() As String
    PesoNeto = RTrim$(mProps.PesoNeto)
End Property

Public Property Let PesoBruto(ByVal value As String)
    value = RTrim$(value)
    If Len(value) > 60 Then
        Err.Raise ERR_INVALIDO, "IVKardex_PesoBruto", MSGERR_INVALIDO
    End If

    mProps.PesoBruto = value
    mbooModificado = True
End Property

Public Property Get PesoBruto() As String
    PesoBruto = RTrim$(mProps.PesoBruto)
End Property

Public Property Let Referencia(ByVal value As String)
    value = RTrim$(value)
    If Len(value) > 300 Then
        Err.Raise ERR_INVALIDO, "IVKardex_Referencia", MSGERR_INVALIDO
    End If

    mProps.Referencia = value
    mbooModificado = True
End Property

Public Property Get Referencia() As String
    Referencia = RTrim$(mProps.Referencia)
End Property


'Agregado Alex Sept/2002        --> siempre existirá relación 1 a 1, debido a que hay una sola factura por compra

Private Sub GrabarDatosImportacionExportacion()
    Dim sql As String, rs As Recordset
    Dim AuxDesc As Integer
        'Recupera el registro correspondiente para modificar
        sql = "SELECT * FROM GNCompIE WHERE TransID=" & mProps.transid
        Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
        If Not rs.EOF Then
            #If DAOLIB Then
                rs.Edit
            #End If
        Else
            sql = "SELECT * FROM GNCompIE WHERE 1=0"
            Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
            rs.AddNew
        End If

    With rs
        !transid = mProps.transid                       'Es el mismo asignado a GnComprobante
        !ObservacionImpExp = mProps.ObservacionImpExp
        !Consignatario = mProps.Consignatario
        !FormaEnvio = mProps.FormaEnvio
        !PesoNeto = mProps.PesoNeto
        !PesoBruto = mProps.PesoBruto
        !Referencia = mProps.Referencia
        .Update
        #If DAOLIB Then
                rs.Bookmark = rs.LastModified
        #End If
        .Move 0             'Para actualizar
        .Close
    End With
End Sub

Public Sub RecuperarDatosImportacionExportacion(Optional ByVal TransIDImpExp As Long)
    Dim sql As String, rs As Recordset

    If TransIDImpExp = 0 Then TransIDImpExp = mProps.transid

    sql = "SELECT * FROM GNCompIE WHERE TransID=" & TransIDImpExp
    Set rs = mProps.objEmpresa.OpenRecordset(sql)

    If rs.EOF Then Exit Sub
    With rs
        mProps.ObservacionImpExp = !ObservacionImpExp
        mProps.Consignatario = !Consignatario
        mProps.FormaEnvio = !FormaEnvio
        mProps.PesoNeto = !PesoNeto
        mProps.PesoBruto = !PesoBruto
        mProps.Referencia = !Referencia
        .Close
    End With
    Set rs = Nothing
End Sub

'*** MAKOTO 14/ago/2000 Agregado
'Une detalles si hay items repetidos
'Devuelve True si ha cambiado algo, sino False
Public Function TotalizaItemRepetidoSignosDiferentes() As Boolean
    Dim ivk As IVKardex, i As Long, j As Long, ivk2 As IVKardex, rt As Boolean
    Dim iv As IVInventario, c As Currency
    rt = False
    i = 1
    Do While i <= mcolIVKardex.Count        'Uso Do While para que evalue cada vez la condicion (Con For no está bien)
        Set ivk = mcolIVKardex.item(i)
        'Busca repetidos
        For j = mcolIVKardex.Count To i + 1 Step -1     'En orden al revez
            Set ivk2 = mcolIVKardex.item(j)
            If Me.GNTrans.AfectaCantidad Then
          'Si encuentra repetido en la misma bodega, con el mismo signo
                If ivk2.CodInventario = ivk.CodInventario And _
                    ivk2.CodBodega = ivk.CodBodega Then
                    'Totaliza la cantidad y elimina el repetido
                    ivk.PrecioTotal = ivk.PrecioTotal + ivk2.Cantidad * ivk.Precio  'Para que no cambie de precio de primer item
                    ivk.CostoTotal = ivk.CostoTotal + (ivk2.Cantidad * ivk.Costo)  'Para que no cambie de costo de primer item
                    Set iv = Me.Empresa.RecuperaIVInventario(ivk.CodInventario)
                    If Not iv Is Nothing Then
                        c = iv.CostoDouble2(Date, 0, 0, Time)
                        ivk.Cantidad = ivk.Cantidad + ivk2.Cantidad
                        ivk.CostoTotal = ivk.Cantidad * c
                        RemoveIVKardex j
                    End If
                    Set iv = Nothing
                    rt = True
                End If
            Else 'AUC si no afecta la existencia totaliza sin importar bodega
                If ivk2.CodInventario = ivk.CodInventario Then
                    'Totaliza la cantidad y elimina el repetido
                    ivk.PrecioTotal = ivk.PrecioTotal + ivk2.Cantidad * ivk.Precio  'Para que no cambie de precio de primer item
                    ivk.CostoTotal = ivk.CostoTotal + (ivk2.Cantidad * ivk.Costo)  'Para que no cambie de costo de primer item
                    Set iv = Me.Empresa.RecuperaIVInventario(ivk.CodInventario)
                    If Not iv Is Nothing Then
                        c = iv.CostoDouble2(Date, 0, 0, Time)
                        ivk.Cantidad = ivk.Cantidad + ivk2.Cantidad
                        ivk.CostoTotal = ivk.Cantidad * c
                        RemoveIVKardex j
                    End If
                    Set iv = Nothing
                    rt = True
                End If
            End If
      Next j
        i = i + 1
    Loop
    TotalizaItemRepetidoSignosDiferentes = rt
End Function

'lista procesos de produccion
Public Function ListaIVKProceso() As Variant
    Dim sql As String, rs As Recordset
    Dim cmd As ADODB.Command
    Set cmd = New ADODB.Command
    cmd.ActiveConnection = mProps.objEmpresa.Coneccion
        sql = "spConsIVKProceso " & mProps.transid
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set ListaIVKProceso = rs
    Set rs = Nothing
End Function

'para rubros
Public Function IVKardexTotalR(bandReal As Boolean) As Currency 'para rubros
    Dim t As Currency
    
    'Decide si calcula en base de Precio o Costo
    If GNTrans.IVRecargoEnCosto Then
        t = IVKardexCTotalR(bandReal)
    Else
        t = IVKardexPTotalR(bandReal)
    End If
    IVKardexTotalR = t
End Function
'para rubros
Public Function IVKardexCTotalR(bandReal As Boolean) As Currency
    Dim t As Currency, i As Long, v As Currency
    
    For i = 1 To CountIVKardex
        If bandReal Then
            v = IVKardex(i).CostoRealTotal
        Else
            v = IVKardex(i).CostoTotal
        End If
        
        'Redondea con el formato para Costos      *** MAKOTO 13/feb/01 Mod.
        t = t + MiCCur(Format$(v, Me.FormatoCosto))
    Next i
    IVKardexCTotalR = t
End Function
'para rubros
Public Function IVKardexPTotalR(bandReal As Boolean) As Currency
    Dim t As Currency, i As Long, v As Currency
    Dim rs As Recordset
    Dim iv As IVInventario, sql As String

        
    If Not Me.EsNuevo Then
          sql = "select PrecioTotal,PrecioRealTotal from ivkardex ivk where ivk.transid = " & Me.transid
          Set rs = mProps.objEmpresa.OpenRecordset(sql)
          Do While Not rs.EOF
            If bandReal Then
                v = rs!PrecioRealTotal
                t = t + v '***Agregado. 28/08/2003. Angel. No funciona bien 01/jun/04
            Else
                v = rs!PrecioTotal
                t = t + MiCCur(Format$(v, Me.FormatoMoneda)) '***Antes, quitado para pruebas. Angel. 27/08/2003
            End If
            rs.MoveNext
    
          Loop
          rs.Close
    Else
    
'          For i = 1 To CountIVKardex
'          Set IV = Me.Empresa.RecuperaIVInventario(Me.IVKardex(i).CodInventario)
'                    If IV.tipo <> rubro Then
'                              If Not Me.IVKardex(i).bandVer Then  'Solo suma los subitems
'                                        If bandReal Then
'                                                  v = IVKardex(i).PrecioRealTotal
'                                                  t = t + v '***Agregado. 28/08/2003. Angel. No funciona bien 01/jun/04
'                                        Else
'                                                  v = IVKardex(i).PrecioTotal
'                                                  t = t + MiCCur(Format$(v, Me.FormatoMoneda)) '***Antes, quitado para pruebas. Angel. 27/08/2003
'                                        End If
'                              End If
'                    End If
'          Next i
   End If
    If bandReal Then
        IVKardexPTotalR = MiCCur(Format$(t, Me.FormatoMoneda)) '***Antes, quitado para pruebas. Angel. 27/08/2003
    Else
        IVKardexPTotalR = t '***Antes, quitado para pruebas. Angel. 27/08/2003
    End If
    Set iv = Nothing
End Function
'AUC 14/03/08 LAROT
Public Function ListaIVKardex4( _
                    ByVal ExistPorBodega As Boolean) As Variant
Dim sql As String, rs As Recordset
sql = "spConsIVKardex1 " & mProps.transid & ", " & _
        Me.Cotizacion("") & ", " & _
        CadenaBool(ExistPorBodega, Me.Empresa.TipoDB) & ", " & _
        CadenaBool((Me.GNTrans.IVTipoTrans = "E"), Me.Empresa.TipoDB)      '*** MAKOTO 26/ene/01 Mod. Si es egreso multiplica -1
Set rs = mProps.objEmpresa.OpenRecordset(sql)
Set ListaIVKardex4 = rs
Set rs = Nothing
End Function


'AUC 31/08/06 para los alquileres
Public Property Let NumDias(ByVal value As Currency)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.NumDias", MSGERR_SOLOVER
    mProps.NumDias = value
    mbooModificado = True
End Property

Public Property Get NumDias() As Currency
    NumDias = mProps.NumDias
End Property

'jeaa 02/09/2008
Public Function VerificaConfigIVAenTrans(ByVal CodIVA As String) As Boolean
    Dim i As Long
    Dim ivkr As IVKardexRecargo
    VerificaConfigIVAenTrans = False
    For i = 1 To Me.CountIVKardexRecargo
        Set ivkr = Me.IVKardexRecargo(i)
        If ivkr.CodRecargo = CodIVA Then
            VerificaConfigIVAenTrans = True
            Exit Function
        End If
    Next i
End Function

Public Function ObtieneTransAsignada(ByVal CodInventario As String, _
                                      ByRef idpadre As Long, ByRef CodPadre As String, _
                                      ByRef DescPadre As String) As Boolean
    Dim sql As String, rs As Recordset
        idpadre = 0
        CodPadre = ""
         
        sql = "  select distinct iv1.codinventario as CodPadre,iv1.Descripcion as DescPadre, idmateria "
        sql = sql & " from ivinventario iv inner join ivmateria ivm"
        sql = sql & " inner join ivinventario iv1 on ivm.idmateria=iv1.idinventario"
        sql = sql & " on iv.idinventario=ivm.idinventario "
        sql = sql & " where iv.codinventario='" & CodInventario & "'"
    
    
    
        Set rs = Me.Empresa.OpenRecordset(sql)
        If rs.EOF Then
            ObtieneTransAsignada = False
        Else
            If IsNull(rs!idMateria) Then
                ObtieneTransAsignada = False
            Else
                idpadre = rs!idMateria
                CodPadre = rs!CodPadre
                DescPadre = rs!DescPadre
                ObtieneTransAsignada = True
            End If
        End If
        rs.Close
        Set rs = Nothing
End Function

Public Function VerificaItemConTransAsignadaSoloCantidadFamilia(ByVal CodInventario As String, _
                                      ByRef CantLimite As Currency) As Boolean
    Dim sql As String, rs As Recordset
    CantLimite = 0
    
    If Me.GNTrans.IVItemDevolucion Then
        If Me.GNTrans.CodLineaDevolucion = CodInventario Then
            CantLimite = 1
            VerificaItemConTransAsignadaSoloCantidadFamilia = True
        End If
    Else
          
        sql = " SELECT isnull(Sum(IVK.Cantidad),0) as Total"
        sql = sql & " FROM IVKardex IVK inner join gncomprobante gnc on ivk.transid=gnc.transid "
        sql = sql & " INNER JOIN IVINVENTARIO IV"
        sql = sql & " ON IVK.IdInventario = IV.IdInventario"
        sql = sql & " Where gnc.estado <>3 and ivk.TransID = "
        sql = sql & Me.IdTransFuente & " And "
        sql = sql & " iv.idinventario=  (select idmateria"
        sql = sql & " from ivinventario iv inner join ivmateria ivm"
        sql = sql & " on iv.idinventario=ivm.idinventario"
        sql = sql & " where codinventario='" & CodInventario & "')"
    
    
    
        Set rs = Me.Empresa.OpenRecordset(sql)
        If rs.EOF Then
            VerificaItemConTransAsignadaSoloCantidadFamilia = False
        Else
            If IsNull(rs!TOTAL) Then
                VerificaItemConTransAsignadaSoloCantidadFamilia = False
            Else
                CantLimite = rs!TOTAL
                VerificaItemConTransAsignadaSoloCantidadFamilia = True
            End If
        End If
        rs.Close
        Set rs = Nothing
 End If
End Function

Public Function VerificaItemConAsignadoSoloCantidadFamilia(ByVal CodInventario As String, _
                                      ByRef CantLimite As Currency) As Boolean
    Dim sql As String, rs As Recordset, rsDev As Recordset
    CantLimite = 0
    
    If Me.GNTrans.IVItemDevolucion Then
        If Me.GNTrans.CodLineaDevolucion = CodInventario Then
            CantLimite = 1
            VerificaItemConAsignadoSoloCantidadFamilia = True
        End If
    Else
          
        If Me.GNTrans.IVOmitirControlCatidadTotal Then
            sql = " SELECT isnull(Sum(IVK.Cantidad),0) as Total"
            sql = sql & " FROM IVKardex IVK"
            sql = sql & " inner join ivmateria ivm"
            sql = sql & " INNER JOIN IVINVENTARIO IV"
            sql = sql & " ON IVm.Idmateria = IV.IdInventario"
            sql = sql & " on ivk.idinventario=ivm.idinventario"
            sql = sql & " inner join gncomprobante gnc"
            sql = sql & " inner join gnCentroCosto gcc"
            sql = sql & " on gcc.idcentro=gnc.idcentro"
            sql = sql & " on ivk.transid=gnc.transid"
            sql = sql & " Where gnc.estado <>3 "
''''            sql = sql & " and ivk.TransID = ( "
''''            sql = sql & " Select TransId  from  Gncomprobante where idtransfuente="
''''            '''sql = sql & Me.TransID & " ) "
            sql = sql & " and gcc.codcentro='" & Me.CodCentro & "'"
            sql = sql & " AND "
            sql = sql & " iv.idinventario=  (select DISTINCT idmateria"
            sql = sql & " from ivinventario iv inner join ivmateria ivm"
            sql = sql & " on iv.idinventario=ivm.idmateria "
            sql = sql & " where codinventario='" & CodInventario & "')"
            sql = sql & " AND CODTRANS not in ('MEGM','MEMM','MEQM')"
        
        Else
            sql = " SELECT isnull(Sum(IVK.Cantidad),0) as Total"
            sql = sql & " FROM IVKardex IVK"
            sql = sql & " inner join ivmateria ivm"
            sql = sql & " INNER JOIN IVINVENTARIO IV"
            sql = sql & " ON IVm.Idmateria = IV.IdInventario"
            sql = sql & " on ivk.idinventario=ivm.idinventario"
            sql = sql & " inner join gncomprobante gnc"
            sql = sql & " inner join gnCentroCosto gcc"
            sql = sql & " on gcc.idcentro=gnc.idcentro"
            sql = sql & " on ivk.transid=gnc.transid"
            sql = sql & " Where gnc.estado <>3 "
            sql = sql & " and ivk.TransID = ( "
            sql = sql & " Select TransId  from  Gncomprobante where idtransfuente="
            sql = sql & Me.transid & " ) "
    '''        sql = sql & " and gcc.codcentro='" & Me.CodCentro & "'"
            sql = sql & " AND "
            sql = sql & " iv.idinventario=  (select DISTINCT idmateria"
            sql = sql & " from ivinventario iv inner join ivmateria ivm"
            sql = sql & " on iv.idinventario=ivm.idmateria "
            sql = sql & " where codinventario='" & CodInventario & "')"
    ''''        sql = sql & " AND CODTRANS not in ('MEMM','MEGM','MEQM')"
        End If
    
        Set rs = Me.Empresa.OpenRecordset(sql)
        
        
        
        
        
        If rs.EOF Then
            VerificaItemConAsignadoSoloCantidadFamilia = False
        Else
       
            If IsNull(rs!TOTAL) Then
                VerificaItemConAsignadoSoloCantidadFamilia = False
            Else
                CantLimite = rs!TOTAL
                VerificaItemConAsignadoSoloCantidadFamilia = True
            End If
        End If
        rs.Close
        Set rs = Nothing
 End If
End Function

Public Function VerificaItemConAsignadoSoloCantidadDespacho(ByVal CodInventario As String, _
                                      ByRef CantLimite As Currency, CodCentro As String) As Boolean
    Dim sql As String, rs As Recordset
    CantLimite = 0
    
    If Me.GNTrans.IVItemDevolucion Then
        If Me.GNTrans.CodLineaDevolucion = CodInventario Then
            CantLimite = 1
            VerificaItemConAsignadoSoloCantidadDespacho = True
        End If
    Else
          
        sql = " SELECT isnull(Sum(IVK.Cantidad),0) as Total"
        sql = sql & " FROM IVKardex IVK"
        sql = sql & " INNER JOIN IVINVENTARIO IV"
        sql = sql & " on ivk.idinventario=iv.idinventario"
        sql = sql & " inner join gncomprobante gnc"
        sql = sql & " inner join gncentrocosto gcc"
        sql = sql & " on gnc.idcentro=gcc.idcentro"
        sql = sql & " on ivk.transid=gnc.transid"
        sql = sql & " Where gnc.estado <>3 "
        sql = sql & " AND codinventario='" & CodInventario & "'"
        sql = sql & " AND GCC.CODCENTRO= '" & CodCentro & "'"
        sql = sql & " AND CODTRANS not in ('MEMM','MEGM','MEQM')"
    
    
        Set rs = Me.Empresa.OpenRecordset(sql)
        If rs.EOF Then
            VerificaItemConAsignadoSoloCantidadDespacho = False
        Else
            If IsNull(rs!TOTAL) Then
                VerificaItemConAsignadoSoloCantidadDespacho = False
            Else
                CantLimite = rs!TOTAL
                VerificaItemConAsignadoSoloCantidadDespacho = True
            End If
        End If
        rs.Close
        Set rs = Nothing
 End If
End Function



Public Property Let CodUsuarioAutoriza(value As String)
    If Len(value) > 10 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.CodUsuarioAutoriza", MSGERR_INVALIDO
    End If

    mProps.CodUsuarioAutoriza = value
    mbooModificado = True
End Property

Public Property Get CodUsuarioAutoriza() As String
    CodUsuarioAutoriza = Trim$(mProps.CodUsuarioAutoriza)
End Property

Public Property Let CodFormnaCP(value As String)
    If Len(value) > 20 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.CodFormnaCP", MSGERR_INVALIDO
    End If

    mProps.CodFormnaCP = value
    mbooModificado = True
End Property

Public Property Get CodFormnaCP() As String
    CodFormnaCP = Trim$(mProps.CodFormnaCP)
End Property


Public Sub CambiaEstadoTransAsociada(ByVal CodTrans As String)
    Dim tid As Variant, sql As String
    
        'Cambia el estado de fuente a NoAProvado        '*** jeaa 13/10/2008
        sql = "UPDATE GNComprobante SET Estado=" & ESTADO_NOAPROBADO
        sql = sql & " where IdTransFuente = " & Me.transid
        sql = sql & " and codtrans='" & CodTrans & "M'"
        sql = sql & " AND ((Estado<>" & ESTADO_ANULADO & ") )"
        If Len(sql) > 0 Then
            Me.Empresa.Execute sql, True
        End If
End Sub


'--------------- Manejo de coleccion de AFKardex

Public Function AddAFKardex() As Long
    Dim nuevo As AFKardex
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.AddAFKardex", MSGERR_SOLOVER
    If mcolAFKardex Is Nothing Then RecuperaAFKardex
    'Si tiene límite de número de filas         '*** MAKOTO 14/oct/00 Agregado
    ' y es nuevo comprobante
    If (Me.GNTrans.IVNumFilaMax > 0) And Me.EsNuevo Then
        'Verifica el número de filas, y no permite más del límite
        If mcolAFKardex.Count >= Me.GNTrans.IVNumFilaMax Then
            Err.Raise ERR_INVALIDO, "GNComprobante.AddAFKardex", _
                "No se puede agregar más filas porque está limitado hasta " & _
                 Me.GNTrans.IVNumFilaMax & " filas." & vbCr & vbCr & _
                "Si hay más detalle de items, regístrelos en otro comprobante." & vbCr & _
                "Si quiere cambiar el límite, váyase a la configuración de la transacción, por favor."
        End If
    End If
    Set nuevo = New AFKardex
    Set nuevo.GNComprobante = Me
    'Proporciona valores predeterminados
    nuevo.Cantidad = GNTrans.CantidadPre
    If Me.CountAFKardex = 0 Then                        '*** Makoto 16/dic/00 Modificado para que copie lo anterior
        nuevo.CodBodega = GNTrans.CodBodegaPre
    Else
        'Si no es primero copia lo anterior
        nuevo.CodBodega = Me.AFKardex(Me.CountAFKardex).CodBodega
    End If
    mcolAFKardex.Add nuevo
    AddAFKardex = mcolAFKardex.Count    'Devuelve el indice de nuevo elemento
    Set nuevo = Nothing
    mbooModificado = True
End Function

Public Sub RemoveAFKardex(ByVal ix As Long, Optional obj As AFKardex)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemoveAFKardex", MSGERR_SOLOVER
    If mcolAFKardex Is Nothing Then RecuperaAFKardex
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolAFKardex.Count
            If mcolAFKardex.item(ix) Is obj Then
                mcolAFKardex.Remove ix
                Exit For
            End If
        Next ix
        Debug.Assert True   'No se puede dar
    Else
        mcolAFKardex.Remove ix
    End If
    mbooModificado = True
End Sub
'Elimina todos los detalles de AFKardex

Public Sub BorrarAFKardex()
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BorrarAFKardex", MSGERR_SOLOVER
    If mcolAFKardex Is Nothing Then Set mcolAFKardex = New Collection
    With mcolAFKardex
        Do While .Count > 0
            .Remove .Count
        Loop
    End With
    mbooModificado = True
End Sub

Public Property Get CountAFKardex() As Long
    If mcolAFKardex Is Nothing Then RecuperaAFKardex
    CountAFKardex = mcolAFKardex.Count
End Property

Public Property Get AFKardex(ix As Long) As AFKardex
    If mcolAFKardex Is Nothing Then RecuperaAFKardex
    Set AFKardex = mcolAFKardex.item(ix)
End Property

Private Sub RecuperaAFKardex()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolAFKardex Is Nothing Then Set mcolAFKardex = New Collection
    BorrarAFKardex
    'Recupera los AFKardex
    sql = "SELECT * FROM vwAFKardex WHERE TransId=" & mProps.transid & " ORDER BY Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddAFKardex
                AFKardex(i).Recuperar rs
            End If
            .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub

Public Function AFKardexRecAfectaIvaItem() As Currency
    Dim t As Currency, i As Long, afkr As AFKardexRecargo
    For i = 1 To CountAFKardexRecargo
        Set afkr = AFKardexRecargo(i)
        If afkr.AfectaIvaItem Then
            t = t + afkr.Valor
        End If
    Next i
    AFKardexRecAfectaIvaItem = t
    Set afkr = Nothing
End Function

Public Function AFKardexTotal(bandReal As Boolean) As Currency
    Dim t As Currency
    'Decide si calcula en base de Precio o Costo
    If GNTrans.IVRecargoEnCosto Then
        t = AFKardexCTotal(bandReal)
    Else
        t = AFKardexPTotal(bandReal)
    End If
    AFKardexTotal = t
End Function

Public Function AFKardexCTotal(bandReal As Boolean) As Currency
    Dim t As Currency, i As Long, v As Currency
    For i = 1 To CountAFKardex
        If bandReal Then
            v = AFKardex(i).CostoRealTotal
        Else
            v = AFKardex(i).CostoTotal
        End If
        'Redondea con el formato para Costos      *** MAKOTO 13/feb/01 Mod.
        t = t + MiCCur(Format$(v, Me.FormatoCosto))
    Next i
    AFKardexCTotal = t
End Function

Public Function AFKardexPTotal(bandReal As Boolean) As Currency
    Dim t As Currency, i As Long, v As Currency
    For i = 1 To CountAFKardex
        If Me.AFKardex(i).Cantidad <> 0 Then 'AUC agregado para que calcule cuando no tenga cant
            If bandReal Then
                v = AFKardex(i).PrecioRealTotal
                t = t + v '***Agregado. 28/08/2003. Angel. No funciona bien 01/jun/04
            Else
                v = AFKardex(i).PrecioTotal
                t = t + MiCCur(Format$(v, Me.FormatoMoneda)) '***Antes, quitado para pruebas. Angel. 27/08/2003
            End If
        End If
    Next i
    If bandReal Then
        AFKardexPTotal = MiCCur(Format$(t, Me.FormatoMoneda)) '***Antes, quitado para pruebas. Angel. 27/08/2003
    Else
        AFKardexPTotal = t '***Antes, quitado para pruebas. Angel. 27/08/2003
    End If
End Function

Public Function AFKardexDescItemTotal() As Currency
    Dim t As Currency, i As Long, ivk As AFKardex, bandCosto As Boolean
    Dim u As Currency
    'Decide si calcula en base a Precio o Costo
    bandCosto = GNTrans.IVRecargoEnCosto
    For i = 1 To CountAFKardex
        Set ivk = AFKardex(i)
        If bandCosto Then
            u = ivk.CostoTotal * ivk.Descuento           '*** MAKOTO 29/ene/01 Mod.
            'Redondea al formato de Costos
            u = MiCCur(Format$(u, Me.FormatoCosto))         '*** MAKOTO 29/ene/01 Mod.
        Else
            u = ivk.PrecioTotal * ivk.Descuento          '*** MAKOTO 29/ene/01 Mod.
            'Redondea al formato de P.Total
            u = MiCCur(Format$(u, Me.FormatoMoneda))        '*** MAKOTO 29/ene/01 Mod.
        End If
        t = t + u
    Next i
    AFKardexDescItemTotal = Abs(t)      '*** MAKOTO 29/ene/01 Mod. Devuelde en valor absoluto
    Set ivk = Nothing
End Function

Public Sub ProrratearAFKardexRecargo()
    Dim i As Long, afk As AFKardex, p As Currency, por As Double
    Dim ct As Currency, pt As Currency, desc As Currency
    Dim cpr As Currency 'para costo/precio redondeado
    p = IVRecargoTotal(False, True) 'Total de recargos prorrateados
    ct = Abs(AFKardexCTotal(False))       'Total de costo total neto
    pt = Abs(AFKardexPTotal(False))      'Total de precio total neto
    'Si recargos son basados en Precio
    If Not GNTrans.IVRecargoEnCosto Then
        por = 0
        If pt Then por = p / pt
        For i = 1 To CountAFKardex
            Set afk = AFKardex(i)
            'Costo real es lo mismo que costo
            afk.CostoRealTotal = afk.CostoTotal
            'Aplica %Descuento a precio total
            desc = afk.PrecioTotal * afk.Descuento          '*** MAKOTO 13/dic/00
            '***pruebas***Angel 01/jun/04
            '*** Esto no estaba pero si esta para compras
            '*** por eso le agrego hay que ver que resultados da
            '*** MAKOTO 29/ene/01 Redondear al formato de presentación
            desc = MiCCur(Format$(desc, Me.FormatoMoneda))
            'Desc = MiCCur(Desc) ''*** oLIVER PARA Q NO HAYA DIFERENCIA ENTRE PRECIOTOTAL Y PRECIOREALTOTAL
            'Prorratea al precio total
            'AFK.PrecioRealTotal = AFK.PrecioTotal * (1# + por) - Desc
            '***pruebas***Angel 01/jun/04
            cpr = MiCCur(Format$(afk.PrecioTotal, Me.FormatoMoneda))
            'cpr = MiCCur(AFK.PrecioTotal)
            afk.PrecioRealTotal = cpr * (1# + por) - desc
        Next i
    'Si recargos son basados en Costo
    Else
        por = 0
        If ct Then por = p / ct
        For i = 1 To CountAFKardex
            Set afk = AFKardex(i)
            afk.PrecioRealTotal = afk.PrecioTotal   'Precio no prorratea
            '%Descuento aplica a costo total
            desc = afk.CostoTotal * afk.Descuento       '*** MAKOTO 13/dic/00
            '*** MAKOTO 29/ene/01 Redondear al formato de presentación
            desc = MiCCur(Format$(desc, Me.FormatoMoneda))
            'Prorratea al costo total
            'AFK.CostoRealTotal = AFK.CostoTotal * (1# + por) - Desc
            '***pruebas***Angel 01/jun/04
            cpr = MiCCur(Format$(afk.CostoTotal, Me.FormatoCosto))
            afk.CostoRealTotal = cpr * (1# + por) - desc
       Next i
    End If
    Set afk = Nothing
End Sub

Public Function ListaAFKardex2( _
                    ByVal ExistPorBodega As Boolean) As Variant
    Dim sql As String, rs As Recordset
#If DAOLIB Then
    Dim qdef As DAO.QueryDef
    If ExistPorBodega Then
        Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsAFKardex")
    Else
        Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsAFKardex2")
    End If
    qdef.Parameters("tid") = mProps.transid
    qdef.Parameters("Cotizacion") = Me.Cotizacion("")
    qdef.Parameters("BandEgreso") = (Me.GNTrans.IVTipoTrans = "E")
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Dim cmd As ADODB.Command
    Set cmd = New ADODB.Command
    cmd.ActiveConnection = mProps.objEmpresa.Coneccion
    'Si la base es de JET
    If mProps.objEmpresa.TipoDB = TIPODB_JET Then
        cmd.CommandType = adCmdTable
        If ExistPorBodega Then
            cmd.CommandText = "spConsAFKardex"
        Else
            cmd.CommandText = "spConsAFKardex2"
        End If
        cmd.Parameters.Append cmd.CreateParameter("tid", adInteger, adParamInput, , mProps.transid)
        cmd.Parameters.Append cmd.CreateParameter("Cotizacion", adCurrency, adParamInput, , mProps.Cotizacion)
        Set rs = cmd.Execute
    'Si la base es de SQLSvr
    Else
        sql = "spConsAFKardex " & mProps.transid & ", " & _
                                  Me.Cotizacion("") & ", " & _
                                  CadenaBool(ExistPorBodega, Me.Empresa.TipoDB) & ", " & _
                                  CadenaBool((Me.GNTrans.IVTipoTrans = "E"), Me.Empresa.TipoDB)     '*** MAKOTO 26/ene/01 Mod. Si es egreso multiplica -1
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
    End If
#End If
    Set ListaAFKardex2 = rs
    Set rs = Nothing
End Function

Public Property Get CountAFKardexRecargo() As Long
    If mcolAFKardexRecargo Is Nothing Then RecuperaAFKardexRecargo
    CountAFKardexRecargo = mcolAFKardexRecargo.Count
End Property

Public Property Get AFKardexRecargo(ix As Long) As AFKardexRecargo
    If mcolAFKardexRecargo Is Nothing Then RecuperaAFKardexRecargo
    Set AFKardexRecargo = mcolAFKardexRecargo.item(ix)
End Property

Private Sub RecuperaAFKardexRecargo()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolIVKardexRecargo Is Nothing Then Set mcolIVKardexRecargo = New Collection
    'Recupera los IVKardexRecargo
    BorrarAFKardexRecargo
    sql = "SELECT A.*,B.CodRecargo FROM afKardexRecargo A LEFT JOIN IVRecargo B ON A.IdRecargo=B.IdRecargo " & _
          " WHERE TransId=" & mProps.transid & " ORDER BY Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddAFKardexRecargo
                AFKardexRecargo(i).Recuperar rs
            End If
            .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub

'--------------- Manejo de coleccion de AFKardexRecargo
Public Function AddAFKardexRecargo() As Long
    Dim nuevo As AFKardexRecargo
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.AddAFKardexRecargo", MSGERR_SOLOVER
    If mcolAFKardexRecargo Is Nothing Then RecuperaAFKardexRecargo
    Set nuevo = New AFKardexRecargo
    Set nuevo.GNComprobante = Me
    mcolAFKardexRecargo.Add nuevo
    AddAFKardexRecargo = mcolAFKardexRecargo.Count    'Devuelve el indice de nuevo elemento
    Set nuevo = Nothing
    mbooModificado = True
End Function

Public Function BuscaAFKardexRecargo(IdRecargo As Long) As AFKardexRecargo
    Dim obj As AFKardexRecargo
    If mcolAFKardexRecargo Is Nothing Then RecuperaAFKardexRecargo
    For Each obj In mcolAFKardexRecargo
        If obj.IdRecargo = IdRecargo Then
            Set BuscaAFKardexRecargo = obj
            Exit For
        End If
    Next obj
    Set obj = Nothing
End Function

Public Sub RemoveAFKardexRecargo(ByVal ix As Long, Optional obj As AFKardexRecargo)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemoveAFKardexRecargo", MSGERR_SOLOVER
    If mcolAFKardexRecargo Is Nothing Then RecuperaAFKardexRecargo
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolAFKardexRecargo.Count
            If mcolAFKardexRecargo.item(ix) Is obj Then
                mcolAFKardexRecargo.Remove ix
                Exit For
            End If
        Next ix
        Debug.Assert True   'No se puede dar
    Else
        mcolAFKardexRecargo.Remove ix
    End If
    mbooModificado = True
End Sub

'Elimina todos los detalles de AFKardexRecargo
Public Sub BorrarAFKardexRecargo()
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BorrarAFKardexRecargo", MSGERR_SOLOVER
    If mcolAFKardexRecargo Is Nothing Then Set mcolAFKardexRecargo = New Collection
    With mcolAFKardexRecargo
        Do While .Count > 0
            .Remove .Count
        Loop
    End With
    mbooModificado = True
End Sub

Public Function AFKardexTotalIVA(bandReal As Boolean, BandIVA As Boolean) As Currency
    Dim t As Currency
    'Decide si calcula en base de Precio o Costo
    If GNTrans.IVRecargoEnCosto Then
        t = AFKardexCTotalIVA(bandReal, BandIVA)
    Else
        t = AFKardexPTotalIVA(bandReal, BandIVA)
    End If
    AFKardexTotalIVA = t
End Function

Public Function AFKardexCTotalIVA(bandReal As Boolean, BandIVA As Boolean) As Currency
    Dim t As Currency, i As Long, v As Currency
    Dim item As AFInventario
    For i = 1 To CountAFKardex
        Set item = Me.Empresa.RecuperaAFInventario(AFKardex(i).IdInventario)
        If Not item Is Nothing Then
            If item.BandIVA = BandIVA Then
                If bandReal Then
                    v = AFKardex(i).CostoRealTotal
                Else
                    v = AFKardex(i).CostoTotal
                End If
                'Redondea con el formato para Costos      *** MAKOTO 13/feb/01 Mod.
                t = t + MiCCur(Format$(v, Me.FormatoCosto))
            End If
        End If
    Next i
    Set item = Nothing
    AFKardexCTotalIVA = t
End Function

Public Function AFKardexPTotalIVA(bandReal As Boolean, BandIVA As Boolean) As Currency
    Dim t As Currency, i As Long, v As Currency
    Dim item As AFInventario
    For i = 1 To CountAFKardex
        If AFKardex(i).IdInventario <> 0 Then
            Set item = Me.Empresa.RecuperaAFInventario(AFKardex(i).IdInventario)
            If Not item Is Nothing Then
                If item.BandIVA = BandIVA Then
                    If Me.AFKardex(i).Cantidad <> 0 Then 'AUC agregado para que calcule cuando no tenga cant
                        If bandReal Then
                            v = AFKardex(i).PrecioRealTotal
                            t = t + v '***Agregado. 28/08/2003. Angel. No funciona bien 01/jun/04
                        Else
                            v = AFKardex(i).PrecioTotal
                            t = t + MiCCur(Format$(v, Me.FormatoMoneda)) '***Antes, quitado para pruebas. Angel. 27/08/2003
                        End If
                    End If
                End If
            End If
        End If
    Next i
    Set item = Nothing
    If bandReal Then
        AFKardexPTotalIVA = MiCCur(Format$(t, Me.FormatoMoneda)) '***Antes, quitado para pruebas. Angel. 27/08/2003
    Else
        AFKardexPTotalIVA = t '***Antes, quitado para pruebas. Angel. 27/08/2003
    End If
End Function

Public Function AFKardexIVAItemTotal() As Currency
    Dim t As Currency, i As Long, ivk As AFKardex
    Dim por As Double, v As Currency, bandCalculado As Boolean
    For i = 1 To CountAFKardex
        Set ivk = AFKardex(i)
        If Me.AFKardex(i).Cantidad <> 0 Then 'AUC agregado para que no carge valores =0
            v = ivk.CalcularIvaItem(por, bandCalculado)
            t = t + v               'Suma valor de IVA de item
        End If
    Next i
'    AFKardexIVAItemTotal = t
    AFKardexIVAItemTotal = Abs(t)            '*** MAKOTO 29/ene/01 Mod.
    Set ivk = Nothing
End Function

Public Function AFKardexSumaIVAItemTotal() As Currency
    Dim t As Currency, i As Long, ivk As AFKardex
    Dim por As Double, v As Currency, bandCalculado As Boolean
    For i = 1 To CountAFKardex
        Set ivk = AFKardex(i)
        If Me.AFKardex(i).Cantidad <> 0 Then 'AUC agregado para que no carge valores =0
            v = ivk.CalcularSumaIvaItem(por, bandCalculado)
            t = t + v               'Suma valor de IVA de item
        End If
    Next i
    If Me.FechaTrans < "01/06/2016" Then
        AFKardexSumaIVAItemTotal = Abs(t) * Me.GNTrans.Empresa.GNOpcion.PorcentajeIVA
    ElseIf Me.FechaTrans > "31/05/2016" And Me.FechaTrans < "01/06/2017" And Not Me.BandAplicaIvaAnt Then
        AFKardexSumaIVAItemTotal = Abs(t) * Me.GNTrans.Empresa.GNOpcion.PorcentajeIVAAnt
    ElseIf Me.FechaTrans >= Me.GNTrans.Empresa.GNOpcion.FechaIVA Then
        AFKardexSumaIVAItemTotal = Abs(t) * Me.GNTrans.Empresa.GNOpcion.PorcentajeIVA
    Else
        AFKardexSumaIVAItemTotal = Abs(t) * Me.GNTrans.Empresa.GNOpcion.PorcentajeIVAAnt
    End If
    Set ivk = Nothing
End Function

Public Function AFRecargoTotal(NoProrrateados As Boolean, Prorrateados As Boolean) As Currency
    Dim t As Currency, gnt As GNTransRecargo, i As Long
    Dim pc As PCProvCli, BandEmpPub As Boolean
    BandEmpPub = False
    If Me.GNTrans.IVOmitirIVA Then
        Set pc = Me.Empresa.RecuperaPCProvCli(Me.IdClienteRef)
        If pc Is Nothing Then
            BandEmpPub = False
        Else
            If pc.BandEmpresaPublica Then
                BandEmpPub = True
            End If
        End If
    End If
    If Prorrateados And NoProrrateados Then
        For i = 1 To CountIVKardexRecargo
            t = t + IVKardexRecargo(i).Valor
        Next i
    ElseIf Prorrateados Then
        For i = 1 To CountAFKardexRecargo
            Set gnt = Me.GNTrans.BuscaRecargo(IVKardexRecargo(i).CodRecargo)
            If Me.Empresa.GNOpcion.ObtenerValor("OmitirIVA") = "1" And Me.GNTrans.IVOmitirIVA Then
                If Not (gnt Is Nothing) Then
                    If BandEmpPub Then
                        If gnt.CodRecargo <> Me.Empresa.GNOpcion.ObtenerValor("RecDescParaIVA") Then
                            If gnt.BandProrrateado Then
                                t = t + IVKardexRecargo(i).Valor
                            End If
                            If gnt.BandProrrateado <> AFKardexRecargo(i).BandProrrateado Then '18/3/2004 Diego  aqui actualiza  el valor prorrateado
                                AFKardexRecargo(i).BandProrrateado = gnt.BandProrrateado
                            End If
                        End If
                    Else
                        If gnt.BandProrrateado Then
                            t = t + AFKardexRecargo(i).Valor
                        End If
                        If gnt.BandProrrateado <> AFKardexRecargo(i).BandProrrateado Then '18/3/2004 Diego  aqui actualiza  el valor prorrateado
                            AFKardexRecargo(i).BandProrrateado = gnt.BandProrrateado
                        End If
                    End If
                End If
            Else
                If Not (gnt Is Nothing) Then
                        If gnt.BandProrrateado Then
                            t = t + AFKardexRecargo(i).Valor
                        End If
                        If gnt.BandProrrateado <> AFKardexRecargo(i).BandProrrateado Then '18/3/2004 Diego  aqui actualiza  el valor prorrateado
                            AFKardexRecargo(i).BandProrrateado = gnt.BandProrrateado
                        End If
                End If
            End If
        Next i
    Else
        For i = 1 To CountAFKardexRecargo
            Set gnt = GNTrans.BuscaRecargo(AFKardexRecargo(i).CodRecargo)
            If Me.Empresa.GNOpcion.ObtenerValor("OmitirIVA") = "1" And Me.GNTrans.IVOmitirIVA Then
                If Not (gnt Is Nothing) Then
                    If BandEmpPub Then
                        If gnt.CodRecargo <> Me.Empresa.GNOpcion.ObtenerValor("RecDescParaIVA") Then
                            If Not gnt.BandProrrateado Then
                                t = t + AFKardexRecargo(i).Valor
                            End If
                            If gnt.BandProrrateado <> AFKardexRecargo(i).BandProrrateado Then '18/3/2004 Diego  aqui actualiza  el valor prorrateado
                                AFKardexRecargo(i).BandProrrateado = gnt.BandProrrateado
                            End If
                        End If
                    Else
                        If Not gnt.BandProrrateado Then
                            t = t + AFKardexRecargo(i).Valor
                        End If
                        If gnt.BandProrrateado <> AFKardexRecargo(i).BandProrrateado Then '18/3/2004 Diego  aqui actualiza  el valor prorrateado
                            AFKardexRecargo(i).BandProrrateado = gnt.BandProrrateado
                        End If
                    End If
                End If
            Else
                    Set gnt = Me.GNTrans.BuscaRecargo(AFKardexRecargo(i).CodRecargo)
                    If Not (gnt Is Nothing) Then
                        If Not gnt.BandProrrateado Then
                            t = t + AFKardexRecargo(i).Valor
                        End If
                        If gnt.BandProrrateado <> AFKardexRecargo(i).BandProrrateado Then '18/3/2004 Diego  aqui actualiza  el valor prorrateado
                            AFKardexRecargo(i).BandProrrateado = gnt.BandProrrateado
                        End If
                    End If
            End If
        Next i
    End If
    AFRecargoTotal = t
    Set gnt = Nothing
    Set pc = Nothing
End Function

Public Function ListaAFKardexRecargo() As Variant
    Dim sql As String, rs As Recordset
#If DAOLIB Then
    Dim qdef As QueryDef
        If EsNuevo Then
            Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsAFKardexRecargoNuevo")
            qdef.Parameters("CodT") = Me.CodTrans
            qdef.Parameters("Cotizacion") = Me.Cotizacion("")
            Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
        Else
            Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsAFKardexRecargoMod")
            qdef.Parameters("tid") = Me.transid
            qdef.Parameters("Cotizacion") = Me.Cotizacion("")
            Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
        End If
#Else
    'Si la base es de JET
    If mProps.objEmpresa.TipoDB = TIPODB_JET Then
        Dim cmd As New ADODB.Command
        If EsNuevo Then
            Set cmd.ActiveConnection = mProps.objEmpresa.Coneccion
            cmd.CommandText = "spConsAFKardexRecargoNuevo"
            cmd.Parameters.Append cmd.CreateParameter("CodT", adVarChar, adParamInput, , Me.CodTrans)
            cmd.Parameters.Append cmd.CreateParameter("Cotizacion", adCurrency, adParamInput, , Me.Cotizacion(""))
            Set rs = cmd.Execute
        Else
            Set cmd.ActiveConnection = mProps.objEmpresa.Coneccion
            cmd.CommandText = "spConsAFKardexRecargoMod"
            cmd.Parameters.Append cmd.CreateParameter("tid", adVarChar, adParamInput, , Me.CodTrans)
            cmd.Parameters.Append cmd.CreateParameter("Cotizacion", adCurrency, adParamInput, , Me.Cotizacion(""))
            Set rs = cmd.Execute
        End If
    'Si la base es de SQLSvr
    Else
        If EsNuevo Then
            sql = "spConsAFKardexRecargoNuevo '" & mProps.CodTrans & "'," & Me.Cotizacion("")
        Else
            sql = "spConsAFKardexRecargoMod " & mProps.transid & "," & Me.Cotizacion("")
        End If
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
    End If
#End If
    Set ListaAFKardexRecargo = rs
    Set rs = Nothing
End Function


Friend Sub ActualizaCantidadAF(ByVal Signo As String)
    Dim sql As String

    If CountAFKardex = 0 Then Exit Sub     'Si no tiene detalle de AFKardex, sale
    

    'Aumenta o resta la existencia
#If DAOLIB Then
    sql = "UPDATE AFExist d, AFKardex k " & _
          "SET d.Exist = d.Exist" & Signo & "k.Cantidad " & _
          "WHERE (d.IdBodega = k.IdBodega) AND (d.IdInventario = k.IdInventario) " & _
                " AND k.TransID=" & mProps.transid
#Else
    sql = "spAFExist '" & Signo & "', " & mProps.transid
    
#End If
    mProps.objEmpresa.Execute sql, True
End Sub


Private Function GeneraAsientoAFActivo( _
                    Param As String) As colAsientoTemp
    Dim i As Long, v As Currency, k As AFKardex
    Dim col As colAsientoTemp
    
    Set col = New colAsientoTemp
    For i = 1 To CountAFKardex
        v = 0
        Set k = AFKardex(i)
        
        '*** MAKOTO 08/mar/01 Agregado
        'Si es que el item no tiene asignado una cuenta de Activo, genera error
        If k.auxIdCuentaActivo = 0 Then
            NoTieneCuentaAsignado True, "ACTIVO", k.CodInventario
        End If
        
        Select Case Right$(Param, 1)
        Case "+":   If k.CostoRealTotal > 0 Then v = Abs(k.CostoRealTotal)  'Sólo positivos
        Case "-":   If k.CostoRealTotal < 0 Then v = Abs(k.CostoRealTotal)  'Sólo negativos
        Case Else:  v = Abs(k.CostoRealTotal)       'Todos con valor absoluto
        End Select
        
        If v <> 0 Then
            'Redondea al formato de moneda               '*** MAKOTO 13/feb/01
            'No con FormatoCosto porque asiento tiene que ser cuadrado con valores de Ctas x Pagar/Cobrar
            'Por ejemplo si está FormatoMoneda con 2 decimales y FormatoCosto con 4 decimales,
            'va a haber una diferencia entre Kardex de inventario y Libro mayor de inventario, algo que ya es inevitable.
'            v = MiCCur(Format$(v, Me.FormatoMoneda))   '*** MAKOTO 01/mar/01 Error, era formato de costo
            'jeaa 02/10/2006 diferencia en asiento
            If mobjGNTrans.IVTipoTrans = "I" Then
                v = MiCCur(Format$(v, Me.FormatoCosto))
            Else
                If FormatoMoneda = "#,0.00" And Me.FormatoCosto = "#,#.0000" Then
                    v = MiCCur(Format$(v, Me.FormatoMoneda))
                Else
                    v = MiCCur(Format$(v, Me.FormatoCosto))
                End If
            End If
            col.Add k.auxIdCuentaActivo, v
        End If
    Next i
    
    'Al ultimo tiene que redondear al formato de Precio Total       '*** MAKOTO 01/mar/01
    RedondearAsiento col, Me.FormatoMoneda
    
    If col.Count Then Set GeneraAsientoAFActivo = col
    Set col = Nothing
End Function



'**********************************
'*** jeaa 26/12/2002
'*** todo lo que tiene que ver con
'*** generacion de un asiento  por
'*** lote de Depreciaciones.
'**********************************


Public Sub Generar1AsientoxLoteDepre()
    Dim i As Long, f As String, colAT As colAsientoTemp
    Dim obj As AsientoTemp, j As Long, ctl As CTLibroDetalle
    Dim rs As Recordset
    Dim gnc As GNComprobante
    Dim ix As Long, pos_verifica_asiento As Long
    Dim cancelado As Boolean
    
    'Remueve los asientos existentes (Solo auto-generados)
    
    For i = CountCTLibroDetalle To 1 Step -1
        'No elimina los asiento agregados por usuario
        If CTLibroDetalle(i).BandIntegridad = INTEG_AUTO Then
            mcolCTLibroDetalle.Remove i
            mbooModificado = True
        End If
    Next i
    
    Set rs = mProps.objEmpresa.ConsGNTrans3(True)   'Ascendente.
    'Revisar una por una las Transacciones para ir sumando los asientos
    
    cancelado = False
    ix = 0
    pos_verifica_asiento = 1   'variable utilizada para verificar si esta cuadrado parcialmente
    Do While (Not rs.EOF)
        DoEvents
        ix = ix + 1
        'recuperar los Comprobantes uno por uno
        Set gnc = Me.Empresa.RecuperaGNComprobante(rs!transid)
        With GNTrans
            For i = 1 To .CountAsiento
                Set colAT = Nothing
                f = UCase$(.Asientos(i).Formula)
                Select Case f
                Case "TSBANCO"
                    Set colAT = GeneraAsientoTSBanco_Lote(gnc)
                Case "TSRETACTIVO"                        '*** MAKOTO 07/feb/01
                    Set colAT = GeneraAsientoTSRetencion_Lote(gnc, True)
                Case "TSRETPASIVO"                        '*** MAKOTO 12/feb/01
                    Set colAT = GeneraAsientoTSRetencion_Lote(gnc, False)
                Case "TSBANCODEBE"
                    Set colAT = GeneraAsientoTSBancoDebe_Lote(gnc)
                Case "TSBANCOHABER"
                    Set colAT = GeneraAsientoTSBancoHaber_Lote(gnc)
                Case "PCTOTAL"
                    Set colAT = GeneraAsientoPCTotal_Lote(gnc, True)
                Case "PCTOTAL2"
                    Set colAT = GeneraAsientoPCTotal_Lote(gnc, False)
                Case "PCTOTALDEBE"
                    Set colAT = GeneraAsientoPCTotalDebe_Lote(gnc, True)
                Case "PCTOTALDEBE2"
                    Set colAT = GeneraAsientoPCTotalDebe_Lote(gnc, False)
                Case "PCTOTALHABER"
                    Set colAT = GeneraAsientoPCTotalHaber_Lote(gnc, True)
                Case "PCTOTALHABER2"
                    Set colAT = GeneraAsientoPCTotalHaber_Lote(gnc, False)
                Case "PCPAGO"
                    Set colAT = GeneraAsientoPCPago_Lote(gnc, True)
                Case "PCPAGO2"
                    Set colAT = GeneraAsientoPCPago_Lote(gnc, False)
                Case "PCCOBRO"
                    Set colAT = GeneraAsientoPCCobro_Lote(gnc, True)
                Case "PCCOBRO2"
                    Set colAT = GeneraAsientoPCCobro_Lote(gnc, False)
                Case "PCXCOBRAR"
                    Set colAT = GeneraAsientoPCPorCobrarPagar_Lote(gnc, True)
                Case "PCXPAGAR"
                    Set colAT = GeneraAsientoPCPorCobrarPagar_Lote(gnc, False)
                Case "IVACTIVO", "IVACTIVO+", "IVACTIVO-"
                    Set colAT = GeneraAsientoIVActivo_Lote(gnc, f)
                Case "IVCOSTO", "IVCOSTO+", "IVCOSTO-"
                    Set colAT = GeneraAsientoIVCosto_Lote(gnc, f)
                Case "IVVENTA", "IVVENTA+", "IVVENTA-", "IVVENTA*", "IVVENTA2"
                    Set colAT = GeneraAsientoIVVenta_Lote(gnc, f)
                Case "IVCOSTOTOTAL", "IVCOSTOTOTAL+", "IVCOSTOTOTAL-"
                    Set colAT = GeneraAsientoIVCostoTotal_Lote(gnc, f)
                Case "IVPRECIOTOTAL", "IVPRECIOTOTAL+", _
                     "IVPRECIOTOTAL-", "IVPRECIOTOTAL*"
                    Set colAT = GeneraAsientoIVPrecioTotal_Lote(gnc, f)
                Case "IVCOSTOTOTAL2"
                    Set colAT = GeneraAsientoIVCostoTotal2_Lote(gnc)
                Case "IVPRECIOTOTAL2"
                    Set colAT = GeneraAsientoIVPrecioTotal2_Lote(gnc)
                Case "IVDESCITEMTOTAL" '***Agregado. 02/ago/2004. Angel
                    Set colAT = GeneraAsientoIVDescItemTotal_Lote(gnc)
                Case Else
                    Select Case Left$(f, 1)
                    Case "$"        'Documentos bancarios
                        Set colAT = GeneraAsientoTSDoc_Lote(gnc, Mid$(f, 2))
                    Case "%"        'Recargos/Descuentos
                        Set colAT = GeneraAsientoIVRecargo_Lote(gnc, Mid$(f, 2))
                    Case "#"        'Formas de pago/cobro
                        Set colAT = GeneraAsientoFormaCobroPago_lote(gnc, Mid$(f, 2))
                    End Select
                End Select
                
                If Not colAT Is Nothing Then
                    For Each obj In colAT
                        j = AddCTLibroDetalleAuto   'Agrega y pone INTEG_AUTO en BandIntegridad
                        Set ctl = CTLibroDetalle(j)
                        
                        '0 significa que IdCuenta es variable
                        If .Asientos(i).IdCuenta <> 0 Then
                            ctl.SetIdCuentaAuto .Asientos(i).IdCuenta
                        Else
                            ctl.SetIdCuentaAuto obj.IdCuenta
                        End If
                        
                        '*** Eliminado, porque Descripcion siempre copia de GNComprobante en AddCTLibroDetalle
    '                    ctl.Descripcion = .Asientos(i).Descripcion
    
                        If .Asientos(i).BandDeudor Then
                            ctl.Debe = obj.Valor
                        Else
                            ctl.Haber = obj.Valor
                        End If
                    Next obj
                End If
            Next i
        End With
        
        If (Not Cuadrado_parcial(pos_verifica_asiento)) Then
            RaiseEvent EstadoGeneracion1AsientoxLote(ix, "No Cuadrado", cancelado)
        Else
            RaiseEvent EstadoGeneracion1AsientoxLote(ix, "OK", cancelado)
        End If
        
        TotalizaAsientoRepetido
        pos_verifica_asiento = CountCTLibroDetalle + 1
        
        'Liberar de Memoria
        Set gnc = Nothing
        If cancelado Then
            Exit Do
        End If
        rs.MoveNext
    Loop
    TotalizaAsientoRepetido
End Sub

'**********************************
'*** Agregado jeaa  26/12/2008
'*** todo lo que tiene que ver con
'*** generacion de un asiento  por
'*** lote de Depreciaciones.
'**********************************


Public Sub Generar1AsientoxLoteDepreciaciones(NumGrupo As Integer)
    Dim i As Long, f As String, colAT As colAsientoTemp
    Dim obj As AsientoTemp, j As Long, ctl As CTLibroDetalle
    Dim rs As Recordset
    Dim gnc As GNComprobante
    Dim ix As Long, pos_verifica_asiento As Long
    Dim cancelado As Boolean
    Dim af As AFInventario, cadena As String
    Dim bandDebe As Boolean, PosAnt As Integer
    'Remueve los asientos existentes (Solo auto-generados)
    bandDebe = True
    PosAnt = 0
    For i = CountCTLibroDetalle To 1 Step -1
        'No elimina los asiento agregados por usuario
        If CTLibroDetalle(i).BandIntegridad = INTEG_AUTO Then
            mcolCTLibroDetalle.Remove i
            mbooModificado = True
        End If
    Next i
    
    Set rs = gobjMain.EmpresaActual.ConsAFInvetario(NumGrupo, gobjMain.objCondicion.Grupo1, gobjMain.objCondicion.CodItem1)
    'Revisar una por una las Transacciones para ir sumando los asientos
    
    cancelado = True
    ix = 0
    
    pos_verifica_asiento = 1   'variable utilizada para verificar si esta cuadrado parcialmente
    For i = 1 To GNTrans.CountAsiento
        GNTrans.RemoveAsiento (1)
    Next i
    i = 1
    Do While (Not rs.EOF)
        DoEvents
        ix = ix + 1
        'recuperar los Comprobantes uno por uno
        Set af = Me.Empresa.RecuperaAFInventario(rs!IdInventario)
        
        With GNTrans
            .AddAsiento
            .AddAsiento
            PosAnt = i
            For i = PosAnt To .CountAsiento
                Set colAT = GeneraAsientoAFDepreciacion(af, bandDebe)
                If Not colAT Is Nothing Then
                    For Each obj In colAT
                        j = AddCTLibroDetalleAuto   'Agrega y pone INTEG_AUTO en BandIntegridad
                        Set ctl = CTLibroDetalle(j)
                        
                        '0 significa que IdCuenta es variable
                        If .Asientos(i).IdCuenta <> 0 Then
                            ctl.SetIdCuentaAuto .Asientos(i).IdCuenta
                        Else
                            ctl.SetIdCuentaAuto obj.IdCuenta
                        End If
                        
                        If bandDebe Then
                            ctl.Debe = obj.Valor
                            bandDebe = Not bandDebe
                        Else
                            ctl.Haber = obj.Valor
                            bandDebe = Not bandDebe
                        End If
                        cadena = " Depreciación mes " & Me.Empresa.DevuelveMes(DatePart("m", Me.FechaTrans), True) & "/" & DatePart("yyyy", Me.FechaTrans)
                        cadena = cadena + " del Activo Fijo: " + af.CodInventario + "-" + af.Descripcion
                        ctl.Descripcion = Left(cadena, 79)
                    Next obj
                End If
            Next i
        End With
        
        If (Not Cuadrado_parcial(pos_verifica_asiento)) Then
            RaiseEvent EstadoGeneracion1AsientoxLote(ix, "No Cuadrado", cancelado)
        Else
            RaiseEvent EstadoGeneracion1AsientoxLote(ix, "OK", cancelado)
        End If
        
'        TotalizaAsientoRepetido
        pos_verifica_asiento = CountCTLibroDetalle + 1
        
        'Liberar de Memoria
        Set gnc = Nothing
        If cancelado Then
            Exit Do
        End If
        rs.MoveNext
    Loop
'    TotalizaAsientoRepetido
End Sub


Private Function GeneraAsientoAFDepreciacion(ByRef af As AFInventario, ByRef bandDebe As Boolean) As colAsientoTemp
    Dim i As Long, v As Currency
    Dim col As colAsientoTemp
    Dim Valor As Currency
    Dim j As Integer, sumameses As Long
    Dim gng As gnGasto
    Select Case af.tipodepre
        Case DEP_ACELERADA

            sumameses = 0
            For j = 1 To (af.VidaUtil - af.DepAnterior)
                sumameses = sumameses + j
            Next j
            Valor = (af.CostoUltimoIngreso - af.CostoResidual) / ((sumameses)) * (DateDiff("m", af.FechaCompra, Date) + 1)
        Case DEP_LINEAL
            Valor = (af.CostoUltimoIngreso - af.CostoResidual) / (af.VidaUtil - af.DepAnterior)
    End Select

  
    Set col = New colAsientoTemp
    If bandDebe Then
        If Me.GNTrans.AsientoGastoxZona Then
                Set gng = Me.Empresa.RecuperaGNGasto(af.CodGrupo(5))
                If Not gng Is Nothing Then
                    col.AddG af.IdCuentaDepreGasto, Valor, gng.CodGasto
                End If
        End If
                    
    Else
        col.Add af.IdCuentaDepreGasto, Valor
        
    End If

    Set GeneraAsientoAFDepreciacion = col
    Set col = Nothing
End Function



Private Function GeneraAsientoAFDepreciacionGasto( _
                    Param As String) As colAsientoTemp
    Dim i As Long, v As Currency, k As AFKardex
    Dim col As colAsientoTemp
    Dim gng As gnGasto, af As AFInventario
    Set col = New colAsientoTemp
    For i = 1 To CountAFKardex
        v = 0
        Set k = AFKardex(i)
        
        '*** MAKOTO 08/mar/01 Agregado
        'Si es que el item no tiene asignado una cuenta de Activo, genera error
        If k.auxIdCuentaDepreGasto = 0 Then
            NoTieneCuentaAsignado True, "AFDEPREGASTO", k.CodInventario
        End If
        
        Select Case Right$(Param, 1)
        Case "+":   If k.CostoRealTotal > 0 Then v = Abs(k.CostoRealTotal)  'Sólo positivos
        Case "-":   If k.CostoRealTotal < 0 Then v = Abs(k.CostoRealTotal)  'Sólo negativos
        Case Else:  v = Abs(k.CostoRealTotal)       'Todos con valor absoluto
        End Select
        
        If v <> 0 Then
            'Redondea al formato de moneda               '*** MAKOTO 13/feb/01
            'No con FormatoCosto porque asiento tiene que ser cuadrado con valores de Ctas x Pagar/Cobrar
            'Por ejemplo si está FormatoMoneda con 2 decimales y FormatoCosto con 4 decimales,
            'va a haber una diferencia entre Kardex de inventario y Libro mayor de inventario, algo que ya es inevitable.
'            v = MiCCur(Format$(v, Me.FormatoMoneda))   '*** MAKOTO 01/mar/01 Error, era formato de costo
            'jeaa 02/10/2006 diferencia en asiento
            If mobjGNTrans.IVTipoTrans = "I" Then
                v = MiCCur(Format$(v, Me.FormatoCosto))
            Else
                If FormatoMoneda = "#,0.00" And Me.FormatoCosto = "#,#.0000" Then
                    v = MiCCur(Format$(v, Me.FormatoMoneda))
                Else
                    v = MiCCur(Format$(v, Me.FormatoCosto))
                End If
            End If
            If Me.GNTrans.AsientoGastoxZona Then
                Set af = Me.Empresa.RecuperaAFInventarioQuick(k.CodInventario)
                Set gng = Me.Empresa.RecuperaGNGasto(af.CodGrupo(5))
                If Not gng Is Nothing Then
                    col.AddG af.IdCuentaDepreGasto, v, gng.idGasto
                End If
                Set af = Nothing
                Set gng = Nothing
            Else
                col.Add k.auxIdCuentaDepreGasto, v
            End If
        End If
    Next i
    
    'Al ultimo tiene que redondear al formato de Precio Total       '*** MAKOTO 01/mar/01
    RedondearAsiento col, Me.FormatoMoneda
    
    If col.Count Then Set GeneraAsientoAFDepreciacionGasto = col
    Set col = Nothing
End Function


Private Function GeneraAsientoAFDepreciacionAcumulada( _
                    Param As String) As colAsientoTemp
    Dim i As Long, v As Currency, k As AFKardex
    Dim col As colAsientoTemp
    Dim gng As gnGasto, af As AFInventario
    
    Set col = New colAsientoTemp
    For i = 1 To CountAFKardex
        v = 0
        Set k = AFKardex(i)
        
        '*** MAKOTO 08/mar/01 Agregado
        'Si es que el item no tiene asignado una cuenta de Activo, genera error
        If k.auxIdCuentaDepreGasto = 0 Then
            NoTieneCuentaAsignado True, "AFDEPREGASTO", k.CodInventario
        End If
        
        Select Case Right$(Param, 1)
        Case "+":   If k.CostoRealTotal > 0 Then v = Abs(k.CostoRealTotal)  'Sólo positivos
        Case "-":   If k.CostoRealTotal < 0 Then v = Abs(k.CostoRealTotal)  'Sólo negativos
        Case Else:  v = Abs(k.CostoRealTotal)       'Todos con valor absoluto
        End Select
        
        If v <> 0 Then
            'Redondea al formato de moneda               '*** MAKOTO 13/feb/01
            'No con FormatoCosto porque asiento tiene que ser cuadrado con valores de Ctas x Pagar/Cobrar
            'Por ejemplo si está FormatoMoneda con 2 decimales y FormatoCosto con 4 decimales,
            'va a haber una diferencia entre Kardex de inventario y Libro mayor de inventario, algo que ya es inevitable.
'            v = MiCCur(Format$(v, Me.FormatoMoneda))   '*** MAKOTO 01/mar/01 Error, era formato de costo
            'jeaa 02/10/2006 diferencia en asiento
            If mobjGNTrans.IVTipoTrans = "I" Then
                v = MiCCur(Format$(v, Me.FormatoCosto))
            Else
                If FormatoMoneda = "#,0.00" And Me.FormatoCosto = "#,#.0000" Then
                    v = MiCCur(Format$(v, Me.FormatoMoneda))
                Else
                    v = MiCCur(Format$(v, Me.FormatoCosto))
                End If
            End If
            If Me.GNTrans.AsientoGastoxZona Then
                Set af = Me.Empresa.RecuperaAFInventarioQuick(k.CodInventario)
                Dim idAfGrupo As Integer
                If Len(Me.Empresa.GNOpcion.ObtenerValor("AFGrupoGasto")) > 0 Then
                    idAfGrupo = Me.Empresa.GNOpcion.ObtenerValor("AFGrupoGasto")
                    Set gng = Me.Empresa.RecuperaGNGasto(af.CodGrupo(idAfGrupo))
                End If
                If Not gng Is Nothing Then
                    col.AddG k.auxIdCuentaDepreAcumulada, v, gng.idGasto
                End If
                Set af = Nothing
                Set gng = Nothing
            Else
                col.Add k.auxIdCuentaDepreAcumulada, v
            End If
        End If
    Next i
    
    'Al ultimo tiene que redondear al formato de Precio Total       '*** MAKOTO 01/mar/01
    RedondearAsiento col, Me.FormatoMoneda
    
    If col.Count Then Set GeneraAsientoAFDepreciacionAcumulada = col
    Set col = Nothing
End Function




Public Function AFRecargoIVA(NoProrrateados As Boolean, Prorrateados As Boolean) As Currency
    Dim t As Currency, gnt As GNTransRecargo, i As Long
    
    If Prorrateados And NoProrrateados Then
        For i = 1 To CountAFKardexRecargo
            If mProps.objEmpresa.GNOpcion.ObtenerValor("RecDescParaIVA") = IVKardexRecargo(i).CodRecargo Then
                t = AFKardexRecargo(i).Valor
            End If
        Next i
    ElseIf Prorrateados Then
        For i = 1 To CountAFKardexRecargo
            Set gnt = Me.GNTrans.BuscaRecargo(AFKardexRecargo(i).CodRecargo)
            If Not (gnt Is Nothing) Then
                If mProps.objEmpresa.GNOpcion.ObtenerValor("RecDescParaIVA") = AFKardexRecargo(i).CodRecargo Then
                    If gnt.BandProrrateado Then
                        t = AFKardexRecargo(i).Valor
                    End If
                    If gnt.BandProrrateado <> AFKardexRecargo(i).BandProrrateado Then '18/3/2004 Diego  aqui actualiza  el valor prorrateado
                        AFKardexRecargo(i).BandProrrateado = gnt.BandProrrateado
                    End If
                End If
            End If
        Next i
    Else
        For i = 1 To CountAFKardexRecargo
            Set gnt = GNTrans.BuscaRecargo(AFKardexRecargo(i).CodRecargo)
            If Not (gnt Is Nothing) Then
                If mProps.objEmpresa.GNOpcion.ObtenerValor("RecDescParaIVA") = AFKardexRecargo(i).CodRecargo Then
                    If Not gnt.BandProrrateado Then
                        t = AFKardexRecargo(i).Valor
                    End If
                    If gnt.BandProrrateado <> AFKardexRecargo(i).BandProrrateado Then '18/3/2004 Diego  aqui actualiza  el valor prorrateado
                        AFKardexRecargo(i).BandProrrateado = gnt.BandProrrateado
                    End If
                End If
            End If
        Next i
    End If
    AFRecargoIVA = t
End Function

Private Sub VerificaComprometido()
    Dim item As IVInventario, i As Long, ivk As IVKardex, j As Long, ivk2 As IVKardex
    Dim rs As Recordset
    Dim disponibles  As Currency
    Dim sql As String
    Dim idpadre As Long, exist As Currency, sumaCant As Currency, cant_ori As Currency
    'Si no está configurado para verificar la existencia ó no es egreso, sale
    If Not Me.GNTrans.IVVerificaExist Or Me.GNTrans.IVTipoTrans <> "E" Then
        Exit Sub
    End If
    For i = 1 To CountIVKardex
        Set ivk = IVKardex(i)
        Set item = Empresa.RecuperaIVInventario(ivk.IdInventario)
       If Not (item Is Nothing) Then
         If Not item.BandServicio Then
            If item.Tipo = Preparacion Then
                 idpadre = ivk.IdInventario
                sql = " SELECT top 1  exist," & _
                      "  CASE when  ivreservacion.fechaalquilar <= " & FechaYMD(Me.FechaTrans, Me.Empresa.TipoDB) & " then sum(cant) else  0 end as reserva, " & _
                      " ISNULL(ivc.compr,0) as comprometidos, ivm.cantidad as cantFormula FROM IvInventario iv  LEFT Join ivreservacion " & _
                      " INNER JOIN  ivbodega  on ivreservacion.IdBodega = ivbodega.IDBODEGA " & _
                      " ON Iv.IdInventario = ivreservacion.IdInventario " & _
                      " left  join ivcompr ivc on ivc.idinventario = iv.idinventario " & _
                      " left join ivmateria ivm  left join ivexist on ivexist.idinventario = ivm.idmateria " & _
                      " on ivm.idinventario = iv.idinventario  WHERE Iv.idinventario = " & idpadre
                sql = sql & " AND ivexist.IdBodega = 8 and iv.tipo = 4 and ivm.bandprincipal = 1 " & _
                      " group by exist,ivreservacion.fechaalquilar,cant, ivc.Compr, ivm.cantidad ORDER BY exist asc"
                Set rs = Me.Empresa.OpenRecordset(sql)
                If rs.RecordCount > 0 Then
                    disponibles = rs!exist - (rs!reserva + rs!comprometidos)
                End If
                    If disponibles + ivk.Cantidad < 0 Then
                        Err.Raise ERR_INVALIDO, "GNComprobante.VerificarDatos ", _
                        "No puede hacer esta reservacion no tiene stock para esta fecha  " & vbCr & vbCr & _
                        "Item: " & item.CodInventario & "   " & item.Descripcion & vbCr & _
                        "Existencia: " & rs!exist & vbCr & _
                        "Alquilados : " & rs!comprometidos & vbCr & _
                        "Reservados : " & rs!reserva & vbCr & _
                        "Cantidad pedida : " & Abs(ivk.Cantidad) & vbCr & _
                        "Disponibles : " & disponibles & vbCr & _
                        "Existencia nueva: " & disponibles + ivk.Cantidad
                    End If
                    Set rs = Nothing
           ElseIf item.bandVenta Then 'Verifica existencia de items de venta en la misma transaccion
                    exist = item.Existencia(ivk.CodBodega)
                    sumaCant = 0
                    'Obtiene la cantidad original en caso de modificación
                    cant_ori = VerificarExistencia_CantOrig(ivk.Id)
                    'Obtiene la suma de cantidad del mismo ítem en la misma transacción
                    For j = 1 To CountIVKardex
                        Set ivk2 = IVKardex(j)
                        'En otra fila,
                        If j <> i Then
                            'Si hay un item con el mismo item y la misma bodega
                            If ivk2.IdInventario = ivk.IdInventario And _
                                ivk2.IdBodega = ivk.IdBodega Then
                                sumaCant = sumaCant + ivk2.Cantidad
                                'Resta la cantidad original en caso de modificación
                                sumaCant = sumaCant - VerificarExistencia_CantOrig(ivk2.Id)
                            End If
                        End If
                    Next j
                    Set ivk2 = Nothing
                    'Si se hace negativa al sumar
                    If exist + ivk.Cantidad + sumaCant - cant_ori < 0 Then
                        Err.Raise ERR_INVALIDO, "GNComprobante.VerificarDatos", _
                            "Al grabar la transacción la existencia se hace negativa, por lo que no puede grabarla." & vbCr & vbCr & _
                            "Item: " & item.CodInventario & " " & item.Descripcion & vbCr & _
                            "Existencia: " & exist & vbCr & _
                            "Cantidad: " & ivk.Cantidad & vbCr & _
                            "Cant. en otra fila: " & sumaCant & vbCr & _
                            "Existencia nueva: " & exist + ivk.Cantidad + sumaCant - cant_ori
                    End If
                End If
            End If
          End If
    Next i
    Set ivk = Nothing
    Set item = Nothing
End Sub

''AUC 14/02/07
Private Sub ImportaPCKardex1(ByVal Fuente As GNComprobante, ByVal Incremental As Boolean)
    Dim i As Long, ix As Long, pck As PCKardex, pck2 As PCKardex
    Dim Saldo  As Currency
    If mcolPCKardex Is Nothing Then Set mcolPCKardex = New Collection
    If Not Incremental Then             '*** MAKOTO 15/dic/00
        BorrarPCKardex
    End If
    'Si la fuente es de modulo IV/FC y destino es de modulo TS
    If ((Fuente.GNTrans.Modulo = "IV" Or Fuente.GNTrans.Modulo = "FC") _
        And (Me.GNTrans.Modulo = "TS")) Or ((Fuente.GNTrans.Modulo = "IV" Or Fuente.GNTrans.Modulo = "FC") _
        And (Me.GNTrans.Modulo = "IV")) Then
        If Fuente.GNTrans.AfectaSaldoPC Then
            'Importa de PCKardex (POR cobrar/pagar) a PCKardex (Cobro/Pago)
            For i = 1 To Fuente.CountPCKardex
                Set pck = Fuente.PCKardex(i)
                If pck.IdAsignado = 0 Then      'Si es doc. por cobrar/pagar
                    Saldo = pck.CalculaSaldo
                    If Saldo > 0 Then           'Solo si exite saldo
                        ix = AddPCKardex
                        Set pck2 = PCKardex(ix)
                        pck2.IdAsignado = pck.Id
'                        pck2.IdProvCli = pck.IdProvCli
                        pck2.CodProvcli = pck.CodProvcli
'                        pck2.CotizacionAsignado = Me.Cotizacion(Me.CodMoneda)
                        pck2.FechaEmision = Me.FechaTrans
                        pck2.FechaVenci = pck2.FechaVenci
                        pck2.IDForma = pck.IDForma
                        pck2.NumLetra = pck.NumLetra
                        pck2.Observacion = pck.Observacion
                        pck2.Orden = Me.CountPCKardex
                        If pck.Debe > 0 Then
                            pck2.Haber = Saldo
                        Else
                            pck2.Debe = Saldo
                        End If
                    End If
                End If
            Next i
        Else
            'Crea los anticipos
            For i = 1 To Fuente.CountPCKardex
                Set pck = Fuente.PCKardex(i).Clone
                pck.Guid = ""               'Diego 03/09/2002
                                            'Debe generar su propio GUID
                Set pck.GNComprobante = Me
                mcolPCKardex.Add pck
                'Intercambia Debe y Haber
                If pck.Debe Then
                    pck.Haber = pck.Debe
                Else
                    pck.Debe = pck.Haber
                End If
                'Para que no sea Fecha de vencimiento mal       '*** MAKOTO 15/dic/00
                If pck.FechaVenci < pck.FechaEmision Then
                    pck.FechaVenci = pck.FechaEmision
                End If
                'Limpia CodForma
                pck.CodForma = ""
            Next i
        End If
    'Otros casos (IV->IV, TS->IV, TS->TS etc.)
    Else
        For i = 1 To Fuente.CountPCKardex
            'Sólo importa los documentos originales (Cobros/Pagos asignados no)
            If Fuente.PCKardex(i).IdAsignado = 0 Then      '*** MAKOTO 15/dic/00
                Set pck = Fuente.PCKardex(i).Clone
                Set pck.GNComprobante = Me
                ''
                pck.Guid = ""   '*** Oliver 10 dic 2004,  para que genere otro GUID no como el original
                'Para que no sea Fecha de vencimiento mal       '*** MAKOTO 15/dic/00
                If pck.FechaVenci < pck.FechaEmision Then
                    pck.FechaVenci = pck.FechaEmision
                End If
                mcolPCKardex.Add pck
            End If
        Next i
    End If
End Sub

'AUC 09/11/2006
Public Function AbonoRes() As Currency
Dim sql As String
Dim rs As Recordset
    Dim t  As Variant, i As Long, v As Currency
    sql = "select isnull(sum(haber),0) AS ValAbonoRes from pckardex inner join tsformacobropago  tsf on tsf.idforma = pckardex.idforma where " & _
          " tsf.considerarcomoefectivo = 1 and pckardex.transid  =" & Me.transid
    Set rs = Me.Empresa.OpenRecordset(sql)
        If rs!ValAbonores = 0 Then
            AbonoRes = 0
        Else
            t = rs!ValAbonores
    End If
        AbonoRes = MiCCur(Format$(t, Me.FormatoMoneda))  '***Antes, quitado para pruebas. Angel. 27/08/2003
End Function

'AUC 26/03/07 para calcular las formas de cobro
Public Function PCKardexEfectivo(TransIdFuente As String) As Currency
    Dim t As Currency, i As Long, k As Long
    Dim sql As String, rs As Recordset
    Dim cond As String, t1 As Currency
    On Error GoTo ErrTrap
    If CountPCKardex = 0 Then t = 0: Exit Function
    k = 1
    If Len(TransIdFuente) > 0 Then 'tomar el valor de la fuente
        sql = "Select ts.codforma,pck.debe,pck.haber from tsformacobropago ts"
        sql = sql & " Inner join pckardex pck on pck.idforma = ts.idforma "
        sql = sql & " where ts.considerarcomoefectivo = 1 "
        sql = sql & " And pck.transid = " & TransIdFuente
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
        Do While Not rs.EOF
            t1 = rs!Haber
            rs.MoveNext
            k = k + 1
        Loop
        PCKardexEfectivo = t1
    End If
    sql = "Select ts.codforma from tsformacobropago ts where ts.considerarcomoefectivo = 1"
     Set rs = mProps.objEmpresa.OpenRecordset(sql)
        Do While Not rs.EOF
        For i = k To CountPCKardex
            If PCKardex(i).CodForma = rs!CodForma Then
                If Me.GNTrans.IVTipoTrans = "A" Then
                    t = t + PCKardex(i).Haber
                Else
                    t = t + PCKardex(i).Debe
                End If
            End If
        Next i
        rs.MoveNext
        PCKardexEfectivo = t + t1
    Loop
    Set rs = Nothing
    Exit Function
ErrTrap:
    Err.Raise Err.Number, Err.Source, Err.Description
    Set rs = Nothing
    Exit Function
End Function

'AUC 22/10/07
Public Function TotalRecargos()
Dim sql As String, rs As Recordset
On Error GoTo ErrTrap
    sql = " SELECT sum(Valor) As valor1 From " & _
          " GNComprobante INNER JOIN IVKardexRecargo " & _
          " ON GNComprobante.TransID = IVKardexRecargo.TransID " & _
          " Where IVKardexRecargo.TransID = " & Me.transid
          Set rs = Me.Empresa.OpenRecordset(sql)
        If rs!Valor1 = 0 Then
            TotalRecargos = 0
        Else
            TotalRecargos = rs!Valor1
        End If
    Exit Function
ErrTrap:
    Err.Raise Err.Number, Err.Source, Err.Description
    Set rs = Nothing
    Exit Function
End Function


 

'AUC 16/01/08 Para larot busqueda filtrando idPadre
 Public Function ListaIVInventarioPreparacion( _
                    ByVal ExistPorBodega As Boolean, ByVal IdInventario As Long, ByVal cant As Currency, bandProcesos As Boolean) As Recordset  ' as Variant
    Dim sql As String, rs As Recordset, NumGrupo As Integer
    Dim cmd As ADODB.Command
    Set cmd = New ADODB.Command
    cmd.ActiveConnection = mProps.objEmpresa.Coneccion
          NumGrupo = val(Me.Empresa.GNOpcion.ObtenerValor("IVGrupoParaProceso"))
          sql = "SELECT  ivm.idmateria , ivm.Cantidad,ivm.formula, ivm.Orden "
          sql = sql & " INTO TMP102"
          sql = sql & " FROM ivinventario iv INNER JOIN Ivmateria ivm on iv.idinventario = ivm.idinventario"
          sql = sql & " WHERE iv.idinventario = " & IdInventario
          VerificaExistenciaTabla 102
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
          sql = " SELECT "
          sql = sql & " IVBodega.CodBodega, "
          sql = sql & " IVGrupo1.CodGrupo1, "
          sql = sql & " IVGrupo2.CodGrupo2,"
          sql = sql & " IVGrupo3.CodGrupo3,"
          sql = sql & "IVGrupo4.CodGrupo4, "
          sql = sql & " IVGrupo5.CodGrupo5, "
          sql = sql & " iv.CodInventario,"
          sql = sql & " iv.CodAlterno1, "
          sql = sql & " iv.Descripcion, "
          sql = sql & " t.formula,"
          sql = sql & " ive.Exist,"
          sql = sql & " t.cantidad* " & cant & " as cant ,"
          sql = sql & " isnull(ivu.codunidad,iv.Unidad) AS unidad,"
          sql = sql & " iv.Costoultimoingreso  / 1 AS CU,"
          sql = sql & " iv.Costoultimoingreso  / 1 AS CUReal, "
          sql = sql & " Abs(iv.Costoultimoingreso / 1)*t.cantidad* " & cant & "  AS CT,"
          sql = sql & " Abs(iv.Costoultimoingreso / 1)*t.cantidad* " & cant & "  AS CTReal, "
          sql = sql & " 0 AS Utilidad,"
          sql = sql & " 0 AS PU,"
          sql = sql & " 0 AS PUReal,"
          sql = sql & " 0 AS PUIVA,"
          sql = sql & " 0 AS PT,"
          sql = sql & " 0 AS PTReal,"
          sql = sql & " 0 AS PTIVA, "
          sql = sql & "0 AS PorDesc, "
          sql = sql & "0 AS PorIVA,"
          sql = sql & "0 AS ValIVA,"
          sql = sql & "iv.observacion, "
          sql = sql & " ' ' AS  TiempoEntrega,"
          sql = sql & " iv.ValorRecargo,"
          sql = sql & "iv.idunidad, "
          sql = sql & " iv.idunidadconteo, "
          sql = sql & "iv.BandIVA"
          sql = sql & " FROM tmp102 t INNER join (ivinventario iv"
          sql = sql & " left join ivunidad ivu on ivu.idunidad=iv.idunidad"
          sql = sql & " RIGHT JOIN IVExist ive"
          sql = sql & " RIGHT JOIN  IVBodega ON IVBodega.IdBodega  = ive.IdBodega"
          sql = sql & " ON ive.idinventario = iv.idinventario"
          sql = sql & " left JOIN  IVGrupo5 ON IVGrupo5.IdGrupo5 = iv.IdGrupo5"
          sql = sql & " left JOIN  IVGrupo4 ON IVGrupo4.IdGrupo4 = iv.IdGrupo4 "
          sql = sql & " left JOIN  IVGrupo3 ON IVGrupo3.IdGrupo3 = iv.IdGrupo3"
          sql = sql & " left JOIN  IVGrupo2 ON IVGrupo2.IdGrupo2 = iv.IdGrupo2"
          sql = sql & " left JOIN  IVGrupo1 ON IVGrupo1.IdGrupo1 = iv.IdGrupo1)"
          sql = sql & " ON iv.idinventario = t.idmateria"
          If Not bandProcesos Then
                    sql = sql & " WHERE IV.idgrupo" & NumGrupo + 1 & " = 0"
          Else
                sql = sql & " WHERE IV.idgrupo" & NumGrupo + 1 & " <> 0"
          End If
          sql = sql & " ORDER BY t.orden"
          Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set ListaIVInventarioPreparacion = rs
    Set rs = Nothing
End Function

'AUC 01/02/08 cambia estado fuente procesos
Public Sub CambiaEstadoFuenteProc(tid As Long)
Dim sql As String
        sql = "UPDATE GNComprobante SET Estado=" & ESTADO_DESPACHADO & _
              " WHERE (TransID=" & tid & ") AND (Estado=" & ESTADO_APROBADO & ")"
        Me.Empresa.Execute sql, True
End Sub

'para mostrar subitems
Public Function ListaIVKardexProc( _
                    ByVal ExistPorBodega As Boolean, ByVal idpadre As Long) As Variant
    Dim sql As String, rs As Recordset
    Dim cmd As ADODB.Command
    Set cmd = New ADODB.Command
    cmd.ActiveConnection = mProps.objEmpresa.Coneccion
        sql = "spConsIVKardexProc " & mProps.transid & ", " & idpadre & ", " & _
                                  Me.Cotizacion("") & ", " & _
                                  CadenaBool(ExistPorBodega, Me.Empresa.TipoDB) & ", " & _
                                  CadenaBool((Me.GNTrans.IVTipoTrans = "E"), Me.Empresa.TipoDB)      '*** MAKOTO 26/ene/01 Mod. Si es egreso multiplica -1
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set ListaIVKardexProc = rs
    Set rs = Nothing
End Function

'para mostrar soloprocesos
Public Function ListaIVKardexProc1( _
                    ByVal ExistPorBodega As Boolean) As Variant
    Dim sql As String, rs As Recordset
    Dim cmd As ADODB.Command
    Set cmd = New ADODB.Command
    cmd.ActiveConnection = mProps.objEmpresa.Coneccion
        sql = "spConsIVKardexProc1 " & mProps.transid & ", " & _
                                  Me.Cotizacion("") & ", " & _
                                  CadenaBool(ExistPorBodega, Me.Empresa.TipoDB) & ", " & _
                                  CadenaBool((Me.GNTrans.IVTipoTrans = "E"), Me.Empresa.TipoDB)      '*** MAKOTO 26/ene/01 Mod. Si es egreso multiplica -1
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set ListaIVKardexProc1 = rs
    Set rs = Nothing
End Function

Private Sub VerificarHayReservados(fecha_a_llevar As Date)
    Dim item As IVInventario, i As Long, ivk As IVKardex, j As Long, ivk2 As IVKardex
    Dim k As Long
    Dim rs As Recordset
    Dim exist As Currency, sumaCant As Currency, cant_ori As Currency
    Dim disponibles  As Currency
    Dim idpadre As Long
    Dim sql As String
    'Si no está configurado para verificar la existencia ó no es egreso, sale
    If Not Me.GNTrans.IVVerificaExist Or Me.GNTrans.IVTipoTrans <> "A" Then
        Exit Sub
    End If
    For i = 1 To CountIVKardex
        Set ivk = IVKardex(i)
        Set item = Empresa.RecuperaIVInventario(ivk.IdInventario)
        If Not (item Is Nothing) Then
            If Not item.BandServicio Then
                If item.Tipo = Preparacion Then
                    idpadre = ivk.IdInventario
                    sql = " SELECT top 1  exist,ISNULL(sum(cant),0) as reserva, ISNULL(ivc.compr,0) as comprometidos, ivm.cantidad as cantFormula FROM IvInventario iv  LEFT Join ivreservacion " & _
                         " INNER JOIN  ivbodega  on ivreservacion.IdBodega = ivbodega.IDBODEGA " & _
                         " ON Iv.IdInventario = ivreservacion.IdInventario " & _
                         " left  join ivcompr ivc on ivc.idinventario = iv.idinventario " & _
                         " left join ivmateria ivm  left join ivexist on ivexist.idinventario = ivm.idmateria " & _
                         " on ivm.idinventario = iv.idinventario  WHERE Iv.idinventario = " & idpadre
                    sql = sql & " AND ivexist.IdBodega = 8 and iv.tipo = 4 and ivm.bandprincipal = 1 " & _
                         " and ivreservacion.fechaalquilar <= " & FechaYMD(fecha_a_llevar, Me.Empresa.TipoDB) & " " & _
                         " group by exist,cant, ivc.Compr, ivm.cantidad ORDER BY exist asc"
                    Set rs = Me.Empresa.OpenRecordset(sql)
                    If rs.RecordCount > 0 Then  'NO EXISTEN RESERVADOS DE ESE TRAJE
                        disponibles = rs!exist - (rs!reserva + rs!comprometidos)
                    End If
                    If disponibles + ivk.Cantidad < 0 Then
                        Err.Raise ERR_INVALIDO, "GNComprobante.VerificarDatos ", _
                        "No puede hacer esta reservacion no tiene stock para esta fecha  " & vbCr & vbCr & _
                        "Item: " & item.CodInventario & "   " & item.Descripcion & vbCr & _
                        "Existencia: " & rs!exist & vbCr & _
                        "Alquilados : " & rs!comprometidos & vbCr & _
                        "Reservados : " & rs!reserva & vbCr & _
                        "Cantidad pedida : " & Abs(ivk.Cantidad) & vbCr & _
                        "Disponibles : " & disponibles & vbCr & _
                        "Existencia nueva: " & disponibles + ivk.Cantidad
                    End If
                    Set rs = Nothing
           ElseIf item.bandVenta Then 'AUC queda pendiente de revision para ver si sirve o no esta validacion aqui
                    exist = item.Existencia(ivk.CodBodega)
                    sumaCant = 0
                    'Obtiene la cantidad original en caso de modificación
                    cant_ori = VerificarExistencia_CantOrig(ivk.Id)
                    'Obtiene la suma de cantidad del mismo ítem en la misma transacción
                    For j = 1 To CountIVKardex
                        Set ivk2 = IVKardex(j)
                        'En otra fila,
                        If j <> i Then
                            'Si hay un item con el mismo item y la misma bodega
                            If ivk2.IdInventario = ivk.IdInventario And _
                                ivk2.IdBodega = ivk.IdBodega Then
                                sumaCant = sumaCant + ivk2.Cantidad
                                'Resta la cantidad original en caso de modificación
                                sumaCant = sumaCant - VerificarExistencia_CantOrig(ivk2.Id)
                            End If
                        End If
                    Next j
                    Set ivk2 = Nothing
                    'Si se hace negativa al sumar
                    If exist + ivk.Cantidad + sumaCant - cant_ori < 0 Then
                        Err.Raise ERR_INVALIDO, "GNComprobante.VerificarDatos", _
                            "Al grabar la transacción la existencia se hace negativa, por lo que no puede grabarla." & vbCr & vbCr & _
                            "Item: " & item.CodInventario & " " & item.Descripcion & vbCr & _
                            "Existencia: " & exist & vbCr & _
                            "Cantidad: " & ivk.Cantidad & vbCr & _
                            "Cant. en otra fila: " & sumaCant & vbCr & _
                            "Existencia nueva: " & exist + ivk.Cantidad + sumaCant - cant_ori
                    End If
                End If
            End If
        End If
    Next i
    Set ivk = Nothing
    Set item = Nothing
End Sub

'AUC saco cuantos estan alquilados
Private Function fechadevolucion_Alquilado(idInv As Long, ByRef v1() As Variant) As Date
Dim item As Recordset
Dim sql As String
Dim i As Integer
Dim LimiteDias As Long
On Error GoTo ErrTrap:
    LimiteDias = Me.Empresa.GNOpcion.ObtenerValor("LimiteReservacion")
    sql = " Select  fechadevolucion from gncomprobante gnc   "
    sql = sql & " INNER JOIN ivkardex ivk on ivk.transid = gnc.transid "
    sql = sql & " where estadoalquiler = 2 and ivk.idinventario = " & idInv & " order by fechadevolucion "
       Set item = Me.Empresa.OpenRecordset(sql)
        Do While Not item.EOF
        ReDim Preserve v1(2, i)
         If Not yaExisteFecha(v1(), idInv, CDate(item!FechaDevolucion)) Then
           v1(1, i) = idInv
           v1(2, i) = CDate(item!FechaDevolucion)
          '2 para saber cuanto es que devuelven supuestamente los items
          'despues ver si ponemos en una tabla
           i = i + 1
        End If
         item.MoveNext
       Loop
Set item = Nothing
ErrTrap:
ReDim Preserve v1(2, 1)
v1(1, 0) = 0
v1(1, 1) = 0
    Exit Function
Set item = Nothing
End Function

'que no se repita la fecha
Private Function yaExisteFecha(v() As Variant, idInv As Long, fecha As Date) As Boolean
 Dim i As Integer
    For i = 0 To UBound(v, 2)
        If v(1, i) = idInv And v(1, i) And v(2, i) = fecha Then
            yaExisteFecha = True
        End If
    Next
End Function

Public Sub RemoveIVKardexSubItem(ByVal ix As Long, Optional obj As IVKardex)
    'Cuando SoloVer está establecido a True, genera error
    If mcolIVKardex Is Nothing Then RecuperaIVKardex
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolIVKardex.Count
            If mcolIVKardex.item(ix) Is obj Then
                mcolIVKardex.Remove ix
                Exit For
            End If
        Next ix
        Debug.Assert True   'No se puede dar
    Else
        mcolIVKardex.Remove ix
    End If
    mbooModificado = True
End Sub

Public Property Let FechaAlquiler(value As Date)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.FechaAlquiler", MSGERR_SOLOVER
    'Solo cuando cambia el valor
    If mProps.FechaAlquiler <> value Then
        mProps.FechaAlquiler = value
        mbooModificado = True
        RaiseEvent FechaCambiado
    End If
End Property

Public Property Get FechaAlquiler() As Date
    FechaAlquiler = mProps.FechaAlquiler
End Property

'AUC saco cuantos estan alquilados
Private Function Cuantos_A_devolver(idInv As Long, fechaIni As Date) As Currency
Dim item As Recordset
Dim sql As String
Dim i As Integer, fechaHasta As Date
Dim LimiteDias As Long
On Error GoTo ErrTrap
LimiteDias = Me.GNTrans.LimiteDias   'Empresa.GNOpcion.ObtenerValor("LimiteReservacion")
fechaIni = CDate(fechaIni + 1) 'Para tomar como
fechaHasta = CDate(fechaIni + LimiteDias - 1)
i = 1
    sql = "select sum(cant) as sumaCant from ivreservacion where fechadevolucion "
    sql = sql & " between '" & fechaIni & " ' and '" & fechaHasta & " ' and estado = 1 and ivreservacion.idinventario = " & idInv & " "
       Set item = Me.Empresa.OpenRecordset(sql)
           If Not item.EOF Then
               Cuantos_A_devolver = item!sumaCant
           End If
Set item = Nothing
ErrTrap:
    Exit Function
End Function

'AUC saco cuantos estan alquilados
Private Function Cuantos_A_devolver_1(idInv As Long, fechaIni As Date) As Currency
Dim item As Recordset
Dim sql As String
Dim i As Integer, fechaHasta As Date
'Dim LimiteDias As Long
On Error GoTo ErrTrap
    i = 1
    sql = "select sum(cant) as sumaCant from ivreservacion where fechadevolucion "
    sql = sql & " < '" & fechaIni & " ' and '" & fechaIni & " ' and ivreservacion.estado = 0   and ivreservacion.idinventario = " & idInv & " "
       Set item = Me.Empresa.OpenRecordset(sql)
           If Not item.EOF Then
               Cuantos_A_devolver_1 = item!sumaCant
           End If
Set item = Nothing
ErrTrap:
    Exit Function
End Function

'AUC saco cuantos estan alquilados
Private Function RecuperaReservados(idInv As Long, fechaIni As Date, ByRef v1() As String) As String
Dim item As Recordset
Dim sql As String
Dim i As Integer, fechaHasta As Date
Dim LimiteDias As Long
On Error GoTo ErrTrap
LimiteDias = Me.GNTrans.LimiteDias   'Empresa.GNOpcion.ObtenerValor("LimiteReservacion")
'fechaIni = CDate(fechaIni + 1) 'Para tomar como
'FechaHasta = CDate(fechaIni + LimiteDias - 1)
i = 1
    sql = "select fechaalquilar, sum(Cant) as cantidad from ivreservacion where fechaalquilar "
    sql = sql & " between '" & Date & " ' and '" & fechaIni & " ' and estado = 1 and ivreservacion.idinventario = " & idInv & " group by fechaalquilar "
       Set item = Me.Empresa.OpenRecordset(sql)
        Do While Not item.EOF
        ReDim Preserve v1(2, i)
         'If Not yaExisteFecha(v1(), idInv, CDate(Item!Fechaalquilar)) Then
           v1(1, i) = CDate(item!Fechaalquilar)
           v1(2, i) = item!Cantidad
          '2 para saber cuanto es que devuelven supuestamente los items
          'despues ver si ponemos en una tabla
           i = i + 1
       ' End If
         item.MoveNext
       Loop
Set item = Nothing
ErrTrap:
'ReDim Preserve v1(2, 1)
'v1(1, 0) = 0
'v1(1, 1) = 0
    Exit Function
End Function

'*** MAKOTO 16/dic/00 Agregado
Public Function ListaIVKardex3( _
                    ByVal ExistPorBodega As Boolean) As Variant
    Dim sql As String, rs As Recordset
#If DAOLIB Then
    Dim qdef As DAO.QueryDef
    If ExistPorBodega Then
        Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsIVKardex")
    Else
        Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsIVKardex2")
    End If
    qdef.Parameters("tid") = mProps.transid
    qdef.Parameters("Cotizacion") = Me.Cotizacion("")
    qdef.Parameters("BandEgreso") = (Me.GNTrans.IVTipoTrans = "A")
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Dim cmd As ADODB.Command
    Set cmd = New ADODB.Command
    cmd.ActiveConnection = mProps.objEmpresa.Coneccion
    'Si la base es de JET
    If mProps.objEmpresa.TipoDB = TIPODB_JET Then
        cmd.CommandType = adCmdTable
        If ExistPorBodega Then
            cmd.CommandText = "spConsIVKardex"
        Else
            cmd.CommandText = "spConsIVKardex2"
        End If
        cmd.Parameters.Append cmd.CreateParameter("tid", adInteger, adParamInput, , mProps.transid)
        cmd.Parameters.Append cmd.CreateParameter("Cotizacion", adCurrency, adParamInput, , mProps.Cotizacion)
        Set rs = cmd.Execute
    'Si la base es de SQLSvr
    Else
        sql = "spConsIVKardex " & mProps.transid & ", " & _
                                  Me.Cotizacion("") & ", " & _
                                  CadenaBool(ExistPorBodega, Me.Empresa.TipoDB) & ", " & _
                                  CadenaBool((Me.GNTrans.IVTipoTrans = "A"), Me.Empresa.TipoDB)      '*** MAKOTO 26/ene/01 Mod. Si es egreso multiplica -1
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
    End If
#End If
    Set ListaIVKardex3 = rs
    Set rs = Nothing
End Function


'para ver si el item tiene restriccion
Private Function siEsREstriccion(IdInventario As Long, idpadre As Long) As Boolean
Dim rs As Recordset, sql As String
    sql = "select cantidad from ivmateria where bandPrincipal = 1 and idinventario = " & idpadre '& " and idmateria = " & IdInventario
    Set rs = Me.Empresa.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        siEsREstriccion = True
    End If
End Function

'AUC 09/11/2006
Public Function Saldo(band As Boolean) As Currency
Dim sql As String
Dim rs As Recordset
    Dim t  As Variant, i As Long, v As Currency
        If band Then
            sql = "select sum(debe) AS ValSaldo from pckardex inner join tsformacobropago  tsf on tsf.idforma = pckardex.idforma where " & _
                  " tsf.considerarcomoefectivo = 0 and pckardex.transid  =" & Me.transid
            Set rs = Me.Empresa.OpenRecordset(sql)
            If Not rs Is Nothing Then
               t = rs!ValSALDO
            End If
        Else
            sql = "select sum(haber) AS ValSaldo from pckardex inner join tsformacobropago  tsf on tsf.idforma = pckardex.idforma where " & _
                  " tsf.considerarcomoefectivo = 1 and pckardex.transid  =" & Me.transid
                  v = Abs(Me.IVKardexPTotal(True)) + Me.TotalRecargos
                  Set rs = Me.Empresa.OpenRecordset(sql)
                 If Not rs Is Nothing Then
                    t = v - rs!ValSALDO
                 End If
        End If
        Saldo = MiCCur(Format$(t, Me.FormatoMoneda))
End Function


Public Function IVKardexFinanciamientoTotal() As Currency
    Dim t As Currency, i As Long, ivk As IVKardex, v As Currency
    Dim NumDecimales As Integer
        If Len(Me.Empresa.GNOpcion.ObtenerValor("NumDecimalesCuotas")) > 0 Then
        NumDecimales = Me.Empresa.GNOpcion.ObtenerValor("NumDecimalesCuotas")
    Else
        NumDecimales = 2
    End If

    t = 0
    For i = 1 To CountIVKardex
        Set ivk = IVKardex(i)
        v = ivk.PrecioRealTotal
        t = t + v               'Suma valor de recargo de item
    Next i
    If Abs(t) < (Me.ValorEntrada + Me.ValorSegundaEntrada) Then
        t = 0
    Else
        't = t + Me.ValorEntrada + Me.ValorSegundaEntrada
        t = (t * (Me.NumeroPagos * Me.TasaMensual / 100))
    End If
    IVKardexFinanciamientoTotal = Abs(Round(t, NumDecimales))           '*** MAKOTO 29/ene/01 Mod.
    Set ivk = Nothing
End Function


Private Sub GrabaFinanciamiento()
    Dim sql As String, rs As Recordset
    Dim AuxDesc As Integer
        'Recupera el registro correspondiente para modificar
        sql = "SELECT * FROM GnFinanciamiento WHERE TransID=" & mProps.transid
        Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
        If Not rs.EOF Then
            #If DAOLIB Then
                rs.Edit
            #End If
        Else
            sql = "SELECT * FROM GnFinanciamiento WHERE 1=0"
            Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
            rs.AddNew
        End If
        
    With rs
        !transid = mProps.transid                       'Es el mismo asignado a GnComprobante
        !TasaMensual = mProps.TasaMensual
        !ValorEntrada = mProps.ValorEntrada
        !MesesGracia = mProps.MesesGracia
        !DiaPago = mProps.DiaPago
        !NumeroPagos = mProps.NumeroPagos
        !FechaPrimerPago = mProps.FechaPrimerPago
        !FechaSegundoPago = mProps.FechaSegundoPago
        !ValorSegundaEntrada = mProps.ValorSegundaEntrada
        !ValorIntereses = mProps.ValorIntereses
        !FechaFuente = mProps.FechaFuente
        !TasaAnual = mProps.TasaAnual
        !TipoCuota = mProps.TipoCuota 'AGREGADO PARA CREYOL
        .Update
        #If DAOLIB Then
                rs.Bookmark = rs.LastModified
        #End If
        .Move 0             'Para actualizar
        .Close
    End With
End Sub

Public Sub RecuperarFinanciamiento(Optional ByVal TransIDFinan As Long)
    Dim sql As String, rs As Recordset
    
    If TransIDFinan = 0 Then TransIDFinan = mProps.transid
    
    sql = "SELECT * FROM GnFinanciamiento WHERE TransID=" & TransIDFinan
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    
    If rs.EOF Then Exit Sub
    With rs
        If Not IsNull(!TasaMensual) Then mProps.TasaMensual = !TasaMensual
        If Not IsNull(!ValorEntrada) Then mProps.ValorEntrada = !ValorEntrada
        If Not IsNull(!MesesGracia) Then mProps.MesesGracia = !MesesGracia
        If Not IsNull(!DiaPago) Then mProps.DiaPago = !DiaPago
        If Not IsNull(!NumeroPagos) Then mProps.NumeroPagos = !NumeroPagos
        If Not IsNull(!FechaPrimerPago) Then mProps.FechaPrimerPago = !FechaPrimerPago
        If Not IsNull(!FechaSegundoPago) Then mProps.FechaSegundoPago = !FechaSegundoPago
        If Not IsNull(!ValorSegundaEntrada) Then mProps.ValorSegundaEntrada = !ValorSegundaEntrada
        If Not IsNull(!ValorIntereses) Then mProps.ValorIntereses = !ValorIntereses
        If Not IsNull(!FechaFuente) Then mProps.FechaFuente = !FechaFuente
        If Not IsNull(!TasaAnual) Then mProps.TasaAnual = !TasaAnual
        If Not IsNull(!TipoCuota) Then mProps.TipoCuota = !TipoCuota
        .Close
    End With
    Set rs = Nothing
End Sub

Public Property Let TasaMensual(ByVal value As Currency)
    mProps.TasaMensual = value
    mbooModificado = True
End Property

Public Property Get TasaMensual() As Currency
    TasaMensual = mProps.TasaMensual
End Property

Public Property Let MesesGracia(ByVal value As Integer)
    mProps.MesesGracia = value
    mbooModificado = True
End Property

Public Property Get MesesGracia() As Integer
    MesesGracia = mProps.MesesGracia
End Property

Public Property Let DiaPago(ByVal value As Integer)
    mProps.DiaPago = value
    mbooModificado = True
End Property

Public Property Get DiaPago() As Integer
    DiaPago = mProps.DiaPago
End Property

Public Property Let NumeroPagos(ByVal value As Integer)
    mProps.NumeroPagos = value
    mbooModificado = True
End Property

Public Property Get NumeroPagos() As Integer
    NumeroPagos = mProps.NumeroPagos
End Property

Public Property Let FechaPrimerPago(ByVal value As Date)
    mProps.FechaPrimerPago = value
    mbooModificado = True
End Property

Public Property Get FechaPrimerPago() As Date
    FechaPrimerPago = mProps.FechaPrimerPago
End Property



Public Property Let ValorEntrada(ByVal value As Currency)
    'Convierte en sucres
    value = value * Me.Cotizacion("")
    
    mProps.ValorEntrada = value
    mbooModificado = True
End Property

Public Property Get ValorEntrada() As Currency
    'Devuelve en Moneda ex.
    ValorEntrada = mProps.ValorEntrada / Me.Cotizacion("")
End Property


Public Function PreparaListaTransLimite(ByVal cad As String) As String
    Dim v As Variant, i As Integer, s As String, pos As Integer
    pos = InStr(1, cad, ",")
    s = ""
    If pos > 0 Then
        v = Split(cad, ",")
        For i = 0 To UBound(v)
            s = s & "'" & v(i) & "',"
        Next i
        PreparaListaTransLimite = Mid$(s, 1, Len(s) - 1)
    Else
        PreparaListaTransLimite = "'" & cad & "'"
        'PreparaListaTransLimite = CAD
    End If
End Function

Public Property Let FechaSegundoPago(ByVal value As Date)
    mProps.FechaSegundoPago = value
    mbooModificado = True
End Property

Public Property Get FechaSegundoPago() As Date
    FechaSegundoPago = mProps.FechaSegundoPago
End Property


Public Property Let ValorSegundaEntrada(ByVal value As Currency)
    'Convierte en sucres
    value = value * Me.Cotizacion("")
    
    mProps.ValorSegundaEntrada = value
    mbooModificado = True
End Property

Public Property Get ValorSegundaEntrada() As Currency
    'Devuelve en Moneda ex.
    ValorSegundaEntrada = mProps.ValorSegundaEntrada / Me.Cotizacion("")
End Property

Public Function PreparaListaTransM(ByVal cad As String) As String
    Dim v As Variant, i As Integer, s As String, pos As Integer
    pos = InStr(1, cad, ",")
    s = ""
    If pos > 0 Then
        v = Split(cad, ",")
        For i = 0 To UBound(v)
            s = s & "'" & v(i) & "',"
        Next i
        PreparaListaTransM = Mid$(s, 1, Len(s) - 1)
    Else
        PreparaListaTransM = "'" & cad & "'"
    End If
End Function

'*** JEAA 14/10/2005
'CodInventario: Código de item que vamos a verificar
'CantLimite:    Devuelve cantidad de límite
'CantGrabada:   Devuelve cantidad que ya está grabada en otros comprobantes
Public Function VerificarDespachoTotal(ByRef CantLimite As Currency, _
                    ByRef cantGrabada As Currency) As Boolean
    Dim sql As String, rs As Recordset, pos As Integer
    On Error GoTo ErrTrap
    VerificarDespachoTotal = False
    CantLimite = 0
    cantGrabada = 0
        'Obtiene Suma de cantidad de los comprobantes con los que vamos a comparar (Puede haber varios)
        sql = "SELECT Sum(ivk.Cantidad) AS SumaCant "
        sql = sql & " FROM GNComprobante gc INNER JOIN "
        sql = sql & " (IVInventario iv INNER JOIN IVKardex ivk "
        sql = sql & " ON iv.IdInventario = ivk.IdInventario) "
        sql = sql & " ON gc.TransID=ivk.TransID "
        
        If Not Me.GNTrans.ListaTranVerificaLimite Then
            sql = sql & " WHERE (gc.CodTrans IN ('" & Me.GNTrans.IVVerificaLimiteCon & "', '"
            sql = sql & Me.GNTrans.IVVerificaLimiteCon & "M')) AND "
            sql = sql & " (gc.Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & "))  "
        Else
            sql = sql & " WHERE gc.CodTrans IN (" & PreparaListaTransLimite(Me.GNTrans.TransDespuesDevolucion) & ")"
            sql = sql & " AND  (gc.Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & "))  "
        
        End If
        If Me.GNTrans.IVControlaLimitePorFactura = False And Me.GNTrans.IVControlaLimitePorFacturaxLinea = False Then
            If Len(Me.idCentros) > 0 Then
                sql = sql & " and (gc.IdCentro in(" & Me.idCentros & ")) "
            Else
                sql = sql & " and (gc.IdCentro=" & Me.idCentro & ") "
            End If
        End If
        'sql = sql & " and (iv.CodInventario='" & CodInventario & "')"
        If Me.GNTrans.IVControlaLimitePorFactura Or Me.GNTrans.IVControlaLimitePorFacturaxLinea Then
            If NumTrans = 0 Then
                sql = sql & " and ( GC.TRANSID=" & Me.IdTransFuente & " or  gc.idtransfuente =" & Me.IdTransFuente & ")"
            Else
                If Me.GNTrans.IVTipoTrans <> "I" Then
                    'sql = sql & " and ( GC.NUMTRANS=" & NumTrans & " or  gc.idtransfuente =" & Me.IdTransFuente & ")"
                    sql = sql & " and (gc.transid =" & Me.IdTransFuente & ")"
                Else
                    sql = sql & " and ( GC.TRANSID=" & Me.IdTransFuente & " or  gc.idtransfuente =" & Me.IdTransFuente & ")"
                End If
            End If
        End If
            
        Set rs = Me.Empresa.OpenRecordset(sql)
    If Not IsNull(rs!sumaCant) Then CantLimite = rs!sumaCant
    rs.Close
    
    
    'Obtiene Suma de cantidad de los comprobantes 'hermanos' que son del mismo C.Costo
        sql = "SELECT Sum((ivk.Cantidad)) AS SumaCant "
        sql = sql & " FROM GNTrans gt INNER JOIN "
        sql = sql & " (GNComprobante gc "
        If Len(Me.idCentros) > 0 Then
            sql = sql & " left join gnfuente gnf on gnf.transid=gc.transid"
        End If
        sql = sql & " INNER JOIN  (IVInventario iv INNER JOIN IVKardex ivk "
        sql = sql & " ON iv.IdInventario = ivk.IdInventario) "
        sql = sql & " ON gc.TransID=ivk.TransID) "
        sql = sql & " ON gt.CodTrans=gc.CodTrans "
        If Not Me.GNTrans.ListaTranVerificaLimite Then
            sql = sql & " WHERE (gt.VerificaLimiteCon='" & Me.GNTrans.IVVerificaLimiteCon & "') "
        Else
            sql = sql & " WHERE (gt.TransDespuesDevolucion ='" & Me.GNTrans.TransDespuesDevolucion & "') "
        End If
        sql = sql & " AND  (gc.Estado<>" & ESTADO_ANULADO & ")  "
        If Me.GNTrans.IVControlaLimitePorFactura = False And Me.GNTrans.IVControlaLimitePorFacturaxLinea = False Then
''''            sql = sql & " AND (gc.IdCentro=" & Me.idCentro & ")  "
            If Len(Me.idCentros) > 0 Then
                sql = sql & " and (gnf.IdCentros = '" & Me.idCentros & "') "
            Else
                sql = sql & " and (gc.IdCentro=" & Me.idCentro & ") "
            End If
            
        Else
        '''sql = sql & " and gc.idtransfuente=" & IdTransFuente
            If Len(Me.idFuentes) > 0 Then
                sql = sql & " and (gc.idtransfuente in(" & Me.idFuentes & ")) "
            Else
                sql = sql & " and (gc.idtransfuente=" & Me.IdTransFuente & ") "
            End If
            
        End If
        If Not Me.GNTrans.ListaTranVerificaLimite And Me.GNTrans.IVControlaLimitePorFacturaxLinea Then
            sql = sql & " and (gc.codtrans<>'" & Me.GNTrans.IVVerificaLimiteCon & "M" & "')"
        Else
            sql = sql & " and (gc.codtrans not in (" & PreparaListaTransM(Me.GNTrans.TransDespuesDevolucion) & "))"
        End If
                
        'Hay que excluir éste comprobante mismo
        Set rs = Me.Empresa.OpenRecordset(sql)
         If Not IsNull(rs!sumaCant) Then cantGrabada = rs!sumaCant
         rs.Close
         Set rs = Nothing
        VerificarDespachoTotal = True
        Exit Function
    
       
ErrTrap:
    Err.Raise Err.Number, Err.Source, Err.Description
    VerificarDespachoTotal = False
    Exit Function
   
End Function


Public Function IVKardexFinanciamientoTotalFilaAnterior(ByVal Valor As Currency, ByVal Tasa As Currency) As Currency
    Dim t As Currency, i As Long, v As Currency, TasaTotal As Currency
    Dim NumDecimales As Integer
        If Len(Me.Empresa.GNOpcion.ObtenerValor("NumDecimalesCuotas")) > 0 Then
        NumDecimales = Me.Empresa.GNOpcion.ObtenerValor("NumDecimalesCuotas")
    Else
        NumDecimales = 2
    End If

    t = Valor
    TasaTotal = Me.NumeroPagos * (Tasa / 100)
    
    If Abs(t) < (Me.ValorEntrada + Me.ValorSegundaEntrada) Then
        t = 0
    Else
        t = t * TasaTotal
    End If
    IVKardexFinanciamientoTotalFilaAnterior = Abs(Round(t, NumDecimales))          '*** MAKOTO 29/ene/01 Mod.
End Function

Public Property Let idFuentes(ByVal value As String)
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.idFuentes", MSGERR_SOLOVER
    
    If Len(value) > 512 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.idFuentes", MSGERR_INVALIDO
    End If
    'Solo cuando cambia el valor
    If mProps.idFuentes <> value Then
        mProps.idFuentes = value
        mbooModificado = True
    End If
End Property

Public Property Get idFuentes() As String
    idFuentes = Trim$(mProps.idFuentes)
End Property

Private Sub GrabaIdFuentes()
    Dim sql As String, i As Integer, v As Variant
        sql = "INSERT INTO GNFuente (Transid,idFuentes,idCentros) VALUES (" & Me.transid & ",'" & Me.idFuentes & "','" & Me.idCentros & "')"
        Me.Empresa.Execute sql, True
        
        If Me.GNTrans.GuardaRelacionImportar Then
            v = Split(Me.idFuentes, ",")
            For i = 0 To UBound(v)
                sql = "INSERT INTO GNTransIdFuente (Transid,idFuente) VALUES (" & Me.transid & "," & v(i) & ")"
                Me.Empresa.Execute sql, True
            Next i
        End If
        
End Sub



Public Function VerificarLimiteItemConVariasTransaccionesFuente( _
                    ByVal CodInventario As String, _
                    ByRef CantLimite As Currency, _
                    ByRef cantGrabada As Currency) As Boolean
    Dim sql As String, rs As Recordset
    
    CantLimite = 0
    cantGrabada = 0
    
    'Obtiene Suma de cantidad de los comprobantes con los que vamos a comparar (Puede haber varios)
    sql = "SELECT Sum(ivk.Cantidad) AS SumaCant " & _
          "FROM GNComprobante gc INNER JOIN " & _
                        "(IVInventario iv INNER JOIN IVKardex ivk " & _
                            "ON iv.IdInventario = ivk.IdInventario) " & _
                    "ON gc.TransID=ivk.TransID "
    '*** MAKOTO 25/ene/01 Mod. Para sumar al presupuesto las transacción con 'M'. ejm. 'HC' y 'HCM' (M es de Modificación)
    
    If Me.GNTrans.IVactualizaTRansFuente Then
        sql = sql & " WHERE (gc.CodTrans IN ('" & Me.GNTrans.IVVerificaLimiteCon & "')) AND "
        
        sql = sql & " (gc.Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & ")) AND "
    
    Else
        If Not Me.GNTrans.ListaTranVerificaLimite Then
            sql = sql & " WHERE (gc.CodTrans IN ('" & Me.GNTrans.IVVerificaLimiteCon & "', '" & _
                                                 Me.GNTrans.IVVerificaLimiteCon & "M')) AND " & _
                        "(gc.Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & ")) AND "
        Else
            sql = sql & " WHERE gc.CodTrans IN (" & PreparaListaTransLimite(Me.GNTrans.TransDespuesDevolucion) & ")"
            sql = sql & " AND  (gc.Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & ")) AND "
        
        End If
    End If
        'jeaa 17/05/2006
        If Me.GNTrans.IVControlaLimitePorFactura Then
            sql = sql & "(gc.TransID=" & Me.IdTransFuente & ") AND "
        Else
            sql = sql & "(gc.IdCentro in (" & Me.idCentro & ")) AND "
        End If

        sql = sql & "(iv.CodInventario='" & CodInventario & "')"
    Set rs = Me.Empresa.OpenRecordset(sql)
    If Not IsNull(rs!sumaCant) Then CantLimite = rs!sumaCant
    rs.Close

    'Obtiene Suma de cantidad de los comprobantes 'hermanos' que son del mismo C.Costo
    sql = "SELECT Sum((ivk.Cantidad))*-1 AS SumaCant " & _
          "FROM GNTrans gt INNER JOIN " & _
                    "(GNComprobante gc INNER JOIN " & _
                        "(IVInventario iv INNER JOIN IVKardex ivk " & _
                            "ON iv.IdInventario = ivk.IdInventario) " & _
                        "ON gc.TransID=ivk.TransID) " & _
                    "ON gt.CodTrans=gc.CodTrans "
        If InStr(1, UCase(gobjMain.EmpresaActual.GNOpcion.NombreEmpresa), "NITRO") > 0 Then 'auc verificar despues con otras empresas sino borrar
            sql = sql & "WHERE (gt.VerificaLimiteCon in (" & PreparaCadena(Me.GNTrans.TransDespuesDevolucion) & ")) AND (gc.Estado<>" & ESTADO_ANULADO & ") "
        Else
          sql = sql & "WHERE (gt.VerificaLimiteCon='" & Me.GNTrans.IVVerificaLimiteCon & "') AND (gc.Estado<>" & ESTADO_ANULADO & ") "
       End If
        If Me.GNTrans.IVControlaLimitePorFactura Then
            sql = sql & " AND (gc.IDTransFuente=" & Me.IdTransFuente & ") "
        Else
            sql = sql & "AND (gc.IdCentro in (" & Me.idCentro & ")) "
        End If
            sql = sql & " AND (iv.CodInventario='" & CodInventario & "') AND " & _
            "(gc.TransID<>" & Me.transid & ")"      'Hay que excluir éste comprobante mismo
    Set rs = Me.Empresa.OpenRecordset(sql)
    If Not IsNull(rs!sumaCant) Then cantGrabada = rs!sumaCant
    rs.Close
    
    Set rs = Nothing
    VerificarLimiteItemConVariasTransaccionesFuente = True
End Function


Public Property Let idCentros(ByVal value As String)
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.idCentros", MSGERR_SOLOVER
    
    If Len(value) > 512 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.idCentros", MSGERR_INVALIDO
    End If
    'Solo cuando cambia el valor
    If mProps.idCentros <> value Then
        mProps.idCentros = value
        mbooModificado = True
    End If
End Property

Public Property Get idCentros() As String
    idCentros = Trim$(mProps.idCentros)
End Property

Public Sub RecuperarVariosCentros(Optional ByVal transid As Long)
    Dim sql As String, rs As Recordset
    
    If transid = 0 Then transid = mProps.transid
    
    sql = "SELECT * FROM GnFuente WHERE TransID=" & transid
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    
    If rs.EOF Then Exit Sub
    With rs
        If Not IsNull(!idFuentes) Then mProps.idFuentes = !idFuentes
        If Not IsNull(!idCentros) Then mProps.idCentros = !idCentros
        .Close
    End With
    Set rs = Nothing
End Sub

'--------------- Manejo de coleccion de TSKardexConcilia
Public Function AddTSKardexConcilia() As Long
    Dim nuevo As TSKardexConcilia
    
    'Cuando SoloVer está establecido a True, genera error
    If mcolTSKardexConcilia Is Nothing Then RecuperaTSKardexConcilia
    
    Set nuevo = New TSKardexConcilia
    Set nuevo.GNComprobante = Me
    
    'Valores predeterminados
    If Me.CountTSKardexConcilia = 0 Then
'''        'nuevo.NumDoc = Left$(Me.NumDocRef, 20)
    Else
        'Copia los valores anteriores
''''        nuevo.CodRetencion = Me.TSKardexConcilia(Me.CountTSKardexConcilia).CodRetencion
''''        nuevo.NumDoc = Me.TSKardexConcilia(Me.CountTSKardexConcilia).NumDoc
''''        nuevo.Base = Me.TSKardexConcilia(Me.CountTSKardexConcilia).Base
    End If
    
    mcolTSKardexConcilia.Add nuevo
    AddTSKardexConcilia = mcolTSKardexConcilia.Count    'Devuelve el indice de nuevo elemento
    Set nuevo = Nothing
    mbooModificado = True
End Function

Public Sub RemoveTSKardexConcilia(ByVal ix As Long, Optional obj As TSKardexConcilia)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemoveTSKardexConcilia", MSGERR_SOLOVER
    If mcolTSKardexConcilia Is Nothing Then RecuperaTSKardexConcilia
    
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolTSKardexConcilia.Count
            If mcolTSKardexConcilia.item(ix) Is obj Then
                mcolTSKardexConcilia.Remove ix
                Exit For
            End If
        Next ix
    Else
        mcolTSKardexConcilia.Remove ix
    End If
    
    mbooModificado = True
End Sub

'Elimina todos los detalles de TSKardexConcilia
Public Sub BorrarTSKardexConcilia()
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BorrarTSKardexConcilia", MSGERR_SOLOVER
    If mcolTSKardexConcilia Is Nothing Then Set mcolTSKardexConcilia = New Collection
    
    With mcolTSKardexConcilia
        Do While .Count > 0
            .Remove .Count
        Loop
    End With
    mbooModificado = True
End Sub

Public Property Get CountTSKardexConcilia() As Long
    If mcolTSKardexConcilia Is Nothing Then RecuperaTSKardexConcilia
    CountTSKardexConcilia = mcolTSKardexConcilia.Count
End Property

Public Property Get TSKardexConcilia(ix As Long) As TSKardexConcilia
    If mcolTSKardexConcilia Is Nothing Then RecuperaTSKardexConcilia
    Set TSKardexConcilia = mcolTSKardexConcilia.item(ix)
End Property

Private Sub RecuperaTSKardexConcilia()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean

    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolTSKardexConcilia Is Nothing Then Set mcolTSKardexConcilia = New Collection
    
    'Recupera los registros de TSKardexConcilia
    sql = "SELECT tskc.*" & _
          "FROM TSKardexConcilia tskc " & _
                " "
    sql = sql & "WHERE TransId=" & mProps.transid & " ORDER BY Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddTSKardexConcilia
                TSKardexConcilia(i).Recuperar rs
            End If
            .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub


Public Function RecuperaTSConciliacion(transid As Long) As Variant
    Dim sql As String, rs As Recordset
    
    sql = "select "
    sql = sql & " transid , IdTSKardex, FechaVenci, CodTrans,"
    sql = sql & " Trans, NumDocRef, Descripcion, Nombre,"
    sql = sql & " CodTipoDoc, Doc , Debe, Haber, Saldo, BandConciliado"
    sql = sql & " SaldoConfirmado , Diferencia, Estado, Orden, HoraTrans, tipo"
    sql = sql & " from VWTSKardexConciliacion  "
    sql = sql & " Where transidPadre = " & transid

    sql = sql & " ORDER BY Tipo,  FechaVenci, HoraTrans, TransID, Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)

    
    RecuperaTSConciliacion = MiGetRows(rs) 'rs
    Set rs = Nothing
End Function



Public Function RecuperaTSConciliacionImpresion(transid As Long, ByVal Valor As String, _
            ByVal CodTipo As String, ByVal BandConci As String) As Variant
    Dim sql As String, rs As Recordset
    
    sql = "select "
    sql = sql & " FechaVenci, "
    sql = sql & " Trans, Descripcion, Nombre, Doc, Saldo," & Valor & " as Valor"
    sql = sql & " from VWTSKardexConciliacion  "
    sql = sql & " Where transidPadre = " & transid
    sql = sql & " AND CodTipoDoc IN (" & CodTipo & ")"
    sql = sql & " AND BandConciliado = " & BandConci & ""
    
    

    sql = sql & " ORDER BY Tipo,  FechaVenci, HoraTrans, TransID, Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaTSConciliacionImpresion = rs
    Set rs = Nothing
End Function



Public Function VerificaIngresoVuelo(ByVal fecha As Date, ByRef Trans As String) As Boolean
    Dim sql As String, rs As Recordset
    VerificaIngresoVuelo = False
    sql = " select g.CodTrans + CONVERT(varchar,g.NumTrans) AS Trans"
    sql = sql & " From"
    sql = sql & " gncomprobante g inner join pcprovcli pc on g.idclienteref=pc.idprovcli"
    sql = sql & " inner join gncentrocosto gcc on g.idcentro = gcc.idcentro"
    sql = sql & " inner join motivo mot on g.idmotivo=mot.idmotivo"
    sql = sql & " Where g.estado<>3"
    sql = sql & " and gcc.idcentro=" & Me.idCentro
    sql = sql & " and mot.idmotivo=" & Me.IdMotivo
    sql = sql & " and fechatrans='" & fecha & "'"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        VerificaIngresoVuelo = True
        Trans = rs.Fields("trans")
    End If
    Set rs = Nothing

End Function

Public Function VerificaTransaccionENConciliacion(Id As Long, ByRef Trans As String) As Boolean
    Dim sql As String, rs As Recordset
    VerificaTransaccionENConciliacion = False
    sql = "select "
    sql = sql & " g.CodTrans  + CONVERT(varchar,g.NumTrans) AS Trans "
    sql = sql & " from gncomprobante g inner join tskardexconcilia t "
    sql = sql & " on g.transid=t.transid  "
    sql = sql & " where idtskardex=" & Id
    sql = sql & " and idtskardex<>0"
    
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    
    If rs.RecordCount > 0 Then
        VerificaTransaccionENConciliacion = True
        Trans = rs.Fields("trans")
    End If
    Set rs = Nothing
End Function



Public Property Let IdGaranteRef(ByVal value As Long)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.IdGaranteRef", MSGERR_SOLOVER
    
    mProps.IdGaranteRef = value
    mbooModificado = True
End Property

Public Property Get IdGaranteRef() As Long
    IdGaranteRef = mProps.IdGaranteRef
End Property

Public Property Let CodGaranteRef(ByVal value As String)
    Dim sql As String, rs As Recordset
    
    'Cuando cambia el valor
    If value <> mProps.CodGaranteRef Then
        If Len(value) > 0 Then
            'Actualiza IdGaranteRef también
            sql = "SELECT IdProvCli FROM PCProvCli WHERE CodProvCli='" & value & "'"
            Set rs = mProps.objEmpresa.OpenRecordset(sql)
            If rs.EOF Then
                Err.Raise ERR_NOHAYCODIGO, "GNComprobante.CodGaranteRef", MSGERR_NOHAYCODIGO
                Exit Property
            Else
                IdGaranteRef = rs!IdProvcli
            End If
            rs.Close
            Set rs = Nothing
        Else
            IdGaranteRef = 0
        End If
        
        mProps.CodGaranteRef = value
        SetModificado
    End If
    Set rs = Nothing
End Property

Public Property Get CodGaranteRef() As String
    CodGaranteRef = Trim$(mProps.CodGaranteRef)
End Property

Public Function TotalizaItemRepetidoDisensa() As Boolean
    Dim Precio As Currency, Costo As Currency
    Dim ivk As IVKardex, i As Long, j As Long, ivk2 As IVKardex, rt As Boolean
    rt = False
    i = 1
    Do While i <= mcolIVKardex.Count        'Uso Do While para que evalue cada vez la condicion (Con For no está bien)
        Set ivk = mcolIVKardex.item(i)
        'Busca repetidos
        For j = mcolIVKardex.Count To i + 1 Step -1     'En orden al revez
            Set ivk2 = mcolIVKardex.item(j)
            'Si encuentra repetido en la misma bodega, con el mismo signo
            If ivk2.CodInventario = ivk.CodInventario And _
                ivk2.CodBodega = ivk.CodBodega And _
                Sgn(ivk2.Cantidad) = Sgn(ivk.Cantidad) Then
                ivk.PrecioTotal = ivk.PrecioTotal + ivk2.Cantidad * ivk2.Precio  'Para que no cambie de precio de primer item
                ivk.CostoTotal = ivk.CostoTotal + ivk2.Cantidad * ivk2.Costo  'Para que no cambie de costo de primer item
                ivk.Cantidad = ivk.Cantidad + ivk2.Cantidad
                RemoveIVKardex j
                rt = True
            End If
        Next j
        i = i + 1
    Loop
    TotalizaItemRepetidoDisensa = rt
End Function


Public Property Let ValorIntereses(ByVal value As Currency)
    'Convierte en sucres
    value = value * Me.Cotizacion("")
    
    mProps.ValorIntereses = value
    mbooModificado = True
End Property

Public Property Get ValorIntereses() As Currency
    'Devuelve en Moneda ex.
    ValorIntereses = mProps.ValorIntereses / Me.Cotizacion("")
End Property

Public Function IVKardexPesoTotalNeto() As Currency
    Dim t As Currency, i As Long, v As Currency
    Dim iv As IVInventario
    v = 0
    For i = 1 To CountIVKardex
        If Me.IVKardex(i).Cantidad <> 0 Then 'AUC agregado para que calcule cuando no tenga cant
            Set iv = Me.Empresa.RecuperaIVInventario(Me.IVKardex(i).CodInventario)
            v = v + (Abs(IVKardex(i).Cantidad) * iv.PesoNeto)
        End If
    Next i
    Set iv = Nothing
    IVKardexPesoTotalNeto = v
End Function

Public Function IVKardexPesoTotalBruto() As Currency
    Dim t As Currency, i As Long, v As Currency
    Dim iv As IVInventario
    v = 0
    For i = 1 To CountIVKardex
        If Me.IVKardex(i).Cantidad <> 0 Then 'AUC agregado para que calcule cuando no tenga cant
            Set iv = Me.Empresa.RecuperaIVInventario(Me.IVKardex(i).CodInventario)
            v = v + (Abs(IVKardex(i).Cantidad) * iv.PesoBruto)
        End If
    Next i
    Set iv = Nothing
    IVKardexPesoTotalBruto = v
End Function


Public Function ListaIVKardex2ISO( _
                    ByVal ExistPorBodega As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As DAO.QueryDef
    
    If ExistPorBodega Then
        Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsIVKardex")
    Else
        Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsIVKardex2")
    End If
    qdef.Parameters("tid") = mProps.transid
    qdef.Parameters("Cotizacion") = Me.Cotizacion("")
    qdef.Parameters("BandEgreso") = (Me.GNTrans.IVTipoTrans = "E")
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Dim cmd As ADODB.Command
    Set cmd = New ADODB.Command
    cmd.ActiveConnection = mProps.objEmpresa.Coneccion
    
    'Si la base es de JET
    If mProps.objEmpresa.TipoDB = TIPODB_JET Then
        cmd.CommandType = adCmdTable
        If ExistPorBodega Then
            cmd.CommandText = "spConsIVKardexISO"
        Else
        '    cmd.CommandText = "spConsIVKardex2"
        End If
        cmd.Parameters.Append cmd.CreateParameter("tid", adInteger, adParamInput, , mProps.transid)
        cmd.Parameters.Append cmd.CreateParameter("Cotizacion", adCurrency, adParamInput, , mProps.Cotizacion)
        Set rs = cmd.Execute
       
    'Si la base es de SQLSvr
    Else
        If ExistPorBodega Then
        sql = "spConsIVKardexISO " & mProps.transid & ", " & _
                                  "1" & ", " & _
                                  CadenaBool((Me.GNTrans.IVTipoTrans = "E"), Me.Empresa.TipoDB)     '*** MAKOTO 26/ene/01 Mod. Si es egreso multiplica -1
        Else
        sql = "spConsIVKardexISO " & mProps.transid & ", " & _
                                  Me.Cotizacion("") & ", " & _
                                  CadenaBool((Me.GNTrans.IVTipoTrans = "E"), Me.Empresa.TipoDB)     '*** MAKOTO 26/ene/01 Mod. Si es egreso multiplica -1
        End If
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
    End If
#End If

    Set ListaIVKardex2ISO = rs
    Set rs = Nothing
End Function

Public Sub ActualizaBandVerifica(ByVal Secuencial As Integer, ByVal band As Boolean)
'''    Dim sql As String, rs As Recordset
'''    Dim AuxDesc As Integer, SecuencialItem As Long
'''
'''        sql = "SELECT BandVerifica, TransIdCalifica FROM IVInventarioDetalleISO WHERE id=" & secuencial
'''        Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
'''        If Not rs.EOF Then
'''            #If DAOLIB Then
'''                rs.Edit
'''            #End If
'''        End If
'''
'''    With rs
'''         !BandVerifica = band
'''         If Not band Then !TransIDCalifica = 0
'''
'''        .Update
'''        #If DAOLIB Then
'''                rs.Bookmark = rs.LastModified
'''        #End If
'''        .Move 0             'Para actualizar
'''        .Close
'''
'''    End With
    'MsgBox "hola verifica"
End Sub

Public Sub ActualizaBandProceso(ByVal Secuencial As Integer, ByVal band As Boolean)
'''    Dim sql As String, rs As Recordset
'''    Dim AuxDesc As Integer, SecuencialItem As Long
'''
'''        sql = "SELECT BandProceso, TransIdProceso FROM IVInventarioDetalleISO WHERE id=" & secuencial
'''        Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
'''        If Not rs.EOF Then
'''            #If DAOLIB Then
'''                rs.Edit
'''            #End If
'''        End If
'''
'''    With rs
'''         !BandProceso = band
'''         If Not band Then !TransIDProceso = 0
'''
'''        .Update
'''        #If DAOLIB Then
'''                rs.Bookmark = rs.LastModified
'''        #End If
'''        .Move 0             'Para actualizar
'''        .Close
'''
'''    End With
    'MsgBox "hola proceso"
End Sub

Public Sub ActualizaBandFactura(ByVal Secuencial As Integer, ByVal band As Boolean)
''    Dim sql As String, rs As Recordset
''    Dim AuxDesc As Integer, SecuencialItem As Long
''
''        sql = "SELECT BandFactura, TransIdFactura FROM IVInventarioDetalleISO WHERE id=" & secuencial
''        Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
''        If Not rs.EOF Then
''            #If DAOLIB Then
''                rs.Edit
''            #End If
''        End If
''
''    With rs
''         !BandFactura = band
''         If Not band Then !TransIDFactura = 0
''
''        .Update
''        #If DAOLIB Then
''                rs.Bookmark = rs.LastModified
''        #End If
''        .Move 0             'Para actualizar
''        .Close
''    End With
    'MsgBox "hola Factura"
End Sub


Public Function ListaIVKardex2ISOProd( _
                    ByVal ExistPorBodega As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As DAO.QueryDef
    
    If ExistPorBodega Then
        Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsIVKardex")
    Else
        Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsIVKardex2")
    End If
    qdef.Parameters("tid") = mProps.transid
    qdef.Parameters("Cotizacion") = Me.Cotizacion("")
    qdef.Parameters("BandEgreso") = (Me.GNTrans.IVTipoTrans = "E")
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Dim cmd As ADODB.Command
    Set cmd = New ADODB.Command
    cmd.ActiveConnection = mProps.objEmpresa.Coneccion
    
    'Si la base es de JET
    If mProps.objEmpresa.TipoDB = TIPODB_JET Then
        cmd.CommandType = adCmdTable
        If ExistPorBodega Then
            cmd.CommandText = "spConsIVKardexISO"
        Else
        '    cmd.CommandText = "spConsIVKardex2"
        End If
        cmd.Parameters.Append cmd.CreateParameter("tid", adInteger, adParamInput, , mProps.transid)
        cmd.Parameters.Append cmd.CreateParameter("Cotizacion", adCurrency, adParamInput, , mProps.Cotizacion)
        Set rs = cmd.Execute
       
    'Si la base es de SQLSvr
    Else
        sql = "spConsIVKardexISOProd " & mProps.transid & ", " & _
                                  Me.Cotizacion("") & ", " & _
                                  CadenaBool((Me.GNTrans.IVTipoTrans = "E"), Me.Empresa.TipoDB)     '*** MAKOTO 26/ene/01 Mod. Si es egreso multiplica -1
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
    End If
#End If

    Set ListaIVKardex2ISOProd = rs
    Set rs = Nothing
End Function


'*** JEAA 12/09/09 Agregado
Public Sub ImportaDatos4( _
                ByVal gnc As GNComprobante)
    Dim Fuente As GNComprobante, i As Long, sql As String, rs As Recordset
    Dim v As Variant, tid As Long, aux_inc As Boolean
    Dim desc As String
    If gnc Is Nothing Then Exit Sub
    
    'Separa los TransIDs en un vector
    desc = " Trans. Fuente: "
        
        'Recupera la transaccioón de fuente
        Set Fuente = gnc
        If Fuente Is Nothing Then
            Err.Raise ERR_NOHAYCODIGO, "GNComprobante.ImportaDatos", _
                        "No se puede recuperar la transacción de fuente."
        End If
    
        
        'Copia los datos de cabecera
        CodProveedorRef = Fuente.CodProveedorRef
        CodClienteRef = Fuente.CodClienteRef
        CodVendedor = Fuente.CodVendedor
        NumDocRef = Fuente.NumDocRef
        CodGaranteRef = Fuente.CodGaranteRef
        
        If Len(desc & " " & Fuente.CodTrans & " No. " & Fuente.NumTrans & " / ") > 120 Then
            desc = desc & " " & Fuente.CodTrans & " No. " & Fuente.NumTrans & " / " & Mid$(Fuente.Descripcion, 1, Len(Fuente.Descripcion) - Len(Descripcion) - 20 - Len(Fuente.CodTrans))
        Else
            desc = desc & " " & Fuente.CodTrans & " No. " & Fuente.NumTrans & " / " & Left$(Fuente.Descripcion, 120 - (Len(desc) + 5))
        End If

        CodResponsable = Fuente.CodResponsable  '*** MAKOTO 16/ago/2000
        Nombre = Fuente.Nombre                  '*** MAKOTO 06/feb/01 Agregado
        
        
        ImportaIVKardexISO Fuente, False, aux_inc
    
        Descripcion = Descripcion & Mid$(desc, 1, 120 - Len(Descripcion))
    If Len(Descripcion) > 120 Then Descripcion = Mid$(Descripcion, 1, 120)
    Set Fuente = Nothing
End Sub



Private Sub ImportaIVKardexISO( _
                ByVal Fuente As GNComprobante, _
                ByVal ConValorReal As Boolean, _
                ByVal Incremental As Boolean)
    Dim i As Long, ix As Long, ivk As IVKardex
    Dim Signo As Integer, item As IVInventario
    
    If mcolIVKardex Is Nothing Then Set mcolIVKardex = New Collection

    'Si es importación incremental, no se borra lo anterior
    If Not Incremental Then             '*** MAKOTO 15/dic/00
        BorrarIVKardex
    End If
    
    For i = 1 To Fuente.CountIVKardex
        If Fuente.IVKardex(i).Cantidad > 0 And Fuente.IVKardex(i).bandVer And Fuente.IVKardex(i).CodInventario <> "ANULADO" Then
            Set ivk = Fuente.IVKardex(i).Clone
            Set ivk.GNComprobante = Me
            
            If (GNTrans.Modulo <> Fuente.GNTrans.Modulo) Or _
                (GNTrans.Modulo = Fuente.GNTrans.Modulo) Then       '**** PEND
                'Asegura que la cantidad tenga el signo correcto
                ' Es necesario porque tiene que cambiar de signo cuando importa de
                ' FC(Egreso) --> FCV(Ingreso) o CP(Ingreso) --> CPV(Egreso)
                ' HC(Ingreso) --> OF(Egreso) etc...
                If Me.GNTrans.ImpRespetarSignosCantidad Then
                    If Len(Me.idFuentes) > 0 Then
                        Signo = IIf(Fuente.GNTrans.IVTipoTrans = "E", -1, 1) '-1 si es egreso
                    Else
                        Signo = IIf(Me.GNTrans.IVTipoTrans = "E", -1, 1) '-1 si es egreso
                    End If
                Else
                    If Me.GNTrans.CodPantalla = "IVBDISO" Then
                        Signo = IIf(Me.GNTrans.IVTipoTrans = "E", 1, -1) '-1 si es egreso
                    Else
                        Signo = IIf(Me.GNTrans.IVTipoTrans = "E", -1, 1) '-1 si es egreso
                    End If
                End If
                ivk.Cantidad = Abs(ivk.Cantidad) * Signo
            End If
            
            If Not ConValorReal Then
                ivk.CostoTotal = Abs(ivk.CostoTotal) * Signo
                ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
            Else
                ivk.CostoTotal = Abs(ivk.CostoRealTotal) * Signo
                ivk.PrecioTotal = Abs(ivk.PrecioRealTotal) * Signo
            End If
            ivk.CostoRealTotal = Abs(ivk.CostoRealTotal) * Signo
            ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
            
            ivk.TiempoEntrega = Fuente.IVKardex(i).TiempoEntrega
            ivk.Nota = Fuente.IVKardex(i).Nota
            ivk.IVA = Fuente.IVKardex(i).IVA
            
            ivk.CodBodega = "BODCARISO"
            'jeaa 23/03/2009
            Set item = Fuente.Empresa.RecuperaIVInventario(ivk.IdInventario)
            If Not item Is Nothing Then
                If Not item.BandNoSeFactura Then
                    mcolIVKardex.Add ivk
                End If
            End If
            Set item = Nothing
        End If
    Next i
End Sub


Public Sub ActualizaTransId(ByVal Secuencial As Integer, ByVal campo As String, ByVal Valor As Long)
'''    Dim sql As String, rs As Recordset
'''    Dim AuxDesc As Integer, SecuencialItem As Long
'''
'''        sql = "SELECT " & campo & " as campo FROM IVInventarioDetalleISO WHERE id=" & secuencial
'''        Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
'''        If Not rs.EOF Then
'''            #If DAOLIB Then
'''                rs.Edit
'''            #End If
'''        End If
'''
'''    With rs
'''         !campo = Valor
'''
'''        .Update
'''        #If DAOLIB Then
'''                rs.Bookmark = rs.LastModified
'''        #End If
'''        .Move 0             'Para actualizar
'''        .Close
'''
'''    End With
    'MsgBox "hola actualiza trans id"
End Sub

Public Property Let BandCierre(ByVal value As Byte)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BandCierre", MSGERR_SOLOVER
        mProps.BandCierre = value
        mbooModificado = True
End Property

Public Property Get BandCierre() As Byte
    BandCierre = mProps.BandCierre
End Property

Public Function ListaItemsFuente(BandIngreso As Boolean) As Variant
    Dim sql As String, s As String, v As Variant, i As Long, CodT As String
    Dim cond As String, rs As Recordset, cond1 As String
    If Len(GNTrans.CodTransFuente) > 0 Then
        'Puede tener varios codigos de transaccion de fuente    ejm. (FC);(OF)
        v = Split(GNTrans.CodTransFuente, ";")
        For i = 0 To UBound(v)
            If Len(s) > 0 Then s = s & ","
            CodT = v(i)
            CodT = Left$(CodT, Len(CodT) - 1)       'Quita el signo ')'
            CodT = Right$(CodT, Len(CodT) - 1)      'Quita el signo '('
            s = s & "'" & CodT & "'"
        Next i
    Else
        Err.Raise ERR_INVALIDO, "GNComprobante.ListaTransFuente", _
                    "No está definida ningúna transacción de fuente para ésta transacción."
    End If
        sql = "SELECT"
        If gobjMain.objCondicion.TopN > 0 Then
            sql = sql & " TOP " & gobjMain.objCondicion.TopN
        End If
    

        sql = sql & " iviso.id, gc.NumdocRef, ivk.orden, iviso.id as Tiket,"
        sql = sql & " ivmar.codinventario as marca,  ivtam.codinventario as tamanio,"
        sql = sql & " original, radial, NumSerie, DisenioOri,"
        sql = sql & " gc.FechaTrans,"
        sql = sql & " gc.CodTrans+' '+CONVERT(VARCHAR,gc.NumTrans) as trans,"
        sql = sql & "  pc.Nombre"
''''        sql = sql & " FROM    GNComprobante gc"
''''        sql = sql & " inner join ivkardex ivk"
''''        sql = sql & " inner join ivinventario ivtam on ivk.Idinventario=ivtam.idinventario"
''''        sql = sql & " on ivk.transid=gc.transid and ivk.tiempoentrega=iviso.id "
''''        sql = sql & " inner join IVInventarioDetalleISO iviso"
''''        sql = sql & " inner join pcprovcli pc on pc.idprovcli=iviso.idcliente"
''''        sql = sql & " inner join ivinventario ivmar on iviso.Idmarca=ivmar.idinventario"
''''        sql = sql & " inner join ivinventario ivtra on iviso.IdTrabajo=ivtra.idinventario"
''''        sql = sql & "  on gc.transid=iviso.TransID"
        
        sql = sql & " FROM    GNComprobante gc"
        sql = sql & " inner join IVInventarioDetalleISO iviso"
        sql = sql & " inner join pcprovcli pc on pc.idprovcli=iviso.idcliente"
        sql = sql & " inner join ivinventario ivmar on iviso.Idmarca=ivmar.idinventario"
        sql = sql & " inner join ivinventario ivtra on iviso.IdTrabajo=ivtra.idinventario"
        sql = sql & " inner join ivkardex ivk"
        sql = sql & " inner join ivinventario ivtam"
        sql = sql & " on ivk.Idinventario=ivtam.idinventario"
        sql = sql & " on ivk.transid=iviso.TransID and ivk.tiempoentrega=iviso.id"
        sql = sql & " on ivk.transid=gc.transid"
        
        If Len(cond) > 0 Then cond = cond & " AND "
       cond = cond & " gc.Estado <> 3 "
       If BandIngreso Then
            cond = cond & " and iviso.BandVerifica=1 and BandCarcasaISO=0 and Motivo='1'"
        Else
            cond = cond & " and iviso.BandVerifica=1 and BandProceso=1 and BandFactura=0 "
        End If
    ' Condicion de Busqueda de Fecha
   If Len(cond) > 0 Then cond = cond & " AND "
    cond = cond & " (gc.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, gobjMain.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, gobjMain.TipoDB) & " ) "
    'Condición de CodProvCli    (Opcional)
    If Len(gobjCond.CodPC1) > 0 Then
       If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(PC.CodProvCli='" & gobjCond.CodPC1 & "')"
   End If
    If Len(s) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gc.CodTrans IN (" & s & ")"
    End If
    
    If gobjCond.NumTrans1 <> 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gc.Numtrans= " & gobjCond.NumTrans1
    End If
    
    If gobjCond.NumTrans2 <> 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gc.numdocref= " & gobjCond.NumTrans2
    End If
    
    
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    
    sql = sql & " ORDER BY gc.FechaTrans Desc, gc.horatrans desc ,iviso.id "
   Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set ListaItemsFuente = rs
    Set rs = Nothing
End Function


Public Function ListaIVKardexReclamoISO( _
                    ByVal ExistPorBodega As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As DAO.QueryDef
    
    If ExistPorBodega Then
        Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsIVKardex")
    Else
        Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsIVKardex2")
    End If
    qdef.Parameters("tid") = mProps.transid
    qdef.Parameters("Cotizacion") = Me.Cotizacion("")
    qdef.Parameters("BandEgreso") = (Me.GNTrans.IVTipoTrans = "E")
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Dim cmd As ADODB.Command
    Set cmd = New ADODB.Command
    cmd.ActiveConnection = mProps.objEmpresa.Coneccion
    
    'Si la base es de JET
    If mProps.objEmpresa.TipoDB = TIPODB_JET Then
        cmd.CommandType = adCmdTable
        If ExistPorBodega Then
            cmd.CommandText = "spConsIVKardexISO"
        Else
        '    cmd.CommandText = "spConsIVKardex2"
        End If
        cmd.Parameters.Append cmd.CreateParameter("tid", adInteger, adParamInput, , mProps.transid)
        cmd.Parameters.Append cmd.CreateParameter("Cotizacion", adCurrency, adParamInput, , mProps.Cotizacion)
        Set rs = cmd.Execute
       
    'Si la base es de SQLSvr
    Else
        sql = "spConsIVKardexReclISO " & mProps.transid & ", " & _
                                  "2" & ", " & _
                                  CadenaBool((Me.GNTrans.IVTipoTrans = "E"), Me.Empresa.TipoDB)     '*** MAKOTO 26/ene/01 Mod. Si es egreso multiplica -1
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
    End If
#End If

    Set ListaIVKardexReclamoISO = rs
    Set rs = Nothing
End Function


Public Property Let IdObra(ByVal value As Long)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.IdObra", MSGERR_SOLOVER
    
    mProps.IdObra = value
    mbooModificado = True
End Property

Public Property Get IdObra() As Long
    IdObra = mProps.IdObra
End Property

Public Property Let CodObra(ByVal value As String)
    Dim sql As String, rs As Recordset
    
    'Cuando cambia el valor
        If value <> mProps.CodObra Then
            If Len(value) > 0 Then
                'Actualiza IdObra también
                sql = "SELECT IdObra FROM GNObra WHERE CodObra='" & value & "'"
                Set rs = mProps.objEmpresa.OpenRecordset(sql)
                If rs.EOF Then
                    Err.Raise ERR_NOHAYCODIGO, "GNComprobante.CodObra", MSGERR_NOHAYCODIGO
                    Exit Property
                Else
                    IdObra = rs!IdObra
                End If
                rs.Close
                Set rs = Nothing
            Else
                IdObra = 0
            End If
            
            mProps.CodObra = value
            SetModificado
        End If
    Set rs = Nothing
End Property

Public Property Get CodObra() As String
    CodObra = Trim$(mProps.CodObra)
End Property

'-----------------

Public Property Let IdZona(ByVal value As Long)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.IdZona", MSGERR_SOLOVER
    
    mProps.IdZona = value
    mbooModificado = True
End Property

Public Property Get IdZona() As Long
    IdZona = mProps.IdZona
End Property

Public Property Let CodZona(ByVal value As String)
    Dim sql As String, rs As Recordset
    
    'Cuando cambia el valor
    If value <> mProps.CodZona Then
        If Len(value) > 0 Then
            'Actualiza IdZona también
            sql = "SELECT IdZona FROM GNZona WHERE CodZona='" & value & "'"
            Set rs = mProps.objEmpresa.OpenRecordset(sql)
            If rs.EOF Then
                Err.Raise ERR_NOHAYCODIGO, "GNComprobante.CodZona", MSGERR_NOHAYCODIGO
                Exit Property
            Else
                IdZona = rs!IdZona
            End If
            rs.Close
            Set rs = Nothing
        Else
            IdZona = 0
        End If
        
        mProps.CodZona = value
        SetModificado
    End If
    Set rs = Nothing
End Property

Public Property Get CodZona() As String
    CodZona = Trim$(mProps.CodZona)
End Property

'------------------- DATOS DE LA OFERTA

Private Sub GrabarOferta()
    Dim sql As String, rs As Recordset
    Dim Stream As ADODB.Stream
    Dim AuxDesc As Integer
    Dim Ruta As String, Path As String

        'Recupera el registro correspondiente para modificar
        sql = "SELECT * FROM GnOferta WHERE TransID=" & mProps.transid
        Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
        If Not rs.EOF Then
            #If DAOLIB Then
                rs.Edit
            #End If
        Else
            sql = "SELECT * FROM GnOferta WHERE 1=0"
            Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
            rs.AddNew
        End If
        
    With rs
        !transid = mProps.transid                       'Es el mismo asignado a GnComprobante
        !Atencion = mProps.Atencion
        !FormaPago = mProps.FormaPago
        !TiempoEntrega = mProps.TiempoEntrega
        !Validez = mProps.Validez
        !FechaValidez = mProps.FechaValidez
        !FechaEntrega = mProps.FechaEntrega
        .Fields("Detalles").AppendChunk mProps.Detalles
        .Fields("Observaciones").AppendChunk mProps.Observaciones
        !TiempoEstimadoEntrega = mProps.TiempoEstimadoEntrega
        !IdGaranteRef2 = mProps.IdGaranteRef2
        !IdInventario = mProps.IdInventario
        !IdEmpleadoRef = mProps.IdEmpleadoRef
        !NumDireccion = mProps.NumDireccion
        !DirTransporte = mProps.DirTransporte
        !Opcion = Trim$(mProps.Opcion)
        !IdAgencia = mProps.IdAgencia
        !IdPlan = mProps.IdPlan
        !IdCobrador = mProps.IdCobrador
        !IdDestinatario = mProps.IdDestinatario
        !IdAgeCurier = mProps.IdAgeCurier
        !EstadoGuia = mProps.EstadoGuia
        !IdReceta = mProps.IdReceta
        !BandPorMovil = mProps.BandPorMovil
        !IdSeguro = mProps.IdSeguro
        !ValorDeclarado = mProps.ValorDeclarado
        !IdRuta = mProps.IdRuta
        !Peso = mProps.Peso
        '------------firma digital
        If mobjGNTrans.IVMostrarFirmaDig Then
            Set Stream = New ADODB.Stream
            Stream.Type = adTypeBinary
            Stream.Open
            Ruta = Me.Empresa.GNOpcion.ObtenerValor("RutaFirmaDig")
            If Len(Ruta) = 0 Then MsgBox "No tiene asignado ruta para la firma ", vbInformation: Exit Sub
            
            Path = Dir$(Ruta & "firma.jpg")
            If Len(Path) > 0 Then
                If Len(Ruta & "firma.jpg") <> 0 Then
                    ' lee la imagen desde el path
                    Stream.LoadFromFile Ruta & "firma.jpg"
                    !FirmaDigital = Stream.Read
                End If
                If Stream.State = adStateOpen Then
                    Stream.Close
                End If
                If Not Stream Is Nothing Then
                    Set Stream = Nothing
                End If
            End If
        End If
        '-----------
        .Update
        #If DAOLIB Then
                rs.Bookmark = rs.LastModified
        #End If
        .Move 0             'Para actualizar
        .Close
    End With
End Sub

Public Sub RecuperarOferta(Optional ByVal TransIDGnOferta As Long)
    Dim sql As String, rs As Recordset
    Dim Ruta As String
    Dim Stream As ADODB.Stream
    
    If TransIDGnOferta = 0 Then TransIDGnOferta = mProps.transid
    sql = "SELECT GnOferta.*,e.codprovcli,pca.direccion as agencia,cob.codvendedor as codCobrador "
    sql = sql & " ,gna.idageCurier,gna.codageCurier"
    sql = sql & " ,pcd.idprovcli as idDestinatario,pcd.codProvcli as coddestinatario,ivr.codReceta,iv.codinventario,gnseg.codseguro,"
    sql = sql & " gnr.codruta"
    sql = sql & " FROM GnOferta left JOIN Empleado e ON "
    sql = sql & "e.idprovcli = gnoferta.idempleadoref "
    sql = sql & "Left Join pcagencia pca on pca.idagencia= gnoferta.idagencia "
    sql = sql & "Left Join fcvendedor Cob on cob.idvendedor= gnoferta.idCobrador "
    sql = sql & "Left Join GNAgenciaCurier gna on gna.idageCurier= gnoferta.idageCurier "
    sql = sql & "Left Join pcprovcli pcd on pcd.idprovcli= gnoferta.iddestinatario "
    sql = sql & "Left Join ivReceta ivr on ivr.id= gnoferta.idReceta "
    sql = sql & "Left Join IVInventario iv on iv.idInventario= gnoferta.idInventario "
    sql = sql & "Left Join GNSeguro gnseg on gnseg.id= gnoferta.idseguro "
    sql = sql & "Left Join GNRuta gnr on gnr.id= gnoferta.idRuta "
    
    sql = sql & " Where transid = " & TransIDGnOferta
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
   If rs.EOF Then Exit Sub
    With rs
        
        If Not IsNull(!Atencion) Then mProps.Atencion = !Atencion
        If Not IsNull(!FormaPago) Then mProps.FormaPago = !FormaPago
        If Not IsNull(!TiempoEntrega) Then mProps.TiempoEntrega = !TiempoEntrega
        If Not IsNull(!Validez) Then mProps.Validez = !Validez
        If Not IsNull(!FechaValidez) Then mProps.FechaValidez = !FechaValidez
        If Not IsNull(!FechaEntrega) Then mProps.FechaEntrega = !FechaEntrega
        If Not IsNull(!Detalles) Then
            If .Fields("Detalles").ActualSize > 0 Then
                mProps.Detalles = .Fields("Detalles").GetChunk(.Fields("Detalles").ActualSize)
            End If
        End If
        If Not IsNull(!Observaciones) Then
            If .Fields("Observaciones").ActualSize > 0 Then
                mProps.Observaciones = .Fields("Observaciones").GetChunk(.Fields("Observaciones").ActualSize)
            End If
        End If
        If Not IsNull(!TiempoEstimadoEntrega) Then mProps.TiempoEstimadoEntrega = !TiempoEstimadoEntrega
        If Not IsNull(!IdGaranteRef2) Then mProps.IdGaranteRef2 = !IdGaranteRef2
'        If Not IsNull(!CodGaranteRef2) Then mProps.CodGaranteRef2 = !CodGaranteRef2
        If Not IsNull(!IdInventario) Then mProps.IdInventario = !IdInventario
        If Not IsNull(!CodInventario) Then mProps.CodInventario = !CodInventario 'ACTIVO CAMPO PARA ROCAR
        If Not IsNull(!IdEmpleadoRef) Then mProps.IdEmpleadoRef = !IdEmpleadoRef
        If Not IsNull(!CodProvcli) Then mProps.CodEmpleadoRef = !CodProvcli
        If Not IsNull(!NumDireccion) Then mProps.NumDireccion = !NumDireccion
        If Not IsNull(!DirTransporte) Then mProps.DirTransporte = !DirTransporte
        If Not IsNull(!Opcion) Then mProps.Opcion = !Opcion
        If Len(mProps.Opcion) < 256 Then mProps.Opcion = mProps.Opcion & String$(256 - Len(mProps.Opcion), " ")
        If Not IsNull(!IdAgencia) Then mProps.IdAgencia = !IdAgencia
        If Not IsNull(!Agencia) Then mProps.Agencia = !Agencia
        If Not IsNull(!IdPlan) Then mProps.IdPlan = !IdPlan
        If Not IsNull(!IdCobrador) Then mProps.IdCobrador = !IdCobrador
        If Not IsNull(!CodCobrador) Then mProps.CodCobrador = !CodCobrador
        If Not IsNull(!IdDestinatario) Then mProps.IdDestinatario = !IdDestinatario
        If Not IsNull(!CodDestinatario) Then mProps.CodDestinatario = !CodDestinatario
        If Not IsNull(!IdAgeCurier) Then mProps.IdAgeCurier = !IdAgeCurier
        If Not IsNull(!CodAgeCurier) Then mProps.CodAgeCurier = !CodAgeCurier
        If Not IsNull(!EstadoGuia) Then mProps.EstadoGuia = !EstadoGuia
        If Not IsNull(!IdReceta) Then mProps.IdReceta = !IdReceta
        If Not IsNull(!CodReceta) Then mProps.CodReceta = !CodReceta
        If Not IsNull(!BandPorMovil) Then mProps.BandPorMovil = !BandPorMovil
        If Not IsNull(!IdSeguro) Then mProps.IdSeguro = !IdSeguro
        If Not IsNull(!CodSeguro) Then mProps.CodSeguro = !CodSeguro
        If Not IsNull(!ValorDeclarado) Then mProps.ValorDeclarado = !ValorDeclarado
        If Not IsNull(!IdRuta) Then mProps.IdRuta = !IdRuta
        If Not IsNull(!Codruta) Then mProps.Codruta = !Codruta
        If Not IsNull(!Peso) Then mProps.Peso = !Peso
        If mobjGNTrans.IVMostrarFirmaDig Then
            If Not IsNull(!FirmaDigital) Then
                Set Stream = New ADODB.Stream
                ' Especifica el tipo de datos ( binario )
                Stream.Type = adTypeBinary
                Stream.Open
                Stream.Write !FirmaDigital
                Ruta = Me.Empresa.GNOpcion.ObtenerValor("RutaFirmaDig")
                If Len(Ruta) = 0 Then MsgBox "No tiene asignado ruta para la firma ", vbInformation: Exit Sub
                Stream.SaveToFile Ruta & "firma.jpg", adSaveCreateOverWrite
                If Stream.State = adStateOpen Then
                    Stream.Close
                End If
                If Not Stream Is Nothing Then
                    Set Stream = Nothing
                End If
            End If
        End If

       .Close
    End With
    Set rs = Nothing
End Sub

Public Property Let Atencion(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.Atencion", MSGERR_SOLOVER
    
    If Len(value) > 120 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.Atencion", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.Atencion <> value Then
        mProps.Atencion = IIf(value = "0", "", value)
        mbooModificado = True
    End If
End Property

Public Property Get Atencion() As String
    Atencion = Trim$(mProps.Atencion)
End Property

Public Property Let FormaPago(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.FormaPAgo", MSGERR_SOLOVER
    
    If Len(value) > 80 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.FormaPAgo", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.FormaPago <> value Then
        mProps.FormaPago = value
        mbooModificado = True
    End If
End Property

Public Property Get FormaPago() As String
    FormaPago = Trim$(mProps.FormaPago)
End Property

Public Property Let TiempoEntrega(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.TiempoEntrega", MSGERR_SOLOVER
    
    If Len(value) > 120 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.TiempoEntrega", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.TiempoEntrega <> value Then
        mProps.TiempoEntrega = IIf(value = "0", "", value)
        mbooModificado = True
    End If
End Property

Public Property Get TiempoEntrega() As String
    TiempoEntrega = Trim$(mProps.TiempoEntrega)
End Property

Public Property Let Validez(ByVal value As String)
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.Validez", MSGERR_SOLOVER
    If Len(value) > 80 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.Validez", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.Validez <> value Then
        mProps.Validez = IIf(value = "0", "", value)
        mbooModificado = True
    End If
End Property

Public Property Get Validez() As String
    Validez = Trim$(mProps.Validez)
End Property

Public Property Let Detalles(ByVal value As String)
    mProps.Detalles = value
    mbooModificado = True
End Property

Public Property Get Detalles() As String
    Detalles = Trim$(mProps.Detalles)
End Property

Public Function VerificaItemConAsignadoSoloCantidadFamiliaConBodega(ByVal CodInventario As String, _
                                      ByRef CantLimite As Currency, ByVal CodBodega As String) As Boolean
    Dim sql As String, rs As Recordset, rsDev As Recordset
    CantLimite = 0
    
    If Me.GNTrans.IVItemDevolucion Then
        If Me.GNTrans.CodLineaDevolucion = CodInventario Then
            CantLimite = 1
            VerificaItemConAsignadoSoloCantidadFamiliaConBodega = True
        End If
    Else
          
        If Me.GNTrans.IVOmitirControlCatidadTotal Then
            sql = " SELECT isnull(Sum(IVK.Cantidad),0) as Total"
            sql = sql & " FROM IVKardex IVK"
            sql = sql & " inner join ivmateria ivm"
            sql = sql & " INNER JOIN IVINVENTARIO IV"
            sql = sql & " ON IVm.Idmateria = IV.IdInventario"
            sql = sql & " on ivk.idinventario=ivm.idinventario"
            sql = sql & " inner join gncomprobante gnc"
            sql = sql & " inner join gnCentroCosto gcc"
            sql = sql & " on gcc.idcentro=gnc.idcentro"
            sql = sql & " on ivk.transid=gnc.transid"
            sql = sql & " inner join ivBodega ivb on ivk.idbodega = ivb.idbodega"
            sql = sql & " Where gnc.estado <>3 "
            sql = sql & " and gcc.codcentro='" & Me.CodCentro & "'"
            sql = sql & " AND "
            sql = sql & " iv.idinventario=  (select DISTINCT idmateria"
            sql = sql & " from ivinventario iv inner join ivmateria ivm"
            sql = sql & " on iv.idinventario=ivm.idmateria "
            sql = sql & " where codinventario='" & CodInventario & "')"
            sql = sql & " AND CODTRANS not in ('MEGM','MEMM','MEQM')"
            sql = sql & " and codbodega='" & CodBodega & "'"
        
        Else
            sql = " SELECT isnull(Sum(IVK.Cantidad),0) as Total"
            sql = sql & " FROM IVKardex IVK"
            sql = sql & " inner join ivmateria ivm"
            sql = sql & " INNER JOIN IVINVENTARIO IV"
            sql = sql & " ON IVm.Idmateria = IV.IdInventario"
            sql = sql & " on ivk.idinventario=ivm.idinventario"
            sql = sql & " inner join gncomprobante gnc"
            sql = sql & " inner join gnCentroCosto gcc"
            sql = sql & " on gcc.idcentro=gnc.idcentro"
            sql = sql & " on ivk.transid=gnc.transid"
            sql = sql & " inner join ivBodega ivb on ivk.idbodega = ivb.idbodega"
            sql = sql & " Where gnc.estado <>3 "
            sql = sql & " and ivk.TransID = ( "
            sql = sql & " Select TransId  from  Gncomprobante where idtransfuente="
            sql = sql & Me.transid & " ) "
    '''        sql = sql & " and gcc.codcentro='" & Me.CodCentro & "'"
            sql = sql & " AND "
            sql = sql & " iv.idinventario=  (select DISTINCT idmateria"
            sql = sql & " from ivinventario iv inner join ivmateria ivm"
            sql = sql & " on iv.idinventario=ivm.idmateria "
            sql = sql & " where codinventario='" & CodInventario & "')"
            sql = sql & " and codbodega='" & CodBodega & "'"
        End If
    
        Set rs = Me.Empresa.OpenRecordset(sql)
        
        
        
        
        
        If rs.EOF Then
            VerificaItemConAsignadoSoloCantidadFamiliaConBodega = False
        Else
       
            If IsNull(rs!TOTAL) Then
                VerificaItemConAsignadoSoloCantidadFamiliaConBodega = False
            Else
                CantLimite = rs!TOTAL
                VerificaItemConAsignadoSoloCantidadFamiliaConBodega = True
            End If
        End If
        rs.Close
        Set rs = Nothing
 End If
End Function



'AUC agregado para listar kardex con numdias y fecha de devolucion
Public Function ListaIVKardex5( _
                    ByVal ExistPorBodega As Boolean) As Variant
    Dim sql As String, rs As Recordset
    Dim cmd As ADODB.Command
    Set cmd = New ADODB.Command
    cmd.ActiveConnection = mProps.objEmpresa.Coneccion
    sql = "spConsIVKardex3 " & mProps.transid & ", " & _
                                  Me.Cotizacion("") & ", " & _
                                  CadenaBool(ExistPorBodega, Me.Empresa.TipoDB) & ", " & _
                                  CadenaBool((Me.GNTrans.IVTipoTrans = "E"), Me.Empresa.TipoDB)
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set ListaIVKardex5 = rs
    Set rs = Nothing
End Function

Public Function ListaIVKardexALQ( _
                    ByVal ExistPorBodega As Boolean) As Variant
    Dim sql As String, rs As Recordset
    Dim cmd As ADODB.Command
    Set cmd = New ADODB.Command
    cmd.ActiveConnection = mProps.objEmpresa.Coneccion
    If Me.Empresa.GNOpcion.IVKTipoDatoDouble Then
        sql = "spConsIVKardex4Dou " & mProps.transid & ", " & _
                                  Me.Cotizacion("") & ", " & _
                                  CadenaBool(ExistPorBodega, Me.Empresa.TipoDB) & ", " & _
                                  CadenaBool((Me.GNTrans.IVTipoTrans = "E"), Me.Empresa.TipoDB)
    Else
        sql = "spConsIVKardex4 " & mProps.transid & ", " & _
                                  Me.Cotizacion("") & ", " & _
                                  CadenaBool(ExistPorBodega, Me.Empresa.TipoDB) & ", " & _
                                  CadenaBool((Me.GNTrans.IVTipoTrans = "E"), Me.Empresa.TipoDB)
    End If
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set ListaIVKardexALQ = rs
    Set rs = Nothing
End Function

Public Function ListaTransFuente2Prep( _
                    ByVal CodCentro As String) As Variant
    Dim sql As String, s As String, v As Variant, i As Long, CodT As String
    Dim comodin As String
    Dim pos As Integer
   comodin = "%"
   Dim cond As String, rs As Recordset, cond1 As String
    If Len(GNTrans.CodTransFuente) > 0 Then
        'Puede tener varios codigos de transaccion de fuente    ejm. (FC);(OF)
        v = Split(GNTrans.CodTransFuente, ";")
        For i = 0 To UBound(v)
            If Len(s) > 0 Then s = s & ","
            CodT = v(i)
            CodT = Left$(CodT, Len(CodT) - 1)       'Quita el signo ')'
            CodT = Right$(CodT, Len(CodT) - 1)      'Quita el signo '('
            s = s & "'" & CodT & "'"
        Next i
    Else
        Err.Raise ERR_INVALIDO, "GNComprobante.ListaTransFuente", _
                    "No está definida ningúna transacción de fuente para ésta transacción."
    End If
    '*** MAKOTO 06/mar/01 Agregado 'Nombre'
    'cambiado por Oliver 27/08/2003
    'AUC cambiado agregado nombreItem y telefono
   sql = "SELECT"
    If gobjMain.objCondicion.TopN > 0 Then
        sql = sql & " TOP " & gobjMain.objCondicion.TopN
    End If
    '*** MAKOTO 05/feb/01 Mod. Aumentado 'NumDocRef' y 'Nombre'
    sql = sql & " gc.TransID, gc.FechaTrans, gc.CodTrans, gc.NumTrans, "
    sql = sql & " gc.NumdocRef, pc.Nombre, gc.Descripcion, "
    sql = sql & " cc.idCentro, cc.CodCentro, cc.Descripcion AS DescCentro, gnv.CodVehiculo, gc.Estado "
    If Me.GNTrans.CodPantalla = "IVGNG" Then
        sql = sql & " ,gc.Estado1,gc.Estado2 "
    End If
    'sql = sql & " ,ivb.descripcion "
        sql = sql & "FROM GNCentroCosto cc LEFT JOIN  GNVehiculo gnv   ON cc.IdVehiculo = gnv.IdVehiculo RIGHT JOIN "
        sql = sql & "  GNComprobante gc Inner join PcProvCli pc ON  gc.IdClienteRef = pc.IDProvCli "
        sql = sql & " ON cc.IdCentro = gc.IdCentro" & _
                IIf(Len(gobjCond.NombreItem) > 0, " Inner join ivkardex ivk on ivk.transid = gc.transid Inner join ivinventario iv ON iv.idinventario = ivk.idinventario ", " ") & _
                IIf(Len(gobjCond.nomPcGrupo) > 0, "inner join pcgrupo" & gobjCond.NumPCGrupo & " pcg on pcg.idgrupo" & gobjCond.NumPCGrupo & " = pc.idgrupo" & gobjCond.NumPCGrupo & " ", " ")
        'sql = sql & LEFT JOIN IVKARDEX IVK ON IVK.TRANSID = GC.TRANSID  "
        'sql = sql & " LEFT JOIN IVBODEGA IVB ON  IVB.IDBODEGA = IVK.IDBODEGA "
        'sql = sql & IIf(Len(gobjCond.CodPC1) > 0 Or Len(gobjCond.NomCliente) > 0, " Inner join PcProvCli pc ON (gc.IdProveedorRef = pc.IDProvCli  OR gc.IdClienteRef = pc.IDProvCli) ", " ")
      '  sql = sql & " ON cc.IdCentro = gc.IdCentro "
        If Len(cond) > 0 Then cond = cond & " AND "
       cond = cond & " gc.Estado IN ("
       If gobjMain.objCondicion.EstadoBool(ESTADO_NOAPROBADO) Then
            cond = cond & ESTADO_NOAPROBADO & ","
       End If
       If gobjMain.objCondicion.EstadoBool(ESTADO_APROBADO) Then
            cond = cond & ESTADO_APROBADO & ","
       End If
        If gobjMain.objCondicion.EstadoBool(ESTADO_DESPACHADO) Then
            cond = cond & ESTADO_DESPACHADO & ","
       End If
        If gobjMain.objCondicion.EstadoBool(ESTADO_SEMDESPACHADO) Then
            cond = cond & ESTADO_SEMDESPACHADO & ","
       End If
    cond = Mid$(cond, 1, Len(cond) - 1)
    cond = cond & ")"
      'auc 26/10/07
        If Me.GNTrans.VerFacturados And Me.GNTrans.CodPantalla = "IVGNG" Then
                 If Len(cond) > 0 Then cond = cond & " AND "
                 cond = cond & " gc.Estado1 IN ("
             If gobjMain.objCondicion.Estado1Bool(ESTADO_FACTURADO) Then
                 cond = cond & ESTADO_FACTURADO & ","
            End If
            If gobjMain.objCondicion.Estado1Bool(ESTADO_NOFACTURADO) Then
                 cond = cond & ESTADO_NOFACTURADO & ","
            End If
                 cond = Mid$(cond, 1, Len(cond) - 1)
                 cond = cond & ")"
          ElseIf Me.GNTrans.VerComprados And Me.GNTrans.CodPantalla = "IVGNG" Then
                 If Len(cond) > 0 Then cond = cond & " AND "
                 cond = cond & " gc.Estado2 IN ("
            If gobjMain.objCondicion.Estado2Bool(ESTADO_COMPRAS) Then
                 cond = cond & ESTADO_COMPRAS & ","
            End If
            If gobjMain.objCondicion.Estado2Bool(ESTADO_NOCOMPRAS) Then
                 cond = cond & ESTADO_NOCOMPRAS & ","
            End If
            cond = Mid$(cond, 1, Len(cond) - 1)
                 cond = cond & ")"
        End If
       'hasta aqui
    ' Condicion de Busqueda de Fecha
   If Len(cond) > 0 Then cond = cond & " AND "
    cond = cond & " (gc.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, gobjMain.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, gobjMain.TipoDB) & " ) "
    'Condición de CodProvCli    (Opcional)
    If Len(gobjCond.CodPC1) > 0 Then
       If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(PC.CodProvCli='" & gobjCond.CodPC1 & "')"
   End If
    If Len(s) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gc.CodTrans IN (" & s & ")"
    End If
    If Len(CodCentro) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " cc.CodCentro='" & CodCentro & "'"
    End If
    '---------- AUC 31/08/06 para filtrar por descripcion de item
    If Len(gobjCond.NombreItem) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
            cond = cond & "(iv.Descripcion like'" & comodin & gobjCond.NombreItem & comodin & "')"
            pos = InStr(1, UCase(Me.Empresa.GNOpcion.NombreEmpresa), "DISFRA")
            If pos > 0 Then
                cond = cond & " AND iv.tipo = 4 "
            End If
   End If
        '------- AUC 23/11/06
    If Len(gobjCond.NomCliente) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
            cond = cond & "(PC.Nombre like'" & comodin & gobjCond.NomCliente & comodin & "')"
    End If
    If Len(gobjCond.Direccion) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(pc.Direccion1 like'" & comodin & gobjCond.Direccion & comodin & "')"
    End If
    If Len(gobjCond.nomPcGrupo) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(pcg.Descripcion  like'" & comodin & gobjCond.nomPcGrupo & comodin & "')"
    End If
    If Len(gobjCond.Telefono) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(pc.telefono1  like '" & comodin & gobjCond.Telefono & comodin & "' OR  pc.telefono2  like'" & comodin & gobjCond.Telefono & comodin & "' OR   pc.telefono3  like'" & comodin & gobjCond.Telefono & comodin & "' OR pc.FAX like'" & comodin & gobjCond.Telefono & comodin & "' )"
    End If
   If gobjCond.NumTrans1 <> 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gc.Numtrans= " & gobjCond.NumTrans1
    End If
'    If gobjCond.NumTrans2 <> 0 Then
'        If Len(cond) > 0 Then cond = cond & " AND "
'        cond = cond & " gc.numdocref= " & gobjCond.NumTrans2
'    End If
    'Condición de CodProvCli    (Opcional)
    If Len(gobjCond.CodVehiculo) > 0 Then
       If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(gnv.CodVehiculo='" & gobjCond.CodVehiculo & "')"
   End If
    'JEAA 01/06/2007
    If GNTrans.ImportacionUnicaTrans Then
        cond = cond & " AND GC.TRANSID NOT IN"
        cond = cond & " (SELECT IdTransFuente"
        cond = cond & " FROM GNCentroCosto cc"
        cond = cond & " LEFT JOIN  GNVehiculo gnv   ON cc.IdVehiculo = gnv.IdVehiculo"
        cond = cond & " RIGHT JOIN  GNComprobante gc   ON cc.IdCentro = gc.IdCentro"
        cond = cond & "RIGHT JOIN pcprovcli pc on pc.idprovcli = gc.idclienteref"
        cond = cond & " where gc.Estado <> 3 "
        cond = cond & " AND (gc.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, gobjMain.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, gobjMain.TipoDB) & " ) "
        cond = cond & " AND  gc.CodTrans IN ('" & GNTrans.CodTrans & "')"
        cond = cond & " AND IdTransFuente<>0 )"
        cond = cond & " and gc.transid not in( select idfuente from GNTransIdFuente g inner join gncomprobante gc on gc.transid=g.transid where gc.estado<>3 )"
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
'        If Len(gobjCond.CodBodega1) > 0 Then
'           cond = cond & " AND IVB.CODBODEGA = '" & gobjCond.CodBodega1 & "'"
'       End If
'     If Len(cond) > 0 Then sql = sql & " WHERE " & cond
     sql = sql & " Group by gc.TransID, gc.FechaTrans, gc.horatrans, "
     sql = sql & " gc.CodTrans, gc.NumTrans, gc.NumdocRef, pc.Nombre, gc.Descripcion,"
     sql = sql & " cc.idCentro, cc.CodCentro, cc.Descripcion, gc.Estado, gnv.CodVehiculo "
     'sql = sql & " ,ivb.descripcion"
    If Me.GNTrans.CodPantalla = "IVGNG" Then
            sql = sql & " ,gc.Estado1,gc.Estado2 "
    End If
    sql = sql & " ORDER BY gc.FechaTrans Desc, gc.horatrans desc  ,gc.CodTrans,gc.NumTrans"
   Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set ListaTransFuente2Prep = rs
    Set rs = Nothing
End Function

'AUC importa datos de devolucion
Public Sub ImportaDatosDev( _
                ByVal TransIDs As String, _
                ByVal Incremental As Boolean)
    Dim Fuente As GNComprobante, i As Long, sql As String, rs As Recordset
    Dim v As Variant, tid As Long, aux_inc As Boolean
    If Len(TransIDs) = 0 Then Exit Sub
    'Prepara una colección para almacenar TransIDs de fuente,
    ' para cuando graba la transacción cambiar de estado a Despachado
    If mcolTransIDs Is Nothing Then Set mcolTransIDs = New Collection
    'Separa los TransIDs en un vector
    v = Split(TransIDs, ",")
    aux_inc = Incremental
    'Si la transacción está configurada que importa solo desde transacciones Apropadas
    If Me.GNTrans.ImportaSoloAprobado Then
        sql = "SELECT CodTrans, NumTrans FROM GNComprobante " & _
              "WHERE (Not Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & ")) " & _
                    " AND (TransID IN (" & TransIDs & ")) "
        Set rs = Me.Empresa.OpenRecordset(sql)
        If Not rs.EOF Then
            sql = MSGERR_NOIMPORTA & vbCr & vbCr
            Do Until rs.EOF
                sql = sql & rs.Fields("CodTrans") & " " & rs.Fields("NumTrans") & vbCr
                rs.MoveNext
            Loop
            Err.Raise ERR_NOIMPORTA, "GNComprobante.ImportaDatos", sql
        End If
        rs.Close
        Set rs = Nothing
    End If
    'Repite para todas las transacciones de fuente
    For i = 0 To UBound(v, 1)
        tid = val(v(i))             'Convierte en numérico
        'Desde la segunda trans. hay que incrementar siempre
        If i > 0 Then aux_inc = True
        'Recupera la transaccioón de fuente
        Set Fuente = Empresa.RecuperaGNComprobante(tid)
        If Fuente Is Nothing Then
            Err.Raise ERR_NOHAYCODIGO, "GNComprobante.ImportaDatos", _
                        "No se puede recuperar la transacción de fuente."
        End If
        'Si está ImportaSoloAprobado=True y el origen no está 'aprobado' ni 'despachado'
        If GNTrans.ImportaSoloAprobado And _
            Not (Fuente.Estado = ESTADO_APROBADO Or Fuente.Estado = ESTADO_DESPACHADO) Then
            Err.Raise ERR_NOIMPORTA, "GNComprobante.ImportaDatos", MSGERR_NOIMPORTA
        End If
        'Copia los datos de cabecera
        CodCentro = Fuente.CodCentro
        CodProveedorRef = Fuente.CodProveedorRef
        CodClienteRef = Fuente.CodClienteRef
        CodVendedor = Fuente.CodVendedor
        NumDocRef = Fuente.NumDocRef
        'jeaa 04-04-2005 aumentado para saber de donde importo
        Descripcion = Mid$(mProps.Descripcion & " Trans. Fuente: " & Fuente.CodTrans & " No. " & Fuente.NumTrans & " / " & Fuente.Descripcion, 1, 120)          '*** MAKOTO 11/jul/2000
        If Len(Descripcion) > 120 Then Descripcion = Mid$(Descripcion, 1, 120)
        CodResponsable = Fuente.CodResponsable  '*** MAKOTO 16/ago/2000
        Nombre = Fuente.Nombre                  '*** MAKOTO 06/feb/01 Agregado
        FechaFuente = Fuente.FechaTrans
        'Si requiere importar TSKardex
'        If GNTrans.ImportaTSK Then
'            ImportaTSKardex fuente
'        End If
        'Si requiere importar TSKardexRet       '*** MAKOTO 07/feb/01 Agregado
'        If GNTrans.ImportaTSKRet Then
'            ImportaTSKardexRet fuente
'        End If
        'Si requiere importar IVKardex
        If GNTrans.ImportaIVK Then
            ImportaIVKardexDev Fuente, False, aux_inc, tid
        End If
'
        'Si requiere importar IVKardex pero que pase CostoRealTotal a CostoTotal
'        If GNTrans.ImportaIVKReal Then
'            ImportaIVKardex fuente, True, aux_inc
'        End If
'        'Si requiere importar IVKardexRecargo
'        If GNTrans.ImportaIVKR Then
'            ImportaIVKardexRecargo fuente
'        End If
        'Si requiere importar PCKardex
      '  If GNTrans.ImportaPCK Then
            If GNTrans.CodPantalla = "IVDVALQ" Then 'AUC 14/02/07
'                ImportaPCKardex1 fuente, aux_inc
'            Else
                ImportaPCKardex Fuente
            End If
     '   End If
        'Si requiere importar CTLibroDetalle
'        If GNTrans.ImportaCTD Then
'            ImportaAsiento fuente, aux_inc
'        End If
        'Almacena TransID de fuente en la colección
        If Not aux_inc Then LimpiaColeccion mcolTransIDs
        mcolTransIDs.Add item:=Fuente.transid
        'Si es importación incremental, cambia estado del ogígen inmediatamente
        '  Si no es incremental, lo hace al momento de grabar la trans para que
        '  no cambie estado en case de que cancela la transaccion sin grabar
        If Incremental Then
            'Si no está aprobado, no pasa al estado 'Despachado'
            ' para evitar que un asiento descuadrado marque como Despachado y afecte al balance
            If Fuente.Estado = ESTADO_APROBADO Then
                'Cambia el estado de fuente a Despachado
                mProps.objEmpresa.CambiaEstadoGNComp Fuente.transid, ESTADO_DESPACHADO
            End If
        End If
    Next i
   Set Fuente = Nothing
End Sub

'AUC importa datos para devolucion
Private Sub ImportaIVKardexDev( _
                ByVal Fuente As GNComprobante, _
                ByVal ConValorReal As Boolean, _
                ByVal Incremental As Boolean, ByVal tid As Long)
    Dim i As Long, ix As Long, ivk As IVKardex
    Dim Signo As Integer
    Dim item As IVInventario
    Dim CantActual As Currency
    If mcolIVKardex Is Nothing Then Set mcolIVKardex = New Collection
    'Si es importación incremental, no se borra lo anterior
    If Not Incremental Then             '*** MAKOTO 15/dic/00
        BorrarIVKardex
    End If
    For i = Fuente.CountIVKardex To 1 Step -1
        Set item = Fuente.Empresa.RecuperaIVInventario(Fuente.IVKardex(i).CodInventario)
        If Fuente.IVKardex(i).Cantidad > 0 Or item.Tipo = Preparacion Then
            Fuente.RemoveIVKardexPreparacion (i)
        End If
        Set item = Nothing
    Next i
    For i = 1 To Fuente.CountIVKardex
        Set ivk = Fuente.IVKardex(i).Clone
        Set ivk.GNComprobante = Me
         ivk.idpadre = tid  'para guardar el transid fuente temporalmente
'        If Me.GNTrans.ImportacionSoloSaldosInv Then
'            CantActual = ivk.Cantidad
'            ivk.Cantidad = CantActual + CantidadTransRelacionadas(ivk.IdInventario, fuente.TransID, ivk.Orden)
'        End If
        ivk.IdPadreSub = Fuente.IVKardex(i).Orden
        Signo = IIf(GNTrans.IVTipoTrans = "E", -1, 1)
       If Not ConValorReal Then
            ivk.CostoTotal = Abs(ivk.CostoTotal) * Signo
            ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
        Else
            ivk.CostoTotal = Abs(ivk.CostoRealTotal) * Signo
            ivk.PrecioTotal = Abs(ivk.PrecioRealTotal) * Signo
        End If
        'aqui podria haber un problema  puesto asi para encofrados
      '  If Me.GNTrans.ImportacionSoloSaldosInv Then
            CantActual = ivk.Cantidad
            ivk.Cantidad = CantActual + CantidadTransRelacionadas(ivk.IdInventario, Fuente.transid, ivk.Orden)
      '  End If
        ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
      mcolIVKardex.Add ivk
    Next i
End Sub

Private Function CantidadTransRelacionadas(ByVal IdInventario As Long, ByVal IdTransFuente As Long, ByVal IdPadreSub As Long) As Currency
Dim sql As String, rs As Recordset
Dim v As Variant, i As Long, cantR As Currency
On Error GoTo CapturaError
    '''''''''''''''''
    sql = "select sum(ABS(ivk.cantidad))as cantidad  from ivkardex ivk inner join gncomprobante gn on gn.transid = ivk.transid "
    sql = sql & "RIGHT join gnfuente gnf on gn.transid = gnf.transid"
    sql = sql & " where  ivk.Cantidad < 0 "
    sql = sql & " AND ivk.IdInventario = " & IdInventario
    sql = sql & " AND gn.estado <> " & ESTADO_ANULADO
    sql = sql & " AND ivk.idpadre = " & IdTransFuente & " AND ivk.idpadresub = " & IdPadreSub
    sql = sql & " AND GN.CODTRANS IN ('DEV','FCVA','FCVAN')"
   ''''''''''''''''
'    sql = "select sum(ABS(ivk.cantidad))as cantidad  from ivkardex ivk inner join gncomprobante gn "
'    sql = sql & " inner join gntrans gnt on gnt.codtrans = gn.codtrans and gnt.afectacantidad = 1"
'    sql = sql & "  on gn.transid = ivk.transid "
'    sql = sql & "RIGHT join gnfuente gnf on gn.transid = gnf.transid"
'    sql = sql & " where  ivk.Cantidad < 0 And (gn.idTransFuente = " & IdTransFuente
'    sql = sql & " OR gnf.idfuentes = " & "'%" & IdTransFuente & "'"
'    sql = sql & ")"
'    sql = sql & " AND ivk.IdInventario = " & IdInventario
'    sql = sql & " AND gn.estado <> " & ESTADO_ANULADO
'    sql = sql & " OR (ivk.idpadre = " & IdTransFuente & " AND ivk.idpadresub = " & IdPadreSub & ")"
   Set rs = Me.Empresa.OpenRecordset(sql)
    If IsNull(rs!Cantidad) Then Exit Function
    Do While Not rs.EOF
        cantR = cantR + Abs(rs!Cantidad)
        rs.MoveNext
    Loop
        CantidadTransRelacionadas = cantR
    Exit Function
CapturaError:
    MsgBox Err.Number & " " & Err.Description
    Exit Function
End Function
'AUC Para tomar solo valores negativos del IVKardex 'doble bodega
Public Function IVKardexPTotal1(bandReal As Boolean) As Currency
    Dim t As Currency, i As Long, v As Currency
    For i = 1 To CountIVKardex
        If Me.IVKardex(i).Cantidad < 0 Then 'AUC agregado para que calcule cuando no tenga cant
            If bandReal Then
                v = IVKardex(i).PrecioRealTotal
                t = t + v '***Agregado. 28/08/2003. Angel. No funciona bien 01/jun/04
            Else
                v = IVKardex(i).PrecioTotal * -1
                t = t + MiCCur(Format$(v, Me.FormatoMoneda)) '***Antes, quitado para pruebas. Angel. 27/08/2003
            End If
        End If
    Next i
    If bandReal Then
        IVKardexPTotal1 = MiCCur(Format$(t, Me.FormatoMoneda)) '***Antes, quitado para pruebas. Angel. 27/08/2003
    Else
        IVKardexPTotal1 = t '***Antes, quitado para pruebas. Angel. 27/08/2003
    End If
End Function
Public Function IVKardexPTotalMulta(bandReal As Boolean) As Currency
    Dim t As Currency, i As Long, v As Currency
    For i = 1 To CountIVKardex
        If Me.IVKardex(i).Cantidad <> 0 Then 'AUC agregado para que calcule cuando no tenga cant
            If bandReal Then
                v = IVKardex(i).PrecioTotal
                t = t + v '***Agregado. 28/08/2003. Angel. No funciona bien 01/jun/04
            Else
                v = IVKardex(i).PrecioTotal
                t = t + MiCCur(Format$(v, Me.FormatoMoneda)) '***Antes, quitado para pruebas. Angel. 27/08/2003
            End If
        End If
    Next i
    If bandReal Then
        IVKardexPTotalMulta = MiCCur(Format$(t, Me.FormatoMoneda)) '***Antes, quitado para pruebas. Angel. 27/08/2003
    Else
        IVKardexPTotalMulta = t '***Antes, quitado para pruebas. Angel. 27/08/2003
    End If
End Function
Public Function IVKardexTotal1(bandReal As Boolean) As Currency
    Dim t As Currency
   'Decide si calcula en base de Precio o Costo
    If GNTrans.IVRecargoEnCosto Then
        t = IVKardexCTotal(bandReal)
    Else
        t = IVKardexPTotal1(bandReal)
    End If
    IVKardexTotal1 = t
End Function
Public Function IVKardexTotalMulta(bandReal As Boolean) As Currency
    Dim t As Currency
    'Decide si calcula en base de Precio o Costo
    If GNTrans.IVRecargoEnCosto Then
        t = IVKardexCTotal(bandReal)
    Else
        t = IVKardexPTotalMulta(bandReal)
    End If
    IVKardexTotalMulta = t
End Function

'AUC Para devolucion
Public Function IVKardexTotalDev(bandReal As Boolean) As Currency
    Dim t As Currency
    'Decide si calcula en base de Precio o Costo
    If GNTrans.IVRecargoEnCosto Then
        't = IVKardexCTotal(bandReal) queda pendiente
    Else
        t = IVKardexPTotalDev(bandReal)
   End If
    IVKardexTotalDev = t
End Function

'AUC para devolucion
Public Function IVKardexPTotalDev(bandReal As Boolean) As Currency
    Dim t As Currency, i As Long, v As Currency
    For i = 1 To CountIVKardex
        If Me.IVKardex(i).Cantidad < 0 Then 'AUC agregado para que calcule cuando no tenga cant
            If bandReal Then
                v = IVKardex(i).PrecioRealTotal
                t = t + v '***Agregado. 28/08/2003. Angel. No funciona bien 01/jun/04
            Else
                v = IVKardex(i).PrecioTotal
                t = t + MiCCur(Format$(v, Me.FormatoMoneda)) '***Antes, quitado para pruebas. Angel. 27/08/2003
           End If
        End If
    Next i
    If bandReal Then
        IVKardexPTotalDev = MiCCur(Format$(t, Me.FormatoMoneda)) '***Antes, quitado para pruebas. Angel. 27/08/2003
    Else
        IVKardexPTotalDev = t '***Antes, quitado para pruebas. Angel. 27/08/2003
    End If
End Function

Public Property Let FechaFuente(value As Date)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.FechaFuente", MSGERR_SOLOVER
    'Solo cuando cambia el valor
    If mProps.FechaFuente <> value Then
        mProps.FechaFuente = value
        mbooModificado = True
        'RaiseEvent FechaCambiado
    End If
End Property

Public Property Get FechaFuente() As Date
    FechaFuente = mProps.FechaFuente
End Property

'AUC cambia estado fuente semidespachado/semidevuelto
Public Sub CambiaEstadoDeFuenteSemi()
 Dim tid As Variant, sql As String
    Dim tidActual As Long
    If mcolTransIDs Is Nothing Then Exit Sub
    tidActual = mProps.transid
   For Each tid In mcolTransIDs
        'Cambia el estado de fuente a SEMDI Despachado
        'Si está anulado o no aprobado, no pasa al estado 'Despachado'
        ' para evitar que un asiento descuadrado marque como Despachado y afecte al balance
        mProps.transid = tid
        If NoDevuelveTodo(tid) Then
           sql = "UPDATE GNComprobante SET Estado=" & ESTADO_SEMDESPACHADO & _
                " WHERE (TransID=" & tid & ") AND (Estado<>" & ESTADO_ANULADO & ")"
            Me.Empresa.Execute sql, True
        End If
   Next tid
            mProps.transid = tidActual
            RecuperaIVKardex
End Sub

'AUC 09/11/2006
Public Function Abono() As Currency
Dim sql As String
Dim rs As Recordset
    Dim t  As Variant, i As Long, v As Currency
    sql = "select sum(debe) AS ValAbono from pckardex inner join tsformacobropago  tsf on tsf.idforma = pckardex.idforma where " & _
          " tsf.considerarcomoefectivo = 1 and pckardex.transid  =" & Me.transid
    Set rs = Me.Empresa.OpenRecordset(sql)
    If Not rs Is Nothing Then
       t = rs!ValAbono
    End If
'     v = IVKardexPTotal(True)
        Abono = MiCCur(Format$(t, Me.FormatoMoneda))  '***Antes, quitado para pruebas. Angel. 27/08/2003
End Function

'AUC 06/12/06
Public Function PorCobrarPagar( _
                                mbooPorCobrar As Boolean, _
                                codPC As String, _
                                f As Date, _
                                codF As String, _
                                CodMon As String, _
                                codg1 As String) As Variant
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim objCond As Condicion, aux_inc As Boolean
    Set objCond = gobjMain.objCondicion
    'Si no está especificada la moneda, coge la Moneda predeterminada
    If Len(objCond.CodMoneda) = 0 Then objCond.CodMoneda = MONEDA_PRE
    numMoneda = Me.Empresa.GNOpcion.IndiceMoneda(objCond.CodMoneda)
    '#If DAOLIB Then
    sql = "SELECT vw.Id, vw.CodProvCli, vw.Nombre, vw.TransID, 0, vw.Trans, vw.CodForma,vw.NumLetra, vw.Doc,  "
    Select Case numMoneda
    Case 1:  sql = sql & "vw.Valor1 AS Valor, vw.VCancelado1 AS VCancelado, " & _
                          "vw.Valor1-vw.VCancelado1 AS Saldo, vw.CodMoneda, vw.Cancela, 1 AS Cotizacion, "
    Case 2:  sql = sql & "vw.Valor2 AS Valor, vw.VCancelado2 AS VCancelado, " & _
                          " ISNULL(vw.valor1, vw.VCancelado2) AS Saldo, vw.CodMoneda, vw.Cancela, vw.Cotizacion2 AS Cotizacion, "
    Case 3:  sql = sql & "vw.Valor3 AS Valor, vw.VCancelado3 AS VCancelado, " & _
                          "vw.Valor3-vw.VCancelado3 AS Saldo, vw.CodMoneda, vw.Cancela, vw.Cotizacion3 AS Cotizacion, "
    Case 4:  sql = sql & "vw.Valor4 AS Valor, vw.VCancelado4 AS VCancelado, " & _
                          "vw.Valor4-vw.VCancelado4 AS Saldo, vw.CodMoneda, vw.Cancela, vw.Cotizacion4 AS Cotizacion, "
    End Select
    sql = sql & "vw.FechaEmision, vw.Plazo, vw.FechaVenci, gn.estado "
    If objCond.PorCobrar Then
        sql = sql & " FROM vwConsPCPorCobrar vw "
    Else
        sql = sql & " FROM vwConsPCPorPagar vw Inner Join gncomprobante gn on gn.transid = vw.transid "
    End If
    'Solo los que tengan saldo >0   (Necesario)
    cond = "(vw.Valor" & objCond.numMoneda & ">=VCancelado" & objCond.numMoneda & ")"
       If Len(cond) > 0 Then cond = cond & " AND "
       If gobjMain.objCondicion.EstadoBool(ESTADO_NOAPROBADO) And _
            gobjMain.objCondicion.EstadoBool(ESTADO_APROBADO) And _
            gobjMain.objCondicion.EstadoBool(ESTADO_DESPACHADO) Then
            cond = cond & " gn.Estado<>" & ESTADO_ANULADO
       ElseIf gobjMain.objCondicion.EstadoBool(ESTADO_NOAPROBADO) And _
            gobjMain.objCondicion.EstadoBool(ESTADO_APROBADO) Then
            cond = cond & " gn.Estado IN (" & ESTADO_NOAPROBADO & "," & ESTADO_APROBADO & ")"
       ElseIf gobjMain.objCondicion.EstadoBool(ESTADO_APROBADO) And _
            gobjMain.objCondicion.EstadoBool(ESTADO_DESPACHADO) Then
            cond = cond & " gn.Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & ")"
       ElseIf gobjMain.objCondicion.EstadoBool(ESTADO_NOAPROBADO) And _
            gobjMain.objCondicion.EstadoBool(ESTADO_DESPACHADO) Then
            cond = cond & " gn.Estado IN (" & ESTADO_NOAPROBADO & "," & ESTADO_DESPACHADO & ")"
       ElseIf gobjMain.objCondicion.EstadoBool(ESTADO_NOAPROBADO) Then
            cond = cond & " gn.Estado = " & ESTADO_NOAPROBADO
       ElseIf gobjMain.objCondicion.EstadoBool(ESTADO_APROBADO) Then
            cond = cond & " gn.Estado = " & ESTADO_APROBADO
       ElseIf gobjMain.objCondicion.EstadoBool(ESTADO_DESPACHADO) Then
            cond = cond & " gn.Estado = " & ESTADO_DESPACHADO
       End If
    'Condición de FechaVenci    (Necesario)             '*** MAKOTO 10/dic/00 Modificado
    cond = cond & " AND (vw.FechaVenci <= " & _
                    FechaYMD(f, gobjMain.TipoDB) & " )"
    'Condición de CodMoneda     (Necesario)
    If Len(cond) > 0 Then cond = cond & " AND "
    cond = cond & "(vw.CodMoneda='" & Me.Empresa.GNOpcion.CodMoneda(numMoneda) & "')"
    'Condición de CodProvCli    (Opcional)
    If Len(codPC) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vw.CodProvCli='" & codPC & "')"
    End If
    'Condición de CodForma    (Opcional)
    If Len(codF) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vw.CodForma='" & codF & "')"
    End If
    'Condición de Cod. Grupo1 de prov/cliente (Opcional)
    If Len(codg1) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vw.CodGrupo1='" & codg1 & "')"
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE (" & cond & ") AND gn.bandcierre = 0 "
    sql = sql & " ORDER BY vw.CodProvCli,vw.FechaVenci"
    Set rs = Me.Empresa.OpenRecordset(sql)
    Set PorCobrarPagar = rs
    Set rs = Nothing
    Set objCond = Nothing
End Function

Public Sub cambiarEstadoPorCobrar(TransIdFuente As Long)
     If mcolTransIDsPorPagar Is Nothing Then Set mcolTransIDsPorPagar = New Collection
        mcolTransIDsPorPagar.Add item:=TransIdFuente
End Sub

'AUC 06/12/06
Private Sub CambiaEstadoDeFuentePorCobrarPagar()
    Dim tid As Variant, sql As String
    If mcolTransIDsPorPagar Is Nothing Then Exit Sub
    For Each tid In mcolTransIDsPorPagar
        sql = "UPDATE GNComprobante SET bandCierre= 1  WHERE TransID=" & tid
        Me.Empresa.Execute sql, True
    Next tid
    LimpiaColeccion mcolTransIDsPorPagar
End Sub

'AUC Se utiliza para la impresion totalizada
Public Sub RemoveIVKardexImprimir(ByVal ix As Long, Optional obj As IVKardex)
   'Cuando SoloVer está establecido a True, genera error
    If mcolIVKardex Is Nothing Then RecuperaIVKardex
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolIVKardex.Count
            If mcolIVKardex.item(ix) Is obj Then
                mcolIVKardex.Remove ix
                Exit For
            End If
        Next ix
        Debug.Assert True   'No se puede dar
    Else
        mcolIVKardex.Remove ix
    End If
    mbooModificado = True
End Sub

Public Function Semidevi() As Boolean
Dim bandSemi As Boolean
Dim i As Long
Dim Fuente As GNComprobante
Set Fuente = Empresa.RecuperaGNComprobante(Me.IdTransFuente)
If Not Fuente Is Nothing Then
    For i = 1 To Me.CountIVKardex
        If Abs(Fuente.IVKardex(i).Cantidad) <> Abs(Me.IVKardex(i).Cantidad) Then
                bandSemi = True
        End If
    Next
End If
Semidevi = bandSemi
Set Fuente = Nothing
End Function


'--------------- Manejo de coleccion de TSDetalleEfectivo
Public Function AddTSDetalleEfectivo() As Long
    Dim nuevo As TSDetalleEfectivo
    
    'Cuando SoloVer está establecido a True, genera error
    If mcolTSDetalleEfectivo Is Nothing Then RecuperaTSDetalleEfectivo
    
    Set nuevo = New TSDetalleEfectivo
    Set nuevo.GNComprobante = Me
    
    
    mcolTSDetalleEfectivo.Add nuevo
    AddTSDetalleEfectivo = mcolTSDetalleEfectivo.Count    'Devuelve el indice de nuevo elemento
    Set nuevo = Nothing
    mbooModificado = True
End Function

Public Sub RemoveTSDetalleEfectivo(ByVal ix As Long, Optional obj As TSDetalleEfectivo)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemoveTSDetalleEfectivo", MSGERR_SOLOVER
    If mcolTSDetalleEfectivo Is Nothing Then RecuperaTSDetalleEfectivo
    
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolTSDetalleEfectivo.Count
            If mcolTSDetalleEfectivo.item(ix) Is obj Then
                mcolTSDetalleEfectivo.Remove ix
                Exit For
            End If
        Next ix
    Else
        mcolTSDetalleEfectivo.Remove ix
    End If
    
    mbooModificado = True
End Sub

'Elimina todos los detalles de TSDetalleEfectivo
Public Sub BorrarTSDetalleEfectivo()
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BorrarTSDetalleEfectivo", MSGERR_SOLOVER
    If mcolTSDetalleEfectivo Is Nothing Then Set mcolTSDetalleEfectivo = New Collection
    
    With mcolTSDetalleEfectivo
        Do While .Count > 0
            .Remove .Count
        Loop
    End With
    mbooModificado = True
End Sub

Public Property Get CountTSDetalleEfectivo() As Long
    If mcolTSDetalleEfectivo Is Nothing Then RecuperaTSDetalleEfectivo
    CountTSDetalleEfectivo = mcolTSDetalleEfectivo.Count
End Property

Public Property Get TSDetalleEfectivo(ix As Long) As TSDetalleEfectivo
    If mcolTSDetalleEfectivo Is Nothing Then RecuperaTSDetalleEfectivo
    Set TSDetalleEfectivo = mcolTSDetalleEfectivo.item(ix)
End Property


Private Sub RecuperaTSDetalleEfectivo()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean

    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolTSDetalleEfectivo Is Nothing Then Set mcolTSDetalleEfectivo = New Collection
    
    'Recupera los registros de TSDetalleEfectivo
    sql = "SELECT tskc.*" & _
          "FROM TSDetalleEfectivo tskc " & _
                " "
    sql = sql & "WHERE TransId=" & mProps.transid & " ORDER BY Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddTSDetalleEfectivo
                TSDetalleEfectivo(i).Recuperar rs
            End If
            .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub


'--------------- Manejo de coleccion de TSDetalleCheque
Public Function AddTSDetalleCheque() As Long
    Dim nuevo As TSDetalleCheque
    
    'Cuando SoloVer está establecido a True, genera error
    If mcolTSDetalleCheque Is Nothing Then RecuperaTSDetalleCheque
    
    Set nuevo = New TSDetalleCheque
    Set nuevo.GNComprobante = Me
   
    mcolTSDetalleCheque.Add nuevo
    AddTSDetalleCheque = mcolTSDetalleCheque.Count    'Devuelve el indice de nuevo elemento
    Set nuevo = Nothing
    mbooModificado = True
End Function

Public Sub RemoveTSDetalleCheque(ByVal ix As Long, Optional obj As TSDetalleCheque)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemoveTSDetalleCheque", MSGERR_SOLOVER
    If mcolTSDetalleCheque Is Nothing Then RecuperaTSDetalleCheque
    
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolTSDetalleCheque.Count
            If mcolTSDetalleCheque.item(ix) Is obj Then
                mcolTSDetalleCheque.Remove ix
                Exit For
            End If
        Next ix
    Else
        mcolTSDetalleCheque.Remove ix
    End If
    
    mbooModificado = True
End Sub

'Elimina todos los detalles de TSDetalleCheque
Public Sub BorrarTSDetalleCheque()
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BorrarTSDetalleCheque", MSGERR_SOLOVER
    If mcolTSDetalleCheque Is Nothing Then Set mcolTSDetalleCheque = New Collection
    
    With mcolTSDetalleCheque
        Do While .Count > 0
            .Remove .Count
        Loop
    End With
    mbooModificado = True
End Sub

Public Property Get CountTSDetalleCheque() As Long
    If mcolTSDetalleCheque Is Nothing Then RecuperaTSDetalleCheque
    CountTSDetalleCheque = mcolTSDetalleCheque.Count
End Property

Public Property Get TSDetalleCheque(ix As Long) As TSDetalleCheque
    If mcolTSDetalleCheque Is Nothing Then RecuperaTSDetalleCheque
    Set TSDetalleCheque = mcolTSDetalleCheque.item(ix)
End Property


Private Sub RecuperaTSDetalleCheque()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean

    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolTSDetalleCheque Is Nothing Then Set mcolTSDetalleCheque = New Collection
    
    'Recupera los registros de TSDetalleCheque
    sql = "SELECT tskc.*, ivb.codbanco " & _
          "FROM TSDetalleCheque tskc INNER JOIN IvBanco ivb on tskc.idBanco = ivb.idBanco" & _
                " "
    sql = sql & "WHERE TransId=" & mProps.transid & " ORDER BY Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddTSDetalleCheque
                TSDetalleCheque(i).Recuperar rs
            End If
            .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub


'--------------- Manejo de coleccion de TSDetalleTarjeta
Public Function AddTSDetalleTarjeta() As Long
    Dim nuevo As TSDetalleTarjeta
    
    'Cuando SoloVer está establecido a True, genera error
    If mcolTSDetalleTarjeta Is Nothing Then RecuperaTSDetalleTarjeta
    
    Set nuevo = New TSDetalleTarjeta
    Set nuevo.GNComprobante = Me
   
    mcolTSDetalleTarjeta.Add nuevo
    AddTSDetalleTarjeta = mcolTSDetalleTarjeta.Count    'Devuelve el indice de nuevo elemento
    Set nuevo = Nothing
    mbooModificado = True
End Function

Public Sub RemoveTSDetalleTarjeta(ByVal ix As Long, Optional obj As TSDetalleTarjeta)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemoveTSDetalleTarjeta", MSGERR_SOLOVER
    If mcolTSDetalleTarjeta Is Nothing Then RecuperaTSDetalleTarjeta
    
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolTSDetalleTarjeta.Count
            If mcolTSDetalleTarjeta.item(ix) Is obj Then
                mcolTSDetalleTarjeta.Remove ix
                Exit For
            End If
        Next ix
    Else
        mcolTSDetalleTarjeta.Remove ix
    End If
    
    mbooModificado = True
End Sub

'Elimina todos los detalles de TSDetalleTarjeta
Public Sub BorrarTSDetalleTarjeta()
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BorrarTSDetalleTarjeta", MSGERR_SOLOVER
    If mcolTSDetalleTarjeta Is Nothing Then Set mcolTSDetalleTarjeta = New Collection
    
    With mcolTSDetalleTarjeta
        Do While .Count > 0
            .Remove .Count
        Loop
    End With
    mbooModificado = True
End Sub

Public Property Get CountTSDetalleTarjeta() As Long
    If mcolTSDetalleTarjeta Is Nothing Then RecuperaTSDetalleTarjeta
    CountTSDetalleTarjeta = mcolTSDetalleTarjeta.Count
End Property

Public Property Get TSDetalleTarjeta(ix As Long) As TSDetalleTarjeta
    If mcolTSDetalleTarjeta Is Nothing Then RecuperaTSDetalleTarjeta
    Set TSDetalleTarjeta = mcolTSDetalleTarjeta.item(ix)
End Property


Private Sub RecuperaTSDetalleTarjeta()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean

    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolTSDetalleTarjeta Is Nothing Then Set mcolTSDetalleTarjeta = New Collection
    
    'Recupera los registros de TSDetalleTarjeta
    sql = "SELECT tskc.*, codtarjeta " & _
          "FROM TSDetalleTarjeta tskc inner join IVTarjeta ivt on tskc.idTarjeta = ivt.idtarjeta " & _
                " "
    sql = sql & "WHERE TransId=" & mProps.transid & " ORDER BY tskc.idtarjeta, Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddTSDetalleTarjeta
                TSDetalleTarjeta(i).Recuperar rs
            End If
            .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub

Private Function NoDevuelveTodo(ByVal tid As Long) As Boolean
Dim i As Long
Dim cant As Currency
Dim cantOri As Currency
Dim bandDev As Boolean
On Error GoTo CapturaError
    RecuperaIVKardex
        For i = 1 To Me.CountIVKardex
            If Me.IVKardex(i).Cantidad < 0 Then
                cantOri = Me.IVKardex(i).Cantidad
                cant = Me.Empresa.VerificaDevueltos(Me.transid, Me.IVKardex(i).Orden, Me.IVKardex(i).CodInventario, Date)
                cantOri = cantOri - cant
                If cantOri <> 0 Then
                    bandDev = True
                    Exit For
                End If
            End If
        Next
    NoDevuelveTodo = bandDev
Exit Function
CapturaError:
    MsgBox Err.Description
    Exit Function
End Function


Public Function RecuperaVentasTarjetaxUsuario() As Variant
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean

    
    'Recupera los registros de TSDetalleCheque
    sql = "SELECT"
    sql = sql & " ivt.codtarjeta , NumCheque, p.TitularCta,  "
    sql = sql & " p.Debe As Total, G.TRANSID "
    sql = sql & " FROM GNCOMPROBANTE G"
    sql = sql & " INNER JOIN PCKARDEX P"
    sql = sql & " INNER JOIN ivtarjeta ivt "
    sql = sql & " ON p.idtarjeta=ivt.idtarjeta"
    sql = sql & " ON G.TRANSID=P.TRANSID"
    sql = sql & " Where"
    sql = sql & " G.ESTADO<>3"
    sql = sql & " AND FECHATRANS BETWEEN '" & Me.FechaTrans & "' AND '" & Me.FechaTrans & "'"
    sql = sql & " AND CODUSUARIO='" & Me.codUsuario & "'"
    sql = sql & " AND p.idtarjeta<>0"
    If Me.EsNuevo Then
        sql = sql & " and g.transid not in( select IdTransRef from TSDetalleTarjeta tsd inner join gncomprobante g on tsd.transid=g.transid where g.estado<>3)"
    End If
    sql = sql & " order by ivt.codtarjeta "

    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaVentasTarjetaxUsuario = rs
    Set rs = Nothing
End Function

Public Function RecuperaVentasChequesxUsuario() As Variant
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean

    
    'Recupera los registros de TSDetalleCheque
    sql = "SELECT"
    sql = sql & " ivb.codBanco , NumCheque, p.TitularCta,  "
    sql = sql & " p.Debe As Total, G.TRANSID "
    sql = sql & " FROM GNCOMPROBANTE G"
    sql = sql & " inner join gntrans gt on g.codtrans=gt.codtrans"
    sql = sql & " INNER JOIN PCKARDEX P"
    sql = sql & " inner join tsformacobropago tsf on p.idforma=tsf.idforma"
    sql = sql & " INNER JOIN ivbanco ivb "
    sql = sql & " ON p.idBanco=ivb.idBanco"
    sql = sql & " ON G.TRANSID=P.TRANSID"
    sql = sql & " Where"
    sql = sql & " G.ESTADO<>3"
    sql = sql & " AND FECHATRANS BETWEEN '" & Me.FechaTrans & "' AND '" & Me.FechaTrans & "'"
    sql = sql & " AND CODUSUARIO='" & Me.codUsuario & "'"
    sql = sql & " AND idtarjeta=0"
    sql = sql & " and afectasaldopc=1"
'    If InStr(1, UCase(Me.Empresa.GNOpcion.NombreEmpresa), "ITAL") Then
        sql = sql & " and tsf.codforma='CHR'"
 '   End If
    If Me.EsNuevo Then
        sql = sql & " and g.transid not in( select IdTransRef from TSDetalleCheque tsd inner join gncomprobante g on tsd.transid=g.transid where g.estado<>3)"
    End If
    sql = sql & " order by ivb.codBanco "

    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaVentasChequesxUsuario = rs
    Set rs = Nothing
End Function



Public Sub ActualizaNumeroDepre(ByVal CodInventario As String, positivo As Boolean)
    Dim sql As String, rs As Recordset
    Dim AuxDesc As Integer, SecuencialItem As Long
    
        If positivo Then
            sql = "update afinventario set NumeroDepre=NumeroDepre-1 where codinventario='" & CodInventario & "'"
        Else
            sql = "update afinventario set NumeroDepre=NumeroDepre+1 where codinventario='" & CodInventario & "'"
        End If
        Me.Empresa.Execute sql, True
End Sub

'--------------- Manejo de coleccion de TSDetalleVManuales
Public Function AddTSDetalleVManuales() As Long
    Dim nuevo As TSDetalleVManuales
    
    'Cuando SoloVer está establecido a True, genera error
    If mcolTSDetalleVManuales Is Nothing Then RecuperaTSDetalleVManuales
    
    Set nuevo = New TSDetalleVManuales
    Set nuevo.GNComprobante = Me
   
    mcolTSDetalleVManuales.Add nuevo
    AddTSDetalleVManuales = mcolTSDetalleVManuales.Count    'Devuelve el indice de nuevo elemento
    Set nuevo = Nothing
    mbooModificado = True
End Function

Public Sub RemoveTSDetalleVManuales(ByVal ix As Long, Optional obj As TSDetalleVManuales)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemoveTSDetalleVManuales", MSGERR_SOLOVER
    If mcolTSDetalleVManuales Is Nothing Then RecuperaTSDetalleVManuales
    
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolTSDetalleVManuales.Count
            If mcolTSDetalleVManuales.item(ix) Is obj Then
                mcolTSDetalleVManuales.Remove ix
                Exit For
            End If
        Next ix
    Else
        mcolTSDetalleVManuales.Remove ix
    End If
    
    mbooModificado = True
End Sub

'Elimina todos los detalles de TSDetalleVManuales
Public Sub BorrarTSDetalleVManuales()
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BorrarTSDetalleVManuales", MSGERR_SOLOVER
    If mcolTSDetalleVManuales Is Nothing Then Set mcolTSDetalleVManuales = New Collection
    
    With mcolTSDetalleVManuales
        Do While .Count > 0
            .Remove .Count
        Loop
    End With
    mbooModificado = True
End Sub

Public Property Get CountTSDetalleVManuales() As Long
    If mcolTSDetalleVManuales Is Nothing Then RecuperaTSDetalleVManuales
    CountTSDetalleVManuales = mcolTSDetalleVManuales.Count
End Property

Public Property Get TSDetalleVManuales(ix As Long) As TSDetalleVManuales
    If mcolTSDetalleVManuales Is Nothing Then RecuperaTSDetalleVManuales
    Set TSDetalleVManuales = mcolTSDetalleVManuales.item(ix)
End Property


Private Sub RecuperaTSDetalleVManuales()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean

    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolTSDetalleVManuales Is Nothing Then Set mcolTSDetalleVManuales = New Collection
    
    'Recupera los registros de TSDetalleVManuales
    sql = "SELECT tskc.* "
    sql = sql & " FROM TSDetalleVManuales tskc "
    sql = sql & " WHERE TransId=" & mProps.transid & " ORDER BY Orden"
    

    
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddTSDetalleVManuales
                TSDetalleVManuales(i).Recuperar rs
            End If
            .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub

Public Function RecuperaPagosxUsuario(ByVal Trans As String, fecha As Date) As Variant
    Dim sql As String, rs As Recordset
    sql = " select"
    sql = sql & " 0 as numlim, G.TRANSID, G.CodTrans + ' ' + CONVERT(varchar, NumTrans)    AS Trans,"
    sql = sql & " g.descripcion, pc.nombre, debe as valor"
    sql = sql & " From"
    sql = sql & " GNComprobante g"
    sql = sql & " inner join pcprovcli pc"
    sql = sql & " on ( g.idclienteref=pc.idprovcli or g.idproveedorref=pc.idprovcli )"
    sql = sql & " inner join pckardex pck"
    sql = sql & " on g.transid=pck.transid"
    sql = sql & " Where g.Estado <> 3 "
    sql = sql & " and codusuario='" & Me.codUsuario & "'"
    sql = sql & " and codtrans in (" & Trans & ")"
    sql = sql & " and g.FechaTrans BETWEEN " & FechaYMD(fecha, gobjMain.TipoDB) & " AND " & FechaYMD(fecha, gobjMain.TipoDB) & "  "
    sql = sql & " and debe>0"
    sql = sql & " and g.transid not in( select IdTransRef from tsdetalleegreso tsd inner join gncomprobante g on tsd.transid=g.transid where g.estado<>3)"
    
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    
    Set RecuperaPagosxUsuario = rs
    Set rs = Nothing
End Function

'--------------- Manejo de coleccion de TSDetalleEgreso
Public Function AddTSDetalleEgreso() As Long
    Dim nuevo As TSDetalleEgreso
    
    'Cuando SoloVer está establecido a True, genera error
    If mcolTSDetalleEgreso Is Nothing Then RecuperaTSDetalleEgreso
    
    Set nuevo = New TSDetalleEgreso
    Set nuevo.GNComprobante = Me
   
    mcolTSDetalleEgreso.Add nuevo
    AddTSDetalleEgreso = mcolTSDetalleEgreso.Count    'Devuelve el indice de nuevo elemento
    Set nuevo = Nothing
    mbooModificado = True
End Function

Public Sub RemoveTSDetalleEgreso(ByVal ix As Long, Optional obj As TSDetalleEgreso)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemoveTSDetalleEgreso", MSGERR_SOLOVER
    If mcolTSDetalleEgreso Is Nothing Then RecuperaTSDetalleEgreso
    
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolTSDetalleEgreso.Count
            If mcolTSDetalleEgreso.item(ix) Is obj Then
                mcolTSDetalleEgreso.Remove ix
                Exit For
            End If
        Next ix
    Else
        mcolTSDetalleEgreso.Remove ix
    End If
    
    mbooModificado = True
End Sub

'Elimina todos los detalles de TSDetalleEgreso
Public Sub BorrarTSDetalleEgreso()
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BorrarTSDetalleEgreso", MSGERR_SOLOVER
    If mcolTSDetalleEgreso Is Nothing Then Set mcolTSDetalleEgreso = New Collection
    
    With mcolTSDetalleEgreso
        Do While .Count > 0
            .Remove .Count
        Loop
    End With
    mbooModificado = True
End Sub

Public Property Get CountTSDetalleEgreso() As Long
    If mcolTSDetalleEgreso Is Nothing Then RecuperaTSDetalleEgreso
    CountTSDetalleEgreso = mcolTSDetalleEgreso.Count
End Property

Public Property Get TSDetalleEgreso(ix As Long) As TSDetalleEgreso
    If mcolTSDetalleEgreso Is Nothing Then RecuperaTSDetalleEgreso
    Set TSDetalleEgreso = mcolTSDetalleEgreso.item(ix)
End Property


Private Sub RecuperaTSDetalleEgreso()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean

    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolTSDetalleEgreso Is Nothing Then Set mcolTSDetalleEgreso = New Collection
    
    'Recupera los registros de TSDetalleEgreso
    sql = "SELECT tskc.* "
    sql = sql & " FROM TSDetalleEgreso tskc "
    sql = sql & " WHERE TransId=" & mProps.transid & " ORDER BY Orden"
    

    
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddTSDetalleEgreso
                TSDetalleEgreso(i).Recuperar rs
            End If
            .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub

'--------------- Manejo de coleccion de TSDetalleVCredito
Public Function AddTSDetalleVCredito() As Long
    Dim nuevo As TSDetalleVCredito
    
    'Cuando SoloVer está establecido a True, genera error
    If mcolTSDetalleVCredito Is Nothing Then RecuperaTSDetalleVCredito
    
    Set nuevo = New TSDetalleVCredito
    Set nuevo.GNComprobante = Me
   
    mcolTSDetalleVCredito.Add nuevo
    AddTSDetalleVCredito = mcolTSDetalleVCredito.Count    'Devuelve el indice de nuevo elemento
    Set nuevo = Nothing
    mbooModificado = True
End Function

Public Sub RemoveTSDetalleVCredito(ByVal ix As Long, Optional obj As TSDetalleVCredito)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemoveTSDetalleVCredito", MSGERR_SOLOVER
    If mcolTSDetalleVCredito Is Nothing Then RecuperaTSDetalleVCredito
    
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolTSDetalleVCredito.Count
            If mcolTSDetalleVCredito.item(ix) Is obj Then
                mcolTSDetalleVCredito.Remove ix
                Exit For
            End If
        Next ix
    Else
        mcolTSDetalleVCredito.Remove ix
    End If
    
    mbooModificado = True
End Sub

'Elimina todos los detalles de TSDetalleVCredito
Public Sub BorrarTSDetalleVCredito()
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BorrarTSDetalleVCredito", MSGERR_SOLOVER
    If mcolTSDetalleVCredito Is Nothing Then Set mcolTSDetalleVCredito = New Collection
    
    With mcolTSDetalleVCredito
        Do While .Count > 0
            .Remove .Count
        Loop
    End With
    mbooModificado = True
End Sub

Public Property Get CountTSDetalleVCredito() As Long
    If mcolTSDetalleVCredito Is Nothing Then RecuperaTSDetalleVCredito
    CountTSDetalleVCredito = mcolTSDetalleVCredito.Count
End Property

Public Property Get TSDetalleVCredito(ix As Long) As TSDetalleVCredito
    If mcolTSDetalleVCredito Is Nothing Then RecuperaTSDetalleVCredito
    Set TSDetalleVCredito = mcolTSDetalleVCredito.item(ix)
End Property


Private Sub RecuperaTSDetalleVCredito()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean

    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolTSDetalleVCredito Is Nothing Then Set mcolTSDetalleVCredito = New Collection
    
    'Recupera los registros de TSDetalleVCredito
    sql = "SELECT tskc.* "
    sql = sql & " FROM TSDetalleVCredito tskc "
    sql = sql & " WHERE bandRet = 0 And TransId=" & mProps.transid & " ORDER BY Orden"
    

    
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddTSDetalleVCredito
                TSDetalleVCredito(i).Recuperar rs
            End If
            .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub

Public Function RecuperaVentasCreditoxUsuario(ByVal Trans As String, fecha As Date) As Variant
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean

    
    
    sql = "SELECT"
    sql = sql & " G.TRANSID, G.CodTrans + ' ' + CONVERT(varchar, NumTrans)    AS Trans,"
    sql = sql & " pc.nombre, debe as valor"
    sql = sql & " FROM GNCOMPROBANTE G"
    sql = sql & " inner join gntrans gnt on g.codtrans = gnt.codtrans"
    sql = sql & " inner join pcprovcli pc on  g.idclienteref=pc.idprovcli"
    sql = sql & " INNER JOIN PCKARDEX P"
    sql = sql & " inner join tsformacobropago tsf on"
    sql = sql & " p.IdForma = tsf.IdForma"
    sql = sql & " ON G.TRANSID=P.TRANSID"
    sql = sql & " Where g.Estado <> 3 and g.Estado <> 0"
    sql = sql & " and codusuario='" & Me.codUsuario & "'"
    sql = sql & " and CodForma not in (" & Trans & ")"
    
    If GNTrans.TSUtilizaFechaGrabado Then
        sql = sql & " AND (g.FechaGrabado between '" & Me.FechaTrans & " 00:00:00' AND '" & Me.FechaTrans & " 23:59:59' ) "
    Else
        sql = sql & " and g.FechaTrans BETWEEN " & FechaYMD(fecha, gobjMain.TipoDB) & " AND " & FechaYMD(fecha, gobjMain.TipoDB) & "  "
    End If
    sql = sql & " and debe>0 AND IDASIGNADO=0"
    sql = sql & " and afectasaldopc=1"
    
    sql = sql & " AND p.idtarjeta=0 and modulo='IV' "
    If Me.EsNuevo Then
        sql = sql & " and g.transid not in( select IdTransRef from tsdetallevcredito tsd inner join gncomprobante g on tsd.transid=g.transid where g.estado<>3)"
    End If
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaVentasCreditoxUsuario = rs
    Set rs = Nothing
End Function


Private Sub VerificaPromociones()
    Dim ivPromo As IVPromocion, codPromo As String, i As Integer, j As Long, k As Long
    Dim cond As Variant, BandPromocion As Boolean, Condicion As String
    Dim ValorMinimo As Currency, CampoTotal As String, CantPromo As Integer
    Dim item As IVInventario, ix As Long, NumCondicion As Integer
    Dim rsPromo As Recordset, condp As Variant
    
    ReDim cond(5) As String
    ReDim condp(4) As String
    
    Dim BandPromocionPC As Boolean
    For k = 1 To 5
        cond(k) = ","
    Next k
    For k = 1 To 4
        condp(k) = ","
    Next k

    
    BandPromocion = False
    BandPromocionPC = False
    
    NumCondicion = 0
    codPromo = mProps.objEmpresa.BuscaPromocionesValidas(mProps.FechaTrans, mProps.HoraTrans)
    If Len(codPromo) > 0 Then
        Set ivPromo = mProps.objEmpresa.RecuperaIVPromocion(codPromo)
        If Not ivPromo Is Nothing Then
            'si tiene condiciones por grupos de Invetarios
            
            If ivPromo.NumCondPromocionDetalleIVG > 0 And ivPromo.NumCondPromocionDetallePCG > 0 Then
                For i = 1 To 5
                    If ivPromo.BandTotal(i) Then
                        For j = 1 To ivPromo.NumCondPromocionDetalleIVG
                            cond(ivPromo.IvCondPromocionDetalleIVG(j).NumIVGrupo) = cond(ivPromo.IvCondPromocionDetalleIVG(j).NumIVGrupo) & ivPromo.IvCondPromocionDetalleIVG(j).IDIVGrupo & ","
                        Next j
                    End If
                Next i
                For k = 1 To 5
                    If Len(cond(k)) > 1 Then
                        Condicion = cond(k)
                        If VerificaCumpleCondicion(k, Condicion, ivPromo, CantPromo) Then
                            BandPromocion = True
                        Else
                            BandPromocion = False
                            Exit For
                        End If
                    End If
                Next k
                
                For i = 1 To 4
                    If ivPromo.BandTotal(i) Then
                        For j = 1 To ivPromo.NumCondPromocionDetallePCG
                            condp(ivPromo.IvCondPromocionDetallePCG(j).NumPCGrupo) = condp(ivPromo.IvCondPromocionDetallePCG(j).NumPCGrupo) & ivPromo.IvCondPromocionDetallePCG(j).idPcGrupo & ","
                        Next j
                    End If
                Next i
                
                For k = 1 To 4
                    If Len(condp(k)) > 1 Then
                        Condicion = condp(k)
                        If VerificaCumpleCondicion(k, Condicion, ivPromo, CantPromo) Then
                            BandPromocion = True
                        Else
                            BandPromocion = False
                            Exit For
                        End If
                    End If
                Next k
                
                
                
                
                
            'AGREGA EL ITEM DE PROMOCION
                If BandPromocion Then
                    ix = Me.AddIVKardex
                    Me.IVKardex(ix).CodInventario = ivPromo.RecuperaCondPromocionDetalleP(1).CodInventario
                    Me.IVKardex(ix).Cantidad = CantPromo * ivPromo.RecuperaCondPromocionDetalleP(1).cant * ivPromo.RecuperaCondPromocionItemDup(1).xCuanto
                    Me.IVKardex(ix).CodBodega = Me.IVKardex(1).CodBodega
                    Me.IVKardex(ix).Orden = ix
                    Me.IVKardex(ix).Nota = "PROMOCION"
                End If
                End If
        End If
    End If
    Set item = Nothing
End Sub


Private Function VerificaCumpleCondicion(ByVal i As Integer, cond As String, ivPromo As IVPromocion, Optional ByRef CantPromo As Integer) As Boolean
    Dim k As Long, TOTAL As Currency, item As IVInventario, j As Long, TotalCondicion As Currency, TotalCondicionPeso As Currency, TotalCondicionUSD As Currency
    Dim VerificaCumpleCondicionPC As Boolean, pc As PCProvCli
    VerificaCumpleCondicion = False
    VerificaCumpleCondicionPC = False
    For k = 1 To Me.CountIVKardex
        Set item = mProps.objEmpresa.RecuperaIVInventarioQuick(Me.IVKardex(k).IdInventario)
        If Not item Is Nothing Then
            If InStr(1, cond, "," & item.IdGrupo(i) & ",") > 0 Then
                Select Case ivPromo.NumTotal(i)
                    Case 0
                            TOTAL = TOTAL + Abs(Me.IVKardex(k).Cantidad)
                    Case 1
                            TOTAL = TOTAL + Abs(Me.IVKardex(k).Cantidad)
                    Case 2
                            TOTAL = TOTAL + Abs(Me.IVKardex(k).PrecioRealTotal)
                End Select
                  End If
        End If
    Next k
    'si es totalizado
    If ivPromo.BandTotal(i) Then
        If TOTAL >= ivPromo.ValorTotal(i) Then
            VerificaCumpleCondicion = True
            CantPromo = Int(TOTAL / ivPromo.ValorTotal(i))
        End If
    Else
        For j = 1 To ivPromo.NumCondPromocionDetalleIVG
            If i = ivPromo.IvCondPromocionDetalleIVG(j).NumIVGrupo Then
                    TotalCondicion = TotalCondicion + ivPromo.IvCondPromocionDetalleIVG(j).xCuanto
                    TotalCondicionPeso = TotalCondicionPeso + ivPromo.IvCondPromocionDetalleIVG(j).xCuantoPeso
                    TotalCondicionUSD = TotalCondicionUSD + ivPromo.IvCondPromocionDetalleIVG(j).xCuantoUSD
            End If
        Next j
        If TOTAL >= TotalCondicion And TOTAL >= TotalCondicionPeso And TOTAL >= TotalCondicionUSD Then
            VerificaCumpleCondicion = True
        End If
    
    
        For j = 1 To ivPromo.NumCondPromocionDetallePCG
            If i = ivPromo.IvCondPromocionDetallePCG(j).NumPCGrupo Then
                If Len(Me.CodClienteRef) <> 0 Then
                    Set pc = Me.Empresa.RecuperaPCProvCli(Me.CodClienteRef)
                    If Not pc Is Nothing Then
                        Select Case i
                            Case 1:
                                If InStr(1, cond, "," & pc.IdGrupo1 & ",") > 0 Then
                                    VerificaCumpleCondicionPC = True
                                    Exit For
                                End If
                            Case 2:
                                If InStr(1, cond, "," & pc.IdGrupo2 & ",") > 0 Then
                                    VerificaCumpleCondicionPC = True
                                    Exit For
                                End If
                            Case 3:
                                If InStr(1, cond, "," & pc.IdGrupo3 & ",") > 0 Then
                                    VerificaCumpleCondicionPC = True
                                    Exit For
                                End If
                            Case 4:
                                If InStr(1, cond, "," & pc.IdGrupo4 & ",") > 0 Then
                                    VerificaCumpleCondicionPC = True
                                    Exit For
                                End If
                        
                        End Select
                    End If
                End If
            End If
        Next j
    
    If VerificaCumpleCondicion Then
        VerificaCumpleCondicion = VerificaCumpleCondicionPC
    End If
    
    
    End If
    Set item = Nothing
    Set pc = Nothing
End Function

Public Function VerificaRegTC(ByVal numCheque As String) As Boolean
    Dim rs As Recordset
    Dim sql As String
    sql = "SELECT t.* FROM  TSDETALLETARJETA T INNER JOIN GNComprobante g on g.transid = t.transid "
    sql = sql & " WHERE t.FECHAGRABADO BETWEEN '" & Me.FechaTrans & "' AND '" & Me.FechaTrans & "'"
    sql = sql & " AND g.CODUSUARIO='" & Me.codUsuario & "'"
    sql = sql & " AND t.numdoc='" & numCheque & "'"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        VerificaRegTC = True
    End If
End Function
Public Function VerificaRegCH(ByVal numCheque As String) As Boolean
    Dim rs As Recordset
    Dim sql As String
    sql = "SELECT t.* FROM  TSDetalleCheque T INNER JOIN GNComprobante g on g.transid = t.transid "
    sql = sql & " WHERE t.FECHAGRABADO BETWEEN '" & Me.FechaTrans & "' AND '" & Me.FechaTrans & "'"
    sql = sql & " AND g.CODUSUARIO='" & Me.codUsuario & "'"
    sql = sql & " AND t.numdoc='" & numCheque & "'"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        VerificaRegCH = True
    End If
End Function
    
'AUC verifica si existen items de desperdicion en la transaccion
Public Function ExisteItemsConDesperdicio() As Boolean
Dim mbooDesperdicio As Boolean
Dim i As Long
Dim item As IVInventario
For i = 1 To Me.CountIVKardex
    Set item = Me.Empresa.RecuperaIVInventarioQuick(Me.IVKardex(i).CodInventario)
    If item.PorDesperdicio > 0 Then
        mbooDesperdicio = True
    End If
    Set item = Nothing
Next
    ExisteItemsConDesperdicio = mbooDesperdicio
End Function

Public Function RecuperaCobrosxUsuario(ByVal Trans As String, fecha As Date) As Variant
    Dim sql As String, rs As Recordset
    sql = " select"
    sql = sql & " G.TRANSID, G.CodTrans + ' ' + CONVERT(varchar, NumTrans)    AS Trans,"
    sql = sql & " pc.nombre, Haber as valor"
    sql = sql & " From"
    sql = sql & " GNComprobante g"
    sql = sql & " inner join pcprovcli pc"
    sql = sql & " on ( g.idclienteref=pc.idprovcli or g.idproveedorref=pc.idprovcli )"
    sql = sql & " inner join pckardex pck"
    sql = sql & " on g.transid=pck.transid"
    sql = sql & " Where g.Estado <> 3 and g.Estado <> 0"
    sql = sql & " and codusuario='" & Me.codUsuario & "'"
    sql = sql & " and codtrans in (" & Trans & ")"
    sql = sql & " and g.FechaTrans BETWEEN " & FechaYMD(fecha, gobjMain.TipoDB) & " AND " & FechaYMD(fecha, gobjMain.TipoDB) & "  "
    sql = sql & " and HABER>0"
    
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    
    Set RecuperaCobrosxUsuario = rs
    Set rs = Nothing
End Function


'--------------- Manejo de coleccion de TSDetalleIngreso
Public Function AddTSDetalleIngreso() As Long
    Dim nuevo As TSDetalleIngreso
    
    'Cuando SoloVer está establecido a True, genera error
    If mcolTSDetalleIngreso Is Nothing Then RecuperaTSDetalleIngreso
    
    Set nuevo = New TSDetalleIngreso
    Set nuevo.GNComprobante = Me
   
    mcolTSDetalleIngreso.Add nuevo
    AddTSDetalleIngreso = mcolTSDetalleIngreso.Count    'Devuelve el indice de nuevo elemento
    Set nuevo = Nothing
    mbooModificado = True
End Function

Public Sub RemoveTSDetalleIngreso(ByVal ix As Long, Optional obj As TSDetalleIngreso)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemoveTSDetalleIngreso", MSGERR_SOLOVER
    If mcolTSDetalleIngreso Is Nothing Then RecuperaTSDetalleIngreso
    
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolTSDetalleIngreso.Count
            If mcolTSDetalleIngreso.item(ix) Is obj Then
                mcolTSDetalleIngreso.Remove ix
                Exit For
            End If
        Next ix
    Else
        mcolTSDetalleIngreso.Remove ix
    End If
    
    mbooModificado = True
End Sub

'Elimina todos los detalles de TSDetalleIngreso
Public Sub BorrarTSDetalleIngreso()
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BorrarTSDetalleIngreso", MSGERR_SOLOVER
    If mcolTSDetalleIngreso Is Nothing Then Set mcolTSDetalleIngreso = New Collection
    
    With mcolTSDetalleIngreso
        Do While .Count > 0
            .Remove .Count
        Loop
    End With
    mbooModificado = True
End Sub

Public Property Get CountTSDetalleIngreso() As Long
    If mcolTSDetalleIngreso Is Nothing Then RecuperaTSDetalleIngreso
    CountTSDetalleIngreso = mcolTSDetalleIngreso.Count
End Property

Public Property Get TSDetalleIngreso(ix As Long) As TSDetalleIngreso
    If mcolTSDetalleIngreso Is Nothing Then RecuperaTSDetalleIngreso
    Set TSDetalleIngreso = mcolTSDetalleIngreso.item(ix)
End Property


Private Sub RecuperaTSDetalleIngreso()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean

    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolTSDetalleIngreso Is Nothing Then Set mcolTSDetalleIngreso = New Collection
    
    'Recupera los registros de TSDetalleIngreso
    sql = "SELECT tskc.* "
    sql = sql & " FROM TSDetalleIngreso tskc "
    sql = sql & " WHERE TransId=" & mProps.transid & " ORDER BY Orden"
    

    
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddTSDetalleIngreso
                TSDetalleIngreso(i).Recuperar rs
            End If
            .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub


Public Property Let IdDescuento(ByVal value As Long)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.IdDescuento", MSGERR_SOLOVER
    
    mProps.IdDescuento = value
    mbooModificado = True
End Property

Public Property Get IdDescuento() As Long
    IdDescuento = mProps.IdDescuento
End Property

Public Property Let CodDescuento(ByVal value As String)
    Dim sql As String, rs As Recordset
    
    'Cuando cambia el valor
    If value <> mProps.CodDescuento Then
        If Len(value) > 0 Then
            'Actualiza IdDescuento también
            sql = "SELECT IdDescuento FROM IVDescuento WHERE CodDescuento='" & value & "'"
            Set rs = mProps.objEmpresa.OpenRecordset(sql)
            If rs.EOF Then
                Err.Raise ERR_NOHAYCODIGO, "GNComprobante.CodDescuento", MSGERR_NOHAYCODIGO
                Exit Property
            Else
                IdDescuento = rs!IdDescuento
            End If
            rs.Close
            Set rs = Nothing
        Else
            IdDescuento = 0
        End If
        
        mProps.CodDescuento = value
        SetModificado
    End If
    Set rs = Nothing
End Property

Public Property Get CodDescuento() As String
    CodDescuento = Trim$(mProps.CodDescuento)
End Property

Public Property Let IDForma(ByVal value As Long)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.IdForma", MSGERR_SOLOVER
    
    mProps.IDForma = value
    mbooModificado = True
End Property

Public Property Get IDForma() As Long
    IDForma = mProps.IDForma
End Property

Public Property Let CodForma(ByVal value As String)
    Dim sql As String, rs As Recordset
    
    'Cuando cambia el valor
    If value <> mProps.CodForma Then
        If Len(value) > 0 Then
            'Actualiza IdForma también
            sql = "SELECT IdForma FROM TSFormaCobroPago WHERE CodForma='" & value & "'"
            Set rs = mProps.objEmpresa.OpenRecordset(sql)
            If rs.EOF Then
                Err.Raise ERR_NOHAYCODIGO, "GNComprobante.CodForma", MSGERR_NOHAYCODIGO
                Exit Property
            Else
                IDForma = rs!IDForma
            End If
            rs.Close
            Set rs = Nothing
        Else
            IDForma = 0
        End If
        
        mProps.CodForma = value
        SetModificado
        mbooModificado = True
    End If
    Set rs = Nothing
End Property

Public Property Get CodForma() As String
    CodForma = Trim$(mProps.CodForma)
End Property

Public Function GetRows(ByVal obj As Object) As Variant
    Dim v As Variant
    
    If Not obj.EOF Then
#If DAOLIB Then
        obj.MoveLast
        obj.MoveFirst
        v = obj.GetRows(obj.RecordCount)
#Else
        v = obj.GetRows
#End If
    End If
    GetRows = v
End Function

'jeaa 16/07/2007
Public Property Let NumSerieEstaSRI(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.NumSerieEstaSRI", MSGERR_SOLOVER
    mProps.NumSerieEstaSRI = value
    mbooModificado = True
End Property

Public Property Get NumSerieEstaSRI() As String
    NumSerieEstaSRI = mProps.NumSerieEstaSRI
End Property

'jeaa 16/07/2007
Public Property Let NumSeriePuntoSRI(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.NumSeriePuntoSRI", MSGERR_SOLOVER
    mProps.NumSeriePuntoSRI = value
    mbooModificado = True
End Property

Public Property Get NumSeriePuntoSRI() As String
    NumSeriePuntoSRI = mProps.NumSeriePuntoSRI
End Property

Public Function ListaTransFuenteConsFis( _
                    ByVal CodCentro As String) As Recordset
    Dim sql As String, s As String, v As Variant, i As Long, CodT As String
    Dim cond As String, rs As Recordset, cond1 As String
    If Len(GNTrans.CodTransFuente) > 0 Then
        'Puede tener varios codigos de transaccion de fuente    ejm. (FC);(OF)
        v = Split(GNTrans.CodTransFuente, ";")
        For i = 0 To UBound(v)
            If Len(s) > 0 Then s = s & ","
            CodT = v(i)
            CodT = Left$(CodT, Len(CodT) - 1)       'Quita el signo ')'
            CodT = Right$(CodT, Len(CodT) - 1)      'Quita el signo '('
            s = s & "'" & CodT & "'"
        Next i
    Else
        Err.Raise ERR_INVALIDO, "GNComprobante.ListaTransFuente", _
                    "No está definida ningúna transacción de fuente para ésta transacción."
    End If
    '*** MAKOTO 06/mar/01 Agregado 'Nombre'
    'cambiado por Oliver 27/08/2003
    sql = "SELECT"
    If gobjMain.objCondicion.TopN > 0 Then
        sql = sql & " TOP " & gobjMain.objCondicion.TopN
    End If
    '*** MAKOTO 05/feb/01 Mod. Aumentado 'NumDocRef' y 'Nombre'
    sql = sql & " gc.TransID, gc.FechaTrans, gc.CodTrans, gc.NumTrans, "
    sql = sql & " gc.NumdocRef, gc.Nombre, gc.Descripcion, "
    sql = sql & " cc.idCentro, cc.CodCentro, cc.Descripcion AS DescCentro, gnv.CodVehiculo, gc.Estado "
    If Me.GNTrans.CodPantalla = "IVGNG" Then
        sql = sql & " ,gc.Estado1,gc.Estado2 "
    End If
    'sql = sql & " ,ivb.descripcion "
        sql = sql & "FROM GNCentroCosto cc LEFT JOIN  GNVehiculo gnv   ON cc.IdVehiculo = gnv.IdVehiculo RIGHT JOIN "
        sql = sql & "  GNComprobante gc "
        'sql = sql & LEFT JOIN IVKARDEX IVK ON IVK.TRANSID = GC.TRANSID  "
        'sql = sql & " LEFT JOIN IVBODEGA IVB ON  IVB.IDBODEGA = IVK.IDBODEGA "
        sql = sql & IIf(Len(gobjCond.CodPC1) > 0, " Inner join PcProvCli pc ON (gc.IdProveedorRef = pc.IDProvCli  OR gc.IdClienteRef = pc.IDProvCli) ", " ")
        sql = sql & " ON cc.IdCentro = gc.IdCentro "
        If Len(cond) > 0 Then cond = cond & " AND "
       cond = cond & " gc.Estado IN ("
       If gobjMain.objCondicion.EstadoBool(ESTADO_NOAPROBADO) Then
            cond = cond & ESTADO_NOAPROBADO & ","
       End If
       If gobjMain.objCondicion.EstadoBool(ESTADO_APROBADO) Then
            cond = cond & ESTADO_APROBADO & ","
       End If
        If gobjMain.objCondicion.EstadoBool(ESTADO_DESPACHADO) Then
            cond = cond & ESTADO_DESPACHADO & ","
       End If
        If gobjMain.objCondicion.EstadoBool(ESTADO_SEMDESPACHADO) Then
            cond = cond & ESTADO_SEMDESPACHADO & ","
       End If
    cond = Mid$(cond, 1, Len(cond) - 1)
    cond = cond & ")"
      'auc 26/10/07
        If Me.GNTrans.VerFacturados And Me.GNTrans.CodPantalla = "IVGNG" Then
                 If Len(cond) > 0 Then cond = cond & " AND "
                 cond = cond & " gc.Estado1 IN ("
             If gobjMain.objCondicion.Estado1Bool(ESTADO_FACTURADO) Then
                 cond = cond & ESTADO_FACTURADO & ","
            End If
            If gobjMain.objCondicion.Estado1Bool(ESTADO_NOFACTURADO) Then
                 cond = cond & ESTADO_NOFACTURADO & ","
            End If
                 cond = Mid$(cond, 1, Len(cond) - 1)
                 cond = cond & ")"
          ElseIf Me.GNTrans.VerComprados And Me.GNTrans.CodPantalla = "IVGNG" Then
                 If Len(cond) > 0 Then cond = cond & " AND "
                 cond = cond & " gc.Estado2 IN ("
            If gobjMain.objCondicion.Estado2Bool(ESTADO_COMPRAS) Then
                 cond = cond & ESTADO_COMPRAS & ","
            End If
            If gobjMain.objCondicion.Estado2Bool(ESTADO_NOCOMPRAS) Then
                 cond = cond & ESTADO_NOCOMPRAS & ","
            End If
            cond = Mid$(cond, 1, Len(cond) - 1)
                 cond = cond & ")"
        End If
       'hasta aqui
    ' Condicion de Busqueda de Fecha
   If Len(cond) > 0 Then cond = cond & " AND "
    cond = cond & " (gc.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, gobjMain.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, gobjMain.TipoDB) & " ) "
    'Condición de CodProvCli    (Opcional)
    If Len(gobjCond.CodPC1) > 0 Then
       If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(PC.CodProvCli='" & gobjCond.CodPC1 & "')"
   End If
    If Len(s) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gc.CodTrans IN (" & s & ")"
    End If
    If Len(CodCentro) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " cc.CodCentro='" & CodCentro & "'"
    End If
    If gobjCond.NumTrans1 <> 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gc.Numtrans= " & gobjCond.NumTrans1
    End If
    If gobjCond.NumTrans2 <> 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gc.numdocref= " & gobjCond.NumTrans2
    End If
    'Condición de CodProvCli    (Opcional)
    If Len(gobjCond.CodVehiculo) > 0 Then
       If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(gnv.CodVehiculo='" & gobjCond.CodVehiculo & "')"
   End If
    'JEAA 01/06/2007
    If GNTrans.ImportacionUnicaTrans Then
        cond = cond & " AND GC.TRANSID NOT IN"
        cond = cond & " (SELECT IdTransFuente"
        cond = cond & " FROM GNCentroCosto cc"
        cond = cond & " LEFT JOIN  GNVehiculo gnv   ON cc.IdVehiculo = gnv.IdVehiculo"
        cond = cond & " RIGHT JOIN  GNComprobante gc   ON cc.IdCentro = gc.IdCentro"
       cond = cond & " where gc.Estado <> 3 "
        cond = cond & " AND (gc.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, gobjMain.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, gobjMain.TipoDB) & " ) "
        cond = cond & " AND  gc.CodTrans IN ('" & GNTrans.CodTrans & "')"
        cond = cond & " AND IdTransFuente<>0 )"
        cond = cond & " and gc.transid not in( select idfuente from GNTransIdFuente g inner join gncomprobante gc on gc.transid=g.transid where gc.estado<>3 )"
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
'        If Len(gobjCond.CodBodega1) > 0 Then
'           cond = cond & " AND IVB.CODBODEGA = '" & gobjCond.CodBodega1 & "'"
'       End If
'     If Len(cond) > 0 Then sql = sql & " WHERE " & cond
     sql = sql & " Group by gc.TransID, gc.FechaTrans, gc.horatrans, "
     sql = sql & " gc.CodTrans, gc.NumTrans, gc.NumdocRef, gc.Nombre, gc.Descripcion,"
     sql = sql & " cc.idCentro, cc.CodCentro, cc.Descripcion, gc.Estado, gnv.CodVehiculo "
     'sql = sql & " ,ivb.descripcion"
    If Me.GNTrans.CodPantalla = "IVGNG" Then
            sql = sql & " ,gc.Estado1,gc.Estado2 "
    End If
    sql = sql & " ORDER BY gc.FechaTrans Desc, gc.horatrans desc  ,gc.CodTrans,gc.NumTrans"
   Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set ListaTransFuenteConsFis = rs
    Set rs = Nothing
End Function

Public Sub ImportaDatosConsFisica( _
                ByVal TransIDs As String, _
                ByVal Incremental As Boolean)
    Dim Fuente As GNComprobante, i As Long, sql As String, rs As Recordset
    Dim v As Variant, tid As Long, aux_inc As Boolean
    Dim desc As String
    If Len(TransIDs) = 0 Then Exit Sub
    'Prepara una colección para almacenar TransIDs de fuente,
    ' para cuando graba la transacción cambiar de estado a Despachado
    If mcolTransIDs Is Nothing Then Set mcolTransIDs = New Collection
    'Separa los TransIDs en un vector
    v = Split(TransIDs, ",")
    aux_inc = Incremental
    'Si la transacción está configurada que importa solo desde transacciones Apropadas
    If Me.GNTrans.ImportaSoloAprobado Then
        sql = "SELECT CodTrans, NumTrans FROM GNComprobante " & _
              "WHERE (Not Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & ")) " & _
                    " AND (TransID IN (" & TransIDs & ")) "
        Set rs = Me.Empresa.OpenRecordset(sql)
        If Not rs.EOF Then
            sql = MSGERR_NOIMPORTA & vbCr & vbCr
            Do Until rs.EOF
                sql = sql & rs.Fields("CodTrans") & " " & rs.Fields("NumTrans") & vbCr
                rs.MoveNext
            Loop
            Err.Raise ERR_NOIMPORTA, "GNComprobante.ImportaDatos", sql
       End If
        rs.Close
        Set rs = Nothing
    End If
    desc = " Trans. Fuente: "
    'Repite para todas las transacciones de fuente
    For i = 0 To UBound(v, 1)
        tid = val(v(i))             'Convierte en numérico
        'Desde la segunda trans. hay que incrementar siempre
        If i > 0 Then aux_inc = True
        'Recupera la transaccioón de fuente
        Set Fuente = Empresa.RecuperaGNComprobante(tid)
        If Fuente Is Nothing Then
            Err.Raise ERR_NOHAYCODIGO, "GNComprobante.ImportaDatos", _
                        "No se puede recuperar la transacción de fuente."
        End If
        'Si está ImportaSoloAprobado=True y el origen no está 'aprobado' ni 'despachado'
        If GNTrans.ImportaSoloAprobado And _
            Not (Fuente.Estado = ESTADO_APROBADO Or Fuente.Estado = ESTADO_DESPACHADO Or Fuente.Estado = ESTADO_SEMDESPACHADO) Then
            Err.Raise ERR_NOIMPORTA, "GNComprobante.ImportaDatos", MSGERR_NOIMPORTA
        End If
        'Copia los datos de cabecera
        If Len(Me.idCentros) = 0 Then
            CodCentro = Fuente.CodCentro
       End If
'        CodProveedorRef = fuente.CodProveedorRef
'        CodClienteRef = fuente.CodClienteRef
'        CodVendedor = fuente.CodVendedor
'        NumDocRef = fuente.NumDocRef
'        CodGaranteRef = fuente.CodGaranteRef
'        CodObra = fuente.CodObra
'        CodZona = fuente.CodZona
        'jeaa 04-04-2005 aumentado para saber de donde importo
        If UBound(v, 1) = 0 Then
'            desc = Descripcion = Mid$(mProps.Descripcion & " Trans. Fuente: " & fuente.CodTrans & " No. " & fuente.NumTrans & " / " & fuente.Descripcion, 1, 120)         '*** MAKOTO 11/jul/2000
            If Len(desc & " " & Fuente.CodTrans & " No. " & Fuente.NumTrans & " / ") > 120 Then
                desc = desc & " " & Fuente.CodTrans & " No. " & Fuente.NumTrans & " / " & Mid$(Fuente.Descripcion, 1, Len(Fuente.Descripcion) - Len(Descripcion) - 20 - Len(Fuente.CodTrans))
            Else
                desc = desc & " " & Fuente.CodTrans & " No. " & Fuente.NumTrans & " / " & Left$(Fuente.Descripcion, 120 - (Len(desc) + 5))
            End If
        Else
'            Descripcion = Mid$(mProps.Descripcion & " Trans. Fuente: " & fuente.CodTrans & " No. " & fuente.NumTrans & " / " & fuente.Descripcion, 1, 120)          '*** MAKOTO 11/jul/2000
            If Len(Me.idCentros) = 0 Then
                desc = desc & Fuente.CodTrans & "-" & Fuente.NumTrans & " / "
            Else
                If InStr(1, desc, Fuente.CodCentro) = 0 Then
                    desc = desc & Fuente.CodCentro & " / "
                End If
            End If
        End If
'        If Len(Descripcion) > 120 Then Descripcion = Mid$(Descripcion, 1, 120)
        CodResponsable = Fuente.CodResponsable  '*** MAKOTO 16/ago/2000
        Nombre = Fuente.Nombre                  '*** MAKOTO 06/feb/01 Agregado
        'Si requiere importar TSKardex
'        If GNTrans.ImportaTSK Then
'            ImportaTSKardex fuente
'        End If
        'Si requiere importar TSKardexRet       '*** MAKOTO 07/feb/01 Agregado
'        If GNTrans.ImportaTSKRet Then
'            ImportaTSKardexRet fuente
'        End If
        'Si requiere importar IVKardex
       'If GNTrans.ImportaIVK Then
            ImportaIVKardex Fuente, False, aux_inc
       ' End If
        'Si requiere importar IVKardex pero que pase CostoRealTotal a CostoTotal
'        If GNTrans.ImportaIVKReal Then
'            ImportaIVKardex fuente, True, aux_inc
'        End If
        'Si requiere importar IVKardexRecargo
'        If GNTrans.ImportaIVKR Then
'            ImportaIVKardexRecargo fuente
'        End If
'
        'Si requiere importar PCKardex
'        If GNTrans.ImportaPCK Then
'            If fuente.GNTrans.CodPantalla = "IVRES_ALQ" Then 'AUC 14/02/07
'                ImportaPCKardex1 fuente, aux_inc
'            Else
'                ImportaPCKardex fuente
'            End If
'        End If
        'Si requiere importar CTLibroDetalle
'        If GNTrans.ImportaCTD Then
'            ImportaAsiento fuente, aux_inc
'        End If
        'Almacena TransID de fuente en la colección
        If Not aux_inc Then LimpiaColeccion mcolTransIDs
        mcolTransIDs.Add item:=Fuente.transid
        'Si es importación incremental, cambia estado del ogígen inmediatamente
        '  Si no es incremental, lo hace al momento de grabar la trans para que
        '  no cambie estado en case de que cancela la transaccion sin grabar
        If Incremental Then
            'Si no está aprobado, no pasa al estado 'Despachado'
            ' para evitar que un asiento descuadrado marque como Despachado y afecte al balance
            If Fuente.Estado = ESTADO_APROBADO Then
                'Cambia el estado de fuente a Despachado
                mProps.objEmpresa.CambiaEstadoGNComp Fuente.transid, ESTADO_DESPACHADO
            End If
        End If
    Next i
    If UBound(v, 1) = 0 Then
        If Not Me.GNTrans.IVAgregaFilaIVGrupo Then
            Descripcion = Descripcion & Mid$(desc, 1, 120 - Len(Descripcion))
        End If
    Else
        If Not Me.GNTrans.IVAgregaFilaIVGrupo Then
            Descripcion = Descripcion & Mid$(desc, 1, 120 - Len(Descripcion))
        End If
    End If
    If Len(Descripcion) > 120 Then Descripcion = Mid$(Descripcion, 1, 120)
    Set Fuente = Nothing
End Sub

Private Sub ImportaIVKardexConsFisica( _
                ByVal Fuente As GNComprobante, _
                ByVal ConValorReal As Boolean, _
                ByVal Incremental As Boolean, ByRef obj As IVKardex)
    Dim i As Long, ix As Long, ivk As IVKardex
    Dim Signo As Integer, item As IVInventario
    Dim CantOriginal As Currency
    If mcolIVKardex Is Nothing Then Set mcolIVKardex = New Collection
    'Si es importación incremental, no se borra lo anterior
    If Not Incremental Then             '*** MAKOTO 15/dic/00
        BorrarIVKardex
    End If
    For i = 1 To Fuente.CountIVKardex
        If Me.GNTrans.CodPantalla = "IVDVALQ" Or Me.GNTrans.CodPantalla = "IVRES_ALQ" Or Me.GNTrans.CodPantalla = "IVBQD2BE" Then
            If Fuente.IVKardex(i).Cantidad < 0 Then
                Set ivk = Fuente.IVKardex(i).Clone
                Set ivk.GNComprobante = Me
               If (GNTrans.Modulo <> Fuente.GNTrans.Modulo) Or _
                    (GNTrans.Modulo = Fuente.GNTrans.Modulo) Then       '**** PEND
                    'Asegura que la cantidad tenga el signo correcto
                    ' Es necesario porque tiene que cambiar de signo cuando importa de
                    ' FC(Egreso) --> FCV(Ingreso) o CP(Ingreso) --> CPV(Egreso)
                    ' HC(Ingreso) --> OF(Egreso) etc...
                    Signo = IIf(GNTrans.IVTipoTrans = "E", -1, 1) '-1 si es egreso
                    ivk.Cantidad = Abs(ivk.Cantidad) * Signo
                End If
                If Not ConValorReal Then
                    ivk.CostoTotal = Abs(ivk.CostoTotal) * Signo
                    ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
                Else
                    ivk.CostoTotal = Abs(ivk.CostoRealTotal) * Signo
                    ivk.PrecioTotal = Abs(ivk.PrecioRealTotal) * Signo
                End If
                ivk.CostoRealTotal = Abs(ivk.CostoRealTotal) * Signo
                ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
                mcolIVKardex.Add ivk
            End If
        ElseIf Me.GNTrans.CodPantalla = "IVBD" Then 'En caso que importe para transferencia de bodega
            If Fuente.IVKardex(i).Cantidad > 0 Then
                Set ivk = Fuente.IVKardex(i).Clone
                Set ivk.GNComprobante = Me
               If (GNTrans.Modulo <> Fuente.GNTrans.Modulo) Or _
                    (GNTrans.Modulo = Fuente.GNTrans.Modulo) Then       '**** PEND
                    Signo = IIf(GNTrans.IVTipoTrans = "T", -1, 1)   '-1 si es egreso
                    ivk.Cantidad = Abs(ivk.Cantidad) * Signo
                End If
                If Not ConValorReal Then
                    ivk.CostoTotal = Abs(ivk.CostoTotal) * Signo
                    ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
                Else
                    ivk.CostoTotal = Abs(ivk.CostoRealTotal) * Signo
                    ivk.PrecioTotal = Abs(ivk.PrecioRealTotal) * Signo
                End If
                ivk.CostoRealTotal = Abs(ivk.CostoRealTotal) * Signo
                ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
                mcolIVKardex.Add ivk
            End If
        Else
                Set ivk = Fuente.IVKardex(i).Clone
                Set ivk.GNComprobante = Me
                    CantOriginal = ivk.Cantidad
                    If (GNTrans.Modulo <> Fuente.GNTrans.Modulo) Or _
                        (GNTrans.Modulo = Fuente.GNTrans.Modulo) Then       '**** PEND
                        'Asegura que la cantidad tenga el signo correcto
                        ' Es necesario porque tiene que cambiar de signo cuando importa de
                        ' FC(Egreso) --> FCV(Ingreso) o CP(Ingreso) --> CPV(Egreso)
                        ' HC(Ingreso) --> OF(Egreso) etc...
                        If Me.GNTrans.ImpRespetarSignosCantidad Then
                            If Len(Me.idFuentes) > 0 Then
                                Signo = IIf(Fuente.GNTrans.IVTipoTrans = "E", -1, 1) '-1 si es egreso
                            Else
                                Signo = IIf(Me.GNTrans.IVTipoTrans = "E", -1, 1) '-1 si es egreso
                            End If
                        Else
                            If Me.GNTrans.IVTransCal Then
                                Signo = IIf(Me.GNTrans.IVTipoTrans = "E", 1, -1) '-1 si es egreso
                            Else
                                Signo = IIf(Me.GNTrans.IVTipoTrans = "E", -1, 1) '-1 si es egreso
                            End If
                        End If
                        ivk.Cantidad = Abs(ivk.Cantidad) * Signo
                    End If
                    If Not ConValorReal Then
                        ivk.CostoTotal = Abs(ivk.CostoTotal) * Signo
                        ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
                    Else
                        ivk.CostoTotal = Abs(ivk.CostoRealTotal) * Signo
                        ivk.PrecioTotal = Abs(ivk.PrecioRealTotal) * Signo
                    End If
                    ivk.CostoRealTotal = Abs(ivk.CostoRealTotal) * Signo
                    ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
                    'jeaa 23/03/2009
                    Set item = Fuente.Empresa.RecuperaIVInventario(ivk.IdInventario)
                    If Not item Is Nothing Then
                            If Not item.BandNoSeFactura Then
                                ' si se importa de un transferencia solo coge valores de ingreso
                                If Fuente.GNTrans.IVTipoTrans = "T" Or Fuente.GNTrans.IVTipoTrans = "A" Then
                                    If CantOriginal > 0 Then
                                        mcolIVKardex.Add ivk
                                    End If
                                Else
                                    mcolIVKardex.Add ivk
                                End If
                            End If
                    End If
        End If
            Set item = Nothing
    Next i
        Set obj = ivk
End Sub


Public Function PreparaCadena(ByVal cadena As String) As String
'Funcion que concatena apostrofes en una cadena separada por comas
Dim v As Variant, max As Integer, i As Integer
Dim Respuesta As String
    If cadena = "" Then
        PreparaCadena = "''"
        Exit Function
    End If
    v = Split(cadena, ",")
    max = UBound(v, 1)
    For i = 0 To max
        Respuesta = Respuesta & "'" & v(i) & "'" & ","
    Next i
    Respuesta = Left(Respuesta, Len(Respuesta) - 1) 'Quita la útima coma
    PreparaCadena = Respuesta
End Function


Private Sub VerificarPromociones()
    Dim ivPromo As IVPromocion, codPromo As String, i As Integer, j As Long, k As Long
    Dim cond As Variant, BandPromocion As Boolean, Condicion As String
    Dim ValorMinimo As Currency, CampoTotal As String, CantPromo As Integer
    Dim item As IVInventario, ix As Long, NumCondicion As Integer
    Dim rsPromo As Recordset, sql  As String, rs As Recordset, BandPromocionPC As Boolean
    Dim ITEMP As IVInventario, FactMult As Integer
    Dim pc As PCProvCli
    ReDim cond(5) As String
    ReDim condp(4) As String
    For k = 1 To 5
        cond(k) = ","
    Next k
        For k = 1 To 4
        condp(k) = ","
    Next k

    BandPromocionPC = False
    BandPromocion = False
    NumCondicion = 0
    
    sql = " select CodPromocion from ivpromocion"
    ''sql = sql & " left join gnsucursal on ivpromocion.idsucursal= gnsucursal.idsucursal"
    sql = sql & " Where ivpromocion.BandValida = 1"
    sql = sql & " and ((bandcaducidad=0) or"
    sql = sql & " (bandcaducidad=1 )) "
   sql = sql & " and (" & FechaYMD(mProps.FechaTrans, gobjMain.TipoDB) & " between fechadesde and fechahasta )"
   sql = sql & " and (" & HoraHMSNew(mProps.HoraTrans, gobjMain.TipoDB, False, True) & " between HORAdesde and hORAhasta )"
   sql = sql & " and (codsucursales like '%" & Me.GNTrans.CodSucursal & "%')"
   sql = sql & " order by ivpromocion.fechagrabado desc "
    Set rsPromo = mProps.objEmpresa.OpenRecordset(sql)

    
    
    
'    Set rs = mProps.objEmpresa.BuscaVariasPromocionesValidas(mProps.FechaTrans, mProps.HoraTrans, rsPromo)
    If Not rsPromo Is Nothing Then
        While Not rsPromo.EOF
            codPromo = rsPromo.Fields("CodPromocion")
            Set ivPromo = mProps.objEmpresa.RecuperaIVPromocion(codPromo)
            If Not ivPromo Is Nothing Then
                'si tiene condiciones por grupos de Invetarios
                
                If ivPromo.NumCondPromocionDetalleIVG > 0 And ivPromo.NumCondPromocionDetallePCG > 0 Then
                    For i = 1 To 5
                        If ivPromo.BandTotal(i) Then
                            For j = 1 To ivPromo.NumCondPromocionDetalleIVG
                                cond(ivPromo.IvCondPromocionDetalleIVG(j).NumIVGrupo) = cond(ivPromo.IvCondPromocionDetalleIVG(j).NumIVGrupo) & ivPromo.IvCondPromocionDetalleIVG(j).IDIVGrupo & ","
                            Next j
                        End If
                    Next i
                    For k = 1 To 5
                        
                        If Len(cond(k)) > 1 Then
                            Condicion = cond(k)
                            If VerificaCumpleCondicion(k, Condicion, ivPromo, CantPromo) Then
                                BandPromocion = True
                                Exit For
                            Else
                                BandPromocion = False
                                Exit For
                            End If
                        End If
                    Next k
                    
                    For i = 1 To 4
                        If ivPromo.BandTotal(i) Then
                            For j = 1 To ivPromo.NumCondPromocionDetallePCG
                                condp(ivPromo.IvCondPromocionDetallePCG(j).NumPCGrupo) = condp(ivPromo.IvCondPromocionDetallePCG(j).NumPCGrupo) & ivPromo.IvCondPromocionDetallePCG(j).idPcGrupo & ","
                            Next j
                        End If
                    Next i
                    
                    
                    If CantPromo = 0 Then
                    For k = 1 To 4
                        If Len(condp(k)) > 1 Then
                            Condicion = condp(k)
                            If VerificaCumpleCondicion(k, Condicion, ivPromo, CantPromo) Then
                                BandPromocion = True
                                Exit For
                            Else
                                BandPromocion = False
                                Exit For
                            End If
                        End If
                    Next k
                    End If
                    
                    FactMult = 1
                    For ix = 1 To Me.CountIVKardex
                        For k = 1 To ivPromo.NumCondPromocionItemDup
                            If Me.IVKardex(ix).CodInventario = ivPromo.RecuperaCondPromocionItemDup(k).CodInventario Then
                                FactMult = ivPromo.RecuperaCondPromocionItemDup(k).xCuanto
                                Exit For
                            End If
                        Next k
                        If FactMult <> 1 Then
                            Exit For
                        End If
                    Next ix
                    
                    
                'AGREGA EL ITEM DE PROMOCION
                    If BandPromocion And CantPromo > 0 Then
                        ix = Me.AddIVKardex
                        Set ITEMP = ivPromo.Empresa.RecuperaIVInventario(ivPromo.RecuperaCondPromocionDetalleP(1).CodInventario)
                        Me.IVKardex(ix).CodInventario = ivPromo.RecuperaCondPromocionDetalleP(1).CodInventario
                        If ivPromo.BandSoloUno Then
                            Me.IVKardex(ix).Cantidad = -1
                        Else
                            Me.IVKardex(ix).Cantidad = CantPromo * ivPromo.RecuperaCondPromocionDetalleP(1).cant * -1 * FactMult
                        End If
                        Me.IVKardex(ix).CodBodega = Me.IVKardex(1).CodBodega
                        Me.IVKardex(ix).Orden = ix
                        Me.IVKardex(ix).Nota = "PROMOCION"
                        Me.IVKardex(ix).PrecioTotal = ITEMP.Precio(1) * -1
                        Me.IVKardex(ix).Descuento = 1
                        Set ITEMP = Nothing
                    End If
                    End If
            End If
            rsPromo.MoveNext
        Wend
    End If
    Set item = Nothing
End Sub

Public Sub ActualizaDatosProceso(ByVal Secuencial As Integer, ByVal band As Boolean, IdProc As Long)
'''    Dim sql As String, rs As Recordset
'''    Dim AuxDesc As Integer, SecuencialItem As Long
'''
'''        sql = "SELECT BandProceso, TransIdProceso, IdProcesado FROM IVInventarioDetalleISO WHERE id=" & secuencial
'''        Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
'''        If Not rs.EOF Then
'''            #If DAOLIB Then
'''                rs.Edit
'''            #End If
'''        End If
'''
'''    With rs
'''         !BandProceso = band
'''         If Not band Then !TransIDProceso = 0
'''         !IdProcesado = IdProc
'''
'''        .Update
'''        #If DAOLIB Then
'''                rs.Bookmark = rs.LastModified
'''        #End If
'''        .Move 0             'Para actualizar
'''        .Close
'''
'''    End With
End Sub

Public Sub ActualizaDatosProcesoNew(ByVal Secuencial As Long, ByVal band As Boolean, IdProc As Long)
    Dim sql As String, rs As Recordset
    Dim AuxDesc As Integer, SecuencialItem As Long
    
        sql = "SELECT BandProceso, TransIdProceso, IdProcesado FROM IVInventarioDetalleISO WHERE id=" & Secuencial
        Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
        If Not rs.EOF Then
            #If DAOLIB Then
                rs.Edit
            #End If
        End If
        
    With rs
         !BandProceso = band
         If Not band Then !TransIDProceso = 0
         !IdProcesado = IdProc
        
        .Update
        #If DAOLIB Then
                rs.Bookmark = rs.LastModified
        #End If
        .Move 0             'Para actualizar
        .Close
        
    End With
End Sub

Public Sub ActualizaBandVerificaNew(ByVal Secuencial As Long, ByVal band As Boolean)
    Dim sql As String, rs As Recordset
    Dim AuxDesc As Integer, SecuencialItem As Long
    
        sql = "SELECT BandVerifica, TransIdCalifica FROM IVInventarioDetalleISO WHERE id=" & Secuencial
        Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
        If Not rs.EOF Then
            #If DAOLIB Then
                rs.Edit
            #End If
        End If
        
    With rs
         !BandVerifica = band
         If Not band Then !TransIDCalifica = 0
 
        .Update
        #If DAOLIB Then
                rs.Bookmark = rs.LastModified
        #End If
        .Move 0             'Para actualizar
        .Close
        
    End With
End Sub

Public Sub ActualizaBandProcesoNew(ByVal Secuencial As Long, ByVal band As Boolean)
    Dim sql As String, rs As Recordset
    Dim AuxDesc As Integer, SecuencialItem As Long

        sql = "SELECT BandProceso, TransIdProceso,IdMotivoPro FROM IVInventarioDetalleISO WHERE id=" & Secuencial
        Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
        If Not rs.EOF Then
            #If DAOLIB Then
                rs.Edit
            #End If
        End If

    With rs
         !BandProceso = band
         If Not band Then !TransIDProceso = 0
         If Not band Then !IdMotivoPro = 0

        .Update
        #If DAOLIB Then
                rs.Bookmark = rs.LastModified
        #End If
        .Move 0             'Para actualizar
        .Close

    End With

End Sub


Public Sub ActualizaBandFacturaNew(ByVal Secuencial As Long, ByVal band As Boolean)
    Dim sql As String, rs As Recordset
    Dim AuxDesc As Integer, SecuencialItem As Long
    
        sql = "SELECT BandFactura, TransIdFactura FROM IVInventarioDetalleISO WHERE id=" & Secuencial
        Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
        If Not rs.EOF Then
            #If DAOLIB Then
                rs.Edit
            #End If
        End If
        
    With rs
         !BandFactura = band
         If Not band Then !TransIDFactura = 0
        
        .Update
        #If DAOLIB Then
                rs.Bookmark = rs.LastModified
        #End If
        .Move 0             'Para actualizar
        .Close
    End With
End Sub

Public Sub ActualizaTransIdNew(ByVal Secuencial As Long, ByVal campo As String, ByVal Valor As Long)
    Dim sql As String, rs As Recordset
    Dim AuxDesc As Integer, SecuencialItem As Long
    
        sql = "SELECT " & campo & " as campo FROM IVInventarioDetalleISO WHERE id=" & Secuencial
        Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
        If Not rs.EOF Then
            #If DAOLIB Then
                rs.Edit
            #End If
        End If
        
    With rs
         !campo = Valor
 
        .Update
        #If DAOLIB Then
                rs.Bookmark = rs.LastModified
        #End If
        .Move 0             'Para actualizar
        .Close
        
    End With
End Sub

Public Function RecuperaVentasCobroxUsuario() As Variant
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean

    
'    sql = "SELECT distinct "
    sql = "SELECT "
    sql = sql & " G.TRANSID, G.CodTrans + ' ' + CONVERT(varchar, NumTrans)    AS Trans,    pc.nombre, "
    sql = sql & " p.haber as valor,"
    sql = sql & " p.NumLetra "
    sql = sql & " FROM GNCOMPROBANTE G inner join gntrans gt on g.codtrans=gt.codtrans"
    sql = sql & " inner join pcprovcli pc on  (g.idclienteref=pc.idprovcli or g.idproveedorref=pc.idprovcli)"
    sql = sql & " INNER JOIN PCKARDEX P"
    sql = sql & " inner join tsformacobropago tsf on p.idforma=tsf.idforma"
    sql = sql & " ON G.TRANSID=P.TRANSID"
    sql = sql & " inner join tskardex tsk INNER JOIN TSTIPODOCBANCO TST ON TSK.IDTIPODOC=TST.IDTIPODOC on p.transid=tsk.transid"
    sql = sql & " Where G.ESTADO<>3     "
    If GNTrans.TSUtilizaFechaGrabado Then
        sql = sql & " AND (g.FechaGrabado between '" & Me.FechaTrans & " 00:00:00' AND '" & Me.FechaTrans & " 23:59:59' ) "
    Else
        sql = sql & " AND FECHATRANS BETWEEN '" & Me.FechaTrans & "' AND '" & Me.FechaTrans & "'"
    End If
'    sql = sql & " AND CODUSUARIO='" & Me.codUsuario & "'"
    
    'If Not Me.GNTrans.TSunirCobrosFacturas Then
    If Not Me.GNTrans.CierrePorTrans Then
        sql = sql & " AND CODUSUARIO='" & Me.codUsuario & "'"
    End If
    
    sql = sql & " and gt.modulo <> ('iv')"
    sql = sql & " and afectasaldopc=1"
    sql = sql & " and p.haber>0"
    If InStr(1, UCase(Me.Empresa.GNOpcion.NombreEmpresa), "BALGRAN") = 0 Then
        sql = sql & " and gt.codpantalla <>'TSIEE'"
    End If
    sql = sql & " and AnexoCodTipoComp<>7  and (tsT.CODTIPODOC='EF-I'  OR  tsT.CODTIPODOC='EFEC')"
    If Me.EsNuevo Then
        sql = sql & " and g.transid not in( select IdTransRef from TSDetalleIngreso tsd inner join gncomprobante g on tsd.transid=g.transid where g.estado<>3)"
    End If
    

    
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    
    Set RecuperaVentasCobroxUsuario = rs
    Set rs = Nothing

End Function

Public Function ValidaNumDocRef(ByVal num As String, ByRef Trans As String) As Boolean
    Dim sql As String, rs As Recordset
    ValidaNumDocRef = False
    sql = "SELECT distinct "
    sql = sql & " G.TRANSID, G.CodTrans + ' ' + CONVERT(varchar, NumTrans)    AS Trans    "
    sql = sql & " FROM GNCOMPROBANTE G "
    sql = sql & " where estado <>3"
    sql = sql & " AND numdocref ='" & num & "'"
    
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    
    If rs.RecordCount > 0 Then
        ValidaNumDocRef = True
        Trans = rs.Fields("trans")
    Else
        ValidaNumDocRef = False
        Trans = ""
    End If
End Function

Public Sub ActualizaTransIdN(ByVal Secuencial As Long, ByVal campo As String, ByVal Valor As Double)
    Dim sql As String, rs As Recordset
    Dim AuxDesc As Integer, SecuencialItem As Long
    
        sql = "SELECT " & campo & " as campo FROM IVInventarioDetalleISO WHERE id=" & Secuencial
        Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
        If Not rs.EOF Then
            #If DAOLIB Then
                rs.Edit
            #End If
        End If
        
    With rs
         !campo = Valor
 
        .Update
        #If DAOLIB Then
                rs.Bookmark = rs.LastModified
        #End If
        .Move 0             'Para actualizar
        .Close
        
    End With
End Sub

Public Sub EliminaConsumoDetalleProduccion(ByVal transid As Long)
    Dim sql As String, rs As Recordset
    Dim AuxDesc As Integer, SecuencialItem As Long
    
        sql = "delete FROM ivconsumodetalle WHERE transid=" & transid
        Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
        
End Sub


Public Function ValidaNumDocRefxTrans(ByVal num As String, ByVal CodTrans As String, ByRef Trans As String) As Boolean
    Dim sql As String, rs As Recordset
    ValidaNumDocRefxTrans = False
    sql = "SELECT distinct "
    sql = sql & " G.TRANSID, G.CodTrans + ' ' + CONVERT(varchar, NumTrans)    AS Trans    "
    sql = sql & " FROM GNCOMPROBANTE G "
    sql = sql & " where estado <>3"
    sql = sql & " AND numdocref ='" & num & "'"
    sql = sql & " AND codtrans ='" & CodTrans & "'"
    
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    
    If rs.RecordCount > 0 Then
        ValidaNumDocRefxTrans = True
        Trans = rs.Fields("trans")
    Else
        ValidaNumDocRefxTrans = False
        Trans = ""
    End If
End Function


'--------------- Manejo de coleccion de PRLibroDetalle
Public Function AddPRLibroDetalle() As Long
    Dim nuevo As PRLibroDetalle
    
    If mcolPRLibroDetalle Is Nothing Then Set mcolPRLibroDetalle = New Collection
    
    Set nuevo = New PRLibroDetalle
    Set nuevo.GNComprobante = Me
    mcolPRLibroDetalle.Add nuevo
    nuevo.Descripcion = Mid$(Me.Descripcion, 1, 79)
    AddPRLibroDetalle = mcolPRLibroDetalle.Count   'Devuelve el indice de nuevo elemento
    Set nuevo = Nothing
    mbooModificado = True
End Function

Public Sub RemovePRLibroDetalle(ByVal ix As Long, Optional obj As PRLibroDetalle)
    Dim Ctd As PRLibroDetalle

    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemovePRLibroDetalle", MSGERR_SOLOVER
    If mcolPRLibroDetalle Is Nothing Then RecuperaAsiento
    
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolPRLibroDetalle.Count
            If mcolPRLibroDetalle.item(ix) Is obj Then Exit For
        Next ix
    End If
    
    'Si ha encontrado el item que se va a eliminar
    If ix <= mcolPRLibroDetalle.Count Then
        'Verifica el item no es generado por Generación automática de asiento
        Set Ctd = mcolPRLibroDetalle(ix)
        'Si lo es , no puede eliminar
        If Ctd.BandIntegridad = INTEG_AUTO Then
            Err.Raise ERR_INVALIDO, "GNComprobante.RemovePRLibroDetalle", _
                 "No se puede eliminar porque la fila es generado automáticamente."
        End If
        
        mcolPRLibroDetalle.Remove ix
    End If
    
    mbooModificado = True
End Sub

'Elimina todos los detalles de asiento
Public Sub BorrarPRLibroDetalle()
    'Cuando SoloVer está establecido a True, genera error
    If mcolPRLibroDetalle Is Nothing Then Set mcolPRLibroDetalle = New Collection
    
    With mcolPRLibroDetalle
        Do While .Count > 0
            .Remove .Count
        Loop
    End With
    mbooModificado = True
End Sub

Public Property Get CountPRLibroDetalle() As Long
    If mcolPRLibroDetalle Is Nothing Then RecuperaAsientoPresupuesto
    CountPRLibroDetalle = mcolPRLibroDetalle.Count
End Property

Public Property Get PRLibroDetalle(ix As Long) As PRLibroDetalle
    If mcolPRLibroDetalle Is Nothing Then RecuperaAsientoPresupuesto
    Set PRLibroDetalle = mcolPRLibroDetalle.item(ix)
End Property



Public Function GeneraFactura() As Boolean
    Dim cad As String, pc As PCProvCli
    Dim t0  As Currency, t12  As Currency, IVA As Currency, i As Long, item As IVInventario, Nombre As String, Ruta As String
    Dim file As String, numFile As Integer
    Dim suc As GNSucursal
    On Error GoTo ErrTrap
    
        Ruta = Me.Empresa.GNOpcion.RutaXMLValido
        
        Nombre = "01" & "-" & Me.NumSerieEstaSRI & "-" & Me.NumSeriePuntoSRI & "-" & Right("000000000" + Trim(Str(Me.NumTrans)), 9) & "-" & Me.CodTrans & ".XML"
        file = Ruta & "\" & Nombre
       
        Set suc = Me.Empresa.RecuperaGNSucursal(Me.GNTrans.CodSucursal)
        
    
    If ExisteArchivo(file) Then
    End If
    numFile = FreeFile
    Open file For Output Access Write As #numFile
    
    cad = "<?xml version=" & """1.0""" & "" & " encoding=" & """UTF-8""" & "?>"
    Print #numFile, cad
            cad = " <factura version=" & """2_00""" & ">"
            Print #numFile, cad
            cad = "     <infoTributaria>"
            Print #numFile, cad
                cad = "     <razonSocial>" & Me.Empresa.GNOpcion.NombreEmpresa & "</razonSocial>"
                Print #numFile, cad
                cad = "     <ruc>" & Me.Empresa.GNOpcion.RUC & "</ruc>"
                Print #numFile, cad
                cad = "     <numAut>" & Me.AutorizacionSRI & "</numAut>"
                Print #numFile, cad
                cad = "     <codDoc>" & "1" & "</codDoc>"
                Print #numFile, cad
                cad = "     <estab>" & Me.NumSerieEstaSRI & "</estab>"
                Print #numFile, cad
                cad = "     <ptoEmi>" & Me.NumSeriePuntoSRI & "</ptoEmi>"
                Print #numFile, cad
                cad = "     <secuencial>" & Right("000000000" + Trim(Str(Me.NumTrans)), 9) & "</secuencial>"
                Print #numFile, cad
                cad = "     <fechaAutorizacion>" & Format(Me.FechaAutorizacionSRI, "dd/mm/yyyy") & "</fechaAutorizacion>"
                Print #numFile, cad
                cad = "     <caducidad>" & Format(Me.FechaCaducidadSRI, "dd/mm/yyyy") & "</caducidad>"
                Print #numFile, cad
                cad = "     <fechaEmision>" & Format(Me.FechaTrans, "dd/mm/yyyy") & "</fechaEmision>"
                Print #numFile, cad
                cad = "     <dirMatriz>" & Me.Empresa.GNOpcion.Direccion1 & "</dirMatriz>"
                Print #numFile, cad
                Set pc = Me.Empresa.RecuperaPCProvCli(Me.IdClienteRef)
                t0 = TotalCSIva(0)
                t12 = TotalCSIva(1)
                IVA = CalculaValorIVAXML
                If pc.codtipoDocumento <> "F" Then
                    cad = "     <razonSocialComprador>" & pc.Nombre & "</razonSocialComprador>"
                    Print #numFile, cad
                    cad = "     <rucCedulaComprador>" & pc.RUC & "</rucCedulaComprador>"
                    Print #numFile, cad
                    If Me.Empresa.GNOpcion.TipoEmpresaSRI = "CE" Then
                        cad = "     <contribuyenteEspecial>" & Me.Empresa.GNOpcion.Resolucion & "</contribuyenteEspecial>"
                        Print #numFile, cad
                    ElseIf Me.Empresa.GNOpcion.TipoEmpresaSRI = "SC" Then
                        cad = "     <obligado>" & "Obligado a Llevar Contabilidad" & "</obligado>"
                        Print #numFile, cad
                    End If
                    cad = "     <totalSinImpuestos>" & Format(t0 + t12, "#0.00") & "</totalSinImpuestos>"
                    Print #numFile, cad
'                    cad = "     <baseNoObjetoIVA>" & Format(t0, "#0.00") & "</baseNoObjetoIVA>"
'                    Print #numFile, cad
                    cad = "     <baseIVA0>" & Format(t0, "#0.00") & "</baseIVA0>"
                    Print #numFile, cad
                    cad = "     <baseIVA12>" & Format(t12, "#0.00") & "</baseIVA12>"
                    Print #numFile, cad
                    cad = "     <IVA12>" & Format(IVA, "#0.00") & "</IVA12>"
                    Print #numFile, cad
                    cad = "     <totalConImpuestos>" & Format(t0 + t12 + IVA, "#0.00") & "</totalConImpuestos>"
                    Print #numFile, cad
                    
                Else
                    cad = "     <razonSocialComprador> Consumidor Final</razonSocialComprador>"
                    Print #numFile, cad
                    If Me.Empresa.GNOpcion.TipoEmpresaSRI = "CE" Then
                        cad = "     <contribuyenteEspecial>" & Me.Empresa.GNOpcion.Resolucion & "</contribuyenteEspecial>"
                        Print #numFile, cad
                    ElseIf Me.Empresa.GNOpcion.TipoEmpresaSRI = "SC" Then
                        cad = "     <obligado>" & "Obligado a Llevar Contabilidad" & "</obligado>"
                        Print #numFile, cad
                    End If
                    cad = "     <totalConImpuestos>" & Format(t0 + t12 + IVA, "#0.00") & "</totalConImpuestos>"
                    Print #numFile, cad
                End If
            cad = "     </infoTributaria>"
            Print #numFile, cad
            cad = "     <detalles>"
            Print #numFile, cad
            For i = 1 To Me.CountIVKardex
                If Not Me.IVKardex(i).bandImprimir Then
                    cad = "         <detalle>"
                    Print #numFile, cad
                        Set item = Me.Empresa.RecuperaIVInventario(Me.IVKardex(i).CodInventario)
                        cad = "         <concepto>" & item.Descripcion & "</concepto>"
                        Print #numFile, cad
                        cad = "         <cantidad>" & Format(Abs(Me.IVKardex(i).Cantidad), "#0.00") & "</cantidad>"
                        Print #numFile, cad
                        cad = "         <precioUnitario>" & Format(Abs(Me.IVKardex(i).Precio), "#0.00") & "</precioUnitario>"
                        Print #numFile, cad
                        cad = "         <descuentos>" & Format(Abs(Me.IVKardex(i).Descuento), "#0.00") & "</descuentos>"
                        Print #numFile, cad
                        cad = "         <precioTotal>" & Format(Abs(Me.IVKardex(i).PrecioRealTotal), "#0.00") & "</precioTotal>"
                        Print #numFile, cad
                    cad = "         </detalle>"
                    Print #numFile, cad
                End If
            Next i
            cad = "     </detalles>"
            Print #numFile, cad
            
            If Not suc.BandMatriz Then
                cad = "         <infoAdicional>"
                Print #numFile, cad
                cad = "         <CampoAdicionalNombre=" & """DireccionEstablecimiento""" & ">" & suc.Direccion & "</CampoAdicionalNombre>"
                Print #numFile, cad
            End If
            
            
        cad = "</factura>"
        Print #numFile, cad

        Set pc = Nothing
        Set item = Nothing
        Set suc = Nothing

Close numFile
        GeneraFactura = True
    Exit Function
ErrTrap:
'    Print #numFile, ""
    Close #numFile
    DispErr
    Unload Me
    Exit Function
End Function


Private Function CalculaValorIVAXML() As Currency
    Dim ivr As IVRecargo, i As Long, ivkr As IVKardexRecargo
        Set ivr = Me.Empresa.RecuperaIVRecargo("IVA")
        If ivr Is Nothing Then
            Err.Raise ERR_NOIMPRIME, App.EXEName, "No existe recargo: " & "IVA"
        Else
            For i = 1 To Me.CountIVKardexRecargo
                Set ivkr = Me.IVKardexRecargo(i)
                If ivr.CodRecargo = ivkr.CodRecargo Then
                    CalculaValorIVAXML = ivkr.Valor
                    Exit Function
                End If
            Next i
            CalculaValorIVAXML = 0
        End If

End Function

Private Function TotalCSIva(ByVal CSIva As Byte) As Double
'11/05/2001  Angel P. para calcular el total de productos con Iva y sin Iva
'CSIva=0  ---> Sin Iva     CSIva=1 ---> Con Iva
    Dim ivk As IVKardex
    Dim i As Long
    For i = 1 To Me.CountIVKardex
        If CSIva = 0 Then
            Set ivk = Me.IVKardex(i)
            If ivk.IVA = 0 Then TotalCSIva = TotalCSIva + Abs(ivk.PrecioRealTotal)
        Else
            Set ivk = Me.IVKardex(i)
            If ivk.IVA <> 0 Then TotalCSIva = TotalCSIva + Abs(ivk.PrecioRealTotal)
        End If
    Next i
End Function

Public Property Get FechaInicioTrans() As Date
    FechaInicioTrans = mProps.FechaInicioTrans
End Property

Public Property Let FechaInicioTrans(value As Date)
        mProps.FechaInicioTrans = value
End Property

Public Property Get HoraInicioTrans() As Date
    HoraInicioTrans = mProps.HoraInicioTrans
End Property

Public Property Let HoraInicioTrans(value As Date)
        mProps.HoraInicioTrans = value
End Property


Public Function GeneraRetencion() As Boolean
    Dim cad As String, pc As PCProvCli
    Dim t0  As Currency, t12  As Currency, IVA As Currency, i As Long, ret As TSRetencion, Nombre As String, Ruta As String
    Dim file As String, numFile As Integer, suc As GNSucursal
    On Error GoTo ErrTrap
    
        Ruta = Me.Empresa.GNOpcion.RutaXMLValido
        
        Nombre = "07" & "-" & Me.NumSerieEstaSRI & "-" & Me.NumSeriePuntoSRI & "-" & Right("000000000" + Trim(Str(Me.NumTrans)), 9) & "-" & Me.CodTrans & ".XML"
        file = Ruta & "\" & Nombre
        Set suc = Me.Empresa.RecuperaGNSucursal(Me.GNTrans.CodSucursal)
        
        
    
    If ExisteArchivo(file) Then
        If MsgBox("El nombre del archivo " & Nombre & " ya existe desea sobreescribirlo?", vbYesNo) = vbNo Then
            Exit Function
        End If
    End If
    numFile = FreeFile
    Open file For Output Access Write As #numFile
    
    cad = "<?xml version=" & """1.0""" & "" & " encoding=" & """UTF-8""" & "?>"
    Print #numFile, cad
            cad = "<comprobanteRetencion version=" & """2_00""" & ">"
            Print #numFile, cad
            cad = "<infoTributaria>"
            Print #numFile, cad
                cad = "<razonSocial>" & Me.Empresa.GNOpcion.NombreEmpresa & "</razonSocial>"
                Print #numFile, cad
                cad = "<ruc>" & Me.Empresa.GNOpcion.RUC & "</ruc>"
                Print #numFile, cad
                cad = "<numAut>" & Me.AutorizacionSRI & "</numAut>"
                Print #numFile, cad
                cad = "<codDoc>" & "7" & "</codDoc>"
                Print #numFile, cad
                cad = "<estab>" & Me.NumSerieEstaSRI & "</estab>"
                Print #numFile, cad
                cad = "<ptoEmi>" & Me.NumSeriePuntoSRI & "</ptoEmi>"
                Print #numFile, cad
                cad = "<secuencial>" & Right("000000000" + Trim(Str(Me.NumTrans)), 9) & "</secuencial>"
                Print #numFile, cad
                cad = "<fechaAutorizacion>" & Format(Me.FechaAutorizacionSRI, "dd/mm/yyyy") & "</fechaAutorizacion>"
                Print #numFile, cad
                cad = "<fechaEmision>" & Format(Me.FechaTrans, "dd/mm/yyyy") & "</fechaEmision>"
                Print #numFile, cad
                cad = "<dirMatriz>" & Me.Empresa.GNOpcion.Direccion1 & "</dirMatriz>"
                Print #numFile, cad
                Set pc = Me.Empresa.RecuperaPCProvCli(Me.IdProveedorRef)
                cad = "<razonSocialSujetoRetenido>" & pc.Nombre & "</razonSocialSujetoRetenido>"
                Print #numFile, cad
                cad = "<rucCedulaSujetoRetenido>" & pc.RUC & "</rucCedulaSujetoRetenido>"
                Print #numFile, cad
                cad = "<ejercicioFiscal>" & Format(Me.FechaTrans, "yyyy") & "</ejercicioFiscal>"
                Print #numFile, cad
                cad = "<caducidad>" & Format(Me.FechaCaducidadSRI, "dd/mm/yyyy") & "</caducidad>"
                Print #numFile, cad
                If Me.Empresa.GNOpcion.TipoEmpresaSRI = "CE" Then
                    cad = "<contribuyenteEspecial>" & Me.Empresa.GNOpcion.Resolucion & "</contribuyenteEspecial>"
                    Print #numFile, cad
                ElseIf Me.Empresa.GNOpcion.TipoEmpresaSRI = "SC" Then
                    cad = "<obligado>" & "Obligado a Llevar Contabilidad" & "</obligado>"
                    Print #numFile, cad
                End If
            cad = "</infoTributaria>"
            Print #numFile, cad
            cad = "<impuestos>"
            Print #numFile, cad
            For i = 1 To Me.CountTSKardexRet
                cad = "<impuesto>"
                Print #numFile, cad
                    Set ret = Me.Empresa.RecuperaTSRetencion(Me.TSKardexRet(i).CodRetencion)
                    If ret.BandIVA Then
                        cad = "<nombre> IVA </nombre>"
                    Else
                        cad = "<nombre> RENTA </nombre>"
                    End If
                    Print #numFile, cad
                    cad = "<baseImponible>" & Format(Abs(Me.TSKardexRet(i).Base), "#0.00") & "</baseImponible>"
                    Print #numFile, cad
                    cad = "<porcentajeRetener>" & Format(Abs(ret.Porcentaje * 100), "#0.00") & "</porcentajeRetener>"
                    Print #numFile, cad
                    cad = "<valorRetenido>" & Format(Abs(Me.TSKardexRet(i).Haber), "#0.00") & "</valorRetenido>"
                    Print #numFile, cad
                    If Me.TSKardexRet(i).Observacion = "FACTURA" Then
                        cad = "<codDocSustento> 1 </codDocSustento>"
                    ElseIf Me.TSKardexRet(i).Observacion = "LIQUIDACION DE COMPRAS" Then
                        cad = "<codDocSustento> 3 </codDocSustento>"
                    End If
                    Print #numFile, cad
                    cad = "<numDocSustento>" & Me.TSKardexRet(i).NumDoc & "</numDocSustento>"
                    Print #numFile, cad
                    
                cad = "</impuesto>"
                Print #numFile, cad
            Next i
            cad = "</impuestos>"
            Print #numFile, cad
        
            If Not suc.BandMatriz Then
                cad = "         <infoAdicional>"
                Print #numFile, cad
                cad = "         <CampoAdicionalNombre=" & """DireccionEstablecimiento""" & ">" & suc.Direccion & "</CampoAdicionalNombre>"
                Print #numFile, cad
            End If
        
        
        cad = "</comprobanteRetencion>"
Print #numFile, cad

        Set pc = Nothing
        Set ret = Nothing

Close numFile
        GeneraRetencion = True
    Exit Function
ErrTrap:
    DispErr
    Unload Me
    Exit Function
End Function

Public Function GeneraNotaCredito() As Boolean
    Dim cad As String, pc As PCProvCli
    Dim t0  As Currency, t12  As Currency, IVA As Currency, i As Long, item As IVInventario, Nombre As String, Ruta As String
    Dim file As String, numFile As Integer
    Dim gn As GNComprobante, suc As GNSucursal
    On Error GoTo ErrTrap
    
        Ruta = Me.Empresa.GNOpcion.RutaXMLValido
        Set suc = Me.Empresa.RecuperaGNSucursal(Me.GNTrans.CodSucursal)
        
        Nombre = "04" & "-" & Me.NumSerieEstaSRI & "-" & Me.NumSeriePuntoSRI & "-" & Right("000000000" + Trim(Str(Me.NumTrans)), 9) & "-" & Me.CodTrans & ".XML"
        file = Ruta & "\" & Nombre
        
    
    If ExisteArchivo(file) Then
    End If
    numFile = FreeFile
    Open file For Output Access Write As #numFile
    
    cad = "<?xml version=" & """1.0""" & "" & " encoding=" & """UTF-8""" & "?>"
    Print #numFile, cad
            cad = " <notaCredito version=" & """2_00""" & ">"
            Print #numFile, cad
            cad = "     <infoTributaria>"
            Print #numFile, cad
                cad = "     <razonSocial>" & Me.Empresa.GNOpcion.NombreEmpresa & "</razonSocial>"
                Print #numFile, cad
                cad = "     <ruc>" & Me.Empresa.GNOpcion.RUC & "</ruc>"
                Print #numFile, cad
                cad = "     <numAut>" & Me.AutorizacionSRI & "</numAut>"
                Print #numFile, cad
                cad = "     <codDoc>" & "4" & "</codDoc>"
                Print #numFile, cad
                cad = "     <estab>" & Me.NumSerieEstaSRI & "</estab>"
                Print #numFile, cad
                cad = "     <ptoEmi>" & Me.NumSeriePuntoSRI & "</ptoEmi>"
                Print #numFile, cad
                cad = "     <secuencial>" & Right("000000000" + Trim(Str(Me.NumTrans)), 9) & "</secuencial>"
                Print #numFile, cad
                cad = "     <fechaAutorizacion>" & Format(Me.FechaAutorizacionSRI, "dd/mm/yyyy") & "</fechaAutorizacion>"
                Print #numFile, cad
                cad = "     <caducidad>" & Format(Me.FechaCaducidadSRI, "dd/mm/yyyy") & "</caducidad>"
                Print #numFile, cad
                cad = "     <fechaEmision>" & Format(Me.FechaTrans, "dd/mm/yyyy") & "</fechaEmision>"
                Print #numFile, cad
                cad = "     <dirMatriz>" & Me.Empresa.GNOpcion.Direccion1 & "</dirMatriz>"
                Print #numFile, cad
                
                Set pc = Me.Empresa.RecuperaPCProvCli(Me.IdClienteRef)
                t0 = TotalCSIva(0)
                t12 = TotalCSIva(1)
                IVA = CalculaValorIVAXML
                    cad = "     <razonSocialComprador>" & pc.Nombre & "</razonSocialComprador>"
                    Print #numFile, cad
                    cad = "     <rucCedulaComprador>" & pc.RUC & "</rucCedulaComprador>"
                    Print #numFile, cad
                    If Me.Empresa.GNOpcion.TipoEmpresaSRI = "CE" Then
                        cad = "     <contribuyenteEspecial>" & Me.Empresa.GNOpcion.Resolucion & "</contribuyenteEspecial>"
                        Print #numFile, cad
                    ElseIf Me.Empresa.GNOpcion.TipoEmpresaSRI = "SC" Then
                        cad = "     <obligado>" & "Obligado a Llevar Contabilidad" & "</obligado>"
                        Print #numFile, cad
                    End If
                    
                    cad = "     <codDocModificado> 1 </codDocModificado>"
                    Print #numFile, cad
                    
                    Set gn = Me.Empresa.RecuperaGNComprobante(Me.IdTransFuente)
                    If Not gn Is Nothing Then
                        cad = "     <numDocModificado>" & gn.NumSerieEstaSRI & "-" & gn.NumSeriePuntoSRI & "-" & Right("000000000" + Trim(Str(gn.NumTrans)), 9) & "</numDocModificado>"
                        Print #numFile, cad
                        cad = "     <numAutDocSustento>" & gn.AutorizacionSRI & "</numAutDocSustento>"
                        Print #numFile, cad
                        cad = "     <fechaEmisionDocSustento>" & Format(gn.FechaTrans, "dd/mm/yyyy") & "</fechaEmisionDocSustento>"
                        Print #numFile, cad
                    End If
                    
                    
                    cad = "     <ValorModificacion>" & Format(t0 + t12, "#0.00") & "</ValorModificacion>"
                    Print #numFile, cad
''                    cad = "     <baseNoObjetoIVA>" & Format(t0, "#0.00") & "</baseNoObjetoIVA>"
''                    Print #numFile, cad
                    cad = "     <baseIVA0>" & Format(t0, "#0.00") & "</baseIVA0>"
                    Print #numFile, cad
                    cad = "     <baseIVA12>" & Format(t12, "#0.00") & "</baseIVA12>"
                    Print #numFile, cad
                    cad = "     <IVA12>" & Format(IVA, "#0.00") & "</IVA12>"
                    Print #numFile, cad
                    cad = "     <valorTotal>" & Format(t0 + t12 + IVA, "#0.00") & "</valorTotal>"
                    Print #numFile, cad
            
            
            cad = "     </infoTributaria>"
            Print #numFile, cad
            cad = "     <motivos>"
            Print #numFile, cad
            cad = "     <Motivo>" & Me.Descripcion & "</Motivo>"
            Print #numFile, cad
            cad = "     </motivos>"
            Print #numFile, cad
            
            If Not suc.BandMatriz Then
                cad = "         <infoAdicional>"
                Print #numFile, cad
                cad = "         <CampoAdicionalNombre=" & """DireccionEstablecimiento""" & ">" & suc.Direccion & "</CampoAdicionalNombre>"
                Print #numFile, cad
            End If
            
            
        cad = "</notaCredito>"
        Print #numFile, cad

        Set pc = Nothing
        Set item = Nothing

Close numFile
        GeneraNotaCredito = True
    Exit Function
ErrTrap:
'    Print #numFile, ""
    Close #numFile
    DispErr
    Unload Me
    Exit Function
End Function


Public Function TotalizaItemRepetidoSumaPrecio() As Boolean
    Dim ivk As IVKardex, i As Long, j As Long, ivk2 As IVKardex, rt As Boolean
    Dim item As IVInventario
    rt = False
    i = 1
    Do While i <= mcolIVKardex.Count        'Uso Do While para que evalue cada vez la condicion (Con For no está bien)
        Set ivk = mcolIVKardex.item(i)
        'Busca repetidos
        For j = mcolIVKardex.Count To i + 1 Step -1     'En orden al revez
            Set ivk2 = mcolIVKardex.item(j)
            'Si encuentra repetido en la misma bodega, con el mismo signo
            If ivk2.CodInventario = ivk.CodInventario And _
                ivk2.CodBodega = ivk.CodBodega And _
                Sgn(ivk2.Cantidad) = Sgn(ivk.Cantidad) Then
                ivk.PrecioTotal = ivk.PrecioTotal + ivk2.Cantidad * ivk2.Precio  'Para que no cambie de precio de primer item
                ivk.CostoTotal = ivk.CostoTotal + ivk2.Cantidad * ivk2.Costo  'Para que no cambie de costo de primer item
                Set item = Me.Empresa.RecuperaIVInventario(ivk.CodInventario)
                If item.BandServicio Then
                    ivk.Cantidad = 1
                Else
                    ivk.Cantidad = ivk.Cantidad + ivk2.Cantidad
                End If
                If Me.GNTrans.TotalizarAlImprimir Then
                    RemoveIVKardexImprimir j
                Else
                    RemoveIVKardex j
                End If
                rt = True
            End If
        Next j
        i = i + 1
    Loop
    Set item = Nothing
    TotalizaItemRepetidoSumaPrecio = rt
End Function

Public Function ListaPRLibroDetalle() As Variant
    Dim sql As String, rs As Recordset, proc As String
    '*** MAKOTO 27/nov/00 Para preguntar si se ordena por orden o por Debe/Haber
    If Me.Empresa.GNOpcion.ObtenerValor("OrdenarAsientoPorDebe") = "0" Then
''''        If Me.Empresa.GNOpcion.ObtenerValor("PermitirDistribucionGastos") = "1" Then
''''            proc = "spConsPRDiarioDetallexGasto"      'Por Orden en la que ingresó
''''        Else
            proc = "spConsPRDiarioDetalle2"      'Por Orden en la que ingresó
''''        End If
    Else
''''        If Me.Empresa.GNOpcion.ObtenerValor("PermitirDistribucionGastos") = "1" Then
''''            proc = "spConsPRDiarioDetalle2xGasto"     'Debe primero y luego Haber
''''        Else
            proc = "spConsPRDiarioDetalle2"     'Debe primero y luego Haber
'''        End If
    End If
#If DAOLIB Then
    Dim qdef As DAO.QueryDef
    Set qdef = mProps.objEmpresa.Database.QueryDefs(proc)
    qdef.Parameters("CodA") = mProps.CodAsiento
    qdef.Parameters("Cotizacion") = Me.Cotizacion("")
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Dim cmd As ADODB.Command
    Set cmd = New ADODB.Command
    cmd.ActiveConnection = mProps.objEmpresa.Coneccion
    'Si la base es de JET
    If mProps.objEmpresa.TipoDB = TIPODB_JET Then
        cmd.CommandType = adCmdTable
        cmd.CommandText = proc
        cmd.Parameters.Append cmd.CreateParameter("CodA", adInteger, adParamInput, , mProps.CodAsiento)
        cmd.Parameters.Append cmd.CreateParameter("Cotizacion", adDouble, adParamInput, , Me.Cotizacion(""))
        Set rs = cmd.Execute
    'Si la base es de SQLSvr
    Else
        sql = proc & " " & mProps.CodPRAsiento & "," & Me.Cotizacion("")
        Set rs = New ADODB.Recordset
        rs.CursorLocation = adUseClient
        rs.Open sql, mProps.objEmpresa.Coneccion, adOpenStatic, adLockReadOnly
    End If
#End If
    Set ListaPRLibroDetalle = rs
    Set rs = Nothing
End Function

Private Sub RecuperaAsientoPresupuesto()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolPRLibroDetalle Is Nothing Then Set mcolPRLibroDetalle = New Collection
    BorrarPRLibroDetalle
    'Recupera los Asientos
    sql = "SELECT A.*,B.CodCuenta, G.*  FROM PRLibroDetalle A " & _
    " LEFT JOIN GNGASTO G ON A.IDGasto=G.IDGasto " & _
    " INNER JOIN PRCuenta B " & _
           "ON A.IdCuenta=B.IdCuenta WHERE CodAsiento=" & mProps.CodPRAsiento
    '*** MAKOTO 23/nov/00 Modificado para recuperar primero los Debes y luego Haber
    If Me.Empresa.GNOpcion.ObtenerValor("OrdenarAsientoPorDebe") = "0" Then
        sql = sql & " ORDER BY Orden"
    Else
#If DAOLIB Then
        sql = sql & " ORDER BY Iif(Haber>0, 1, 0), CodCuenta, Orden"
#Else
        sql = sql & " ORDER BY (CASE WHEN Haber>0 THEN 1 ELSE 0 END), CodCuenta, Orden"
#End If
    End If
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddPRLibroDetalle
                PRLibroDetalle(i).Recuperar rs
            End If
            .MoveNext
        Loop
        .Close
    End With
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub

Private Sub RecuperaPRAsiento()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolPRLibroDetalle Is Nothing Then Set mcolPRLibroDetalle = New Collection
    BorrarPRLibroDetalle
    'Recupera los Asientos
    sql = "SELECT A.*,B.CodCuenta, G.*  FROM PRLibroDetalle A " & _
    " INNER JOIN CTCuenta B " & _
           "ON A.IdCuenta=B.IdCuenta WHERE CodPRAsiento=" & mProps.CodPRAsiento
    '*** MAKOTO 23/nov/00 Modificado para recuperar primero los Debes y luego Haber
    If Me.Empresa.GNOpcion.ObtenerValor("OrdenarAsientoPorDebe") = "0" Then
        sql = sql & " ORDER BY Orden"
    Else
#If DAOLIB Then
        sql = sql & " ORDER BY Iif(Haber>0, 1, 0), CodCuenta, Orden"
#Else
        sql = sql & " ORDER BY (CASE WHEN Haber>0 THEN 1 ELSE 0 END), CodCuenta, Orden"
#End If
    End If
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddPRLibroDetalle
                PRLibroDetalle(i).Recuperar rs
            End If
            .MoveNext
        Loop
        .Close
    End With
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub

Public Property Let CodPRAsiento(value As Long)
    mProps.CodPRAsiento = value
    mbooModificado = True
End Property

Public Property Get CodPRAsiento() As Long
    CodPRAsiento = mProps.CodPRAsiento
End Property

Public Sub GeneraAsientoPresupuesto()
    Dim i As Long, f As String, colAT As colAsientoTemp
    Dim obj As AsientoTemp, j As Long, ctl As PRLibroDetalle
    Dim Ctc As PRCuenta
    'Cuando SoloVer está establecido a True
    If mbooSoloVer Then
        Err.Raise ERR_SOLOVER, "GNComprobante.Grabar", MSGERR_SOLOVER
    End If
    'Si es transacción de inventario, o Si es transacción de ACTIVO FIJO, jeaa 09/12/2008
    If GNTrans.Modulo = "IV" Or GNTrans.Modulo = "AF" Then
        'Y si tiene PCKardex y afecta saldo de Prov/Cli
        If (CountPCKardex > 0) And (GNTrans.AfectaSaldoPC = True) Then
            'Genera PCKardex/TSKardex para Cobro/Pago al Contado
                If Me.GNTrans.IVTipoTrans <> "A" Then
                    GeneraPCKardexContado
                End If
            End If
        End If
    'Remueve los asientos existentes (Solo auto-generados)
    For i = CountPRLibroDetalle To 1 Step -1
        'No elimina los asiento agregados por usuario
        If PRLibroDetalle(i).BandIntegridad = INTEG_AUTO Then
            mcolPRLibroDetalle.Remove i
            mbooModificado = True
        End If
    Next i
    With GNTrans
        For i = 1 To .CountAsientoPresup
            Set colAT = Nothing
            f = UCase$(.AsientosPresup(i).Formula)
            '0 significa que IdCuenta es variable
'            j = AddPRLibroDetalleAuto   'Agrega y pone INTEG_AUTO en BandIntegridad
'            Set ctl = PRLibroDetalle(j)
'            If .Asientos(i).IdCuenta <> 0 Then
'                ctl.SetIdCuentaAuto .Asientos(i).IdCuenta
'            Else
'                ctl.SetIdCuentaAuto .AsientosPresup(i).IdCuenta
'            End If
            Select Case f
            Case "TOTALDEBE"
                Set colAT = GeneraAsientoPresupTotalDebe(True)
            Case "TOTALHABER"
                Set colAT = GeneraAsientoPresupTotalHaber(True)
            Case "PCTOTALDEBE"
                Set colAT = GeneraAsientoPresupPCTotalDebe(True)
            Case "PCTOTALHABER"
                Set colAT = GeneraAsientoPresupPCTotalHaber(True)
            Case "CTTOTALDEBE"
                Set colAT = GeneraAsientoPresupCTTotalDebe(True)
            Case "CTTOTALHABER"
                Set colAT = GeneraAsientoPresupCTTotalHaber(True)
            Case "IVVENTA"
                Set colAT = GeneraAsientoPresupIVVenta(f)
            Case "IVVENTA"
                Set colAT = GeneraAsientoPresupIVVenta(f)
            Case "ROLDEBE"
                Set colAT = GeneraAsientoPresupRolTotalDebe
            Case "ROLHABER"
                Set colAT = GeneraAsientoPresupRolTotalHaber
            End Select
            If Not colAT Is Nothing Then
                For Each obj In colAT
                    j = AddPRLibroDetalleAuto   'Agrega y pone INTEG_AUTO en BandIntegridad
                    Set ctl = PRLibroDetalle(j)
                    '0 significa que IdCuenta es variable
                    If .AsientosPresup(i).IdCuenta <> 0 Then
                        ctl.SetIdCuentaAuto .AsientosPresup(i).IdCuenta
                    Else
                        ctl.SetIdCuentaAuto obj.IdCuenta
                    End If
                    If .AsientosPresup(i).BandDeudor Then
                        ctl.Debe = obj.Valor
                    Else
                        ctl.Haber = obj.Valor
                    End If
                ctl.FechaEjec = Me.FechaTrans
                If Me.Empresa.GNOpcion.ObtenerValor("DistribucionGastos") = "1" Then
                    If .AsientosPresup(i).IdCuenta <> 0 Then
                        Set Ctc = Me.Empresa.RecuperaPRCuenta(.Asientos(i).IdCuenta)
                    Else
                        Set Ctc = Me.Empresa.RecuperaPRCuenta(obj.IdCuenta)
                    End If
                    If Not Ctc Is Nothing Then
                        If Ctc.BandGastoDistribuido Then
                            ctl.CodGasto = Me.GNTrans.CodGastoPre
                        End If
                    End If
                End If
                Next obj
           End If
        Next i
    End With
End Sub

Private Function GeneraAsientoPresupTotalDebe( _
                    ByVal BandPrincipal As Boolean) As colAsientoTemp
    Dim i As Long, v As Currency, k As PCKardex, ivk As IVKardex

    Dim col As colAsientoTemp
    Set col = New colAsientoTemp
'    For i = 1 To CountPCKardex
'        Set k = PCKardex(i)
        If Not Me.GNTrans.IVPorPagar Then
            v = CalculaTotalNeto
        Else
            For i = 1 To Me.CountIVKardex
                Set ivk = Me.IVKardex(i)
                    v = v + Abs(ivk.CostoRealTotal)
            Next i
        End If

        '*** MAKOTO 08/mar/01 Agregado
        'Si es que el prov/cli no tiene asignado una cuenta, genera error
'        If (v > 0) And ((BandPrincipal And k.auxIdCuenta = 0) Or _
'            (Not BandPrincipal And k.auxIdCuenta2 = 0)) Then
'            NoTieneCuentaAsignado False, "Cuenta " & IIf(BandPrincipal, "1", "2"), k.CodProvCli
'        End If
    If Not k Is Nothing Then
        If BandPrincipal Then
            col.Add k.auxIdCuenta, v
        Else
            col.Add k.auxIdCuenta2, v
        End If
    Else
            col.Add 0, v
    End If
'    Next i
    Set GeneraAsientoPresupTotalDebe = col
    Set col = Nothing
End Function

Private Function GeneraAsientoPresupTotalHaber( _
                    ByVal BandPrincipal As Boolean) As colAsientoTemp
    Dim i As Long, v As Currency, k As PCKardex, ivk As IVKardex, afk As AFKardex
    
    Dim col As colAsientoTemp
    Set col = New colAsientoTemp
'    For i = 1 To CountPCKardex
'        Set k = PCKardex(i)
        v = CalculaTotalNeto
        
        If Not Me.GNTrans.IVPorPagar Then
            v = CalculaTotalNeto
        Else
            If Me.GNTrans.Modulo = "IV" Then
            For i = 1 To Me.CountIVKardex
                Set ivk = Me.IVKardex(i)
                    v = v + Abs(ivk.PrecioRealTotal)
            Next i
            ElseIf Me.GNTrans.Modulo = "AF" Then
                For i = 1 To Me.CountAFKardex
                    Set afk = Me.AFKardex(i)
                        v = v + Abs(afk.PrecioRealTotal)
                Next i
            
            End If
        End If
        
        
        '*** MAKOTO 08/mar/01 Agregado
        'Si es que el prov/cli no tiene asignado una cuenta, genera error
'        If (v > 0) And ((BandPrincipal And k.auxIdCuenta = 0) Or _
'            (Not BandPrincipal And k.auxIdCuenta2 = 0)) Then
'            NoTieneCuentaAsignado False, "Cuenta " & IIf(BandPrincipal, "1", "2"), k.CodProvCli
'        End If
        If BandPrincipal Then
            col.Add 0, v
        Else
            col.Add k.auxIdCuenta2, v
        End If
'    Next i
    RedondearAsiento col, Me.FormatoMoneda
    Set GeneraAsientoPresupTotalHaber = col
    Set col = Nothing
End Function

'Llama solo desde GeneraAsiento
Friend Function AddPRLibroDetalleAuto() As Long
    Dim nuevo As PRLibroDetalle
    If mcolPRLibroDetalle Is Nothing Then Set mcolPRLibroDetalle = New Collection
    Set nuevo = New PRLibroDetalle
    Set nuevo.GNComprobante = Me
    nuevo.BandIntegridad = INTEG_AUTO
    mcolPRLibroDetalle.Add nuevo
    nuevo.Descripcion = Left$(Me.Descripcion, 80)
    AddPRLibroDetalleAuto = mcolPRLibroDetalle.Count   'Devuelve el indice de nuevo elemento
    Set nuevo = Nothing
    mbooModificado = True
End Function

Public Function CalculaTotalNeto() As Double
    Dim ivk As IVKardex, afk As AFKardex
    Dim i As Long
    CalculaTotalNeto = 0
    If Me.GNTrans.Modulo = "IV" Then
        For i = 1 To Me.CountIVKardex
            Set ivk = Me.IVKardex(i)
            If Me.GNTrans.IVTipoTrans = "I" Then
                CalculaTotalNeto = CalculaTotalNeto + Abs(ivk.CostoRealTotal)
            Else
                CalculaTotalNeto = CalculaTotalNeto + Abs(ivk.PrecioRealTotal)
            End If
        Next i
    ElseIf Me.GNTrans.Modulo = "AF" Then
        For i = 1 To Me.CountAFKardex
            Set afk = Me.AFKardex(i)
            CalculaTotalNeto = CalculaTotalNeto + Abs(afk.CostoRealTotal)
        Next i
    End If
    Set ivk = Nothing
    Set afk = Nothing
End Function

Public Sub VerificaAsientoPresup(VerificaCuadrado As Boolean, _
                           VerificaInteg As Boolean)
    Dim i As Long
    'Si está descuadrado
    If (Not CuadradoPresup) And VerificaCuadrado Then
        Err.Raise ERR_DESCUADRADO, "GNComprobante.Verificación", MSGERR_DESCUADRADO
    End If
    'Si verifia integridad
    If VerificaInteg Then
'        VerificaIntegridad
    End If
End Sub

Public Function CuadradoPresup() As Boolean
    Dim i As Long, Debe As Currency, Haber As Currency
    'Calcula total de Debe y Haber en SUCRES
    For i = 1 To CountPRLibroDetalle
        Debe = Debe + PRLibroDetalle(i).DebeSucre
        Haber = Haber + PRLibroDetalle(i).HaberSucre
    Next i
    CuadradoPresup = (Format(Debe, Me.FormatoMoneda) = Format(Haber, Me.FormatoMoneda))
End Function

' anulad por error en tipo dato debia se currenci
Public Property Let PorcentajeIVA(value As Long)
End Property

Public Property Get PorcentajeIVA() As Long

End Property

Private Function GeneraAsientoPresupPCTotalDebe( _
                    ByVal BandPrincipal As Boolean) As colAsientoTemp
    Dim i As Long, v As Currency, k As PCKardex
    Dim col As colAsientoTemp
    
    Set col = New colAsientoTemp
    For i = 1 To CountPCKardex
        Set k = PCKardex(i)
        v = k.Debe
        
        '*** MAKOTO 08/mar/01 Agregado
        'Si es que el prov/cli no tiene asignado una cuenta, genera error
        If (v > 0) And ((BandPrincipal And k.auxIdCuenta = 0) Or _
            (Not BandPrincipal And k.auxIdCuenta2 = 0)) Then
            NoTieneCuentaAsignado False, "Cuenta " & IIf(BandPrincipal, "1", "2"), k.CodProvcli
        End If
        
        If BandPrincipal Then
            col.Add k.auxIdCuenta, v
        Else
            col.Add k.auxIdCuenta2, v
        End If
    Next i
    Set GeneraAsientoPresupPCTotalDebe = col
    Set col = Nothing
End Function

Private Function GeneraAsientoPresupPCTotalHaber( _
                    ByVal BandPrincipal As Boolean) As colAsientoTemp
    Dim i As Long, v As Currency, k As PCKardex
    Dim col As colAsientoTemp
    
    Set col = New colAsientoTemp
    For i = 1 To CountPCKardex
        Set k = PCKardex(i)
        v = k.Haber
        
        '*** MAKOTO 08/mar/01 Agregado
        'Si es que el prov/cli no tiene asignado una cuenta, genera error
        If (v > 0) And ((BandPrincipal And k.auxIdCuenta = 0) Or _
            (Not BandPrincipal And k.auxIdCuenta2 = 0)) Then
            NoTieneCuentaAsignado False, "Cuenta " & IIf(BandPrincipal, "1", "2"), k.CodProvcli
        End If
        
        If BandPrincipal Then
            col.Add k.auxIdCuenta, v
        Else
            col.Add k.auxIdCuenta2, v
        End If
    Next i
    Set GeneraAsientoPresupPCTotalHaber = col
    Set col = Nothing
End Function


Private Function GeneraAsientoPresupCTTotalDebe( _
                    ByVal BandPrincipal As Boolean) As colAsientoTemp
    Dim i As Long, v As Currency, k As CTLibroDetalle
    Dim col As colAsientoTemp
    
    Set col = New colAsientoTemp
    For i = 1 To CountCTLibroDetalle
        Set k = CTLibroDetalle(i)
        v = k.Debe
        
        '*** MAKOTO 08/mar/01 Agregado
        
        If BandPrincipal Then
            col.Add k.IdCuenta, v
        Else
            col.Add k.IdCuenta, v
        End If
    Next i
    Set GeneraAsientoPresupCTTotalDebe = col
    Set col = Nothing
End Function

Private Function GeneraAsientoPresupCTTotalHaber( _
                    ByVal BandPrincipal As Boolean) As colAsientoTemp
    Dim i As Long, v As Currency, k As CTLibroDetalle
    Dim col As colAsientoTemp
    
    Set col = New colAsientoTemp
    For i = 1 To CountCTLibroDetalle
        Set k = CTLibroDetalle(i)
        v = k.Haber
        
        '*** MAKOTO 08/mar/01 Agregado
        
        If BandPrincipal Then
            col.Add k.IdCuenta, v
        Else
            col.Add k.IdCuenta, v
        End If
    Next i
    Set GeneraAsientoPresupCTTotalHaber = col
    Set col = Nothing
End Function


Private Function GeneraAsientoPresupIVVenta( _
                    Param As String) As colAsientoTemp
    Dim i As Long, v As Currency, k As IVKardex
    Dim col As colAsientoTemp, IdCta As Long, rs As Recordset, sql As String
    
    Set col = New colAsientoTemp
    For i = 1 To CountIVKardex
        v = 0
        Set k = IVKardex(i)
        
        '*** MAKOTO 08/mar/01 Agregado
        'Si es que el item no tiene asignado una cuenta de Activo, genera error
        If k.auxIdCuentaActivo = 0 Then
            NoTieneCuentaAsignado True, "VENTA", k.CodInventario
        End If
        
        Select Case Right$(Param, 1)
        Case "+":   If k.PrecioRealTotal > 0 Then v = Abs(k.PrecioRealTotal)
        Case "-":   If k.PrecioRealTotal < 0 Then v = Abs(k.PrecioRealTotal)
        Case "*":   v = k.PrecioRealTotal
        Case "2":   v = Abs(k.PrecioTotal)           '*** DIEGO  14/07/03 Modificado Necesitamos Precio Total
        Case Else:
            If Me.GNTrans.IVTipoTrans = "E" Then
                If k.PrecioRealTotal < 0 Then
                    v = Abs(k.PrecioRealTotal)      '*** MAKOTO 14/dic/00 Modificado para que tome PrecioRealTotal
                Else
                    v = (k.PrecioRealTotal) * -1
                End If
            Else
                    v = Abs(k.PrecioRealTotal)      '*** MAKOTO 14/dic/00 Modificado para que tome PrecioRealTotal
            End If
        End Select
        
        If v <> 0 Then
            'Redondea al formato de moneda               '*** MAKOTO 13/feb/01
            'No con FormatoCosto porque asiento tiene que ser cuadrado con valores de Ctas x Pagar/Cobrar
            'Por ejemplo si está FormatoMoneda con 2 decimales y FormatoCosto con 4 decimales,
            'va a haber una diferencia entre Kardex de inventario y Libro mayor de inventario, algo que ya es inevitable.
'            v = MiCCur(Format$(v, Me.FormatoMoneda))   '*** MAKOTO 01/mar/01 Error, era formato de costo
            'jeaa 02/10/2006 diferencia en asiento
            If mobjGNTrans.IVTipoTrans = "I" Then
                v = MiCCur(Format$(v, Me.FormatoCosto))
            Else
                If FormatoMoneda = "#,0.00" And Me.FormatoCosto = "#,#.0000" Then
                    v = MiCCur(Format$(v, Me.FormatoMoneda))
                Else
                    v = MiCCur(Format$(v, Me.FormatoCosto))
                End If
            End If
            
        sql = "SELECT PR.idCuenta as idcta FROM CTcuenta CT inner join PRCUENTA PR on ct.codcuenta = pr.codcuenta "
        sql = sql & "  where ct.idcuenta = " & k.auxIdCuentaVenta
        Set rs = Me.Empresa.OpenRecordset(sql)
        If rs.RecordCount > 0 Then
            IdCta = rs.Fields("idcta")
        Else
            IdCta = 0
            NoTieneCuentaAsignado True, "ACTIVO", k.CodInventario
        End If
            
            col.Add IdCta, v
        End If
    Next i
    Set rs = Nothing
    'Al ultimo tiene que redondear al formato de Precio Total       '*** MAKOTO 01/mar/01
    RedondearAsiento col, Me.FormatoMoneda
    
    If col.Count Then Set GeneraAsientoPresupIVVenta = col
    Set col = Nothing
End Function

Public Property Let FechaValidez(ByVal value As Date)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.FechaValidez", MSGERR_SOLOVER
    mProps.FechaValidez = value
    mbooModificado = True
End Property

Public Property Get FechaValidez() As Date
    FechaValidez = mProps.FechaValidez
End Property

Public Function ListaTransFuente2FechaValidez( _
                    ByVal CodCentro As String) As Variant
    Dim sql As String, s As String, v As Variant, i As Long, CodT As String
    Dim cond As String, rs As Recordset, cond1 As String
    If Len(GNTrans.CodTransFuente) > 0 Then
        'Puede tener varios codigos de transaccion de fuente    ejm. (FC);(OF)
        v = Split(GNTrans.CodTransFuente, ";")
        For i = 0 To UBound(v)
            If Len(s) > 0 Then s = s & ","
            CodT = v(i)
            CodT = Left$(CodT, Len(CodT) - 1)       'Quita el signo ')'
            CodT = Right$(CodT, Len(CodT) - 1)      'Quita el signo '('
            s = s & "'" & CodT & "'"
        Next i
    Else
        Err.Raise ERR_INVALIDO, "GNComprobante.ListaTransFuente", _
                    "No está definida ningúna transacción de fuente para ésta transacción."
    End If
    '*** MAKOTO 06/mar/01 Agregado 'Nombre'
    'cambiado por Oliver 27/08/2003
    sql = "SELECT"
    If gobjMain.objCondicion.TopN > 0 Then
        sql = sql & " TOP " & gobjMain.objCondicion.TopN
    End If
    '*** MAKOTO 05/feb/01 Mod. Aumentado 'NumDocRef' y 'Nombre'
    sql = sql & " gc.TransID, gc.FechaTrans, gc.CodTrans, gc.NumTrans, "
    sql = sql & " gc.NumdocRef, gc.Nombre, gc.Descripcion, "
    sql = sql & " cc.idCentro, cc.CodCentro, cc.Descripcion AS DescCentro, gnv.CodVehiculo, gc.Estado "
    If Me.GNTrans.CodPantalla = "IVGNG" Then
        sql = sql & " ,gc.Estado1,gc.Estado2 "
    End If
    sql = sql & " , gof.FechaValidez "
    
        sql = sql & "FROM GNCentroCosto cc LEFT JOIN  GNVehiculo gnv   ON cc.IdVehiculo = gnv.IdVehiculo RIGHT JOIN "
        sql = sql & "  GNComprobante gc "
        'sql = sql & LEFT JOIN IVKARDEX IVK ON IVK.TRANSID = GC.TRANSID  "
        sql = sql & " LEFT JOIN gnoferta gof ON  gc.transid=gof.transid "
        sql = sql & IIf(Len(gobjCond.CodPC1) > 0, " Inner join PcProvCli pc ON (gc.IdProveedorRef = pc.IDProvCli  OR gc.IdClienteRef = pc.IDProvCli) ", " ")
        sql = sql & " ON cc.IdCentro = gc.IdCentro "
        If Len(cond) > 0 Then cond = cond & " AND "
       cond = cond & " gc.Estado IN ("
       If gobjMain.objCondicion.EstadoBool(ESTADO_NOAPROBADO) Then
            cond = cond & ESTADO_NOAPROBADO & ","
       End If
       If gobjMain.objCondicion.EstadoBool(ESTADO_APROBADO) Then
            cond = cond & ESTADO_APROBADO & ","
       End If
        If gobjMain.objCondicion.EstadoBool(ESTADO_DESPACHADO) Then
            cond = cond & ESTADO_DESPACHADO & ","
       End If
        If gobjMain.objCondicion.EstadoBool(ESTADO_SEMDESPACHADO) Then
            cond = cond & ESTADO_SEMDESPACHADO & ","
       End If
    cond = Mid$(cond, 1, Len(cond) - 1)
    cond = cond & ")"
      'auc 26/10/07
        If Me.GNTrans.VerFacturados And Me.GNTrans.CodPantalla = "IVGNG" Then
                 If Len(cond) > 0 Then cond = cond & " AND "
                 cond = cond & " gc.Estado1 IN ("
             If gobjMain.objCondicion.Estado1Bool(ESTADO_FACTURADO) Then
                 cond = cond & ESTADO_FACTURADO & ","
            End If
            If gobjMain.objCondicion.Estado1Bool(ESTADO_NOFACTURADO) Then
                 cond = cond & ESTADO_NOFACTURADO & ","
            End If
                 cond = Mid$(cond, 1, Len(cond) - 1)
                 cond = cond & ")"
          ElseIf Me.GNTrans.VerComprados And Me.GNTrans.CodPantalla = "IVGNG" Then
                 If Len(cond) > 0 Then cond = cond & " AND "
                 cond = cond & " gc.Estado2 IN ("
            If gobjMain.objCondicion.Estado2Bool(ESTADO_COMPRAS) Then
                 cond = cond & ESTADO_COMPRAS & ","
            End If
            If gobjMain.objCondicion.Estado2Bool(ESTADO_NOCOMPRAS) Then
                 cond = cond & ESTADO_NOCOMPRAS & ","
            End If
            cond = Mid$(cond, 1, Len(cond) - 1)
                 cond = cond & ")"
        End If
       'hasta aqui
    ' Condicion de Busqueda de Fecha
   If Len(cond) > 0 Then cond = cond & " AND "
    cond = cond & " (gc.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, gobjMain.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, gobjMain.TipoDB) & " ) "
    'Condición de CodProvCli    (Opcional)
    If Len(gobjCond.CodPC1) > 0 Then
       If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(PC.CodProvCli='" & gobjCond.CodPC1 & "')"
   End If
    If Len(s) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gc.CodTrans IN (" & s & ")"
    End If
    
    If Len(s) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " (gof.FechaValidez >= " & FechaYMD(Date, gobjMain.TipoDB) & " ) "
    End If
    
    
    If Len(CodCentro) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " cc.CodCentro='" & CodCentro & "'"
    End If
    
    If gobjCond.NumTrans1 <> 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gc.Numtrans= " & gobjCond.NumTrans1
    End If
    
    If gobjCond.NumTrans2 <> 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gc.numdocref= '" & gobjCond.NumTrans2 & "'"
    End If
    
    'Condición de CodProvCli    (Opcional)
    If Len(gobjCond.CodVehiculo) > 0 Then
       If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(gnv.CodVehiculo='" & gobjCond.CodVehiculo & "')"
   End If
    
    
    
    'JEAA 01/06/2007
    If GNTrans.ImportacionUnicaTrans Then
        cond = cond & " AND GC.TRANSID NOT IN"
        cond = cond & " (SELECT IdTransFuente"
        cond = cond & " FROM GNCentroCosto cc"
        cond = cond & " LEFT JOIN  GNVehiculo gnv   ON cc.IdVehiculo = gnv.IdVehiculo"
        cond = cond & " RIGHT JOIN  GNComprobante gc   ON cc.IdCentro = gc.IdCentro"
       cond = cond & " where gc.Estado <> 3 "
        cond = cond & " AND (gc.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, gobjMain.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, gobjMain.TipoDB) & " ) "
        cond = cond & " AND  gc.CodTrans IN ('" & GNTrans.CodTrans & "')"
        cond = cond & " AND IdTransFuente<>0 )"
        cond = cond & " and gc.transid not in( select idfuente from GNTransIdFuente g inner join gncomprobante gc on gc.transid=g.transid where gc.estado<>3 )"
        
        
    End If
    
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
'        If Len(gobjCond.CodBodega1) > 0 Then
'           cond = cond & " AND IVB.CODBODEGA = '" & gobjCond.CodBodega1 & "'"
'       End If
'     If Len(cond) > 0 Then sql = sql & " WHERE " & cond
     sql = sql & " Group by gc.TransID, gc.FechaTrans, gc.horatrans, "
     sql = sql & " gc.CodTrans, gc.NumTrans, gc.NumdocRef, gc.Nombre, gc.Descripcion,"
     sql = sql & " cc.idCentro, cc.CodCentro, cc.Descripcion, gc.Estado, gnv.CodVehiculo "
     sql = sql & " , gof.FechaValidez "
     'sql = sql & " ,ivb.descripcion"
    If Me.GNTrans.CodPantalla = "IVGNG" Then
            sql = sql & " ,gc.Estado1,gc.Estado2 "
    End If
    sql = sql & " ORDER BY gc.FechaTrans Desc, gc.horatrans desc  ,gc.CodTrans,gc.NumTrans"
   Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set ListaTransFuente2FechaValidez = rs
    Set rs = Nothing
End Function


Public Property Let PorcentIVA(value As Currency)
    mProps.PorcentIVA = value
    mbooModificado = True
End Property

Public Property Get PorcentIVA() As Currency
    PorcentIVA = mProps.PorcentIVA
End Property

Public Function VerificasiHayAsientoAutoImpresor(ByVal transid As Long, _
                                      ByRef CodTransAsiento As String) As Boolean
    Dim sql As String, rs As Recordset
    
        sql = "SELECT transid from gncomprobante "
        sql = sql & " where idtransfuente= " & transid
        sql = sql & " and codtrans= '" & CodTransAsiento & "'"
    
        Set rs = Me.Empresa.OpenRecordset(sql)
        If rs.EOF Then
            VerificasiHayAsientoAutoImpresor = True
        Else
            VerificasiHayAsientoAutoImpresor = False
        End If
        rs.Close
        Set rs = Nothing
    
End Function


Public Function ObtieneIdTransAsientoAutoimpresor(ByVal transid As Long, _
                                      ByRef CodTransAsiento As String) As Long
    Dim sql As String, rs As Recordset
    
        sql = "SELECT transid from gncomprobante "
        sql = sql & " where idtransfuente= " & transid
        sql = sql & " and codtrans= '" & CodTransAsiento & "'"
    
        Set rs = Me.Empresa.OpenRecordset(sql)
        If rs.EOF Then
            ObtieneIdTransAsientoAutoimpresor = 0
        Else
            ObtieneIdTransAsientoAutoimpresor = rs.Fields("TransID")
        End If
        rs.Close
        Set rs = Nothing
    
End Function



Friend Sub RecuperarxCosto(Id As Long)
    Dim sql As String, i As Long, ivkr As IVKardexRecargo
    Dim rs As Recordset
    

#If DAOLIB Then
    Dim qdef As DAO.QueryDef
    Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsGNComp")
    qdef.Parameters("tid").value = Id
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    sql = "spConsGNComp " & Id
    rs.Open sql, mProps.objEmpresa.Coneccion, adOpenStatic, adLockReadOnly
#End If
    
    'Recupera los datos de GNComprobante
    With rs
        mProps.transid = Id
        mProps.CodTrans = !CodTrans
        mProps.NumTrans = !NumTrans
        mProps.CodAsiento = !CodAsiento
        mProps.FechaTrans = !FechaTrans
        If Not IsNull(!HoraTrans) Then
            mProps.HoraTrans = !HoraTrans           '*** MAKOTO 07/dic/00 Agregar
        Else
            mProps.HoraTrans = 0
        End If
        mProps.codUsuario = !codUsuario
        If Not IsNull(!CodUsuarioModifica) Then mProps.CodUsuarioModifica = !CodUsuarioModifica
        mProps.Estado = !Estado
        For i = 2 To 4
            mProps.Cotizacion(i) = .Fields("Cotizacion" & i)
        Next i
        mProps.CodMoneda = !CodMoneda
        If Not IsNull(!IdProveedorRef) Then mProps.IdProveedorRef = !IdProveedorRef
        If Not IsNull(!CodProveedorRef) Then mProps.CodProveedorRef = !CodProveedorRef
        If Not IsNull(!IdClienteRef) Then mProps.IdClienteRef = !IdClienteRef
        If Not IsNull(!CodClienteRef) Then mProps.CodClienteRef = !CodClienteRef
        
        .Close
    End With
    
    Set rs = Nothing
    
    mbooEsNuevo = False
    mbooModificado = False
End Sub

Public Sub RecuperaDetalleTodoxCosto()
    RecuperaIVKardexCosto
    RecuperaAsiento
End Sub

Private Sub RecuperaIVKardexCosto()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
        
    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolIVKardex Is Nothing Then Set mcolIVKardex = New Collection
    
    BorrarIVKardex
    
    
    'Recupera los IVKardex
    sql = "SELECT * FROM vwIVKardex WHERE TransId=" & mProps.transid & " ORDER BY Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddIVKardex
                IVKardex(i).Recuperar rs
            End If
            .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub



Public Sub GrabarxCosto(VerificaCuadrado As Boolean, _
                  VerificaInteg As Boolean)
    Dim sql As String, i As Long, fgrabado As Date
    Dim rs As Recordset, pt As PermisoTrans, datos_pc As String
    Dim bandEstado As Integer  '***Agregado. Angel. 13/sep/2004
    Dim BandCuadrado As Boolean
    Dim resp As Boolean
    Dim Ven As FCVendedor
    Dim item As IVInventario 'AUC declaro esta variable para poder hacer referencia a la preaparcion
    Dim BandGrabado As Boolean, rsaux As Recordset
    Dim t As Currency, tdesc As Currency
    Dim gnt As GNTrans
    Dim Nombre As String, Ruta As String, file As String, comando As String
    BandGrabado = False

    'Verifica los detalles de asiento
    VerificaAsiento VerificaCuadrado, VerificaInteg
    
    BandCuadrado = Cuadrado  ' *** Oliver Para controlar si esta cuadrado y tiene aprobacion automatica
   
    
    'Comienza la transaccion ----------------------------
#If DAOLIB Then
    gobjWS.BeginTrans
#Else
    mProps.objEmpresa.Coneccion.BeginTrans
#End If
    On Error GoTo ErrTrap
    
    '*** MAKOTO 13/oct/00 Agregado
    If (mProps.CodAsiento = 0) And (CountCTLibroDetalle > 0) Then
        mProps.CodAsiento = AsignaNumTrans("_CTA")    'Asigna un numero cogiendo de NumTransSiguiente de GNTrans '_CTA'
    End If
    
    
    
    'Verifica que no repita CodTrans y NumTrans
    sql = "SELECT TransID FROM GNComprobante " & _
          "WHERE CodTrans='" & mProps.CodTrans & "' AND NumTrans=" & mProps.NumTrans
    If Not EsNuevo Then sql = sql & " AND TransID<>" & mProps.transid
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    If Not rs.EOF Then
        Err.Raise ERR_REPITECODIGO, "GNComprobante.Grabar", "El número de transacción ya existe."
    End If
    rs.Close


    'Cuando es nuevo
    If Not mbooEsNuevo Then
        '***Agregado. 06/ago/2004. Angel. Actualiza el usuario que modifica y no el que crea
        sql = "SELECT * FROM GNComprobante WHERE TransID=" & mProps.transid
        Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
        'Verifica la FechaGrabado para asegurar que otros usuarios no ha modificado el mismo registro
'        If rs!FechaGrabado <> mProps.FechaGrabado Then
'            Err.Raise ERR_MODIFICADO, "GNComprobante.Grabar", MSGERR_MODIFICADO
'        End If
        

        'Elimina todos los registros relacionados en CTLibroDetalle
            sql = "DELETE FROM CTLibroDetalle WHERE CodAsiento=" & mProps.CodAsiento
            mProps.objEmpresa.Execute sql, True
    
       
'''        'Elimina todos los registros relacionados en IVKardex
'''        sql = "DELETE FROM IVKardex WHERE TransID=" & mProps.TransID
'''        mProps.objEmpresa.Execute sql, True
'''
'''
'''        'Elimina todos los registros relacionados en IVKardexRecargo
'''        sql = "DELETE FROM IVKardexRecargo WHERE TransID=" & mProps.TransID
'''        mProps.objEmpresa.Execute sql, True
'''
    
    End If



    'Graba en GNComprobante
    With rs
        If Not Me.GNTrans.IVAutoImpresor Then
            !CodAsiento = mProps.CodAsiento
        Else
            If Me.FechaTrans > "30/06/2011" Then
                !CodAsiento = 0
            Else
                !CodAsiento = mProps.CodAsiento
            End If
        End If
       
        
'        .Update
#If DAOLIB Then
        rs.Bookmark = rs.LastModified
#End If
        .Move 0             'Para actualizar
        fgrabado = !fechagrabado            'Guarda la fecha de grabación para asignarla cuando logra grabar todo lo de mas
        mProps.transid = !transid             'Guarda el TransId(Autonumerico)
        .Close
    End With
    
    
    'Graba todos los IVKardex
    For i = 1 To CountIVKardex
        IVKardex(i).GrabarxCosto IVKardex(i).Id
    Next i
    
    
    If Not Me.GNTrans.IVAutoImpresor Then
        'Graba todos los Asientos
        For i = 1 To CountCTLibroDetalle
            CTLibroDetalle(i).Grabar
        Next i
    Else
        If Me.FechaTrans < "01/07/2011" Then
            For i = 1 To CountCTLibroDetalle
                CTLibroDetalle(i).Grabar
            Next i
        End If
    End If
    
    
    'Graba todos los IVKardexRecargo
'    For i = 1 To CountIVKardexRecargo
'        IVKardexRecargo(i).Grabar
'    Next i
'
'    'Graba todos los PCKardex
'    For i = 1 To CountPCKardex
'        PCKardex(i).Grabar
'    Next i
    
    
    
    
    
    BandGrabado = True
    'Completa la transacción ----------------------------
#If DAOLIB Then
    gobjWS.CommitTrans
#Else
    mProps.objEmpresa.Coneccion.CommitTrans
#End If
    'Cambia a estado Despachado las transacciones de fuente
    RaiseEvent Grabado
        
     Exit Sub
    
       
ErrTrap:
    'Anula la transacción ----------------------------
#If DAOLIB Then
    gobjWS.Rollback
#Else
    mProps.objEmpresa.Coneccion.RollbackTrans
    
#End If
    Err.Raise Err.Number, Err.Source, Err.Description
    Exit Sub
End Sub

Public Function IVKardexPesoTotalNetoTransf() As Currency
    Dim t As Currency, i As Long, v As Currency
    Dim iv As IVInventario
    v = 0
    For i = 1 To CountIVKardex
        If Me.IVKardex(i).Cantidad > 0 Then 'AUC agregado para que calcule cuando no tenga cant
            Set iv = Me.Empresa.RecuperaIVInventario(Me.IVKardex(i).CodInventario)
            v = v + (Abs(IVKardex(i).Cantidad) * iv.PesoNeto)
        End If
    Next i
    Set iv = Nothing
    IVKardexPesoTotalNetoTransf = v
End Function

Public Function IVKardexPesoTotalBrutoTransf() As Currency
    Dim t As Currency, i As Long, v As Currency
    Dim iv As IVInventario
    v = 0
    For i = 1 To CountIVKardex
        If Me.IVKardex(i).Cantidad > 0 Then 'AUC agregado para que calcule cuando no tenga cant
            Set iv = Me.Empresa.RecuperaIVInventario(Me.IVKardex(i).CodInventario)
            v = v + (Abs(IVKardex(i).Cantidad) * iv.PesoBruto)
        End If
    Next i
    Set iv = Nothing
    IVKardexPesoTotalBrutoTransf = v
End Function

Public Property Get CountAFKardexCustodio() As Long
    If mcolAFKardexCustodio Is Nothing Then RecuperaAFKardexCustodio
    CountAFKardexCustodio = mcolAFKardexCustodio.Count
End Property

Private Sub RecuperaAFKardexCustodio()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolAFKardexCustodio Is Nothing Then Set mcolAFKardexCustodio = New Collection
    BorrarAFKardexCustodio
    'Recupera los AFKardexCustodio
    sql = "SELECT * FROM vwAFKardexCustodio WHERE TransId=" & mProps.transid & " ORDER BY Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddAFKardexCustodio
                AFKardexCustodio(i).Recuperar rs

            End If
            .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub

Public Sub BorrarAFKardexCustodio()
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BorrarAFKardex", MSGERR_SOLOVER
    If mcolAFKardexCustodio Is Nothing Then Set mcolAFKardexCustodio = New Collection
    With mcolAFKardexCustodio
        Do While .Count > 0
            .Remove .Count
        Loop
    End With
    mbooModificado = True
End Sub

Public Function AddAFKardexCustodio() As Long
    Dim nuevo As AFKardexCustodio
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.AddAFKardex", MSGERR_SOLOVER
    If mcolAFKardexCustodio Is Nothing Then RecuperaAFKardexCustodio
    'Si tiene límite de número de filas         '*** MAKOTO 14/oct/00 Agregado
    ' y es nuevo comprobante
    If (Me.GNTrans.IVNumFilaMax > 0) And Me.EsNuevo Then
        'Verifica el número de filas, y no permite más del límite
        If mcolAFKardexCustodio.Count >= Me.GNTrans.IVNumFilaMax Then
            Err.Raise ERR_INVALIDO, "GNComprobante.AddAFKardexCustodio", _
                "No se puede agregar más filas porque está limitado hasta " & _
                 Me.GNTrans.IVNumFilaMax & " filas." & vbCr & vbCr & _
                "Si hay más detalle de items, regístrelos en otro comprobante." & vbCr & _
                "Si quiere cambiar el límite, váyase a la configuración de la transacción, por favor."
        End If
    End If
    Set nuevo = New AFKardexCustodio
    Set nuevo.GNComprobante = Me
    'Proporciona valores predeterminados
    nuevo.Cantidad = GNTrans.CantidadPre
    If Me.CountAFKardexCustodio = 0 Then                        '*** Makoto 16/dic/00 Modificado para que copie lo anterior
        nuevo.CodEmpleado = Me.Empresa.GNOpcion.ObtenerValor("CustodioAFPredeterminada")
    Else
        'Si no es primero copia lo anterior
        nuevo.CodEmpleado = Me.AFKardexCustodio(Me.CountAFKardexCustodio).CodEmpleado
    End If
    mcolAFKardexCustodio.Add nuevo
    AddAFKardexCustodio = mcolAFKardexCustodio.Count    'Devuelve el indice de nuevo elemento
    Set nuevo = Nothing
    mbooModificado = True
End Function

Public Sub RemoveAFKardexCustodio(ByVal ix As Long, Optional obj As AFKardexCustodio)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemoveAFKardexCustodio", MSGERR_SOLOVER
    If mcolAFKardexCustodio Is Nothing Then RecuperaAFKardexCustodio
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolAFKardexCustodio.Count
            If mcolAFKardexCustodio.item(ix) Is obj Then
                mcolAFKardexCustodio.Remove ix
                Exit For
            End If
        Next ix
        Debug.Assert True   'No se puede dar
    Else
        mcolAFKardexCustodio.Remove ix
    End If
    mbooModificado = True
End Sub

Public Property Get AFKardexCustodio(ix As Long) As AFKardexCustodio
    If mcolAFKardexCustodio Is Nothing Then RecuperaAFKardexCustodio
    Set AFKardexCustodio = mcolAFKardexCustodio.item(ix)
End Property

Public Function ListaAFKardexCustodio( _
                    ByVal ExistPorBodega As Boolean) As Variant
    Dim sql As String, rs As Recordset
#If DAOLIB Then
    Dim qdef As DAO.QueryDef
    If ExistPorBodega Then
        Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsAFKardex")
    Else
        Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsAFKardex2")
    End If
    qdef.Parameters("tid") = mProps.transid
    qdef.Parameters("Cotizacion") = Me.Cotizacion("")
    qdef.Parameters("BandEgreso") = (Me.GNTrans.IVTipoTrans = "E")
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Dim cmd As ADODB.Command
    Set cmd = New ADODB.Command
    cmd.ActiveConnection = mProps.objEmpresa.Coneccion
    'Si la base es de JET
    If mProps.objEmpresa.TipoDB = TIPODB_JET Then
        cmd.CommandType = adCmdTable
        If ExistPorBodega Then
            cmd.CommandText = "spConsAFKardex"
        Else
            cmd.CommandText = "spConsAFKardex2"
        End If
        cmd.Parameters.Append cmd.CreateParameter("tid", adInteger, adParamInput, , mProps.transid)
        cmd.Parameters.Append cmd.CreateParameter("Cotizacion", adCurrency, adParamInput, , mProps.Cotizacion)
        Set rs = cmd.Execute
    'Si la base es de SQLSvr
    Else
        sql = "spConsAFKardexCustodio " & mProps.transid & ", " & _
                                  Me.Cotizacion("") & ", " & _
                                  CadenaBool(ExistPorBodega, Me.Empresa.TipoDB) & ", " & _
                                  CadenaBool((Me.GNTrans.IVTipoTrans = "E"), Me.Empresa.TipoDB)     '*** MAKOTO 26/ene/01 Mod. Si es egreso multiplica -1
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
    End If
#End If
    Set ListaAFKardexCustodio = rs
    Set rs = Nothing
End Function
Public Function ListaAFKardexCustodio2() As Variant
    Set ListaAFKardexCustodio2 = ListaAFKardexCustodio(True)
End Function

Private Function GeneraAsientoAFDepreciacionGastoRev( _
                    Param As String) As colAsientoTemp
    Dim i As Long, v As Currency, k As AFKardex
    Dim col As colAsientoTemp
    Set col = New colAsientoTemp
    For i = 1 To CountAFKardex
        v = 0
        Set k = AFKardex(i)
        '*** MAKOTO 08/mar/01 Agregado
        'Si es que el item no tiene asignado una cuenta de Activo, genera error
        If k.auxIdCuentaDepreGasto = 0 Then
            NoTieneCuentaAsignado True, "AFDEPREGASTO", k.CodInventario
        End If
        Select Case Right$(Param, 1)
        Case "+":   If k.CostoRealTotal > 0 Then v = Abs(k.CostoRealTotal)  'Sólo positivos
        Case "-":   If k.CostoRealTotal < 0 Then v = Abs(k.CostoRealTotal)  'Sólo negativos
        Case Else:  v = Abs(k.CostoRealTotal)       'Todos con valor absoluto
        End Select
        If v <> 0 Then
            'Redondea al formato de moneda               '*** MAKOTO 13/feb/01
            'No con FormatoCosto porque asiento tiene que ser cuadrado con valores de Ctas x Pagar/Cobrar
            'Por ejemplo si está FormatoMoneda con 2 decimales y FormatoCosto con 4 decimales,
            'va a haber una diferencia entre Kardex de inventario y Libro mayor de inventario, algo que ya es inevitable.
'            v = MiCCur(Format$(v, Me.FormatoMoneda))   '*** MAKOTO 01/mar/01 Error, era formato de costo
            'jeaa 02/10/2006 diferencia en asiento
            If mobjGNTrans.IVTipoTrans = "I" Then
                v = MiCCur(Format$(v, Me.FormatoCosto))
            Else
                If FormatoMoneda = "#,0.00" And Me.FormatoCosto = "#,#.0000" Then
                    v = MiCCur(Format$(v, Me.FormatoMoneda))
                Else
                    v = MiCCur(Format$(v, Me.FormatoCosto))
                End If
            End If
            col.Add k.auxIdCuentaRevaloriza, v
        End If
    Next i
    'Al ultimo tiene que redondear al formato de Precio Total       '*** MAKOTO 01/mar/01
    RedondearAsiento col, Me.FormatoMoneda
    If col.Count Then Set GeneraAsientoAFDepreciacionGastoRev = col
    Set col = Nothing
End Function

Private Function GeneraAsientoAFDepreciacionAcumuladaRev( _
                    Param As String) As colAsientoTemp
    Dim i As Long, v As Currency, k As AFKardex
    Dim col As colAsientoTemp
    Set col = New colAsientoTemp
    For i = 1 To CountAFKardex
        v = 0
        Set k = AFKardex(i)
        '*** MAKOTO 08/mar/01 Agregado
        'Si es que el item no tiene asignado una cuenta de Activo, genera error
        If k.auxIdCuentaDepreGasto = 0 Then
            NoTieneCuentaAsignado True, "AFDEPREGASTO", k.CodInventario
        End If
        Select Case Right$(Param, 1)
        Case "+":   If k.CostoRealTotal > 0 Then v = Abs(k.CostoRealTotal)  'Sólo positivos
        Case "-":   If k.CostoRealTotal < 0 Then v = Abs(k.CostoRealTotal)  'Sólo negativos
        Case Else:  v = Abs(k.CostoRealTotal)       'Todos con valor absoluto
        End Select
        If v <> 0 Then
            'Redondea al formato de moneda               '*** MAKOTO 13/feb/01
            'No con FormatoCosto porque asiento tiene que ser cuadrado con valores de Ctas x Pagar/Cobrar
            'Por ejemplo si está FormatoMoneda con 2 decimales y FormatoCosto con 4 decimales,
            'va a haber una diferencia entre Kardex de inventario y Libro mayor de inventario, algo que ya es inevitable.
'            v = MiCCur(Format$(v, Me.FormatoMoneda))   '*** MAKOTO 01/mar/01 Error, era formato de costo
            'jeaa 02/10/2006 diferencia en asiento
            If mobjGNTrans.IVTipoTrans = "I" Then
                v = MiCCur(Format$(v, Me.FormatoCosto))
            Else
                If FormatoMoneda = "#,0.00" And Me.FormatoCosto = "#,#.0000" Then
                    v = MiCCur(Format$(v, Me.FormatoMoneda))
                Else
                    v = MiCCur(Format$(v, Me.FormatoCosto))
                End If
            End If
            col.Add k.auxIdCuentaDepRevaloriza, v
        End If
    Next i
    'Al ultimo tiene que redondear al formato de Precio Total       '*** MAKOTO 01/mar/01
    RedondearAsiento col, Me.FormatoMoneda
    If col.Count Then Set GeneraAsientoAFDepreciacionAcumuladaRev = col
    Set col = Nothing
End Function

Public Property Let TransFuente(value As String)
    'Cuando SoloVer está establecido a True, genera error
    Dim max As Integer
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.TransFuente", MSGERR_SOLOVER
    If mProps.TransFuente <> value Then
        mProps.TransFuente = value
        mbooModificado = True
    End If
End Property

Public Property Get TransFuente() As String
    TransFuente = Trim$(mProps.TransFuente)
End Property

'*** JEAA 14/10/2005
'CodInventario: Código de item que vamos a verificar
'CantLimite:    Devuelve cantidad de límite
'CantGrabada:   Devuelve cantidad que ya está grabada en otros comprobantes
Public Function VerificarLimiteItemConTransxOrden( _
                    ByVal CodTrans As String, _
                    ByVal NumTrans As Long, _
                    ByVal IdTransFuente As Long, _
                    ByVal CodInventario As String, _
                    ByVal NumOrden As Integer, _
                    ByRef CantLimite As Currency, _
                    ByRef cantGrabada As Currency) As Boolean
    Dim sql As String, rs As Recordset, CantModifi As Currency
    CantLimite = 0
    cantGrabada = 0
    'Obtiene Suma de cantidad de los comprobantes con los que vamos a comparar (Puede haber varios)
    sql = "SELECT Sum(ivk.Cantidad) AS SumaCant " & _
          "FROM GNComprobante gc INNER JOIN " & _
                        "(IVInventario iv INNER JOIN IVKardex ivk " & _
                            "ON iv.IdInventario = ivk.IdInventario) " & _
                    "ON gc.TransID=ivk.TransID "
    If Me.GNTrans.IVactualizaTRansFuente Then
        sql = sql & " WHERE (gc.CodTrans IN ('" & Me.GNTrans.IVVerificaLimiteCon & "')) AND "
        sql = sql & " (gc.Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & "))  "
    Else
        If Not Me.GNTrans.ListaTranVerificaLimite Then
            sql = sql & " WHERE (gc.CodTrans IN ('" & Me.GNTrans.IVVerificaLimiteCon & "'" & _
                                                 ")) AND " & _
                        "(gc.Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & "))  "
        Else
            sql = sql & " WHERE gc.CodTrans IN (" & PreparaListaTransLimite(Me.GNTrans.TransDespuesDevolucion) & ")"
            sql = sql & " AND  (gc.Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & "))  "
        End If
    End If
        If Me.GNTrans.IVControlaLimitePorFacturaxLinea = False Then
            sql = sql & " and (gc.IdCentro=" & Me.idCentro & ") "
        End If
            sql = sql & " and (iv.CodInventario='" & CodInventario & "')"
        If Me.GNTrans.IVControlaLimitePorFacturaxLinea Then
            If NumTrans = 0 Then
                sql = sql & " and ( GC.TRANSID=" & Me.IdTransFuente & " or  gc.idtransfuente =" & Me.IdTransFuente & ")"
            Else
                If Me.GNTrans.IVTipoTrans <> "I" Then
                    sql = sql & " and ( GC.NUMTRANS=" & NumTrans & " )"
                Else
                    sql = sql & " and ( GC.TRANSID=" & Me.IdTransFuente & " )"
                End If
            End If
        End If
        sql = sql & " and orden=" & NumOrden
        Set rs = Me.Empresa.OpenRecordset(sql)
    If Not IsNull(rs!sumaCant) Then CantLimite = rs!sumaCant
    rs.Close
   'Obtiene Suma de cantidad de los comprobantes modifica
    sql = "SELECT Sum(ivk.Cantidad) AS SumaCant " & _
          "FROM GNComprobante gc INNER JOIN " & _
                        "(IVInventario iv INNER JOIN IVKardex ivk " & _
                            "ON iv.IdInventario = ivk.IdInventario) " & _
                    "ON gc.TransID=ivk.TransID "
    If Me.GNTrans.IVactualizaTRansFuente Then
        sql = sql & " WHERE (gc.CodTrans IN ('" & Me.GNTrans.IVVerificaLimiteCon & "')) AND "
        sql = sql & " (gc.Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & "))  "
    Else
        If Not Me.GNTrans.ListaTranVerificaLimite Then
            sql = sql & " WHERE (gc.CodTrans IN ('" & Me.GNTrans.IVVerificaLimiteCon & "M')) AND " & _
                        "(gc.Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & "))  "
        Else
            sql = sql & " WHERE gc.CodTrans IN (" & PreparaListaTransLimite(Me.GNTrans.TransDespuesDevolucion) & ")"
            sql = sql & " AND  (gc.Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & "))  "
        End If
    End If
        If Me.GNTrans.IVControlaLimitePorFacturaxLinea = False Then
            sql = sql & " and (gc.IdCentro=" & Me.idCentro & ") "
        End If
            sql = sql & " and (iv.CodInventario='" & CodInventario & "')"
        If Me.GNTrans.IVControlaLimitePorFacturaxLinea Then
            If NumTrans = 0 Then
                sql = sql & " and ( GC.TRANSID=" & Me.IdTransFuente & " or  gc.idtransfuente =" & Me.IdTransFuente & ")"
            Else
                If Me.GNTrans.IVTipoTrans <> "I" Then
                    sql = sql & " and ( gc.idtransfuente=" & Me.IdTransFuente & " )"
                Else
                    sql = sql & " and ( gc.idtransfuente=" & Me.IdTransFuente & " )"
                End If
            End If
        End If
        sql = sql & " and nota1='" & NumOrden & "'"
        Set rs = Me.Empresa.OpenRecordset(sql)
    If Not IsNull(rs!sumaCant) Then CantLimite = CantLimite - rs!sumaCant
    'Obtiene Suma de cantidad de los comprobantes 'hermanos' que son del mismo C.Costo
    sql = "SELECT Sum((ivk.Cantidad)) AS SumaCant " & _
          "FROM GNTrans gt INNER JOIN " & _
                    "(GNComprobante gc INNER JOIN " & _
                        "(IVInventario iv INNER JOIN IVKardex ivk " & _
                            "ON iv.IdInventario = ivk.IdInventario) " & _
                        "ON gc.TransID=ivk.TransID) " & _
                    "ON gt.CodTrans=gc.CodTrans "
        sql = sql & " WHERE  (gc.Estado<>" & ESTADO_ANULADO & ")  "
        If Not Me.GNTrans.ListaTranVerificaLimite Then
            sql = sql & " AND ((gt.VerificaLimiteCon='" & Me.GNTrans.IVVerificaLimiteCon & "' or (gc.codtrans='" & Me.CodTrans & "M')) ) "
        End If
            If Me.GNTrans.IVControlaLimitePorFacturaxLinea = False Then
                sql = sql & " AND (gc.IdCentro=" & Me.idCentro & ")  "
            End If
            sql = sql & "  AND (iv.CodInventario='" & CodInventario & "') AND " & _
            "(gc.TransID<>" & Me.transid & ")"
                If Me.GNTrans.IVControlaLimitePorFacturaxLinea Then
                    sql = sql & " and gc.idtransfuente=" & IdTransFuente
                End If
            If Not Me.GNTrans.ListaTranVerificaLimite Then
                If InStr(1, UCase(Me.Empresa.GNOpcion.NombreEmpresa), "MEGA") = 0 Or InStr(1, UCase(Me.Empresa.GNOpcion.NombreEmpresa), "GYP") = 0 Then
                    sql = sql & " and (gc.codtrans<>'" & Me.GNTrans.IVVerificaLimiteCon & "M" & "')"
                End If
            Else
                sql = sql & " and (gc.codtrans not in (" & PreparaListaTransM(Me.GNTrans.TransDespuesDevolucion) & "))"
            End If
            sql = sql & " and (gc.CodTrans not IN ('" & Me.GNTrans.IVVerificaLimiteCon & "M')) "
            sql = sql & " and nota1='" & NumOrden & "'"
                  'Hay que excluir éste comprobante mismo
        Set rs = Me.Empresa.OpenRecordset(sql)
    If Not IsNull(rs!sumaCant) Then cantGrabada = rs!sumaCant
    rs.Close
    Set rs = Nothing
   VerificarLimiteItemConTransxOrden = True
End Function

Public Function VisualizaDespachoItemConTransxOrden( _
                    ByVal CodTrans As String, _
                    ByVal NumTrans As Long, _
                    ByVal IdTransFuente As Long, _
                    ByVal CodInventario As String, _
                    ByVal NumOrden As Integer, _
                    ByRef CantLimite As Currency, _
                    ByRef cantGrabada As Currency) As Boolean
    Dim sql As String, rs As Recordset, CantModifi As Currency
    CantLimite = 0
    cantGrabada = 0
    'Obtiene Suma de cantidad de los comprobantes con los que vamos a Pedir
    sql = "SELECT Sum(ivk.Cantidad) AS SumaCant " & _
          "FROM GNComprobante gc INNER JOIN " & _
                        "(IVInventario iv INNER JOIN IVKardex ivk " & _
                            "ON iv.IdInventario = ivk.IdInventario) " & _
                    "ON gc.TransID=ivk.TransID "
    If Me.GNTrans.IVactualizaTRansFuente Then
        sql = sql & " WHERE (gc.CodTrans IN ('" & Me.GNTrans.IVVerificaLimiteCon & "')) AND "
        sql = sql & " (gc.Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & "))  "
    Else
        If Not Me.GNTrans.ListaTranVerificaLimite Then
            sql = sql & " WHERE (gc.CodTrans IN ('" & Me.CodTrans & "'" & _
                                                 ")) AND " & _
                        "(gc.Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & "))  "
        Else
            sql = sql & " WHERE gc.CodTrans IN (" & PreparaListaTransLimite(Me.GNTrans.TransDespuesDevolucion) & ")"
            sql = sql & " AND  (gc.Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & "))  "
        End If
    End If
        If Me.GNTrans.IVControlaLimitePorFacturaxLinea = False Then
            sql = sql & " and (gc.IdCentro=" & Me.idCentro & ") "
        End If
            sql = sql & " and (iv.CodInventario='" & CodInventario & "')"
        If Me.GNTrans.IVControlaLimitePorFacturaxLinea Then
            If NumTrans = 0 Then
                sql = sql & " and ( GC.TRANSID=" & Me.IdTransFuente & " or  gc.idtransfuente =" & Me.IdTransFuente & ")"
            Else
                If Me.GNTrans.IVTipoTrans <> "I" Then
                    sql = sql & " and ( GC.NUMTRANS=" & NumTrans & " )"
                Else
                    sql = sql & " and ( GC.TRANSID=" & Me.IdTransFuente & " )"
                End If
            End If
        End If
        sql = sql & " and orden=" & NumOrden
        sql = sql & " and GC.TRANSID=" & Me.transid
        Set rs = Me.Empresa.OpenRecordset(sql)
        
    If Not IsNull(rs!sumaCant) Then CantLimite = rs!sumaCant
    rs.Close
   'Obtiene Suma de cantidad de los comprobantes modifica
    sql = "SELECT Sum(ivk.Cantidad) AS SumaCant " & _
          "FROM GNComprobante gc INNER JOIN " & _
                        "(IVInventario iv INNER JOIN IVKardex ivk " & _
                            "ON iv.IdInventario = ivk.IdInventario) " & _
                    "ON gc.TransID=ivk.TransID "
    If Me.GNTrans.IVactualizaTRansFuente Then
        sql = sql & " WHERE (gc.CodTrans IN ('" & Me.GNTrans.IVVerificaLimiteCon & "')) AND "
        sql = sql & " (gc.Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & "))  "
    Else
        If Not Me.GNTrans.ListaTranVerificaLimite Then
            sql = sql & " WHERE (gc.CodTrans IN ('" & Me.CodTrans & "M')) AND " & _
                        "(gc.Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & "))  "
        Else
            sql = sql & " WHERE gc.CodTrans IN (" & PreparaListaTransLimite(Me.GNTrans.TransDespuesDevolucion) & ")"
            sql = sql & " AND  (gc.Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & "))  "
        End If
    End If
        If Me.GNTrans.IVControlaLimitePorFacturaxLinea = False Then
            sql = sql & " and (gc.idtransfuente=" & Me.transid & ") "
        End If
            sql = sql & " and (iv.CodInventario='" & CodInventario & "')"
        If Me.GNTrans.IVControlaLimitePorFacturaxLinea Then
            If NumTrans = 0 Then
                sql = sql & " and ( GC.TRANSID=" & Me.IdTransFuente & " or  gc.idtransfuente =" & Me.IdTransFuente & ")"
            Else
                If Me.GNTrans.IVTipoTrans <> "I" Then
                    sql = sql & " and ( gc.idtransfuente=" & Me.IdTransFuente & " )"
                Else
                    sql = sql & " and ( gc.idtransfuente=" & Me.IdTransFuente & " )"
                End If
            End If
        End If
        sql = sql & " and nota1='" & NumOrden & "'"
        Set rs = Me.Empresa.OpenRecordset(sql)
    If Not IsNull(rs!sumaCant) Then CantLimite = CantLimite - rs!sumaCant
    'Obtiene Suma de cantidad de los comprobantes 'hermanos' que son del mismo C.Costo entregados
    sql = "SELECT Sum((ivk.Cantidad)) AS SumaCant " & _
          "FROM GNTrans gt INNER JOIN " & _
                    "(GNComprobante gc INNER JOIN " & _
                        "(IVInventario iv INNER JOIN IVKardex ivk " & _
                            "ON iv.IdInventario = ivk.IdInventario) " & _
                        "ON gc.TransID=ivk.TransID) " & _
                    "ON gt.CodTrans=gc.CodTrans "
        sql = sql & " WHERE  (gc.Estado<>" & ESTADO_ANULADO & ")  "
        If Not Me.GNTrans.ListaTranVerificaLimite Then
            If InStr(1, UCase(Me.Empresa.GNOpcion.NombreEmpresa), "MEGA") <> 0 Then
                sql = sql & " AND GC.codtrans in ('FCMA','FAAL')"
            Else
                sql = sql & " AND GC.codtrans in ('FC','FCD','FCT')"
            End If
        Else
        End If
            If Me.GNTrans.IVControlaLimitePorFacturaxLinea = False Then
                sql = sql & " AND (gc.Idtransfuente=" & Me.transid & ")  "
            End If
            sql = sql & "  AND (iv.CodInventario='" & CodInventario & "') AND " & _
            "(gc.TransID<>" & Me.transid & ")"
                If Me.GNTrans.IVControlaLimitePorFacturaxLinea Then
                    sql = sql & " and gc.idtransfuente=" & IdTransFuente
                End If
            If Not Me.GNTrans.ListaTranVerificaLimite Then
                If InStr(1, UCase(Me.Empresa.GNOpcion.NombreEmpresa), "MEGA") = 0 Then
                    sql = sql & " and (gc.codtrans<>'" & Me.GNTrans.IVVerificaLimiteCon & "M" & "')"
                End If
            Else
                sql = sql & " and (gc.codtrans not in (" & PreparaListaTransM(Me.GNTrans.TransDespuesDevolucion) & "))"
            End If
            sql = sql & " and (gc.CodTrans not IN ('" & Me.GNTrans.IVVerificaLimiteCon & "M')) "
            sql = sql & " and nota1='" & NumOrden & "'"
                  'Hay que excluir éste comprobante mismo
        Set rs = Me.Empresa.OpenRecordset(sql)
    If Not IsNull(rs!sumaCant) Then cantGrabada = rs!sumaCant
    rs.Close
    Set rs = Nothing
   VisualizaDespachoItemConTransxOrden = True
End Function


Public Function GeneraTransXML() As Boolean
    Dim cad As String, pc As PCProvCli, cc As GNCentroCosto, Signo As Integer
    Dim i As Long, item As IVInventario, Nombre As String, Ruta As String
    Dim file As String, numFile As Integer, cadena  As String
    On Error GoTo ErrTrap

    Ruta = Me.Empresa.GNOpcion.ObtenerValor("RutaArchivo")
    If Len(Ruta) = 0 Then
        Ruta = "c:\"
    End If
    If mbooEsNuevo Then
        Nombre = Me.CodTrans & "-" & Right("000000000" + Trim(Str(Me.NumTrans)), 9) & ".XML"
    Else
        Nombre = Me.CodTrans & "-" & Right("000000000" + Trim(Str(Me.NumTrans)), 9) & "_" & Format(DatePart("d", Date), "00") & "_" & Format(DatePart("m", Date), "00") & "_" & DatePart("yyyy", Date) & "_" & Format(DatePart("h", Time()), "00") & "_" & Format(DatePart("n", Time()), "00") & "_" & Format(DatePart("s", Time()), "00") & ".XML"
    End If
    
    file = Ruta & "\" & Nombre



    If ExisteArchivo(file) Then
    End If
    numFile = FreeFile
    Open file For Output Access Write As #numFile

    cad = "<?xml version=" & """1.0""" & "" & " encoding=" & """UTF-8""" & "?>"


    cad = "<?xml version=" & """1.0""" & " encoding=" & """ISO-8859-1""" & "" & " standalone=" & """yes""" & "?>"
    Print #numFile, cad
    cad = "<!--  Generado por Ishida Asociados   -->"
    Print #numFile, cad
    cad = "<!--  Dir: Av. Americas 2-27 y Armenillas   -->"
    Print #numFile, cad
    cad = "<!--  Telf: 098499003, 072833766      -->"
    Print #numFile, cad
    cad = "<!--  email: ishidacue@hotmail.com    -->"
    Print #numFile, cad
    cad = "<!--  Cuenca - Ecuador                -->"
    Print #numFile, cad
    cad = "<!--  SISTEMAS DE GESTION EMPRESASRIAL-->"
    Print #numFile, cad
    cad = "<transaccion>"
    Print #numFile, cad
        cad = "<cabecera>"
        Print #numFile, cad
            cad = "<empresa>" & Me.Empresa.Descripcion & "</empresa>"
            Print #numFile, cad
        
            cad = "<fechaTrans>" & Format(Me.FechaTrans, "dd/mm/yyyy") & "</fechaTrans>"
            Print #numFile, cad
            cad = "<horaTrans>" & Format(Me.HoraTrans, "HH:mm:ss") & "</horaTrans>"
            Print #numFile, cad
            cad = "<codigoTrans>" & Me.CodTrans & "</codigoTrans>"
            Print #numFile, cad
            cad = "<numeroTrans>" & Me.NumTrans & "</numeroTrans>"
            Print #numFile, cad
            cad = "<codigoAsiento>" & Me.CodAsiento & "</codigoAsiento>"
            Print #numFile, cad
            If Me.GNTrans.ClienteVisible Then
                cad = "<codigoCli>" & Me.CodClienteRef & "</codigoCli>"
                Print #numFile, cad
                Set pc = Me.Empresa.RecuperaPCProvCli(Me.CodClienteRef)
                If Not pc Is Nothing Then
                    cad = "<nombreCli>" & pc.Nombre & "</nombreCli>"
                    Print #numFile, cad
                    cad = "<ruc>" & pc.RUC & "</ruc>"
                    Print #numFile, cad
                
                End If
                Set pc = Nothing
            End If

            If Me.GNTrans.ProveedorVisible Then
                cad = "<codigoProv>" & Me.CodProveedorRef & "</codigoProv>"
                Print #numFile, cad
                Set pc = Me.Empresa.RecuperaPCProvCli(Me.CodProveedorRef)
                If Not pc Is Nothing Then
                    cad = "<nombreProv>" & pc.Nombre & "</nombreProv>"
                    Print #numFile, cad
                    cad = "<ruc>" & pc.RUC & "</ruc>"
                    Print #numFile, cad
                End If
                Set pc = Nothing
            End If

            If Me.GNTrans.GaranteVisible Then
                cad = "<codigoGar>" & Me.CodClienteRef & "</codigoGar>"
                Print #numFile, cad
                Set pc = Me.Empresa.RecuperaPCProvCli(Me.CodGaranteRef)
                If Not pc Is Nothing Then
                    cad = "<nombreGar>" & pc.Nombre & "</nombreGar>"
                    Print #numFile, cad
                End If
                Set pc = Nothing
            End If


            If Me.GNTrans.CentroCostoVisible Then
                cad = "<centroCosto>" & Me.CodCentro & "</centroCosto>"
                Print #numFile, cad
                Set cc = Me.Empresa.RecuperaPCProvCli(Me.CodCentro)
                If Not cc Is Nothing Then
                    cad = "<descCentro>" & cc.Descripcion & "</descCentro>"
                    Print #numFile, cad
                End If
                Set cc = Nothing
            End If


            If Me.GNTrans.Modulo = "IV" Then
                If Me.GNTrans.IVPideNumDoc Then
                    cad = "<numDocRef>" & Me.NumDocRef & "</numDocRef>"
                    Print #numFile, cad
                End If

                If Me.GNTrans.IVPideVendedor Then
                    cad = "<codVende>" & Me.CodVendedor & "</codVende>"
                    Print #numFile, cad
                End If

                If Me.IdTransFuente <> 0 Then
                    cad = "<transFuente>" & Me.TransFuente & "</transFuente>"
                    Print #numFile, cad
                End If

                cad = "<descripcion>" & Me.Descripcion & "</descripcion>"
                Print #numFile, cad


                cad = "<usuario>" & Me.codUsuario & "</usuario>"
                Print #numFile, cad

                cad = "<usuarioModifica>" & Me.CodUsuarioModifica & "</usuarioModifica>"
                Print #numFile, cad

                cad = "<usuarioAutoriza>" & Me.CodUsuarioAutoriza & "</usuarioAutoriza>"
                Print #numFile, cad

                cad = "<fechaGrabado>" & Me.fechagrabado & "</fechaGrabado>"
                Print #numFile, cad


                cad = "</cabecera>"
                Print #numFile, cad
                'detalle de items
                If Me.CountIVKardex > 0 Then
                    Signo = 1
                    If Me.GNTrans.IVTipoTrans = "E" Then Signo = -1

                    cad = "<detalleItems>"
                    Print #numFile, cad
                    For i = 1 To Me.CountIVKardex
                        cad = "<item>"
                        Print #numFile, cad
                        cad = "<codBodega>" & Me.IVKardex(i).CodBodega & "</codBodega>"
                        Print #numFile, cad
                        cad = "<codItem>" & Me.IVKardex(i).CodInventario & "</codItem>"
                        Print #numFile, cad
                        Set item = Me.Empresa.RecuperaIVInventario(Me.IVKardex(i).CodInventario)
                        If Not item Is Nothing Then
                            cad = "<descItem>" & item.Descripcion & "</descItem>"
                            Print #numFile, cad
                        End If
                        Set item = Nothing
                        cad = "<cantItem>" & Me.IVKardex(i).Cantidad * Signo & "</cantItem>"
                        Print #numFile, cad
                        If Not Me.GNTrans.IVPorPagar Then
                            cad = "<pu>" & Format(Me.IVKardex(i).Precio, Me.FormatoMoneda) & "</pu>"
                            Print #numFile, cad
                            cad = "<pt>" & Format(Me.IVKardex(i).PrecioTotal * Signo, Me.FormatoMoneda) & "</pt>"
                            Print #numFile, cad
                            cad = "<desc>" & Format(Me.IVKardex(i).Descuento, Me.FormatoMoneda) & "</desc>"
                            Print #numFile, cad
                            cad = "<ptr>" & Format(Me.IVKardex(i).PrecioRealTotal, Me.FormatoMoneda) & "</ptr>"
                            Print #numFile, cad
                        Else
                            cad = "<cu>" & Format(Me.IVKardex(i).Costo, Me.FormatoCosto) & "</cu>"
                            Print #numFile, cad
                            cad = "<ct>" & Format(Me.IVKardex(i).CostoTotal, Me.FormatoCosto) & "</ct>"
                            Print #numFile, cad
                            cad = "<desc>" & Format(Me.IVKardex(i).Descuento, Me.FormatoCosto) & "</desc>"
                            Print #numFile, cad
                            cad = "<ctr>" & Format(Me.IVKardex(i).CostoRealTotal, Me.FormatoCosto) & "</ctr>"
                            Print #numFile, cad

                        End If
                        cad = "</item>"
                        Print #numFile, cad

                    Next i
                    cad = "</detalleItems>"
                    Print #numFile, cad

                End If

                cad = "<detalleRecargos>"
                Print #numFile, cad
                If Me.CountIVKardexRecargo > 0 Then
                    For i = 1 To Me.CountIVKardexRecargo
                        cad = "<recargo>"
                        Print #numFile, cad
                        cad = "<codRecargo>" & Me.IVKardexRecargo(i).CodRecargo & "</codRecargo>"
                        Print #numFile, cad
                        cad = "<porRecargo>" & Format(Me.IVKardexRecargo(i).Porcentaje, Me.FormatoMoneda) & "</porRecargo>"
                        Print #numFile, cad
                        cad = "<valorRecargo>" & Format(Me.IVKardexRecargo(i).Valor, Me.FormatoMoneda) & "</valorRecargo>"
                        Print #numFile, cad
                        cad = "</recargo>"
                        Print #numFile, cad
                        
                    Next i
                End If
                cad = "</detalleRecargos>"
                Print #numFile, cad
                
                cad = "<detalleCobros>"
                Print #numFile, cad
                If Me.CountPCKardex > 0 Then
                    For i = 1 To Me.CountPCKardex
                        cad = "<cobro>"
                        Print #numFile, cad
                        cad = "<codForma>" & Me.PCKardex(i).CodForma & "</codForma>"
                        Print #numFile, cad
                        cad = "<fechaEmision>" & Me.PCKardex(i).FechaEmision & "</fechaEmision>"
                        Print #numFile, cad
                        cad = "<fechaVencimiento>" & Me.PCKardex(i).FechaVenci & "</fechaVencimiento>"
                        Print #numFile, cad
                        If Not Me.GNTrans.IVPorPagar Then
                            cad = "<valorForma>" & Format(Me.PCKardex(i).Debe, Me.FormatoMoneda) & "</valorForma>"
                        Else
                            cad = "<valorForma>" & Format(Me.PCKardex(i).Haber, Me.FormatoMoneda) & "</valorForma>"
                        End If
                        Print #numFile, cad
                        cad = "</cobro>"
                        Print #numFile, cad
                        
                    Next i
               End If
                cad = "</detalleCobros>"
                Print #numFile, cad
    
            


            End If






    cad = "</transaccion>"
    Print #numFile, cad

        Set pc = Nothing
        Set item = Nothing
        'Set suc = Nothing

Close numFile
        GeneraTransXML = True
    Exit Function
ErrTrap:
'    Print #numFile, ""
    Close #numFile
    DispErr
    Unload Me
    Exit Function
End Function

Public Property Let CodEmpleadoRef(ByVal value As String)
    Dim sql As String, rs As Recordset
    'Cuando cambia el valor
    If value <> mProps.CodEmpleadoRef Then
        If Len(value) > 0 Then
            'Actualiza IdClienteRef también
            sql = "SELECT IdProvCli FROM Empleado WHERE CodProvCli='" & value & "'"
            Set rs = mProps.objEmpresa.OpenRecordset(sql)
            If rs.EOF Then
                Err.Raise ERR_NOHAYCODIGO, "GNComprobante.CodEmpleadoRef", MSGERR_NOHAYCODIGO
                Exit Property
            Else
                IdEmpleadoRef = rs!IdProvcli
              '  RaiseEvent ClienteCambiado
            End If
            rs.Close
        Else
            IdEmpleadoRef = 0
        End If
        mProps.CodEmpleadoRef = value
        SetModificado
    End If
    Set rs = Nothing
End Property

Public Property Get CodEmpleadoRef() As String
    CodEmpleadoRef = Trim$(mProps.CodEmpleadoRef)
End Property

Public Property Let IdEmpleadoRef(ByVal value As Long)
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.IdEmpleadoRef", MSGERR_SOLOVER
    mProps.IdEmpleadoRef = value
    mbooModificado = True
End Property

Public Property Get IdEmpleadoRef() As Long
    IdEmpleadoRef = mProps.IdEmpleadoRef
End Property

Public Property Get CountRolDetalle() As Long
    If mcolRoldetalle Is Nothing Then RecuperarRolDetalle
    CountRolDetalle = mcolRoldetalle.Count
End Property

Public Property Get RolDetalle(ByVal index As Long) As RolDetalle
'    If mcolRoldetalle Is Nothing Then RecuperarRolDetalle
    Set RolDetalle = mcolRoldetalle.item(index)
End Property
Public Function RecuperaRolesN(ByVal cond As String, _
                             ByVal Accion As Byte, _
                             ByVal BandRS As Boolean, Optional ByVal IdRol As Long) As Variant   'Recordset
Dim idDep As Long
Dim idSec As Long
'Accion=1 --->Extree el personal
'Accion=2 --->Extrae los elementos del rol
'Accion=3 --->Extrae los valores
    Dim sql As String, rs As Recordset, rs1 As Recordset, numReg As Integer, i As Integer
    idSec = gobjMain.EmpresaActual.GNOpcion.ObtenerValor("seccion") + 1
   idDep = gobjMain.EmpresaActual.GNOpcion.ObtenerValor("Departamento") + 1
'    Select Case Accion
'    Case 1
       ' Set objrol = Me.Empresa.RecuperarRol(IdRol)
        sql = "select codelemento from vwRolDetalle "
        sql = sql & " Where TransID = " & Me.transid
        sql = sql & " GROUP BY codelemento"
        Set rs1 = Me.Empresa.OpenRecordset(sql)
        If Not (rs1.BOF And rs1.EOF) Then
            rs1.MoveLast
            rs1.MoveFirst
            numReg = rs1.RecordCount
            rs1.Close
        Else
            numReg = 0
        End If
        Set rs1 = Nothing
        sql = "SELECT pcgs.codgrupo" & idSec & ",pcg.codgrupo" & idDep & ",pc.CodProvCli,pc.Nombre,Pc.RUC,Pce.fechaIngreso,'' as Renuncia ,'' as Ingreso, '' as Enfermedad "
      For i = 1 To numReg
            sql = sql & ", 0 As Exp" & Trim$(Str(i))
        Next i
        sql = sql & "  FROM RolDetalle rd " & _
                                "INNER JOIN Empleado pc INNER JOIN PERSONAL Pce  on pce.idempleado = pc.idprovcli  on pc.idprovcli = rd.idempleado " & _
                                "INNER JOIN GnComprobante gn on gn.transid = rd.transid " & _
                                " INNER JOIN PCGRUPO" & idDep & " pcg ON pcg.idgrupo" & idDep & "= rd.idgrupo" & idDep & _
                                " LEFT JOIN PCGRUPO" & idSec & " pcgs ON pcgs.idgrupo" & idSec & "= rd.idgrupo" & idSec & ""
                               sql = sql & " WHERE rd.Transid = " & Me.transid
        sql = sql & " GROUP BY pcgs.codgrupo" & idSec & ",pcg.codgrupo" & idDep & ",pcg.descripcion,pc.CodProvCli,pc.Nombre,Pc.RUC,Pce.fechaIngreso"
'        If Not Me.SoloVer Then
'            sql = sql & " UNION " 'desde aqui los empleados que no estan en el rol y posiblemente fueron cambiados de departamento
'            sql = sql & "SELECT pcc.codcanton,pcg.codgrupo" & idDep & ",pc.CodProvCli,pc.Nombre,Pc.RUC,Pce.fechaIngreso "
'            For i = 1 To numReg
'                sql = sql & ", 0 As Exp" & Trim$(Str(i))
'            Next i
'            sql = sql & " FROM PcProvCli pc INNER JOIN Personal pce on pce.idempleado = pc.idprovcli " & _
'                    " LEFT JOIN pccanton pcc ON pcc.idcanton = Pc.idcanton " & _
'                    " INNER JOIN pcgrupo" & idDep & " pcg ON pcg.idgrupo" & idDep & "= pc.idgrupo" & idDep
'            If Len(cond) > 0 Then sql = sql & cond
'            'If Len(objcond.CodCiudad) > 0 Then sql = sql & " AND pcc.codciudad= '" & objcond.CodCiudad & "'"
'            sql = sql & " AND  pce.BANDACTIVO = 1 "
'            sql = sql & " AND Pce.FECHAINGRESO <= '" & Me.FechaDevol & "'"
'        End If

        If InStr(1, UCase(Me.Empresa.GNOpcion.NombreEmpresa), "HORMI") > 0 Then
           sql = sql & " ORDER BY pcgs.codgrupo" & idSec & ",pcg.codgrupo" & idDep & ",Pc.nombre"
        Else
            sql = sql & " ORDER BY pcgs.codgrupo" & idSec & ",Pc.nombre"
        End If
       'Set objrol = Nothing
    Set rs = Me.Empresa.OpenRecordset(sql)
    If BandRS Then
        Set RecuperaRolesN = rs
    Else
        RecuperaRolesN = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function
Public Function TomarNombreElementosN(ByVal IdRol As Long, ByVal bandNuevo As Boolean) As Recordset
    Dim sql As String, rs1 As Recordset
    On Error GoTo CapturaError
        'If bandNuevo Then 'cuando el rol es nuevo
        If Me.SoloVer Then 'cuando ya existe el rol
            sql = "SELECT ele.CodElemento, Ele.Orden, Ele.Tipo " & _
            "FROM Elemento ele INNER JOIN  RolDetalle rd ON rd.idelemento = ele.idelemento " & _
            " Where rd.transid = " & Me.transid
            sql = sql & "   GROUP BY ele.CodElemento, Ele.Orden, Ele.Tipo" & _
            " ORDER BY Ele.Orden , ele.CodElemento"
        ElseIf Me.EsNuevo Then
            'sql = " SELECT codelemento,editable,orden,bandActivo,visible"
            'sql = sql & " FROM Elemento INNER JOIN TipoRol TR on TR.idtipo = elemento.idtiposrol WHERE bandActivo=1 "
            'sql = sql & " AND TR.codigo = '" & gobjMain.objCondicion.CodTipoRol & "'"
            'sql = sql & " order by orden"
            sql = "SELECT * FROM VWElemento WHERE bandActivo=1 AND (codtiporol = '" & gobjMain.objCondicion.CodTipoRol & "'OR  codtiporol1 = '" & gobjMain.objCondicion.CodTipoRol & "' OR  codtiporol2 = '" & gobjMain.objCondicion.CodTipoRol & "' OR codtiporol3 = '" & gobjMain.objCondicion.CodTipoRol & "')"
'            " Or CodTipoRol1 = " '" & gobjMain.objCondicion.CodTipoRol & "'"""
            'sql = sql & "'" & gobjMain.objCondicion.CodTipoRol & "'" Or CodTipoRol3 = " '" & gobjMain.objCondicion.CodTipoRol & "'"""
            sql = sql & "order by orden"
        Else
            sql = "SELECT ele.codelemento,ele.editable,ele.orden,ele.bandActivo,ele.visible"
            sql = sql & " FROM Elemento ele inner join roldetalle rd on rd.idelemento= ele.idelemento "
            sql = sql & " WHERE rd.transid = " & IdRol
            sql = sql & " GROUP BY  ele.codelemento,ele.editable,ele.orden,ele.bandActivo,ele.visible"
            sql = sql & " order by ele.orden"
      End If
        Set rs1 = Me.Empresa.OpenRecordset(sql)
        Set TomarNombreElementosN = rs1
        Set rs1 = Nothing
        Exit Function
CapturaError:
        MsgBox Err.Description
        Set rs1 = Nothing
        Exit Function
End Function

Public Function AddRolDetalle() As Long
    Dim obj As RolDetalle
    If mcolRoldetalle Is Nothing Then RecuperarRolDetalle
    Set obj = New RolDetalle
    Set obj.GNComprobante = Me
    mcolRoldetalle.Add obj
    AddRolDetalle = mcolRoldetalle.Count
    Set obj = Nothing
    mbooModificado = True
End Function

Public Sub RecuperarRolDetalle()
    Dim sql As String, rs As Recordset, i As Long
    Dim obj As RolDetalle, mod_antes As Boolean
    mod_antes = mbooModificado
    If mcolRoldetalle Is Nothing Then Set mcolRoldetalle = New Collection
    sql = "SELECT * FROM vwRolDetalle WHERE Transid = " & Me.transid & " ORDER BY  Orden"
    Set rs = Me.Empresa.OpenRecordset(sql)
    If rs.EOF Then Exit Sub
    For i = mcolRoldetalle.Count To 1 Step -1
        mcolRoldetalle.Remove i
    Next i
    With rs
        Do Until .EOF
            If !Id > 0 Then
                i = AddRolDetalle
                RolDetalle(i).Recuperar rs
           End If
            .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes
End Sub

Public Sub GrabarRol(VerificaCuadrado As Boolean, _
                  VerificaInteg As Boolean)
'    Dim sql As String, i As Long, fgrabado As Date
'    Dim rs As Recordset, pt As PermisoTrans, datos_pc As String
'    Dim bandEstado As Integer  '***Agregado. Angel. 13/sep/2004
'    Dim BandCuadrado As Boolean
'    Dim resp As Boolean
'    Dim BandGrabado As Boolean, rsaux As Recordset
'    Dim t As Currency, tdesc As Currency
'    Dim gnt As GNTrans
'    Dim Nombre As String, Ruta As String, file As String, comando As String
'    BandGrabado = False
'    'jeaa 09/05/2005 para igualar la hora con el servidor
'    If Me.Empresa.GNOpcion.ObtenerValor("IgualarHora") = "1" Then
'        mProps.objEmpresa.AjustaHoraServidor
'    End If
'    'si otro usuario ha abierto esta transaccion para grabar.
'    If UCase(mProps.CodUsuario) <> UCase(gobjUsuarioActual.CodUsuario) Then mbooModificado = True
'    'Si no está modificado no hace nada
'    If Not mbooModificado Then Exit Sub
'    'Cuando SoloVer está establecido a True, no puede grabar
'    If mbooSoloVer Then
'        Err.Raise ERR_SOLOVER, "GNComprobante.Grabar", MSGERR_SOLOVER
'    End If
'    'Verifica los detalles de asiento
'    VerificaAsiento VerificaCuadrado, VerificaInteg
'    'Si está en modo de DEMO, verifica número de transacción grabado
'    If Me.Empresa.SiiMain.ModoDemo Then VerificaDEMO
'    BandCuadrado = Cuadrado  ' *** Oliver Para controlar si esta cuadrado y tiene aprobacion automatica
'    'Si no necesita aprobación y está cuadrado el asiento
'    If (Not GNTrans.NecesitaAprobacion) And BandCuadrado Then
'        bandEstado = ESTADO_APROBADO         '***Agregado. Angel. 13/sep/2004
'        Set pt = gobjMain.GrupoActual.PermisoActual.Trans(Me.CodTrans)
'        If pt Is Nothing Then
'            If Me.Empresa.GNOpcion.AutoImpresor Then
'                Set gnt = Me.Empresa.RecuperaGNTrans(Me.CodTrans)
'                If gnt.Modulo = "CT" Then
'                    If BandCuadrado Then
'                        'Graba como despachado
'                        bandEstado = ESTADO_DESPACHADO         '***Agregado. jeaa 26/09/2006
'                    End If
'                End If
'                Set gnt = Nothing
'            End If
'        Else
'            If pt.Despachar And BandCuadrado Then
'                'Graba como despachado
'                bandEstado = ESTADO_DESPACHADO         '***Agregado. jeaa 26/09/2006
'            End If
'        End If
'            Set pt = Nothing
'    Else
'        'mProps.Estado = ESTADO_NOAPROBADO   'Sino graba como pendiente
'        bandEstado = ESTADO_NOAPROBADO       '***Agregado. Angel. 13/sep/2004
'        If GNTrans.AprobacionAutomatica Then   'Si esta en modo automatico dede aprobacion
'                                               ' revisa si tiene permiso de aprobacion
'            Set pt = gobjMain.GrupoActual.PermisoActual.Trans(Me.CodTrans)
'            If pt.Aprobar And BandCuadrado Then
'                'mProps.Estado = ESTADO_APROBADO     'Graba como aprobado
'                bandEstado = ESTADO_APROBADO         '***Agregado. Angel. 13/sep/2004
'            End If
'            Set pt = Nothing
'        End If
'    End If
'    If EsNuevo Then
'            mProps.Estado = bandEstado
'    Else
'        If (bandEstado = ESTADO_APROBADO) And (mProps.Estado = ESTADO_DESPACHADO) Then
'            'deja como despachado no se modifica el estado
'        Else
'            mProps.Estado = bandEstado
'        End If
'    End If
'    'Comienza la transaccion ----------------------------
'#If DAOLIB Then
'    gobjWS.BeginTrans
'#Else
'    mProps.objEmpresa.Coneccion.BeginTrans
'#End If
'    On Error GoTo ErrTrap
'    If EsNuevo Then
'        mProps.NumTrans = AsignaNumTrans(mProps.CodTrans)       'Asigna un numero cogiendo de NumTransSiguiente de GNTrans
'    End If
'    'Si tiene asiento y no está asignado un número de asiento
'    If (mProps.CodAsiento = 0) And (CountCTLibroDetalle > 0) Then
'        mProps.CodAsiento = AsignaNumTrans("_CTA")    'Asigna un numero cogiendo de NumTransSiguiente de GNTrans '_CTA'
'    End If
'    'Verifica que no repita CodTrans y NumTrans
'    sql = "SELECT TransID FROM GNComprobante " & _
'          "WHERE CodTrans='" & mProps.CodTrans & "' AND NumTrans=" & mProps.NumTrans
'    If Not EsNuevo Then sql = sql & " AND TransID<>" & mProps.TransID
'    Set rs = mProps.objEmpresa.OpenRecordset(sql)
'    If Not rs.EOF Then
'        Err.Raise ERR_REPITECODIGO, "GNComprobante.Grabar", "El número de transacción ya existe."
'    End If
'    rs.Close
'    'Cuando es nuevo
'    If mbooEsNuevo Then
'        mProps.CodUsuarioModifica = mProps.CodUsuario
'        sql = "SELECT * FROM GNComprobante WHERE 1=0"
'        Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
'        rs.AddNew
'    'Cuando es modificación
'    Else
'        mProps.CodUsuarioModifica = gobjUsuarioActual.CodUsuario
'        mProps.CodUsuarioAutoriza = mProps.CodUsuarioAutoriza
'        'Recupera el registro correspondiente para modificar
'        sql = "SELECT * FROM GNComprobante WHERE TransID=" & mProps.TransID
'        Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
'    End If
'#If DAOLIB Then
'        rs.Edit
'#End If
'        'Verifica la FechaGrabado para asegurar que otros usuarios no ha modificado el mismo registro
'        If rs!FechaGrabado <> mProps.FechaGrabado Then
'            Err.Raise ERR_MODIFICADO, "GNComprobante.Grabar", MSGERR_MODIFICADO
'        End If
'        'Elimina todos los registros relacionados en CTLibroDetalle
'        sql = "DELETE FROM CTLibroDetalle WHERE CodAsiento=" & mProps.CodAsiento
'        mProps.objEmpresa.Execute sql, True
'        'Elimina todos los registros relacionados en roldetalle
'        sql = "DELETE FROM RolDetalle WHERE TransID=" & mProps.TransID
'        mProps.objEmpresa.Execute sql, True
'    'Graba en GNComprobante
'    With rs
'        !CodTrans = mProps.CodTrans
'        !NumTrans = mProps.NumTrans
'        !CodAsiento = mProps.CodAsiento
'        !IdResponsable = mProps.IdResponsable
'        sql = HoraHMS(mProps.HoraTrans, Me.Empresa.TipoDB, True, True)
'        !HoraTrans = sql
'        !FechaTrans = mProps.FechaTrans
'        !Descripcion = mProps.Descripcion
'        !CodUsuario = UCase(mProps.CodUsuario)
'        !CodUsuarioModifica = UCase(mProps.CodUsuarioModifica)
'        !Impresion = mProps.Impresion
'        !FechaGrabado = Now
'        !FechaDevol = mProps.FechaDevol
'        !Estado1 = mProps.Estado1
'        !Estado2 = mProps.Estado2
'        .Update
'#If DAOLIB Then
'        rs.Bookmark = rs.LastModified
'#End If
'        .Move 0             'Para actualizar
'        fgrabado = !FechaGrabado            'Guarda la fecha de grabación para asignarla cuando logra grabar todo lo de mas
'        mProps.TransID = !TransID             'Guarda el TransId(Autonumerico)
'        .Close
'    End With
'        For i = 1 To CountCTLibroDetalle
'            CTLibroDetalle(i).Grabar
'        Next i
'    'Graba todos los roldealle
'        For i = 1 To CountRolDetalle
'            RolDetalle(i).Grabar
'        Next i
'    'Graba en GNLogAccion para utilizarlo como historial
'    If mbooEsNuevo Then             '*** ANGEL 18/mar/02
'        mProps.objEmpresa.GrabaGNLogAccion "NUE_TRANS", "Crea Transacción: " & _
'                                                         mProps.CodTrans & mProps.NumTrans, GNTrans.Modulo
'    Else
'        'jeaa 05/04/05 agregado quien creo transaccion
'        mProps.objEmpresa.GrabaGNLogAccion "MOD_TRANS", "Modifica Transacción: " & _
'                                                         mProps.CodTrans & mProps.NumTrans & " Creado por: " & mProps.CodUsuario, GNTrans.Modulo
'   End If
'    BandGrabado = True
'    'Completa la transacción ----------------------------
'#If DAOLIB Then
'    gobjWS.CommitTrans
'#Else
'    mProps.objEmpresa.Coneccion.CommitTrans
'#End If
'    mProps.FechaGrabado = fgrabado      'Aplica la fecha de grabación
'    mbooEsNuevo = False
'    mbooModificado = False
'    RaiseEvent Grabado
'     Exit Sub
'ErrTrap:
'    'Anula la transacción ----------------------------
'#If DAOLIB Then
'    gobjWS.Rollback
'#Else
'    mProps.objEmpresa.Coneccion.RollbackTrans
'#End If
'    Err.Raise Err.Number, Err.Source, Err.Description
'    Exit Sub
End Sub

Private Function GeneraAsientoRolTotalDebe() As colAsientoTemp
    Dim i As Long, v As Currency, k As RolDetalle, pe As Personal, ele As Elementos
    Dim IdCta As Long
    Dim X As Long, Y As Integer
    Dim idGasto As Long
    Dim Acu As Currency
  Dim col As colAsientoTemp
   Dim idDep As Integer
   Dim idSec As Integer
   Dim vec() As Variant
   Dim gnGasto As gnGasto
   Dim ind As Integer
   idDep = gobjMain.EmpresaActual.GNOpcion.ObtenerValor("Departamento") + 1
   idSec = gobjMain.EmpresaActual.GNOpcion.ObtenerValor("Seccion") + 1
   Y = Y + 1
  Set col = New colAsientoTemp
    For i = 1 To CountRolDetalle
        Set k = RolDetalle(i)
        v = k.Valor
        Set ele = Me.Empresa.RecuperarElemento(k.idElemento)
        If Not ele Is Nothing Then
            If ele.Debe Then
'                If siGastoPorcentaje(k.IdEmpleado, vec(), ind) Then 'AGREGADO PARA RUTA DE COBRE HABILITAR SI CONTRATA
'                    For X = 0 To UBound(vec, 2)
'                        If Val(vec(1, X)) > 0 Then
'                            Set gnGasto = Me.Empresa.RecuperaGNGasto(vec(0, X))
'                            If Not gnGasto Is Nothing Then
'                                If k.auxDebe And k.auxIdCuentaGeneral > 0 Then
'                                    If Me.GNTrans.AsientoGastoxZona And ele.BandGastoDist Then
'                                        If Y = ind Then
'                                            col.AddG k.auxIdCuentaGeneral, v - Acu, gnGasto.idGasto
'                                        Else
'                                            col.AddG k.auxIdCuentaGeneral, v * (vec(1, X) / 100), gnGasto.idGasto
'                                            Acu = Acu + v * (vec(1, X) / 100)
'                                            Y = Y + 1
'                                        End If
'                                    End If
'                                End If
'                            End If
'                            Set gnGasto = Nothing
'                        End If
'                    Next
'                Else
                    'v = k.Valor
                   If Me.GNTrans.AsientoGastoxZona Then
                       If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ConAsiento")) > 0 Then
                            If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("SeContabilizaPor") = 0 Then
                                'AUC CONTABILIZACION PERSONAL
                                IdCta = Me.Empresa.RecuperaCtaCuentasPersonal(k.IdEmpleado, k.idElemento)
                            ElseIf gobjMain.EmpresaActual.GNOpcion.ObtenerValor("SeContabilizaPor") = 1 Then
                                'TOMA EL GRUPO
                                Select Case gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ConAsiento")
                                    Case 0
                                        idGasto = Me.Empresa.RecuperaIdGasto(k.IdGrupo1, k.IdEmpleado, k.idElemento)
                                    Case 1
                                        idGasto = Me.Empresa.RecuperaIdGasto(k.IdGrupo2, k.IdEmpleado, k.idElemento)
                                    Case 2
                                        idGasto = Me.Empresa.RecuperaIdGasto(k.IdGrupo3, k.IdEmpleado, k.idElemento)
                                    Case 3
                                        idGasto = Me.Empresa.RecuperaIdGasto(k.IdGrupo4, k.IdEmpleado, k.idElemento)
                                End Select
                           End If
                        End If
                    End If
                    If k.auxDebe And k.auxIdCuentaGeneral > 0 Then
                        If Me.GNTrans.AsientoGastoxZona And ele.BandGastoDist Then
                            col.AddG k.auxIdCuentaGeneral, v, idGasto
                        Else
                            col.Add k.auxIdCuentaGeneral, v
                        End If
                    End If
                End If
            End If
       'End If
   Next i
    'RedondearAsiento col, Me.FormatoMoneda
    RedondearAsientoRol col, Me.FormatoMoneda
    Set GeneraAsientoRolTotalDebe = col
    Set col = Nothing
End Function


Private Function GeneraAsientoRolTotalHaber() As colAsientoTemp
    Dim i As Long, v As Currency, k As RolDetalle, IdCta As Long, pe As Personal, ele As Elementos
    Dim col As colAsientoTemp
    Dim idGasto As Long
    Dim X As Long, Y As Integer
    Dim Acu As Currency
    Dim gnGasto As gnGasto
    Dim vec() As Variant
    Dim ind As Integer
  Set col = New colAsientoTemp
    For i = 1 To CountRolDetalle
        Set k = RolDetalle(i)
        v = k.Valor
        Set ele = Me.Empresa.RecuperarElemento(k.idElemento)
        If ele.Haber Then
'            If siGastoPorcentaje(k.IdEmpleado, vec(), ind) Then
'                    For X = 0 To UBound(vec, 2)
'                        If Val(vec(1, X)) > 0 Then
'                            Set gnGasto = Me.Empresa.RecuperaGNGasto(vec(0, X))
'                            If Not gnGasto Is Nothing Then
'                                If k.auxHaber And k.auxIdCuentaGeneral > 0 Then
'                                    If Me.GNTrans.AsientoGastoxZona And ele.BandGastoDist Then
'                                        If Y = ind Then
'                                            col.AddG k.auxIdCuentaGeneral, v - Acu, gnGasto.idGasto
'                                        Else
'                                            col.AddG k.auxIdCuentaGeneral, v * (vec(1, X) / 100), gnGasto.idGasto
'                                            Acu = Acu + v * (vec(1, X) / 100)
'                                            Y = Y + 1
'                                        End If
'                                    End If
'                                End If
'                            End If
'                            Set gnGasto = Nothing
'                        End If
'                    Next
'            Else
               If Me.GNTrans.AsientoGastoxZona Then
                    If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ConAsiento")) > 0 Then
                        If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("SeContabilizaPor") = 0 Then
                            IdCta = Me.Empresa.RecuperaCtaCuentasPersonal(k.IdEmpleado, k.idElemento)
                        ElseIf gobjMain.EmpresaActual.GNOpcion.ObtenerValor("SeContabilizaPor") = 1 Then
                            Select Case gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ConAsiento")
                                    Case 0
                                        idGasto = Me.Empresa.RecuperaIdGasto(k.IdGrupo1, k.IdEmpleado, k.idElemento)
                                    Case 1
                                        idGasto = Me.Empresa.RecuperaIdGasto(k.IdGrupo2, k.IdEmpleado, k.idElemento)
                                    Case 2
                                        idGasto = Me.Empresa.RecuperaIdGasto(k.IdGrupo3, k.IdEmpleado, k.idElemento)
                                    Case 3
                                        idGasto = Me.Empresa.RecuperaIdGasto(k.IdGrupo4, k.IdEmpleado, k.idElemento)
                             End Select
                            'idGasto = Me.Empresa.RecuperaIdGasto(k.IdGrupo1, k.IdEmpleado, k.idElemento)
                      End If
                    End If
                End If
                   If k.auxHaber And k.auxIdCuentaGeneral > 0 Then
                        If Me.GNTrans.AsientoGastoxZona And ele.BandGastoDist Then
                            col.AddG k.auxIdCuentaGeneral, v, idGasto
                        Else
                            col.Add k.auxIdCuentaGeneral, v
                        End If
                    End If
            End If
        'End If
   Next i
    'RedondearAsiento col, Me.FormatoMoneda
    RedondearAsientoRol col, Me.FormatoMoneda
    Set GeneraAsientoRolTotalHaber = col
    Set col = Nothing
    Set pe = Nothing
    Set ele = Nothing
End Function

'AUC 2011
Public Function ListaRolDetalle(ByVal codemp As String, ByVal bandTipo As Boolean) As Recordset
    Dim sql As String, rs As Recordset
        sql = "Select * from vwRolDetalle where codempleado = '" & codemp & "' And TransID = " & mProps.transid
        If bandTipo Then
            sql = sql & " AND TIPO IN (0,2)"
        Else
            sql = sql & "  AND TIPO IN (1,3,6)"
        End If
        sql = sql & "AND imprimir = 1"
        sql = sql & "Order by orden"
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set ListaRolDetalle = rs
    Set rs = Nothing
End Function

Public Function ListaEmpleadoDetalleGeneral(ByVal IdRol As Long) As Recordset
Dim sql As String, rs As Recordset
On Error GoTo CapturaError
        sql = "SELECT pc.CodProvCli,pc.nombre,Pc.RUC,Pe.fechaingreso " & _
           " FROM roldetalle rd " & _
            " INNER JOIN Empleado pc INNER JOIN Personal Pe ON Pe.Idempleado = pc.idprovcli  " & _
           "ON rd.idempleado = pc.idprovcli" & _
           " WHERE RD.TRANSID = " & IdRol & _
           " GROUP BY rd.idgrupo1, pc.CodProvCli,pc.nombre,Pc.RUC,Pe.fechaingreso order by rd.idgrupo1,pc.nombre "

    Set rs = gobjMain.EmpresaActual.OpenRecordset(sql)
    Set ListaEmpleadoDetalleGeneral = rs
    Set rs = Nothing
    Exit Function
CapturaError:
    MsgBox Err.Number & " " & Err.Description
    Set rs = Nothing
    Exit Function
End Function

Public Function NetoRol(ByVal IdEmpleado As Long) As Currency
Dim sql As String, rs As Recordset
On Error GoTo CapturaError
    sql = "SELECT Valor from vwroldetalle where idempleado =" & IdEmpleado
    sql = sql & " AND TRANSID =" & Me.transid
    sql = sql & " AND tipo = 5 "
    Set rs = Me.Empresa.OpenRecordset(sql)
    If rs.EOF Then
        Err.Raise ERR_SOLOVER, "Roldetalle.NetoRol", MSGERR_SOLOVER
   End If
    Do While Not rs.EOF
    'If Not IsNull(rs!Valor) Then
        NetoRol = rs!Valor
        rs.MoveNext
    Loop
    'End If
   Exit Function
    Set rs = Nothing
CapturaError:
    'MsgBox Err.Description
    Exit Function
    Set rs = Nothing
End Function

Public Sub EliminarRol(ByVal CodEmpleado As String)
    Dim sql As String, rs As Recordset
    Dim pc As PCProvCli
    Set pc = Me.Empresa.RecuperaEmpleado(CodEmpleado)
        sql = "DELETE FROM RolDetalle  WHERE transid = " & Me.transid & " And idempleado = " & pc.IdProvcli
        Me.Empresa.Coneccion.Execute sql
        Me.Empresa.RaiseRefreshEvent REFRESH_ROLDETALLE
        EliminarRolDetalle pc.IdProvcli
    Set pc = Nothing
End Sub
'BORRA DE LA MEMORIA
Private Sub EliminarRolDetalle(ByVal IdEmpleado As Long)
    Dim i As Long
    For i = Me.CountRolDetalle To 1 Step -1
        If Me.RolDetalle(i).IdEmpleado = IdEmpleado Then
            mcolRoldetalle.Remove i
            i = IIf(i < Me.CountRolDetalle, i + 1, i)
        End If
    Next i
End Sub


Public Sub RemoveROLDEETALLE(ByVal ix As Long, Optional obj As RolDetalle)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemoveIVKardex", MSGERR_SOLOVER
    If mcolRoldetalle Is Nothing Then RecuperarRolDetalle
    
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolRoldetalle.Count
            If mcolRoldetalle.item(ix) Is obj Then
                mcolRoldetalle.Remove ix
                Exit For
            End If
        Next ix
        Debug.Assert True   'No se puede dar
    Else
        mcolRoldetalle.Remove ix
    End If
    
    mbooModificado = True
End Sub


Public Sub RecuperarRolDetallexEmple(ByVal CodEmpleado As String)
    Dim sql As String, rs As Recordset, i As Long
    Dim obj As RolDetalle, mod_antes As Boolean
    mod_antes = mbooModificado
    If mcolRoldetalle Is Nothing Then Set mcolRoldetalle = New Collection
    sql = "SELECT * FROM vwRolDetalle WHERE Transid = " & Me.transid & " AND CodEmpleado = '" & CodEmpleado & "'  ORDER BY  Orden"
    Set rs = Me.Empresa.OpenRecordset(sql)
    If rs.EOF Then Exit Sub
    For i = mcolRoldetalle.Count To 1 Step -1
        mcolRoldetalle.Remove i
    Next i
    With rs
        Do Until .EOF
            If !Id > 0 Then
                i = AddRolDetalle
                RolDetalle(i).Recuperar rs
           End If
            .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes
End Sub

Private Sub ImportaPRAsiento( _
                    ByVal Fuente As GNComprobante, _
                    ByVal Incremental As Boolean)
    Dim i As Long, PRCtd As PRLibroDetalle
    If mcolPRLibroDetalle Is Nothing Then Set mcolPRLibroDetalle = New Collection
    'Si es importación incremental, no se borra lo anterior
    If Not Incremental Then             '*** MAKOTO 15/dic/00
        BorrarPRLibroDetalle
    End If
    'Importa detalles de asiento contable
    For i = 1 To Fuente.CountPRLibroDetalle
        Set PRCtd = Fuente.PRLibroDetalle(i).Clone
        Set PRCtd.GNComprobante = Me
        mcolPRLibroDetalle.Add PRCtd
    Next i
End Sub

Public Function GeneraArchivoTransXML(ByVal EsNuevo As Boolean) As Boolean
    Dim cad As String, pc As PCProvCli, cc As GNCentroCosto, Signo As Integer
    Dim i As Long, item As IVInventario, Nombre As String, Ruta As String
    Dim file As String, numFile As Integer, cadena  As String
    On Error GoTo ErrTrap

    Ruta = Me.Empresa.GNOpcion.ObtenerValor("RutaArchivo")
    If Len(Ruta) = 0 Then
        Ruta = "c:\"
    End If
    Select Case Me.Estado
    Case 0, 1, 2, 4
       If EsNuevo Then
            Nombre = Me.CodTrans & "-" & Right("000000000" + Trim(Str(Me.NumTrans)), 9) & ".xml"
        Else
            Nombre = Me.CodTrans & "-" & Right("000000000" + Trim(Str(Me.NumTrans)), 9) & "_" & Format(DatePart("d", Date), "00") & "_" & Format(DatePart("m", Date), "00") & "_" & DatePart("yyyy", Date) & "_" & Format(DatePart("h", Time()), "00") & "_" & Format(DatePart("n", Time()), "00") & "_" & Format(DatePart("s", Time()), "00") & ".xml"
        End If
    Case 3
        Nombre = Me.CodTrans & "-" & Right("000000000" + Trim(Str(Me.NumTrans)), 9) & "_" & Format(DatePart("d", Date), "00") & "_" & Format(DatePart("m", Date), "00") & "_" & DatePart("yyyy", Date) & "_" & Format(DatePart("h", Time()), "00") & "_" & Format(DatePart("n", Time()), "00") & "_" & Format(DatePart("s", Time()), "00") & "_ANU.xml"
    End Select
    
    file = Ruta & "\" & Nombre



    If ExisteArchivo(file) Then
    End If
    numFile = FreeFile
    Open file For Output Access Write As #numFile

    cad = "<?xml version=" & """1.0""" & "" & " encoding=" & """UTF-8""" & "?>"


    cad = "<?xml version=" & """1.0""" & " encoding=" & """ISO-8859-1""" & "" & " standalone=" & """yes""" & "?>"
    Print #numFile, cad
    cad = "<!--  Generado por Ishida Asociados   -->"
    Print #numFile, cad
    cad = "<!--  Dir: Av. Americas 2-27 y Armenillas   -->"
    Print #numFile, cad
    cad = "<!--  Telf: 098499003, 072833766      -->"
    Print #numFile, cad
    cad = "<!--  email: ishidacue@hotmail.com    -->"
    Print #numFile, cad
    cad = "<!--  Cuenca - Ecuador                -->"
    Print #numFile, cad
    cad = "<!--  SISTEMAS DE GESTION EMPRESASRIAL-->"
    Print #numFile, cad
    cad = "<transaccion>"
    Print #numFile, cad
        cad = "<cabecera>"
        Print #numFile, cad
            cad = "<empresa>" & Me.Empresa.GNOpcion.NombreEmpresa & "</empresa>"
            Print #numFile, cad
        
            cad = "<fechaTrans>" & Format(Me.FechaTrans, "dd/mm/yyyy") & "</fechaTrans>"
            Print #numFile, cad
            cad = "<horaTrans>" & Format(Me.HoraTrans, "HH:mm:ss") & "</horaTrans>"
            Print #numFile, cad
            cad = "<codigoTrans>" & Me.CodTrans & "</codigoTrans>"
            Print #numFile, cad
            cad = "<numeroTrans>" & Me.NumTrans & "</numeroTrans>"
            Print #numFile, cad
            cad = "<codigoAsiento>" & Me.CodAsiento & "</codigoAsiento>"
            Print #numFile, cad
            If Me.GNTrans.ClienteVisible Then
                cad = "<codigoCli>" & Me.CodClienteRef & "</codigoCli>"
                Print #numFile, cad
                Set pc = Me.Empresa.RecuperaPCProvCli(Me.CodClienteRef)
                If Not pc Is Nothing Then
                    cad = "<nombreCli>" & pc.Nombre & "</nombreCli>"
                    Print #numFile, cad
                    cad = "<ruc>" & pc.RUC & "</ruc>"
                    Print #numFile, cad
                
                End If
                Set pc = Nothing
            End If

            If Me.GNTrans.ProveedorVisible Then
                cad = "<codigoProv>" & Me.CodProveedorRef & "</codigoProv>"
                Print #numFile, cad
                Set pc = Me.Empresa.RecuperaPCProvCli(Me.CodProveedorRef)
                If Not pc Is Nothing Then
                    cad = "<nombreProv>" & pc.Nombre & "</nombreProv>"
                    Print #numFile, cad
                    cad = "<ruc>" & pc.RUC & "</ruc>"
                    Print #numFile, cad
                End If
                Set pc = Nothing
            End If

            If Me.GNTrans.GaranteVisible Then
                cad = "<codigoGar>" & Me.CodClienteRef & "</codigoGar>"
                Print #numFile, cad
                Set pc = Me.Empresa.RecuperaPCProvCli(Me.CodGaranteRef)
                If Not pc Is Nothing Then
                    cad = "<nombreGar>" & pc.Nombre & "</nombreGar>"
                    Print #numFile, cad
                End If
                Set pc = Nothing
            End If


            If Me.GNTrans.CentroCostoVisible Then
                cad = "<centroCosto>" & Me.CodCentro & "</centroCosto>"
                Print #numFile, cad
                Set cc = Me.Empresa.RecuperaGNCentroCosto(Me.CodCentro)
                If Not cc Is Nothing Then
                    cad = "<descCentro>" & cc.Descripcion & "</descCentro>"
                    Print #numFile, cad
                End If
                Set cc = Nothing
            End If


            If Me.GNTrans.Modulo = "IV" Then
                If Me.GNTrans.IVPideNumDoc Then
                    cad = "<numDocRef>" & Me.NumDocRef & "</numDocRef>"
                    Print #numFile, cad
                End If

                If Me.GNTrans.IVPideVendedor Then
                    cad = "<codVende>" & Me.CodVendedor & "</codVende>"
                    Print #numFile, cad
                End If

                If Me.IdTransFuente <> 0 Then
                    cad = "<transFuente>" & Me.TransFuente & "</transFuente>"
                    Print #numFile, cad
                End If

                cad = "<descripcion>" & Me.Descripcion & "</descripcion>"
                Print #numFile, cad


                cad = "<usuario>" & Me.codUsuario & "</usuario>"
                Print #numFile, cad

                cad = "<usuarioModifica>" & Me.CodUsuarioModifica & "</usuarioModifica>"
                Print #numFile, cad

                cad = "<usuarioAutoriza>" & Me.CodUsuarioAutoriza & "</usuarioAutoriza>"
                Print #numFile, cad

                cad = "<fechaGrabado>" & Format(Me.fechagrabado, "dd/mm/yyyy") & "-" & Format(Me.fechagrabado, "HH:mm:ss") & "</fechaGrabado>"
                Print #numFile, cad


                cad = "</cabecera>"
                Print #numFile, cad
                'detalle de items
                If Me.CountIVKardex > 0 Then
                    Signo = 1
                    If Me.GNTrans.IVTipoTrans = "E" Then Signo = -1

                    cad = "<detalleItems>"
                    Print #numFile, cad
                    For i = 1 To Me.CountIVKardex
                        cad = "<item>"
                        Print #numFile, cad
                        cad = "<codBodega>" & Me.IVKardex(i).CodBodega & "</codBodega>"
                        Print #numFile, cad
                        cad = "<codItem>" & Me.IVKardex(i).CodInventario & "</codItem>"
                        Print #numFile, cad
                        Set item = Me.Empresa.RecuperaIVInventario(Me.IVKardex(i).CodInventario)
                        If Not item Is Nothing Then
                            cad = "<descItem>" & item.Descripcion & "</descItem>"
                            Print #numFile, cad
                        End If
                        Set item = Nothing
                        cad = "<cantItem>" & Me.IVKardex(i).Cantidad * Signo & "</cantItem>"
                        Print #numFile, cad
                        If Not Me.GNTrans.IVPorPagar Then
                            cad = "<pu>" & Format(Me.IVKardex(i).Precio, Me.FormatoMoneda) & "</pu>"
                            Print #numFile, cad
                            cad = "<pt>" & Format(Me.IVKardex(i).PrecioTotal * Signo, Me.FormatoMoneda) & "</pt>"
                            Print #numFile, cad
                            cad = "<desc>" & Format(Me.IVKardex(i).Descuento, Me.FormatoMoneda) & "</desc>"
                            Print #numFile, cad
                            cad = "<ptr>" & Format(Me.IVKardex(i).PrecioRealTotal, Me.FormatoMoneda) * -1 & "</ptr>"
                            Print #numFile, cad
                        Else
                            cad = "<cu>" & Format(Me.IVKardex(i).Costo, Me.FormatoCosto) & "</cu>"
                            Print #numFile, cad
                            cad = "<ct>" & Format(Me.IVKardex(i).CostoTotal, Me.FormatoCosto) & "</ct>"
                            Print #numFile, cad
                            cad = "<desc>" & Format(Me.IVKardex(i).Descuento, Me.FormatoCosto) & "</desc>"
                            Print #numFile, cad
                            cad = "<ctr>" & Format(Me.IVKardex(i).CostoRealTotal, Me.FormatoCosto) & "</ctr>"
                            Print #numFile, cad
                        End If
                        cad = "</item>"
                        Print #numFile, cad

                    Next i
                    cad = "</detalleItems>"
                    Print #numFile, cad

                End If

                cad = "<detalleRecargos>"
                Print #numFile, cad
                If Me.CountIVKardexRecargo > 0 Then
                    For i = 1 To Me.CountIVKardexRecargo
                        cad = "<recargo>"
                        Print #numFile, cad
                        cad = "<codRecargo>" & Me.IVKardexRecargo(i).CodRecargo & "</codRecargo>"
                        Print #numFile, cad
                        cad = "<porRecargo>" & Format(Me.IVKardexRecargo(i).Porcentaje, Me.FormatoMoneda) & "</porRecargo>"
                        Print #numFile, cad
                        cad = "<valorRecargo>" & Format(Me.IVKardexRecargo(i).Valor, Me.FormatoMoneda) & "</valorRecargo>"
                        Print #numFile, cad
                        cad = "</recargo>"
                        Print #numFile, cad
                        
                    Next i
                End If
                cad = "</detalleRecargos>"
                Print #numFile, cad
                
                cad = "<detalleCobros>"
                Print #numFile, cad
                If Me.CountPCKardex > 0 Then
                    For i = 1 To Me.CountPCKardex
                        cad = "<cobro>"
                        Print #numFile, cad
                        cad = "<codForma>" & Me.PCKardex(i).CodForma & "</codForma>"
                        Print #numFile, cad
                        cad = "<fechaEmision>" & Me.PCKardex(i).FechaEmision & "</fechaEmision>"
                        Print #numFile, cad
                        cad = "<fechaVencimiento>" & Me.PCKardex(i).FechaVenci & "</fechaVencimiento>"
                        Print #numFile, cad
                        If Not Me.GNTrans.IVPorPagar Then
                            cad = "<valorForma>" & Format(Me.PCKardex(i).Debe, Me.FormatoMoneda) & "</valorForma>"
                        Else
                            cad = "<valorForma>" & Format(Me.PCKardex(i).Haber, Me.FormatoMoneda) & "</valorForma>"
                        End If
                        Print #numFile, cad
                        cad = "</cobro>"
                        Print #numFile, cad
                        
                    Next i
               End If
                cad = "</detalleCobros>"
                Print #numFile, cad
    
            


            End If






    cad = "</transaccion>"
    Print #numFile, cad

        Set pc = Nothing
        Set item = Nothing
        'Set suc = Nothing

Close numFile
        GeneraArchivoTransXML = True
    Exit Function
ErrTrap:
'    Print #numFile, ""
    Close #numFile
    DispErr
    Unload Me
    Exit Function
End Function

Public Property Let CodTipoRol(ByVal value As String)
    Dim sql As String, rs As Recordset
    'Cuando cambia el valor
    If value <> mProps.CodTipoRol Then
        If Len(value) > 0 Then
            'Actualiza IdClienteRef también
            sql = "SELECT IdTipo FROM tiporol WHERE Codigo='" & value & "'"
            Set rs = mProps.objEmpresa.OpenRecordset(sql)
            If rs.EOF Then
                Err.Raise ERR_NOHAYCODIGO, "GNComprobante.Codtiporol", MSGERR_NOHAYCODIGO
                Exit Property
            Else
                IdTipoRol = rs!IdTipo
            End If
            rs.Close
        Else
            IdTipoRol = 0
        End If
        mProps.CodTipoRol = value
        SetModificado
    End If
    Set rs = Nothing
End Property
Public Property Get CodTipoRol() As String
    CodTipoRol = Trim$(mProps.CodTipoRol)
End Property
Public Property Let IdTipoRol(ByVal value As Long)
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.Idtiporol", MSGERR_SOLOVER
    mProps.IdTipoRol = value
    mbooModificado = True
End Property
Public Property Get IdTipoRol() As Long
    IdTipoRol = mProps.IdTipoRol
End Property


Private Function GeneraAsientoPresupRolTotalDebe() As colAsientoTemp
    Dim i As Long, v As Currency, k As RolDetalle, IdCta As Long, pe As Personal, ele As Elementos
    
    Dim rs As Recordset
    Dim sql As String
    Dim col As colAsientoTemp
    Set col = New colAsientoTemp
    For i = 1 To CountRolDetalle
    
        Set k = RolDetalle(i)
        v = k.Valor
        
'        Set pe = Me.Empresa.RecuperarEmpleado(k.IdEmpleado)
        Set ele = Me.Empresa.RecuperarElemento(k.idElemento)
        If ele.Debe Then
'            If Not pe Is Nothing Then
'                MsgBox k.Codelemento & "-" & k.CodEmpleado
                If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ConAsiento")) > 0 Then
                    If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("SeContabilizaPor") = 0 Then
                        IdCta = Me.Empresa.RecuperaCtaCuentasPersonalPre(k.IdEmpleado, k.idElemento)
                    ElseIf gobjMain.EmpresaActual.GNOpcion.ObtenerValor("SeContabilizaPor") = 1 Then
                        IdCta = Me.Empresa.RecuperaCtaCuentasDepartamentoPre(k.IdGrupo1, k.idElemento)
                    End If
                End If
'            End If
'            If Me.EsNuevo Then
                If k.auxDebe And k.auxIdCuentaGeneralPre > 0 Then
                    col.Add k.auxIdCuentaGeneralPre, v
                Else
                   'NADA
                End If
'            Else
'                If IdCta <> 0 Then
'                    Col.Add IdCta, v
'                End If
'            End If
            'If k.auxIdCuentaGeneralPre = 621 Then MsgBox "hola"
        End If
    Next i
    RedondearAsiento col, Me.FormatoMoneda
    Set GeneraAsientoPresupRolTotalDebe = col
    Set col = Nothing
End Function

Private Function GeneraAsientoPresupRolTotalHaber() As colAsientoTemp
    Dim i As Long, v As Currency, k As RolDetalle, IdCta As Long, pe As Personal, ele As Elementos
    Dim rs As Recordset
    
    Dim sql As String
    Dim col As colAsientoTemp
    Set col = New colAsientoTemp
    For i = 1 To CountRolDetalle
        Set k = RolDetalle(i)
        v = k.Valor
        'Set pe = Me.Empresa.RecuperarEmpleado(k.IdEmpleado)
        Set ele = Me.Empresa.RecuperarElemento(k.idElemento)
        If ele.Haber Then
        'If Not pe Is Nothing Then
'                MsgBox k.Codelemento & "-" & k.CodEmpleado

                'IdCta = Me.Empresa.RecuperaCtaCuentasDepartamentoPre(k.IdEmpleado, k.idElemento)
                If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ConAsiento")) > 0 Then
                    If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("SeContabilizaPor") = 0 Then
                        IdCta = Me.Empresa.RecuperaCtaCuentasPersonalPre(k.IdEmpleado, k.idElemento)
                    ElseIf gobjMain.EmpresaActual.GNOpcion.ObtenerValor("SeContabilizaPor") = 1 Then
                        IdCta = Me.Empresa.RecuperaCtaCuentasDepartamentoPre(k.IdGrupo1, k.idElemento)
                    End If
                End If
        'End If
'             If Me.EsNuevo Then
                 If k.auxHaber And k.auxIdCuentaGeneralPre > 0 Then
                     col.Add k.auxIdCuentaGeneralPre, v
                 Else
                 'nada
                 End If
'             Else
'                 If IdCta <> 0 Then
'                     Col.Add IdCta, v
'                 End If
'            End If
            'If k.auxIdCuentaGeneralPre = 621 Then MsgBox "hola"
        End If
    Next i
    Set GeneraAsientoPresupRolTotalHaber = col
    Set col = Nothing
End Function

'AucIMPRIME TODO CUENTAS POR COBRAR X TRANS EN UNA LINEA
Public Function PCkarderDebeTotalLin(ByVal cod As String) As String
    Dim i As Long, pck As PCKardex
    Dim s As String
    s = ""
    For i = 1 To CountPCKardex
        Set pck = PCKardex(i)
      '  If pck.CodForma = cod Then
            s = s & pck.CodForma & ": " & Format(pck.Debe, Me.Empresa.GNOpcion.FormatoCantidad) & "->" & Format(pck.FechaVenci, Me.Empresa.GNOpcion.FormatoFecha) & "; "
     '   End If
    Next i
    s = Left(s, Len(s) - 2)
    PCkarderDebeTotalLin = s
    Set pck = Nothing
End Function

Public Function DebeTotalRol() As Currency
    Dim TOTAL As Currency, i As Long
    For i = 1 To CountPRLibroDetalle
        TOTAL = TOTAL + PRLibroDetalle(i).Debe
    Next i
    DebeTotalRol = TOTAL
End Function

Public Function HaberTotalRol() As Currency
    Dim TOTAL As Currency, i As Long
    For i = 1 To CountPRLibroDetalle
        TOTAL = TOTAL + PRLibroDetalle(i).Haber
    Next i
    HaberTotalRol = TOTAL
End Function

Public Function AddIRKardex() As Long
    Dim nuevo As IRKardex, pc As PCProvCli
    'Cuando SoloVer está establecido a True, genera error
    If mcolIRKardex Is Nothing Then RecuperaIRKardex
    
    Set nuevo = New IRKardex
    Set nuevo.GNComprobante = Me
    
    mcolIRKardex.Add nuevo
    AddIRKardex = mcolIRKardex.Count    'Devuelve el indice de nuevo elemento
    Set nuevo = Nothing
    mbooModificado = True
End Function

Private Sub RecuperaIRKardex() 'AUC  'Para guardar el F107
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean

    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolIRKardex Is Nothing Then Set mcolIRKardex = New Collection
    
    'Recupera los TSKardex
    sql = "SELECT * FROM vwIRKardex WHERE TransId=" & mProps.transid & " ORDER BY Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddIRKardex
                IRKardex(i).Recuperar rs
            End If
            .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub


Public Property Get CountIRKardex() As Long 'AUC F107
    If mcolIRKardex Is Nothing Then RecuperaIRKardex
    CountIRKardex = mcolIRKardex.Count
End Property

Public Property Get IRKardex(ix As Long) As IRKardex
    If mcolIRKardex Is Nothing Then RecuperaIRKardex
    Set IRKardex = mcolIRKardex.item(ix)
End Property

Public Function ListaIRKardex() As Variant
    Dim sql As String, rs As Recordset
    On Error GoTo CapturaError
    sql = "SELECT pc.codprovCli,pc.Nombre,IRK.Ingresos, IRK.OtraRemuneracion, IRK.Utilidad,IRK.IngGravOtrosEmp, "
    sql = sql & "IRK.XIII,IRK.XIV,IRK.FR,IRK.deshaucio, "
    sql = sql & " IRK.AportePersonal,IRK.GPOtrosEmp,IRK.GPVIVIENDA,IRK.GPSALUD,IRK.GPEDUCACION,IRK.GPALIMENTACION,IRK.GPVESTIMENTA,IRK.RebajaEspecial,"
    sql = sql & " IRK.RebajaEspecial3E,IRK.ValorIRAnt,IRK.BaseImponible,IRK.IRCausado,IRK.OtrasReb,irk.valorIR,IRK.ValorRetenido,IRK.Deposito, "
    sql = sql & " IRK.aposol1,IRK.aposol2,IRK.aposol3,IRK.aposol4,IRK.aposol5,IRK.aposol6,IRK.aposol7,IRK.aposol8,IRK.aposol9,IRK.aposol10,IRK.aposol11,"
    sql = sql & " IRK.aposol12,IRK.aposol13,IRK.aposol14,IRK.aposol15,IRK.aposol16,IRK.aposol17,IRK.aposol18,IRK.aposol19,IRK.aposol20,IRK.aposol21"
   sql = sql & " FROM (IRKARDEX IRk left join Empleado pc ON IRK.IdEmpleado= pc.Idprovcli )"
    sql = sql & "WHERE Transid=" & mProps.transid & " ORDER BY Orden"
    Set rs = Me.Empresa.OpenRecordset(sql)
    Set ListaIRKardex = rs
    Set rs = Nothing
    Exit Function
CapturaError:
    Set rs = Nothing
    MsgBox Err.Description
    Exit Function
End Function

Public Function RecuperaIRKardexImpresion(ByVal CodEmpleado As String) As Variant
    Dim sql As String, rs As Recordset
    On Error GoTo CapturaError
    sql = "SELECT pc.codprovCli,pc.Nombre,IRK.Ingresos, IRK.OtraRemuneracion, IRK.Utilidad,IRK.IngGravOtrosEmp, "
    sql = sql & "IRK.XIII,IRK.XIV,IRK.FR,IRK.deshaucio, "
    sql = sql & " IRK.AportePersonal,IRK.GPOtrosEmp,IRK.GPVIVIENDA,IRK.GPSALUD,IRK.GPEDUCACION,IRK.GPALIMENTACION,IRK.GPVESTIMENTA,IRK.RebajaEspecial,"
    sql = sql & " IRK.RebajaEspecial3E,IRK.ValorIRAnt,IRK.BaseImponible,IRK.IRCausado,IRK.OtrasReb,irk.valorIR,IRK.ValorRetenido,IRK.Deposito "
   sql = sql & " FROM (IRKARDEX IRk left join Empleado pc ON IRK.IdEmpleado= pc.Idprovcli )"
   sql = sql & "WHERE Transid=" & mProps.transid
    sql = sql & " AND pc.codprovcli = '" & CodEmpleado & "'"
    Set rs = Me.Empresa.OpenRecordset(sql)
    Set RecuperaIRKardexImpresion = rs
    Set rs = Nothing
    Exit Function
CapturaError:
    Set rs = Nothing
    MsgBox Err.Description
    Exit Function
End Function

Public Function ImpRelDep(ByVal campo As String, ByVal Codigo As String, ByRef fecha As String) As Currency
    Dim sql As String, rs As Recordset, RangoFecha As String
    On Error GoTo ErrTrap

    RangoFecha = "(gncomprobante.Fechadevol BETWEEN " & FechaYMD("01/01/" & fecha, Me.Empresa.TipoDB) & " and " & FechaYMD("31/12/" & fecha, Me.Empresa.TipoDB) & ")"

    sql = "SELECT "
    sql = sql & " sum(IRKardex." & campo & ") as valor "
    sql = sql & " FROM (GnComprobante"
    sql = sql & " INNER JOIN IRKardex"
    sql = sql & " ON GnComprobante.TransId= IRKardex.TransId)"
    sql = sql & " INNER JOIN PcProvCli pc"
    sql = sql & " ON IRKardex.IdEmpleado= pc.idprovcli Where " & RangoFecha
    sql = sql & " AND pc.codprovcli='" & Codigo & "'"
    sql = sql & " AND GNCOMPROBANTE.ESTADO<>3"
    Set rs = Me.Empresa.OpenRecordset(sql)
    If Not IsNull(rs!Valor) Then
        ImpRelDep = rs!Valor
    Else
        ImpRelDep = 0
    End If
    Set rs = Nothing
   Exit Function
ErrTrap:
    Err.Raise Err.Number, "Gncomprobante.ConsRetDepDirectaComprobante", Err.Description
    Exit Function
End Function


Public Function SubTotal107(ByVal Codigo As String, ByRef fecha As String) As Currency
    Dim sql As String, rs As Recordset, RangoFecha As String
    On Error GoTo ErrTrap
    'Me.objCondicion.fecha1 = CDate(IIf(Fecha = "2001", "01/01/2000", "01/01/" & Fecha))
  '  Me.objCondicion.fecha2 = CDate("31/12/" & Fecha)
    RangoFecha = "(gncomprobante.Fechadevol BETWEEN " & FechaYMD("01/01/" & fecha, Me.Empresa.TipoDB) & " and " & FechaYMD("31/12/" & fecha, Me.Empresa.TipoDB) & ")"

    sql = "SELECT "
    sql = sql & " sum(IRKardex.Ingresos)+sum(IRKardex.otraRemuneracion)+ sum(IRKardex.utilidad)- sum(IRKardex.AportePersonal)-"
    sql = sql & " sum(IRKardex.GPVivienda)-sum(IRKardex.GPSalud)-sum(IRKardex.GPEducacion)-sum(IRKardex.GPAlimentacion)-sum(IRKardex.GPVestimenta)-"
    sql = sql & " Sum (IRKardex.RebajaEspecial) - Sum(IRKardex.RebajaEspecial3E)+Sum(IRKardex.ImpRentEmpl)  AS valor"
    sql = sql & " FROM (GnComprobante"
    sql = sql & " INNER JOIN IRKardex"
    sql = sql & " ON GnComprobante.TransId= IRKardex.TransId)"
    sql = sql & " INNER JOIN PcProvCli pc "
    sql = sql & " ON IRKardex.IdEmpleado = pc.idprovcli  WHERE " & RangoFecha
    sql = sql & " AND pc.codprovcli='" & Codigo & "'"
    sql = sql & " AND GnComprobante.estado <> 3"
    Set rs = Me.Empresa.OpenRecordset(sql)
    If Not IsNull(rs!Valor) Then
        SubTotal107 = rs!Valor
    Else
        SubTotal107 = 0
    End If
    Set rs = Nothing
   Exit Function
ErrTrap:
    Err.Raise Err.Number, "Gncomprobante.ConsRetDepDirectaComprobante", Err.Description
    Exit Function
End Function

Public Sub RemoveIRKardex(ByVal ix As Long, Optional obj As IRKardex)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemoveIRKardex", MSGERR_SOLOVER
    If mcolIRKardex Is Nothing Then RecuperaIRKardex
    
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolIRKardex.Count
            If mcolIRKardex.item(ix) Is obj Then
                mcolIRKardex.Remove ix
                Exit For
            End If
        Next ix
    Else
        mcolIRKardex.Remove ix
    End If
    
    mbooModificado = True
End Sub


Public Property Let BandNOCreditoTributario(value As Boolean)
        If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BandNOCreditoTributario", MSGERR_SOLOVER
        'Solo cuando cambia el valor
    If mProps.BandNOCreditoTributario <> value Then
        mProps.BandNOCreditoTributario = value
        mbooModificado = True
    End If
End Property

Public Property Get BandNOCreditoTributario() As Boolean
    BandNOCreditoTributario = mProps.BandNOCreditoTributario
End Property

Public Function TotalizaItemRepetidoSoloSignosDiferentes() As Boolean
    Dim ivk As IVKardex, i As Long, j As Long, ivk2 As IVKardex, rt As Boolean
    Dim iv As IVInventario, c As Currency
    rt = False
    i = 1
    Do While i <= mcolIVKardex.Count        'Uso Do While para que evalue cada vez la condicion (Con For no está bien)
        Set ivk = mcolIVKardex.item(i)
        'Busca repetidos
        For j = mcolIVKardex.Count To i + 1 Step -1     'En orden al revez
            Set ivk2 = mcolIVKardex.item(j)
            'Si encuentra repetido en la misma bodega, con el mismo signo
            If ivk.Cantidad > 0 Or ivk2.Cantidad > 0 Then
            
                If ivk2.CodInventario = ivk.CodInventario And _
                    ivk2.CodBodega = ivk.CodBodega And ivk.NumDias = ivk2.NumDias Then
                    'Totaliza la cantidad y elimina el repetido
                    ivk.PrecioTotal = ivk.PrecioTotal + ivk2.Cantidad * ivk.Precio  'Para que no cambie de precio de primer item
                    ivk.CostoTotal = ivk.CostoTotal + (ivk2.Cantidad * ivk.Costo)  'Para que no cambie de costo de primer item
                    Set iv = Me.Empresa.RecuperaIVInventario(ivk.CodInventario)
                    If Not iv Is Nothing Then
                        c = iv.CostoDouble2(Date, 0, 0, Time)
                        ivk.Cantidad = ivk.Cantidad + ivk2.Cantidad
                        ivk.CostoTotal = ivk.Cantidad * c
                        RemoveIVKardex j
                    End If
                    Set iv = Nothing
                    rt = True
                End If
            End If
        Next j
        i = i + 1
    Loop
    TotalizaItemRepetidoSoloSignosDiferentes = rt
End Function

Public Function ListaIVKardexImportacion( _
                    ByVal ExistPorBodega As Boolean, ByVal Flete As Currency, ByVal Seguro As Currency, ByVal TotalNeto As Currency) As Variant
    Dim sql As String, rs As Recordset
#If DAOLIB Then
    Dim qdef As DAO.QueryDef
    If ExistPorBodega Then
        Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsIVKardex")
    Else
        Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsIVKardex2")
    End If
    qdef.Parameters("tid") = mProps.transid
    qdef.Parameters("Cotizacion") = Me.Cotizacion("")
    qdef.Parameters("BandEgreso") = (Me.GNTrans.IVTipoTrans = "E")
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Dim cmd As ADODB.Command
    Set cmd = New ADODB.Command
    cmd.ActiveConnection = mProps.objEmpresa.Coneccion
    'Si la base es de JET
    If mProps.objEmpresa.TipoDB = TIPODB_JET Then
        cmd.CommandType = adCmdTable
        If ExistPorBodega Then
            cmd.CommandText = "spConsIVKardex"
        Else
            cmd.CommandText = "spConsIVKardex2"
        End If
        cmd.Parameters.Append cmd.CreateParameter("tid", adInteger, adParamInput, , mProps.transid)
        cmd.Parameters.Append cmd.CreateParameter("Cotizacion", adCurrency, adParamInput, , mProps.Cotizacion)
        Set rs = cmd.Execute
    'Si la base es de SQLSvr
    Else
        sql = "spConsIVKardexImportacion " & mProps.transid & ", " & _
                                  Me.Cotizacion("") & ", " & _
                                  CadenaBool(ExistPorBodega, Me.Empresa.TipoDB) & ", " & _
                                  Flete & ", " & _
                                  Seguro & ", " & _
                                  TotalNeto & ", " & _
                                  CadenaBool((Me.GNTrans.IVTipoTrans = "E"), Me.Empresa.TipoDB)     '*** MAKOTO 26/ene/01 Mod. Si es egreso multiplica -1
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
    End If
#End If
    Set ListaIVKardexImportacion = rs
    Set rs = Nothing

End Function

Public Function IVRecargoArancel() As Currency
    Dim t As Currency, gnt As GNTransRecargo, i As Long
    Dim pc As PCProvCli, BandEmpPub As Boolean
     
    BandEmpPub = False
        For i = 1 To CountIVKardexRecargo
            Set gnt = Me.GNTrans.BuscaRecargo(IVKardexRecargo(i).CodRecargo)
                If Not (gnt Is Nothing) Then
                    If Me.GNTrans.IVTipoTrans = "X" Then
                        If IVKardexRecargo(i).CodRecargo = "ARAN" Then
                                t = t + IVKardexRecargo(i).Valor
                        End If
                    End If
                End If
        Next i
    
    IVRecargoArancel = t
    Set gnt = Nothing
End Function

Private Sub VerificaCuadradoRol()
Dim i As Long
Dim totalRol As Currency
Dim totalPagar As Currency
totalRol = 0
totalPagar = 0
For i = 1 To Me.CountRolDetalle
    If Me.RolDetalle(i).BandAfectaSaldoEmp And (Me.RolDetalle(i).IdTipoRol = Me.IdTipoRol Or Me.RolDetalle(i).IdTipoRol1 = Me.IdTipoRol Or Me.RolDetalle(i).IdTipoRol2 = Me.IdTipoRol Or Me.RolDetalle(i).IdTipoRol3 = Me.IdTipoRol) Then
       ' MsgBox Me.RolDetalle(i).Codelemento & Me.RolDetalle(i).Valor
       totalRol = totalRol + Me.RolDetalle(i).Valor
    End If
Next
For i = 1 To Me.CountPCKardex
    totalPagar = totalPagar + Me.PCKardex(i).Haber
Next
    If totalRol <> totalPagar Then
        Err.Raise ERR_INVALIDO, "GNComprobante.VerificarCuadradoRol", _
                                "Al grabar el rol no esta cuadrado, por lo que no puede grabarla." & vbCr & vbCr & _
                                "NetoRol:  " & Format(totalRol, Me.FormatoMoneda) & vbCr & _
                                "PorPagar: " & Format(totalPagar, Me.FormatoMoneda) & vbCr & vbCr & _
                                "Verifique los datos......"
    End If
End Sub

Public Function IVRecargoFodin() As Currency
    Dim t As Currency, gnt As GNTransRecargo, i As Long
    Dim pc As PCProvCli, BandEmpPub As Boolean
     
    BandEmpPub = False
        For i = 1 To CountIVKardexRecargo
            Set gnt = Me.GNTrans.BuscaRecargo(IVKardexRecargo(i).CodRecargo)
                If Not (gnt Is Nothing) Then
                    If Me.GNTrans.IVTipoTrans = "X" Then
                        If IVKardexRecargo(i).CodRecargo = "FODIN" Then
                                t = t + IVKardexRecargo(i).Valor
                        End If
                    End If
                End If
        Next i
    
    IVRecargoFodin = t
    Set gnt = Nothing
End Function

Public Function IVRecargo(ByVal CodRecargo As String) As Currency
    Dim t As Currency, gnt As GNTransRecargo, i As Long
    Dim pc As PCProvCli, BandEmpPub As Boolean
     
    BandEmpPub = False
        For i = 1 To CountIVKardexRecargo
            Set gnt = Me.GNTrans.BuscaRecargo(IVKardexRecargo(i).CodRecargo)
                If Not (gnt Is Nothing) Then
                    'If Me.GNTrans.IVTipoTrans = "X" Then
                    If Me.GNTrans.IVTipoTrans = "X" Or Me.GNTrans.IVTipoTrans = "E" Then
                        If IVKardexRecargo(i).CodRecargo = CodRecargo Then
                                t = t + IVKardexRecargo(i).Valor
                                Exit For
                        End If
                    End If
                End If
        Next i
    
    IVRecargo = t
    Set gnt = Nothing
End Function


Friend Sub ActualizaCantidadAFCustodio(ByVal Signo As String)
    Dim sql As String

    If CountAFKardexCustodio = 0 Then Exit Sub     'Si no tiene detalle de AFKardex, sale
    

    'Aumenta o resta la existencia
#If DAOLIB Then
    sql = "UPDATE AFExistCustodio d, AFKardexCustodio k " & _
          "SET d.Exist = d.Exist" & Signo & "k.Cantidad " & _
          "WHERE (d.IdProvcli = k.IdProvcli) AND (d.IdInventario = k.IdInventario) " & _
                " AND k.TransID=" & mProps.transid
#Else
    sql = "spAFExistCustodio  '" & Signo & "', " & mProps.transid
    
#End If
    mProps.objEmpresa.Execute sql, True
End Sub


Public Property Let BandNoGrabaTransXML(ByVal value As Boolean)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BandNoGrabaTransXML", MSGERR_SOLOVER
    'Solo cuando cambia el valor
    If mProps.BandNoGrabaTransXML <> value Then
        mProps.BandNoGrabaTransXML = value
    End If
End Property

Public Property Get BandNoGrabaTransXML() As Boolean
    BandNoGrabaTransXML = mProps.BandNoGrabaTransXML
End Property

Public Function RecuperaInformaciondelPago(ByVal Id As Long) As Boolean
    Dim sql As String, rs As Recordset
    RecuperaInformaciondelPago = False
    sql = " select id from pckardex where id=" & Id
    
    Set rs = Me.Empresa.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        RecuperaInformaciondelPago = True
    End If
End Function
'AUC agregado para lira
Public Property Let PCPorDesc(ByVal value As Currency)
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.PCPorDesc", MSGERR_SOLOVER
    mProps.PCPorDesc = value
    mbooModificado = True
End Property
Public Property Get PCPorDesc() As Currency
    PCPorDesc = mProps.PCPorDesc
End Property
Public Function CalculaTSEfectivo() As Currency
Dim sql As String
Dim rs As Recordset
On Error GoTo CapturaError
sql = "Select sum(debe) as efec from tskardex tsk inner  join TSTipoDocBanco tst on tst.idtipodoc = tsk.idtipodoc where tst.efectivo = 1 "
sql = sql & " And tsk.transid = " & Me.transid
Set rs = Me.Empresa.OpenRecordset(sql)
If Not rs Is Nothing Then
    CalculaTSEfectivo = rs!efec
End If
Set rs = Nothing
Exit Function
CapturaError:
MsgBox Err.Description
Set rs = Nothing
Exit Function
End Function


Public Function ListaIVKardex2CostoReferencial( _
                    ByVal ExistPorBodega As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As DAO.QueryDef
    
    If ExistPorBodega Then
        Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsIVKardex")
    Else
        Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsIVKardex2")
    End If
    qdef.Parameters("tid") = mProps.transid
    qdef.Parameters("Cotizacion") = Me.Cotizacion("")
    qdef.Parameters("BandEgreso") = (Me.GNTrans.IVTipoTrans = "E")
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Dim cmd As ADODB.Command
    Set cmd = New ADODB.Command
    cmd.ActiveConnection = mProps.objEmpresa.Coneccion
    'Si la base es de JET
    If mProps.objEmpresa.TipoDB = TIPODB_JET Then
        cmd.CommandType = adCmdTable
        If ExistPorBodega Then
            cmd.CommandText = "spConsIVKardex"
        Else
            cmd.CommandText = "spConsIVKardex2"
        End If
        cmd.Parameters.Append cmd.CreateParameter("tid", adInteger, adParamInput, , mProps.transid)
        cmd.Parameters.Append cmd.CreateParameter("Cotizacion", adCurrency, adParamInput, , mProps.Cotizacion)
        Set rs = cmd.Execute
    'Si la base es de SQLSvr
    Else
        sql = "spConsIVKardexCostoReferencial " & mProps.transid & ", " & _
                                  Me.Cotizacion("") & ", " & _
                                  CadenaBool(ExistPorBodega, Me.Empresa.TipoDB) & ", " & _
                                  CadenaBool((Me.GNTrans.IVTipoTrans = "E"), Me.Empresa.TipoDB) '*** MAKOTO 26/ene/01 Mod. Si es egreso multiplica -1
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
    End If
#End If
    Set ListaIVKardex2CostoReferencial = rs
    Set rs = Nothing
End Function

Private Sub VerificaMismoIvGrupo()
Dim i As Long
Dim NumGrupo As Integer
Dim NumGrupoA As Byte
Dim CodIVGrupo As String, descrip1 As String
Dim CodIVGrupo2 As String, descrip2 As String
Dim item As IVInventario
Dim item1 As IVInventario
Dim PCG1 As ivgrupo
Dim PCG2 As ivgrupo
Dim Eti As String
Dim ivk As IVKardex, j As Long, ivk2 As IVKardex
CodIVGrupo = ""
CodIVGrupo2 = ""
    descrip1 = "No esta seleccionado Grupo"
    descrip2 = "No esta seleccionado Grupo"
    NumGrupo = Me.Empresa.GNOpcion.ObtenerValor("cboGrupoItem") + 1
    NumGrupoA = Me.Empresa.GNOpcion.ObtenerValor("cboGrupoItem") + 1
    Eti = Me.Empresa.GNOpcion.EtiqGrupo(NumGrupo)
    i = 1
    Do While i <= mcolIVKardex.Count
        Set ivk = mcolIVKardex.item(i)
        Set item = Me.Empresa.RecuperaIVInventarioQuick(ivk.CodInventario)
            CodIVGrupo = item.CodGrupo(NumGrupo)
            Set PCG1 = Me.Empresa.RecuperaIVGrupo(NumGrupoA, CodIVGrupo)
            If Not PCG1 Is Nothing Then
                descrip1 = PCG1.Descripcion
            End If
            
            'Busca repetidos
            For j = mcolIVKardex.Count To i + 1 Step -1
                Set ivk2 = mcolIVKardex.item(j)
                Set item1 = Me.Empresa.RecuperaIVInventarioQuick(ivk2.CodInventario)
                CodIVGrupo2 = item1.CodGrupo(NumGrupo)
                Set PCG2 = Me.Empresa.RecuperaIVGrupo(NumGrupoA, CodIVGrupo2)
                If Not PCG2 Is Nothing Then
                    descrip2 = PCG2.Descripcion
                End If
                
                'Si encuentra repetido en la misma bodega, con el mismo signo
                If CodIVGrupo <> CodIVGrupo2 Then
                    Err.Raise ERR_INVALIDO, "GNComprobante.VerificarDatos", _
                        "Al grabar la transacción tiene items de diferente " & Eti & " , por lo que no puede grabarla." & vbCr & vbCr & _
                         Eti & "  " & descrip1 & " -->  " & item.Descripcion & vbCr & _
                         Eti & "  " & descrip2 & " -->    " & item1.Descripcion & vbCr & _
                        "Verifique listado de items"
                End If
            Next j
        

        
        
        i = i + 1
        Set PCG1 = Nothing
        Set PCG2 = Nothing
        Set item = Nothing
        Set item1 = Nothing
    Loop
End Sub




Public Function IVKardexDescItemTotalTarifasinIVA() As Currency
    Dim t As Currency, i As Long, ivk As IVKardex, bandCosto As Boolean
    Dim u As Currency
    
    'Decide si calcula en base a Precio o Costo
    bandCosto = GNTrans.IVRecargoEnCosto
    
    For i = 1 To CountIVKardex
        Set ivk = IVKardex(i)
        If ivk.IVA = 0 Then
        
            If bandCosto Then
                u = ivk.CostoTotal * ivk.Descuento           '*** MAKOTO 29/ene/01 Mod.
                'Redondea al formato de Costos
                u = MiCCur(Format$(u, Me.FormatoCosto))         '*** MAKOTO 29/ene/01 Mod.
            Else
                u = ivk.PrecioTotal * ivk.Descuento          '*** MAKOTO 29/ene/01 Mod.
                'Redondea al formato de P.Total
                u = MiCCur(Format$(u, Me.FormatoMoneda))        '*** MAKOTO 29/ene/01 Mod.
            End If
            t = t + u
        End If
    Next i
    IVKardexDescItemTotalTarifasinIVA = Abs(t)      '*** MAKOTO 29/ene/01 Mod. Devuelde en valor absoluto
    Set ivk = Nothing
End Function

Public Function IVKardexDescItemTotalTarifaconIVA() As Currency
    Dim t As Currency, i As Long, ivk As IVKardex, bandCosto As Boolean
    Dim u As Currency
    
    'Decide si calcula en base a Precio o Costo
    bandCosto = GNTrans.IVRecargoEnCosto
    
    For i = 1 To CountIVKardex
        Set ivk = IVKardex(i)
        If ivk.IVA <> 0 Then
        
            If bandCosto Then
                u = ivk.CostoTotal * ivk.Descuento           '*** MAKOTO 29/ene/01 Mod.
                'Redondea al formato de Costos
                u = MiCCur(Format$(u, Me.FormatoCosto))         '*** MAKOTO 29/ene/01 Mod.
            Else
                u = ivk.PrecioTotal * ivk.Descuento          '*** MAKOTO 29/ene/01 Mod.
                'Redondea al formato de P.Total
                u = MiCCur(Format$(u, Me.FormatoMoneda))        '*** MAKOTO 29/ene/01 Mod.
            End If
            t = t + u
        End If
        
    Next i
    IVKardexDescItemTotalTarifaconIVA = Abs(t)      '*** MAKOTO 29/ene/01 Mod. Devuelde en valor absoluto
    Set ivk = Nothing
End Function


Public Property Let Observaciones(ByVal value As String)
    mProps.Observaciones = value
    mbooModificado = True
End Property

Public Property Get Observaciones() As String
    Observaciones = Trim$(mProps.Observaciones)
End Property

'AUC imprime cuentas x cobrar filtrado por codigo de forma
Public Function PCkarderDebeTotalFormaCobro(ByVal cod As String) As Currency
    Dim i As Long, pck As PCKardex
    Dim t As Currency
    t = 0
    For i = 1 To CountPCKardex
        Set pck = PCKardex(i)
        If pck.CodForma = cod Then
            t = t + pck.Debe
        End If
    Next i
    PCkarderDebeTotalFormaCobro = t
    Set pck = Nothing
End Function

Private Function GeneraAsientoPCPagoXIII( _
                    ) As colAsientoTemp
    Dim i As Long, v As Currency, k As PCKardex
    Dim col As colAsientoTemp, Doc As PCDocAsignado
    Set col = New colAsientoTemp
    For i = 1 To CountPCKardex
        Set k = PCKardex(i)
            If k.auxIdCuentaXIII <> 0 Then  'AUC asigna cuentas SOLO DECIMO TERCERO
                v = k.Debe
                'Cuando tiene documento asignado,
                ' convierte en valor correspondiente a la cotizacion del doc. asignado
                ' Esto sirve para autocalcular diferencial cambiario en asiento contable
                If k.IdAsignado <> 0 Then
                    '*** MAKOTO 08/mar/01 Agregado
                    'Si es que el prov/cli no tiene asignado una cuenta, genera error
                    If (k.auxIdCuentaXIII = 0) Then
                        NoTieneCuentaAsignadoRol k.idElemento
                    End If
                    v = v * Me.Cotizacion("")           'Convierte en moneda nacional
                    Set Doc = k.RecuperaPCDocAsignado   'Recupera el documento asignado
                    If Not (Doc Is Nothing) Then
                        v = v / Me.Cotizacion(Doc.CodMoneda)    'Convierte en moneda original
                        v = v * Doc.Cotizacion              'Convierte en moneda nacional a cotizacion original
                    End If
                    v = v / Me.Cotizacion("")       'Convierte en moneda ex.
                    'If BandPrincipal Then
                        'Col.Add k.auxIdCuenta, v
                        col.Add k.auxIdCuentaXIII, v
                    'Else
                     '   Col.Add k.auxIdCuenta2, v
                    'End If
                End If
        End If
    Next i
    Set GeneraAsientoPCPagoXIII = col
    Set k = Nothing
    Set col = Nothing
    Set Doc = Nothing
End Function
Private Function GeneraAsientoPCPagoXIV( _
                    ) As colAsientoTemp
    Dim i As Long, v As Currency, k As PCKardex
    Dim col As colAsientoTemp, Doc As PCDocAsignado
    Set col = New colAsientoTemp
    For i = 1 To CountPCKardex
        Set k = PCKardex(i)
            If k.auxIdCuentaXIV <> 0 Then   'AUC asigna cuentas SOLO DECIMO TERCERO
                v = k.Debe
                'Cuando tiene documento asignado,
                ' convierte en valor correspondiente a la cotizacion del doc. asignado
                ' Esto sirve para autocalcular diferencial cambiario en asiento contable
                If k.IdAsignado <> 0 Then
                    '*** MAKOTO 08/mar/01 Agregado
                    'Si es que el prov/cli no tiene asignado una cuenta, genera error
                    If (k.auxIdCuentaXIV = 0) Then
                        NoTieneCuentaAsignadoRol k.idElemento
                    End If
                    v = v * Me.Cotizacion("")           'Convierte en moneda nacional
                    Set Doc = k.RecuperaPCDocAsignado   'Recupera el documento asignado
                    If Not (Doc Is Nothing) Then
                        v = v / Me.Cotizacion(Doc.CodMoneda)    'Convierte en moneda original
                        v = v * Doc.Cotizacion              'Convierte en moneda nacional a cotizacion original
                    End If
                    v = v / Me.Cotizacion("")       'Convierte en moneda ex.
                    'If BandPrincipal Then
                        'Col.Add k.auxIdCuenta, v
                        col.Add k.auxIdCuentaXIV, v
                    'Else
                     '   Col.Add k.auxIdCuenta2, v
                    'End If
                End If
        End If
    Next i
    Set GeneraAsientoPCPagoXIV = col
    Set k = Nothing
    Set col = Nothing
    Set Doc = Nothing
End Function
Private Function GeneraAsientoPCPagoVacacion( _
                    ) As colAsientoTemp
    Dim i As Long, v As Currency, k As PCKardex
    Dim col As colAsientoTemp, Doc As PCDocAsignado
    Set col = New colAsientoTemp
    For i = 1 To CountPCKardex
        Set k = PCKardex(i)
            If k.auxIdCuentaVac <> 0 Then    'AUC asigna cuentas SOLO DECIMO TERCERO
                v = k.Debe
                'Cuando tiene documento asignado,
                ' convierte en valor correspondiente a la cotizacion del doc. asignado
                ' Esto sirve para autocalcular diferencial cambiario en asiento contable
                If k.IdAsignado <> 0 Then
                    '*** MAKOTO 08/mar/01 Agregado
                    'Si es que el prov/cli no tiene asignado una cuenta, genera error
                    If (k.auxIdCuentaVac = 0) Then
                        NoTieneCuentaAsignadoRol k.idElemento
                    End If
                    v = v * Me.Cotizacion("")           'Convierte en moneda nacional
                    Set Doc = k.RecuperaPCDocAsignado   'Recupera el documento asignado
                    If Not (Doc Is Nothing) Then
                        v = v / Me.Cotizacion(Doc.CodMoneda)    'Convierte en moneda original
                        v = v * Doc.Cotizacion              'Convierte en moneda nacional a cotizacion original
                    End If
                    v = v / Me.Cotizacion("")       'Convierte en moneda ex.
                    'If BandPrincipal Then
                        'Col.Add k.auxIdCuenta, v
                        col.Add k.auxIdCuentaVac, v
                    'Else
                     '   Col.Add k.auxIdCuenta2, v
                    'End If
                End If
        End If
    Next i
    Set GeneraAsientoPCPagoVacacion = col
    Set k = Nothing
    Set col = Nothing
    Set Doc = Nothing
End Function
Private Function GeneraAsientoPCPagoNetoRol( _
                    ) As colAsientoTemp
    Dim i As Long, v As Currency, k As PCKardex
    Dim col As colAsientoTemp, Doc As PCDocAsignado
    Set col = New colAsientoTemp
    For i = 1 To CountPCKardex
        Set k = PCKardex(i)
            If k.auxIdCuentaNetoRol <> 0 Then     'AUC asigna cuentas SOLO DECIMO TERCERO
                v = k.Debe
                'Cuando tiene documento asignado,
                ' convierte en valor correspondiente a la cotizacion del doc. asignado
                ' Esto sirve para autocalcular diferencial cambiario en asiento contable
                If k.IdAsignado <> 0 Then
                    '*** MAKOTO 08/mar/01 Agregado
                    'Si es que el prov/cli no tiene asignado una cuenta, genera error
                    If (k.auxIdCuentaNetoRol = 0) Then
                        NoTieneCuentaAsignadoRol k.idElemento
                    End If
                    v = v * Me.Cotizacion("")           'Convierte en moneda nacional
                    Set Doc = k.RecuperaPCDocAsignado   'Recupera el documento asignado
                    If Not (Doc Is Nothing) Then
                        v = v / Me.Cotizacion(Doc.CodMoneda)    'Convierte en moneda original
                        v = v * Doc.Cotizacion              'Convierte en moneda nacional a cotizacion original
                    End If
                    v = v / Me.Cotizacion("")       'Convierte en moneda ex.
                    'If BandPrincipal Then
                        'Col.Add k.auxIdCuenta, v
                        col.Add k.auxIdCuentaNetoRol, v
                    'Else
                     '   Col.Add k.auxIdCuenta2, v
                    'End If
                End If
        End If
    Next i
    Set GeneraAsientoPCPagoNetoRol = col
    Set k = Nothing
    Set col = Nothing
    Set Doc = Nothing
End Function
Private Sub NoTieneCuentaAsignadoRol( _
                ByVal idElemento As Long _
                )
    Dim ele As Elementos, desc As String
    Dim msg As String
        Set ele = Me.Empresa.RecuperarElemento(idElemento)
        If Not (ele Is Nothing) Then desc = ele.Nombre
        Set ele = Nothing
    msg = "El siguiente Rubro " & desc & " no tiene asignado una cuenta contable, " & _
        "por lo que no se puede generar el asiento contable de ésta transacción. " & vbCr & vbCr & _
        "    Descripción: " & desc & vbCr & vbCr & _
        "Para poder grabar la transacción, por favor habra datos del dicho Rubro" & _
        "y asigne una cuenta contable correspondiente."
    Err.Raise ERR_NOHAYCODIGO, "GNComprobante.GeneraAsiento", msg
End Sub


Public Property Let BandRISE(value As Boolean)
        If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BandRISE", MSGERR_SOLOVER
        'Solo cuando cambia el valor
    If mProps.BandRISE <> value Then
        mProps.BandRISE = value
        mbooModificado = True
    End If
End Property

Public Property Get BandRISE() As Boolean
    BandRISE = mProps.BandRISE
End Property

Public Property Let BandFinalizado(ByVal value As Byte)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BandFinalizado", MSGERR_SOLOVER
        mProps.BandFinalizado = value
        mbooModificado = True
End Property

Public Property Get BandFinalizado() As Byte
    BandFinalizado = mProps.BandFinalizado
End Property

Private Sub CambiaEstadoFinalizadoDeFuente()
    Dim tid As Variant, sql As String, BandTerminado As Boolean, cc As GNCentroCosto, rs As Recordset
    Dim cad As String
    BandTerminado = False
    If mcolTransIDs Is Nothing Then Exit Sub
    
    For Each tid In mcolTransIDs
        
            If Not Me.GNTrans.IVNoEstadoFinalizar Then
'                If VerificaTotalDespacho Then
                'Cambia el estado de fuente a Despachado        '*** MAKOTO 15/dic/00
                    sql = "UPDATE GNComprobante SET BandFinalizado=1 where transid=tid"
                      BandTerminado = True
'               End If
            End If
        If Len(sql) > 0 Then
            Me.Empresa.Execute sql, True
            'Me.Empresa.Execute sql, True
            'Set rs = mProps.objEmpresa.OpenRecordset(sql)
'        rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
        End If
        
    Next tid
End Sub

'AUC calcula cualquier elemetento del rol totalizado por tipo
Public Function TElementoRolXtipo(ByVal IdEmpleado As Long, ByVal Tipo As Integer) As Currency
Dim sql As String, rs As Recordset
On Error GoTo CapturaError
    sql = "SELECT sum(Valor) as valor from vwroldetalle where idempleado =" & IdEmpleado
    sql = sql & " AND TRANSID =" & Me.transid
    sql = sql & " AND tipo=" & Tipo
    Set rs = Me.Empresa.OpenRecordset(sql)
    If rs.EOF Then
        Err.Raise ERR_SOLOVER, "Roldetalle.TElementoxRol", MSGERR_SOLOVER
   End If
    Do While Not rs.EOF
            If Not IsNull(rs!Valor) Then TElementoRolXtipo = rs!Valor
        rs.MoveNext
    Loop
   Exit Function
    Set rs = Nothing
CapturaError:
    MsgBox Err.Description
    Exit Function
    Set rs = Nothing
End Function

'AUC funcion para revisar si se va ha imprimir el documento, se enlaza con el documento padre
Public Function VerificaFormaCobro(ByVal cod As String) As Boolean
Dim i As Long
    For i = 1 To Me.CountPCKardex
        If Me.PCKardex(i).CodForma = cod Then
            VerificaFormaCobro = True
            Exit For
        End If
    Next
End Function

'AUC listar detalle de roles x empleado x trans
Public Function ListaEmpleadoDetallePorEmp(ByVal IdRol As Long, ByVal codemp As String) As Recordset
Dim sql As String, rs As Recordset
On Error GoTo CapturaError

        sql = "SELECT pc.CodProvCli,pc.nombre,Pc.RUC,Pe.fechaingreso " & _
           " FROM roldetalle rd " & _
           " INNER JOIN Empleado pc INNER JOIN Personal Pe ON Pe.Idempleado = pc.idprovcli  " & _
           "ON rd.idempleado = pc.idprovcli" & _
           " WHERE RD.TRANSID = " & IdRol & _
           " AND pc.codProvCli = '" & codemp & "'" & _
           " GROUP BY rd.idgrupo1, pc.CodProvCli,pc.nombre,Pc.RUC,Pe.fechaingreso order by rd.idgrupo1,pc.nombre "
           
    Set rs = gobjMain.EmpresaActual.OpenRecordset(sql)
    Set ListaEmpleadoDetallePorEmp = rs
    Set rs = Nothing
    Exit Function
CapturaError:
    MsgBox Err.Number & " " & Err.Description
    Set rs = Nothing
    Exit Function
End Function


Public Function IVPesoTotal(bandNeto As Boolean) As Currency
    Dim t As Currency
    
    t = IVKardexPesoTotal(bandNeto)
    IVPesoTotal = t
End Function

Public Function IVKardexPesoTotal(bandNeto As Boolean) As Currency
    Dim t As Currency, i As Long, v As Currency, iv As IVInventario
    
    For i = 1 To CountIVKardex
        Set iv = Me.Empresa.RecuperaIVInventario(IVKardex(i).CodInventario)
        If bandNeto Then
            v = IVKardex(i).Cantidad * iv.PesoNeto
        Else
            v = IVKardex(i).Cantidad * iv.PesoBruto
        End If
        
        'Redondea con el formato para Costos      *** MAKOTO 13/feb/01 Mod.
        t = t + MiCCur(Format$(v, Me.FormatoCosto))
    Next i
    Set iv = Nothing
    IVKardexPesoTotal = t
End Function

Public Function ListaIVKardexImportacion1( _
                    ByVal ExistPorBodega As Boolean, ByVal Flete As Currency, ByVal Seguro As Currency, ByVal TotalNeto As Currency, ByVal TotalPeso As Currency) As Variant
    Dim sql As String, rs As Recordset
#If DAOLIB Then
    Dim qdef As DAO.QueryDef
    If ExistPorBodega Then
        Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsIVKardex")
    Else
        Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsIVKardex2")
    End If
    qdef.Parameters("tid") = mProps.transid
    qdef.Parameters("Cotizacion") = Me.Cotizacion("")
    qdef.Parameters("BandEgreso") = (Me.GNTrans.IVTipoTrans = "E")
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Dim cmd As ADODB.Command
    Set cmd = New ADODB.Command
    cmd.ActiveConnection = mProps.objEmpresa.Coneccion
    'Si la base es de JET
    If mProps.objEmpresa.TipoDB = TIPODB_JET Then
        cmd.CommandType = adCmdTable
        If ExistPorBodega Then
            cmd.CommandText = "spConsIVKardex"
        Else
            cmd.CommandText = "spConsIVKardex2"
        End If
        cmd.Parameters.Append cmd.CreateParameter("tid", adInteger, adParamInput, , mProps.transid)
        cmd.Parameters.Append cmd.CreateParameter("Cotizacion", adCurrency, adParamInput, , mProps.Cotizacion)
        Set rs = cmd.Execute
    'Si la base es de SQLSvr
    Else
        If TotalPeso = 0 Then TotalPeso = 1
        If TotalNeto = 0 Then TotalNeto = 1
        sql = "spConsIVKardexImportacion " & mProps.transid & ", " & _
                                  Me.Cotizacion("") & ", " & _
                                  CadenaBool(ExistPorBodega, Me.Empresa.TipoDB) & ", " & _
                                  Flete & ", " & _
                                  Seguro & ", " & _
                                  TotalNeto & ", " & _
                                  TotalPeso & ", " & _
                                  CadenaBool((Me.GNTrans.IVTipoTrans = "E"), Me.Empresa.TipoDB)     '*** MAKOTO 26/ene/01 Mod. Si es egreso multiplica -1
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
    End If
#End If
    Set ListaIVKardexImportacion1 = rs
    Set rs = Nothing

End Function


'--------------------------------------
'--------------- Manejo de coleccion de VTKardexConcilia
Public Function AddVTKardexConcilia() As Long
    Dim nuevo As VTKardexConcilia
    
    'Cuando SoloVer está establecido a True, genera error
    If mcolVTKardexConcilia Is Nothing Then RecuperaVTKardexConcilia
    
    Set nuevo = New VTKardexConcilia
    Set nuevo.GNComprobante = Me
    
    'Valores predeterminados
    If Me.CountVTKardexConcilia = 0 Then
'''        'nuevo.NumDoc = Left$(Me.NumDocRef, 20)
    Else
    End If
    
    mcolVTKardexConcilia.Add nuevo
    AddVTKardexConcilia = mcolVTKardexConcilia.Count    'Devuelve el indice de nuevo elemento
    Set nuevo = Nothing
    mbooModificado = True
End Function

Public Sub RemoveVTKardexConcilia(ByVal ix As Long, Optional obj As VTKardexConcilia)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemoveVTKardexConcilia", MSGERR_SOLOVER
    If mcolVTKardexConcilia Is Nothing Then RecuperaVTKardexConcilia
    
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolVTKardexConcilia.Count
            If mcolVTKardexConcilia.item(ix) Is obj Then
                mcolVTKardexConcilia.Remove ix
                Exit For
            End If
        Next ix
    Else
        mcolVTKardexConcilia.Remove ix
    End If
    
    mbooModificado = True
End Sub

'Elimina todos los detalles de VTKardexConcilia
Public Sub BorrarVTKardexConcilia()
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BorrarVTKardexConcilia", MSGERR_SOLOVER
    If mcolVTKardexConcilia Is Nothing Then Set mcolVTKardexConcilia = New Collection
    
    With mcolVTKardexConcilia
        Do While .Count > 0
            .Remove .Count
        Loop
    End With
    mbooModificado = True
End Sub

Public Property Get CountVTKardexConcilia() As Long
    If mcolVTKardexConcilia Is Nothing Then RecuperaVTKardexConcilia
    CountVTKardexConcilia = mcolVTKardexConcilia.Count
End Property

Public Property Get VTKardexConcilia(ix As Long) As VTKardexConcilia
    If mcolVTKardexConcilia Is Nothing Then RecuperaVTKardexConcilia
    Set VTKardexConcilia = mcolVTKardexConcilia.item(ix)
End Property

Private Sub RecuperaVTKardexConcilia()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean

    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolVTKardexConcilia Is Nothing Then Set mcolVTKardexConcilia = New Collection
    
    'Recupera los registros de VTKardexConcilia
    sql = "SELECT tskc.*" & _
          "FROM VTKardexConcilia tskc " & _
                " "
    sql = sql & "WHERE TransId=" & mProps.transid & " ORDER BY Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddVTKardexConcilia
                VTKardexConcilia(i).Recuperar rs
            End If
            .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub


Public Function RecuperaVTConciliacion(transid As Long) As Variant
    Dim sql As String, rs As Recordset
    
    sql = "select "
    sql = sql & " transid , IdTrans, FechaTrans, CodTrans,"
    sql = sql & " Trans, NumDocRef, Nombre,Descripcion,"
    sql = sql & " Vendedor, TransOrigen, atencion, Haber, Saldo, BandConciliado"
    sql = sql & " SaldoConfirmado , Diferencia, Estado, Orden, HoraTrans, tipo"
    sql = sql & " from VWVTKardexConciliacion  "
    sql = sql & " Where transidPadre = " & transid

    sql = sql & " ORDER BY vendedor,  FechaTrans, HoraTrans, TransID, Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)

    
    RecuperaVTConciliacion = MiGetRows(rs) 'rs
    Set rs = Nothing
End Function



Public Function RecuperaVTConciliacionImpresion(transid As Long, ByVal Valor As String, _
            ByVal CodTipo As String, ByVal BandConci As String) As Variant
    Dim sql As String, rs As Recordset
    
    sql = "select "
    sql = sql & " FechaTrans, "
    sql = sql & " Trans, Descripcion, Nombre, vendedor, PrecioTotalBase0+PrecioTotalBaseIVA  as Valor, atencion, TransOrigen"
    sql = sql & " from VWVTKardexConciliacion inner join vwConsSUMIVKardexIVA ivk on VWVTKardexConciliacion.transid=ivk.transid   "
    sql = sql & " Where transidPadre = " & transid
'    sql = sql & " AND CodTipoDoc IN (" & CodTipo & ")"
    sql = sql & " AND BandConciliado = " & BandConci & ""
    
    

    sql = sql & " ORDER BY vendedor, FechaTrans, HoraTrans, VWVTKardexConciliacion.TransID, Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaVTConciliacionImpresion = rs
    Set rs = Nothing
End Function

Private Sub CambiaBandFinalizadoDeFuente()
    Dim tid As Variant, sql As String, BandTerminado As Boolean, cc As GNCentroCosto
    BandTerminado = False
    If mcolTransIDs Is Nothing Then Exit Sub
    For Each tid In mcolTransIDs
            If VerificaTotalDespachoNew Then
                'Cambia el estado de fuente a Despachado        '*** MAKOTO 15/dic/00
                    sql = "UPDATE GNComprobante SET BandFinalizado=1" & _
                      " WHERE (TransID=" & tid & ")"
                      BandTerminado = True
            End If


        If Len(sql) > 0 Then
            Me.Empresa.Execute sql, True
        End If
        
    Next tid
    
       If Me.GNTrans.TerminarCentroAlGrabar Then
            If BandTerminado Then
                'Set cc = Me.Empresa.RecuperaGNCentroCosto(Me.CodCentro)
                sql = " update gncentrocosto set fechafinal='" & Me.FechaTrans & "'"
                If Len(Me.idCentros) > 0 Then
                    sql = sql & " where idcentro in (" & Me.idCentros & ")"
                Else
                    sql = sql & " where idcentro='" & Me.idCentro & "'"
                End If
                Me.Empresa.Execute sql, True
            End If
        End If
    
End Sub


Private Function VerificaTotalDespachoNew() As Boolean
    Dim gnc As GNComprobante, contLImite As Currency, cantGrabada As Currency
    Dim i As Long
    
    VerificarDespachoTotalNew contLImite, cantGrabada
    
    If contLImite = cantGrabada Then
        VerificaTotalDespachoNew = True
    Else
        VerificaTotalDespachoNew = False
    End If
    
End Function

Public Function VerificarDespachoTotalNew(ByRef CantLimite As Currency, _
                    ByRef cantGrabada As Currency) As Boolean
    Dim sql As String, rs As Recordset, pos As Integer
    On Error GoTo ErrTrap
    VerificarDespachoTotalNew = False
    CantLimite = 0
    cantGrabada = 0
    If Not Me.GNTrans.IVTotItemSignosDif Then
        'Obtiene Suma de cantidad de los comprobantes con los que vamos a comparar (Puede haber varios)
        sql = "SELECT Sum(ivk.Cantidad) AS SumaCant "
        sql = sql & " FROM GNComprobante gc INNER JOIN "
        sql = sql & " (IVInventario iv INNER JOIN IVKardex ivk "
        sql = sql & " ON iv.IdInventario = ivk.IdInventario) "
        sql = sql & " ON gc.TransID=ivk.TransID "
        
        If Not Me.GNTrans.ListaTranVerificaLimite Then
            sql = sql & " WHERE (gc.CodTrans IN ('" & Me.GNTrans.IVVerificaLimiteCon & "', '"
            sql = sql & Me.GNTrans.IVVerificaLimiteCon & "M')) AND "
            sql = sql & " (gc.Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & "))  "
        Else
            sql = sql & " WHERE gc.CodTrans IN (" & PreparaListaTransLimite(Me.GNTrans.TransDespuesDevolucion) & ")"
            sql = sql & " AND  (gc.Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & "))  "
        
        End If
        
        'If InStr(1, UCase(gobjMain.EmpresaActual.GNOpcion.NombreEmpresa), "MONT") <> 0 Then
        If Me.GNTrans.CodPantalla = "IVRES_ALQ" Then
            sql = sql & " AND  cantidad<0"
        End If
    Else
        sql = " SELECT sum(ivk.Cantidad) AS SumaCant"
        sql = sql & " FROM GNComprobante gc"
        sql = sql & " INNER JOIN  (IVInventario iv"
        sql = sql & " INNER JOIN IVKardex ivk  ON iv.IdInventario = ivk.IdInventario)"
         sql = sql & " ON gc.TransID=ivk.TransID"
         sql = sql & " Where"
        sql = sql & " estado <>3"
        sql = sql & " and idcentro=" & Me.idCentro
        sql = sql & " and gc.transid=" & Me.transid
        
    
    End If
            
        Set rs = Me.Empresa.OpenRecordset(sql)
    If Not IsNull(rs!sumaCant) Then CantLimite = rs!sumaCant
    rs.Close
    
    
    'Obtiene Suma de cantidad de los comprobantes 'hermanos' que son del mismo C.Costo
        sql = "SELECT Sum((ivk.Cantidad)) AS SumaCant "
        sql = sql & " FROM GNTrans gt INNER JOIN "
        sql = sql & " (GNComprobante gc "
        If Len(Me.idCentros) > 0 Then
            sql = sql & " left join gnfuente gnf on gnf.transid=gc.transid"
        End If
        sql = sql & " INNER JOIN  (IVInventario iv INNER JOIN IVKardex ivk "
        sql = sql & " ON iv.IdInventario = ivk.IdInventario) "
        sql = sql & " ON gc.TransID=ivk.TransID) "
        sql = sql & " ON gt.CodTrans=gc.CodTrans "
        If Not Me.GNTrans.ListaTranVerificaLimite Then
            sql = sql & " WHERE (gt.VerificaLimiteCon='" & Me.GNTrans.IVVerificaLimiteCon & "') "
        Else
            sql = sql & " WHERE (gt.TransDespuesDevolucion ='" & Me.GNTrans.TransDespuesDevolucion & "') "
        End If
        sql = sql & " AND  (gc.Estado<>" & ESTADO_ANULADO & ")  "
'        If Me.GNTrans.IVControlaLimitePorFactura = False And Me.GNTrans.IVControlaLimitePorFacturaxLinea = False Then
'''''            sql = sql & " AND (gc.IdCentro=" & Me.idCentro & ")  "
'''            If Len(Me.idCentros) > 0 Then
'''                sql = sql & " and (gnf.IdCentros = '" & Me.idCentros & "') "
'''            Else
'''                sql = sql & " and (gc.IdCentro=" & Me.idCentro & ") "
'''            End If
'
'        Else
'        '''sql = sql & " and gc.idtransfuente=" & IdTransFuente
'            If Len(Me.idFuentes) > 0 Then
'                sql = sql & " and (gc.idtransfuente in(" & Me.idFuentes & ")) "
'            Else
                sql = sql & " and (gc.idtransfuente=" & Me.IdTransFuente & ") "
'            End If
            
'        End If
        If Not Me.GNTrans.ListaTranVerificaLimite And Me.GNTrans.IVControlaLimitePorFacturaxLinea Then
            sql = sql & " and (gc.codtrans<>'" & Me.GNTrans.IVVerificaLimiteCon & "M" & "')"
        Else
            sql = sql & " and (gc.codtrans not in (" & PreparaListaTransM(Me.GNTrans.TransDespuesDevolucion) & "))"
        End If
                
        'If InStr(1, UCase(gobjMain.EmpresaActual.GNOpcion.NombreEmpresa), "MONT") <> 0 Then
        If Me.GNTrans.CodPantalla = "IVRES_ALQ" Then
            sql = sql & " AND  cantidad<0"
        End If
                
                
        'Hay que excluir éste comprobante mismo
        Set rs = Me.Empresa.OpenRecordset(sql)
         If Not IsNull(rs!sumaCant) Then cantGrabada = rs!sumaCant
         rs.Close
         Set rs = Nothing
        VerificarDespachoTotalNew = True
        Exit Function
    
       
ErrTrap:
    Err.Raise Err.Number, Err.Source, Err.Description
    VerificarDespachoTotalNew = False
    Exit Function
   
End Function

'-------------------- DETALLE gASTO pRESUPUESTARIO
'--------------- Manejo de coleccion de TSDetalleEfectivo
Public Function AddPRDetalleGasto() As Long
End Function

Public Sub RemovePRDetalleGasto(ByVal ix As Long, Optional obj As PRDetalleGasto)
End Sub

Public Sub BorrarPRDetalleGasto()
End Sub

Public Property Get CountPRDetalleGasto() As Long
End Property

Public Property Get PRDetalleGasto(ix As Long) As PRDetalleGasto
End Property

Private Sub RecuperaPRDetalleGasto()
End Sub


'--------------- Manejo de coleccion de IVKardexArancel
Public Function AddIVKardexArancel() As Long
    Dim nuevo As IVKardexArancel

    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.AddIVKardexArancel", MSGERR_SOLOVER
    If mcolIVKardexArancel Is Nothing Then RecuperaIVKardexArancel

    Set nuevo = New IVKardexArancel
    Set nuevo.GNComprobante = Me
    mcolIVKardexArancel.Add nuevo

    AddIVKardexArancel = mcolIVKardexArancel.Count    'Devuelve el indice de nuevo elemento
    Set nuevo = Nothing
    mbooModificado = True
End Function

Public Function BuscaIVKardexArancel(IdARANCEL As Long) As IVKardexArancel
    Dim obj As IVKardexArancel
    If mcolIVKardexArancel Is Nothing Then RecuperaIVKardexArancel

    For Each obj In mcolIVKardexArancel
        If obj.IdARANCEL = IdARANCEL Then
            Set BuscaIVKardexArancel = obj
            Exit For
        End If
    Next obj
    Set obj = Nothing
End Function

Public Sub RemoveIVKardexArancel(ByVal ix As Long, Optional obj As IVKardexArancel)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemoveIVKardexArancel", MSGERR_SOLOVER
    If mcolIVKardexArancel Is Nothing Then RecuperaIVKardexArancel

    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolIVKardexArancel.Count
            If mcolIVKardexArancel.item(ix) Is obj Then
                mcolIVKardexArancel.Remove ix
                Exit For
            End If
        Next ix
        Debug.Assert True   'No se puede dar
    Else
        mcolIVKardexArancel.Remove ix
    End If

    mbooModificado = True
End Sub

'Elimina todos los detalles de IVKardexArancel
Public Sub BorrarIVKardexArancel()
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BorrarIVKardexArancel", MSGERR_SOLOVER
    If mcolIVKardexArancel Is Nothing Then Set mcolIVKardexArancel = New Collection

    With mcolIVKardexArancel
        Do While .Count > 0
            .Remove .Count
        Loop
    End With
    mbooModificado = True
End Sub


Public Property Get CountIVKardexArancel() As Long
    If mcolIVKardexArancel Is Nothing Then RecuperaIVKardexArancel
    CountIVKardexArancel = mcolIVKardexArancel.Count
End Property

Public Property Get IVKardexArancel(ix As Long) As IVKardexArancel
    If mcolIVKardexArancel Is Nothing Then RecuperaIVKardexArancel
    Set IVKardexArancel = mcolIVKardexArancel.item(ix)
End Property

Private Sub RecuperaIVKardexArancel()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean

    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolIVKardexArancel Is Nothing Then Set mcolIVKardexArancel = New Collection

    'Recupera los IVKardexArancel
    BorrarIVKardexArancel
    sql = "SELECT A.*,B.CodArancel FROM IVKardexArancel A LEFT JOIN IVRecargoArancel B ON A.IdArancel=B.IdArancel " & _
          " WHERE TransId=" & mProps.transid & " ORDER BY Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddIVKardexArancel
                IVKardexArancel(i).Recuperar rs
            End If
            .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub


Public Function ExisteFleteySeguroAsignado(ByVal TransIDAnexos As Long) As Boolean
    Dim sql As String, rs As Recordset
    sql = "Select * from IVKardexArancel where TransId = " & TransIDAnexos
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    If Not rs.EOF Then ExisteFleteySeguroAsignado = True
    Set rs = Nothing
End Function

Public Function RecuperaVentasTarjetaxUsuario1(ByVal CodTarjeta As String) As Variant
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
    'Recupera los registros de TSDetalleCheque
    sql = "SELECT"
    sql = sql & " ivt.codtarjeta , NumCheque, p.TitularCta,  "
    sql = sql & " p.Debe As Total, G.TRANSID "
    sql = sql & " FROM GNCOMPROBANTE G"
    sql = sql & " INNER JOIN PCKARDEX P"
    sql = sql & " INNER JOIN ivtarjeta ivt "
    sql = sql & " ON p.idtarjeta=ivt.idtarjeta"
    sql = sql & " ON G.TRANSID=P.TRANSID"
    sql = sql & " Where"
    sql = sql & " G.ESTADO<>3"
    If GNTrans.TSUtilizaFechaGrabado Then
        sql = sql & " AND (g.FechaGrabado between '" & Me.FechaTrans & " 00:00:00' AND '" & Me.FechaTrans & " 23:59:59' ) "
    Else
        sql = sql & " AND FECHATRANS BETWEEN '" & Me.FechaTrans & "' AND '" & Me.FechaTrans & "'"
    End If
    sql = sql & " AND CODUSUARIO='" & Me.codUsuario & "'"
    sql = sql & " AND p.idtarjeta<>0"
    sql = sql & " AND ivt.codtarjeta = '" & CodTarjeta & "'"
    If Me.EsNuevo Then
        sql = sql & " and g.transid not in( select IdTransRef from TSDetalleTarjeta tsd inner join gncomprobante g on tsd.transid=g.transid where g.estado<>3)"
    End If
    sql = sql & " order by ivt.codtarjeta "
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaVentasTarjetaxUsuario1 = rs
    Set rs = Nothing
End Function

'------------------------------
Public Function AddTSResumen() As Long
    Dim nuevo As TSResumen
    'Cuando SoloVer está establecido a True, genera error
    If mcolTSResumen Is Nothing Then RecuperaTSResumen
    Set nuevo = New TSResumen
    Set nuevo.GNComprobante = Me
    mcolTSResumen.Add nuevo
    AddTSResumen = mcolTSResumen.Count   'Devuelve el indice de nuevo elemento
   Set nuevo = Nothing
    mbooModificado = True
End Function

Public Sub RemoveTSResumen(ByVal ix As Long, Optional obj As TSResumen)
   'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemoveTSResumen", MSGERR_SOLOVER
    If mcolTSResumen Is Nothing Then RecuperaTSResumen
   'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolTSResumen.Count
            If mcolTSResumen.item(ix) Is obj Then
                mcolTSResumen.Remove ix
               Exit For
            End If
        Next ix
    Else
        mcolTSResumen.Remove ix
   End If
    mbooModificado = True
End Sub

'Elimina todos los detalles de TSDetalleTarjeta
Public Sub BorrarTSResumen()
   'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BorrarTSDetalleTarjeta", MSGERR_SOLOVER
    If mcolTSResumen Is Nothing Then Set mcolTSResumen = New Collection
    With mcolTSResumen
       Do While .Count > 0
            .Remove .Count
        Loop
    End With
    mbooModificado = True
End Sub
Public Property Get CountTSResumen() As Long
    If mcolTSResumen Is Nothing Then RecuperaTSResumen
    CountTSResumen = mcolTSResumen.Count
End Property
Public Property Get TSResumen(ix As Long) As TSResumen
    If mcolTSResumen Is Nothing Then RecuperaTSResumen
    Set TSResumen = mcolTSResumen.item(ix)
End Property
Private Sub RecuperaTSResumen()
   Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolTSResumen Is Nothing Then Set mcolTSResumen = New Collection
    'Recupera los registros de TSDetalleTarjeta
    sql = "SELECT *  " & _
          "FROM TSResumen " & _
               " "
    sql = sql & "WHERE TransId=" & mProps.transid & " ORDER BY Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddTSResumen
                TSResumen(i).Recuperar rs
           End If
            .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub
Public Function TSResumenTotal(ByVal band As Boolean) As Currency
Dim sql As String
Dim rs As Recordset
On Error GoTo CapturaError
If band Then
      sql = "Select sum (valorSis) as valor  from tsresumen where transid =" & Me.transid
Else
    sql = "Select sum (valorDoc) as valor  from tsresumen where transid =" & Me.transid
End If
        Set rs = Me.Empresa.OpenRecordset(sql)
    If Not rs.EOF Then
        TSResumenTotal = rs!Valor
    Else
        TSResumenTotal = 0
    End If
Exit Function
CapturaError:
    MsgBox Err.Description
    Exit Function
End Function


Public Property Let FechaEntrega(ByVal value As Date)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.FechaEntrega", MSGERR_SOLOVER
    mProps.FechaEntrega = value
    mbooModificado = True
End Property

Public Property Get FechaEntrega() As Date
    FechaEntrega = mProps.FechaEntrega
End Property


'AUC
Public Function TotalizaTarjetaRepetido() As Boolean
    Dim tsdt As TSDetalleTarjeta, i As Long, j As Long, tsdt2 As TSDetalleTarjeta, rt As Boolean
    rt = False
    i = 1
    Do While i <= mcolTSDetalleTarjeta.Count        'Uso Do While para que evalue cada vez la condicion (Con For no está bien)
        Set tsdt = mcolTSDetalleTarjeta.item(i)
        'Busca repetidos
        For j = mcolTSDetalleTarjeta.Count To i + 1 Step -1     'En orden al revez
            Set tsdt2 = mcolTSDetalleTarjeta.item(j)
            'Si encuentra repetido en la misma bodega, con el mismo signo
            If tsdt2.CodTarjeta = tsdt.CodTarjeta Then
                'Totaliza la cantidad y elimina el repetido
                tsdt.Valor = tsdt.Valor + tsdt2.Valor
                    'RemoveTSDetalleTarjeta j
                    mcolTSDetalleTarjeta.Remove j
                rt = True
            End If
        Next j
        i = i + 1
    Loop
    Me.Modificado = False
    TotalizaTarjetaRepetido = rt
End Function


Public Function ListaNotificacion() As Variant
    'Set ListaNotificacion = ListaNotificacion2(True)
End Function

Public Function ListaNotificacion2(ByVal IdAsignado As String, ByVal NumNoti As Long) As Variant
Dim rs As Recordset
Dim sql As String
Dim Trans As String
Dim i As Long
Dim v As Variant
Dim NumDeci As Integer
Dim Tasa As Currency
Dim diasGracia As Integer
On Error GoTo CapturaError
    If Len(Me.Empresa.GNOpcion.ObtenerValor("TasaMora")) > 0 Then
        Tasa = Me.Empresa.GNOpcion.ObtenerValor("TasaMora") / 100
    Else
        Tasa = 0
    End If
    If Len(Me.Empresa.GNOpcion.ObtenerValor("DiasGraciaMora")) > 0 Then
        diasGracia = Me.Empresa.GNOpcion.ObtenerValor("DiasGraciaMora")
    Else
        diasGracia = 0
    End If
    NumDeci = IIf(Len(Me.Empresa.GNOpcion.ObtenerValor("NumDecimales")) > 0, Me.Empresa.GNOpcion.ObtenerValor("NumDecimales"), 2)
    IdAsignado = Mid(IdAsignado, 1, Len(IdAsignado) - 1)
    Trans = "gn.CodTrans + ' ' + CONVERT(varchar, gn.NumTrans) AS Trans, "
    sql = "SELECT pckn.*," & Trans & " pck.fechaemision,pck.fechavenci,pc.nombre,pc.nombreAlterno, "
   sql = sql & "((DATEDIFF(m,DATEADD(day," & diasGracia & ",pck.FechaVenci), pckn.fechanoti1)+1)) as MVenci, "
   sql = sql & " ((DATEDIFF(d,DATEADD(day,0,pck.FechaVenci), pckn.fechanoti1)+1)) as diasVenci,"
    sql = sql & "ROUND((pckn.valor) * ((DATEDIFF(m,DATEADD(day," & diasGracia & ",pck.FechaVenci), pckn.fechanoti1)+1)* (" & Tasa & "))," & NumDeci & ") as interes,"
    sql = sql & "(pckn.valor +ROUND((pckn.valor) * ((DATEDIFF(m,DATEADD(day," & diasGracia & ",pck.FechaVenci), pckn.fechanoti1)+1)* (" & Tasa & "))," & NumDeci & ")) as Total"
    sql = sql & " From pcknotificacion pckn "
    sql = sql & " inner join pckardex pck "
    sql = sql & " Inner join pcprovcli pc on pc.idprovcli = pck.idprovcli "
    sql = sql & " inner join gncomprobante gn"
    sql = sql & " on gn.transid = pck.transid "
   sql = sql & " on pck.id= pckn.idpckardex"
    sql = sql & " where pckn.idpckardex  in ( " & IdAsignado & ")"
    sql = sql & " And pckn.sec = " & NumNoti
    Set rs = Me.Empresa.OpenRecordset(sql)
    Set ListaNotificacion2 = rs
    Set rs = Nothing
    Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function

Public Function ClienteNoti(ByVal NumNoti As Long) As String
Dim rs As Recordset
Dim sql As String
On Error GoTo CapturaError
   ' IdAsignado = Mid(IdAsignado, 1, Len(IdAsignado) - 1)
    sql = "Select top 1 pc.nombre "
    sql = sql & " From pcknotificacion pckn "
    sql = sql & " inner join pckardex pck "
    sql = sql & " Inner join pcprovcli pc on pc.idprovcli = pck.idprovcli "
    sql = sql & " inner join gncomprobante gn"
    sql = sql & " on gn.transid = pck.transid "
    sql = sql & " on pck.id= pckn.idpckardex"
    'sql = sql & " where pckn.idpckardex  in ( " & IdAsignado & ")"
    sql = sql & " Where pckn.sec = " & NumNoti
    Set rs = Me.Empresa.OpenRecordset(sql)
    If Not rs.EOF Then
        ClienteNoti = rs!Nombre
    Else
        ClienteNoti = ""
    End If
    Set rs = Nothing
    Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function

Public Function ClienteAltNoti(ByVal NumNoti As Long) As String
Dim rs As Recordset
Dim sql As String
On Error GoTo CapturaError
    sql = "Select top 1 pc.nombreAlterno "
    sql = sql & " From pcknotificacion pckn "
    sql = sql & " inner join pckardex pck "
    sql = sql & " Inner join pcprovcli pc on pc.idprovcli = pck.idprovcli "
    sql = sql & " inner join gncomprobante gn"
    sql = sql & " on gn.transid = pck.transid "
    sql = sql & " on pck.id= pckn.idpckardex"
    'sql = sql & " where pckn.idpckardex  in ( " & IdAsignado & ")"
    sql = sql & " Where pckn.sec = " & NumNoti
    Set rs = Me.Empresa.OpenRecordset(sql)
    If Not rs.EOF Then
        ClienteAltNoti = rs!NombreAlterno
    Else
        ClienteAltNoti = ""
    End If
    Set rs = Nothing
    Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function

Public Property Let TipoPago(ByVal value As Byte)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.TipoPago", MSGERR_SOLOVER
    
    If value <> mProps.TipoPago Then
        mProps.TipoPago = value
        mbooModificado = True
    End If
End Property

Public Property Get TipoPago() As Byte
    TipoPago = mProps.TipoPago
End Property


Public Property Let TipoCompra(ByVal value As Byte)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.TipoCompra", MSGERR_SOLOVER
    
    If value <> mProps.TipoCompra Then
        mProps.TipoCompra = value
        mbooModificado = True
    End If
End Property

Public Property Get TipoCompra() As Byte
    TipoCompra = mProps.TipoCompra
End Property

Public Property Let TipoCuantia(ByVal value As Byte)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.TipoCuantia", MSGERR_SOLOVER
    
    If value <> mProps.TipoCuantia Then
        mProps.TipoCuantia = value
        mbooModificado = True
    End If
End Property

Public Property Get TipoCuantia() As Byte
    TipoCuantia = mProps.TipoCuantia
End Property

Public Property Let INCOP(ByVal value As String)
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.INCOP", MSGERR_SOLOVER
    
    If Len(value) > 100 Then
        'Err.Raise ERR_INVALIDO, "GNComprobante.INCOP", MSGERR_INVALIDO
        value = Mid$(value, 1, 100)
    End If
    
    'Solo cuando cambia el valor
    If mProps.INCOP <> value Then
        mProps.INCOP = value
        mbooModificado = True
    End If

End Property

Public Property Get INCOP() As String
    INCOP = mProps.INCOP
End Property

Public Property Let BandRevision(ByVal value As Byte)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BandRevision", MSGERR_SOLOVER
        mProps.BandRevision = value
        mbooModificado = True
End Property

Public Property Get BandRevision() As Byte
    BandRevision = mProps.BandRevision
End Property


Public Property Let FechaRevision(value As Date)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.FechaRevision", MSGERR_SOLOVER
    
    'Solo cuando cambia el valor
    If mProps.FechaRevision <> value Then
        mProps.FechaRevision = value
        mbooModificado = True
    End If
End Property

Public Property Get FechaRevision() As Date
    FechaRevision = mProps.FechaRevision
End Property


Public Property Let EstadoReq(ByVal value As Byte)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.EstadoReq", MSGERR_SOLOVER
    
    If value <> mProps.EstadoReq Then
        mProps.EstadoReq = value
        mbooModificado = True
    End If
End Property

Public Property Get EstadoReq() As Byte
    EstadoReq = mProps.EstadoReq
End Property

Public Property Let Comentarios(ByVal value As String)
    mProps.Comentarios = value
    mbooModificado = True
End Property

Public Property Get Comentarios() As String
    Comentarios = Trim$(mProps.Comentarios)
End Property

Public Property Let BandCertifica(ByVal value As Byte)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BandCertifica", MSGERR_SOLOVER
        mProps.BandCertifica = value
        mbooModificado = True
End Property

Public Property Get BandCertifica() As Byte
    BandCertifica = IIf(mProps.BandCertifica, 1, 0)
End Property


Public Property Let FechaCertifica(value As Date)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.FechaCertifica", MSGERR_SOLOVER
    
    'Solo cuando cambia el valor
    If mProps.FechaCertifica <> value Then
        mProps.FechaCertifica = value
        mbooModificado = True
    End If
End Property

Public Property Get FechaCertifica() As Date
    FechaCertifica = mProps.FechaCertifica
End Property


Public Property Let Proforma1(ByVal value As String)
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.Proforma1", MSGERR_SOLOVER
    
    If Len(value) > 120 Then
        'Err.Raise ERR_INVALIDO, "GNComprobante.Proforma1", MSGERR_INVALIDO
        value = Mid$(value, 1, 120)
    End If
    
    'Solo cuando cambia el valor
    If mProps.Proforma1 <> value Then
        mProps.Proforma1 = value
        mbooModificado = True
    End If

End Property

Public Property Get Proforma1() As String
    Proforma1 = mProps.Proforma1
End Property

Public Property Let Monto1(ByVal value As Currency)
    If value > 0 Then
        mProps.Monto1 = value
        mbooModificado = True
    Else
        mProps.Monto1 = 0
    End If
    
End Property

Public Property Get Monto1() As Currency
    Monto1 = mProps.Monto1
End Property

Public Property Let Proforma2(ByVal value As String)
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.Proforma2", MSGERR_SOLOVER
    
    If Len(value) > 120 Then
        'Err.Raise ERR_INVALIDO, "GNComprobante.Proforma2", MSGERR_INVALIDO
        value = Mid$(value, 1, 120)
    End If
    
    'Solo cuando cambia el valor
    If mProps.Proforma2 <> value Then
        mProps.Proforma2 = value
        mbooModificado = True
    End If

End Property

Public Property Get Proforma2() As String
    Proforma2 = mProps.Proforma2
End Property

Public Property Let Monto2(ByVal value As Currency)
    If value > 0 Then
        mProps.Monto2 = value
        mbooModificado = True
    Else
        mProps.Monto2 = 0
    End If
    
End Property

Public Property Get Monto2() As Currency
    Monto2 = mProps.Monto2
End Property

Public Property Let Proforma3(ByVal value As String)
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.Proforma3", MSGERR_SOLOVER
    
    If Len(value) > 120 Then
        'Err.Raise ERR_INVALIDO, "GNComprobante.Proforma3", MSGERR_INVALIDO
        value = Mid$(value, 1, 120)
    End If
    
    'Solo cuando cambia el valor
    If mProps.Proforma3 <> value Then
        mProps.Proforma3 = value
        mbooModificado = True
    End If

End Property

Public Property Get Proforma3() As String
    Proforma3 = mProps.Proforma3
End Property


Public Property Let Monto3(ByVal value As Currency)
    If value > 0 Then
        mProps.Monto3 = value
        mbooModificado = True
    Else
        mProps.Monto3 = 0
    End If
    
End Property

Public Property Get Monto3() As Currency
    Monto3 = mProps.Monto3
End Property

Public Property Let ProfAdjudicada(ByVal value As Byte)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.ProfAdjudicada", MSGERR_SOLOVER
    
    If value <> mProps.ProfAdjudicada Then
        mProps.ProfAdjudicada = value
        mbooModificado = True
    End If
End Property

Public Property Get ProfAdjudicada() As Byte
    ProfAdjudicada = mProps.ProfAdjudicada
End Property

Public Property Let BandAceptacion(ByVal value As Byte)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BandAceptacion", MSGERR_SOLOVER
        mProps.BandAceptacion = value
        mbooModificado = True
End Property

Public Property Get BandAceptacion() As Byte
    BandAceptacion = mProps.BandAceptacion
End Property


Public Property Let FechaAceptacion(value As Date)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.FechaAceptacion", MSGERR_SOLOVER
    
    'Solo cuando cambia el valor
    If mProps.FechaAceptacion <> value Then
        mProps.FechaAceptacion = value
        mbooModificado = True
    End If
End Property

Public Property Get FechaAceptacion() As Date
    FechaAceptacion = mProps.FechaAceptacion
End Property



Public Property Let ObservacionesReq(ByVal value As String)
    mProps.ObservacionesReq = value
    mbooModificado = True
End Property

Public Property Get ObservacionesReq() As String
    ObservacionesReq = Trim$(mProps.ObservacionesReq)
End Property

Public Property Let FechaObservacion(value As Date)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.FechaObservacion", MSGERR_SOLOVER
    
    'Solo cuando cambia el valor
    If mProps.FechaObservacion <> value Then
        mProps.FechaObservacion = value
        mbooModificado = True
    End If
End Property

Public Property Get FechaObservacion() As Date
    FechaObservacion = mProps.FechaObservacion
End Property

Public Property Let BandDireccion(ByVal value As Byte)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BandDireccion", MSGERR_SOLOVER
        mProps.BandDireccion = value
        mbooModificado = True
End Property

Public Property Get BandDireccion() As Byte
    BandDireccion = mProps.BandDireccion
End Property


Public Property Let FechaDireccion(value As Date)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.FechaDireccion", MSGERR_SOLOVER
    
    'Solo cuando cambia el valor
    If mProps.FechaDireccion <> value Then
        mProps.FechaDireccion = value
        mbooModificado = True
    End If
End Property

Public Property Get FechaDireccion() As Date
    FechaDireccion = mProps.FechaDireccion
End Property

'------------------- DATOS DE LA REQUERIMIENTO

Private Sub GrabarRequerimiento()
    Dim sql As String, rs As Recordset
    Dim AuxDesc As Integer
        'Recupera el registro correspondiente para modificar
        sql = "SELECT * FROM GNRequerimiento WHERE TransID=" & mProps.transid
        Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
        If Not rs.EOF Then
            #If DAOLIB Then
                rs.Edit
            #End If
        Else
            sql = "SELECT * FROM GNRequerimiento WHERE 1=0"
            Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
            rs.AddNew
        End If
        
    With rs
        !transid = mProps.transid                       'Es el mismo asignado a GnComprobante
        !TipoPago = mProps.TipoPago
        !TipoCompra = mProps.TipoCompra
        !TipoCuantia = mProps.TipoCuantia
        !INCOP = mProps.INCOP
        !BandRevision = mProps.BandRevision
        !FechaRevision = mProps.FechaRevision
        !EstadoReq = mProps.EstadoReq
        .Fields("Comentarios").AppendChunk mProps.Comentarios
        !BandCertifica = mProps.BandCertifica
        !FechaCertifica = mProps.FechaCertifica
        !Proforma1 = mProps.Proforma1
        !Monto1 = mProps.Monto1
        !Proforma2 = mProps.Proforma2
        !Monto2 = mProps.Monto2
        !Proforma3 = mProps.Proforma3
        !Monto3 = mProps.Monto3
        !ProfAdjudicada = mProps.ProfAdjudicada
        !FechaProforma = mProps.FechaProforma
        !BandAceptacion = mProps.BandAceptacion
        !FechaAceptacion = mProps.FechaAceptacion
        .Fields("ObservacionesReq").AppendChunk mProps.ObservacionesReq
        !FechaObservacion = mProps.FechaObservacion
        !BandDireccion = mProps.BandDireccion
        !FechaDireccion = mProps.FechaDireccion
        !Crono1 = mProps.Crono1
        !FechaCR1 = mProps.FechaCR1
        !MontoCR1 = mProps.MontoCR1
        !ObsCrono1 = mProps.ObsCrono1
        !Crono2 = mProps.Crono2
        !FechaCR2 = mProps.FechaCR2
        !MontoCR2 = mProps.MontoCR2
        !ObsCrono2 = mProps.ObsCrono2
        !Crono3 = mProps.Crono3
        !FechaCR3 = mProps.FechaCR3
        !MontoCR3 = mProps.MontoCR3
        !ObsCrono3 = mProps.ObsCrono3
        !OtrosPagos = mProps.OtrosPagos
        !Tiporec = mProps.Tiporec
        .Fields("ObservacionesCertifica").AppendChunk mProps.ObservacionesCertifica
        !EstadoRevision = mProps.EstadoRevision
        !EstadoCertifica = mProps.EstadoCertifica
        !FechaRevisionActa = mProps.FechaRevisionActa
        !EstadoRevisionActa = mProps.EstadoRevisionActa
        .Fields("ObservacionesRevisionActa").AppendChunk mProps.ObservacionesRevisionActa
        !Usuario1 = mProps.Usuario1
        !Usuario2 = mProps.Usuario2
        !Usuario3 = mProps.Usuario3
        !IdProveedor1 = mProps.IdProveedor1
        !IdProveedor2 = mProps.IdProveedor2
        !IdProveedor3 = mProps.IdProveedor3
        !RutaOferta1 = mProps.RutaOferta1
        !RutaOferta2 = mProps.RutaOferta2
        !RutaOferta3 = mProps.RutaOferta3
        !UsuarioActa = mProps.UsuarioActa
        !UsuarioRevActa = mProps.UsuarioRevActa
        
        .Update
        #If DAOLIB Then
                rs.Bookmark = rs.LastModified
        #End If
        .Move 0             'Para actualizar
        .Close
    End With
End Sub

Public Sub RecuperarRequerimiento(Optional ByVal TransIDGnRequerimiento As Long)
    Dim sql As String, rs As Recordset
    
    If TransIDGnRequerimiento = 0 Then TransIDGnRequerimiento = mProps.transid
    
    sql = "SELECT GnRequerimiento.*, "
    sql = sql & " pc1.codprovcli as codproveedor1, "
    sql = sql & " pc2.codprovcli as codproveedor2, "
    sql = sql & " pc3.codprovcli as codproveedor3 "
    
    sql = sql & " FROM GnRequerimiento"
    sql = sql & " left join pcprovcli pc1 on pc1.idprovcli = GnRequerimiento.idproveedor1 "
    sql = sql & " left join pcprovcli pc2 on pc2.idprovcli = GnRequerimiento.idproveedor2 "
    sql = sql & " left join pcprovcli pc3 on pc3.idprovcli = GnRequerimiento.idproveedor3 "
     sql = sql & " Where transid = " & TransIDGnRequerimiento
    
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    
    If rs.EOF Then Exit Sub
    With rs
    
        If Not IsNull(!TipoPago) Then mProps.TipoPago = !TipoPago
        If Not IsNull(!TipoCompra) Then mProps.TipoCompra = !TipoCompra
        If Not IsNull(!TipoCuantia) Then mProps.TipoCuantia = !TipoCuantia
        If Not IsNull(!INCOP) Then mProps.INCOP = !INCOP
        If Not IsNull(!BandRevision) Then mProps.BandRevision = !BandRevision
        If Not IsNull(!FechaRevision) Then mProps.FechaRevision = !FechaRevision
        If Not IsNull(!EstadoReq) Then mProps.EstadoReq = !EstadoReq
        If Not IsNull(!Comentarios) Then
            If .Fields("Comentarios").ActualSize > 0 Then
                mProps.Comentarios = .Fields("Comentarios").GetChunk(.Fields("Comentarios").ActualSize)
            End If
        End If
        If Not IsNull(!BandCertifica) Then mProps.BandCertifica = !BandCertifica
        If Not IsNull(!FechaCertifica) Then mProps.FechaCertifica = !FechaCertifica
        If Not IsNull(!Proforma1) Then mProps.Proforma1 = !Proforma1
        If Not IsNull(!Monto1) Then mProps.Monto1 = !Monto1
        If Not IsNull(!Proforma2) Then mProps.Proforma2 = !Proforma2
        If Not IsNull(!Monto2) Then mProps.Monto2 = !Monto2
        If Not IsNull(!Proforma3) Then mProps.Proforma3 = !Proforma3
        If Not IsNull(!Monto3) Then mProps.Monto3 = !Monto3
        If Not IsNull(!ProfAdjudicada) Then mProps.ProfAdjudicada = !ProfAdjudicada
        If Not IsNull(!FechaProforma) Then mProps.FechaProforma = !FechaProforma
        If Not IsNull(!BandAceptacion) Then mProps.BandAceptacion = !BandAceptacion
        If Not IsNull(!FechaAceptacion) Then mProps.FechaAceptacion = !FechaAceptacion
        If Not IsNull(!ObservacionesReq) Then
            If .Fields("ObservacionesReq").ActualSize > 0 Then
                mProps.ObservacionesReq = .Fields("ObservacionesReq").GetChunk(.Fields("ObservacionesReq").ActualSize)
            End If
        End If
        If Not IsNull(!FechaObservacion) Then mProps.FechaObservacion = !FechaObservacion
        If Not IsNull(!BandDireccion) Then mProps.BandDireccion = !BandDireccion
        If Not IsNull(!FechaDireccion) Then mProps.FechaDireccion = !FechaDireccion
    
        If Not IsNull(!Crono1) Then mProps.Crono1 = !Crono1
        If Not IsNull(!FechaCR1) Then mProps.FechaCR1 = !FechaCR1
        If Not IsNull(!MontoCR1) Then mProps.MontoCR1 = !MontoCR1
        If Not IsNull(!ObsCrono1) Then mProps.ObsCrono1 = !ObsCrono1
    
        If Not IsNull(!Crono2) Then mProps.Crono2 = !Crono2
        If Not IsNull(!FechaCR2) Then mProps.FechaCR2 = !FechaCR2
        If Not IsNull(!MontoCR2) Then mProps.MontoCR2 = !MontoCR2
        If Not IsNull(!ObsCrono2) Then mProps.ObsCrono2 = !ObsCrono2
    
        If Not IsNull(!Crono3) Then mProps.Crono3 = !Crono3
        If Not IsNull(!FechaCR3) Then mProps.FechaCR3 = !FechaCR3
        If Not IsNull(!MontoCR3) Then mProps.MontoCR3 = !MontoCR3
        If Not IsNull(!ObsCrono3) Then mProps.ObsCrono3 = !ObsCrono3
        
        If Not IsNull(!OtrosPagos) Then mProps.OtrosPagos = !OtrosPagos
        If Not IsNull(!Tiporec) Then mProps.Tiporec = !Tiporec
        If Not IsNull(!ObservacionesCertifica) Then
            If .Fields("ObservacionesCertifica").ActualSize > 0 Then
                mProps.ObservacionesCertifica = .Fields("ObservacionesCertifica").GetChunk(1024)
            End If
        End If
        If Not IsNull(!EstadoRevision) Then mProps.EstadoRevision = !EstadoRevision
        If Not IsNull(!EstadoCertifica) Then mProps.EstadoCertifica = !EstadoCertifica
        
        If Not IsNull(!EstadoRevisionActa) Then mProps.EstadoRevisionActa = !EstadoRevisionActa
        If Not IsNull(!FechaRevisionActa) Then mProps.FechaRevisionActa = !FechaRevisionActa
        If Not IsNull(!ObservacionesRevisionActa) Then
            If .Fields("ObservacionesRevisionActa").ActualSize > 0 Then
                mProps.ObservacionesRevisionActa = .Fields("ObservacionesRevisionActa").GetChunk(1024)
            End If
        End If
        If Not IsNull(!Usuario1) Then mProps.Usuario1 = !Usuario1
        If Not IsNull(!Usuario2) Then mProps.Usuario2 = !Usuario2
        If Not IsNull(!Usuario3) Then mProps.Usuario3 = !Usuario3
        If Not IsNull(!IdProveedor1) Then mProps.IdProveedor1 = !IdProveedor1
        If Not IsNull(!IdProveedor2) Then mProps.IdProveedor2 = !IdProveedor2
        If Not IsNull(!IdProveedor3) Then mProps.IdProveedor3 = !IdProveedor3
        
        If Not IsNull(!CodProveedor1) Then mProps.CodProveedor1 = !CodProveedor1
        If Not IsNull(!CodProveedor2) Then mProps.CodProveedor2 = !CodProveedor2
        If Not IsNull(!CodProveedor3) Then mProps.CodProveedor3 = !CodProveedor3
        
        
        If Not IsNull(!RutaOferta1) Then mProps.RutaOferta1 = !RutaOferta1
        If Not IsNull(!RutaOferta2) Then mProps.RutaOferta2 = !RutaOferta2
        If Not IsNull(!RutaOferta3) Then mProps.RutaOferta3 = !RutaOferta3
        
        If Not IsNull(!UsuarioActa) Then mProps.UsuarioActa = !UsuarioActa
        If Not IsNull(!UsuarioRevActa) Then mProps.UsuarioRevActa = !UsuarioRevActa
        
    
    
        .Close
    End With
    Set rs = Nothing
End Sub

Public Property Let Crono1(ByVal value As String)
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.Crono1", MSGERR_SOLOVER
    
    If Len(value) > 220 Then
        'Err.Raise ERR_INVALIDO, "GNComprobante.Crono1", MSGERR_INVALIDO
        value = Mid$(value, 1, 220)
    End If
    
    'Solo cuando cambia el valor
    If mProps.Crono1 <> value Then
        mProps.Crono1 = value
        mbooModificado = True
    End If

End Property

Public Property Get Crono1() As String
    Crono1 = mProps.Crono1
End Property

Public Property Let MontoCR1(ByVal value As Currency)
    If value > 0 Then
        mProps.MontoCR1 = value
        mbooModificado = True
    Else
        mProps.MontoCR1 = 0
    End If
    
End Property

Public Property Get MontoCR1() As Currency
    MontoCR1 = mProps.MontoCR1
End Property

Public Property Let FechaCR1(value As Date)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.FechaCR1", MSGERR_SOLOVER
    
    'Solo cuando cambia el valor
    If mProps.FechaCR1 <> value Then
        mProps.FechaCR1 = value
        mbooModificado = True
    End If
End Property

Public Property Get FechaCR1() As Date
    FechaCR1 = mProps.FechaCR1
End Property

Public Property Let ObsCrono1(ByVal value As String)
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.ObsCrono1", MSGERR_SOLOVER
    
    If Len(value) > 220 Then
        'Err.Raise ERR_INVALIDO, "GNComprobante.ObsCrono1", MSGERR_INVALIDO
        value = Mid$(value, 1, 220)
    End If
    
    'Solo cuando cambia el valor
    If mProps.ObsCrono1 <> value Then
        mProps.ObsCrono1 = value
        mbooModificado = True
    End If

End Property

Public Property Get ObsCrono1() As String
    ObsCrono1 = mProps.ObsCrono1
End Property


'------------------------
Public Property Let Crono2(ByVal value As String)
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.Crono2", MSGERR_SOLOVER
    
    If Len(value) > 220 Then
        'Err.Raise ERR_INVALIDO, "GNComprobante.Crono2", MSGERR_INVALIDO
        value = Mid$(value, 1, 220)
    End If
    
    'Solo cuando cambia el valor
    If mProps.Crono2 <> value Then
        mProps.Crono2 = value
        mbooModificado = True
    End If

End Property

Public Property Get Crono2() As String
    Crono2 = mProps.Crono2
End Property

Public Property Let MontoCR2(ByVal value As Currency)
    If value > 0 Then
        mProps.MontoCR2 = value
        mbooModificado = True
    Else
        mProps.MontoCR2 = 0
    End If
    
End Property

Public Property Get MontoCR2() As Currency
    MontoCR2 = mProps.MontoCR2
End Property

Public Property Let FechaCR2(value As Date)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.FechaCR2", MSGERR_SOLOVER
    
    'Solo cuando cambia el valor
    If mProps.FechaCR2 <> value Then
        mProps.FechaCR2 = value
        mbooModificado = True
    End If
End Property

Public Property Get FechaCR2() As Date
    FechaCR2 = mProps.FechaCR2
End Property

Public Property Let ObsCrono2(ByVal value As String)
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.ObsCrono2", MSGERR_SOLOVER
    
    If Len(value) > 220 Then
        'Err.Raise ERR_INVALIDO, "GNComprobante.ObsCrono1", MSGERR_INVALIDO
        value = Mid$(value, 1, 220)
    End If
    
    'Solo cuando cambia el valor
    If mProps.ObsCrono2 <> value Then
        mProps.ObsCrono2 = value
        mbooModificado = True
    End If

End Property

Public Property Get ObsCrono2() As String
    ObsCrono2 = mProps.ObsCrono2
End Property


'/-------
Public Property Let Crono3(ByVal value As String)
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.Crono3", MSGERR_SOLOVER
    
    If Len(value) > 220 Then
        'Err.Raise ERR_INVALIDO, "GNComprobante.Crono3", MSGERR_INVALIDO
        value = Mid$(value, 1, 220)
    End If
    
    'Solo cuando cambia el valor
    If mProps.Crono3 <> value Then
        mProps.Crono3 = value
        mbooModificado = True
    End If

End Property

Public Property Get Crono3() As String
    Crono3 = mProps.Crono3
End Property

Public Property Let MontoCR3(ByVal value As Currency)
    If value > 0 Then
        mProps.MontoCR3 = value
        mbooModificado = True
    Else
        mProps.MontoCR3 = 0
    End If
    
End Property

Public Property Get MontoCR3() As Currency
    MontoCR3 = mProps.MontoCR3
End Property

Public Property Let FechaCR3(value As Date)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.FechaCR3", MSGERR_SOLOVER
    
    'Solo cuando cambia el valor
    If mProps.FechaCR3 <> value Then
        mProps.FechaCR3 = value
        mbooModificado = True
    End If
End Property

Public Property Get FechaCR3() As Date
    FechaCR3 = mProps.FechaCR3
End Property


Public Property Let ObsCrono3(ByVal value As String)
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.ObsCrono3", MSGERR_SOLOVER
    
    If Len(value) > 220 Then
        'Err.Raise ERR_INVALIDO, "GNComprobante.ObsCrono3", MSGERR_INVALIDO
        value = Mid$(value, 1, 220)
    End If
    
    'Solo cuando cambia el valor
    If mProps.ObsCrono3 <> value Then
        mProps.ObsCrono3 = value
        mbooModificado = True
    End If

End Property

Public Property Get ObsCrono3() As String
    ObsCrono3 = mProps.ObsCrono3
End Property

Public Property Let FechaProforma(value As Date)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.FechaProforma", MSGERR_SOLOVER
    
    'Solo cuando cambia el valor
    If mProps.FechaProforma <> value Then
        mProps.FechaProforma = value
        mbooModificado = True
    End If
End Property

Public Property Get FechaProforma() As Date
    FechaProforma = mProps.FechaProforma
End Property

Public Property Let OtrosPagos(ByVal value As String)
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.OtrosPagos", MSGERR_SOLOVER
    
    If Len(value) > 220 Then
        'Err.Raise ERR_INVALIDO, "GNComprobante.OtrosPagos", MSGERR_INVALIDO
        value = Mid$(value, 1, 220)
    End If
    
    'Solo cuando cambia el valor
    If mProps.OtrosPagos <> value Then
        mProps.OtrosPagos = value
        mbooModificado = True
    End If

End Property

Public Property Get OtrosPagos() As String
    OtrosPagos = mProps.OtrosPagos
End Property


Public Property Let Tiporec(ByVal value As Byte)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.TipoRec", MSGERR_SOLOVER
    
    If value <> mProps.Tiporec Then
        mProps.Tiporec = value
        mbooModificado = True
    End If
End Property

Public Property Get Tiporec() As Byte
    Tiporec = mProps.Tiporec
End Property

Public Function Cantidad() As Currency
Dim item As IVInventario
Dim cant As Currency
Dim v As Variant, i As Long, j As Long
Dim t As Currency
Dim cantAcu As Currency
cant = 1
    For i = 1 To CountIVKardex
        Set item = Me.Empresa.RecuperaIVInventario(Me.IVKardex(i).CodInventario)
        If item.Tipo = rubro Then
            v = Split(Me.IVKardex(i).Nota1, ";")
            For j = 0 To UBound(v)
             cant = cant * val(v(j))
            Next j
            cantAcu = cantAcu + cant
        End If
    Next i
    Cantidad = cantAcu
    Set item = Nothing
End Function
Public Property Get IVKProceso(ix As Long) As IVKProceso
    If mcolIVKProceso Is Nothing Then RecuperaIVKProceso
    Set IVKProceso = mcolIVKProceso.item(ix)
End Property
'AUC 18/08/2008
Private Sub ImportaIVKardexSoloMateriales( _
                ByVal Fuente As GNComprobante, _
                ByVal ConValorReal As Boolean, _
                ByVal Incremental As Boolean)
    Dim i As Long, ix As Long, ivk As IVKardex
    Dim Signo As Integer
    Dim item As IVInventario
    If mcolIVKardex Is Nothing Then Set mcolIVKardex = New Collection
    'Si es importación incremental, no se borra lo anterior
    If Not Incremental Then             '*** MAKOTO 15/dic/00
        BorrarIVKardex
    End If
    For i = Fuente.CountIVKardex To 1 Step -1
        If Not Me.Empresa.ItemEsMaterial(Fuente.IVKardex(i).CodInventario) Then
            Fuente.RemoveIVKardexPreparacion (i)
        End If
    Next
    For i = 1 To Fuente.CountIVKardex
        Set ivk = Fuente.IVKardex(i).Clone
        Set ivk.GNComprobante = Me
       If (GNTrans.Modulo <> Fuente.GNTrans.Modulo) Or _
            (GNTrans.Modulo = Fuente.GNTrans.Modulo) Then       '**** PEND
            'Asegura que la cantidad tenga el signo correcto
            ' Es necesario porque tiene que cambiar de signo cuando importa de
            ' FC(Egreso) --> FCV(Ingreso) o CP(Ingreso) --> CPV(Egreso)
            ' HC(Ingreso) --> OF(Egreso) etc...
            If Me.GNTrans.ImpRespetarSignosCantidad Then
                Signo = IIf(Fuente.GNTrans.IVTipoTrans = "E", -1, 1) '-1 si es egreso
            Else
                Signo = IIf(Me.GNTrans.IVTipoTrans = "E", -1, 1) '-1 si es egreso
            End If
            ivk.Cantidad = Abs(ivk.Cantidad) * Signo
        End If
       If Not ConValorReal Then
            ivk.CostoTotal = Abs(ivk.CostoTotal) * Signo
            ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
        Else
            ivk.CostoTotal = Abs(ivk.CostoRealTotal) * Signo
            ivk.PrecioTotal = Abs(ivk.PrecioRealTotal) * Signo
        End If
        ivk.CostoRealTotal = Abs(ivk.CostoRealTotal) * Signo
        ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
        mcolIVKardex.Add ivk
    Next i
End Sub
Private Sub RecuperaIVKProceso()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
    mod_antes = mbooModificado      'Guarda el estado de Modificado
    Dim pos1 As Integer
    If mcolIVKProceso Is Nothing Then Set mcolIVKProceso = New Collection
    BorrarIVKProceso
    pos1 = InStr(1, UCase(gobjMain.EmpresaActual.GNOpcion.NombreEmpresa), "MAHAV")
    If pos1 > 0 Then
        sql = "SELECT * FROM IVKProceso WHERE TransId=" & mProps.transid & " ORDER BY Orden"
    Else
        sql = "SELECT p.codproceso,p.descripcion as DescProceso ,p.codusuario,kp.* "
        sql = sql & " FROM IVKProceso kp "
        sql = sql & " INNER JOIN IVProceso P ON p.idproceso = kp.idproceso"
        sql = sql & " Where  kp.Transid = " & mProps.transid
        sql = sql & " Order by secuencia"
    End If
   Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !IDkp > 0 Then                 'Para asegurar el Bug de ADO
                i = AddIVKProceso
                IVKProceso(i).Recuperar rs
           End If
                .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub
Public Sub BorrarIVKProceso()
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BorrarIVKardex", MSGERR_SOLOVER
    If mcolIVKProceso Is Nothing Then Set mcolIVKProceso = New Collection
    With mcolIVKProceso
        Do While .Count > 0
            .Remove .Count
        Loop
    End With
    mbooModificado = True
End Sub
Public Function AddIVKProceso() As Long
    Dim nuevo As IVKProceso
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.AddIVKardex", MSGERR_SOLOVER
    If mcolIVKProceso Is Nothing Then RecuperaIVKProceso
    Set nuevo = New IVKProceso
    Set nuevo.GNComprobante = Me
    'Proporciona valores predeterminados
    nuevo.HorasPre = GNTrans.CantidadPre
    mcolIVKProceso.Add nuevo
    AddIVKProceso = mcolIVKProceso.Count
   Set nuevo = Nothing
    mbooModificado = True
End Function
Public Property Get CountIVKProceso() As Long
    If mcolIVKProceso Is Nothing Then RecuperaIVKProceso
    CountIVKProceso = mcolIVKProceso.Count
End Property
Public Sub RemoveIVKProceso(ByVal ix As Long, Optional obj As IVKProceso)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemoveIVKProceso", MSGERR_SOLOVER
    If mcolIVKProceso Is Nothing Then RecuperaIVKProceso
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolIVKProceso.Count
            If mcolIVKProceso.item(ix) Is obj Then
                mcolIVKProceso.Remove ix
               Exit For
            End If
        Next ix
        Debug.Assert True   'No se puede dar
    Else
        mcolIVKProceso.Remove ix
   End If
    mbooModificado = True
End Sub
Public Function IVKardexCTotalRubro(bandReal As Boolean) As Currency
    Dim t As Currency, i As Long, v As Currency
    For i = 1 To CountIVKardex
        If bandReal Then
            If IVKardex(i).idpadre = 0 Then v = IVKardex(i).CostoRealTotal
        Else
            If IVKardex(i).idpadre = 0 Then v = IVKardex(i).CostoTotal
        End If
        'Redondea con el formato para Costos      *** MAKOTO 13/feb/01 Mod.
        t = t + MiCCur(Format$(v, Me.FormatoCosto))
    Next i
    IVKardexCTotalRubro = t
End Function
'AUC 14/03/08 LAROT Muestra solo materiales
Public Function ListaIVKardex6() As Variant
Dim sql As String, rs As Recordset
    sql = "spConsIVKardex2 " & mProps.transid & ", " & _
    Me.Cotizacion("")
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
Set ListaIVKardex6 = rs
Set rs = Nothing
End Function
'AUC 07/08/08 LAROT lista solo los rubros
Public Function ListaIVKardexProdTerm( _
                    ) As Variant
Dim sql As String, rs As Recordset
    VerificaExistenciaTabla 99
    sql = "select  ivk.transid,ivk.idpadre,"
    sql = sql & "sum(ivk.CostoTotal / ivk.Cantidad) as cu, "
    sql = sql & "sum(Abs(ivk.CostoTotal)) AS CT, "
    sql = sql & "sum(ivk.PrecioTotal / ivk.Cantidad) as PU,sum(Abs(ivk.precioTotal)) AS pT " ',gncc.codcentrodet "
   sql = sql & "into tmp99 from ivkardex ivk  "
    'sql = sql & "inner join gncentrocostodetalle gncc on gncc.idcentrodet=ivk.idcentrocosto "
   sql = sql & " inner join gncomprobante gn on gn.transid = ivk.transid "
    sql = sql & "Inner join ivinventario iv on iv.idinventario = ivk.idinventario "
    sql = sql & "Where gn.transid = " & mProps.transid
    sql = sql & " group by   ivk.transid,ivk.idpadre" ',gncc.codcentrodet"
   Set rs = mProps.objEmpresa.OpenRecordset(sql)
    sql = "select iv.codinventario,ivk.nota,abs(ivk.cantidad) as cant,0 as ancho,0 as alto,0 as prof,"
    sql = sql & "t.cu,t.ct,(iv.utilidad*100) as util,t.pu,t.pt,ivk.Nota1,ivk.tamaño " ',t.codcentrodet "
   sql = sql & "from tmp99 t inner join ivkardex ivk "
    sql = sql & "inner join ivinventario iv on iv.idinventario = ivk.idinventario "
    sql = sql & "on ivk.idpadre = t.idpadre and ivk.transid = t.transid "
    sql = sql & "and len(nota)>0"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set ListaIVKardexProdTerm = rs
    Set rs = Nothing
End Function
Public Function ListaIVKardexComponentes( _
                    ByVal ExistPorBodega As Boolean, ByVal idpadre As Long) As Variant
Dim sql As String, rs As Recordset
    sql = "spConsIVKardex1 " & mProps.transid & ", " & _
    Me.Cotizacion("") & ", " & _
    CadenaBool(ExistPorBodega, Me.Empresa.TipoDB) & ", " & _
    CadenaBool((Me.GNTrans.IVTipoTrans = "E"), Me.Empresa.TipoDB) & "," & idpadre
Set rs = mProps.objEmpresa.OpenRecordset(sql)
Set ListaIVKardexComponentes = rs
Set rs = Nothing
End Function
Public Function ListaTransFuenteOP( _
                    ByVal CodCentro As String) As Variant
    Dim sql As String, s As String, v As Variant, i As Long, CodT As String
    Dim cond As String, rs As Recordset, cond1 As String
    If Len(GNTrans.CodTransFuente) > 0 Then
        'Puede tener varios codigos de transaccion de fuente    ejm. (FC);(OF)
        v = Split(GNTrans.CodTransFuente, ";")
        For i = 0 To UBound(v)
            If Len(s) > 0 Then s = s & ","
            CodT = v(i)
            CodT = Left$(CodT, Len(CodT) - 1)       'Quita el signo ')'
            CodT = Right$(CodT, Len(CodT) - 1)      'Quita el signo '('
            s = s & "'" & CodT & "'"
        Next i
    Else
        Err.Raise ERR_INVALIDO, "GNComprobante.ListaTransFuente", _
                    "No está definida ningúna transacción de fuente para ésta transacción."
    End If
    sql = "SELECT"
    If Not gobjMain.objCondicion.IncluirCero Then
        If gobjMain.objCondicion.TopN > 0 Then
            sql = sql & " TOP " & gobjMain.objCondicion.TopN
        End If
    End If
    sql = sql & " gc.TransID, gc.FechaTrans, gc.CodTrans, gc.NumTrans, "
    sql = sql & " gc.NumdocRef, gc.Nombre, gc.Descripcion, "
    sql = sql & " cc.idCentro, cc.CodCentro, cc.Descripcion AS DescCentro,iv.codinventario,ccd.codcentrodet,  gc.Estado, "
    sql = sql & " case gc.Estado when '0' THEN 'NO CONT' when '1' THEN 'APROV' when '2' THEN 'DESPA' when '3' THEN 'ANULA' when '4' THEN 'SEM DESP' END AS estadoL "
        sql = sql & "FROM GNCentroCosto cc RIGHT JOIN "
        sql = sql & "  GNComprobante gc INNER Join IVKardex ivk "
        sql = sql & " INNER JOIN IVINVENTARIO IV ON IV.IDINVENTARIO = IVK.IDINVENTARIO"
         sql = sql & "  LEFT JOIN GNCENTROCOSTODETALLE CCD ON CCD.IDCENTRODET= IVK.IDCENTROCOSTO  ON IVK.TRANSID = GC.TRANSID"
        sql = sql & IIf(Len(gobjCond.CodPC1) > 0, " Inner join PcProvCli pc ON (gc.IdProveedorRef = pc.IDProvCli  OR gc.IdClienteRef = pc.IDProvCli) ", " ")
        sql = sql & " ON cc.IdCentro = gc.IdCentro "
        If Not gobjMain.objCondicion.IncluirCero Then
            If Len(cond) > 0 Then cond = cond & " AND "
            cond = cond & " gc.Estado IN ("
            If gobjMain.objCondicion.EstadoBool(ESTADO_NOAPROBADO) Then
                 cond = cond & ESTADO_NOAPROBADO & ","
            End If
            If gobjMain.objCondicion.EstadoBool(ESTADO_APROBADO) Then
                 cond = cond & ESTADO_APROBADO & ","
            End If
             If gobjMain.objCondicion.EstadoBool(ESTADO_DESPACHADO) Then
                 cond = cond & ESTADO_DESPACHADO & ","
            End If
             If gobjMain.objCondicion.EstadoBool(ESTADO_SEMDESPACHADO) Then
                 cond = cond & ESTADO_SEMDESPACHADO & ","
            End If
            cond = Mid$(cond, 1, Len(cond) - 1)
            cond = cond & ")"
        Else
            cond = cond & " bandfinalizado=0"
        End If
    ' Condicion de Busqueda de Fecha
    If Not gobjMain.objCondicion.IncluirCero Then
    If Len(cond) > 0 Then cond = cond & " AND "
     cond = cond & " (gc.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, gobjMain.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, gobjMain.TipoDB) & " ) "
     'Condición de CodProvCli    (Opcional)
     End If
    If Len(gobjCond.CodPC1) > 0 Then
       If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(PC.CodProvCli='" & gobjCond.CodPC1 & "')"
   End If
    If Len(s) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gc.CodTrans IN (" & s & ")"
    End If
    If Len(CodCentro) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " cc.CodCentro='" & CodCentro & "'"
    End If
    If gobjCond.NumTrans1 <> 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gc.Numtrans= " & gobjCond.NumTrans1
    End If
    If gobjCond.NumTrans2 <> 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gc.numdocref= '" & gobjCond.NumTrans2 & "'"
    End If
    If Len(cond) > 0 Then sql = sql & "WHERE " & cond
    sql = sql & " AND LEN(IVK.NOTA)> 0"
    sql = sql & " Group by gc.TransID, gc.FechaTrans, gc.horatrans, "
    sql = sql & " gc.CodTrans, gc.NumTrans, gc.NumdocRef, gc.Nombre, gc.Descripcion,"
    sql = sql & " cc.idcentro, cc.CodCentro, cc.Descripcion, gc.Estado,ccd.codcentrodet,IV.CODINVENTARIO  "
    sql = sql & " ORDER BY gc.FechaTrans Desc, gc.horatrans desc  ,gc.CodTrans,gc.NumTrans"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set ListaTransFuenteOP = rs
    Set rs = Nothing
End Function
Public Sub ImportaDatosOP( _
                ByVal TransIDs As String, _
                ByVal Incremental As Boolean, ByVal CodCentroDet As String)
    Dim Fuente As GNComprobante, i As Long, sql As String, rs As Recordset
    Dim v As Variant, tid As Long, aux_inc As Boolean
    Dim v1 As Variant
    Dim desc As String
    If Len(TransIDs) = 0 Then Exit Sub
    'Prepara una colección para almacenar TransIDs de fuente,
    ' para cuando graba la transacción cambiar de estado a Despachado
    If mcolTransIDs Is Nothing Then Set mcolTransIDs = New Collection
    'Separa los TransIDs en un vector
    v = Split(TransIDs, ",")
    aux_inc = Incremental
    v1 = Split(idCentros, ",")
    'Si la transacción está configurada que importa solo desde transacciones Apropadas
    If Me.GNTrans.ImportaSoloAprobado Then
        sql = "SELECT CodTrans, NumTrans FROM GNComprobante " & _
              "WHERE (Not Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & ")) " & _
              " AND (TransID IN (" & TransIDs & ")) "
        Set rs = Me.Empresa.OpenRecordset(sql)
        If Not rs.EOF Then
            sql = MSGERR_NOIMPORTA & vbCr & vbCr
            Do Until rs.EOF
                sql = sql & rs.Fields("CodTrans") & " " & rs.Fields("NumTrans") & vbCr
                rs.MoveNext
            Loop
            Err.Raise ERR_NOIMPORTA, "GNComprobante.ImportaDatos", sql
        End If
        rs.Close
        Set rs = Nothing
    End If
    desc = " Trans. Fuente: "
    'Repite para todas las transacciones de fuente
    For i = 0 To UBound(v, 1)
        tid = val(v(i))             'Convierte en numérico
        'Desde la segunda trans. hay que incrementar siempre
        If i > 0 Then aux_inc = True
        'Recupera la transaccioón de fuente
        Set Fuente = Empresa.RecuperaGNComprobante(tid)
        If Fuente Is Nothing Then
            Err.Raise ERR_NOHAYCODIGO, "GNComprobante.ImportaDatos", _
                        "No se puede recuperar la transacción de fuente."
        End If
        'Si está ImportaSoloAprobado=True y el origen no está 'aprobado' ni 'despachado'
        If GNTrans.ImportaSoloAprobado And _
            Not (Fuente.Estado = ESTADO_APROBADO Or Fuente.Estado = ESTADO_DESPACHADO Or Fuente.Estado = ESTADO_SEMDESPACHADO) Then
            Err.Raise ERR_NOIMPORTA, "GNComprobante.ImportaDatos", MSGERR_NOIMPORTA
        End If
        'Copia los datos de cabecera
        If Len(Me.idCentros) = 0 Then
            CodCentro = Fuente.CodCentro
        End If
        If Not Fuente.GNTrans.IVPideEmpleado Then
            CodProveedorRef = Fuente.CodProveedorRef
        End If
        CodClienteRef = Fuente.CodClienteRef
        CodVendedor = Fuente.CodVendedor
        NumDocRef = Fuente.NumDocRef
        CodGaranteRef = Fuente.CodGaranteRef
        CodObra = Fuente.CodObra
        If Me.GNTrans.IVVisibleSucursalSolicita Then
            If Len(Fuente.CodZona) = 0 Then
                CodZona = Fuente.GNTrans.CodSucursal
            Else
                CodZona = Fuente.CodZona
            End If
        Else
            CodZona = Fuente.CodZona
        End If
        Atencion = Fuente.Atencion
        Detalles = Fuente.Detalles
        FechaEntrega = Fuente.FechaEntrega
        'jeaa 04-04-2005 aumentado para saber de donde importo
        If UBound(v, 1) = 0 Then
            If Not Me.GNTrans.VisualizaTransFuente Then
                If Len(desc & " " & Fuente.CodTrans & " No. " & Fuente.NumTrans & " / ") > 120 Then
                    desc = desc & " " & Fuente.CodTrans & " No. " & Fuente.NumTrans & " / " & Mid$(Fuente.Descripcion, 1, Len(Fuente.Descripcion) - Len(Descripcion) - 20 - Len(Fuente.CodTrans))
                Else
                    desc = desc & " " & Fuente.CodTrans & " No. " & Fuente.NumTrans & " / " & Left$(Fuente.Descripcion, 120 - (Len(desc) + 5))
                End If
            Else
                desc = Left$(Fuente.Descripcion, 120)
                TransFuente = Fuente.CodTrans & " -" & Fuente.NumTrans
            End If
        Else
            If Len(Me.idCentros) = 0 Then
                desc = desc & Fuente.CodTrans & "-" & Fuente.NumTrans & " / "
            Else
                If InStr(1, desc, Fuente.CodCentro) = 0 Then
                    desc = desc & Fuente.CodCentro & " / "
                End If
            End If
        End If
        CodResponsable = Fuente.CodResponsable  '*** MAKOTO 16/ago/2000
        Nombre = Fuente.Nombre                  '*** MAKOTO 06/feb/01 Agregado
        'Si requiere importar TSKardex
'        If GNTrans.ImportaTSK Then
'            ImportaTSKardex fuente
'        End If
'
'        'Si requiere importar TSKardexRet       '*** MAKOTO 07/feb/01 Agregado
'        If GNTrans.ImportaTSKRet Then
'            ImportaTSKardexRet fuente
'        End If
        'Si requiere importar IVKardex
        If GNTrans.ImportaIVK Then
            ImportaIVKardex Fuente, False, aux_inc
        End If
        'Si requiere importar IVKardex pero que pase CostoRealTotal a CostoTotal
        If GNTrans.ImportaIVKReal Then
            ImportaIVKardex Fuente, True, aux_inc
        End If
        'Si requiere importar IVKardexRecargo
        If GNTrans.ImportaIVKR Then
            ImportaIVKardexRecargo Fuente
        End If
        'Si requiere importar PCKardex
        If GNTrans.ImportaPCK Then
            If GNTrans.CodPantalla = "IVRES_ALQ" Or GNTrans.CodPantalla = "IVBQD2B" Then  'AUC 14/02/07
                ImportaPCKardex1 Fuente, aux_inc
            Else
                ImportaPCKardex Fuente
            End If
        End If
        'Almacena TransID de fuente en la colección
        If Not aux_inc Then LimpiaColeccion mcolTransIDs
        mcolTransIDs.Add item:=Fuente.transid
        'Si es importación incremental, cambia estado del ogígen inmediatamente
        '  Si no es incremental, lo hace al momento de grabar la trans para que
        '  no cambie estado en case de que cancela la transaccion sin grabar
        If Incremental Then
            'Si no está aprobado, no pasa al estado 'Despachado'
            ' para evitar que un asiento descuadrado marque como Despachado y afecte al balance
            If Fuente.Estado = ESTADO_APROBADO Then
                'Cambia el estado de fuente a Despachado
                mProps.objEmpresa.CambiaEstadoGNComp Fuente.transid, ESTADO_DESPACHADO
            End If
        End If
    Next i
    If UBound(v, 1) = 0 Then
        Descripcion = Descripcion & Mid$(desc, 1, 120 - Len(Descripcion))
    Else
        Descripcion = Descripcion & Mid$(desc, 1, 120 - Len(Descripcion))
    End If
    If Len(Descripcion) > 120 Then Descripcion = Mid$(Descripcion, 1, 120)
    Set Fuente = Nothing
End Sub
Public Property Let CodCentrosdet(ByVal value As String)
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.idCentrosdet", MSGERR_SOLOVER
'    If Len(value) > 512 Then
'        Err.Raise ERR_INVALIDO, "GNComprobante.idCentrosdet", MSGERR_INVALIDO
'    End If
'    'Solo cuando cambia el valor
'    If mProps.CodCentrosdet <> value Then
'        mProps.CodCentrosdet = value
'       mbooModificado = True
'    End If
End Property
Public Property Get CodCentrosdet() As String
'    CodCentrosdet = Trim$(mProps.CodCentrosdet)
End Property

Public Property Let CodCentroHijo(ByVal value As String)
    Dim sql As String
    Dim rs As Recordset
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.IdCentroDet", MSGERR_SOLOVER
    'Cuando cambia el valor
    If value <> mProps.CodCentroHijo Then
        If Len(value) > 0 Then
            'Actualiza IdCentro también
            sql = "SELECT IdCentroDet FROM GNCentroCostoDetalle "
            If InStr(1, UCase(mProps.objEmpresa.GNOpcion.NombreEmpresa), "BOLIVAR") > 0 Then 'auc para ficha
                sql = sql & " INNER JOIN fichadetalle fd on fd.id = gncentrocostodetalle.idfichadet"
                sql = sql & " AND fd.BandAlta = 0"
            End If
            sql = sql & " WHERE CodCentrodet='" & value & "'"
           Set rs = mProps.objEmpresa.OpenRecordset(sql)
            If Not rs.EOF Then
'                Err.Raise ERR_NOHAYCODIGO, "GNComprobante.CodCentro", MSGERR_NOHAYCODIGO
'                Exit Property
'            Else
                idCentroHijo = rs!idCentroDet
                End If
            rs.Close
            Set rs = Nothing
        Else
            idCentroHijo = 0
        End If
        mProps.CodCentroHijo = value
        SetModificado
    End If
End Property

Public Property Get CodCentroHijo() As String
    CodCentroHijo = Trim$(mProps.CodCentroHijo)
End Property
Public Property Let idCentroHijo(ByVal value As Long)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.IdCentro", MSGERR_SOLOVER
    mProps.idCentroHijo = value
    mbooModificado = True
End Property
Public Property Get idCentroHijo() As Long
    idCentroHijo = mProps.idCentroHijo
End Property
Public Function ListaIVKardexTipo( _
                    ByVal ExistPorBodega As Boolean, ByVal Tipo As Integer) As Variant
    Dim sql As String, rs As Recordset
    If Me.GNTrans.CodPantalla = "IVOP" Then
        sql = "spConsIVKardexProduccion " & mProps.transid & ", " & _
                                  Me.Cotizacion("")
    ElseIf Me.GNTrans.CodPantalla = "IVOPM" Then 'pantalla para maderamica
        sql = "spConsIVKardexProduccionM " & mProps.transid & ", " & _
                                  Me.Cotizacion("")
   Else
           sql = "spConsIVKardextipo " & mProps.transid & ", " & _
                                  Me.Cotizacion("") & ", " & _
                                  CadenaBool(ExistPorBodega, Me.Empresa.TipoDB) & ", " & _
                                  Tipo & ", " & _
                                  CadenaBool((Me.GNTrans.IVTipoTrans = "E"), Me.Empresa.TipoDB)
    End If
       Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set ListaIVKardexTipo = rs
    Set rs = Nothing
End Function

Private Function GeneraAsientoIVVentaALQ( _
                    Param As String) As colAsientoTemp
    Dim i As Long, v As Currency, k As IVKardex
    Dim col As colAsientoTemp
    Set col = New colAsientoTemp
    For i = 1 To CountIVKardex
     If Me.IVKardex(i).Cantidad < 0 Then
        v = 0
        Set k = IVKardex(i)
        '*** MAKOTO 08/mar/01 Agregado
        'Si es que el item no tiene asignado una cuenta de Activo, genera error
        If k.auxIdCuentaVenta = 0 Then
            NoTieneCuentaAsignado True, "VENTA", k.CodInventario
        End If
        Select Case Right$(Param, 1)
        Case "+":   If k.PrecioRealTotal > 0 Then v = Abs(k.PrecioRealTotal)
        Case "-":   If k.PrecioRealTotal < 0 Then v = Abs(k.PrecioRealTotal)
        Case "*":   v = k.PrecioRealTotal
        Case "2":   v = Abs(k.PrecioTotal)           '*** DIEGO  14/07/03 Modificado Necesitamos Precio Total
        Case Else:
        ''            jeaa  09/02/2007 sii factura por impresion x item
            If Me.GNTrans.IVTipoTrans = "E" Then
                If k.PrecioRealTotal < 0 Then
                    v = Abs(k.PrecioRealTotal)      '*** MAKOTO 14/dic/00 Modificado para que tome PrecioRealTotal
                Else
                    'cuando esiste devolucion en la misma Factura CAMARI
                    v = (k.PrecioRealTotal) * -1
                End If
            Else
                    v = Abs(k.PrecioRealTotal)      '*** MAKOTO 14/dic/00 Modificado para que tome PrecioRealTotal
            End If
        'v = Abs(k.PrecioRealTotal)      '*** MAKOTO 14/dic/00 Modificado para que tome PrecioRealTotal
        End Select
        If v <> 0 Then
            'Redondea al formato de P.Total               '*** MAKOTO 13/feb/01
            'v = MiCCur(Format$(v, Me.FormatoMoneda))
            'jeaa 21/junio/2005 antes v = MiCCur(Format$(v, Me.Formatomoneda))
            v = MiCCur(Format$(v, Me.FormatoCosto))
            col.Add k.auxIdCuentaVenta, v
        End If
    End If
    Next i
    'Al ultimo tiene que redondear al formato de Precio Total       '*** MAKOTO 01/mar/01
    RedondearAsiento col, Me.FormatoMoneda
    If col.Count Then Set GeneraAsientoIVVentaALQ = col
    Set col = Nothing
End Function
'AUC 16/01/08 Para larot busqueda filtrando idPadre
 Public Function ListaIVKardex7( _
                    ByVal ExistPorBodega As Boolean, ByVal idpadre As Long) As Variant
    Dim sql As String, rs As Recordset
   Dim cmd As ADODB.Command
    Set cmd = New ADODB.Command
    cmd.ActiveConnection = mProps.objEmpresa.Coneccion
        sql = "spConsIVKardexidPadre " & mProps.transid & ", " & idpadre & " , " & _
                                  Me.Cotizacion("") & ", " & _
                                  CadenaBool(ExistPorBodega, Me.Empresa.TipoDB) & ", " & _
                                  CadenaBool((Me.GNTrans.IVTipoTrans = "E"), Me.Empresa.TipoDB)         '*** MAKOTO 26/ene/01 Mod. Si es egreso multiplica -1
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set ListaIVKardex7 = rs
    Set rs = Nothing
End Function
Private Function fechadevolucion_Reserva(idInv As Long, ByRef v() As Variant) As Date
Dim item As Recordset
Dim sql As String
Dim i As Integer
Dim LimiteDias As Long
On Error GoTo ErrTrap
LimiteDias = Me.Empresa.GNOpcion.ObtenerValor("LimiteReservacion")
    sql = " Select  fechadevolucion from gncomprobante gnc   "
    sql = sql & " INNER JOIN ivkardex ivk on ivk.transid = gnc.transid "
    sql = sql & " where estadoalquiler = 1 and ivk.idinventario = " & idInv & " order by fechadevolucion "
       Set item = Me.Empresa.OpenRecordset(sql)
        Do While Not item.EOF
        ReDim Preserve v(2, i)
         If Not yaExisteFecha(v(), idInv, CDate(item!FechaDevolucion)) Then
           v(1, i) = idInv
           v(2, i) = CDate(item!FechaDevolucion) '+ LimiteDias)
          '2 para saber cuanto es que devuelven supuestamente los items
          'despues ver si ponemos en una tabla
           i = i + 1
        End If
         item.MoveNext
       Loop
Set item = Nothing
ErrTrap:
ReDim Preserve v(2, 1)
v(1, 0) = 0
v(1, 1) = 0
    Exit Function
End Function


'--------------------------------------
'--------------- Manejo de coleccion de VTKardexConciliaTransporte
Public Function AddVTKardexConciliaTrans() As Long
    Dim nuevo As VTKardexConciliaTrans
    
    'Cuando SoloVer está establecido a True, genera error
    If mcolVTKardexConciliaTrans Is Nothing Then RecuperaVTKardexConciliaTrans
    
    Set nuevo = New VTKardexConciliaTrans
    Set nuevo.GNComprobante = Me
    
    'Valores predeterminados
    If Me.CountVTKardexConciliaTrans = 0 Then
'''        'nuevo.NumDoc = Left$(Me.NumDocRef, 20)
    Else
    End If
    
    mcolVTKardexConciliaTrans.Add nuevo
    AddVTKardexConciliaTrans = mcolVTKardexConciliaTrans.Count    'Devuelve el indice de nuevo elemento
    Set nuevo = Nothing
    mbooModificado = True
End Function

Public Sub RemoveVTKardexConciliaTrans(ByVal ix As Long, Optional obj As VTKardexConciliaTrans)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemoveVTKardexConciliaTrans", MSGERR_SOLOVER
    If mcolVTKardexConciliaTrans Is Nothing Then RecuperaVTKardexConciliaTrans
    
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolVTKardexConciliaTrans.Count
            If mcolVTKardexConciliaTrans.item(ix) Is obj Then
                mcolVTKardexConciliaTrans.Remove ix
                Exit For
            End If
        Next ix
    Else
        mcolVTKardexConciliaTrans.Remove ix
    End If
    
    mbooModificado = True
End Sub

'Elimina todos los detalles de VTKardexConciliaTrans
Public Sub BorrarVTKardexConciliaTrans()
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BorrarVTKardexConciliaTrans", MSGERR_SOLOVER
    If mcolVTKardexConciliaTrans Is Nothing Then Set mcolVTKardexConciliaTrans = New Collection
    
    With mcolVTKardexConciliaTrans
        Do While .Count > 0
            .Remove .Count
        Loop
    End With
    mbooModificado = True
End Sub

Public Property Get CountVTKardexConciliaTrans() As Long
    If mcolVTKardexConciliaTrans Is Nothing Then RecuperaVTKardexConciliaTrans
    CountVTKardexConciliaTrans = mcolVTKardexConciliaTrans.Count
End Property

Public Property Get VTKardexConciliaTrans(ix As Long) As VTKardexConciliaTrans
    If mcolVTKardexConciliaTrans Is Nothing Then RecuperaVTKardexConciliaTrans
    Set VTKardexConciliaTrans = mcolVTKardexConciliaTrans.item(ix)
End Property

Private Sub RecuperaVTKardexConciliaTrans()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean

    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolVTKardexConciliaTrans Is Nothing Then Set mcolVTKardexConciliaTrans = New Collection
    
    'Recupera los registros de VTKardexConciliaTrans
    sql = "SELECT tskc.*" & _
          "FROM VTKardexConciliaTrans tskc " & _
                " "
    sql = sql & "WHERE TransId=" & mProps.transid & " ORDER BY Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddVTKardexConciliaTrans
                VTKardexConciliaTrans(i).Recuperar rs
            End If
            .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub


Public Function RecuperaVTConciliacionTrans(transid As Long) As Variant
    Dim sql As String, rs As Recordset
    sql = "select "
    sql = sql & " transid , IdTrans, FechaTrans, CodTrans,"
    sql = sql & " Trans, NumDocRef, Nombre,Descripcion,"
    sql = sql & " Vendedor, TransOrigen, DirTransporte, Haber, Saldo, BandConciliado"
    sql = sql & " SaldoConfirmado , Diferencia, Estado, Orden, XX, HoraTrans, tipo"
   sql = sql & " from VWVTKardexConciliacionTrans  "
    sql = sql & " Where transidPadre = " & transid
    sql = sql & " ORDER BY vendedor,  FechaTrans, HoraTrans, TransID, Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    RecuperaVTConciliacionTrans = MiGetRows(rs) 'rs
    Set rs = Nothing
End Function




Public Function RecuperaVTConciliacionTransImpresion(transid As Long, ByVal Valor As String, _
            ByVal CodTipo As String, ByVal BandConci As String) As Variant
    Dim sql As String, rs As Recordset
    sql = "select "
    sql = sql & " FechaTrans, "
    sql = sql & " vw.numTrans as trans, DirTransporte, Nombre, vendedor, PrecioTotalBase0+PrecioTotalBaseIVA  as Valor, DirTransporte, ciudad,  vw.transid , TransOrigen, FechaEntrega, HORATRANS "
    sql = sql & " from VWVTKardexConciliacionTrans vw left join vwConsSUMIVKardexIVA ivk on VW.transid=ivk.transid   "
    sql = sql & " Where transidPadre = " & transid
    sql = sql & " AND BandConciliado = " & BandConci & ""
   sql = sql & " ORDER BY vendedor, FechaTrans,  Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaVTConciliacionTransImpresion = rs
    Set rs = Nothing
End Function

'--------------- Manejo de coleccion de PCKardexCHP
Public Function AddPCKardexCHP() As Long
    Dim nuevo As PCKardexCHP, tsf As TSFormaCobroPago
    
    If mcolPCKardexCHP Is Nothing Then RecuperaPCKardexCHP
    
    Set nuevo = New PCKardexCHP
    Set nuevo.GNComprobante = Me
    
    'Proporciona valores predeterminados
    If Me.CountPCKardexCHP = 0 Then            '*** MAKOTO 14/oct/00 Modificado
        nuevo.CodForma = GNTrans.CodFormaPre
    Else
        nuevo.CodForma = Me.PCKardexCHP(Me.CountPCKardexCHP).CodForma     'Coge lo anterior
    End If
    
    nuevo.FechaEmision = mProps.FechaTrans
    
    '*** MAKOTO 05/dic/00 Agregado
    If Len(Me.NumDocRef) > 0 Then
        nuevo.NumLetra = Left$(Me.NumDocRef, 20)
    End If

    '*** MAKOTO 22/jun/2000. Para reflejar 'Plazo predeterminado' de forma de cobro/pago
    Set tsf = Me.Empresa.RecuperaTSFormaCobroPago(nuevo.CodForma)
    
    If Not (tsf Is Nothing) Then
        nuevo.FechaVenci = nuevo.FechaEmision + tsf.Plazo
    Else
        nuevo.FechaVenci = nuevo.FechaEmision
    End If
    
    Set tsf = Nothing
    
    'Decide el código de proveedor/cliente predeterminado
    If Me.CountPCKardexCHP > 0 Then
        'Si ya existe más de uno, copia lo anterior
        nuevo.CodProvcli = Me.PCKardexCHP(Me.CountPCKardexCHP).CodProvcli
    ElseIf Len(Me.CodProveedorRef) > 0 And Len(Me.CodClienteRef) > 0 Then
        nuevo.CodProvcli = Me.CodProveedorRef
    ElseIf Len(Me.CodProveedorRef) > 0 And Len(Me.CodClienteRef) = 0 Then
        nuevo.CodProvcli = Me.CodProveedorRef
    ElseIf Len(Me.CodProveedorRef) = 0 And Len(Me.CodClienteRef) > 0 Then
        nuevo.CodProvcli = Me.CodClienteRef
    End If
    
    mcolPCKardexCHP.Add nuevo
    AddPCKardexCHP = mcolPCKardexCHP.Count    'Devuelve el indice de nuevo elemento
    Set nuevo = Nothing
    mbooModificado = True
End Function

Public Sub RemovePCKardexCHP(ByVal ix As Long, Optional obj As PCKardexCHP)
    Dim Trans As String
   'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemovePCKardexCHP", MSGERR_SOLOVER
    If mcolPCKardexCHP Is Nothing Then RecuperaPCKardexCHP
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolPCKardexCHP.Count
            If mcolPCKardexCHP.item(ix) Is obj Then Exit For
        Next ix
    Else
        Set obj = mcolPCKardexCHP.item(ix)
    End If
    'Verifia si tiene cobro/pago asignado
'    If Not obj.VerificaEliminacion(Trans) Then
'        Err.Raise ERR_INVALIDO, "GNComprobante.RemovePCKardexCHP", _
'            "No se puede eliminar el documento debido a que existen cobros o pagos asignados."
'    End If
    'jeaa 31/08/2005 AGREGADA TRANSACCION A LA QUE ESTA ASIGNADA
    If Not obj.VerificaEliminacionNEW(Trans) Then
        Err.Raise ERR_INVALIDO, "GNComprobante.RemovePCKardexCHP", _
            "No se puede eliminar el documento debido a que existen cobros o pagos asignados " & Chr(13) & "con la Transacción: " & Trans
   End If
    'Elimina de la colección
    If mcolPCKardexCHP.Count >= ix Then mcolPCKardexCHP.Remove ix
    mbooModificado = True
End Sub

'Elimina todos los detalles de PCKardexCHP
Public Sub BorrarPCKardexCHP()
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BorrarPCKardexCHP", MSGERR_SOLOVER
    If mcolPCKardexCHP Is Nothing Then Set mcolPCKardexCHP = New Collection
    
    With mcolPCKardexCHP
        Do While .Count > 0
            .Remove .Count
        Loop
    End With
    mbooModificado = True
End Sub

Public Property Get CountPCKardexCHP() As Long
    If mcolPCKardexCHP Is Nothing Then RecuperaPCKardexCHP
    CountPCKardexCHP = mcolPCKardexCHP.Count
End Property

Public Property Get PCKardexCHP(ix As Long) As PCKardexCHP
    If mcolPCKardexCHP Is Nothing Then RecuperaPCKardexCHP
    Set PCKardexCHP = mcolPCKardexCHP.item(ix)
End Property

Public Function ListaPCKardexCHP() As Variant
    Dim sql As String
    
#If DAOLIB Then
    Dim rs As DAO.Recordset, qdef As DAO.QueryDef
    Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsPCKardexCHP")
    qdef.Parameters("tid") = mProps.transid
    qdef.Parameters("Cotizacion") = Me.Cotizacion("")
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Dim rs As ADODB.Recordset, cmd As ADODB.Command
    Set cmd = New ADODB.Command
    cmd.ActiveConnection = mProps.objEmpresa.Coneccion
    
    'Si la base es de JET
    If mProps.objEmpresa.TipoDB = TIPODB_JET Then
        cmd.CommandType = adCmdTable
        cmd.CommandText = "spConsPCKardexCHP"
        cmd.Parameters.Append cmd.CreateParameter("tid", adInteger, adParamInput, , mProps.transid)
        Set rs = cmd.Execute
       
    'Si la base es de SQLSvr
    Else
        sql = "spConsPCKardexCHP " & mProps.transid & "," & Me.Cotizacion("")
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
    End If
#End If

    Set ListaPCKardexCHP = rs
    Set rs = Nothing
End Function

Private Sub ImportaPCKardexCHP(ByVal Fuente As GNComprobante)
    Dim i As Long, ix As Long, pck As PCKardexCHP, pck2 As PCKardexCHP
    Dim Saldo  As Currency

    If mcolPCKardexCHP Is Nothing Then Set mcolPCKardexCHP = New Collection
    BorrarPCKardexCHP
    
    'Si la fuente es de modulo IV/FC y destino es de modulo TS
    If (Fuente.GNTrans.Modulo = "IV" Or Fuente.GNTrans.Modulo = "FC") _
        And (Me.GNTrans.Modulo = "TS") Then
        If Fuente.GNTrans.AfectaSaldoPC Then
            'Importa de PCKardexCHP (POR cobrar/pagar) a PCKardexCHP (Cobro/Pago)
            For i = 1 To Fuente.CountPCKardexCHP
                Set pck = Fuente.PCKardexCHP(i)
                If pck.IdAsignado = 0 Then      'Si es doc. por cobrar/pagar
                    Saldo = pck.CalculaSaldo
                    If Saldo > 0 Then           'Solo si exite saldo
                        ix = AddPCKardexCHP
                        Set pck2 = PCKardexCHP(ix)
                        
                        pck2.IdAsignado = pck.Id
'                        pck2.IdProvCli = pck.IdProvCli
                        pck2.CodProvcli = pck.CodProvcli
'                        pck2.CotizacionAsignado = Me.Cotizacion(Me.CodMoneda)
                        pck2.FechaEmision = Me.FechaTrans
                        pck2.FechaVenci = pck2.FechaVenci
                        pck2.IDForma = pck.IDForma
                        pck2.NumLetra = pck.NumLetra
                        pck2.Observacion = pck.Observacion
                        pck2.Orden = Me.CountPCKardexCHP
                        If pck.Debe > 0 Then
                            pck2.Haber = Saldo
                        Else
                            pck2.Debe = Saldo
                        End If
                    End If
                End If
            Next i
        Else
            'Crea los anticipos
            For i = 1 To Fuente.CountPCKardexCHP
                Set pck = Fuente.PCKardexCHP(i).Clone
                pck.Guid = ""               'Diego 03/09/2002
                                            'Debe generar su propio GUID
                
                Set pck.GNComprobante = Me
                mcolPCKardexCHP.Add pck
                
                'Intercambia Debe y Haber
                If pck.Debe Then
                    pck.Haber = pck.Debe
                Else
                    pck.Debe = pck.Haber
                End If
                
                'Para que no sea Fecha de vencimiento mal       '*** MAKOTO 15/dic/00
                If pck.FechaVenci < pck.FechaEmision Then
                    pck.FechaVenci = pck.FechaEmision
                End If
                
                'Limpia CodForma
                pck.CodForma = ""
            Next i
        End If
        
    'Otros casos (IV->IV, TS->IV, TS->TS etc.)
    Else
        For i = 1 To Fuente.CountPCKardexCHP
            'Sólo importa los documentos originales (Cobros/Pagos asignados no)
            If Fuente.PCKardexCHP(i).IdAsignado = 0 Then      '*** MAKOTO 15/dic/00
                Set pck = Fuente.PCKardexCHP(i).Clone
                Set pck.GNComprobante = Me
                ''
                pck.Guid = ""   '*** Oliver 10 dic 2004,  para que genere otro GUID no como el original
                'Para que no sea Fecha de vencimiento mal       '*** MAKOTO 15/dic/00
                If pck.FechaVenci < pck.FechaEmision Then
                    pck.FechaVenci = pck.FechaEmision
                End If
                
                mcolPCKardexCHP.Add pck
            End If
        Next i
    End If
End Sub


Public Function PCKardexCHPDebeTotal() As Currency
    Dim t As Currency, i As Long
    
    For i = 1 To CountPCKardexCHP
        t = t + PCKardexCHP(i).Debe
    Next i
    PCKardexCHPDebeTotal = t
End Function

Public Function PCKardexCHPHaberTotal() As Currency
    Dim t As Currency, i As Long
    
    For i = 1 To CountPCKardexCHP
        t = t + PCKardexCHP(i).Haber
    Next i
    PCKardexCHPHaberTotal = t
End Function


Public Function ObtieneTransIDxDepositoCHP(ByVal Id As Long) As Variant
    Dim sql As String, rs As Recordset
         
    sql = "  select * from pckardexchp"
    sql = sql & "  Where IdAsignado <> 0"
    sql = sql & "  and transid=(select transid from pckardexchp where id=" & Id & ")"
         
   
        Set rs = Me.Empresa.OpenRecordset(sql)
        If rs.EOF Then
        Else
            Set ObtieneTransIDxDepositoCHP = rs
        End If
        rs.Close
        Set rs = Nothing
End Function


Public Property Let ClienteEnMora(ByVal value As Boolean)
    If value <> mProps.ClienteEnMora Then
        mProps.ClienteEnMora = value
        mbooModificado = True
    End If
End Property

Public Property Get ClienteEnMora() As Boolean
    ClienteEnMora = mProps.ClienteEnMora
End Property



Private Function GeneraAsientoPresupTotalHaberAF( _
                    ByVal BandPrincipal As Boolean) As colAsientoTemp
    Dim i As Long, v As Currency, k As PCKardex, ivk As AFKardex
    Dim col As colAsientoTemp
    Set col = New colAsientoTemp
        v = CalculaTotalNeto
        
        If Not Me.GNTrans.IVPorPagar Then
            v = CalculaTotalNeto
        Else
            For i = 1 To Me.CountAFKardex
                Set ivk = Me.AFKardex(i)
                    v = v + Abs(ivk.PrecioRealTotal)
            Next i
        End If
        
        
        '*** MAKOTO 08/mar/01 Agregado
        If BandPrincipal Then
            col.Add 0, v
        Else
            col.Add k.auxIdCuenta2, v
        End If
'    Next i
    Set GeneraAsientoPresupTotalHaberAF = col
    Set col = Nothing
End Function


Public Function AcumulaElemento(ByVal emp As String, ByVal Elemento As String, ByVal fechadesde As Date, ByVal fechaHasta As Date) As Currency
    'NO SE UTILIZA
End Function

Public Function AcumulaElementoNew(ByVal emp As String, ByVal cad As String) As Currency
   Dim sql As String
   Dim fecha As Date
   Dim rs As Recordset
    Dim v As Variant, numRec As Integer
    On Error GoTo CapturaError
    fecha = mProps.FechaDevol
   v = Split(cad, ",")
    If IsEmpty(v) Then Exit Function
   sql = "select sum(VALOR) as  valorAcu "
    sql = sql & " FROM ROLDETALLE rd inner join  pcprovcli pc on pc.idprovcli = rd.idempleado  "
   sql = sql & " Inner join elemento e on e.idelemento = rd.idelemento "
    sql = sql & " inner join gncomprobante gn on gn.transid=rd.transid "
    sql = sql & " WHERE gn.estado <> 3 AND gn.fechadevol >= '01/01/" & DatePart("yyyy", fecha) & "' AND gn.fechadevol < = '" & fecha & "'"
    sql = sql & " AND pc.Idprovcli = '" & emp & "' AND e.CODELEMENTO = '" & v(0) & "'"
 Set rs = Me.Empresa.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
       If Not IsNull(rs!VALORACU) Then
        AcumulaElementoNew = rs!VALORACU
       Else
        AcumulaElementoNew = 0
       End If
    End If
    Exit Function
CapturaError:
    MsgBox Err.Description
    Exit Function
End Function

Public Property Let BandFactElec(value As Boolean)
        If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BandFactElec", MSGERR_SOLOVER
        'Solo cuando cambia el valor
    If mProps.BandFactElec <> value Then
        mProps.BandFactElec = value
        mbooModificado = True
    End If
End Property

Public Property Get BandFactElec() As Boolean
    BandFactElec = mProps.BandFactElec
End Property

Public Property Let BandRetOtro(value As Boolean)
        If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BandRetOtro", MSGERR_SOLOVER
        'Solo cuando cambia el valor
    If mProps.BandRetOtro <> value Then
        mProps.BandRetOtro = value
        mbooModificado = True
    End If
End Property

Public Property Get BandRetOtro() As Boolean
    BandRetOtro = mProps.BandRetOtro
End Property

Public Property Let ObservacionesCertifica(ByVal value As String)
    mProps.ObservacionesCertifica = value
    mbooModificado = True
End Property

Public Property Get ObservacionesCertifica() As String
    ObservacionesCertifica = Trim$(mProps.ObservacionesCertifica)
End Property

'Produccion Ecuamueble
Public Function ListaIVKardexProduccion() As Variant
    Dim sql As String, rs As Recordset
    sql = "spConsIVKardexproduccion " & mProps.transid & ", " & _
                                  Me.Cotizacion("")
     Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set ListaIVKardexProduccion = rs
    Set rs = Nothing
End Function


'--------------- Manejo de coleccion de GNKardexDocumento
Public Function AddGNKardexDocumento() As Long
    Dim nuevo As GNKardexDocumento
    
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.AddGNKardexDocumento", MSGERR_SOLOVER
    If mcolGNKardexDocumento Is Nothing Then RecuperaGNKardexDocumento
    
    'Si tiene límite de número de filas         '*** MAKOTO 14/oct/00 Agregado
    ' y es nuevo comprobante
    If Me.GNTrans.IVTipoTrans <> "A" Then
        If Me.GNTrans.CodPantalla <> "IVPVTS" Then
            If (Me.GNTrans.IVNumFilaMax > 0) And Me.EsNuevo Then
                'Verifica el número de filas, y no permite más del límite
                If mcolGNKardexDocumento.Count >= Me.GNTrans.IVNumFilaMax Then
                    Err.Raise ERR_INVALIDO, "GNComprobante.AddGNKardexDocumento", _
                        "No se puede agregar más filas porque está limitado hasta " & _
                         Me.GNTrans.IVNumFilaMax & " filas." & vbCr & vbCr & _
                        "Si hay más detalle de items, regístrelos en otro comprobante." & vbCr & _
                        "Si quiere cambiar el límite, váyase a la configuración de la transacción, por favor."
                End If
            End If
        End If
    End If
    
    Set nuevo = New GNKardexDocumento
    Set nuevo.GNComprobante = Me
    
    'Proporciona valores predeterminados
    nuevo.Cantidad = GNTrans.CantidadPre
        If Me.CountGNKardexDocumento = 0 Then                        '*** Makoto 16/dic/00 Modificado para que copie lo anterior
            'Si es primero, coge la bodega predeterminada
''''            If GNTrans.CodPantalla = "IVCAMIEPRD" Then
''''                nuevo.CodEmpleado = GNTrans.CodBodegaDestPre
''''            Else
''''                nuevo.CodBodega = GNTrans.CodBodegaPre
''''            End If
        
        Else
            'Si no es primero copia lo anterior
''            nuevo.CodBodega = Me.GNKardexDocumento(Me.CountGNKardexDocumento).CodBodega
        End If
    mcolGNKardexDocumento.Add nuevo
    AddGNKardexDocumento = mcolGNKardexDocumento.Count    'Devuelve el indice de nuevo elemento
    Set nuevo = Nothing
    mbooModificado = True
End Function

Public Sub RemoveGNKardexDocumento(ByVal ix As Long, Optional obj As GNKardexDocumento)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemoveGNKardexDocumento", MSGERR_SOLOVER
    If mcolGNKardexDocumento Is Nothing Then RecuperaGNKardexDocumento
    
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolGNKardexDocumento.Count
            If mcolGNKardexDocumento.item(ix) Is obj Then
                mcolGNKardexDocumento.Remove ix
                Exit For
            End If
        Next ix
        Debug.Assert True   'No se puede dar
    Else
        mcolGNKardexDocumento.Remove ix
    End If
    
    mbooModificado = True
End Sub

'Elimina todos los detalles de GNKardexDocumento
Public Sub BorrarGNKardexDocumento()
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BorrarGNKardexDocumento", MSGERR_SOLOVER
    If mcolGNKardexDocumento Is Nothing Then Set mcolGNKardexDocumento = New Collection
    
    With mcolGNKardexDocumento
        Do While .Count > 0
            .Remove .Count
        Loop
    End With
    mbooModificado = True
End Sub

Public Property Get CountGNKardexDocumento() As Long
    If mcolGNKardexDocumento Is Nothing Then RecuperaGNKardexDocumento
    CountGNKardexDocumento = mcolGNKardexDocumento.Count
End Property

Public Property Get GNKardexDocumento(ix As Long) As GNKardexDocumento
    If mcolGNKardexDocumento Is Nothing Then RecuperaGNKardexDocumento
    Set GNKardexDocumento = mcolGNKardexDocumento.item(ix)
End Property

Private Sub RecuperaGNKardexDocumento()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
        
    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolGNKardexDocumento Is Nothing Then Set mcolGNKardexDocumento = New Collection
    
    BorrarGNKardexDocumento
    
    
    'Recupera los GnKardexDocumento
    sql = "SELECT * FROM vwGnKardexDocumento WHERE TransId=" & mProps.transid & " ORDER BY Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddGNKardexDocumento
                GNKardexDocumento(i).Recuperar rs
            End If
            .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub

Friend Sub ActualizaCantidadGNDocumento(ByVal Signo As String)
    Dim sql As String

    If CountGNKardexDocumento = 0 Then Exit Sub     'Si no tiene detalle de AFKardex, sale
    

    'Aumenta o resta la existencia
#If DAOLIB Then
    sql = "UPDATE AFExist d, AFKardex k " & _
          "SET d.Exist = d.Exist" & Signo & "k.Cantidad " & _
          "WHERE (d.IdBodega = k.IdBodega) AND (d.IdInventario = k.IdInventario) " & _
                " AND k.TransID=" & mProps.transid
#Else
    If Me.GNTrans.CodPantalla = "VTCONCITCO" Then
        sql = "spGNEXISTDOCUMENTORuta '" & Signo & "', " & mProps.transid
    Else
        sql = "spGNEXISTDOCUMENTO '" & Signo & "', " & mProps.transid
    End If
#End If
    mProps.objEmpresa.Execute sql, True
End Sub



Public Function ListaIVKardexResumen(ByRef NumGrupo As Integer) As Variant
    Set ListaIVKardexResumen = ListaIVKardex2Resumen(True, NumGrupo)
End Function

'*** MAKOTO 16/dic/00 Agregado
Public Function ListaIVKardex2Resumen( _
                    ByVal ExistPorBodega As Boolean, ByRef NumGrupo As Integer) As Variant
    Dim sql As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As DAO.QueryDef
    If ExistPorBodega Then
        Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsIVKardex")
    Else
        Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsIVKardex2")
    End If
    qdef.Parameters("tid") = mProps.transid
    qdef.Parameters("Cotizacion") = Me.Cotizacion("")
    qdef.Parameters("BandEgreso") = (Me.GNTrans.IVTipoTrans = "E")
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Dim cmd As ADODB.Command
    Set cmd = New ADODB.Command
    cmd.ActiveConnection = mProps.objEmpresa.Coneccion
    'Si la base es de JET
    If mProps.objEmpresa.TipoDB = TIPODB_JET Then
        cmd.CommandType = adCmdTable
        If ExistPorBodega Then
            cmd.CommandText = "spConsIVKardex"
        Else
            cmd.CommandText = "spConsIVKardex2"
        End If
        cmd.Parameters.Append cmd.CreateParameter("tid", adInteger, adParamInput, , mProps.transid)
        cmd.Parameters.Append cmd.CreateParameter("Cotizacion", adCurrency, adParamInput, , mProps.Cotizacion)
        Set rs = cmd.Execute
    'Si la base es de SQLSvr
    Else
        If Not Me.Empresa.GNOpcion.IVKTipoDatoDouble Then
            sql = "spConsIVKardexResumen " & mProps.transid & ", " & _
                                  Me.Cotizacion("") & ", " & _
                                  CadenaBool((Me.GNTrans.IVTipoTrans = "E"), Me.Empresa.TipoDB) & _
                                   ", " & NumGrupo
        Else
            sql = "spConsIVKardexResumenDou " & mProps.transid & ", " & _
                                  Me.Cotizacion("") & ", " & _
                                  CadenaBool((Me.GNTrans.IVTipoTrans = "E"), Me.Empresa.TipoDB) & _
                                   ", " & NumGrupo
        End If
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
    End If
#End If
    Set ListaIVKardex2Resumen = rs
    Set rs = Nothing
End Function


Public Function ListaIVKardexOrdenIVG(ByRef NumGrupo As Integer) As Variant
    Set ListaIVKardexOrdenIVG = ListaIVKardex2OrdenIVG(True, NumGrupo)
End Function

'*** MAKOTO 16/dic/00 Agregado
Public Function ListaIVKardex2OrdenIVG( _
                    ByVal ExistPorBodega As Boolean, ByRef NumGrupo As Integer) As Variant
    Dim sql As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As DAO.QueryDef
    
    If ExistPorBodega Then
        Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsIVKardex")
    Else
        Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsIVKardex2")
    End If
    qdef.Parameters("tid") = mProps.transid
    qdef.Parameters("Cotizacion") = Me.Cotizacion("")
    qdef.Parameters("BandEgreso") = (Me.GNTrans.IVTipoTrans = "E")
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Dim cmd As ADODB.Command
    Set cmd = New ADODB.Command
    cmd.ActiveConnection = mProps.objEmpresa.Coneccion
    'Si la base es de JET
    If mProps.objEmpresa.TipoDB = TIPODB_JET Then
        cmd.CommandType = adCmdTable
        If ExistPorBodega Then
            cmd.CommandText = "spConsIVKardex"
        Else
            cmd.CommandText = "spConsIVKardex2"
        End If
        cmd.Parameters.Append cmd.CreateParameter("tid", adInteger, adParamInput, , mProps.transid)
        cmd.Parameters.Append cmd.CreateParameter("Cotizacion", adCurrency, adParamInput, , mProps.Cotizacion)
        Set rs = cmd.Execute
    'Si la base es de SQLSvr
    Else
        sql = "spConsIVKardexOrdenIVG " & mProps.transid & ", " & _
                                  Me.Cotizacion("") & ", " & _
                                  CadenaBool(ExistPorBodega, Me.Empresa.TipoDB) & ", " & _
                                  CadenaBool((Me.GNTrans.IVTipoTrans = "E"), Me.Empresa.TipoDB) & "," & NumGrupo
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
    End If
#End If
    Set ListaIVKardex2OrdenIVG = rs
    Set rs = Nothing
End Function

Public Function IVKardexCTotalNOIVA(bandReal As Boolean, BandIVA As Boolean, BandNOIVA As Boolean) As Currency
    Dim t As Currency, i As Long, v As Currency
    Dim item As IVInventario
    For i = 1 To CountIVKardex
        Set item = Me.Empresa.RecuperaIVInventarioQuick(IVKardex(i).IdInventario)
        If Not item Is Nothing Then
            If item.BandIVA = BandIVA And item.BandNoObjetoIVA = BandNOIVA Then
                If bandReal Then
                    v = IVKardex(i).CostoRealTotal
                Else
                    v = IVKardex(i).CostoTotal
                End If
                'Redondea con el formato para Costos      *** MAKOTO 13/feb/01 Mod.
                t = t + MiCCur(Format$(v, Me.FormatoCosto))
            End If
        End If
    Next i
    Set item = Nothing
    IVKardexCTotalNOIVA = t
End Function


Public Property Let BandPagoExterior(value As Boolean)
        If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BandPagoExterior", MSGERR_SOLOVER
        'Solo cuando cambia el valor
    If mProps.BandPagoExterior <> value Then
        mProps.BandPagoExterior = value
        mbooModificado = True
    End If
End Property

Public Property Get BandPagoExterior() As Boolean
    BandPagoExterior = mProps.BandPagoExterior
End Property

Public Property Let CodFormaPagoSRI(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.CodFormaPagoSRI", MSGERR_SOLOVER
    
    If Len(value) > 2 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.CodFormaPagoSRI", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.CodFormaPagoSRI <> value Then
        mProps.CodFormaPagoSRI = value
        mbooModificado = True
    End If
End Property

Public Property Get CodFormaPagoSRI() As String
    CodFormaPagoSRI = Trim$(mProps.CodFormaPagoSRI)
End Property


'--------------- Manejo de coleccion de RGKardex
Public Function AddRGKardex() As Long
    Dim nuevo As RGKardex
    
    'Cuando SoloVer está establecido a True, genera error
    If mcolRGKardex Is Nothing Then RecuperaRGKardex
    
    Set nuevo = New RGKardex
    Set nuevo.GNComprobante = Me
   
    
    mcolRGKardex.Add nuevo
    AddRGKardex = mcolRGKardex.Count    'Devuelve el indice de nuevo elemento
    Set nuevo = Nothing
    mbooModificado = True
End Function

Public Sub RemoveRGKardex(ByVal ix As Long, Optional obj As RGKardex)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemoveRGKardex", MSGERR_SOLOVER
    If mcolRGKardex Is Nothing Then RecuperaRGKardex
    
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolRGKardex.Count
            If mcolRGKardex.item(ix) Is obj Then
                mcolRGKardex.Remove ix
                Exit For
            End If
        Next ix
    Else
        mcolRGKardex.Remove ix
    End If
    
    mbooModificado = True
End Sub

'Elimina todos los detalles de RGKardex
Public Sub BorrarRGKardex()
    'Cuando SoloVer está establecido a True, genera error
    If mcolRGKardex Is Nothing Then Set mcolRGKardex = New Collection
    
    With mcolRGKardex
        Do While .Count > 0
            .Remove .Count
        Loop
    End With
    mbooModificado = True
End Sub

Public Property Get CountRGKardex() As Long
    If mcolRGKardex Is Nothing Then RecuperaRGKardex
    CountRGKardex = mcolRGKardex.Count
End Property

Public Property Get RGKardex(ix As Long) As RGKardex
    If mcolRGKardex Is Nothing Then RecuperaRGKardex
    Set RGKardex = mcolRGKardex.item(ix)
End Property

Private Sub RecuperaRGKardex()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolRGKardex Is Nothing Then Set mcolRGKardex = New Collection
    
    'Recupera los RGKardex
    sql = "SELECT * FROM vwRGKardex WHERE TransId=" & mProps.transid & " ORDER BY Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddRGKardex
                RGKardex(i).Recuperar rs
            End If
            .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub
Private Function CambiaEstadoAlquilerSemiDevuelto(ByVal transid As Long) As Integer
Dim sql As String
Dim rsOrigen As Recordset
Dim rs As Recordset
Dim Estado As Integer
On Error GoTo CapturaError
    sql = "select idinventario, sum(Cantidad) as totalAlquilados from ivkardex ivk inner join gncomprobante gn on gn.transid = ivk.transid "
    sql = sql & " Where gn.estado <> 3 and ivk.Cantidad < 0 And ivk.transid = " & transid & " group by idinventario"
    Set rsOrigen = Me.Empresa.OpenRecordset(sql)
    sql = "select idinventario,sum(Cantidad) as totalDevueltos from ivkardex ivk inner join gncomprobante gn on gn.transid = ivk.transid "
    sql = sql & " Where gn.codtrans in ('DEV','FCVAN') AND gn.estado <> 3 and ivk.Cantidad < 0 And ivk.IdPadre = " & transid & " group by idinventario"
    Set rs = Me.Empresa.OpenRecordset(sql)
     If rs.RecordCount = 0 Then
        CambiaEstadoAlquilerSemiDevuelto = 1
        Set rsOrigen = Nothing
        Set rs = Nothing
        Exit Function
     End If
        If rs.RecordCount <> rsOrigen.RecordCount Then
            CambiaEstadoAlquilerSemiDevuelto = 4
            Set rsOrigen = Nothing
            Set rs = Nothing
            Exit Function
        End If
         Do While Not rsOrigen.EOF
            rs.MoveFirst
            Do While Not rs.EOF
                If rs!IdInventario = rsOrigen!IdInventario Then
                        If Abs(rs!totalDevueltos) < Abs(rsOrigen!totalAlquilados) Then
                        Estado = 4
                        'Set rsOrigen = Nothing
                        'Set rs = Nothing
                        'Exit Function
                    ElseIf Abs(rs!totalDevueltos) = Abs(rsOrigen!totalAlquilados) Then
                        Estado = 2
                        'Set rsOrigen = Nothing
                        'Set rs = Nothing
                        'Exit Function
                    End If
                End If
                rs.MoveNext
            Loop
            rsOrigen.MoveNext
        Loop
    Set rsOrigen = Nothing
    Set rs = Nothing
    CambiaEstadoAlquilerSemiDevuelto = Estado
    Exit Function
CapturaError:
    Set rsOrigen = Nothing
    MsgBox Err.Description
    Exit Function
End Function
Private Sub RecuperaIVKardex2Bodegas()  'AUC para alquileres
   Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolIVKardex Is Nothing Then Set mcolIVKardex = New Collection
    BorrarIVKardex
    If Me.GNTrans.CodPantalla = "IVRES_ALQ" Or Me.GNTrans.CodPantalla = "IVBQD2BE" Then ' Or Me.GNTrans.CodPantalla = "IVDVALQ" Then

        sql = "SELECT * FROM vwIVKardex WHERE TransId=" & mProps.transid & " AND cantidad < 0 ORDER BY Orden"
    Else
        sql = "SELECT * FROM vwIVKardex WHERE TransId=" & mProps.transid & " ORDER BY Orden"
    End If
   Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddIVKardex
                IVKardex(i).Recuperar rs
           End If
                .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub
Public Function IVKardexIVAItemTotal2Bod() As Currency
    Dim t As Currency, i As Long, ivk As IVKardex
    Dim por As Double, v As Currency, bandCalculado As Boolean
    If Me.SoloVer Then
        'si era empresa publica no se ve
        For i = 1 To Me.CountIVKardexRecargo
            If Me.IVKardexRecargo(i).CodRecargo = "IVA" Then
                t = Me.IVKardexRecargo(i).Valor
                i = Me.CountIVKardexRecargo
            End If
        Next i
    Else
        For i = 1 To CountIVKardex
            Set ivk = IVKardex(i)
            If Me.IVKardex(i).Cantidad < 0 Then 'AUC agregado para que no carge valores =0
                v = ivk.CalcularIvaItem(por, bandCalculado)
                t = t + v               'Suma valor de IVA de item
            End If
        Next i
    End If
'    IVKardexIVAItemTotal = t
    IVKardexIVAItemTotal2Bod = Abs(t)            '*** MAKOTO 29/ene/01 Mod.
    Set ivk = Nothing
End Function
'para ivkardex con 2 bodegas
Public Function IVKardexDescItemTotal2Bob() As Currency
    Dim t As Currency, i As Long, ivk As IVKardex, bandCosto As Boolean
    Dim u As Currency
    'Decide si calcula en base a Precio o Costo
    bandCosto = GNTrans.IVRecargoEnCosto
    For i = 1 To CountIVKardex
        Set ivk = IVKardex(i)
        If ivk.Cantidad < 0 Then
            If bandCosto Then
                u = ivk.CostoTotal * ivk.Descuento           '*** MAKOTO 29/ene/01 Mod.
                'Redondea al formato de Costos
                u = MiCCur(Format$(u, Me.FormatoCosto))         '*** MAKOTO 29/ene/01 Mod.
            Else
                u = ivk.PrecioTotal * ivk.Descuento          '*** MAKOTO 29/ene/01 Mod.
                'Redondea al formato de P.Total
                u = MiCCur(Format$(u, Me.FormatoMoneda))        '*** MAKOTO 29/ene/01 Mod.
            End If
            t = t + u
        End If
    Next i
    IVKardexDescItemTotal2Bob = Abs(t)      '*** MAKOTO 29/ene/01 Mod. Devuelde en valor absoluto
    Set ivk = Nothing
End Function
Public Function IVKardexTotalIVA2Bod(bandReal As Boolean, BandIVA As Boolean) As Currency
    Dim t As Currency
    'Decide si calcula en base de Precio o Costo
    If GNTrans.IVRecargoEnCosto Then
        t = IVKardexCTotalIVA(bandReal, BandIVA)
    Else
        t = IVKardexPTotalIVA2Bod(bandReal, BandIVA)
    End If
    IVKardexTotalIVA2Bod = t
End Function
Public Function IVKardexPTotalIVA2Bod(bandReal As Boolean, BandIVA As Boolean) As Currency
   Dim t As Currency, i As Long, v As Currency
    Dim item As IVInventario
    For i = 1 To CountIVKardex
        If IVKardex(i).IdInventario <> 0 Then
            Set item = Me.Empresa.RecuperaIVInventario(IVKardex(i).IdInventario)
            If Not item Is Nothing Then
                If item.BandIVA = BandIVA Then
                    If Me.IVKardex(i).Cantidad < 0 Then
                        If bandReal Then
                            v = IVKardex(i).PrecioRealTotal
                            t = t + v '***Agregado. 28/08/2003. Angel. No funciona bien 01/jun/04
                        Else
                            v = IVKardex(i).PrecioTotal
                            t = t + MiCCur(Format$(v, Me.FormatoMoneda)) '***Antes, quitado para pruebas. Angel. 27/08/2003
                       End If
                    End If
                End If
           End If
        End If
    Next i
    Set item = Nothing
    If bandReal Then
        IVKardexPTotalIVA2Bod = MiCCur(Format$(t, Me.FormatoMoneda)) '***Antes, quitado para pruebas. Angel. 27/08/2003
    Else
        IVKardexPTotalIVA2Bod = t
    End If
End Function

Public Function AddIVKardex2B() As Long
    Dim nuevo As IVKardex
    Set nuevo = New IVKardex
    Set nuevo.GNComprobante = Me
    'Proporciona valores predeterminados
    nuevo.Cantidad = GNTrans.CantidadPre
    nuevo.CodBodega = Me.IVKardex(Me.CountIVKardex).CodBodega
    mcolIVKardex.Add nuevo
    AddIVKardex2B = mcolIVKardex.Count    'Devuelve el indice de nuevo elemento
    Set nuevo = Nothing
    mbooModificado = True
End Function


'--------------- Manejo de coleccion de VTKardexConcilia Carcasa
Public Function AddIVKardexConciliaCarcasa() As Long
    Dim nuevo As IVKardexConciliaCarcasa
    
    'Cuando SoloVer está establecido a True, genera error
    If mcolVKardexConciliaCarcasa Is Nothing Then RecuperaIVKardexConciliaCarcasa
    
    Set nuevo = New IVKardexConciliaCarcasa
    Set nuevo.GNComprobante = Me
    
    'Valores predeterminados
    If Me.CountIVKardexConciliaCarcasa = 0 Then
'''        'nuevo.NumDoc = Left$(Me.NumDocRef, 20)
    Else
    End If
    
    mcolVKardexConciliaCarcasa.Add nuevo
    AddIVKardexConciliaCarcasa = mcolVKardexConciliaCarcasa.Count    'Devuelve el indice de nuevo elemento
    Set nuevo = Nothing
    mbooModificado = True
End Function

Public Sub RemoveIVKardexConciliaCarcasa(ByVal ix As Long, Optional obj As IVKardexConciliaCarcasa)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemoveIVKardexConciliaCarcasa", MSGERR_SOLOVER
    If mcolVKardexConciliaCarcasa Is Nothing Then RecuperaIVKardexConciliaCarcasa
    
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolVKardexConciliaCarcasa.Count
            If mcolVKardexConciliaCarcasa.item(ix) Is obj Then
                mcolVKardexConciliaCarcasa.Remove ix
                Exit For
            End If
        Next ix
    Else
        mcolVKardexConciliaCarcasa.Remove ix
    End If
    
    mbooModificado = True
End Sub

'Elimina todos los detalles de IVKardexConciliaCarcasa
Public Sub BorrarIVKardexConciliaCarcasa()
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BorrarIVKardexConciliaCarcasa", MSGERR_SOLOVER
    If mcolVKardexConciliaCarcasa Is Nothing Then Set mcolVKardexConciliaCarcasa = New Collection
    
    With mcolVKardexConciliaCarcasa
        Do While .Count > 0
            .Remove .Count
        Loop
    End With
    mbooModificado = True
End Sub

Public Property Get CountIVKardexConciliaCarcasa() As Long
    If mcolVKardexConciliaCarcasa Is Nothing Then RecuperaIVKardexConciliaCarcasa
    CountIVKardexConciliaCarcasa = mcolVKardexConciliaCarcasa.Count
End Property

Public Property Get IVKardexConciliaCarcasa(ix As Long) As IVKardexConciliaCarcasa
    If mcolVKardexConciliaCarcasa Is Nothing Then RecuperaIVKardexConciliaCarcasa
    Set IVKardexConciliaCarcasa = mcolVKardexConciliaCarcasa.item(ix)
End Property

Private Sub RecuperaIVKardexConciliaCarcasa()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean

    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolVKardexConciliaCarcasa Is Nothing Then Set mcolVKardexConciliaCarcasa = New Collection
    
    'Recupera los registros de IVKardexConciliaCarcasa
    sql = "SELECT tskc.*" & _
          "FROM IVKardexConciliaCarcasa tskc " & _
                " "
    sql = sql & "WHERE TransId=" & mProps.transid & " ORDER BY Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddIVKardexConciliaCarcasa
                IVKardexConciliaCarcasa(i).Recuperar rs
            End If
            .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub


Public Function RecuperaIVConciliacionCarcasa(transid As Long) As Variant
    Dim sql As String, rs As Recordset
    
    sql = "select "
    
    sql = sql & " id, fechatrans, nombre, tamanio, marca,  trabajo,"
    sql = sql & " original, radial, numserie, disenioOri, a,"
    sql = sql & " ISO, Ticket, BandConciliado, Orden"
    sql = sql & " from VWIVKardexConciliacionCarcasa  "
    sql = sql & " Where transidPadadre = " & transid

    sql = sql & " ORDER BY  Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)

    
    RecuperaIVConciliacionCarcasa = MiGetRows(rs) 'rs
    Set rs = Nothing
End Function



Public Function RecuperaIVConciliacionCarcasaImpresion(transid As Long, ByVal Valor As String, _
            ByVal CodTipo As String, ByVal BandConci As String) As Variant
    Dim sql As String, rs As Recordset
    
    sql = "select "
    sql = sql & " FechaTrans, "
    sql = sql & " Trans, Descripcion, Nombre, vendedor, PrecioTotalBase0+PrecioTotalBaseIVA  as Valor, atencion, TransOrigen"
    sql = sql & " from VWIVKardexConciliaCarcasacion inner join vwConsSUMIVKardexIVA ivk on VWIVKardexConciliaCarcasacion.transid=ivk.transid   "
    sql = sql & " Where transidPadre = " & transid
'    sql = sql & " AND CodTipoDoc IN (" & CodTipo & ")"
    sql = sql & " AND BandConciliado = " & BandConci & ""
    
    

    sql = sql & " ORDER BY vendedor, FechaTrans, HoraTrans, VWIVKardexConciliaCarcasacion.TransID, Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaIVConciliacionCarcasaImpresion = rs
    Set rs = Nothing
End Function


Public Property Let CodPaisSRI(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.CodPaisSRI", MSGERR_SOLOVER
    
    If Len(value) > 3 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.CodPaisSRI", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.CodPaisSRI <> value Then
        mProps.CodPaisSRI = value
        mbooModificado = True
    End If
End Property

Public Property Get CodPaisSRI() As String
    CodPaisSRI = Trim$(mProps.CodPaisSRI)
End Property

Private Sub GrabarAnexosExportacion()
    Dim sql As String, rs As Recordset
    Dim AuxDesc As Integer
        'Recupera el registro correspondiente para modificar
        sql = "SELECT * FROM AnexosExportacion WHERE TransID=" & mProps.transid
        Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
        If Not rs.EOF Then
            #If DAOLIB Then
                rs.Edit
            #End If
        Else
            sql = "SELECT * FROM AnexosExportacion WHERE 1=0"
            Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
            rs.AddNew
        End If
        
    With rs
        !transid = mProps.transid                       'Es el mismo asignado a GnComprobante
        !BandReferendo = mProps.BandReferendo
        !CodDistrito = mProps.CodDistrito
        !Anio = mProps.Anio
        !CodRegimen = mProps.CodRegimen
        !Correlativo = mProps.Correlativo
        !Verificador = mProps.Verificador
        !DocTransporte = mProps.DocTransporte
        !ValorFOB = mProps.ValorFOB
        !ValorFOBLocal = mProps.ValorFOBLocal
        !FechaEmbarque = mProps.FechaEmbarque
        !CodPuertoEmbarque = mProps.CodPuertoEmbarque
        !CodPaisDestino = mProps.CodPaisDestino
        .Update
        #If DAOLIB Then
                rs.Bookmark = rs.LastModified
        #End If
        .Move 0             'Para actualizar
        .Close
    End With
End Sub


Public Sub RecuperarAnexosExportacion(Optional ByVal TransIDAnexos As Long)
    Dim sql As String, rs As Recordset
    
    If TransIDAnexos = 0 Then TransIDAnexos = mProps.transid
    
    sql = "SELECT * FROM AnexosExportacion WHERE TransID=" & TransIDAnexos
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    
    If rs.EOF Then Exit Sub
    With rs
        If Not IsNull(!BandReferendo) Then mProps.BandReferendo = !BandReferendo
        If Not IsNull(!CodDistrito) Then mProps.CodDistrito = !CodDistrito
        If Not IsNull(!Anio) Then mProps.Anio = !Anio
        If Not IsNull(!CodRegimen) Then mProps.CodRegimen = !CodRegimen
        If Not IsNull(!Correlativo) Then mProps.Correlativo = !Correlativo
        If Not IsNull(!Verificador) Then mProps.Verificador = !Verificador
        If Not IsNull(!DocTransporte) Then mProps.DocTransporte = !DocTransporte
        If Not IsNull(!FechaEmbarque) Then mProps.FechaEmbarque = !FechaEmbarque
        If Not IsNull(!ValorFOB) Then mProps.ValorFOB = !ValorFOB
        If Not IsNull(!ValorFOBLocal) Then mProps.ValorFOBLocal = !ValorFOBLocal
        If Not IsNull(!CodPuertoEmbarque) Then mProps.CodPuertoEmbarque = !CodPuertoEmbarque
        If Not IsNull(!CodPaisDestino) Then mProps.CodPaisDestino = !CodPaisDestino
        
        .Close
    End With
    Set rs = Nothing
End Sub

Public Property Let BandReferendo(value As Boolean)
        If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BandReferendo", MSGERR_SOLOVER
        'Solo cuando cambia el valor
    If mProps.BandReferendo <> value Then
        mProps.BandReferendo = value
        mbooModificado = True
    End If
End Property

Public Property Get BandReferendo() As Boolean
    BandReferendo = mProps.BandReferendo
End Property



Public Property Let CodDistrito(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.CodDistrito", MSGERR_SOLOVER
    
    If Len(value) > 3 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.CodDistrito", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.CodDistrito <> value Then
        mProps.CodDistrito = value
        mbooModificado = True
    End If
End Property

Public Property Get CodDistrito() As String
    CodDistrito = Trim$(mProps.CodDistrito)
End Property

Public Property Let Anio(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.Anio", MSGERR_SOLOVER
    
    If Len(value) > 4 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.Anio", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.Anio <> value Then
        mProps.Anio = value
        mbooModificado = True
    End If
End Property

Public Property Get Anio() As String
    Anio = Trim$(mProps.Anio)
End Property

Public Property Let CodRegimen(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.CodRegimen", MSGERR_SOLOVER
    
    If Len(value) > 2 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.CodRegimen", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.CodRegimen <> value Then
        mProps.CodRegimen = value
        mbooModificado = True
    End If
End Property

Public Property Get CodRegimen() As String
    CodRegimen = Trim$(mProps.CodRegimen)
End Property

Public Property Let Correlativo(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.Correlativo", MSGERR_SOLOVER
    
    If Len(value) > 8 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.Correlativo", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.Correlativo <> value Then
        mProps.Correlativo = value
        mbooModificado = True
    End If
End Property

Public Property Get Correlativo() As String
    Correlativo = Trim$(mProps.Correlativo)
End Property

Public Property Let Verificador(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.Verificador", MSGERR_SOLOVER
    
    If Len(value) > 1 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.Verificador", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.Verificador <> value Then
        mProps.Verificador = value
        mbooModificado = True
    End If
End Property

Public Property Get Verificador() As String
    Verificador = Trim$(mProps.Verificador)
End Property

Public Property Let DocTransporte(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.DocTransporte", MSGERR_SOLOVER
    
    If Len(value) > 13 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.DocTransporte", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.DocTransporte <> value Then
        mProps.DocTransporte = value
        mbooModificado = True
    End If
End Property

Public Property Get DocTransporte() As String
    DocTransporte = Trim$(mProps.DocTransporte)
End Property

Public Property Let ValorFOB(ByVal value As Currency)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.ValorFOB", MSGERR_SOLOVER
    
    
    'Solo cuando cambia el valor
    If mProps.ValorFOB <> value Then
        mProps.ValorFOB = value
        mbooModificado = True
    End If
End Property

Public Property Get ValorFOB() As Currency
    ValorFOB = mProps.ValorFOB
End Property

Public Property Let ValorFOBLocal(ByVal value As Currency)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.ValorFOBLocal", MSGERR_SOLOVER
    
    'Solo cuando cambia el valor
    If mProps.ValorFOBLocal <> value Then
        mProps.ValorFOBLocal = value
        mbooModificado = True
    End If
End Property

Public Property Get ValorFOBLocal() As Currency
    ValorFOBLocal = mProps.ValorFOBLocal
End Property

Public Property Let FechaEmbarque(value As Date)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.FechaEmbarque", MSGERR_SOLOVER
    
    'Solo cuando cambia el valor
    If mProps.FechaEmbarque <> value Then
        mProps.FechaEmbarque = value
        mbooModificado = True
    End If
End Property

Public Property Get FechaEmbarque() As Date
    FechaEmbarque = mProps.FechaEmbarque
End Property

Public Sub CambiaCliente_BandOmitirPendientes(idPC As Long, band As Boolean)
    Dim sql As String
        sql = "UPDATE PCProvCli SET BandOmitirPendientes =" & IIf(band, 1, 0) & " WHERE IdProvCli=" & idPC
        mProps.objEmpresa.Execute sql, True
        Me.Empresa.GrabaAccionModulo Not band, band, "BandOmitirPendientes", "MOD_CLI", "CL"
End Sub

Public Property Let BandDobleTributa(value As Boolean)
        If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BandDobleTributa", MSGERR_SOLOVER
        'Solo cuando cambia el valor
    If mProps.BandDobleTributa <> value Then
        mProps.BandDobleTributa = value
        mbooModificado = True
    End If
End Property

Public Property Get BandDobleTributa() As Boolean
    BandDobleTributa = mProps.BandDobleTributa
End Property


Public Property Let BandPagoSujRet(value As Boolean)
        If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BandPagoSujRet", MSGERR_SOLOVER
        'Solo cuando cambia el valor
    If mProps.BandPagoSujRet <> value Then
        mProps.BandPagoSujRet = value
        mbooModificado = True
    End If
End Property

Public Property Get BandPagoSujRet() As Boolean
    BandPagoSujRet = mProps.BandPagoSujRet
End Property

Public Function RecuperaVTConciliacionCartera(transid As Long) As Variant
    Dim sql As String, rs As Recordset
    
    sql = "select "
    sql = sql & " transid , TransidDoc, FechaTrans, " ' CodTrans,
    sql = sql & " Trans, NumDocRef, ruc, Nombre,direccion1, telefono1, "
    sql = sql & " codvendedor, Vendedor,   Haber, Saldo, '1' as BandConciliado, "
    sql = sql & " 0 as SaldoConfirmado , Diferencia, Estado, Orden, HoraTrans, tipo"
    sql = sql & " from VWVTKardexConciliacionCarteraSinOrden  "
    sql = sql & " Where transidPadre = " & transid

    sql = sql & " ORDER BY Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)

    
    RecuperaVTConciliacionCartera = MiGetRows(rs) 'rs
    Set rs = Nothing
End Function



Public Function RecuperaVTConciliacionCarteraImpresion(transid As Long, ByVal Valor As String, _
            ByVal CodTipo As String, ByVal BandConci As String) As Variant
    Dim sql As String, rs As Recordset
    
    sql = "select "
    
    sql = sql & " transid , TransidDoc, FechaTrans, CodTrans, Trans, numdocref,ruc, Nombre,direccion1, telefono1,"
    sql = sql & " codvendedor, Vendedor, TransOrigen, Haber, Saldo,"
    sql = sql & " 0 as SaldoConfirmado , Diferencia, Estado, Orden, HoraTrans, tipo"
    sql = sql & " from VWVTKardexConciliacionCartera vw   "
    sql = sql & " Where transidPadre = " & transid
    
    

    sql = sql & " ORDER BY  Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaVTConciliacionCarteraImpresion = rs
    Set rs = Nothing
End Function

Public Sub AseguraMovimientoExistenciaDocumento()
    Dim CodProvcli As String
    Dim sql As String, rs As Recordset, IdProvcli As Integer, transid As Long
    Dim EmpPred As String, emp As PCProvCli, IdEmp As Long
    
    If Me.GNTrans.IVMostrarEmpleado Then 'cambiado para utilizar la tabla rutas
        If Me.GNTrans.AfectaCantidadDocumento And Me.IdRuta <> 0 Then
            transid = Me.transid
            sql = "INSERT INTO GNExistDocumento (Transid,IdProvcli,Exist,idRuta)  " & _
            "VALUES(" & transid & ",0," & 1 & "," & Me.IdRuta & ")"
            mProps.objEmpresa.OpenRecordset sql
        End If
    Else
        If Len(Me.Empresa.GNOpcion.ObtenerValor("EmpleadoDocPredeterminada")) > 0 Then
            EmpPred = Me.Empresa.GNOpcion.ObtenerValor("EmpleadoDocPredeterminada")
            Set emp = Me.Empresa.RecuperaEmpleado(EmpPred)
            IdEmp = emp.IdProvcli
            Set emp = Nothing
        End If
    'recupera la ProvCli predeterminada
'    If Me.GNTrans.CodPantalla = "IVBQDCR" Or Me.GNTrans.CodPantalla = "PCGN" Then
        If (Me.GNTrans.AfectaCantidadDocumento And (Me.IdEmpleadoRef <> 0 Or IdEmp <> 0)) Or Me.GNTrans.CodPantalla = "PCGN" Then
        
            'If Me.IdTransFuente = 0 Then Exit Sub
            'sql = "SELECT IdEmpleado FROM PCSolCreProvCli where idtransfuente =" & Me.IdTransFuente
            'Set rs = mProps.objEmpresa.OpenRecordset(sql)
            If Me.IdEmpleadoRef <> 0 Then
                IdProvcli = Me.IdEmpleadoRef
            Else
                IdProvcli = IdEmp
            End If
           transid = Me.transid
            sql = "INSERT INTO GNExistDocumento (Transid,IdProvcli,Exist)  " & _
            "VALUES(" & transid & "," & IdProvcli & "," & 1 & ")"
            mProps.objEmpresa.OpenRecordset sql
       Else
           CodProvcli = mProps.objEmpresa.GNOpcion.ObtenerValor("EmpleadoDocPredeterminada")
            ' si no tiene ProvCli predeterminda sale sin grabar en ivexist
            If Len(CodProvcli) = 0 Then Exit Sub
            sql = "SELECT IdProvCli FROM Empleado where codProvCli='" & CodProvcli & "'"
            'recupera idProvCli
            Set rs = mProps.objEmpresa.OpenRecordset(sql)
            IdProvcli = rs.Fields("IdProvCli")
            'recupera Transid
            transid = Me.transid
    
            sql = "INSERT INTO GNExistDocumento (Transid,IdProvcli,Exist)  " & _
            "VALUES(" & transid & "," & IdProvcli & "," & 1 & ")"
            mProps.objEmpresa.OpenRecordset sql
            rs.Close
            Set rs = Nothing
        End If
    End If
End Sub


Private Sub CambiaEstadoOcupado()
Dim sql As String
        If Me.GNTrans.CerrarFichaAlGrabar Then

            sql = " update gncentrocosto set BandOcupado=0"
            sql = sql & " where idcentro='" & Me.idCentro & "'"
            Me.Empresa.Execute sql, True
            'BANDERA ALTA FICHA
            sql = "Update  fd "
            sql = sql & " set BandAlta = 1 "
            sql = sql & " from fichadetalle fd "
            sql = sql & " Inner join gncentrocostoDetalle ccd "
            sql = sql & " on ccd.idfichadet = fd.id "
            sql = sql & " WHERE ccd.idcentrodet =  " & Me.idCentroHijo
            Me.Empresa.Execute sql, True
        End If

End Sub

Public Property Let FechaIngresoFicha(value As Date)
    'Cuando SoloVer está establecido a True, genera error
    'If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.FechaAceptacion", MSGERR_SOLOVER
    
    'Solo cuando cambia el valor
    If mProps.FechaIngresoFicha <> value Then
        mProps.FechaIngresoFicha = value
        mbooModificado = True
    End If
End Property

Public Property Get FechaIngresoFicha() As Date
    FechaIngresoFicha = mProps.FechaIngresoFicha
End Property

Public Property Let TiempoEstimadoEntrega(ByVal value As Currency)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.TiempoEntrega", MSGERR_SOLOVER
    
    'Solo cuando cambia el valor
    If mProps.TiempoEstimadoEntrega <> value Then
        mProps.TiempoEstimadoEntrega = value
        mbooModificado = True
    End If
End Property

Public Property Get TiempoEstimadoEntrega() As Currency
    TiempoEstimadoEntrega = Trim$(mProps.TiempoEstimadoEntrega)
End Property

Public Property Let Codelemento(value As String)
    'Solo cuando cambia el valor
    If mProps.Codelemento <> value Then
        mProps.Codelemento = value
        mbooModificado = True
    End If
End Property
Public Property Get Codelemento() As String
    Codelemento = mProps.Codelemento
End Property

Public Function ListaIVKardex2New( _
                    ByVal ExistPorBodega As Boolean) As Variant
    Dim sql As String, rs As Recordset
#If DAOLIB Then
    Dim qdef As DAO.QueryDef
    If ExistPorBodega Then
        Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsIVKardex")
    Else
        Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsIVKardex2")
    End If
    qdef.Parameters("tid") = mProps.transid
    qdef.Parameters("Cotizacion") = Me.Cotizacion("")
    qdef.Parameters("BandEgreso") = (Me.GNTrans.IVTipoTrans = "E")
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Dim cmd As ADODB.Command
    Set cmd = New ADODB.Command
    cmd.ActiveConnection = mProps.objEmpresa.Coneccion
    'Si la base es de JET
    If mProps.objEmpresa.TipoDB = TIPODB_JET Then
        cmd.CommandType = adCmdTable
        If ExistPorBodega Then
            cmd.CommandText = "spConsIVKardex"
        Else
            cmd.CommandText = "spConsIVKardex2"
        End If
        cmd.Parameters.Append cmd.CreateParameter("tid", adInteger, adParamInput, , mProps.transid)
        cmd.Parameters.Append cmd.CreateParameter("Cotizacion", adCurrency, adParamInput, , mProps.Cotizacion)
        Set rs = cmd.Execute
    'Si la base es de SQLSvr
    Else
        sql = "spConsIVKardexNew " & mProps.transid & ", " & _
                                  Me.Cotizacion("") & ", " & _
                                  CadenaBool(ExistPorBodega, Me.Empresa.TipoDB) & ", " & _
                                  CadenaBool((Me.GNTrans.IVTipoTrans = "E"), Me.Empresa.TipoDB)     '*** MAKOTO 26/ene/01 Mod. Si es egreso multiplica -1
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
    End If
#End If
    Set ListaIVKardex2New = rs
    Set rs = Nothing
End Function
'----------
Public Sub ActualizarCampo(ByVal tabla As String, ByVal CampoBusq As String, ByVal CodBusq As String, ByVal campo As String, ByVal Valor As String, TipoDato As Integer)
    Dim sql As String, rs As Recordset, cad As String
    Dim AuxDesc As Integer, SecuencialItem As Long
    Select Case TipoDato
        Case 0 'string
            sql = "Update  " & tabla & " set " & campo & " = '" & Valor & "' WHERE " & CampoBusq & "='" & CodBusq & "'"
        Case 1 'int, long, currency
            sql = "Update  " & tabla & " set " & campo & " = " & Valor & " WHERE " & CampoBusq & "='" & CodBusq & "'"
        End Select
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
End Sub
Public Function ListaTransFuente2ROCAR( _
                    ByVal CodCentro As String) As Variant
    Dim sql As String, s As String, v As Variant, i As Long, CodT As String
   Dim cond As String, rs As Recordset, cond1 As String
    If Len(GNTrans.CodTransFuente) > 0 Then
        'Puede tener varios codigos de transaccion de fuente    ejm. (FC);(OF)
        v = Split(GNTrans.CodTransFuente, ";")
        For i = 0 To UBound(v)
            If Len(s) > 0 Then s = s & ","
            CodT = v(i)
            CodT = Left$(CodT, Len(CodT) - 1)       'Quita el signo ')'
            CodT = Right$(CodT, Len(CodT) - 1)      'Quita el signo '('
            s = s & "'" & CodT & "'"
        Next i
    Else
        Err.Raise ERR_INVALIDO, "GNComprobante.ListaTransFuente", _
                    "No está definida ningúna transacción de fuente para ésta transacción."
    End If
    '*** MAKOTO 06/mar/01 Agregado 'Nombre'
    'cambiado por JEAA 27/08/2003
    sql = "SELECT"
    If gobjMain.objCondicion.TopN > 0 Then
        sql = sql & " TOP " & gobjMain.objCondicion.TopN
    End If
    '*** MAKOTO 05/feb/01 Mod. Aumentado 'NumDocRef' y 'Nombre'
    sql = sql & " gc.TransID, gc.FechaTrans, gc.CodTrans, gc.NumTrans, "
    sql = sql & " gc.NumdocRef, gc.Nombre, gc.Descripcion, "
    sql = sql & " cc.idCentro, cc.CodCentro, cc.Descripcion AS DescCentro, ivi.CodInventario, gc.Estado "
   If Me.GNTrans.CodPantalla = "IVGNG" Then
        sql = sql & " ,gc.Estado1,gc.Estado2 "
    End If
        sql = sql & "FROM GNCentroCosto cc right JOIN  " 'GNVehiculo gnv   ON cc.IdVehiculo = gnv.IdVehiculo RIGHT JOIN "
        sql = sql & "  GNComprobante gc "
        sql = sql & "  LEFT JOIN  Ivkardex ivk"
        sql = sql & "  inner join ivinventario ivi"
        sql = sql & "  inner join ivgrupo1 ivg"
        sql = sql & "  on ivg.idgrupo1=ivi.idgrupo1"
        sql = sql & "  on ivk.idinventario=ivi.idinventario"
        sql = sql & "  ON ivk.transid=gc.transid"
        sql = sql & IIf(Len(gobjCond.CodPC1) > 0, " Inner join PcProvCli pc ON (gc.IdProveedorRef = pc.IDProvCli  OR gc.IdClienteRef = pc.IDProvCli) ", " ")
        sql = sql & " ON cc.IdCentro = gc.IdCentro "
       If Len(cond) > 0 Then cond = cond & " AND "
       cond = cond & " gc.Estado IN ("
       If gobjMain.objCondicion.EstadoBool(ESTADO_NOAPROBADO) Then
            cond = cond & ESTADO_NOAPROBADO & ","
       End If
       If gobjMain.objCondicion.EstadoBool(ESTADO_APROBADO) Then
            cond = cond & ESTADO_APROBADO & ","
       End If
        If gobjMain.objCondicion.EstadoBool(ESTADO_DESPACHADO) Then
            cond = cond & ESTADO_DESPACHADO & ","
       End If
        If gobjMain.objCondicion.EstadoBool(ESTADO_SEMDESPACHADO) Then
            cond = cond & ESTADO_SEMDESPACHADO & ","
       End If
    cond = Mid$(cond, 1, Len(cond) - 1)
    cond = cond & ")"
      'auc 26/10/07
        If Me.GNTrans.VerFacturados And Me.GNTrans.CodPantalla = "IVGNG" Then
                 If Len(cond) > 0 Then cond = cond & " AND "
                 cond = cond & " gc.Estado1 IN ("
             If gobjMain.objCondicion.Estado1Bool(ESTADO_FACTURADO) Then
                 cond = cond & ESTADO_FACTURADO & ","
            End If
            If gobjMain.objCondicion.Estado1Bool(ESTADO_NOFACTURADO) Then
                 cond = cond & ESTADO_NOFACTURADO & ","
            End If
                 cond = Mid$(cond, 1, Len(cond) - 1)
                 cond = cond & ")"
          ElseIf Me.GNTrans.VerComprados And Me.GNTrans.CodPantalla = "IVGNG" Then
                 If Len(cond) > 0 Then cond = cond & " AND "
                 cond = cond & " gc.Estado2 IN ("
            If gobjMain.objCondicion.Estado2Bool(ESTADO_COMPRAS) Then
                 cond = cond & ESTADO_COMPRAS & ","
            End If
            If gobjMain.objCondicion.Estado2Bool(ESTADO_NOCOMPRAS) Then
                 cond = cond & ESTADO_NOCOMPRAS & ","
            End If
            cond = Mid$(cond, 1, Len(cond) - 1)
                 cond = cond & ")"
        End If
       'hasta aqui
    ' Condicion de Busqueda de Fecha
   If Len(cond) > 0 Then cond = cond & " AND "
    cond = cond & " (gc.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, gobjMain.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, gobjMain.TipoDB) & " ) "
    'Condición de CodProvCli    (Opcional)
    If Len(gobjCond.CodPC1) > 0 Then
       If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(PC.CodProvCli='" & gobjCond.CodPC1 & "')"
   End If
    If Len(s) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gc.CodTrans IN (" & s & ")"
    End If
    If Len(CodCentro) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " cc.CodCentro='" & CodCentro & "'"
    End If
    If gobjCond.NumTrans1 <> 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gc.Numtrans= " & gobjCond.NumTrans1
    End If
    If gobjCond.NumTrans2 <> 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gc.numdocref= " & gobjCond.NumTrans2
    End If
    'Condición de CodProvCli    (Opcional)
    If Len(gobjCond.CodVehiculo) > 0 Then
       If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(ivi.codinventario='" & gobjCond.CodVehiculo & "')"
  End If
    'JEAA 01/06/2007
    If GNTrans.ImportacionUnicaTrans Then
        cond = cond & " AND GC.TRANSID NOT IN"
        cond = cond & " (SELECT IdTransFuente"
        cond = cond & " FROM GNCentroCosto cc"
        cond = cond & " LEFT JOIN  GNVehiculo gnv   ON cc.IdVehiculo = gnv.IdVehiculo"
        cond = cond & " RIGHT JOIN  GNComprobante gc   ON cc.IdCentro = gc.IdCentro"
        cond = cond & " where gc.Estado <> 3 "
        cond = cond & " AND (gc.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, gobjMain.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, gobjMain.TipoDB) & " ) "
        cond = cond & " AND  gc.CodTrans IN ('" & GNTrans.CodTrans & "')"
        cond = cond & " AND IdTransFuente<>0 )"
        cond = cond & " and gc.transid not in( select idfuente from GNTransIdFuente g inner join gncomprobante gc on gc.transid=g.transid where gc.estado<>3 )"
    End If
    sql = sql & " inner join ivinventario iv on iv.idinventario = gc.idinventario "
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " AND CODGRUPO1 NOT IN('DISP','SEGURO','FINA')"
     sql = sql & " Group by gc.TransID, gc.FechaTrans, gc.horatrans, "
     sql = sql & " gc.CodTrans, gc.NumTrans,IV.CODINVENTARIO, gc.NumdocRef, gc.Nombre, gc.Descripcion,"
     sql = sql & " cc.idCentro, cc.CodCentro, cc.Descripcion, gc.Estado, ivi.codinventario "
    If Me.GNTrans.CodPantalla = "IVGNG" Then
            sql = sql & " ,gc.Estado1,gc.Estado2 "
    End If
    sql = sql & " ORDER BY gc.FechaTrans Desc, gc.horatrans desc  ,gc.CodTrans,gc.NumTrans"
   Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set ListaTransFuente2ROCAR = rs
   Set rs = Nothing
End Function
Public Function PCKardexValorCuotas() As String
    Dim rs As Recordset, sql As String
    Dim iv As IVInventario
    PCKardexValorCuotas = ""
    sql = sql & " select  count(debe)/2 as NumeroCuotas, sum(debe)/(count(debe)/2) as ValorCuota"
    sql = sql & " from gncomprobante g inner join pckardex p on g.transid=p.transid"
    sql = sql & " where codtrans='" & Me.CodTrans & "' and numtrans=" & Me.NumTrans & " and OrdenCuota<>0"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        PCKardexValorCuotas = rs.Fields("NumeroCuotas") & " Letras de Cambio de $ " & Format(rs.Fields("ValorCuota"), Me.FormatoMoneda) & " dólares americanos cada una, pagaderos mensualmente. "
    End If
End Function
Public Function PCKardexValorEntradas() As String
    Dim rs As Recordset, sql As String, cad As String, i As Integer
    cad = ""
    sql = " select  FechaVenci, sum(debe) as Valor "
    sql = sql & " from gncomprobante g inner join pckardex p on g.transid=p.transid"
    sql = sql & " where codtrans='" & Me.CodTrans & "' and numtrans=" & Me.NumTrans & " and OrdenCuota=0"
    sql = sql & " group by FechaVenci"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    If rs.RecordCount = 1 Then
        cad = " $ " & Format(rs.Fields("Valor"), Me.FormatoMoneda)
    ElseIf rs.RecordCount > 1 Then
        cad = " $ "
        For i = 1 To rs.RecordCount
            If i = 1 Then
                cad = cad & Format(rs.Fields("Valor"), Me.FormatoMoneda) & " dólares americanos a la fecha del contrato"
            Else
                rs.MoveNext
                cad = cad & ", un adicional de $ " & Format(rs.Fields("Valor"), Me.FormatoMoneda) & " dólares americanos con fecha de pago " & Format(rs.Fields("FechaVenci"), "dd/MMM/yyyy")
            End If
        Next i
    End If
    PCKardexValorEntradas = cad
End Function
Public Function ListaPCKardexLetras() As Variant
    Dim sql As String
#If DAOLIB Then
    Dim rs As DAO.Recordset, qdef As DAO.QueryDef
    Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsPCKardex")
    qdef.Parameters("tid") = mProps.transid
    qdef.Parameters("Cotizacion") = Me.Cotizacion("")
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Dim rs As ADODB.Recordset, cmd As ADODB.Command
    Set cmd = New ADODB.Command
    cmd.ActiveConnection = mProps.objEmpresa.Coneccion
    'Si la base es de JET
    If mProps.objEmpresa.TipoDB = TIPODB_JET Then
        cmd.CommandType = adCmdTable
        cmd.CommandText = "spConsPCKardex"
        cmd.Parameters.Append cmd.CreateParameter("tid", adInteger, adParamInput, , mProps.transid)
        Set rs = cmd.Execute
    'Si la base es de SQLSvr
    Else
        sql = "spConsPCKardexOrdenCuota " & mProps.transid & "," & Me.Cotizacion("")
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
    End If
#End If
    Set ListaPCKardexLetras = rs
    Set rs = Nothing
End Function

Private Function GeneraAsientoIVVentaDiferida( _
                    Param As String) As colAsientoTemp
    Dim i As Long, v As Currency, k As IVKardex
    Dim col As colAsientoTemp
    Set col = New colAsientoTemp
    For i = 1 To CountIVKardex
        v = 0
        Set k = IVKardex(i)
        '*** MAKOTO 08/mar/01 Agregado
        'Si es que el item no tiene asignado una cuenta de Activo, genera error
        If k.auxIdCuentaDiferida = 0 Then
            NoTieneCuentaAsignado True, "DIFERIDA", k.CodInventario
        End If
        Select Case Right$(Param, 1)
        Case "+":   If k.PrecioRealTotal > 0 Then v = Abs(k.PrecioRealTotal)  'Sólo positivos
        Case "-":   If k.PrecioRealTotal < 0 Then v = Abs(k.PrecioRealTotal)  'Sólo negativos
        Case Else:  v = Abs(k.PrecioRealTotal)       'Todos con valor absoluto
        End Select
        If v <> 0 Then
            If mobjGNTrans.IVTipoTrans = "I" Then
                v = MiCCur(Format$(v, Me.FormatoCosto))
            Else
                If FormatoMoneda = "#,0.00" And Me.FormatoCosto = "#,#.0000" Then
                    v = MiCCur(Format$(v, Me.FormatoMoneda))
                Else
                    v = MiCCur(Format$(v, Me.FormatoCosto))
                End If
            End If
            col.Add k.auxIdCuentaDiferida, v
        End If
    Next i
    RedondearAsiento col, Me.FormatoMoneda
    If col.Count Then Set GeneraAsientoIVVentaDiferida = col
    Set col = Nothing
End Function
Public Property Let IdGaranteRef2(ByVal value As Long)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.IdGaranteRef2", MSGERR_SOLOVER
    mProps.IdGaranteRef2 = value
    mbooModificado = True
End Property
Public Property Get IdGaranteRef2() As Long
    IdGaranteRef2 = mProps.IdGaranteRef2
End Property
Public Property Let CodGaranteRef2(ByVal value As String)
    Dim sql As String, rs As Recordset
    'Cuando cambia el valor
    If value <> mProps.CodGaranteRef2 Then
        If Len(value) > 0 Then
            'Actualiza IdGaranteRef2 también
            sql = "SELECT IdProvCli FROM PCProvCli WHERE CodProvCli='" & value & "'"
            Set rs = mProps.objEmpresa.OpenRecordset(sql)
            If rs.EOF Then
                Err.Raise ERR_NOHAYCODIGO, "GNComprobante.CodGaranteRef2", MSGERR_NOHAYCODIGO
                Exit Property
            Else
                IdGaranteRef2 = rs!IdProvcli
           End If
            rs.Close
            Set rs = Nothing
        Else
            IdGaranteRef2 = 0
        End If
        mProps.CodGaranteRef2 = value
        SetModificado
    End If
    Set rs = Nothing
End Property
Public Property Get CodGaranteRef2() As String
    CodGaranteRef2 = Trim$(mProps.CodGaranteRef2)
End Property
Public Property Let IdInventario(ByVal value As Long)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.IdInventario", MSGERR_SOLOVER
    mProps.IdInventario = value
    mbooModificado = True
End Property
Public Property Get IdInventario() As Long
    IdInventario = mProps.IdInventario
End Property
Public Property Let CodInventario(ByVal value As String)
    Dim sql As String, rs As Recordset
    'Cuando cambia el valor
    If value <> mProps.CodInventario Then
        If Len(value) > 0 Then
            'Actualiza IdInventario también
            sql = "SELECT IdInventario FROM IvInventario WHERE CodInventario='" & value & "'"
            Set rs = mProps.objEmpresa.OpenRecordset(sql)
            If rs.EOF Then
                Err.Raise ERR_NOHAYCODIGO, "GNComprobante.CodInventario", MSGERR_NOHAYCODIGO
                Exit Property
            Else
                IdInventario = rs!IdInventario
            End If
            rs.Close
            Set rs = Nothing
        Else
            IdInventario = 0
        End If
        mProps.CodInventario = value
        SetModificado
    End If
    Set rs = Nothing
End Property
Public Property Get CodInventario() As String
    CodInventario = Trim$(mProps.CodInventario)
End Property
Private Function GeneraAsientoPCPorCobrarPagarDiferidoDebe( _
                    ByVal BandPrincipal As Boolean, _
                    ByVal BandPorCobrar As Boolean) As colAsientoTemp
    Dim i As Long, v As Currency, k As PCKardex, tsf As TSFormaCobroPago
    Dim col As colAsientoTemp, Doc As PCDocAsignado
    Set col = New colAsientoTemp
    For i = 1 To CountPCKardex
        Set k = PCKardex(i)
        Set tsf = Me.Empresa.RecuperaTSFormaCobroPago(k.IDForma)
        If Not tsf.NoAplicaDiferidos Then
            v = IIf(BandPorCobrar, k.Debe, k.Haber)
            'Cuando tiene documento asignado,
            ' convierte en valor correspondiente a la cotizacion del doc. asignado
            ' Esto sirve para autocalcular diferencial cambiario en asiento contable
            '*** MAKOTO 08/mar/01 Agregado
            'Si es que el prov/cli no tiene asignado una cuenta, genera error
            If (BandPrincipal And tsf.IdCuentaDiferida = 0) Then
                NoTieneCuentaAsignado False, "Cuenta " & IIf(BandPrincipal, "1", "2"), tsf.CodForma
            End If
                If v > 0 Then col.Add tsf.IdCuentaDiferida, v
        End If
    Next i
    Set GeneraAsientoPCPorCobrarPagarDiferidoDebe = col
    Set k = Nothing
    Set col = Nothing
    Set Doc = Nothing
    Set tsf = Nothing
End Function
Public Function IVKardexFinanciamientoTotalFilaAnteriorNew(ByVal Valor As Currency, ByVal Tasa As Double) As Currency
    Dim t As Currency, i As Long, v As Currency, TasaTotal As Double
    Dim NumDecimales As Integer
    'If Len(Me.Empresa.GNOpcion.ObtenerValor("NumDecimalesCuotas")) > 0 Then
    If Len(Me.GNTrans.IVNumDecimalesCuotas) > 0 Then
        NumDecimales = Me.GNTrans.IVNumDecimalesCuotas
    Else
        NumDecimales = 2
    End If
    t = Valor
    TasaTotal = Me.NumeroPagos * (Tasa / 100)
'    If Abs(t) < (Me.ValorEntrada + Me.ValorSegundaEntrada) Then
'        t = 0
'    Else
'        t = Abs(t) - Me.ValorEntrada - Me.ValorSegundaEntrada
'        t = t * TasaTotal
'    End If
    If Me.CountIVKardex > 0 Then
        If Abs(t) < (Me.ValorEntrada + Me.IVKardex(1).EntradaAdicional1 + Me.IVKardex(1).EntradaAdicional2 + Me.IVKardex(1).EntradaAdicional3) Then
            t = 0
        Else
            t = Abs(t) - Me.ValorEntrada - (Me.IVKardex(1).EntradaAdicional1 + Me.IVKardex(1).EntradaAdicional2 + Me.IVKardex(1).EntradaAdicional3)
            t = t * TasaTotal
        End If
    Else
        If Abs(t) < (Me.ValorEntrada + Me.ValorSegundaEntrada) Then
            t = 0
        Else
            t = Abs(t) - Me.ValorEntrada - Me.ValorSegundaEntrada
            t = t * TasaTotal
        End If
    End If
    IVKardexFinanciamientoTotalFilaAnteriorNew = Abs(Round(t, NumDecimales))          '*** MAKOTO 29/ene/01 Mod.
End Function
Public Function PCKardexValorEntradasPagos() As String
    Dim rs As Recordset, sql As String, cad As String, i As Integer
    cad = ""
    sql = " select  FechaVenci, sum(Haber) as Valor "
    sql = sql & " from gncomprobante g inner join pckardex p on g.transid=p.transid"
    sql = sql & " where codtrans='" & Me.CodTrans & "' and numtrans=" & Me.NumTrans & " and OrdenCuota=0"
    sql = sql & " group by FechaVenci"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    If rs.RecordCount = 1 Then
        cad = "Un sólo pago de $ " & Format(rs.Fields("Valor"), Me.FormatoMoneda) & " con fecha de vencimiento el " & Format(rs.Fields("FechaVenci"), "dd/MMM/yyyy")
    ElseIf rs.RecordCount > 1 Then
        For i = 1 To rs.RecordCount
            If i = 1 Then
                If rs.Fields("FechaVenci") <> Me.FechaTrans Then
                    cad = ""
                    cad = cad & "Un documento de $ " & Format(rs.Fields("Valor"), Me.FormatoMoneda) & " dólares americanos con fecha de pago " & Format(rs.Fields("FechaVenci"), "dd/MMM/yyyy") & Chr(13)
                Else
                    cad = "$ "
                    cad = cad & Format(rs.Fields("Valor"), Me.FormatoMoneda) & " dólares americanos a la fecha del contrato"
                End If
            Else
                rs.MoveNext
                cad = cad & "Un documento de $ " & Format(rs.Fields("Valor"), Me.FormatoMoneda) & " dólares americanos con fecha de pago " & Format(rs.Fields("FechaVenci"), "dd/MMM/yyyy") & Chr(13)
            End If
        Next i
    End If
    PCKardexValorEntradasPagos = cad
End Function
Public Function PCKardexValorCuotasPagos() As String
    Dim rs As Recordset, sql As String
    Dim iv As IVInventario
    PCKardexValorCuotasPagos = ""
    sql = sql & " select  count(Haber)/2 as NumeroCuotas, sum(Haber)/(count(debe)/2) as ValorCuota"
    sql = sql & " from gncomprobante g inner join pckardex p on g.transid=p.transid"
    sql = sql & " where codtrans='" & Me.CodTrans & "' and numtrans=" & Me.NumTrans & " and OrdenCuota<>0"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        If CInt(rs.Fields("NumeroCuotas")) <> 0 Then
            PCKardexValorCuotasPagos = rs.Fields("NumeroCuotas") & " Letras de Cambio de $ " & Format(rs.Fields("ValorCuota"), Me.FormatoMoneda) & " dólares americanos cada una, pagaderos mensualmente. "
        End If
    End If
End Function
Public Function PCKardexCapital(ByVal IdFuente As Long) As Currency
    Dim rs As Recordset, sql As String
    Dim iv As IVInventario
    PCKardexCapital = 0
    sql = sql & " select   sum(p.debe) as ValorCapital"
    sql = sql & " from gncomprobante g inner join pckardex p on g.transid=p.transid"
    sql = sql & " inner join tscobropago ts  on ts.idforma=p.idforma"
    sql = sql & " where transid=" & IdFuente & " "
    sql = sql & " and ts.codforma='CR'"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        PCKardexCapital = rs.Fields("valorcapital")
    End If
End Function
'AUC
Public Function RsPCProvClixGarantes(ByVal IdGarante As Long) As Recordset
Dim sql As String, rs As Recordset
    sql = "SELECT g.idclienteref from gncomprobante g inner join pcprovcli p on p.idprovcli = g.idgaranteref where g.idgaranteref = " & IdGarante
    sql = sql & " and g.estado <> 3 Order by g.fechatrans desc"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        Set RsPCProvClixGarantes = rs
    End If
End Function
Public Function RecuperaPagosxUsuarioRoc(ByVal Trans As String, fecha As Date) As Variant
    Dim sql As String, rs As Recordset
    sql = " select"
    sql = sql & " 0 as numlim, G.TRANSID, G.CodTrans + ' ' + CONVERT(varchar, NumTrans)    AS Trans,"
    sql = sql & " g.descripcion, '' as nombre, haber as valor"
    sql = sql & " From"
    sql = sql & " GNComprobante g"
'    sql = sql & " inner join pcprovcli pc"
 '   sql = sql & " on ( g.idclienteref=pc.idprovcli or g.idproveedorref=pc.idprovcli )"
    sql = sql & " inner join tskardex tsk"
    sql = sql & " on g.transid=tsk.transid"
    sql = sql & " Where g.Estado <> 3 "
   ' sql = sql & " and codusuario='" & Me.CodUsuario & "'"
   sql = sql & " and codtrans in (" & Trans & ")"
    sql = sql & " and g.FechaTrans BETWEEN " & FechaYMD(fecha, gobjMain.TipoDB) & " AND " & FechaYMD(fecha, gobjMain.TipoDB) & "  "
    sql = sql & " and haber>0"
    sql = sql & " and g.transid not in( select IdTransRef from tsdetalleegreso tsd inner join gncomprobante g on tsd.transid=g.transid where g.estado<>3)"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaPagosxUsuarioRoc = rs
    Set rs = Nothing
End Function
Public Function VerificaRelacion(ByVal transid As Long, ByVal CodTransToca As String) As Boolean
Dim sql As String
Dim rs As Recordset
Dim msg As String
On Error GoTo CapturaError
    msg = ""
    sql = "Select codtrans,numtrans from gncomprobante where idtransfuente =" & transid
    sql = sql & " AND Estado <> 3"
    sql = sql & " AND codtrans = '" & CodTransToca & "'"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    msg = "Tiene relacion con esta transacciones " & vbCr
    Do While Not rs.EOF
        msg = msg & rs!CodTrans & " " & rs!NumTrans & vbCr
        rs.MoveNext
    Loop
    If rs.RecordCount > 0 Then
        If MsgBox(msg & vbCr & "Desea Crear una Nueva", vbYesNo) = vbYes Then
            VerificaRelacion = True
        End If
    Else
        VerificaRelacion = True
    End If
    Set rs = Nothing
    Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function
Public Property Get GNFinan(ix As Long) As GNFinanciamiento
    If mcolGNFinan Is Nothing Then RecuperaGNFinanciamiento
    Set GNFinan = mcolGNFinan.item(ix)
End Property
Public Property Get CountGNFinan() As Long
    If mcolGNFinan Is Nothing Then RecuperaGNFinanciamiento
    CountGNFinan = mcolGNFinan.Count
End Property
Private Sub RecuperaGNFinanciamiento()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolGNFinan Is Nothing Then Set mcolGNFinan = New Collection
    sql = "SELECT gnF.*" & _
          "FROM GnFinanciamiento gnF " & _
                " "
    sql = sql & "WHERE TransId=" & mProps.transid
    sql = sql & "Order by Id"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddGNFinanciamiento
                GNFinan(i).Recuperar rs
            End If
            .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub
Public Function AddGNFinanciamiento() As Long
    Dim nuevo As GNFinanciamiento
    'Cuando SoloVer está establecido a True, genera error
    If mcolGNFinan Is Nothing Then RecuperaGNFinanciamiento
    Set nuevo = New GNFinanciamiento
    Set nuevo.GNComprobante = Me
    mcolGNFinan.Add nuevo
    AddGNFinanciamiento = mcolGNFinan.Count
  Set nuevo = Nothing
    mbooModificado = True
End Function
Private Function GeneraAsientoPCVentaDiferido( _
                    ByVal BandPrincipal As Boolean) As colAsientoTemp
    Dim i As Long, v As Currency, k As PCKardex
    Dim col As colAsientoTemp, Doc As PCDocAsignado
    Dim gnVenta As GNComprobante, item As IVInventario, j As Long, IdCta As Long, pcg As PcGrupo
    Set col = New colAsientoTemp
        For i = 1 To CountPCKardex
        Set k = PCKardex(i)
'        If k.Haber = 11.07 Then
 '           MsgBox "para"
  '      End If
        If k.IdAsignado <> 0 Then
            'Si es que el prov/cli no tiene asignado una cuenta, genera error
            Set Doc = k.RecuperaPCDocAsignado   'Recupera el documento asignado
           Set gnVenta = Me.Empresa.RecuperaGNComprobantexIdAsignado(PCKardex(i).IdAsignado)
            If Not gnVenta Is Nothing Then
                For j = 1 To gnVenta.CountIVKardex
                   Set item = Me.Empresa.RecuperaIVInventario(gnVenta.IVKardex(j).CodInventario)
                    If Not item Is Nothing Then
                        Select Case item.CodGrupo(1)
                            Case "SEGURO"
                                    If Doc.PCKardex.Haber < Doc.ValorCapital2 Then
                                        v = Doc.PCKardex.Haber
                                    ElseIf Doc.PCKardex.Haber = Doc.ValorCapital2 Then
                                        v = Doc.ValorCapital2
                                    Else
                                        v = 0
                                    End If
                            Case "DISP"
                                       If Doc.PCKardex.Haber < Doc.ValorCapital3 Then
                                            v = Doc.PCKardex.Haber
                                       ElseIf Doc.PCKardex.Haber = Doc.ValorCapital3 Then
                                            v = Doc.ValorCapital3
                                        Else
                                            v = 0
                                       End If
                            Case "FIN-VEH"
                                If Doc.ValorInteres1 <> 0 Then
                                    If Doc.PCKardex.Haber < Doc.ValorInteres1 Then
                                        v = Doc.PCKardex.Haber
                                    ElseIf Doc.PCKardex.Haber = Doc.ValorInteres1 Then
                                        v = Doc.ValorInteres1
                                    'ElseIf Doc.PCKardex.Haber > Doc.ValorInteres2 Then
                                     '   v = Doc.PCKardex.Haber
                                    Else
                                        v = 0
                                    End If
                                Else
                                    v = 0
                                End If
                            Case "FIN-SEG"
                                If Doc.ValorInteres2 <> 0 Then
                                    If Doc.PCKardex.Haber < Doc.ValorInteres2 Then
                                        v = Doc.PCKardex.Haber
                                    ElseIf Doc.PCKardex.Haber = Doc.ValorInteres2 Then  '> PARA CUANDO HAY VALORES
                                        v = Doc.ValorInteres2
                                    ElseIf Doc.PCKardex.Haber > Doc.ValorInteres2 Then
                                        v = Doc.PCKardex.Haber
                                    Else
                                        v = 0
                                    End If
                                Else
                                    v = 0
                                End If
                            Case "FIN-DISP"
                                    If Doc.PCKardex.Haber <= Doc.ValorInteres3 Then
                                        v = Doc.PCKardex.Haber
                                    ElseIf Doc.PCKardex.Haber < Doc.ValorInteres3 Then
                                        v = Doc.ValorInteres3
                                    Else
                                        v = 0
                                    End If
                            Case Else
                                If Doc.PCKardex.Haber < Doc.ValorCapital1 Then
                                    v = Doc.PCKardex.Haber
                                Else
                                    v = Doc.ValorCapital1
                                End If
                            End Select
                            IdCta = item.IdCuentaDiferida
                    End If
                    If Not (Doc Is Nothing) Then
                        v = v / Me.Cotizacion(Doc.CodMoneda)    'Convierte en moneda original
                        v = v * Doc.Cotizacion              'Convierte en moneda nacional a cotizacion original
                    End If
                    v = v / Me.Cotizacion("")       'Convierte en moneda ex.
                    col.Add IdCta, v
                Next j
            End If
        End If
    Next i
    Set GeneraAsientoPCVentaDiferido = col
    Set k = Nothing
    Set col = Nothing
    Set Doc = Nothing
End Function
Private Function GeneraAsientoPCCobroDiferido( _
                    ByVal BandPrincipal As Boolean) As colAsientoTemp
    Dim i As Long, v As Currency, k As PCKardex
    Dim col As colAsientoTemp, Doc As PCDocAsignado
    Dim SubTotal As Currency
    SubTotal = 0
    Dim gnVenta As GNComprobante, item As IVInventario, j As Long, IdCta As Long
    Set col = New colAsientoTemp
    For i = 1 To CountPCKardex
        Set k = PCKardex(i)
        If k.IdAsignado <> 0 Then
            Set gnVenta = Me.Empresa.RecuperaGNComprobantexIdAsignado(PCKardex(i).IdAsignado)
            Set Doc = k.RecuperaPCDocAsignado   'Recupera el documento asignado
            If Not gnVenta Is Nothing Then
                 For j = 1 To gnVenta.CountIVKardex
                    Set item = Me.Empresa.RecuperaIVInventario(gnVenta.IVKardex(j).CodInventario)
                    If Not item Is Nothing Then
                        Select Case item.CodGrupo(1)
                            Case "SEGURO"
                                    If Doc.PCKardex.Haber < Doc.ValorCapital2 Then
                                        v = Doc.PCKardex.Haber
                                    ElseIf Doc.PCKardex.Haber = Doc.ValorCapital2 Then
                                        v = Doc.ValorCapital2
                                    Else
                                        v = 0
                                    End If
                            Case "DISP"
                                       If Doc.PCKardex.Haber < Doc.ValorCapital3 Then
                                            v = Doc.PCKardex.Haber
                                       ElseIf Doc.PCKardex.Haber = Doc.ValorCapital3 Then
                                            v = Doc.ValorCapital3
                                        Else
                                            v = 0
                                       End If
                            Case "FIN-VEH"
                                If Doc.PCKardex.Haber < Doc.ValorInteres1 Then
                                    v = Doc.PCKardex.Haber
                                ElseIf Doc.PCKardex.Haber = Doc.ValorInteres1 Then
                                    v = Doc.ValorInteres1
                                Else
                                    v = 0
                                End If
                            Case "FIN-SEG"
                                    If Doc.PCKardex.Haber < Doc.ValorInteres2 Then
                                        v = Doc.PCKardex.Haber
                                    ElseIf Doc.PCKardex.Haber = Doc.ValorInteres2 Then
                                        v = Doc.ValorInteres2
                                    Else
                                        v = 0
                                    End If
                            Case "FIN-DISP"
                                    If Doc.PCKardex.Haber < Doc.ValorInteres3 Then
                                        v = Doc.PCKardex.Haber
                                    ElseIf Doc.PCKardex.Haber <= Doc.ValorInteres3 Then
                                        v = Doc.ValorInteres3
                                    Else
                                        v = 0
                                    End If
                            Case Else
                                If Doc.PCKardex.Haber < Doc.ValorCapital1 Then
                                    v = Doc.PCKardex.Haber
                                Else
                                    v = Doc.ValorCapital1
                                End If
                        End Select
                        IdCta = item.IdCuentaVenta
                    End If
                    If Not (Doc Is Nothing) Then
                        v = v / Me.Cotizacion(Doc.CodMoneda)    'Convierte en moneda original
                        v = v * Doc.Cotizacion              'Convierte en moneda nacional a cotizacion original
                    End If
                    v = v / Me.Cotizacion("")       'Convierte en moneda ex.
                    col.Add IdCta, v
                Next j
            End If
        End If
    Next i
    Set GeneraAsientoPCCobroDiferido = col
    Set k = Nothing
    Set col = Nothing
    Set Doc = Nothing
End Function
Public Sub RemoveGnFinan(ByVal ix As Long, Optional obj As GNFinanciamiento)
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemoveGnFinan", MSGERR_SOLOVER
    If mcolGNFinan Is Nothing Then RecuperaGNFinanciamiento
  'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolGNFinan.Count
            If mcolGNFinan.item(ix) Is obj Then
                mcolGNFinan.Remove ix
              Exit For
            End If
        Next ix
        Debug.Assert True   'No se puede dar
    Else
        mcolGNFinan.Remove ix
    End If
    mbooModificado = True
End Sub
'AUC para borrar  por lote formas de cobro ROCAR
Public Function RemovePCKardexLote(ByVal ix As Long, Optional obj As PCKardex) As Boolean
    Dim Trans As String
   'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemovePCKardex", MSGERR_SOLOVER
    If mcolPCKardex Is Nothing Then RecuperaPCKardex
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolPCKardex.Count
            If mcolPCKardex.item(ix) Is obj Then Exit For
        Next ix
    Else
        Set obj = mcolPCKardex.item(ix)
    End If
    If Not obj.VerificaEliminacionNEW(Trans) Then
        Err.Raise ERR_INVALIDO, "GNComprobante.RemovePCKardex", _
            "No se puede eliminar el documento debido a que existen cobros o pagos asignados " & Chr(13) & "con la Transacción: " & Trans & Chr(13) & "Primero anule la transaccion"
            RemovePCKardexLote = False
            Exit Function
   End If
    'Elimina de la colección
    If mcolPCKardex.Count >= ix Then mcolPCKardex.Remove ix
    mbooModificado = True
    RemovePCKardexLote = True

End Function
'AUC
Public Function TotalizaItemRepetidoProduccion() As Boolean
    Dim ivk As IVKardex, i As Long, j As Long, ivk2 As IVKardex, rt As Boolean
    rt = False
    i = 1
    Do While i <= mcolIVKardex.Count        'Uso Do While para que evalue cada vez la condicion (Con For no está bien)
        Set ivk = mcolIVKardex.item(i)
        'Busca repetidos
        For j = mcolIVKardex.Count To i + 1 Step -1     'En orden al revez
            Set ivk2 = mcolIVKardex.item(j)
            'Si encuentra repetido en la misma bodega, con el mismo signo
            If ivk2.CodInventario = ivk.CodInventario And _
                ivk2.CodBodega = ivk.CodBodega And _
                ivk2.CodGrupo(1) = ivk.CodGrupo(1) And _
                ivk2.CodGrupo(2) = ivk.CodGrupo(2) And _
                ivk2.CodGrupo(3) = ivk.CodGrupo(3) And _
                ivk2.CodGrupo(4) = ivk.CodGrupo(4) And _
                ivk2.CodGrupo(5) = ivk.CodGrupo(5) And _
                Sgn(ivk2.Cantidad) = Sgn(ivk.Cantidad) Then
                'Totaliza la cantidad y elimina el repetido
                ivk.PrecioTotal = ivk.PrecioTotal + ivk2.Cantidad * ivk2.Precio  'Para que no cambie de precio de primer item
                ivk.CostoTotal = ivk.CostoTotal + ivk2.Cantidad * ivk2.Costo  'Para que no cambie de costo de primer item
'                ivk.CostoRealTotal = ivk.CostoRealTotal + ivk2.Cantidad * ivk.Costo  'Para que no cambie de costo de primer item
                ivk.Cantidad = ivk.Cantidad + ivk2.Cantidad
'                ivk.CodBodega = ivk.CodBodega
                If Me.GNTrans.TotalizarAlImprimir Then
                    RemoveIVKardexImprimir j
                Else
                    RemoveIVKardex j
                End If
                rt = True
            End If
        Next j
        i = i + 1
    Loop
    TotalizaItemRepetidoProduccion = rt
End Function


Public Property Let NumDireccion(ByVal value As String)
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.NumDireccion", MSGERR_SOLOVER
    If Len(value) > 2 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.NumDireccion", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.NumDireccion <> value Then
        mProps.NumDireccion = value
        mbooModificado = True
    End If
End Property

Public Property Get NumDireccion() As String
    NumDireccion = Trim$(mProps.NumDireccion)
End Property

Public Property Let DirTransporte(ByVal value As String)
    mProps.DirTransporte = value
    mbooModificado = True
End Property

Public Property Get DirTransporte() As String
    DirTransporte = Trim$(mProps.DirTransporte)
End Property

Public Function IVKardexCantidadTotal() As Currency
    Dim t As Currency, i As Long, v As Currency
    
    For i = 1 To CountIVKardex
        v = IVKardex(i).Cantidad
        t = t + MiCCur(Format$(v, Me.FormatoPU))
    Next i
    IVKardexCantidadTotal = t
End Function



Public Property Let BandInteresIncluyeEntrada(ByVal value As Boolean)
    mProps.BandInteresIncluyeEntrada = value
   ' mbooModificado = True
End Property

Public Property Get BandInteresIncluyeEntrada() As Boolean
    BandInteresIncluyeEntrada = mProps.BandInteresIncluyeEntrada
End Property

Public Property Let IntervaloCuotas(ByVal value As Integer)
    mProps.IntervaloCuotas = value
'    mbooModificado = True
End Property

Public Property Get IntervaloCuotas() As Integer
    IntervaloCuotas = mProps.IntervaloCuotas
End Property

Public Property Let Opcion(ByVal value As String)
    If Len(value) > 20 Then
        Err.Raise ERR_INVALIDO, "GNComprobante_Opcion", MSGERR_INVALIDO
    End If
    
    mProps.Opcion = value
    mbooModificado = True
End Property

Public Property Get Opcion() As String
    Opcion = Trim$(mProps.Opcion)
End Property


'--------------------------------------------------------------------------
Public Property Let CambioPCGrupo(ByVal value As String)
    Mid$(mProps.Opcion, 1, 1) = value
    mbooModificado = True
End Property

Public Property Get CambioPCGrupo() As String
    CambioPCGrupo = Mid$(Opcion, 1, 1)
End Property

Public Function RecuperaGNCadenaPreciosxGrupo(ByVal NumGrupo As Integer, IdGrupo As Long) As String
Dim rs As Recordset
Dim sql As String
On Error GoTo CapturaError
    sql = "SELECT PreciosDisponibles from pcgrupo" & NumGrupo
    sql = sql & " where idgrupo" & NumGrupo & "=" & IdGrupo
    Set rs = Me.Empresa.OpenRecordset(sql)
    
    With rs
     If rs.RecordCount = 0 Then
        RecuperaGNCadenaPreciosxGrupo = "0000000"
      Else
         RecuperaGNCadenaPreciosxGrupo = !PreciosDisponibles
      End If
    End With
    Set rs = Nothing
    
   Exit Function
CapturaError:
        MsgBox Err.Description
        Set rs = Nothing
        Exit Function
End Function

Public Function RecuperaGNNumPreciosPrexGrupo(ByVal NumGrupo As Integer, IdGrupo As Long) As String
Dim rs As Recordset
Dim sql As String
On Error GoTo CapturaError
    sql = "SELECT NumPrecioPre from pcgrupo" & NumGrupo
    sql = sql & " where idgrupo" & NumGrupo & "=" & IdGrupo
    Set rs = Me.Empresa.OpenRecordset(sql)
    
    With rs
     If rs.RecordCount = 0 Then
        RecuperaGNNumPreciosPrexGrupo = "1"
      Else
         RecuperaGNNumPreciosPrexGrupo = !NumPrecioPre
      End If
    End With
    Set rs = Nothing
    
   Exit Function
CapturaError:
        MsgBox Err.Description
        Set rs = Nothing
        Exit Function
End Function


Public Property Let ListaIVPrecio(ByVal value As String)
    If Len(value) > 7 Then
        Err.Raise ERR_INVALIDO, "GNComprobante_ListaIVPrecio", MSGERR_INVALIDO
    End If
    RaiseEvent PCGrupoCambiado
    mProps.ListaIVPrecio = value
    mbooModificado = True
End Property

Public Property Get ListaIVPrecio() As String
    ListaIVPrecio = Trim$(mProps.ListaIVPrecio)
End Property

Public Property Let NumPrecioPred(ByVal value As String)
    If Len(value) > 1 Then
        Err.Raise ERR_INVALIDO, "GNComprobante_ListaIVPrecio", MSGERR_INVALIDO
    End If
    
    mProps.NumPrecioPred = value
    mbooModificado = True
End Property

Public Property Get NumPrecioPred() As String
    NumPrecioPred = Trim$(mProps.NumPrecioPred)
End Property



Public Function RecuperaGNCadenaPreciosxCodGrupo(ByVal NumGrupo As Integer, CodGrupo As Long) As String
Dim rs As Recordset
Dim sql As String
On Error GoTo CapturaError
    sql = "SELECT PreciosDisponibles from pcgrupo" & NumGrupo
    sql = sql & " where codgrupo" & NumGrupo & "='" & CodGrupo & "'"
    Set rs = Me.Empresa.OpenRecordset(sql)
    
    With rs
     If rs.RecordCount = 0 Then
        RecuperaGNCadenaPreciosxCodGrupo = "0000000"
      Else
         RecuperaGNCadenaPreciosxCodGrupo = !PreciosDisponibles
      End If
    End With
    Set rs = Nothing
    
   Exit Function
CapturaError:
        MsgBox Err.Description
        Set rs = Nothing
        Exit Function
End Function

'AUC Para transf bodega
Public Property Let CodBodegaDest(ByVal value As String)
    mProps.CodBodegaDest = value
End Property
Public Property Get CodBodegaDest() As String
    CodBodegaDest = mProps.CodBodegaDest
End Property
Public Property Get CountIVKNumSerie() As Long
    If mcolIVKNumSerie Is Nothing Then RecuperaIVKNumSerie
    CountIVKNumSerie = mcolIVKNumSerie.Count
End Property
Public Property Get IVKNumSerie(ix As Long) As IVKardexSerie
    If mcolIVKNumSerie Is Nothing Then RecuperaIVKNumSerie
    Set IVKNumSerie = mcolIVKNumSerie.item(ix)
End Property
Private Sub RecuperaIVKNumSerie()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolIVKNumSerie Is Nothing Then Set mcolIVKNumSerie = New Collection
    'Recupera los registros de TSKardexRet
    sql = "SELECT Ivs.*, ivb.CodBodega " & _
          "FROM IVkardexSerie ivs Inner Join IVBodega ivb " & _
                "ON ivb.Idbodega= ivs.Idbodega"
    sql = sql & " WHERE TransId=" & mProps.transid
     If Me.GNTrans.IVTipoTrans = "T" And gobjMain.ModuloCargado <> "SiiTools" Then
        sql = sql & " AND ivs.cantidad <0"
    End If
    sql = sql & " ORDER BY Orden"

    Set rs = mProps.objEmpresa.OpenRecordset(sql)
   With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddIVKNumSerie
                IVKNumSerie(i).Recuperar rs
          End If
            .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub

Public Function AddIVKNumSerie() As Long
    Dim nuevo As IVKardexSerie
    If mcolIVKNumSerie Is Nothing Then RecuperaIVKNumSerie
    Set nuevo = New IVKardexSerie
    Set nuevo.GNComprobante = Me
    mcolIVKNumSerie.Add nuevo
    AddIVKNumSerie = mcolIVKNumSerie.Count    'Devuelve el indice de nuevo elemento
    Set nuevo = Nothing
    mbooModificado = True
End Function

Public Sub RemoveIVKNumSerie(ByVal ix As Long, Optional obj As IVKardexSerie)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemoveIVKNumserie", MSGERR_SOLOVER
    If mcolIVKNumSerie Is Nothing Then RecuperaIVKNumSerie
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolIVKNumSerie.Count
            If mcolIVKNumSerie.item(ix) Is obj Then
                mcolIVKNumSerie.Remove ix
                Exit For
            End If
        Next ix
        Debug.Assert True   'No se puede dar
    Else
        mcolIVKNumSerie.Remove ix
    End If
    mbooModificado = True
End Sub

Friend Sub ActualizaCantidadIVSerie(ByVal Signo As String)
    Dim sql As String
    If CountIVKNumSerie = 0 Then Exit Sub
    'Si la transaccion no afecta a la existencia, actualiza comprometido
    If Not GNTrans.AfectaCantidad Then
            If Signo = "+" Then
                Signo = "+"
            Else
                Signo = "-"
            End If
    End If
    sql = "spIVSerieExist '" & Signo & "', " & mProps.transid
    mProps.objEmpresa.Execute sql, True
End Sub

Public Function ListaIVKardexSerie( _
                    ByVal ExistPorBodega As Boolean) As Variant
    Dim sql As String, rs As Recordset
    If Not Me.GNTrans.IVTipoTrans = "I" Then
       sql = "spConsIVSerieKardexTrans " & mProps.transid & ", " & _
                                  Me.Cotizacion("") & ", " & _
                                  CadenaBool(ExistPorBodega, Me.Empresa.TipoDB) & ",0"
    Else
        sql = "spConsIVSerieKardexTrans " & mProps.transid & ", " & _
                                  Me.Cotizacion("") & ", " & _
                                  CadenaBool(ExistPorBodega, Me.Empresa.TipoDB) & ",1"
    End If
   Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set ListaIVKardexSerie = rs
    Set rs = Nothing
End Function



Public Function RecuperaVentasChequesxSucursal() As Variant
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
    
    sql = "SELECT"
    sql = sql & " ivb.codBanco , NumCheque, p.TitularCta,  "
    sql = sql & " p.Debe As Total, G.TRANSID "
    sql = sql & " FROM GNCOMPROBANTE G "
    sql = sql & " inner join gntrans gt "
    sql = sql & " inner join gnsucursal gns "
    sql = sql & " on gt.idsucursal=gns.idsucursal "
    sql = sql & " on g.codtrans=gt.codtrans"
    sql = sql & " INNER JOIN PCKARDEX P"
    sql = sql & " inner join tsformacobropago tsf on p.idforma=tsf.idforma"
    sql = sql & " INNER JOIN ivbanco ivb "
    sql = sql & " ON p.idBanco=ivb.idBanco"
    sql = sql & " ON G.TRANSID=P.TRANSID"
    sql = sql & " Where"
    sql = sql & " G.ESTADO<>3"
    sql = sql & " AND FECHATRANS BETWEEN '" & Me.FechaTrans & "' AND '" & Me.FechaTrans & "'"
    sql = sql & " AND CODsucursal='" & Me.GNTrans.CodSucursal & "'"
    sql = sql & " AND idtarjeta=0"
    sql = sql & " and afectasaldopc=1"
    sql = sql & " and tsf.codforma='CHR'"
    If Me.EsNuevo Then
        sql = sql & " and g.transid not in( select IdTransRef from TSDetalleCheque tsd inner join gncomprobante g on tsd.transid=g.transid where g.estado<>3)"
    End If
    sql = sql & " order by ivb.codBanco "

    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaVentasChequesxSucursal = rs
    Set rs = Nothing
End Function

Public Function RecuperaVentasCreditoxSucursal(ByVal Trans As String, fecha As Date) As Variant
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean

    
    
    sql = "SELECT"
    sql = sql & " G.TRANSID, G.CodTrans + ' ' + CONVERT(varchar, NumTrans)    AS Trans,"
    sql = sql & " pc.nombre, debe as valor"
    sql = sql & " FROM GNCOMPROBANTE G"
    sql = sql & " inner join gntrans gnt "
    sql = sql & " inner join gnsucursal gns "
    sql = sql & " on gnt.idsucursal=gns.idsucursal "
    sql = sql & " on g.codtrans=gnt.codtrans "
    sql = sql & " inner join pcprovcli pc on  g.idclienteref=pc.idprovcli"
    sql = sql & " INNER JOIN PCKARDEX P"
    sql = sql & " inner join tsformacobropago tsf on"
    sql = sql & " p.IdForma = tsf.IdForma"
    sql = sql & " ON G.TRANSID=P.TRANSID"
    sql = sql & " Where g.Estado <> 3 and g.Estado <> 0"
    sql = sql & " AND CODsucursal='" & Me.GNTrans.CodSucursal & "'"
    sql = sql & " and CodForma not in (" & Me.GNTrans.TransDespuesDevolucion & ")"
    sql = sql & " and CodForma not in (" & Me.GNTrans.CodTransHijoCI & ")"
    sql = sql & " and CodForma not in (" & Me.GNTrans.CodTransHijoRUC & ")"
    If GNTrans.TSUtilizaFechaGrabado Then
        sql = sql & " AND (g.FechaGrabado between '" & Me.FechaTrans & " 00:00:00' AND '" & Me.FechaTrans & " 23:59:59' ) "
    Else
        sql = sql & " and g.FechaTrans BETWEEN " & FechaYMD(fecha, gobjMain.TipoDB) & " AND " & FechaYMD(fecha, gobjMain.TipoDB) & "  "
    End If
    sql = sql & " and debe>0 AND IDASIGNADO=0"
    sql = sql & " and afectasaldopc=1"
    
    sql = sql & " AND p.idtarjeta=0 and modulo='IV' "
    If Me.EsNuevo Then
        sql = sql & " and g.transid not in( select IdTransRef from tsdetallevcredito tsd inner join gncomprobante g on tsd.transid=g.transid where g.estado<>3)"
    End If
    sql = sql & " order by numtrans "
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaVentasCreditoxSucursal = rs
    Set rs = Nothing
End Function

Public Function RecuperaVentasCobroxSucursal() As Variant
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean

    
'Recupera los registros de TSDetalleCheque
    sql = "SELECT distinct "
    sql = sql & " G.TRANSID, G.CodTrans + ' ' + CONVERT(varchar, NumTrans)    AS Trans,    pc.nombre, p.haber as valor, p.numletra"
    sql = sql & " FROM GNCOMPROBANTE G "
    sql = sql & " inner join gntrans gnt "
    sql = sql & " inner join gnsucursal gns "
    sql = sql & " on gnt.idsucursal=gns.idsucursal "
    sql = sql & " on g.codtrans=gnt.codtrans "

    sql = sql & " inner join pcprovcli pc on  g.idclienteref=pc.idprovcli"
    sql = sql & " INNER JOIN PCKARDEX P"
    sql = sql & " inner join tsformacobropago tsf on p.idforma=tsf.idforma"
    sql = sql & " ON G.TRANSID=P.TRANSID"
    sql = sql & " inner join tskardex tsk INNER JOIN TSTIPODOCBANCO TST ON TSK.IDTIPODOC=TST.IDTIPODOC on p.transid=tsk.transid"
    sql = sql & " Where G.ESTADO<>3     "
    If GNTrans.TSUtilizaFechaGrabado Then
        sql = sql & " AND (g.FechaGrabado between '" & Me.FechaTrans & " 00:00:00' AND '" & Me.FechaTrans & " 23:59:59' ) "
    Else
        sql = sql & " AND FECHATRANS BETWEEN '" & Me.FechaTrans & "' AND '" & Me.FechaTrans & "'"
    End If
    sql = sql & " AND CODsucursal='" & Me.GNTrans.CodSucursal & "'"
    sql = sql & " and gnt.modulo<>'iv'"
    sql = sql & " and gnt.codpantalla<>'TSIEE'"
    sql = sql & " and afectasaldopc=1"
    sql = sql & " and p.haber>0"
    sql = sql & " and AnexoCodTipoComp<>7  and (tsT.CODTIPODOC='EF-I' or tsT.CODTIPODOC='EFEC')"
    sql = sql & " "
    If Me.EsNuevo Then
        sql = sql & " and g.transid not in( select IdTransRef from TSDetalleIngreso tsd inner join gncomprobante g on tsd.transid=g.transid where g.estado<>3)"
    End If

    
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    
    Set RecuperaVentasCobroxSucursal = rs
    Set rs = Nothing

End Function

Public Function RecuperaVentasTarjetaxSucursal1(ByVal CodTarjeta As String) As Variant
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
    'Recupera los registros de TSDetalleCheque
    sql = "SELECT"
    sql = sql & " ivt.codtarjeta , NumCheque, p.TitularCta,  "
    sql = sql & " p.Debe As Total, G.TRANSID "
    sql = sql & " FROM GNCOMPROBANTE G"
    sql = sql & " inner join gntrans gnt "
    sql = sql & " inner join gnsucursal gns "
    sql = sql & " on gnt.idsucursal=gns.idsucursal "
    sql = sql & " on g.codtrans=gnt.codtrans "
    sql = sql & " INNER JOIN PCKARDEX P"
    sql = sql & " INNER JOIN ivtarjeta ivt "
    sql = sql & " ON p.idtarjeta=ivt.idtarjeta"
    sql = sql & " ON G.TRANSID=P.TRANSID"
    sql = sql & " Where"
    sql = sql & " G.ESTADO<>3"
    If GNTrans.TSUtilizaFechaGrabado Then
        sql = sql & " AND (g.FechaGrabado between '" & Me.FechaTrans & " 00:00:00' AND '" & Me.FechaTrans & " 23:59:59' ) "
    Else
        sql = sql & " AND FECHATRANS BETWEEN '" & Me.FechaTrans & "' AND '" & Me.FechaTrans & "'"
    End If
    sql = sql & " AND CODsucursal='" & Me.GNTrans.CodSucursal & "'"
    sql = sql & " AND p.idtarjeta<>0"
    sql = sql & " AND ivt.codtarjeta = '" & CodTarjeta & "'"
    If Me.EsNuevo Then
        sql = sql & " and g.transid not in( select IdTransRef from TSDetalleTarjeta tsd inner join gncomprobante g on tsd.transid=g.transid where g.estado<>3)"
    End If
    sql = sql & " order by ivt.codtarjeta "
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaVentasTarjetaxSucursal1 = rs
    Set rs = Nothing
End Function

Public Function RecuperaVentasChequesPosfechadosxSucursal(CodForma As String) As Variant
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
    
    sql = "SELECT"
    sql = sql & " ivb.codBanco , NumCheque, p.TitularCta,  "
    sql = sql & " p.Debe As Total, G.TRANSID "
    sql = sql & " FROM GNCOMPROBANTE G "
    sql = sql & " inner join gntrans gt "
    sql = sql & " inner join gnsucursal gns "
    sql = sql & " on gt.idsucursal=gns.idsucursal "
    sql = sql & " on g.codtrans=gt.codtrans"
    'sql = sql & " INNER JOIN PCKARDEX P"
    If mProps.objEmpresa.GNOpcion.BandCHP Then
        sql = sql & " INNER JOIN PCKARDEX P"
    Else
        sql = sql & " INNER JOIN PCKARDEXCHP P"
    End If
    
    sql = sql & " inner join tsformacobropago tsf on p.idforma=tsf.idforma"
    sql = sql & " INNER JOIN ivbanco ivb "
    sql = sql & " ON p.idBanco=ivb.idBanco"
    sql = sql & " ON G.TRANSID=P.TRANSID"
    sql = sql & " Where"
    sql = sql & " G.ESTADO<>3"
    If GNTrans.TSUtilizaFechaGrabado Then
        sql = sql & " AND (g.FechaGrabado between '" & Me.FechaTrans & " 00:00:00' AND '" & Me.FechaTrans & " 23:59:59' ) "
    Else
        sql = sql & " AND FECHATRANS BETWEEN '" & Me.FechaTrans & "' AND '" & Me.FechaTrans & "'"
    End If
    sql = sql & " AND CODsucursal='" & Me.GNTrans.CodSucursal & "'"
    sql = sql & " AND idtarjeta=0"
    sql = sql & " and afectasaldopc=1"
    sql = sql & " and tsf.codforma=" & CodForma
    If Me.EsNuevo Then
        sql = sql & " and g.transid not in( select IdTransRef from TSDetalleCheque tsd inner join gncomprobante g on tsd.transid=g.transid where g.estado<>3)"
    End If
    sql = sql & " order by ivb.codBanco "


    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaVentasChequesPosfechadosxSucursal = rs
    Set rs = Nothing
End Function


Public Function RecuperaVentasChequesPosfechadosxUsuario(CodForma As String) As Variant
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean

    
    'Recupera los registros de TSDetalleCheque
    sql = "SELECT"
    sql = sql & " ivb.codBanco , NumCheque, p.TitularCta,  "
    sql = sql & " p.Debe As Total, G.TRANSID "
    sql = sql & " FROM GNCOMPROBANTE G"
    sql = sql & " inner join gntrans gt on g.codtrans=gt.codtrans"
    'sql = sql & " INNER JOIN PCKARDEX P"
    If mProps.objEmpresa.GNOpcion.BandCHP Then
        sql = sql & " INNER JOIN PCKARDEX P"
    Else
        sql = sql & " INNER JOIN PCKARDEXCHP P"
    End If
    
    sql = sql & " inner join tsformacobropago tsf on p.idforma=tsf.idforma"
    sql = sql & " INNER JOIN ivbanco ivb "
    sql = sql & " ON p.idBanco=ivb.idBanco"
    sql = sql & " ON G.TRANSID=P.TRANSID"
    sql = sql & " Where"
    sql = sql & " G.ESTADO<>3"
    If GNTrans.TSUtilizaFechaGrabado Then
        sql = sql & " AND (g.FechaGrabado between '" & Me.FechaTrans & " 00:00:00' AND '" & Me.FechaTrans & " 23:59:59' ) "
    Else
        sql = sql & " AND FECHATRANS BETWEEN '" & Me.FechaTrans & "' AND '" & Me.FechaTrans & "'"
    End If
    sql = sql & " AND CODUSUARIO='" & Me.codUsuario & "'"
    sql = sql & " AND idtarjeta=0"
    sql = sql & " and afectasaldopc=1"
    sql = sql & " and tsf.codforma=" & CodForma
    If Me.EsNuevo Then
        sql = sql & " and g.transid not in( select IdTransRef from TSDetalleCheque tsd inner join gncomprobante g on tsd.transid=g.transid where g.estado<>3)"
    End If
    sql = sql & " union all "
    sql = sql & " SELECT"
    sql = sql & " ivb.codBanco , NumCheque, p.TitularCta,  "
    sql = sql & " p.Debe As Total, G.TRANSID "
    sql = sql & " FROM GNCOMPROBANTE G"
    sql = sql & " inner join gntrans gt on g.codtrans=gt.codtrans"
    sql = sql & " INNER JOIN PCKARDEXchp P"
    sql = sql & " inner join tsformacobropago tsf on p.idforma=tsf.idforma"
    sql = sql & " INNER JOIN ivbanco ivb "
    sql = sql & " ON p.idBanco=ivb.idBanco"
    sql = sql & " ON G.TRANSID=P.TRANSID"
    sql = sql & " Where"
    sql = sql & " G.ESTADO<>3"
    sql = sql & " AND FECHATRANS BETWEEN '" & Me.FechaTrans & "' AND '" & Me.FechaTrans & "'"
    sql = sql & " AND CODUSUARIO='" & Me.codUsuario & "'"
    sql = sql & " AND idtarjeta=0"
    sql = sql & " and afectasaldopc=1"
    sql = sql & " and tsf.codforma=" & CodForma
    If Me.EsNuevo Then
        sql = sql & " and g.transid not in( select IdTransRef from TSDetalleCheque tsd inner join gncomprobante g on tsd.transid=g.transid where g.estado<>3)"
    End If
    
    
    sql = sql & " order by ivb.codBanco "

    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaVentasChequesPosfechadosxUsuario = rs
    Set rs = Nothing
End Function


'--------------- Manejo de coleccion de TSDetalleCheque
Public Function AddTSDetalleChequePosf() As Long
    Dim nuevo As TSDetalleChequePosf
    
    'Cuando SoloVer está establecido a True, genera error
    If mcolTSDetalleChequePosf Is Nothing Then RecuperaTSDetalleChequePosf
    
    Set nuevo = New TSDetalleChequePosf
    Set nuevo.GNComprobante = Me
   
    mcolTSDetalleChequePosf.Add nuevo
    AddTSDetalleChequePosf = mcolTSDetalleChequePosf.Count    'Devuelve el indice de nuevo elemento
    Set nuevo = Nothing
    mbooModificado = True
End Function

Public Sub RemoveTSDetalleChequePosf(ByVal ix As Long, Optional obj As TSDetalleChequePosf)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemoveTSDetalleChequePosf", MSGERR_SOLOVER
    If mcolTSDetalleChequePosf Is Nothing Then RecuperaTSDetalleChequePosf
    
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolTSDetalleChequePosf.Count
            If mcolTSDetalleChequePosf.item(ix) Is obj Then
                mcolTSDetalleChequePosf.Remove ix
                Exit For
            End If
        Next ix
    Else
        mcolTSDetalleChequePosf.Remove ix
    End If
    
    mbooModificado = True
End Sub

'Elimina todos los detalles de TSDetalleChequePosf
Public Sub BorrarTSDetalleChequePosf()
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BorrarTSDetalleChequePosf", MSGERR_SOLOVER
    If mcolTSDetalleChequePosf Is Nothing Then Set mcolTSDetalleChequePosf = New Collection
    
    With mcolTSDetalleChequePosf
        Do While .Count > 0
            .Remove .Count
        Loop
    End With
    mbooModificado = True
End Sub

Public Property Get CountTSDetalleChequePosf() As Long
    If mcolTSDetalleChequePosf Is Nothing Then RecuperaTSDetalleChequePosf
    CountTSDetalleChequePosf = mcolTSDetalleChequePosf.Count
End Property

Public Property Get TSDetalleChequePosf(ix As Long) As TSDetalleChequePosf
    If mcolTSDetalleChequePosf Is Nothing Then RecuperaTSDetalleChequePosf
    Set TSDetalleChequePosf = mcolTSDetalleChequePosf.item(ix)
End Property


Private Sub RecuperaTSDetalleChequePosf()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean

    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolTSDetalleChequePosf Is Nothing Then Set mcolTSDetalleChequePosf = New Collection
    
    'Recupera los registros de TSDetalleChequePosf
    sql = "SELECT tskc.*, ivb.codbanco " & _
          "FROM TSDetalleChequePosf tskc INNER JOIN IvBanco ivb on tskc.idBanco = ivb.idBanco" & _
                " "
    sql = sql & "WHERE TransId=" & mProps.transid & " ORDER BY Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddTSDetalleChequePosf
                TSDetalleChequePosf(i).Recuperar rs
            End If
            .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub


Public Function RecuperaVentasChequesxUsuarioNew(CodForma As String) As Variant
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean

    
    'Recupera los registros de TSDetalleCheque
    sql = "SELECT"
    sql = sql & " ivb.codBanco , NumCheque, p.TitularCta,  "
    sql = sql & " p.Debe As Total, G.TRANSID "
    sql = sql & " FROM GNCOMPROBANTE G"
    sql = sql & " inner join gntrans gt on g.codtrans=gt.codtrans"
    sql = sql & " INNER JOIN PCKARDEX P"
    sql = sql & " inner join tsformacobropago tsf on p.idforma=tsf.idforma"
    sql = sql & " INNER JOIN ivbanco ivb "
    sql = sql & " ON p.idBanco=ivb.idBanco"
    sql = sql & " ON G.TRANSID=P.TRANSID"
    sql = sql & " Where"
    sql = sql & " G.ESTADO<>3"
    If GNTrans.TSUtilizaFechaGrabado Then
        sql = sql & " AND (g.FechaGrabado between '" & Me.FechaTrans & " 00:00:00' AND '" & Me.FechaTrans & " 23:59:59' ) "
    Else
        sql = sql & " AND FECHATRANS BETWEEN '" & Me.FechaTrans & "' AND '" & Me.FechaTrans & "'"
    End If
    sql = sql & " AND CODUSUARIO='" & Me.codUsuario & "'"
    sql = sql & " AND idtarjeta=0"
    sql = sql & " and afectasaldopc=1"
    sql = sql & " and tsf.codforma=" & CodForma
    If Me.EsNuevo Then
        sql = sql & " and g.transid not in( select IdTransRef from TSDetalleCheque tsd inner join gncomprobante g on tsd.transid=g.transid where g.estado<>3)"
    End If
    sql = sql & " order by ivb.codBanco "

    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaVentasChequesxUsuarioNew = rs
    Set rs = Nothing
End Function

Public Function RecuperaVentasChequesxSucursalNew(CodForma As String) As Variant
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
    
    sql = "SELECT"
    sql = sql & " ivb.codBanco , NumCheque, p.TitularCta,  "
    sql = sql & " p.Debe As Total, G.TRANSID "
    sql = sql & " FROM GNCOMPROBANTE G "
    sql = sql & " inner join gntrans gt "
    sql = sql & " inner join gnsucursal gns "
    sql = sql & " on gt.idsucursal=gns.idsucursal "
    sql = sql & " on g.codtrans=gt.codtrans"
    sql = sql & " INNER JOIN PCKARDEX P"
    sql = sql & " inner join tsformacobropago tsf on p.idforma=tsf.idforma"
    sql = sql & " INNER JOIN ivbanco ivb "
    sql = sql & " ON p.idBanco=ivb.idBanco"
    sql = sql & " ON G.TRANSID=P.TRANSID"
    sql = sql & " Where"
    sql = sql & " G.ESTADO<>3"
    If GNTrans.TSUtilizaFechaGrabado Then
        sql = sql & " AND (g.FechaGrabado between '" & Me.FechaTrans & " 00:00:00' AND '" & Me.FechaTrans & " 23:59:59' ) "
    Else
        sql = sql & " AND FECHATRANS BETWEEN '" & Me.FechaTrans & "' AND '" & Me.FechaTrans & "'"
    End If
    sql = sql & " AND CODsucursal='" & Me.GNTrans.CodSucursal & "'"
    sql = sql & " AND idtarjeta=0"
    sql = sql & " and afectasaldopc=1"
    sql = sql & " and tsf.codforma=" & CodForma
    If Me.EsNuevo Then
        sql = sql & " and g.transid not in( select IdTransRef from TSDetalleCheque tsd inner join gncomprobante g on tsd.transid=g.transid where g.estado<>3)"
    End If
    sql = sql & " order by ivb.codBanco "

    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaVentasChequesxSucursalNew = rs
    Set rs = Nothing
End Function

Public Function RecuperaPagosxSucursal(ByVal Trans As String, fecha As Date) As Variant
    Dim sql As String, rs As Recordset
    sql = " select"
    sql = sql & " 0 as numlim, G.TRANSID, G.CodTrans + ' ' + CONVERT(varchar, NumTrans)    AS Trans,"
    sql = sql & " g.descripcion, pc.nombre, debe as valor"
    sql = sql & " From"
    sql = sql & " GNComprobante g"
    sql = sql & " inner join gntrans gt "
    sql = sql & " inner join gnsucursal gns "
    sql = sql & " on gt.idsucursal=gns.idsucursal "
    sql = sql & " on g.codtrans=gt.codtrans"
    sql = sql & " inner join pcprovcli pc"
    sql = sql & " on ( g.idclienteref=pc.idprovcli or g.idproveedorref=pc.idprovcli )"
    sql = sql & " inner join pckardex pck"
    sql = sql & " on g.transid=pck.transid"
    sql = sql & " Where g.Estado <> 3 "
    sql = sql & " AND CODsucursal='" & Me.GNTrans.CodSucursal & "'"
    sql = sql & " and g.codtrans in (" & Trans & ")"
    sql = sql & " and g.FechaTrans BETWEEN " & FechaYMD(fecha, gobjMain.TipoDB) & " AND " & FechaYMD(fecha, gobjMain.TipoDB) & "  "
    sql = sql & " and debe>0"
    sql = sql & " and g.transid not in( select IdTransRef from tsdetalleegreso tsd inner join gncomprobante g on tsd.transid=g.transid where g.estado<>3)"
    
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    
    Set RecuperaPagosxSucursal = rs
    Set rs = Nothing
End Function

Public Function IVKardexFinanciamientoTotalFilaAnteriorAnual(ByVal Valor As Currency, ByVal Tasa As Currency) As Currency
    Dim t As Currency, i As Long, TasaTotal As Currency, porInt As Currency
    Dim v As Integer
    Dim NumDecimales As Integer
        If Len(Me.Empresa.GNOpcion.ObtenerValor("NumDecimalesCuotas")) > 0 Then
        NumDecimales = Me.Empresa.GNOpcion.ObtenerValor("NumDecimalesCuotas")
    Else
        NumDecimales = 2
    End If
    porInt = Tasa / 12 / 100
    v = Me.NumeroPagos
    t = Valor
    If v > 0 Then
        TasaTotal = t * (porInt / (1 - (1 + porInt) ^ -v))
    Else
        TasaTotal = 0
    End If
    If Abs(t) < (Me.ValorEntrada + Me.ValorSegundaEntrada) Then
        t = 0
    Else
        t = TasaTotal
    End If
    IVKardexFinanciamientoTotalFilaAnteriorAnual = Abs(Round(t, NumDecimales))         '*** MAKOTO 29/ene/01 Mod.
End Function
Public Property Let TasaAnual(ByVal value As Currency)
    mProps.TasaAnual = value
    mbooModificado = True
End Property
Public Property Get TasaAnual() As Currency
    TasaAnual = mProps.TasaAnual
End Property

Private Function GeneraAsientoPCPagoNetoRolH( _
                    ) As colAsientoTemp
    Dim i As Long, v As Currency, k As PCKardex
    Dim col As colAsientoTemp, Doc As PCDocAsignado
    Set col = New colAsientoTemp
    For i = 1 To CountPCKardex
        Set k = PCKardex(i)
            If k.auxIdCuentaNetoRol <> 0 Then     'AUC asigna cuentas SOLO DECIMO TERCERO
                v = k.Haber
                'Cuando tiene documento asignado,
                ' convierte en valor correspondiente a la cotizacion del doc. asignado
                ' Esto sirve para autocalcular diferencial cambiario en asiento contable
                If k.IdAsignado <> 0 Then
                    '*** MAKOTO 08/mar/01 Agregado
                    'Si es que el prov/cli no tiene asignado una cuenta, genera error
                    If (k.auxIdCuentaNetoRol = 0) Then
                        NoTieneCuentaAsignadoRol k.idElemento
                    End If
                    v = v * Me.Cotizacion("")           'Convierte en moneda nacional
                    Set Doc = k.RecuperaPCDocAsignado   'Recupera el documento asignado
                    If Not (Doc Is Nothing) Then
                        v = v / Me.Cotizacion(Doc.CodMoneda)    'Convierte en moneda original
                        v = v * Doc.Cotizacion              'Convierte en moneda nacional a cotizacion original
                    End If
                    v = v / Me.Cotizacion("")       'Convierte en moneda ex.
                    col.Add k.auxIdCuentaNetoRol, v
                End If
        End If
    Next i
    Set GeneraAsientoPCPagoNetoRolH = col
    Set k = Nothing
    Set col = Nothing
    Set Doc = Nothing
End Function
'AUC TODAVIA NO ESTOY USANDO VER SI PUEDO USAR SINO ELIMINAR
'Private Function GeneraAsientoPCCobroCap( _
'                    ByVal BandPrincipal As Boolean) As colAsientoTemp
'    Dim i As Long, v As Currency, k As PCKardex
'    Dim Col As colAsientoTemp, Doc As PCDocAsignado
'    Dim FormaCobroInt As String
'    Set Col = New colAsientoTemp
'
'    If Len(Me.Empresa.GNOpcion.ObtenerValor("FormaCobroCuotaInt")) > 0 Then
'        FormaCobroInt = Me.Empresa.GNOpcion.ObtenerValor("FormaCobroCuotaInt")
'    Else
'        MsgBox "No Tiene configurado forma de cobro para interes"
'        Exit Function
'    End If
'
'    For i = 1 To CountPCKardex
'        Set k = PCKardex(i)
'        If PCKardex(i).CodForma <> FormaCobroInt Then
'            v = k.Haber
'            ' Cuando tiene documento asignado,
'            ' convierte en valor correspondiente a la cotizacion del doc. asignado
'            ' Esto sirve para autocalcular diferencial cambiario en asiento contable
'            If k.IdAsignado <> 0 Then
'                'Si es que el prov/cli no tiene asignado una cuenta, genera error
'                If k.auxIdCuenta3 = 0 Then
'                    'NoTieneCuentaAsignado False, "Cuenta " & IIf(BandPrincipal, "1", "2"), k.CodForma
'                    Err.Raise ERR_NOHAYCODIGO, "GNComprobante.GeneraAsiento", k.CodForma & " No tiene asignado una cuenta diferida"
'                End If
'                v = v * Me.Cotizacion("")       'Convierte en moneda nacional
'                Set Doc = k.RecuperaPCDocAsignado   'Recupera el documento asignado
'                If Not (Doc Is Nothing) Then
'                    v = v / Me.Cotizacion(Doc.CodMoneda)    'Convierte en moneda original
'                    v = v * Doc.Cotizacion              'Convierte en moneda nacional a cotizacion original
'                End If
'                v = v / Me.Cotizacion("")       'Convierte en moneda ex.
''                If BandPrincipal Then
''                    Col.Add k.auxIdCuenta, v
''                Else
'                    Col.Add k.auxIdCuenta3, v
'                'End If
'            End If
'        End If
'    Next i
'    Set GeneraAsientoPCCobroCap = Col
'    Set k = Nothing
'    Set Col = Nothing
'    Set Doc = Nothing
'End Function

Private Function GeneraAsientoPCPagarInt( _
                    ByVal BandPrincipal As Boolean) As colAsientoTemp
    Dim i As Long, v As Currency, k As PCKardex
    Dim col As colAsientoTemp, Doc As PCDocAsignado
    Dim FormaCobroInt As String
    Set col = New colAsientoTemp
    
    If Len(Me.Empresa.GNOpcion.ObtenerValor("FormaCobroCuotaInt")) > 0 Then
        FormaCobroInt = Me.Empresa.GNOpcion.ObtenerValor("FormaCobroCuotaInt")
    Else
        MsgBox "No Tiene configurado forma de cobro para interes"
        Exit Function
    End If
    
    For i = 1 To CountPCKardex
        Set k = PCKardex(i)
        If PCKardex(i).CodForma = FormaCobroInt Then
            v = k.Haber
            ' Cuando tiene documento asignado,
            ' convierte en valor correspondiente a la cotizacion del doc. asignado
            ' Esto sirve para autocalcular diferencial cambiario en asiento contable
            If k.IdAsignado <> 0 Then
                'Si es que el prov/cli no tiene asignado una cuenta, genera error
                If k.auxIdCuenta4 = 0 Then
                    'NoTieneCuentaAsignado False, "Cuenta " & IIf(BandPrincipal, "1", "2"), k.CodForma
                    Err.Raise ERR_NOHAYCODIGO, "GNComprobante.GeneraAsiento", k.CodForma & " No tiene asignado una cuenta diferida"
                End If
                v = v * Me.Cotizacion("")       'Convierte en moneda nacional
                Set Doc = k.RecuperaPCDocAsignado   'Recupera el documento asignado
                If Not (Doc Is Nothing) Then
                    v = v / Me.Cotizacion(Doc.CodMoneda)    'Convierte en moneda original
                    v = v * Doc.Cotizacion              'Convierte en moneda nacional a cotizacion original
                End If
                v = v / Me.Cotizacion("")       'Convierte en moneda ex.
'                If BandPrincipal Then
'                    Col.Add k.auxIdCuenta, v
'                Else
                    col.Add k.auxIdCuenta4, v
                'End If
            End If
        End If
    Next i
    Set GeneraAsientoPCPagarInt = col
    Set k = Nothing
    Set col = Nothing
    Set Doc = Nothing
End Function


Private Function GeneraAsientoPCCobroInt( _
                    ByVal BandPrincipal As Boolean) As colAsientoTemp
    Dim i As Long, v As Currency, k As PCKardex
    Dim col As colAsientoTemp, Doc As PCDocAsignado
    Dim FormaCobroInt As String
    Set col = New colAsientoTemp
    
    If Len(Me.Empresa.GNOpcion.ObtenerValor("FormaCobroCuotaInt")) > 0 Then
        FormaCobroInt = Me.Empresa.GNOpcion.ObtenerValor("FormaCobroCuotaInt")
    Else
        MsgBox "No Tiene configurado forma de cobro para interes"
        Exit Function
    End If
    
    For i = 1 To CountPCKardex
        Set k = PCKardex(i)
        If PCKardex(i).CodForma = FormaCobroInt Then
            v = k.Haber
            ' Cuando tiene documento asignado,
            ' convierte en valor correspondiente a la cotizacion del doc. asignado
            ' Esto sirve para autocalcular diferencial cambiario en asiento contable
            If k.IdAsignado <> 0 Then
                'Si es que el prov/cli no tiene asignado una cuenta, genera error
                If k.auxIdCuenta3 = 0 Then
                    'NoTieneCuentaAsignado False, "Cuenta " & IIf(BandPrincipal, "1", "2"), k.CodForma
                    Err.Raise ERR_NOHAYCODIGO, "GNComprobante.GeneraAsiento", k.CodForma & " No tiene asignado una cuenta diferida"
                End If
                v = v * Me.Cotizacion("")       'Convierte en moneda nacional
                Set Doc = k.RecuperaPCDocAsignado   'Recupera el documento asignado
                If Not (Doc Is Nothing) Then
                    v = v / Me.Cotizacion(Doc.CodMoneda)    'Convierte en moneda original
                    v = v * Doc.Cotizacion              'Convierte en moneda nacional a cotizacion original
                End If
                v = v / Me.Cotizacion("")       'Convierte en moneda ex.
'                If BandPrincipal Then
'                    Col.Add k.auxIdCuenta, v
'                Else
                    col.Add k.auxIdCuenta3, v
                'End If
            End If
        End If
    Next i
    Set GeneraAsientoPCCobroInt = col
    Set k = Nothing
    Set col = Nothing
    Set Doc = Nothing
End Function

Public Property Get CountGnCall() As Long
'    If mcolGNCall Is Nothing Then RecuperaGNCall
'    CountGnCall = mcolGNCall.Count
End Property
Public Property Get GNCall(ix As Long) As GNCall
'    If mcolGNCall Is Nothing Then RecuperaGNCall
'    Set GNCall = mcolGNCall.item(ix)
End Property

Private Sub RecuperaGNCall()
'    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
'    mod_antes = mbooModificado      'Guarda el estado de Modificado
'    If mcolGNCall Is Nothing Then Set mcolGNCall = New Collection
'    'Recupera los registros de TSKardexRet
'    sql = "SELECT * " & _
'          "FROM GNCall"
'    sql = sql & " WHERE TransId=" & mProps.transid & " ORDER BY Orden"
'    Set rs = mProps.objEmpresa.OpenRecordset(sql)
'   With rs
'        Do Until .EOF
'            If !Id > 0 Then                 'Para asegurar el Bug de ADO
'                i = AddGnCall
'           End If
'            .MoveNext
'        Loop
'        .Close
'    End With
'    Set rs = Nothing
'    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub

Public Function AddGnCall() As Long
'    Dim nuevo As GNCall
'    If mcolGNCall Is Nothing Then RecuperaGNCall
'    Set nuevo = New GNCall
'    Set nuevo.GNComprobante = Me
'    mcolGNCall.Add nuevo
'    AddGnCall = mcolGNCall.Count    'Devuelve el indice de nuevo elemento
'    Set nuevo = Nothing
'    mbooModificado = True
End Function

Public Sub RemoveGNCall(ByVal ix As Long, Optional obj As GNCall)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemoveGncall", MSGERR_SOLOVER
    If mcolGNCall Is Nothing Then RecuperaGNCall
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolGNCall.Count
            If mcolGNCall.item(ix) Is obj Then
                mcolGNCall.Remove ix
                Exit For
            End If
        Next ix
        Debug.Assert True   'No se puede dar
    Else
        mcolGNCall.Remove ix
    End If
    mbooModificado = True
End Sub

Public Function ListaGNCall() As Variant
    Dim sql As String, rs As Recordset
    Dim numMoneda As Integer
    Dim Tasa As Currency
    Dim diasGracia As Integer
    Dim NumDec As Integer
    
    If Len(Me.Empresa.GNOpcion.ObtenerValor("TasaAnual")) > 0 Then
        Tasa = Me.Empresa.GNOpcion.ObtenerValor("TasaAnual") / 100
    Else
        Tasa = 0
    End If
    
    If Len(Me.Empresa.GNOpcion.ObtenerValor("DiasGraciaMora")) > 0 Then
        diasGracia = Me.Empresa.GNOpcion.ObtenerValor("DiasGraciaMora")
    Else
        diasGracia = 0
    End If
    NumDec = IIf(Len(Me.Empresa.GNOpcion.ObtenerValor("NumDecimales")) > 0, Me.Empresa.GNOpcion.ObtenerValor("NumDecimales"), 2)
        
        numMoneda = Me.Empresa.GNOpcion.IndiceMoneda(mProps.CodMoneda)
        
        sql = "spConsGNCall " & numMoneda & ",'" & _
        mProps.CodMoneda & "','" & _
        mProps.FechaValidez & "','" & _
        Me.Empresa.GNOpcion.ObtenerValor("FornmaCobroOtrasCuotas") & "','" & _
        Me.Empresa.GNOpcion.ObtenerValor("FormaCobroCuotaInt") & "'," & _
        Tasa & "," & _
        diasGracia & "," & _
        NumDec & "," & _
        mProps.transid
        If Me.Empresa.GNOpcion.ObtenerValor("AplicaCalculoMensual") = "1" Then
            sql = sql & ",0 "
        Else
            sql = sql & ",1 "
        End If
        
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set ListaGNCall = rs
    Set rs = Nothing
End Function

Public Property Let CodTipoRolProv(ByVal value As String)
    Dim sql As String, rs As Recordset
    'Cuando cambia el valor
    If value <> mProps.CodTipoRolProv Then
        If Len(value) > 0 Then
            'Actualiza IdClienteRef también
            sql = "SELECT IdElemento FROM Elemento WHERE CodElemento='" & value & "'"
            Set rs = mProps.objEmpresa.OpenRecordset(sql)
            If rs.EOF Then
                Err.Raise ERR_NOHAYCODIGO, "GNComprobante.CodtiporolProv", MSGERR_NOHAYCODIGO
                Exit Property
            Else
                IdTipoRol = rs!idElemento
            End If
            rs.Close
        Else
            IdTipoRol = 0
        End If
        mProps.CodTipoRolProv = value
        SetModificado
    End If
    Set rs = Nothing
End Property
Public Property Get CodTipoRolProv() As String
    CodTipoRolProv = Trim$(mProps.CodTipoRolProv)
End Property

Public Property Let BandPrecioDist(ByVal value As Boolean)
        mProps.BandPrecioDist = value
        mbooModificado = True
End Property

Public Property Get BandPrecioDist() As Boolean
    BandPrecioDist = mProps.BandPrecioDist
End Property

Public Function RecuperaVentasChequesxTrans(CodForma As String) As Variant
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean

    
    'Recupera los registros de TSDetalleCheque
    sql = "SELECT"
    sql = sql & " ivb.codBanco , NumCheque, p.TitularCta,  "
    sql = sql & " p.Debe As Total, G.TRANSID "
    sql = sql & " FROM GNCOMPROBANTE G"
    sql = sql & " inner join gntrans gt on g.codtrans=gt.codtrans"
    sql = sql & " INNER JOIN PCKARDEX P"
    sql = sql & " inner join tsformacobropago tsf on p.idforma=tsf.idforma"
    sql = sql & " INNER JOIN ivbanco ivb "
    sql = sql & " ON p.idBanco=ivb.idBanco"
    sql = sql & " ON G.TRANSID=P.TRANSID"
    sql = sql & " Where"
    sql = sql & " G.ESTADO<>3"
    
    If GNTrans.TSUtilizaFechaGrabado Then
        sql = sql & " AND (g.FechaGrabado between '" & Me.FechaTrans & " 00:00:00' AND '" & Me.FechaTrans & " 23:59:59' ) "
    Else
        sql = sql & " AND (g.FechaTrans BETWEEN '" & Me.FechaTrans & "' AND '" & Me.FechaTrans & "') And"
        sql = sql & " (g.HoraTrans BETWEEN '" & Format(gobjMain.objCondicion.Hora1, "hh:mm:ss") & "' AND '" & Format(gobjMain.objCondicion.Hora2, "hh:mm:ss") & "') "
    End If
    
    'sql = sql & " (g.codTrans='" & gobjMain.objCondicion.CodTrans & "') "
    sql = sql & " and (g.codTrans='" & Me.GNTrans.TSTransCierre & "') "
    
    sql = sql & " AND idtarjeta=0"
    sql = sql & " and afectasaldopc=1"
    sql = sql & " and tsf.codforma=" & CodForma
    If Me.EsNuevo Then
        sql = sql & " and g.transid not in( select IdTransRef from TSDetalleCheque tsd inner join gncomprobante g on tsd.transid=g.transid where g.estado<>3)"
    End If
    sql = sql & " order by ivb.codBanco "

    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaVentasChequesxTrans = rs
    Set rs = Nothing
End Function

Public Function RecuperaVentasChequesPosfechadosxTrans(CodForma As String) As Variant
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean

    
    'Recupera los registros de TSDetalleCheque
    sql = "SELECT"
    sql = sql & " ivb.codBanco , NumCheque, p.TitularCta,  "
    sql = sql & " p.Debe As Total, G.TRANSID "
    sql = sql & " FROM GNCOMPROBANTE G"
    sql = sql & " inner join gntrans gt on g.codtrans=gt.codtrans"
'    sql = sql & " INNER JOIN PCKARDEX P"
    If mProps.objEmpresa.GNOpcion.BandCHP Then
        sql = sql & " INNER JOIN PCKARDEX P"
    Else
        sql = sql & " INNER JOIN PCKARDEXCHP P"
    End If
    
    sql = sql & " inner join tsformacobropago tsf on p.idforma=tsf.idforma"
    sql = sql & " INNER JOIN ivbanco ivb "
    sql = sql & " ON p.idBanco=ivb.idBanco"
    sql = sql & " ON G.TRANSID=P.TRANSID"
    sql = sql & " Where"
    sql = sql & " G.ESTADO<>3"
    'sql = sql & " AND FECHATRANS BETWEEN '" & Me.FechaTrans & "' AND '" & Me.FechaTrans & "'"
    'sql = sql & " AND CODUSUARIO='" & Me.CodUsuario & "'"

    If GNTrans.TSUtilizaFechaGrabado Then
        sql = sql & " AND (g.FechaGrabado between '" & Me.FechaTrans & " 00:00:00' AND '" & Me.FechaTrans & " 23:59:59' ) "
    Else
        sql = sql & " AND (g.FechaTrans BETWEEN '" & Me.FechaTrans & "' AND '" & Me.FechaTrans & "') And"
        sql = sql & " (g.HoraTrans BETWEEN '" & Format(gobjMain.objCondicion.Hora1, "hh:mm:ss") & "' AND '" & Format(gobjMain.objCondicion.Hora2, "hh:mm:ss") & "') And"
    End If
   ' sql = sql & " (g.codTrans='" & gobjMain.objCondicion.CodTrans & "') "
   sql = sql & " (g.codTrans='" & Me.GNTrans.TSTransCierre & "') "
    sql = sql & " AND idtarjeta=0"
    sql = sql & " and afectasaldopc=1"
    sql = sql & " and tsf.codforma=" & CodForma
    If Me.EsNuevo Then
        sql = sql & " and g.transid not in( select IdTransRef from TSDetalleCheque tsd inner join gncomprobante g on tsd.transid=g.transid where g.estado<>3)"
    End If
    sql = sql & " order by ivb.codBanco "

    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaVentasChequesPosfechadosxTrans = rs
    Set rs = Nothing
End Function

Public Function RecuperaVentasTarjetaxTrans(ByVal CodTarjeta As String) As Variant
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
    'Recupera los registros de TSDetalleCheque
    sql = "SELECT"
    sql = sql & " ivt.codtarjeta , NumCheque, p.TitularCta,  "
    sql = sql & " p.Debe As Total, G.TRANSID "
    sql = sql & " FROM GNCOMPROBANTE G"
    sql = sql & " INNER JOIN PCKARDEX P"
    sql = sql & " INNER JOIN ivtarjeta ivt "
    sql = sql & " ON p.idtarjeta=ivt.idtarjeta"
    sql = sql & " ON G.TRANSID=P.TRANSID"
    sql = sql & " Where"
    sql = sql & " G.ESTADO<>3"
    'sql = sql & " AND FECHATRANS BETWEEN '" & Me.FechaTrans & "' AND '" & Me.FechaTrans & "'"
    'sql = sql & " AND CODUSUARIO='" & Me.CodUsuario & "'"

    If GNTrans.TSUtilizaFechaGrabado Then
        sql = sql & " AND (g.FechaGrabado between '" & Me.FechaTrans & " 00:00:00' AND '" & Me.FechaTrans & " 23:59:59' ) "
    Else
        sql = sql & " AND (g.FechaTrans BETWEEN '" & Me.FechaTrans & "' AND '" & Me.FechaTrans & "') "
    End If
    sql = sql & " AND (g.FechaTrans BETWEEN '" & Me.FechaTrans & "' AND '" & Me.FechaTrans & "') And"
    sql = sql & " (g.HoraTrans BETWEEN '" & Format(gobjMain.objCondicion.Hora1, "hh:mm:ss") & "' AND '" & Format(gobjMain.objCondicion.Hora2, "hh:mm:ss") & "') And"
'    sql = sql & " (g.codTrans='" & gobjMain.objCondicion.CodTrans & "') "
    sql = sql & " (g.codTrans='" & Me.GNTrans.TSTransCierre & "') "
    
    sql = sql & " AND p.idtarjeta<>0"
    sql = sql & " AND ivt.codtarjeta = '" & CodTarjeta & "'"
    If Me.EsNuevo Then
        sql = sql & " and g.transid not in( select IdTransRef from TSDetalleTarjeta tsd inner join gncomprobante g on tsd.transid=g.transid where g.estado<>3)"
    End If
    sql = sql & " order by ivt.codtarjeta "
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaVentasTarjetaxTrans = rs
    Set rs = Nothing
End Function

Public Function RecuperaVentasCreditoxTrans(ByVal Trans As String, fecha As Date) As Variant
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean

    sql = "SELECT"
    sql = sql & " G.TRANSID, G.CodTrans + ' ' + CONVERT(varchar, NumTrans)    AS Trans,"
    sql = sql & " pc.nombre, debe as valor"
    sql = sql & " FROM GNCOMPROBANTE G"
    sql = sql & " inner join gntrans gnt on g.codtrans = gnt.codtrans"
    sql = sql & " inner join pcprovcli pc on  g.idclienteref=pc.idprovcli"
    sql = sql & " INNER JOIN PCKARDEX P"
    sql = sql & " inner join tsformacobropago tsf on"
    sql = sql & " p.IdForma = tsf.IdForma"
    sql = sql & " ON G.TRANSID=P.TRANSID"
    sql = sql & " Where g.Estado <> 3 and g.Estado <> 0"
    sql = sql & " and CodForma not in (" & Trans & ")"

    If GNTrans.TSUtilizaFechaGrabado Then
        sql = sql & " AND (g.FechaGrabado between '" & Me.FechaTrans & " 00:00:00' AND '" & Me.FechaTrans & " 23:59:59' ) "
    Else
        sql = sql & " AND (g.FechaTrans BETWEEN '" & Me.FechaTrans & "' AND '" & Me.FechaTrans & "') And"
        sql = sql & " (g.HoraTrans BETWEEN '" & Format(gobjMain.objCondicion.Hora1, "hh:mm:ss") & "' AND '" & Format(gobjMain.objCondicion.Hora2, "hh:mm:ss") & "') And"
    End If
    'sql = sql & " (g.codTrans='" & gobjMain.objCondicion.CodTrans & "') "
    sql = sql & " (g.codTrans='" & Me.GNTrans.TSTransCierre & "') "
    
    sql = sql & " and debe>0 AND IDASIGNADO=0"
    sql = sql & " and afectasaldopc=1"
    sql = sql & " AND p.idtarjeta=0 and modulo='IV' "
    If Me.EsNuevo Then
        sql = sql & " and g.transid not in( select IdTransRef from tsdetallevcredito tsd inner join gncomprobante g on tsd.transid=g.transid where g.estado<>3)"
    End If
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaVentasCreditoxTrans = rs
    Set rs = Nothing
End Function

Public Sub CargaColleccion(ByVal cad As String)
Dim v As Variant
Dim i As Long
v = Split(cad, ",")
If mcolTransIDs Is Nothing Then Set mcolTransIDs = New Collection
    For i = 0 To UBound(v)
        mcolTransIDs.Add item:=v(i)
    Next

End Sub

Public Function GeneraArchivoXMLComprobanteElectronicoFactura(ByVal EsNuevo As Boolean) As Boolean
    Dim cad As String, pc As PCProvCli, cc As GNCentroCosto, Signo As Integer, gns As GNSucursal
    Dim i As Long, item As IVInventario, Nombre As String, Ruta As String, importeTotal As String
    Dim file As String, numFile As Integer, cadena  As String, cadClave As String, totalsinimpuestos As Currency
    Dim ValorMod As Integer, TOTAL As Currency
    On Error GoTo ErrTrap

    Ruta = Me.Empresa.GNOpcion.ComprobantesGenerados
    If Len(Ruta) = 0 Then
        Ruta = "c:\"
    End If
    
    cadClave = ""
    cadClave = Format(DatePart("d", Date), "00") & Format(DatePart("m", Date), "00") & DatePart("yyyy", Date)
    cadClave = cadClave & "01"
    cadClave = cadClave & Me.Empresa.GNOpcion.RUC
'''    If Me.Empresa.GNOpcion.TipoAmbiente = "1" Then
'''        cadClave = cadClave & "1"
'''    Else
'''        cadClave = cadClave & "2"
'''    End If
'''    If Me.GNTrans.IVAmbientePruebaFE Then
'''        cadClave = cadClave & "1"
'''    Else
'''        cadClave = cadClave & "2"
'''    End If
    cadClave = cadClave & Me.TipoAmbiente
    
    cadClave = cadClave & Me.NumSerieEstaSRI
    cadClave = cadClave & Me.NumSeriePuntoSRI
    cadClave = cadClave & Right("000000000" + Trim(Str(Me.NumTrans)), 9)
    cadClave = cadClave & "00000000"
    cadClave = cadClave & "1"
    ValorMod = 2
    TOTAL = 0
    
    For i = 48 To 1 Step -1
        TOTAL = TOTAL + (Mid$(cadClave, i, 1) * ValorMod)
        ValorMod = ValorMod + 1
        If ValorMod > 7 Then ValorMod = 2
    Next i
    TOTAL = TOTAL Mod 11
    cadClave = cadClave & Trim$(Str(TOTAL))
    
    
    Select Case Me.Estado
    Case 0, 1, 2, 4
       If EsNuevo Then
            Nombre = cadClave & ".xml"
        End If
    End Select
    
    file = Ruta & "\" & Nombre



    If ExisteArchivo(file) Then
    End If
    numFile = FreeFile
    Open file For Output Access Write As #numFile

    cad = "<?xml version=" & """1.0""" & "" & " encoding=" & """UTF-8""" & " standalone=" & """yes""" & "?>"
    Print #numFile, cad
    cad = "<factura id=" & """comprobante""" & "" & " version=" & """1.0.0""" & ">"
    Print #numFile, cad
    cad = "    <infoTributaria>"
    Print #numFile, cad
    cad = "        <ambiente>1</ambiente>"
    Print #numFile, cad
    cad = "        <tipoEmision>2</tipoEmision>"
    Print #numFile, cad
    cad = "        <razonSocial>" & Me.Empresa.GNOpcion.RazonSocial & "</razonSocial>"
    Print #numFile, cad
    cad = "        <nombreComercial>" & Me.Empresa.GNOpcion.NombreEmpresa & "</nombreComercial>"
    Print #numFile, cad
    cad = "        <ruc>" & Me.Empresa.GNOpcion.RUC & "</ruc>"
    Print #numFile, cad
    cad = "        <claveAcceso>" & cadClave & "</claveAcceso>"
    Print #numFile, cad
    cad = "        <codDoc>01</codDoc>"
    Print #numFile, cad
    cad = "        <estab>" & Me.NumSerieEstaSRI & "</estab>"
    Print #numFile, cad
    cad = "        <ptoEmi>" & Me.NumSeriePuntoSRI & "</ptoEmi>"
    Print #numFile, cad
    cad = "        <secuencial>" & Right("000000000" + Trim(Str(Me.NumTrans)), 9) & "</secuencial>"
    Print #numFile, cad
    cad = "        <dirMatriz>" & Me.Empresa.GNOpcion.Direccion1 & "</dirMatriz>"
    Print #numFile, cad
    cad = "    </infoTributaria>"
    Print #numFile, cad

    cad = "    <infoFactura>"
    Print #numFile, cad
    cad = "        <fechaEmision>" & Format(Me.FechaTrans, "dd/mm/yyyy") & "</fechaEmision>"
    Print #numFile, cad
    Set gns = Me.Empresa.RecuperaGNSucursal(Me.GNTrans.CodSucursal)
    If Not gns Is Nothing Then
        cad = "        <dirEstablecimiento>" & gns.Direccion & "</dirEstablecimiento>"
        Print #numFile, cad
    End If
    If Me.Empresa.GNOpcion.TipoEmpresaSRI = "NC" Then
        cad = "        <obligadoContabilidad>NO</obligadoContabilidad>"
        Print #numFile, cad
    ElseIf Me.Empresa.GNOpcion.TipoEmpresaSRI = "CE" Then
        cad = "        <contribuyenteEspecial>" & Me.Empresa.GNOpcion.Resolucion & "</contribuyenteEspecial>"
        Print #numFile, cad
        cad = "        <obligadoContabilidad>SI</obligadoContabilidad>"
        Print #numFile, cad
    Else
        cad = "        <obligadoContabilidad>SI</obligadoContabilidad>"
        Print #numFile, cad
    End If
    
    Set pc = Me.Empresa.RecuperaPCProvCli(Me.CodClienteRef)
    If Not pc Is Nothing Then
        Select Case pc.TipoDocumento
            Case "1":            cad = "        <tipoIdentificacionComprador>04</tipoIdentificacionComprador>"
            Case "2":            cad = "        <tipoIdentificacionComprador>05</tipoIdentificacionComprador>"
            Case "6":            cad = "        <tipoIdentificacionComprador>06</tipoIdentificacionComprador>"
            Case "7":            cad = "        <tipoIdentificacionComprador>07</tipoIdentificacionComprador>"
        End Select
        
        Print #numFile, cad
        cad = "        <razonSocialComprador>" & pc.Nombre & "</razonSocialComprador>"
        Print #numFile, cad
        cad = "        <identificacionComprador>" & pc.RUC & "</identificacionComprador>"
        Print #numFile, cad
    End If
    totalsinimpuestos = 0
    For i = 1 To Me.CountIVKardex
        totalsinimpuestos = totalsinimpuestos + Me.IVKardex(i).PrecioRealTotal
    Next i
    totalsinimpuestos = Abs(totalsinimpuestos)
    cad = "        <totalSinImpuestos>" & Format(totalsinimpuestos, Me.FormatoMoneda) & "</totalSinImpuestos>"
    Print #numFile, cad
    cad = "        <totalDescuento>00.0</totalDescuento>"
    Print #numFile, cad
    cad = "        <totalConImpuestos>"
    Print #numFile, cad
    cad = "            <totalImpuesto>"
    Print #numFile, cad
    cad = "                <codigo>2</codigo>"
    Print #numFile, cad
    cad = "                <codigoPorcentaje>2</codigoPorcentaje>"
    Print #numFile, cad
    cad = "                <baseImponible>" & Format(totalsinimpuestos, Me.FormatoMoneda) & "</baseImponible>"
    Print #numFile, cad
    cad = "                <valor>" & Format(totalsinimpuestos * (Me.Empresa.GNOpcion.PorcentajeIVA / 100), Me.FormatoMoneda) & "</valor>"
    Print #numFile, cad
    cad = "            </totalImpuesto>"
    Print #numFile, cad
    cad = "        </totalConImpuestos>"
    Print #numFile, cad
    cad = "        <propina>" & Format(0, Me.FormatoMoneda) & "</propina>"
    Print #numFile, cad
    importeTotal = 0
    
    For i = 1 To Me.CountPCKardex
        importeTotal = importeTotal + Me.PCKardex(i).Haber
    Next i
    cad = "        <importeTotal>" & Format(importeTotal, Me.FormatoMoneda) & "</importeTotal>"
    Print #numFile, cad
    cad = "        <moneda>DOLAR</moneda>"
    Print #numFile, cad
    cad = "    </infoFactura>"
    Print #numFile, cad
                
    cad = "    <detalles>"
    Print #numFile, cad
    For i = 1 To Me.CountIVKardex
        cad = "        <detalle>"
        Print #numFile, cad
        Set item = Me.Empresa.RecuperaIVInventario(Me.IVKardex(i).CodInventario)
        If Not item Is Nothing Then
            cad = "            <codigoPrincipal>" & item.CodInventario & "</codigoPrincipal>"
            Print #numFile, cad
'            cad = "            <codigoAuxiliar>" & item.CodAlterno1 & "</codigoAuxiliar>"
'            Print #numFile, cad
            cad = "            <descripcion>" & item.Descripcion & "</descripcion>"
            Print #numFile, cad
            cad = "            <cantidad>" & Abs(Me.IVKardex(i).Cantidad) & "</cantidad>"
            Print #numFile, cad
            cad = "            <precioUnitario>" & (Me.IVKardex(i).PrecioTotal / Me.IVKardex(i).Cantidad) & "</precioUnitario>"
            Print #numFile, cad
            cad = "            <descuento>" & (Me.IVKardex(i).Descuento * 100) & "</descuento>"
            Print #numFile, cad
            cad = "            <precioTotalSinImpuesto>" & Abs(Me.IVKardex(i).PrecioRealTotal) & "</precioTotalSinImpuesto>"
            Print #numFile, cad
'            cad = "            <detallesAdicionales>"
'            Print #numFile, cad
'            cad = "            </detallesAdicionales>"
'            Print #numFile, cad
            cad = "            <impuestos>"
            Print #numFile, cad
            cad = "                <impuesto>"
            Print #numFile, cad
            cad = "                    <codigo>2</codigo>"
            Print #numFile, cad
            cad = "                    <codigoPorcentaje>2</codigoPorcentaje>"
            Print #numFile, cad
            cad = "                    <tarifa>" & Me.Empresa.GNOpcion.PorcentajeIVA & "</tarifa>"
            Print #numFile, cad
            cad = "                    <baseImponible>" & Format(Abs(Me.IVKardex(i).PrecioRealTotal), Me.FormatoMoneda) & "</baseImponible>"
            Print #numFile, cad
            cad = "                    <valor>" & Format(Abs(Me.IVKardex(i).PrecioRealTotal) * (Me.Empresa.GNOpcion.PorcentajeIVA / 100), Me.FormatoMoneda) & "</valor>"
            Print #numFile, cad
            cad = "                </impuesto>"
            Print #numFile, cad
            cad = "            </impuestos>"
            Print #numFile, cad
        End If
        cad = "    </detalle>"
        Print #numFile, cad
    Next i
    cad = "    </detalles>"
    Print #numFile, cad
    cad = "    <infoAdicional>"
    Print #numFile, cad
    cad = "    <campoAdicional nombre= " & """DirecciÃ³n""" & "" & ">" & pc.Direccion1 & "</campoAdicional>"
    Print #numFile, cad
    cad = "    <campoAdicional nombre= " & """TelÃ©fono""" & "" & ">" & pc.Telefono1 & "</campoAdicional>"
    Print #numFile, cad
    cad = "    <campoAdicional nombre= " & """Email""" & "" & ">" & pc.EMail & "</campoAdicional>"
    Print #numFile, cad
    cad = "    </infoAdicional>"
    Print #numFile, cad
    
    cad = "</factura>"
    Print #numFile, cad
    Set pc = Nothing
    Set item = Nothing
    Set gns = Nothing

Close numFile
        GeneraArchivoXMLComprobanteElectronicoFactura = True
    Exit Function
ErrTrap:

    Close #numFile
    DispErr
    Unload Me
    Exit Function
End Function


Friend Sub RecuperarxIdTrandfuente(Id As Long, Optional CodT As String, Optional NumT As Long)
    Dim sql As String, i As Long, ivkr As IVKardexRecargo
    Dim rs As Recordset
    'jeaa 09/05/2005 para igualar la hora con el servidor
    If Me.Empresa.GNOpcion.ObtenerValor("IgualarHora") = "1" Then
        mProps.objEmpresa.AjustaHoraServidor
    End If
    
    'Si no está especificado TransID, lo busca por CodTrans y NumTrans
    If Id = 0 Then
        sql = "SELECT TransID FROM GNComprobante WHERE CodTrans='" & _
                                CodT & "' and NumTrans=" & NumT
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
        If rs.RecordCount > 0 Then
            Id = rs!transid
        End If
        rs.Close
    End If

#If DAOLIB Then
    Dim qdef As DAO.QueryDef
    Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsGNComp")
    qdef.Parameters("tid").value = Id
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    sql = "spConsGNCompxidTRansfuente " & Id
    rs.Open sql, mProps.objEmpresa.Coneccion, adOpenStatic, adLockReadOnly
#End If
    
    'Recupera los datos de GNComprobante
    With rs
        mProps.transid = !transid
        mProps.CodTrans = !CodTrans
        mProps.NumTrans = !NumTrans
        mProps.CodAsiento = !CodAsiento
        mProps.FechaTrans = !FechaTrans
        If Not IsNull(!HoraTrans) Then
            mProps.HoraTrans = !HoraTrans           '*** MAKOTO 07/dic/00 Agregar
        Else
            mProps.HoraTrans = 0
        End If
        mProps.Descripcion = !Descripcion
        mProps.codUsuario = !codUsuario
        
        '***Agregado. 09/ago/2004. Angel
        If Not IsNull(!CodUsuarioModifica) Then mProps.CodUsuarioModifica = !CodUsuarioModifica
        
        If Not IsNull(!IdResponsable) Then mProps.IdResponsable = !IdResponsable
        If Not IsNull(!CodResponsable) Then mProps.CodResponsable = !CodResponsable
        If Not IsNull(!NumDocRef) Then mProps.NumDocRef = !NumDocRef
        mProps.Estado = !Estado
        If Not IsNull(!PosID) Then mProps.PosID = !PosID 'Preguntar para que sirve
        mProps.NumTransCierrePOS = !NumTransCierrePOS
        mProps.idCentro = !idCentro
        If Not IsNull(!IdTransFuente) Then mProps.IdTransFuente = !IdTransFuente
        If Not IsNull(!CodCentro) Then mProps.CodCentro = !CodCentro
        For i = 2 To 4
            mProps.Cotizacion(i) = .Fields("Cotizacion" & i)
        Next i
        mProps.CodMoneda = !CodMoneda
        
        If Me.GNTrans.Modulo = "CT" And !IdProveedorRef <> 0 Then
            If Not IsNull(!IdProveedorRef) Then mProps.IdEmpleadoRef = !IdProveedorRef
            If Not IsNull(!CodProveedorRef) Then mProps.CodEmpleadoRef = !CodProveedorRef
        Else
            If Not IsNull(!IdProveedorRef) Then mProps.IdProveedorRef = !IdProveedorRef
            If Not IsNull(!CodProveedorRef) Then mProps.CodProveedorRef = !CodProveedorRef
        End If
        If Not IsNull(!IdClienteRef) Then mProps.IdClienteRef = !IdClienteRef
        If Not IsNull(!CodClienteRef) Then mProps.CodClienteRef = !CodClienteRef
        If Not IsNull(!IdVendedor) Then mProps.IdVendedor = !IdVendedor
        If Not IsNull(!CodVendedor) Then mProps.CodVendedor = !CodVendedor
        
        '*** MAKOTO 05/feb/01 Agregado
        If Not IsNull(!Nombre) Then mProps.Nombre = !Nombre
        '**** agregado jeaa 04/10/04
        mProps.Impresion = !Impresion
        mProps.fechagrabado = !fechagrabado
        RecuperaInfConsFinal '******* jeaa 14-01-04 para separar la direccion telefono y ruc en la descipcion
        '**** agregado jeaa 25/04/2005
        If Not IsNull(!IdMotivo) Then mProps.IdMotivo = !IdMotivo
        If Not IsNull(!CodMotivo) Then mProps.CodMotivo = !CodMotivo
        If Not IsNull(!codMotivoDev) Then mProps.codMotivoDev = !codMotivoDev
        '**** agregado jeaa 06/02/2006
        If Not IsNull(!Comision) Then mProps.Comision = !Comision
        If Not IsNull(!FechaDevol) Then mProps.FechaDevol = !FechaDevol 'AUC 13/03/06
        '**** agregado jeaa 27/05/7007
        If Not IsNull(!ComisionCobrador) Then mProps.ComisionCobrador = !ComisionCobrador
        '******* agegado jeaa 16/07/2007
        If Not IsNull(!AutorizacionSRI) Then mProps.AutorizacionSRI = !AutorizacionSRI
        If Not IsNull(!FechaCaducidadSRI) Then mProps.FechaCaducidadSRI = !FechaCaducidadSRI
        
        
        If Not IsNull(!NumSerieEstaSRI) Then mProps.NumSerieEstaSRI = !NumSerieEstaSRI
        If Not IsNull(!NumSeriePuntoSRI) Then mProps.NumSeriePuntoSRI = !NumSeriePuntoSRI
        If Not IsNull(!FechaAutorizacionSRI) Then mProps.FechaAutorizacionSRI = !FechaAutorizacionSRI
        
        
        
         mProps.Estado1 = !Estado1 'auc 24/10/07
         mProps.Estado2 = !Estado2
        If Not IsNull(!NumDias) Then mProps.NumDias = !NumDias  'AUC PARA LOS ALQUILERES o numero de pagos
        If Not IsNull(!CodUsuarioAutoriza) Then mProps.CodUsuarioAutoriza = !CodUsuarioAutoriza    'jeaa 28/09/2008
        'If Not IsNull(!NumDias) Then mProps.NumDias = !NumDias  'AUC PARA LOS ALQUILERES
        If Not IsNull(!IdGaranteRef) Then mProps.IdGaranteRef = !IdGaranteRef
        If Not IsNull(!CodGaranteRef) Then mProps.CodGaranteRef = !CodGaranteRef
        
        If Not IsNull(!IdObra) Then mProps.IdObra = !IdObra
        If Not IsNull(!CodObra) Then mProps.CodObra = !CodObra
        If Not IsNull(!IdZona) Then mProps.IdZona = !IdZona
        If Not IsNull(!CodZona) Then mProps.CodZona = !CodZona
        
        If Not IsNull(!IdDescuento) Then mProps.IdDescuento = !IdDescuento
        If Not IsNull(!CodDescuento) Then mProps.CodDescuento = !CodDescuento
        
        If Not IsNull(!IDForma) Then mProps.IDForma = !IDForma
        If Not IsNull(!CodForma) Then mProps.CodForma = !CodForma
        mProps.BandCierre = !BandCierre     'AUC 08/12/06
        
        If Len(mProps.objEmpresa.GNOpcion.ObtenerValor("Presupuesto")) > 0 Then
            If mProps.objEmpresa.GNOpcion.ObtenerValor("Presupuesto") = "1" Then
                mProps.CodPRAsiento = !CodPRAsiento
            End If
        End If
        If Not IsNull(!PorcentajeIVA) Then mProps.PorcentIVA = !PorcentajeIVA
        If Not IsNull(!IdTipoRol) Then mProps.IdTipoRol = !IdTipoRol   'AUC
        If Not IsNull(!CodTipoRol) Then mProps.CodTipoRol = !CodTipoRol
        If Not IsNull(!CodTipoRolProv) Then mProps.CodTipoRolProv = !CodTipoRolProv
        If Not IsNull(!PCPorDesc) Then mProps.PCPorDesc = !PCPorDesc
        mProps.idCentroHijo = !idCentroHijo
        If Not IsNull(!CentroHijo) Then mProps.CodCentroHijo = !CentroHijo
        If Not IsNull(!BandFinalizado) Then mProps.BandFinalizado = !BandFinalizado
        
        .Close
    End With
    
    mProps.BandNoGrabaTransXML = True
    Set rs = Nothing
    If Me.GNTrans.Empresa.GNOpcion.ObtenerValor("PermiteControlAspectosAnexos") = "1" And _
    Me.GNTrans.IVVisibleAnexos Then RecuperarAnexos
    
    If Me.GNTrans.Empresa.GNOpcion.ObtenerValor("PermiteControlAspectosAnexos") = "1" And _
    Me.GNTrans.IVDatosExportacion Then RecuperarAnexosExportacion
    
    
    If Me.GNTrans.IVTipoTrans = "X" Then RecuperaIVKardexArancel
    
    
    RecuperarOferta
    
    If Me.GNTrans.IVGuiaRemision Then
        RecuperarGuia
    End If


    'Recupera datos del financiamiento
    
    If Me.GNTrans.CodPantalla = "PRPR" Or Me.GNTrans.CodPantalla = "PRPRRC" Then
        RecuperarRequerimiento
    End If
    
    If Me.GNTrans.IVVisualizarNumPagos Or Me.GNTrans.CodPantalla = "TSIER" Then
        RecuperarFinanciamiento
    End If
    'Recupera datos del Detalle Efectivo
    If Me.GNTrans.CodPantalla = "TSIECC" Then
        RecuperaTSDetalleEfectivo
        RecuperaTSDetalleCheque
        RecuperaTSDetalleTarjeta
        RecuperaTSDetalleVManuales
        RecuperaTSDetalleIngreso
    End If
    
    
    RecuperarVariosCentros
    'jeaa 24/03/2008
    If Me.GNTrans.IVTipoTrans = "X" Or Me.GNTrans.IVTipoTrans = "Y" Or Me.GNTrans.IVDatosImportacion Then
        RecuperarDatosImportacionExportacion
    End If
    mbooEsNuevo = False
    mbooModificado = False
End Sub


Private Sub VerificaNumDocRetencionRepetido_Anexos()
    Dim sql As String, rs As Recordset, obj As GNComprobante
    Dim i As Long
    
    
    For i = 1 To Me.CountTSKardexRet
    
    sql = "SELECT GnComprobante.TransID, tskardexret.NumSerieEstaSRI, tskardexret.NumSeriePuntoSRI, " & _
            " tskardexret.NumSecuencialSRI, tskardexret.AutorizacionSRI " & _
             " FROM GnComprobante INNER JOIN tskardexret ON GnComprobante.TransId = tskardexret.TransId " & _
             " Where estado <> 3  " & _
             " AND tskardexret.NumSerieEstaSRI = '" & Me.TSKardexRet(i).NumSerieEstaSRI & "' " & _
             " AND tskardexret.NumSeriePuntoSRI = '" & Me.TSKardexRet(i).NumSeriePuntoSRI & "' " & _
             " AND tskardexret.NumSecuencialSRI = '" & Me.TSKardexRet(i).NumSecuencialSRI & "' " & _
             " AND tskardexret.AutorizacionSRI = '" & Me.TSKardexRet(i).AutorizacionSRI & "' "
    
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        If Me.transid <> rs!transid Then
                Err.Raise ERR_INVALIDO, "Retencion.Verificación", _
                "Retencion: Los números que identifican al documento corresponden " & vbCrLf & _
                "a uno ingresado con anterioridad"
        End If
    End If
    Next i
    Set rs = Nothing
    
    
End Sub


Public Sub GeneraPagoAutoCHP()
    Dim i As Long, f As String, colAT As colAsientoTemp
    Dim obj As AsientoTemp, j As Long, ctl As PRLibroDetalle
    Dim Ctc As PRCuenta
    'Cuando SoloVer está establecido a True
    If mbooSoloVer Then
        Err.Raise ERR_SOLOVER, "GNComprobante.Grabar", MSGERR_SOLOVER
    End If
                    GeneraPCKardex2PCKContado
End Sub

Private Sub GeneraPCKardex2PCKContado()
    Dim pck As PCKardexCHP, ix As Long, tsf As TSFormaCobroPago
    Dim pck2 As PCKardexCHP, j As Long, pcd As PCDocAsignadoCHP
    Dim cad As String, v As Variant, gncAux As GNComprobante, i As Integer, Id As Long
    Dim Saldo As Currency
    
    BorrarPCKardexCHP

    'Elimina los PCKardexs asignados a cobro/pago directo
    For ix = CountPCKardexCHP To 1 Step -1
        Set pck = PCKardexCHP(ix)
        If pck.IdAsignado <> 0 Then
            If pck.IdAsignado = -1 Then
                RemovePCKardex ix      'Borra para crear de nuevo
            Else
                '*** MAKOTO 01/dic/00 Modificado para que elimina solo cuando es de la misma trans.
                On Error Resume Next
                Set pcd = pck.RecuperaPCDocAsignado
                Err.Clear
                On Error GoTo 0
                If Not (pcd Is Nothing) Then
                    If pcd.transid = Me.transid Then    'Si está asignado a otra trans. no tiene nada que ver
                        'Si es que ya está grabado, no ha de tener -1 por eso busca CodForma de asignado
                        Set tsf = Empresa.RecuperaTSFormaCobroPago(pck.CodForma)
                        If Not tsf Is Nothing Then
                            'Si está asignado a un documento que va directo a un banco
                            If tsf.IdBanco <> 0 Then
                                RemovePCKardex ix     'Borra para crear de nuevo
                            End If
                        End If
                    Else                        '*** MAKOTO 4/may/01 Mod.
                                           'No hace nada
                    End If
                Else                            '*** MAKOTO 27/abr/01 Mod.
                    RemovePCKardexCHP ix           '***
                End If
                Set pcd = Nothing
            End If
        End If
    Next ix

    If Len(Me.idFuentes) = 0 Then
        cad = Me.IdTransFuente
    Else
        cad = Me.idFuentes
    End If
    v = Split(cad, ",")
    
    'Busca documenos que van directo a un banco
    For i = 0 To UBound(v)
'        Set pck = PCKardexCHP(ix)
        Id = v(i)
        Set gncAux = Empresa.RecuperaGNComprobante(Id)
        If gncAux.CountPCKardexCHP > 0 Then
            If gncAux.PCKardexCHP(1).IdAsignado = 0 Then
                'Set tsf = Empresa.RecuperaTSFormaCobroPago(gncAux.PCKardexCHP(1).CodForma)
                'If Not (tsf Is Nothing) Then
'                    If tsf.IdBanco <> 0 Then         'Si es documento que va directo a banco
                        'Genera un nuevo PCKardex
                        If Not Me.GNTrans.IVPorPagar Then
                            Saldo = ObtieneSaldoCHPTrans(gncAux.PCKardexCHP(1).Id, gncAux.PCKardexCHP(1).Debe)
                        Else
                            Saldo = ObtieneSaldoCHPTrans(gncAux.PCKardexCHP(1).Id, gncAux.PCKardexCHP(1).Haber)
                        End If
                        If Saldo > 0 Then
                            j = AddPCKardexCHP
                            Set pck2 = PCKardexCHP(j)
                        
                            pck2.IdAsignado = gncAux.PCKardexCHP(1).Id
                            If Not Me.GNTrans.IVPorPagar Then
                                pck2.Haber = Round(Saldo, 2)
                            Else
                                pck2.Debe = Round(Saldo, 2)
                            End If
                            pck2.CodForma = gncAux.PCKardexCHP(1).CodForma
                            pck2.NumLetra = gncAux.PCKardexCHP(1).NumLetra
                            pck2.FechaEmision = FechaTrans
                            pck2.FechaVenci = FechaTrans
                            'pck2.Observacion = pck.Observacion
                            pck2.Orden = CountPCKardexCHP
                            pck2.CodProvcli = gncAux.PCKardexCHP(1).CodProvcli
                        End If
                        
                 '   End If
                'End If
            End If
        End If
    Next i
    

    Set tsf = Nothing
    Set pck = Nothing
    Set pck2 = Nothing
End Sub

Private Function ObtieneSaldoCHPTrans(ByVal Id As Long, Haber As Currency) As Currency
Dim sql As String, rs As Recordset
    sql = " select isnull(sum(debe),0) as debe from gncomprobante g inner join pckardexchp p on g.transid = p.transid where estado <>3 and idasignado=" & Id
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        ObtieneSaldoCHPTrans = Haber - rs!Debe
    Else
        ObtieneSaldoCHPTrans = Haber
    End If
End Function


'Referencia Microsoft ActiveX Data Objects  (o sea, ADO)
Public Function CambiaCadenaFormatoUTF8(ByVal cad As String, Ruta As String) As String

    Dim objStream   As ADODB.Stream

    Set objStream = New ADODB.Stream
        objStream.Open
        objStream.Charset = "UTF-8"
        objStream.WriteText cad
        'ruta = "c:\0309201401019010353600120010010000390830000000016.xml"

        'objStream.SaveToFile App.Path & "c:\MiArchivoUTF8"
        objStream.SaveToFile Ruta
        objStream.Close
    Set objStream = Nothing


End Function
'Declara

Public Function GeneraArchivoXMLComprobanteElectronicoFacturaUTF8(ByVal EsNuevo As Boolean) As Boolean
    Dim cad As String, pc As PCProvCli, cc As GNCentroCosto, Signo As Integer, gns As GNSucursal
    Dim i As Long, item As IVInventario, Nombre As String, Ruta As String, importeTotal As String
    Dim file As String, numFile As Integer, cadena  As String, cadClave As String, totalsinimpuestos As Currency
    Dim ValorMod As Integer, TOTAL As Currency, total1 As Currency, totalrealsinimpuestos  As Currency
    Dim iso As IVInventarioDetalle, rsiso As Recordset, ClaveNombre As String
    On Error GoTo ErrTrap

    Ruta = Me.Empresa.GNOpcion.ComprobantesGenerados
    If Len(Ruta) = 0 Then
        Ruta = "c:\"
    End If
    
    cadClave = ""
    cadClave = Format(DatePart("d", Date), "00") & Format(DatePart("m", Date), "00") & DatePart("yyyy", Date)
    cadClave = cadClave & "01"
    cadClave = cadClave & Me.Empresa.GNOpcion.RUC
''    If Me.Empresa.GNOpcion.TipoAmbiente = "1" Then
''        cadClave = cadClave & "1"
''    Else
''        cadClave = cadClave & "2"
''    End If
    
'''    If Me.GNTrans.IVAmbientePruebaFE Then
'''        cadClave = cadClave & "1"
'''    Else
'''        cadClave = cadClave & "2"
'''    End If
    cadClave = cadClave & Me.TipoAmbiente
    cadClave = cadClave & Me.NumSerieEstaSRI
    cadClave = cadClave & Me.NumSeriePuntoSRI
    cadClave = cadClave & Right("000000000" + Trim(Str(Me.NumTrans)), 9)
    
    ClaveNombre = cadClave & Right("0000000000" & Me.transid, 10)
    cadClave = cadClave & "00000000"
    
    
    
    cadClave = cadClave & "1"
    ValorMod = 2
    TOTAL = 0
    
    For i = 48 To 1 Step -1
        TOTAL = TOTAL + (Mid$(cadClave, i, 1) * ValorMod)
        ValorMod = ValorMod + 1
        If ValorMod > 7 Then ValorMod = 2
    Next i
    
    total1 = TOTAL Mod 11
    
    TOTAL = 11 - total1
    
    If TOTAL = 10 Then
        TOTAL = 1
    ElseIf TOTAL = 11 Then
        TOTAL = 0
    End If
    
    
    cadClave = cadClave & Trim$(Str(TOTAL))
    
    
    Select Case Me.Estado
    Case 0, 1, 2, 4
       If EsNuevo Then
            Nombre = ClaveNombre & ".xml"
        End If
    End Select
    
    file = Ruta & "\" & Nombre
'    file = "c:\ia\" & Nombre


'    If ExisteArchivo(file) Then
'    End If
'    numFile = FreeFile
    'Open file For Output Access Write As #numFile

    cad = "<?xml version=" & """1.0""" & "" & " encoding=" & """UTF-8""" & " standalone=" & """yes""" & "?>"
    cad = cad & "<factura id=" & """comprobante""" & "" & " version=" & """1.1.0""" & ">"
    cad = cad & "    <infoTributaria>"
'    If Me.Empresa.GNOpcion.TipoAmbiente = "1" Then
'        cad = cad & "        <ambiente>1</ambiente>"
'    Else
'        cad = cad & "        <ambiente>2</ambiente>"
'    End If
'
'    If Me.GNTrans.IVAmbientePruebaFE Then
'        cadClave = cadClave & "1"
'    Else
'        cadClave = cadClave & "2"
'    End If
    
    cad = cad & "        <ambiente>" & Me.TipoAmbiente & "</ambiente>"
    cad = cad & "        <tipoEmision>1</tipoEmision>"
    cad = cad & "        <razonSocial>" & Me.Empresa.GNOpcion.RazonSocial & "</razonSocial>"
    cad = cad & "        <nombreComercial>" & Me.Empresa.GNOpcion.NombreEmpresa & "</nombreComercial>"
    cad = cad & "        <ruc>" & Me.Empresa.GNOpcion.RUC & "</ruc>"
    cad = cad & "        <claveAcceso>" & cadClave & "</claveAcceso>"
    cad = cad & "        <codDoc>01</codDoc>"
    cad = cad & "        <estab>" & Me.NumSerieEstaSRI & "</estab>"
    cad = cad & "        <ptoEmi>" & Me.NumSeriePuntoSRI & "</ptoEmi>"
    cad = cad & "        <secuencial>" & Right("000000000" + Trim(Str(Me.NumTrans)), 9) & "</secuencial>"
    cad = cad & "        <dirMatriz>" & Me.Empresa.GNOpcion.Direccion1 & "</dirMatriz>"
    cad = cad & "    </infoTributaria>"
    cad = cad & "    <infoFactura>"
    cad = cad & "        <fechaEmision>" & Format(Me.FechaTrans, "dd/mm/yyyy") & "</fechaEmision>"
    Set gns = Me.Empresa.RecuperaGNSucursal(Me.GNTrans.CodSucursal)
    If Not gns Is Nothing Then
        cad = cad & "        <dirEstablecimiento>" & gns.Direccion & "</dirEstablecimiento>"
    End If
    If Me.Empresa.GNOpcion.TipoEmpresaSRI = "NC" Then
        cad = cad & "        <obligadoContabilidad>NO</obligadoContabilidad>"
    ElseIf Me.Empresa.GNOpcion.TipoEmpresaSRI = "CE" Then
        cad = cad & "        <contribuyenteEspecial>" & Me.Empresa.GNOpcion.Resolucion & "</contribuyenteEspecial>"
        cad = cad & "        <obligadoContabilidad>SI</obligadoContabilidad>"
    Else
        cad = cad & "        <obligadoContabilidad>SI</obligadoContabilidad>"
    End If
    
    Set pc = Me.Empresa.RecuperaPCProvCli(Me.CodClienteRef)
    If Not pc Is Nothing Then
        Select Case pc.IdTipoDocumento
            Case "1":            cad = cad & "        <tipoIdentificacionComprador>04</tipoIdentificacionComprador>"
            Case "2":            cad = cad & "        <tipoIdentificacionComprador>05</tipoIdentificacionComprador>"
            Case "5":            cad = cad & "        <tipoIdentificacionComprador>06</tipoIdentificacionComprador>"
            Case "6":            cad = cad & "        <tipoIdentificacionComprador>07</tipoIdentificacionComprador>"
        End Select
        cad = cad & "        <razonSocialComprador>" & pc.Nombre & "</razonSocialComprador>"
        cad = cad & "        <identificacionComprador>" & pc.RUC & "</identificacionComprador>"
        
    End If
    totalsinimpuestos = 0
    totalrealsinimpuestos = 0
    For i = 1 To Me.CountIVKardex
        totalsinimpuestos = totalsinimpuestos + Me.IVKardex(i).PrecioTotal
        totalrealsinimpuestos = totalrealsinimpuestos + Me.IVKardex(i).PrecioRealTotal
    Next i
    totalsinimpuestos = Abs(totalsinimpuestos)
    cad = cad & "        <totalSinImpuestos>" & Format(Abs(totalrealsinimpuestos), "#0.00") & "</totalSinImpuestos>"
    cad = cad & "        <totalDescuento>" & Format(Abs(totalsinimpuestos) - Abs(totalrealsinimpuestos), "#0.00") & "</totalDescuento>"
    cad = cad & "        <totalConImpuestos>"
    cad = cad & "            <totalImpuesto>"
    cad = cad & "                <codigo>2</codigo>"
    cad = cad & "                <codigoPorcentaje>2</codigoPorcentaje>"
    cad = cad & "                <baseImponible>" & Format(Abs(totalrealsinimpuestos), "#0.00") & "</baseImponible>"
    cad = cad & "                <valor>" & Format(Abs(totalrealsinimpuestos) * (Me.Empresa.GNOpcion.PorcentajeIVA), "#0.00") & "</valor>"
    cad = cad & "            </totalImpuesto>"
    cad = cad & "        </totalConImpuestos>"
    cad = cad & "        <propina>" & Format(0, "#0.00") & "</propina>"
    importeTotal = 0
    For i = 1 To Me.CountPCKardex
        importeTotal = importeTotal + Me.PCKardex(i).Debe
    Next i
    
'    importeTotal = Format(Abs(totalrealsinimpuestos) + Abs(totalrealsinimpuestos) * (Me.Empresa.GNOpcion.PorcentajeIVA), "#0.00")
    
    cad = cad & "        <importeTotal>" & Format(importeTotal, "#0.00") & "</importeTotal>"
    cad = cad & "        <moneda>DOLAR</moneda>"
    cad = cad & "    </infoFactura>"
    cad = cad & "    <detalles>"
    For i = 1 To Me.CountIVKardex
        If Not Me.IVKardex(i).bandImprimir Then
            cad = cad & "        <detalle>"
            Set item = Me.Empresa.RecuperaIVInventario(Me.IVKardex(i).CodInventario)
            If Not item Is Nothing Then
                If InStr(1, UCase(Me.Empresa.CodEmpresa), "ISO") <> 0 Then
                    Set rsiso = Me.Empresa.ConsIVDetalleItemISO(Me.IVKardex(i).TiempoEntrega)
                        If Me.NumDias = 0 Then
                            cad = cad & "            <codigoPrincipal>" & "R-" & Me.IVKardex(i).TiempoEntrega & "</codigoPrincipal>"
                        Else
                            cad = cad & "            <codigoPrincipal>" & "C-" & Me.IVKardex(i).TiempoEntrega & "</codigoPrincipal>"
                        End If
                    'cad = cad & "            <codigoAuxiliar>" & rsiso.Fields("NumDocRef") & "</codigoAuxiliar>"
                    cad = cad & "            <descripcion>" & rsiso.Fields("NumDocRef") & "-" & item.Descripcion & " - " & rsiso.Fields("marca") & " - " & rsiso.Fields("trabajo") & "</descripcion>"
                    Set rsiso = Nothing
                Else
                    cad = cad & "            <codigoPrincipal>" & item.CodInventario & "</codigoPrincipal>"
                    cad = cad & "            <descripcion>" & item.Descripcion & "</descripcion>"
                End If
                cad = cad & "            <cantidad>" & Format(Abs(Me.IVKardex(i).Cantidad), "#0.0000") & "</cantidad>"
                cad = cad & "            <precioUnitario>" & Format((Me.IVKardex(i).PrecioTotal / Me.IVKardex(i).Cantidad), "#0.0000") & "</precioUnitario>"
                cad = cad & "            <descuento>" & Format(Abs(Me.IVKardex(i).PrecioTotal - Me.IVKardex(i).PrecioRealTotal), "#0.00") & "</descuento>"
                cad = cad & "            <precioTotalSinImpuesto>" & Format(Abs(Me.IVKardex(i).PrecioRealTotal), "#0.00") & "</precioTotalSinImpuesto>"
                cad = cad & "            <impuestos>"
                cad = cad & "                <impuesto>"
                cad = cad & "                    <codigo>2</codigo>"
                cad = cad & "                    <codigoPorcentaje>2</codigoPorcentaje>"
                cad = cad & "                    <tarifa>" & Me.Empresa.GNOpcion.PorcentajeIVA * 100 & "</tarifa>"
                cad = cad & "                    <baseImponible>" & Format(Abs(Me.IVKardex(i).PrecioRealTotal), "#0.00") & "</baseImponible>"
                cad = cad & "                    <valor>" & Format(Abs(Me.IVKardex(i).PrecioRealTotal) * (Me.Empresa.GNOpcion.PorcentajeIVA), "#0.00") & "</valor>"
                cad = cad & "                </impuesto>"
                cad = cad & "            </impuestos>"
            End If
            cad = cad & "    </detalle>"
        End If
    Next i
    cad = cad & "    </detalles>"
    If Len(pc.Direccion1) > 0 Or Len(pc.Telefono1) > 0 Or Len(pc.EMail) > 0 Then
        cad = cad & "    <infoAdicional>"
        If Len(pc.Direccion1) > 0 Then
            cad = cad & "    <campoAdicional nombre= " & """Dirección""" & "" & ">" & pc.Direccion1 & "</campoAdicional>"
        End If
        If Len(pc.Telefono1) > 0 Then
            cad = cad & "    <campoAdicional nombre= " & """Teléfono""" & "" & ">" & pc.Telefono1 & "</campoAdicional>"
        End If
        If Len(pc.EMail) > 0 Then
            cad = cad & "    <campoAdicional nombre= " & """Email""" & "" & ">" & pc.EMail & "</campoAdicional>"
        End If
        cad = cad & "    </infoAdicional>"
    End If
    cad = cad & "</factura>"
    Set pc = Nothing
    Set item = Nothing
    Set gns = Nothing
    cad = CambiaCadenaFormatoUTF8(cad, file)
Close numFile
        GeneraArchivoXMLComprobanteElectronicoFacturaUTF8 = True
        
    Exit Function
ErrTrap:

    Close #numFile
    DispErr
    Unload Me
    Exit Function
End Function

Public Function GeneraArchivoXMLComprobanteElectronicoNotaCreditoUTF8(ByVal EsNuevo As Boolean) As Boolean
    Dim cad As String, pc As PCProvCli, cc As GNCentroCosto, Signo As Integer, gns As GNSucursal
    Dim i As Long, item As IVInventario, Nombre As String, Ruta As String, importeTotal As String
    Dim file As String, numFile As Integer, cadena  As String, cadClave As String, totalsinimpuestos As Currency, ClaveNombre As String
    Dim ValorMod As Integer, TOTAL As Currency, gc As GNComprobante, NumAfectada As String, num As String, s As String, total1 As Currency
    On Error GoTo ErrTrap

    Ruta = Me.Empresa.GNOpcion.ComprobantesGenerados
    If Len(Ruta) = 0 Then
        Ruta = "c:\"
    End If
    
    cadClave = ""
    cadClave = Format(DatePart("d", Date), "00") & Format(DatePart("m", Date), "00") & DatePart("yyyy", Date)
    cadClave = cadClave & "04"
    cadClave = cadClave & Me.Empresa.GNOpcion.RUC
    
''    If Me.Empresa.GNOpcion.TipoAmbiente = "1" Then
''        cadClave = cadClave & "1"
''    Else
''        cadClave = cadClave & "2"
''    End If
''    If Me.GNTrans.IVAmbientePruebaFE Then
''        cadClave = cadClave & "1"
''    Else
''        cadClave = cadClave & "2"
''    End If
    
    cadClave = cadClave & Me.TipoAmbiente
    cadClave = cadClave & Me.NumSerieEstaSRI
    cadClave = cadClave & Me.NumSeriePuntoSRI
    cadClave = cadClave & Right("000000000" + Trim(Str(Me.NumTrans)), 9)
    
    ClaveNombre = cadClave & Right("0000000000" & Me.transid, 10)
    cadClave = cadClave & "00000000"
    
    
    
    cadClave = cadClave & "1"
    ValorMod = 2
    TOTAL = 0
    
    For i = 48 To 1 Step -1
        TOTAL = TOTAL + (Mid$(cadClave, i, 1) * ValorMod)
        ValorMod = ValorMod + 1
        If ValorMod > 7 Then ValorMod = 2
    Next i
    
    total1 = TOTAL Mod 11
    
    TOTAL = 11 - total1
    
    If TOTAL = 10 Then
        TOTAL = 1
    ElseIf TOTAL = 11 Then
        TOTAL = 0
    End If

    cadClave = cadClave & Trim$(Str(TOTAL))
    
    
    
    Select Case Me.Estado
    Case 0, 1, 2, 4
       If EsNuevo Then
            Nombre = cadClave & ".xml"
        End If
    End Select
    
    file = Ruta & "\" & Nombre



'    If ExisteArchivo(file) Then
'    End If
'    numFile = FreeFile
    'Open file For Output Access Write As #numFile

    cad = "<?xml version=" & """1.0""" & "" & " encoding=" & """UTF-8""" & " standalone=" & """yes""" & "?>"
    cad = cad & "<notaCredito id=" & """comprobante""" & "" & " version=" & """1.1.0""" & ">"
    cad = cad & "    <infoTributaria>"
'    If Me.Empresa.GNOpcion.TipoAmbiente = "1" Then
'        cad = cad & "        <ambiente>1</ambiente>"
'    Else
'        cad = cad & "        <ambiente>2</ambiente>"
'    End If
'''    If Me.GNTrans.IVAmbientePruebaFE Then
'''        cadClave = cadClave & "1"
'''    Else
'''        cadClave = cadClave & "2"
'''    End If
    cad = cad & "        <ambiente>" & Me.TipoAmbiente & "</ambiente>"
    cad = cad & "        <tipoEmision>1</tipoEmision>"
    cad = cad & "        <razonSocial>" & Me.Empresa.GNOpcion.RazonSocial & "</razonSocial>"
    cad = cad & "        <nombreComercial>" & Me.Empresa.GNOpcion.NombreEmpresa & "</nombreComercial>"
    cad = cad & "        <ruc>" & Me.Empresa.GNOpcion.RUC & "</ruc>"
    cad = cad & "        <claveAcceso>" & cadClave & "</claveAcceso>"
    cad = cad & "        <codDoc>04</codDoc>"
    cad = cad & "        <estab>" & Me.NumSerieEstaSRI & "</estab>"
    cad = cad & "        <ptoEmi>" & Me.NumSeriePuntoSRI & "</ptoEmi>"
    cad = cad & "        <secuencial>" & Right("000000000" + Trim(Str(Me.NumTrans)), 9) & "</secuencial>"
    cad = cad & "        <dirMatriz>" & Me.Empresa.GNOpcion.Direccion1 & "</dirMatriz>"
    cad = cad & "    </infoTributaria>"
    cad = cad & "    <infoNotaCredito>"
    cad = cad & "        <fechaEmision>" & Format(Me.FechaTrans, "dd/mm/yyyy") & "</fechaEmision>"
    Set gns = Me.Empresa.RecuperaGNSucursal(Me.GNTrans.CodSucursal)
    If Not gns Is Nothing Then
        cad = cad & "        <dirEstablecimiento>" & gns.Direccion & "</dirEstablecimiento>"
    End If
    
''    If Me.Empresa.GNOpcion.TipoEmpresaSRI = "NC" Then
''        cad = cad & "        <obligadoContabilidad>NO</obligadoContabilidad>"
''    ElseIf Me.Empresa.GNOpcion.TipoEmpresaSRI = "CE" Then
''        cad = cad & "        <contribuyenteEspecial>" & Me.Empresa.GNOpcion.Resolucion & "</contribuyenteEspecial>"
''        cad = cad & "        <obligadoContabilidad>SI</obligadoContabilidad>"
''    Else
''        cad = cad & "        <obligadoContabilidad>SI</obligadoContabilidad>"
''    End If
    
    Set pc = Me.Empresa.RecuperaPCProvCli(Me.CodClienteRef)
    If Not pc Is Nothing Then
        Select Case pc.IdTipoDocumento
            Case "1":            cad = cad & "        <tipoIdentificacionComprador>04</tipoIdentificacionComprador>"
            Case "2":            cad = cad & "        <tipoIdentificacionComprador>05</tipoIdentificacionComprador>"
            Case "5":            cad = cad & "        <tipoIdentificacionComprador>06</tipoIdentificacionComprador>"
            Case "6":            cad = cad & "        <tipoIdentificacionComprador>07</tipoIdentificacionComprador>"
        End Select
        cad = cad & "        <razonSocialComprador>" & pc.Nombre & "</razonSocialComprador>"
        cad = cad & "        <identificacionComprador>" & pc.RUC & "</identificacionComprador>"
        
        If Me.Empresa.GNOpcion.TipoEmpresaSRI = "NC" Then
            cad = cad & "        <obligadoContabilidad>NO</obligadoContabilidad>"
        ElseIf Me.Empresa.GNOpcion.TipoEmpresaSRI = "CE" Then
            cad = cad & "        <contribuyenteEspecial>" & Me.Empresa.GNOpcion.Resolucion & "</contribuyenteEspecial>"
            cad = cad & "        <obligadoContabilidad>SI</obligadoContabilidad>"
        Else
            cad = cad & "        <obligadoContabilidad>SI</obligadoContabilidad>"
        End If
       
    End If
    
    cad = cad & "        <codDocModificado>01</codDocModificado>"
  
    If Me.IdTransFuente <> 0 Then
        Set gc = Me.Empresa.RecuperaGNComprobante(Me.IdTransFuente)
        If Not gc Is Nothing Then
            num = CStr(gc.NumTrans)
            While Len(num) < 9
                num = "0" & num
            Wend
            
            num = gc.GNTrans.NumSerieEstablecimiento & "-" & gc.GNTrans.NumSeriePunto & "-" & num
            s = num
        End If
        cad = cad & "        <numDocModificado>" & num & "</numDocModificado>"
        cad = cad & "        <fechaEmisionDocSustento>" & gc.FechaTrans & "</fechaEmisionDocSustento>"
        Set gc = Nothing
    End If

    
    
    totalsinimpuestos = 0
    For i = 1 To Me.CountIVKardex
        totalsinimpuestos = totalsinimpuestos + Me.IVKardex(i).PrecioRealTotal
    Next i
    totalsinimpuestos = Abs(totalsinimpuestos)
    cad = cad & "        <totalSinImpuestos>" & Format(totalsinimpuestos, "#0.00") & "</totalSinImpuestos>"
    
    
    importeTotal = 0
    For i = 1 To Me.CountPCKardex
        importeTotal = importeTotal + Me.PCKardex(i).Haber
    Next i
''''    cad = cad & "        <importeTotal>" & Format(importeTotal, "#0.00") & "</importeTotal>"
    cad = cad & "        <valorModificacion>" & Format(importeTotal, "#0.00") & "</valorModificacion>"
    cad = cad & "        <moneda>DOLAR</moneda>"
    cad = cad & "        <totalConImpuestos>"
    cad = cad & "            <totalImpuesto>"
    cad = cad & "                <codigo>2</codigo>"
    cad = cad & "                <codigoPorcentaje>2</codigoPorcentaje>"
    cad = cad & "                <baseImponible>" & Format(totalsinimpuestos, "#0.00") & "</baseImponible>"
    cad = cad & "                <valor>" & Format(totalsinimpuestos * (Me.Empresa.GNOpcion.PorcentajeIVA), "#0.00") & "</valor>"
    cad = cad & "            </totalImpuesto>"
    cad = cad & "        </totalConImpuestos>"
    '''cad = cad & "        <propina>" & Format(0, "#0.00") & "</propina>"
    cad = cad & "        <motivo>" & Me.Descripcion & "</motivo>"
    cad = cad & "    </infoNotaCredito>"
    cad = cad & "    <detalles>"
    For i = 1 To Me.CountIVKardex
        cad = cad & "        <detalle>"
        Set item = Me.Empresa.RecuperaIVInventario(Me.IVKardex(i).CodInventario)
        If Not item Is Nothing Then
            cad = cad & "            <codigoInterno>" & item.CodInventario & "</codigoInterno>"
'            cad = cad & "            <codigoAuxiliar>" & item.CodAlterno1 & "</codigoAuxiliar>"
            cad = cad & "            <descripcion>" & item.Descripcion & "</descripcion>"
            cad = cad & "            <cantidad>" & Format(Abs(Me.IVKardex(i).Cantidad), "#0.0000") & "</cantidad>"
            cad = cad & "            <precioUnitario>" & Format((Me.IVKardex(i).PrecioTotal / Me.IVKardex(i).Cantidad), "#0.0000") & "</precioUnitario>"
            cad = cad & "            <descuento>" & Format(((Me.IVKardex(i).PrecioTotal / Me.IVKardex(i).Cantidad) - (Me.IVKardex(i).PrecioRealTotal / Me.IVKardex(i).Cantidad)), "#0.00") & "</descuento>"
            'cad = cad & "            <descuento>" & Format((Me.IVKardex(i).Descuento * 100), "#0.00") & "</descuento>"
            cad = cad & "            <precioTotalSinImpuesto>" & Format(Abs(Me.IVKardex(i).PrecioRealTotal), "#0.00") & "</precioTotalSinImpuesto>"
'            cad = cad & "            <detallesAdicionales>"
'            cad = cad & "            </detallesAdicionales>"
            cad = cad & "            <impuestos>"
            cad = cad & "                <impuesto>"
            cad = cad & "                    <codigo>2</codigo>"
            cad = cad & "                    <codigoPorcentaje>2</codigoPorcentaje>"
            cad = cad & "                    <tarifa>" & Me.Empresa.GNOpcion.PorcentajeIVA * 100 & "</tarifa>"
            cad = cad & "                    <baseImponible>" & Format(Abs(Me.IVKardex(i).PrecioRealTotal), "#0.00") & "</baseImponible>"
            cad = cad & "                    <valor>" & Format(Abs(Me.IVKardex(i).PrecioRealTotal) * (Me.Empresa.GNOpcion.PorcentajeIVA), "#0.00") & "</valor>"
            cad = cad & "                </impuesto>"
            cad = cad & "            </impuestos>"
        End If
        cad = cad & "    </detalle>"
    Next i
    cad = cad & "    </detalles>"
    If Len(pc.Direccion1) > 0 Or Len(pc.Telefono1) > 0 Or Len(pc.EMail) > 0 Then
        cad = cad & "    <infoAdicional>"
        If Len(pc.Direccion1) > 0 Then
            cad = cad & "    <campoAdicional nombre= " & """Dirección""" & "" & ">" & pc.Direccion1 & "</campoAdicional>"
        End If
        If Len(pc.Telefono1) > 0 Then
            cad = cad & "    <campoAdicional nombre= " & """Teléfono""" & "" & ">" & pc.Telefono1 & "</campoAdicional>"
        End If
        If Len(pc.EMail) > 0 Then
            cad = cad & "    <campoAdicional nombre= " & """Email""" & "" & ">" & pc.EMail & "</campoAdicional>"
        End If
        cad = cad & "    </infoAdicional>"
    End If
    cad = cad & "</notaCredito>"
    Set pc = Nothing
    Set item = Nothing
    Set gns = Nothing
    cad = CambiaCadenaFormatoUTF8(cad, file)
Close numFile
        GeneraArchivoXMLComprobanteElectronicoNotaCreditoUTF8 = True
        
    Exit Function
ErrTrap:

    Close #numFile
    DispErr
    Unload Me
    Exit Function
End Function

Public Function GeneraArchivoXMLComprobanteElectronicoNotaDebitoUTF8(ByVal EsNuevo As Boolean) As Boolean
    Dim cad As String, pc As PCProvCli, cc As GNCentroCosto, Signo As Integer, gns As GNSucursal
    Dim i As Long, item As IVInventario, Nombre As String, Ruta As String, importeTotal As String
    Dim file As String, numFile As Integer, cadena  As String, cadClave As String, totalsinimpuestos As Currency
    Dim ValorMod As Integer, TOTAL As Currency, gc As GNComprobante, NumAfectada As String, num As String, s As String, total1 As Currency
    On Error GoTo ErrTrap

    Ruta = Me.Empresa.GNOpcion.ComprobantesGenerados
    If Len(Ruta) = 0 Then
        Ruta = "c:\"
    End If
    
    cadClave = ""
    cadClave = Format(DatePart("d", Date), "00") & Format(DatePart("m", Date), "00") & DatePart("yyyy", Date)
    cadClave = cadClave & "05"
    cadClave = cadClave & Me.Empresa.GNOpcion.RUC
'    If Me.Empresa.GNOpcion.TipoAmbiente = "1" Then
'        cadClave = cadClave & "1"
'    Else
'        cadClave = cadClave & "2"
'    End If
''    If Me.GNTrans.IVAmbientePruebaFE Then
''        cadClave = cadClave & "1"
''    Else
''        cadClave = cadClave & "2"
''    End If
    cadClave = cadClave & Me.TipoAmbiente
    cadClave = cadClave & Me.NumSerieEstaSRI
    cadClave = cadClave & Me.NumSeriePuntoSRI
    cadClave = cadClave & Right("000000000" + Trim(Str(Me.NumTrans)), 9)
    cadClave = cadClave & "00000000"
    cadClave = cadClave & "1"
    ValorMod = 2
    TOTAL = 0
    
    For i = 48 To 1 Step -1
        TOTAL = TOTAL + (Mid$(cadClave, i, 1) * ValorMod)
        ValorMod = ValorMod + 1
        If ValorMod > 7 Then ValorMod = 2
    Next i
    
    total1 = TOTAL Mod 11
    
    TOTAL = 11 - total1
    
    If TOTAL = 10 Then
        TOTAL = 1
    ElseIf TOTAL = 11 Then
        TOTAL = 0
    End If

    cadClave = cadClave & Trim$(Str(TOTAL))
    
    
    Select Case Me.Estado
    Case 0, 1, 2, 4
       If EsNuevo Then
            Nombre = cadClave & ".xml"
        End If
    End Select
    
    file = Ruta & "\" & Nombre



'    If ExisteArchivo(file) Then
'    End If
'    numFile = FreeFile
    'Open file For Output Access Write As #numFile

    cad = "<?xml version=" & """1.0""" & "" & " encoding=" & """UTF-8""" & " standalone=" & """yes""" & "?>"
    cad = cad & "<notaDebito id=" & """comprobante""" & "" & " version=" & """1.1.0""" & ">"
    cad = cad & "    <infoTributaria>"
'    If Me.Empresa.GNOpcion.TipoAmbiente = "1" Then
'        cad = cad & "        <ambiente>1</ambiente>"
'    Else
'        cad = cad & "        <ambiente>2</ambiente>"
'    End If
'    If Me.GNTrans.IVAmbientePruebaFE Then
'        cadClave = cadClave & "1"
'    Else
'        cadClave = cadClave & "2"
'    End If
    cad = cad & "        <ambiente>" & Me.TipoAmbiente & "</ambiente>"
    cad = cad & "        <tipoEmision>1</tipoEmision>"
    cad = cad & "        <razonSocial>" & Me.Empresa.GNOpcion.RazonSocial & "</razonSocial>"
    cad = cad & "        <nombreComercial>" & Me.Empresa.GNOpcion.NombreEmpresa & "</nombreComercial>"
    cad = cad & "        <ruc>" & Me.Empresa.GNOpcion.RUC & "</ruc>"
    cad = cad & "        <claveAcceso>" & cadClave & "</claveAcceso>"
    cad = cad & "        <codDoc>05</codDoc>"
    cad = cad & "        <estab>" & Me.NumSerieEstaSRI & "</estab>"
    cad = cad & "        <ptoEmi>" & Me.NumSeriePuntoSRI & "</ptoEmi>"
    cad = cad & "        <secuencial>" & Right("000000000" + Trim(Str(Me.NumTrans)), 9) & "</secuencial>"
    cad = cad & "        <dirMatriz>" & Me.Empresa.GNOpcion.Direccion1 & "</dirMatriz>"
    cad = cad & "    </infoTributaria>"
    cad = cad & "    <infoNotaDebito>"
    cad = cad & "        <fechaEmision>" & Format(Me.FechaTrans, "dd/mm/yyyy") & "</fechaEmision>"
    Set gns = Me.Empresa.RecuperaGNSucursal(Me.GNTrans.CodSucursal)
    If Not gns Is Nothing Then
        cad = cad & "        <dirEstablecimiento>" & gns.Direccion & "</dirEstablecimiento>"
    End If
    If Me.Empresa.GNOpcion.TipoEmpresaSRI = "NC" Then
        cad = cad & "        <obligadoContabilidad>NO</obligadoContabilidad>"
    ElseIf Me.Empresa.GNOpcion.TipoEmpresaSRI = "CE" Then
        cad = cad & "        <contribuyenteEspecial>" & Me.Empresa.GNOpcion.Resolucion & "</contribuyenteEspecial>"
        cad = cad & "        <obligadoContabilidad>SI</obligadoContabilidad>"
    Else
        cad = cad & "        <obligadoContabilidad>SI</obligadoContabilidad>"
    End If
    
    Set pc = Me.Empresa.RecuperaPCProvCli(Me.CodClienteRef)
    If Not pc Is Nothing Then
        Select Case pc.IdTipoDocumento
            Case "1":            cad = cad & "        <tipoIdentificacionComprador>04</tipoIdentificacionComprador>"
            Case "2":            cad = cad & "        <tipoIdentificacionComprador>05</tipoIdentificacionComprador>"
            Case "5":            cad = cad & "        <tipoIdentificacionComprador>06</tipoIdentificacionComprador>"
            Case "6":            cad = cad & "        <tipoIdentificacionComprador>07</tipoIdentificacionComprador>"
        End Select
        cad = cad & "        <razonSocialComprador>" & pc.Nombre & "</razonSocialComprador>"
        cad = cad & "        <identificacionComprador>" & pc.RUC & "</identificacionComprador>"
        
    End If
    
    cad = cad & "        <codDocModificado>01</codDocModificado>"
  
    If Me.IdTransFuente <> 0 Then
        Set gc = Me.Empresa.RecuperaGNComprobante(Me.IdTransFuente)
        If Not gc Is Nothing Then
            num = CStr(gc.NumTrans)
            While Len(num) < 9
                num = "0" & num
            Wend
            
            num = gc.GNTrans.NumSerieEstablecimiento & "-" & gc.GNTrans.NumSeriePunto & "-" & num
            s = num
        End If
        cad = cad & "        <numDocModificado>" & num & "</numDocModificado>"
        cad = cad & "        <fechaEmisionDocSustento>" & gc.FechaTrans & "</fechaEmisionDocSustento>"
        Set gc = Nothing
    End If

    
    
    totalsinimpuestos = 0
    For i = 1 To Me.CountIVKardex
        totalsinimpuestos = totalsinimpuestos + Me.IVKardex(i).PrecioRealTotal
    Next i
    totalsinimpuestos = Abs(totalsinimpuestos)
    cad = cad & "        <totalSinImpuestos>" & Format(totalsinimpuestos, "#0.00") & "</totalSinImpuestos>"
    'cad = cad & "        <totalDescuento>00.0</totalDescuento>"
    cad = cad & "        <Impuestos>"
    cad = cad & "            <Impuesto>"
    cad = cad & "                <codigo>2</codigo>"
    cad = cad & "                <codigoPorcentaje>2</codigoPorcentaje>"
    cad = cad & "                <baseImponible>" & Format(totalsinimpuestos, "#0.00") & "</baseImponible>"
    cad = cad & "                <valor>" & Format(totalsinimpuestos * (Me.Empresa.GNOpcion.PorcentajeIVA), "#0.00") & "</valor>"
    cad = cad & "            </Impuesto>"
    cad = cad & "        </Impuestos>"
    '''cad = cad & "        <propina>" & Format(0, "#0.00") & "</propina>"
    'cad = cad & "        <motivo>" & Me.Descripcion & "</motivo>"
    importeTotal = 0
    For i = 1 To Me.CountPCKardex
        importeTotal = importeTotal + Me.PCKardex(i).Haber
    Next i
    cad = cad & "        <valorTotal>" & Format(importeTotal, "#0.00") & "</valorTotal>"
    cad = cad & "        <moneda>DOLAR</moneda>"
    cad = cad & "    </infoNotaDebito>"
    cad = cad & "    <motivos>"
    For i = 1 To Me.CountIVKardex
        cad = cad & "        <motivo>"
        Set item = Me.Empresa.RecuperaIVInventario(Me.IVKardex(i).CodInventario)
        If Not item Is Nothing Then
            cad = cad & "            <descripcion>" & item.Descripcion & "</descripcion>"
            cad = cad & "            <valor>" & Format(Abs(Me.IVKardex(i).PrecioRealTotal), "#0.00") & "</valor>"
        End If
        cad = cad & "    </motivo>"
    Next i
    cad = cad & "    </motivos>"
    If Len(pc.Direccion1) > 0 Or Len(pc.Telefono1) > 0 Or Len(pc.EMail) > 0 Then
        cad = cad & "    <infoAdicional>"
        If Len(pc.Direccion1) > 0 Then
            cad = cad & "    <campoAdicional nombre= " & """Dirección""" & "" & ">" & pc.Direccion1 & "</campoAdicional>"
        End If
        If Len(pc.Telefono1) > 0 Then
            cad = cad & "    <campoAdicional nombre= " & """Teléfono""" & "" & ">" & pc.Telefono1 & "</campoAdicional>"
        End If
        If Len(pc.EMail) > 0 Then
            cad = cad & "    <campoAdicional nombre= " & """Email""" & "" & ">" & pc.EMail & "</campoAdicional>"
        End If
        cad = cad & "    </infoAdicional>"
    End If
    cad = cad & "</notaDebito>"
    Set pc = Nothing
    Set item = Nothing
    Set gns = Nothing
    cad = CambiaCadenaFormatoUTF8(cad, file)
Close numFile
        GeneraArchivoXMLComprobanteElectronicoNotaDebitoUTF8 = True
        
    Exit Function
ErrTrap:

    Close #numFile
    DispErr
    Unload Me
    Exit Function
End Function

Public Property Let Agencia(ByVal value As String)
    Dim sql As String, rs As Recordset
    'Cuando cambia el valor
    If value <> mProps.Agencia Then
        If Len(value) > 0 Then
            sql = "SELECT IdAgencia FROM pcAgencia WHERE idagencia='" & value & "'"
            Set rs = mProps.objEmpresa.OpenRecordset(sql)
            If rs.EOF Then
                Err.Raise ERR_NOHAYCODIGO, "GNComprobante.Agencia", MSGERR_NOHAYCODIGO
                Exit Property
            Else
                IdAgencia = rs!IdAgencia
            End If
            rs.Close
        Else
            IdAgencia = 0
        End If
        mProps.Agencia = value
        SetModificado
    End If
    Set rs = Nothing
End Property

Public Property Get Agencia() As String
    Agencia = Trim$(mProps.Agencia)
End Property

Public Property Let IdAgencia(ByVal value As Long)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.idAgencia", MSGERR_SOLOVER
    mProps.IdAgencia = value
    mbooModificado = True
End Property

Public Property Get IdAgencia() As Long
    IdAgencia = mProps.IdAgencia
End Property

Public Function RecuperaCobroRetencionxUsuario() As Variant
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean

    
    sql = "SELECT distinct "
    sql = sql & " G.TRANSID, G.CodTrans + ' ' + CONVERT(varchar, NumTrans)    AS Trans,    pc.nombre, haber as valor, p.numletra"
    sql = sql & " FROM GNCOMPROBANTE G inner join gntrans gt on g.codtrans=gt.codtrans"
    sql = sql & " inner join pcprovcli pc on  g.idclienteref=pc.idprovcli"
    sql = sql & " INNER JOIN PCKARDEX P"
    sql = sql & " inner join tsformacobropago tsf on p.idforma=tsf.idforma"
    sql = sql & " ON G.TRANSID=P.TRANSID"
    sql = sql & " Where G.ESTADO<>3     "

    If GNTrans.TSUtilizaFechaGrabado Then
        sql = sql & " AND (g.FechaGrabado between '" & Me.FechaTrans & " 00:00:00' AND '" & Me.FechaTrans & " 23:59:59' ) "
    Else
        sql = sql & " AND FECHATRANS BETWEEN '" & Me.FechaTrans & "' AND '" & Me.FechaTrans & "'"
    End If
    sql = sql & " AND CODUSUARIO='" & Me.codUsuario & "'"
    sql = sql & " and gt.modulo<>'iv'"
    sql = sql & " and afectasaldopc=1"
    sql = sql & " and haber>0"
    sql = sql & " and AnexoCodTipoComp=7"
    If Me.EsNuevo Then
        sql = sql & " and g.transid not in( select IdTransRef from TSDetalleIngreso tsd inner join gncomprobante g on tsd.transid=g.transid where g.estado<>3)"
    End If

    
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    
    Set RecuperaCobroRetencionxUsuario = rs
    Set rs = Nothing

End Function

'--------------- Manejo de coleccion de TSDetalleIngresoRT
Public Function AddTSDetalleIngresoRT() As Long
    Dim nuevo As TSDetalleIngresoRT
    
    'Cuando SoloVer está establecido a True, genera error
    If mcolTSDetalleIngresoRT Is Nothing Then RecuperaTSDetalleIngresoRT
    
    Set nuevo = New TSDetalleIngresoRT
    Set nuevo.GNComprobante = Me
   
    mcolTSDetalleIngresoRT.Add nuevo
    AddTSDetalleIngresoRT = mcolTSDetalleIngresoRT.Count    'Devuelve el indice de nuevo elemento
    Set nuevo = Nothing
    mbooModificado = True
End Function

Public Sub RemoveTSDetalleIngresoRT(ByVal ix As Long, Optional obj As TSDetalleIngresoRT)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemoveTSDetalleIngresoRT", MSGERR_SOLOVER
    If mcolTSDetalleIngresoRT Is Nothing Then RecuperaTSDetalleIngresoRT
    
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolTSDetalleIngresoRT.Count
            If mcolTSDetalleIngresoRT.item(ix) Is obj Then
                mcolTSDetalleIngresoRT.Remove ix
                Exit For
            End If
        Next ix
    Else
        mcolTSDetalleIngresoRT.Remove ix
    End If
    
    mbooModificado = True
End Sub

'Elimina todos los detalles de TSDetalleIngresoRT
Public Sub BorrarTSDetalleIngresoRT()
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BorrarTSDetalleIngresoRT", MSGERR_SOLOVER
    If mcolTSDetalleIngresoRT Is Nothing Then Set mcolTSDetalleIngresoRT = New Collection
    
    With mcolTSDetalleIngresoRT
        Do While .Count > 0
            .Remove .Count
        Loop
    End With
    mbooModificado = True
End Sub

Public Property Get CountTSDetalleIngresoRT() As Long
    If mcolTSDetalleIngresoRT Is Nothing Then RecuperaTSDetalleIngresoRT
    CountTSDetalleIngresoRT = mcolTSDetalleIngresoRT.Count
End Property

Public Property Get TSDetalleIngresoRT(ix As Long) As TSDetalleIngresoRT
    If mcolTSDetalleIngresoRT Is Nothing Then RecuperaTSDetalleIngresoRT
    Set TSDetalleIngresoRT = mcolTSDetalleIngresoRT.item(ix)
End Property


Private Sub RecuperaTSDetalleIngresoRT()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean

    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolTSDetalleIngresoRT Is Nothing Then Set mcolTSDetalleIngresoRT = New Collection
    
    'Recupera los registros de TSDetalleIngresoRT
    sql = "SELECT tskc.* "
    sql = sql & " FROM TSDetalleIngresoRT tskc "
    sql = sql & " WHERE TransId=" & mProps.transid & " ORDER BY Orden"
    

    
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddTSDetalleIngresoRT
                TSDetalleIngresoRT(i).Recuperar rs
            End If
            .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub


Public Function TotalizaPCKardexHaber() As Boolean
    Dim pck As PCKardex, i As Long, j As Long, pck2 As PCKardex, rt As Boolean
    rt = False
    i = 1
    Do While i <= mcolPCKardexCopia.Count
        Set pck = mcolPCKardexCopia.item(i)
        'Busca repetidos
        For j = mcolPCKardexCopia.Count To i + 1 Step -1     'En orden al revez
            Set pck2 = mcolPCKardexCopia.item(j)
            'Si encuentra repetido en la misma bodega, con el mismo signo
            If pck2.CodEmpleado = pck.CodEmpleado Then
                pck.Haber = pck.Haber + pck2.Haber
                RemovePCKardexCopia j
                rt = True
                End If
        Next j
        i = i + 1
    Loop
    TotalizaPCKardexHaber = rt
End Function

Public Sub CopiaPcKardex(ByRef GnFuente As GNComprobante)
    Dim i As Long, j As Long
    Dim ivk As IVKardex
    Dim IvkRecargo As IVKardexRecargo
    Dim pck As PCKardex
    Dim Tsk As TSKardex
    Dim Tskret As TSKardexRet
    Dim Ctd As CTLibroDetalle
    Dim cck As CcKardex
    Dim afk As AFKardex
    Dim AFkRecargo As AFKardexRecargo
    Dim TskConci As TSKardexConcilia
    Dim idbodDes As Long
    Dim IdInven As Long
    Dim IvkArancel As IVKardexRecargo
    Dim pckchp As PCKardexCHP
    Dim Rgk As RGKardex
    Dim Elemento As String
'    GnFuente.RecuperaDetalleTodo  'Recupera  todos los datos de origen
    'Copia las propiedades al nuevo objeto
    Me.NumTrans = GnFuente.NumTrans
    Me.CodAsiento = GnFuente.CodAsiento
    Me.FechaTrans = GnFuente.FechaTrans
    'me.FechaGrabado = Date  'fecha  actual
    Me.HoraTrans = GnFuente.HoraTrans
    Me.Descripcion = GnFuente.Descripcion
    Me.codUsuario = GnFuente.codUsuario
    Me.IdResponsable = GnFuente.IdResponsable
    Me.NumDocRef = GnFuente.NumDocRef
    Me.Nombre = GnFuente.Nombre
    Me.Estado = GnFuente.Estado
    'me.PosID = Gnfuente.PosID
    Me.NumTransCierrePOS = GnFuente.NumTransCierrePOS
    Me.idCentro = GnFuente.idCentro
    Me.IdTransFuente = GnFuente.IdTransFuente
    Me.CodMoneda = GnFuente.CodMoneda
    Me.Cotizacion(Me.CodMoneda) = GnFuente.Cotizacion(GnFuente.CodMoneda)
    Me.IdProveedorRef = GnFuente.IdProveedorRef
    Me.IdClienteRef = GnFuente.IdClienteRef
    Me.IdVendedor = GnFuente.IdVendedor
    Me.IdMotivo = GnFuente.IdMotivo             'jeaa 25/04/2005
    Me.PrecioRef = GnFuente.PrecioRef
    Me.FechaDevol = GnFuente.FechaDevol
    Me.CodUsuarioAutoriza = GnFuente.CodUsuarioAutoriza  'jeaa 25/09/2008
    Me.idFuentes = GnFuente.idFuentes  'jeaa 22/04/2009
    Me.idCentros = GnFuente.idCentros  'jeaa 22/04/2009
    Me.IdGaranteRef = GnFuente.IdGaranteRef  'jeaa 29/05/2009
    Me.IdObra = GnFuente.IdObra  'jeaa 01/02/2010
    Me.IdZona = GnFuente.IdZona 'jeaa 01/02/2010
    Me.IdDescuento = GnFuente.IdDescuento 'jeaa 16/11/2010
    Me.CodPRAsiento = GnFuente.CodPRAsiento
    Me.PorcentajeIVA = GnFuente.PorcentajeIVA
    Me.TransFuente = GnFuente.TransFuente
    Me.IdGaranteRef2 = GnFuente.IdGaranteRef2  'jeaa 29/05/2009
    Me.IdInventario = GnFuente.IdInventario  'jeaa 29/05/2009
    
    If Len(GnFuente.Empresa.GNOpcion.ObtenerValor("EleAplicaAnti")) > 0 Then
        Elemento = GnFuente.Empresa.GNOpcion.ObtenerValor("EleAplicaAnti")
    End If
'
    'Cliente /Proveedor
    If mcolPCKardexCopia Is Nothing And GnFuente.CountPCKardex > 0 Then Set mcolPCKardexCopia = New Collection
    BorrarPCKardexCopia
    For i = 1 To GnFuente.CountPCKardex
        If GnFuente.PCKardex(i).Codelemento = Elemento Then
            Set pck = GnFuente.PCKardex(i).Clone
            Set pck.GNComprobante = Me
            mcolPCKardexCopia.Add pck
        End If
    Next i
End Sub

Public Sub BorrarPCKardexCopia()
    'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BorrarPCKardex", MSGERR_SOLOVER
    If mcolPCKardexCopia Is Nothing Then Set mcolPCKardexCopia = New Collection
    With mcolPCKardexCopia
        Do While .Count > 0
            .Remove .Count
        Loop
    End With
    mbooModificado = True
End Sub

Public Sub RemovePCKardexCopia(ByVal ix As Long, Optional obj As PCKardex)
    Dim Trans As String
   'Cuando SoloVer está establecido a True, genera error
'    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemovePCKardex", MSGERR_SOLOVER
 '   If mcolPCKardexCopia Is Nothing Then RecuperaPCKardex
   'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolPCKardexCopia.Count
            If mcolPCKardexCopia.item(ix) Is obj Then Exit For
        Next ix
    Else
        Set obj = mcolPCKardexCopia.item(ix)
    End If
    'Elimina de la colección
    If mcolPCKardexCopia.Count >= ix Then mcolPCKardexCopia.Remove ix
    'mbooModificado = True
End Sub

Public Property Get CountPCKardexCopia() As Long
    'If mcolPCKardex Is Nothing Then RecuperaPCKardex
    CountPCKardexCopia = mcolPCKardexCopia.Count
End Property

Public Property Get PCKardexCopia(ix As Long) As PCKardex
    If mcolPCKardexCopia Is Nothing Then RecuperaPCKardex
    Set PCKardexCopia = mcolPCKardexCopia.item(ix)
End Property

Public Sub AprobacionAutomaticaTransPresup()
Dim sql As String
        sql = "UPDATE GNComprobante SET Estado=" & ESTADO_APROBADO & _
              " WHERE (TransID=" & Me.transid & ") AND (Estado=" & ESTADO_NOAPROBADO & ")"
        Me.Empresa.Execute sql, True
        Me.Estado = 1
End Sub


Public Property Let EstadoRevision(ByVal value As Byte)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.EstadoRevision", MSGERR_SOLOVER
        mProps.EstadoRevision = value
        mbooModificado = True
End Property

Public Property Get EstadoRevision() As Byte
    EstadoRevision = mProps.EstadoRevision
End Property

Public Property Let EstadoCertifica(ByVal value As Byte)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.EstadoCertifica", MSGERR_SOLOVER
        mProps.EstadoCertifica = value
        mbooModificado = True
End Property

Public Property Get EstadoCertifica() As Byte
    EstadoCertifica = mProps.EstadoCertifica
End Property


Public Property Let EstadoFacElect(ByVal value As Byte)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.Estado", MSGERR_SOLOVER
    
    'Cuando intenta cambiar el estado
    If value <> mProps.EstadoFacElect Then
        mProps.EstadoFacElect = value
        mbooModificado = True
    End If
End Property

Public Property Get EstadoFacElect() As Byte
    EstadoFacElect = mProps.EstadoFacElect
End Property

Public Function RecuperaIVGrupoTransImpresion(transid As Long, ByVal NumGrupo As Integer) As Variant
    Dim sql As String, rs As Recordset
    sql = " select codgrupo" & NumGrupo & "  from gncomprobante g"
    sql = sql & " inner join ivkardex ivk"
    sql = sql & " inner join ivinventario ivi"
    sql = sql & " left join IVGrupo" & NumGrupo & " ivg on ivi.IdGrupo" & NumGrupo & "=ivg.IdGrupo" & NumGrupo
    sql = sql & " on ivk.IdInventario = ivi.IdInventario"
    sql = sql & " on g.transid = ivk.transid"
    sql = sql & " Where g.transid = " & transid
    sql = sql & " group by codgrupo" & NumGrupo
    sql = sql & " order by codgrupo" & NumGrupo
    
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaIVGrupoTransImpresion = rs
    Set rs = Nothing
    
End Function
'AUC imprime fechavenci de primera y utlima cuota
Public Function PCkarderFechaPriUltCuota(ByVal band As Boolean, ByVal cod As String) As Date
    Dim sql As String, rs As Recordset
    On Error GoTo CapturaError
    'band = true 'fecha primera cuota
    'band = false 'fecha ultima cuota
    sql = "Select top 1 fechavenci From pckardex pck Inner Join tsformacobropago ts on ts.idforma = pck.idforma "
    sql = sql & " Where ts.codforma = '" & cod & "' "
    sql = sql & " And transid = " & Me.transid
    If band Then
        sql = sql & " Order by fechavenci "
    Else
        sql = sql & " Order by fechavenci desc "
    End If
    Set rs = Me.Empresa.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        PCkarderFechaPriUltCuota = rs!FechaVenci
    End If
    Set rs = Nothing
Exit Function
CapturaError:
    PCkarderFechaPriUltCuota = 0
    MsgBox Err.Description
    Exit Function
End Function
Public Function PCkarderCuota(ByVal band As Boolean, ByVal cod As String) As Currency
    Dim sql As String, rs As Recordset
    Dim v As Variant
    Dim Cap As Currency
    Dim Inte As Currency
    On Error GoTo CapturaError
    v = Split(cod, ",")
    sql = "Select top 1 Debe From pckardex pck Inner Join tsformacobropago ts on ts.idforma = pck.idforma "
    sql = sql & " Where ts.codforma = '" & v(0) & "' "
    sql = sql & " And transid = " & Me.transid
    Set rs = Me.Empresa.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        Cap = rs!Debe
    End If
    Set rs = Nothing
    'SACA CUOTA INTERES 'VER  DESPUE SI SE PUEDE SACAR DE LA TABLA PCKCARDEXAMORT
    sql = "Select top 1 debe From pckardex pck Inner Join tsformacobropago ts on ts.idforma = pck.idforma "
    sql = sql & " Where ts.codforma = '" & v(1) & "' "
    sql = sql & " And transid = " & Me.transid
    Set rs = Me.Empresa.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        Inte = rs!Debe
    End If
    Set rs = Nothing
    PCkarderCuota = Cap + Inte
    Exit Function
CapturaError:
    PCkarderCuota = 0
    MsgBox Err.Description
    Exit Function
End Function


Private Sub GrabarDatosElectronicos()
    Dim sql As String, rs As Recordset
    Dim AuxDesc As Integer
        'Recupera el registro correspondiente para modificar
        sql = "SELECT * FROM InfoComprobantes WHERE TransID=" & mProps.transid
        Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
        If Not rs.EOF Then
            #If DAOLIB Then
                rs.Edit
            #End If
        Else
            sql = "SELECT * FROM InfoComprobantes WHERE 1=0"
            Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
            rs.AddNew
        End If
        
    With rs
        !transid = mProps.transid                       'Es el mismo asignado a GnComprobante
        mProps.ClaveAcceso = GeneraClaveAccesoParaComprobanteElectronico
        !ClaveAcceso = mProps.ClaveAcceso
        !ArchivoXML = mProps.ArchivoXML
        !Enviado = mProps.Enviado
        !CodigoMensaje = mProps.CodigoMensaje
        !InformacionAdicional = mProps.InformacionAdicional
'        !TipoEmision = mProps.TipoEmision
        !NumeroAutorizacion = mProps.NumeroAutorizacion
        !FechaAutorizacion = mProps.FechaAutorizacion
        !BandAutorizado = mProps.BandAutorizado
        !TipoAmbiente = IIf(Me.GNTrans.IVAmbientePruebaFE, "1", "2")
        !TipoEmision = "1"
        mProps.TipoEmision = "1"
        !BandPdf = "0"
        !NombreUsuarioPC = Me.Empresa.NombreUsuarioPC
        .Update
        #If DAOLIB Then
                rs.Bookmark = rs.LastModified
        #End If
        .Move 0             'Para actualizar
        .Close
    End With
End Sub


Public Sub RecuperarDatosElectronicos(Optional ByVal transid As Long)
    Dim sql As String, rs As Recordset
    If transid = 0 Then transid = mProps.transid
    sql = "SELECT * FROM InfoComprobantes "

    sql = sql & " Where transid = " & transid
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
   If rs.EOF Then Exit Sub
    With rs
        If Not IsNull(!ClaveAcceso) Then mProps.ClaveAcceso = !ClaveAcceso
        If Not IsNull(!ArchivoXML) Then mProps.ArchivoXML = !ArchivoXML
        If Not IsNull(!Enviado) Then mProps.Enviado = !Enviado
        If Not IsNull(!CodigoMensaje) Then mProps.CodigoMensaje = !CodigoMensaje
        If Not IsNull(!InformacionAdicional) Then
            If .Fields("InformacionAdicional").ActualSize > 0 Then
                mProps.InformacionAdicional = .Fields("InformacionAdicional").GetChunk(.Fields("InformacionAdicional").ActualSize)
            End If
        End If
        If Not IsNull(!TipoEmision) Then mProps.TipoEmision = !TipoEmision
        If Not IsNull(!NumeroAutorizacion) Then mProps.NumeroAutorizacion = !NumeroAutorizacion
        If Not IsNull(!FechaAutorizacion) Then mProps.FechaAutorizacion = !FechaAutorizacion
        If Not IsNull(!TipoAmbiente) Then mProps.TipoAmbiente = !TipoAmbiente
        If Not IsNull(!BandAutorizado) Then mProps.BandAutorizado = !BandAutorizado
       .Close
    End With
    Set rs = Nothing
End Sub




Public Property Let ClaveAcceso(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.ClaveAcceso", MSGERR_SOLOVER
    
    If Len(value) > 50 Then
        'Err.Raise ERR_INVALIDO, "GNComprobante.Nombre", MSGERR_INVALIDO
        value = Mid$(value, 1, 50)
    End If
    
    'Solo cuando cambia el valor
    If mProps.ClaveAcceso <> value Then
        mProps.ClaveAcceso = value
        mbooModificado = True
    End If
End Property

'*** MAKOTO 05/feb/01 Agregado
Public Property Get ClaveAcceso() As String
    ClaveAcceso = Trim$(mProps.ClaveAcceso)
End Property

Public Property Let ArchivoXML(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.ArchivoXML", MSGERR_SOLOVER
    
    value = Mid$(value, 1, 50)
    
    'Solo cuando cambia el valor
    If mProps.ArchivoXML <> value Then
        mProps.ArchivoXML = value
        mbooModificado = True
    End If
End Property

'*** MAKOTO 05/feb/01 Agregado
Public Property Get ArchivoXML() As String
    ArchivoXML = Trim$(mProps.ArchivoXML)
End Property

Public Property Let Enviado(ByVal value As Byte)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.Enviado", MSGERR_SOLOVER
        mProps.Enviado = value
        mbooModificado = True
End Property

Public Property Get Enviado() As Byte
    Enviado = mProps.Enviado
End Property

Public Property Let CodigoMensaje(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.CodigoMensaje", MSGERR_SOLOVER
    
    value = Mid$(value, 1, 4)
    
    'Solo cuando cambia el valor
    If mProps.CodigoMensaje <> value Then
        mProps.CodigoMensaje = value
        mbooModificado = True
    End If
End Property

'*** MAKOTO 05/feb/01 Agregado
Public Property Get CodigoMensaje() As String
    CodigoMensaje = Trim$(mProps.CodigoMensaje)
End Property

Public Property Let InformacionAdicional(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.InformacionAdicional", MSGERR_SOLOVER
    
        
    'Solo cuando cambia el valor
    If mProps.InformacionAdicional <> value Then
        mProps.InformacionAdicional = value
        mbooModificado = True
    End If
End Property

'*** MAKOTO 05/feb/01 Agregado
Public Property Get InformacionAdicional() As String
    InformacionAdicional = Trim$(mProps.InformacionAdicional)
End Property

Public Property Let TipoEmision(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.TipoEmision", MSGERR_SOLOVER
    
    value = Mid$(value, 1, 1)
    
    'Solo cuando cambia el valor
    If mProps.TipoEmision <> value Then
        mProps.TipoEmision = value
        mbooModificado = True
    End If
End Property

'*** MAKOTO 05/feb/01 Agregado
Public Property Get TipoEmision() As String
    TipoEmision = Trim$(mProps.TipoEmision)
End Property


Public Property Let NumeroAutorizacion(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.NumeroAutorizacion", MSGERR_SOLOVER
    
    value = Mid$(value, 1, 40)
    
    'Solo cuando cambia el valor
    If mProps.NumeroAutorizacion <> value Then
        mProps.NumeroAutorizacion = value
        mbooModificado = True
    End If
End Property

'*** MAKOTO 05/feb/01 Agregado
Public Property Get NumeroAutorizacion() As String
    NumeroAutorizacion = Trim$(mProps.NumeroAutorizacion)
End Property

    Public Property Let FechaAutorizacion(ByVal value As Date)
        'Cuando SoloVer está establecido a True, genera error
        If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.FechaAutorizacion", MSGERR_SOLOVER
        
        If mProps.FechaAutorizacion <> value Then
            mProps.FechaAutorizacion = value
            mbooModificado = True
        End If
    End Property
    
    '*** MAKOTO 05/feb/01 Agregado
    Public Property Get FechaAutorizacion() As Date
        FechaAutorizacion = Trim$(mProps.FechaAutorizacion)
    End Property
    
Public Function RecuperaVTConciliacionCarteraOrden(transid As Long) As Variant
   Dim sql As String, rs As Recordset
    sql = "select "
    sql = sql & " transid , TransidDoc, FechaTrans, " ' CodTrans,
    sql = sql & " Trans, Numletra, ruc, Nombre,direccion1, telefono1, "
    sql = sql & " codvendedor, Vendedor,Haber, Saldo, '1' as BandConciliado, "
    sql = sql & " 0 as SaldoConfirmado ,Orden, RutaAsignada,''RutaNueva ,ordenvisita"
   sql = sql & " from VWVTKardexConciliacionCartera  "
    sql = sql & " Where transidPadre = " & transid
    sql = sql & " ORDER BY Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    RecuperaVTConciliacionCarteraOrden = MiGetRows(rs) 'rs
    Set rs = Nothing
End Function

'AucIMPRIME TODO CUENTAS POR COBRAR X TRANS EN varias LINEAS
Public Function PCkarderDebePorLineas(ByVal cod As String, ByVal Lin As Integer) As String
    Dim i As Long, pck As PCKardex
    Dim s As String
    Dim Debe As Currency
    Dim cad As String
    Dim v As Variant
     v = Split(cod, ",")
    s = ""
    For i = 1 To CountPCKardex
        Set pck = PCKardex(i)
        'If pck.CodForma = V(0) Then 'Or pck.CodForma = V(1) Then
            'se tiene que sumar las letras pendiente.
            s = s & pck.CodForma & ": " & Format(pck.ValorCapital + pck.ValorInteres, Me.Empresa.GNOpcion.FormatoCantidad) & "->" & Format(pck.FechaVenci, Me.Empresa.GNOpcion.FormatoFecha) & "; "
 '       End If
    Next i
    s = Left(s, Len(s) - 2)
    PCkarderDebePorLineas = s
    Set pck = Nothing
End Function
Public Property Get CountPCKardex2COL() As Long
    If mcolPCKardex Is Nothing Then RecuperaPCKardex2Col
    CountPCKardex2COL = mcolPCKardex.Count
End Property
Private Sub RecuperaPCKardex2Col()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
    Dim CodFormaCap As String
    Dim CodFormaInt As String
   'para yolita
   mod_antes = mbooModificado         'Guarda el estado de Modificado
    If mcolPCKardex Is Nothing Then Set mcolPCKardex = New Collection
    'Recupera los PCKardex
    BorrarPCKardex
    CodFormaCap = Me.Empresa.GNOpcion.ObtenerValor("FornmaCobroOtrasCuotas")
    CodFormaInt = Me.Empresa.GNOpcion.ObtenerValor("FormaCobroCuotaInt")
    VerificaExistenciaTabla 102
    sql = "SELECT * into tmp102 FROM vwPCKardex  WHERE  TransID=" & mProps.transid
    'sql = sql & " AND (orden%2) = 0" 'separao pares
    sql = sql & " AND codforma = '" & CodFormaInt & "'"
    mProps.objEmpresa.EjecutarSQL sql, 1
'    sql = " SELECT * FROM TMP102 order by orden"
'    Set rs = mProps.objEmpresa.OpenRecordset(sql)
'    i = 1
'    Do While Not rs.EOF
'           ' rs.MoveFirst
'            sql = "Update tmp102 set ordencuota = " & i
'           sql = sql & " Where ID = " & rs!Id
'            mProps.objEmpresa.EjecutarSQL sql, 1
'            rs.MoveNext
'            i = i + 1
'    Loop
    VerificaExistenciaTabla 103
    sql = "SELECT * into tmp103 FROM vwPCKardex  WHERE  TransID=" & mProps.transid
    'sql = sql & " AND (orden%2) <> 0" 'separao impares
    sql = sql & " AND codforma <> '" & CodFormaInt & "'"
    mProps.objEmpresa.EjecutarSQL sql, 1
'    sql = " SELECT * FROM TMP103 order by orden"
'    Set rs = mProps.objEmpresa.OpenRecordset(sql)
'    i = 1
'    Do While Not rs.EOF
'           ' rs.MoveFirst
'            sql = "Update tmp103 set ordencuota = " & i
'           sql = sql & " Where ID = " & rs!Id
'            mProps.objEmpresa.EjecutarSQL sql, 1
'            rs.MoveNext
'            i = i + 1
'    Loop
   sql = "SELECT T2.Id as idpar,T2.TransID as transidpar,t2.IdProvCli as idProvcliPar,t2.IdForma as idFormaPar,t2.IdAsignado as idAsignadoPar,t2.NumLetra as numLetraPar,"
    sql = sql & "t2.Debe as debePar,t2.Haber  as HaberPar,t2.FechaEmision as FechaEmisionPar,t2.FechaVenci as FechaVenciPar,t2.Observacion as ObsPar,"
    sql = sql & "t2.guid as guidPar,t2.IdVendedor as idVendedorPar,t2.IdCobrador as idCobradorPar,t2.codforma as codFormaPar,"
    sql = sql & "t2.ValorCapital as ValorCapitalPar,t2.ValorInteres as ValorIntPar,"
    sql = sql & "T3.Id as idimpar,T3.TransID as transidimpar,t3.IdProvCli as idProvcliimPar,t3.IdForma as idFormaimPar,t3.IdAsignado as idAsignadoimPar,t3.NumLetra as numLetraimPar,"
    sql = sql & "t3.Debe as debeimPar,t3.Haber  as HaberimPar,t3.FechaEmision as FechaEmisionimPar,t3.FechaVenci as FechaVenciimPar,t3.Observacion as ObsimPar,"
    sql = sql & "t3.guid as guidimPar,t3.IdVendedor as idVendedorimPar,t3.IdCobrador as idCobradorimPar,t3.codforma as codFormaimPar,"
    sql = sql & "t3.ValorCapital as ValorCapitalimPar,t3.ValorInteres as ValorIntimPar,"
    'sql = sql & "t2.Orden as OrdenPar,t3.Orden as OrdenImPar"
   ' sql = sql & " FROM TMP102 t2 full JOIN TMP103 t3 ON t3.ORDENcuota = t2.ORDENcuota"
    sql = sql & "t2.Orden as OrdenPar,t3.Orden as OrdenImPar,(t2.debe+t3.debe) as Cuota"
    sql = sql & " FROM TMP102 t2 full JOIN TMP103 t3 ON t3.ORDENcuota_a = t2.ORDENcuota_a"
    
   Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !IdimPar > 0 Then                 'Para asegurar el Bug de ADO
                i = AddPCKardex
                PCKardex(i).Recuperar2Col rs
            End If
            .MoveNext
        Loop
       .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub

Public Sub RemovePCKardex2Col(ByVal ix As Long, Optional obj As PCKardex)
    Dim Trans As String
   'Cuando SoloVer está establecido a True, genera error
    'If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemovePCKardex", MSGERR_SOLOVER
    If mcolPCKardex Is Nothing Then RecuperaPCKardex
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolPCKardex.Count
            If mcolPCKardex.item(ix) Is obj Then Exit For
        Next ix
    Else
        Set obj = mcolPCKardex.item(ix)
    End If
    'Elimina de la colección
    If mcolPCKardex.Count >= ix Then mcolPCKardex.Remove ix
    If mcolPCKardex.Count = 0 Then Set mcolPCKardex = Nothing
'    mbooModificado = True
End Sub


Public Sub ActualizaDatosComprobanteElectronico(ByVal ClaveAcceso As String, ByVal ArchivoXML As String, _
                                                                                ByVal Enviado As Boolean, ByVal InformacionAdicional As String, _
                                                                                ByVal TipoEmision As String, ByVal NumeroAutorizacion As String, _
                                                                                ByVal FechaAutorizacion As Date, ByVal transid As Long)
Dim sql As String, rs As Recordset
    
    sql = " Update InfoComprobantes set ClaveAcceso='" & ClaveAcceso & "',"
    sql = sql & " ArchivoXML='" & ArchivoXML & "',"
    sql = sql & " Enviado=" & Enviado & ","
    sql = sql & " CodigoMensaje='" & CodigoMensaje & "',"
    sql = sql & " InformacionAdicional='" & InformacionAdicional & "',"
    sql = sql & " TipoEmision='" & TipoEmision & "',"
    sql = sql & " NumeroAutorizacion='" & NumeroAutorizacion & "',"
    sql = sql & " FechaAutorizacion='" & FechaAutorizacion & "'"
    sql = sql & " where transid=" & transid
    
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    
    If Len(NumeroAutorizacion) > 0 Then
        sql = " Update gnComprobante set estadoFacElec='" & ClaveAcceso & "',"
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
        sql = sql & " where transid=" & transid
    End If
    
End Sub

Private Function GeneraClaveAccesoParaComprobanteElectronico() As String
    Dim Ruta As String, cadClave As String, ClaveNombre As String, ValorMod As Integer, TOTAL As Integer, i As Integer, total1 As Integer
    Dim EsNuevo As Boolean, file As String
    
    cadClave = ""
    cadClave = Format(DatePart("d", Date), "00") & Format(DatePart("m", Date), "00") & DatePart("yyyy", Date)
    Select Case Me.GNTrans.AnexoCodTipoComp
    Case 18
        cadClave = cadClave & "01"
    Case 4
        cadClave = cadClave & "04"
    Case 5
        cadClave = cadClave & "05"
    Case 6
        cadClave = cadClave & "06"
    Case 7
        cadClave = cadClave & "07"
    
    End Select
    
    cadClave = cadClave & Me.Empresa.GNOpcion.RUC
'    If Me.Empresa.GNOpcion.TipoAmbiente = "1" Then
'        cadClave = cadClave & "1"
'    Else
'        cadClave = cadClave & "2"
'    End If
    
'    If Me.GNTrans.IVAmbientePruebaFE Then
'        cadClave = cadClave & "1"
'    Else
'        cadClave = cadClave & "2"
'    End If
    
    cadClave = cadClave & Me.TipoAmbiente
    cadClave = cadClave & Me.NumSerieEstaSRI
    cadClave = cadClave & Me.NumSeriePuntoSRI
    cadClave = cadClave & Right("000000000" + Trim(Str(Me.NumTrans)), 9)
    cadClave = cadClave & "00000000"
    cadClave = cadClave & "1"
    ValorMod = 2
    TOTAL = 0
    For i = 48 To 1 Step -1
        TOTAL = TOTAL + (Mid$(cadClave, i, 1) * ValorMod)
        ValorMod = ValorMod + 1
        If ValorMod > 7 Then ValorMod = 2
    Next i
    total1 = TOTAL Mod 11
    TOTAL = 11 - total1
    If TOTAL = 10 Then
        TOTAL = 1
    ElseIf TOTAL = 11 Then
        TOTAL = 0
    End If
    cadClave = cadClave & Trim$(Str(TOTAL))
    GeneraClaveAccesoParaComprobanteElectronico = cadClave
End Function

Public Property Let BandAutorizado(ByVal value As Byte)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BandAutorizado", MSGERR_SOLOVER
        mProps.BandAutorizado = value
        mbooModificado = True
End Property

Public Property Get BandAutorizado() As Byte
    BandAutorizado = mProps.BandAutorizado
End Property

Public Property Let TipoAmbiente(ByVal value As Byte)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.TipoAmbiente", MSGERR_SOLOVER
    mProps.TipoAmbiente = value
    mbooModificado = True

End Property

Public Property Get TipoAmbiente() As Byte
    TipoAmbiente = mProps.TipoAmbiente
End Property

Public Function RecuperaVentasCobroNoEfectivoxUsuario() As Variant
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean

    
    'sql = "SELECT distinct "
    sql = "SELECT "
    sql = sql & " G.TRANSID, G.CodTrans + ' ' + CONVERT(varchar, NumTrans)    AS Trans,    pc.nombre, "
    'p.haber as valor, p.numletra
    ' cambiado por que en lira hay problemas varios depositos
    sql = sql & " tsk.debe as valor , tsk.numdoc as numletra"
    sql = sql & " FROM GNCOMPROBANTE G inner join gntrans gt on g.codtrans=gt.codtrans"
    sql = sql & " inner join pcprovcli pc on  g.idclienteref=pc.idprovcli"
    sql = sql & " INNER JOIN PCKARDEX P"
    sql = sql & " inner join tsformacobropago tsf on p.idforma=tsf.idforma"
    sql = sql & " ON G.TRANSID=P.TRANSID"
    sql = sql & " inner join tskardex tsk INNER JOIN TSTIPODOCBANCO TST ON TSK.IDTIPODOC=TST.IDTIPODOC on p.transid=tsk.transid"
    sql = sql & " Where G.ESTADO<>3     "

    If GNTrans.TSUtilizaFechaGrabado Then
        sql = sql & " AND (g.FechaGrabado between '" & Me.FechaTrans & " 00:00:00' AND '" & Me.FechaTrans & " 23:59:59' ) "
    Else
        sql = sql & " AND FECHATRANS BETWEEN '" & Me.FechaTrans & "' AND '" & Me.FechaTrans & "'"
    End If
    'sql = sql & " AND CODUSUARIO='" & Me.codUsuario & "'"
    'If Not Me.GNTrans.TSunirCobrosFacturas Then
    If Not Me.GNTrans.CierrePorTrans Then
        sql = sql & " AND CODUSUARIO='" & Me.codUsuario & "'"
    End If
    
    sql = sql & " and gt.modulo<>'iv'"
    sql = sql & " and afectasaldopc=1"
    sql = sql & " and p.haber>0"
    sql = sql & " and AnexoCodTipoComp<>7 and gt.codpantalla <>'TSIEE' and  tsT.CODTIPODOC<>'EF-I' AND tsT.CODTIPODOC<>'EFEC'"
    If Me.EsNuevo Then
        sql = sql & " and g.transid not in( select IdTransRef from TSDetalleIngreso tsd inner join gncomprobante g on tsd.transid=g.transid where g.estado<>3)"
    End If
    

    
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    
    Set RecuperaVentasCobroNoEfectivoxUsuario = rs
    Set rs = Nothing

End Function

Public Function RecuperaVentasCobroNoEfectivoxSucursal() As Variant
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean

    
'Recupera los registros de TSDetalleCheque
    sql = "SELECT distinct "
    sql = sql & " G.TRANSID, G.CodTrans + ' ' + CONVERT(varchar, NumTrans)    AS Trans,    pc.nombre, p.haber as valor, p.numletra"
    sql = sql & " FROM GNCOMPROBANTE G "
    sql = sql & " inner join gntrans gnt "
    sql = sql & " inner join gnsucursal gns "
    sql = sql & " on gnt.idsucursal=gns.idsucursal "
    sql = sql & " on g.codtrans=gnt.codtrans "

    sql = sql & " inner join pcprovcli pc on  g.idclienteref=pc.idprovcli"
    sql = sql & " INNER JOIN PCKARDEX P"
    sql = sql & " inner join tsformacobropago tsf on p.idforma=tsf.idforma"
    sql = sql & " ON G.TRANSID=P.TRANSID"
    sql = sql & " inner join tskardex tsk INNER JOIN TSTIPODOCBANCO TST ON TSK.IDTIPODOC=TST.IDTIPODOC on p.transid=tsk.transid"
    sql = sql & " Where G.ESTADO<>3     "

    If GNTrans.TSUtilizaFechaGrabado Then
        sql = sql & " AND (g.FechaGrabado between '" & Me.FechaTrans & " 00:00:00' AND '" & Me.FechaTrans & " 23:59:59' ) "
    Else
        sql = sql & " AND FECHATRANS BETWEEN '" & Me.FechaTrans & "' AND '" & Me.FechaTrans & "'"
    End If
    sql = sql & " AND CODsucursal='" & Me.GNTrans.CodSucursal & "'"
    sql = sql & " and gnt.modulo<>'iv'"
    sql = sql & " and gnt.codpantalla<>'TSIEE'"
    sql = sql & " and afectasaldopc=1"
    sql = sql & " and p.haber>0"
    sql = sql & " and AnexoCodTipoComp<>7  and tsT.CODTIPODOC<>'EF-I' AND tsT.CODTIPODOC<>'EFEC'"
    sql = sql & " "
    If Me.EsNuevo Then
        sql = sql & " and g.transid not in( select IdTransRef from TSDetalleIngreso tsd inner join gncomprobante g on tsd.transid=g.transid where g.estado<>3)"
    End If

    
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    
    Set RecuperaVentasCobroNoEfectivoxSucursal = rs
    Set rs = Nothing

End Function

Public Property Let idSolCredito(ByVal value As Long)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.IdSolCredito", MSGERR_SOLOVER
    mProps.idSolCredito = value
    mbooModificado = True
End Property

Public Property Get idSolCredito() As Long
    idSolCredito = mProps.idSolCredito
End Property

Public Property Let AprobadaSolCre(ByVal value As Boolean)
    mProps.AprobadaSolCre = value
    mbooModificado = True
End Property

Public Property Get AprobadaSolCre() As Boolean
    AprobadaSolCre = mProps.AprobadaSolCre
End Property

Public Function RecuperaTSDetalleCobrosCierreCajaImpresion(transid As Long) As Variant
    Dim sql As String, rs As Recordset
    
       
    sql = " select codtrans+'-'+convert(varchar, numtrans) as trans,"
    sql = sql & " RUC , pc.Nombre, Valor"
    sql = sql & " from TSDetalleIngreso tsd"
    sql = sql & " inner join gncomprobante g"
    sql = sql & " inner join pcprovcli pc"
    sql = sql & " on ( g.idclienteref = pc.idprovcli or g.idproveedorref = pc.idprovcli )"
    sql = sql & " on g.transid=tsd.idtransref"
    sql = sql & " Where tsd.transid = " & transid
    sql = sql & " order by codtrans, numtrans"
    
    


    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaTSDetalleCobrosCierreCajaImpresion = rs
    Set rs = Nothing
End Function

Public Function RecuperaTSDetalleCobrosNoEefectivoCierreCajaImpresion(transid As Long) As Variant
    Dim sql As String, rs As Recordset
    
       
    sql = " select codtrans+'-'+convert(varchar, numtrans) as trans,"
    sql = sql & " RUC , pc.Nombre, Valor"
    sql = sql & " from TSDetalleVManuales tsd"
    sql = sql & " inner join gncomprobante g"
    sql = sql & " inner join pcprovcli pc"
    sql = sql & " on g.idclienteref = pc.idprovcli"
    sql = sql & " on g.transid=tsd.idtransref"
    sql = sql & " Where tsd.transid = " & transid
    sql = sql & " order by codtrans, numtrans"
    
    


    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaTSDetalleCobrosNoEefectivoCierreCajaImpresion = rs
    Set rs = Nothing
End Function

Public Function RecuperaTSDetalleRetencionesCierreCajaImpresion(transid As Long) As Variant
    Dim sql As String, rs As Recordset
    
       
    sql = " select codtrans+'-'+convert(varchar, numtrans) as trans,"
    sql = sql & " RUC , pc.Nombre, Valor"
    sql = sql & " from TSDetalleIngresoRT tsd"
    sql = sql & " inner join gncomprobante g"
    sql = sql & " inner join pcprovcli pc"
    sql = sql & " on g.idclienteref = pc.idprovcli"
    sql = sql & " on g.transid=tsd.idtransref"
    sql = sql & " Where tsd.transid = " & transid
    sql = sql & " order by codtrans, numtrans"
    
    


    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaTSDetalleRetencionesCierreCajaImpresion = rs
    Set rs = Nothing
End Function

Public Function RecuperaTSDetalleVentaChequeCorrienteCierreCajaImpresion(transid As Long) As Variant
    Dim sql As String, rs As Recordset
    
       
    sql = " select codtrans+'-'+convert(varchar, numtrans) as trans,"
    sql = sql & " RUC , pc.Nombre, Valor,  Codbanco, numdoc "
    sql = sql & " from TSDetalleCheque tsd"
    sql = sql & " inner join gncomprobante g"
    sql = sql & " inner join pcprovcli pc"
    sql = sql & " on g.idclienteref = pc.idprovcli"
    sql = sql & " on g.transid=tsd.idtransref"
    sql = sql & " inner join ivbanco ivb on tsd.idbanco= ivb.idbanco "
    sql = sql & " Where tsd.transid = " & transid
    sql = sql & " order by codtrans, numtrans"
    
    


    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaTSDetalleVentaChequeCorrienteCierreCajaImpresion = rs
    Set rs = Nothing
End Function


Public Function RecuperaTSDetalleVentaChequePosfechadoCierreCajaImpresion(transid As Long) As Variant
    Dim sql As String, rs As Recordset
    
       
    sql = " select codtrans+'-'+convert(varchar, numtrans) as trans,"
    sql = sql & " RUC , pc.Nombre, Valor, Codbanco, numdoc"
    sql = sql & " from TSDetalleChequePosf tsd"
    sql = sql & " inner join gncomprobante g"
    sql = sql & " inner join pcprovcli pc"
    sql = sql & " on g.idclienteref = pc.idprovcli"
    sql = sql & " on g.transid=tsd.idtransref"
    sql = sql & " inner join ivbanco ivb on tsd.idbanco= ivb.idbanco "
    sql = sql & " Where tsd.transid = " & transid
    sql = sql & " order by codtrans, numtrans"
    
    


    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaTSDetalleVentaChequePosfechadoCierreCajaImpresion = rs
    Set rs = Nothing
End Function


Public Function RecuperaTSDetalleVentaTarjetasCierreCajaImpresion(transid As Long) As Variant
    Dim sql As String, rs As Recordset
    
       
    sql = " select codtrans+'-'+convert(varchar, numtrans) as trans,"
    sql = sql & " RUC , pc.Nombre, Valor, ivt.descripcion, numdoc"
    sql = sql & " from TSDetalleTarjeta tsd"
    sql = sql & " inner join gncomprobante g"
    sql = sql & " inner join pcprovcli pc"
    sql = sql & " on g.idclienteref = pc.idprovcli"
    sql = sql & " on g.transid=tsd.idtransref"
    sql = sql & " inner join ivtarjeta ivt on tsd.idtarjeta= ivt.idtarjeta "
    sql = sql & " Where tsd.transid = " & transid
    sql = sql & " order by codtrans, numtrans"
    
    


    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaTSDetalleVentaTarjetasCierreCajaImpresion = rs
    Set rs = Nothing
End Function


Public Function RecuperaTSDetalleVentaCreditoCierreCajaImpresion(transid As Long) As Variant
    Dim sql As String, rs As Recordset
    
       
    sql = " select codtrans+'-'+convert(varchar, numtrans) as trans,"
    sql = sql & " RUC , pc.Nombre, Valor"
    sql = sql & " from TSDetalleVCredito tsd"
    sql = sql & " inner join gncomprobante g"
    sql = sql & " inner join pcprovcli pc"
    sql = sql & " on g.idclienteref = pc.idprovcli"
    sql = sql & " on g.transid=tsd.idtransref"
    sql = sql & " Where tsd.transid = " & transid
    sql = sql & " And BandRet = 0"
    sql = sql & " order by codtrans, numtrans"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaTSDetalleVentaCreditoCierreCajaImpresion = rs
    Set rs = Nothing
End Function

Public Function RecuperaTSDetalleVentaFectivoCierreCajaImpresion(transid As Long) As Variant
    Dim sql As String, rs As Recordset
    
    sql = " select gncf.codtrans+'-'+convert(varchar, gncf.numtrans) as trans, RUC , pc.Nombre, pck.haber as valor"
    sql = sql & " from gncomprobante gnc"
    sql = sql & " inner join pckardex pck"
    sql = sql & " inner join pckardex pckf"
    sql = sql & " inner join gncomprobante gncf"
    sql = sql & " on pckf.transid= gncf.transid"
    sql = sql & " on pck.idasignado=pckf.id"
    sql = sql & " inner join pcprovcli pc on pck.idprovcli=pc.idprovcli"
    sql = sql & " on gnc.transid= pck.transid"
    sql = sql & " Where gnc.transid = " & transid
    sql = sql & " order by gncf.codtrans, gncf.numtrans"
    


    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaTSDetalleVentaFectivoCierreCajaImpresion = rs
    Set rs = Nothing
End Function


Public Function RecuperaTSDetalleBilletesCierreCajaImpresion(transid As Long) As Variant
    Dim sql As String, rs As Recordset
    
       
    sql = " select "
    sql = sql & " Case Tsd.Orden"
    sql = sql & " when  1 then 'Billetes 100 dólares'"
    sql = sql & " when  2 then  'Billetes  50 dólares'"
    sql = sql & " when  3 then  'Billetes  20 dólares'"
    sql = sql & " when  4 then  'Billetes  10 dólares'"
    sql = sql & " when  5 then  'Billetes   5 dólares'"
    sql = sql & " when  6 then  'Billetes   1 dolar'"
    sql = sql & " when  7 then  'Monedas 1 dolar'"
    sql = sql & " when  8 then  'Monedas 0.50 ctvs'"
    sql = sql & " when  9 then  'Monedas 0.25 ctvs'"
    sql = sql & " when  10 then 'Monedas 0.10 ctvs'"
    sql = sql & " when  11 then 'Monedas 0.05 ctvs'"
    sql = sql & " when  12 then  'Monedas 0.01 ctv'"
    sql = sql & " end as trans, "
    sql = sql & " cantidad , Valor, cantidad * Valor as Total"
    sql = sql & " from TSDetalleEfectivo tsd"
    sql = sql & " Where tsd.transid = " & transid
    sql = sql & " order by orden"
    
    


    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaTSDetalleBilletesCierreCajaImpresion = rs
    Set rs = Nothing
End Function


Public Function RecuperaTSDetalleEgresosFectivoCierreCajaImpresion(transid As Long) As Variant
    Dim sql As String, rs As Recordset
    
    sql = " select codtrans+'-'+convert(varchar, numtrans) as trans,"
    sql = sql & " RUC , pc.Nombre, Valor *-1  as valor "
    sql = sql & " from TSDetalleEgreso tsd"
    sql = sql & " inner join gncomprobante g"
    sql = sql & " inner join pcprovcli pc"
    sql = sql & " on g.idProveedorref = pc.idprovcli or g.idClienteRef = pc.idprovcli "
    sql = sql & " on g.transid=tsd.idtransref"
    sql = sql & " Where tsd.transid = " & transid
    sql = sql & " order by codtrans, numtrans"
    


    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaTSDetalleEgresosFectivoCierreCajaImpresion = rs
    Set rs = Nothing
End Function

Public Property Let RequiereTransporte(ByVal value As Boolean)
   Mid$(mProps.Opcion, 2, 1) = IIf(value, "S", "N")
    mbooModificado = True
    
End Property

Public Property Get RequiereTransporte() As Boolean
    RequiereTransporte = (Mid$(Opcion, 2, 1) = "S")
End Property

Public Property Let FechaInicio(value As Date)
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.FechaInicio", MSGERR_SOLOVER
    
    'Solo cuando cambia el valor
    If mProps.FechaInicio <> value Then
        mProps.FechaInicio = value
        mbooModificado = True
    End If
End Property

Public Property Get FechaInicio() As Date
    FechaInicio = mProps.FechaInicio
End Property

Public Property Let FechaFin(value As Date)
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.FechaFin", MSGERR_SOLOVER
    
    'Solo cuando cambia el valor
    If mProps.FechaFin <> value Then
        mProps.FechaFin = value
        mbooModificado = True
    End If
End Property

Public Property Get FechaFin() As Date
    FechaFin = mProps.FechaFin
End Property

Public Property Let IdMotivoGuia(ByVal value As Long)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.IdMotivoGuia", MSGERR_SOLOVER
    
    mProps.IdMotivoGuia = value
    mbooModificado = True
End Property

Public Property Get IdMotivoGuia() As Long
    IdMotivoGuia = mProps.IdMotivoGuia
End Property

Public Property Let CodMotivoGuia(ByVal value As String)
    Dim sql As String, rs As Recordset

    'Cuando cambia el valor
    If value <> mProps.CodMotivoGuia Then
        If Len(value) > 0 Then
            'Actualiza IdMotivoGuia también
            sql = "SELECT IdMotivo FROM IvMotivo WHERE CodMotivo='" & value & "'"
            Set rs = mProps.objEmpresa.OpenRecordset(sql)
            If rs.EOF Then
                Err.Raise ERR_NOHAYCODIGO, "GNComprobante.CodMotivoGuia", MSGERR_NOHAYCODIGO
                Exit Property
            Else
                IdMotivoGuia = rs!IdMotivo
            End If
            rs.Close
            Set rs = Nothing
        Else
            IdMotivoGuia = 0
        End If
        
        mProps.CodMotivoGuia = value
        SetModificado
    End If
End Property

Public Property Get CodMotivoGuia() As String
    CodMotivoGuia = Trim$(mProps.CodMotivoGuia)
End Property

Public Property Let PuntoPartida(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.PuntoPartida", MSGERR_SOLOVER
    
    If Len(value) > 250 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.PuntoPartida", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.PuntoPartida <> value Then
        mProps.PuntoPartida = value
        mbooModificado = True
    End If
End Property

Public Property Get PuntoPartida() As String
    PuntoPartida = Trim$(mProps.PuntoPartida)
End Property

Public Property Let NombreDestino(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.NombreDestino", MSGERR_SOLOVER
    
    If Len(value) > 250 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.NombreDestino", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.NombreDestino <> value Then
        mProps.NombreDestino = value
        mbooModificado = True
    End If
End Property

Public Property Get NombreDestino() As String
    NombreDestino = Trim$(mProps.NombreDestino)
End Property


Public Property Let RucDestino(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RucDestino", MSGERR_SOLOVER
    
    If Len(value) > 250 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.RucDestino", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.RucDestino <> value Then
        mProps.RucDestino = value
        mbooModificado = True
    End If
End Property

Public Property Get RucDestino() As String
    RucDestino = Trim$(mProps.RucDestino)
End Property

Public Property Let DireccionDestino(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.DireccionDestino", MSGERR_SOLOVER
    
    If Len(value) > 250 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.DireccionDestino", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.DireccionDestino <> value Then
        mProps.DireccionDestino = value
        mbooModificado = True
    End If
End Property

Public Property Get DireccionDestino() As String
    DireccionDestino = Trim$(mProps.DireccionDestino)
End Property

Public Property Let NombreTransporte(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.NombreTransporte", MSGERR_SOLOVER
    
    If Len(value) > 250 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.NombreTransporte", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.NombreTransporte <> value Then
        mProps.NombreTransporte = value
        mbooModificado = True
    End If
End Property

Public Property Get NombreTransporte() As String
    NombreTransporte = Trim$(mProps.NombreTransporte)
End Property

Public Property Let RUCTransporte(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RUCTransporte", MSGERR_SOLOVER
    
    If Len(value) > 13 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.RUCTransporte", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.RUCTransporte <> value Then
        mProps.RUCTransporte = value
        mbooModificado = True
    End If
End Property

Public Property Get RUCTransporte() As String
    RUCTransporte = Trim$(mProps.RUCTransporte)
End Property

Public Property Let NombreChofer(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.NombreChofer", MSGERR_SOLOVER
    
    If Len(value) > 250 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.NombreChofer", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.NombreChofer <> value Then
        mProps.NombreChofer = value
        mbooModificado = True
    End If
End Property

Public Property Get NombreChofer() As String
    NombreChofer = Trim$(mProps.NombreChofer)
End Property

Public Property Let RUCChofer(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RUCChofer", MSGERR_SOLOVER
    
    If Len(value) > 13 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.RUCChofer", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.RUCChofer <> value Then
        mProps.RUCChofer = value
        mbooModificado = True
    End If
End Property

Public Property Get RUCChofer() As String
    RUCChofer = Trim$(mProps.RUCChofer)
End Property

Public Property Let Placa(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.Placa", MSGERR_SOLOVER
    
    If Len(value) > 20 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.Placa", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.Placa <> value Then
        mProps.Placa = value
        mbooModificado = True
    End If
End Property

Public Property Get Placa() As String
    Placa = Trim$(mProps.Placa)
End Property

Private Sub GrabarGuia()
    Dim sql As String, rs As Recordset
    Dim AuxDesc As Integer
        'Recupera el registro correspondiente para modificar
        sql = "SELECT * FROM GnGuia WHERE TransID=" & mProps.transid
        Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
        If Not rs.EOF Then
            #If DAOLIB Then
                rs.Edit
            #End If
        Else
            sql = "SELECT * FROM GnGuia WHERE 1=0"
            Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
            rs.AddNew
        End If
        
    With rs
        !transid = mProps.transid                       'Es el mismo asignado a GnComprobante
        !FechaInicio = mProps.FechaInicio
        !FechaFin = mProps.FechaFin
        !TransIdFuente = mProps.IdTransFuente
        !IdMotivo = mProps.IdMotivoGuia
        !PuntoPartida = mProps.PuntoPartida
        !NombreDestino = mProps.NombreDestino
        !RucDestino = mProps.RucDestino
        !DireccionDestino = mProps.DireccionDestino
        !NombreTransporte = mProps.NombreTransporte
        !RUCTransporte = mProps.RUCTransporte
        !NombreChofer = mProps.NombreChofer
        !RUCChofer = mProps.RUCChofer
        !Placa = mProps.Placa
        !PesoCarga = mProps.PesoCarga
        !BultosCarga = mProps.BultosCarga
        !ValorFlete = mProps.ValorFlete
        !GuiaCarga = mProps.GuiaCarga
        
        .Update
        #If DAOLIB Then
                rs.Bookmark = rs.LastModified
        #End If
        .Move 0             'Para actualizar
        .Close
    End With
End Sub

Public Sub RecuperarGuia(Optional ByVal TransIDGnGuia As Long)
    Dim sql As String, rs As Recordset
    If TransIDGnGuia = 0 Then TransIDGnGuia = mProps.transid
    sql = "SELECT GnGuia.*, codmotivo FROM GnGuia left JOIN IvMotivo ON "
    sql = sql & "gnguia.idMotivo = ivmotivo.idMotivo "
    sql = sql & " Where transid = " & TransIDGnGuia
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
   If rs.EOF Then Exit Sub
    With rs
    
        If Not IsNull(!FechaInicio) Then mProps.FechaInicio = !FechaInicio
        If Not IsNull(!FechaFin) Then mProps.FechaFin = !FechaFin
'        If Not IsNull(!TransIdFuenteGuia) Then mProps.TransIdFuenteGuia = !TransIdFuenteGuia
        If Not IsNull(!IdMotivo) Then mProps.IdMotivoGuia = !IdMotivo
        If Not IsNull(!CodMotivo) Then mProps.CodMotivoGuia = !CodMotivo
        If Not IsNull(!PuntoPartida) Then mProps.PuntoPartida = !PuntoPartida
        If Not IsNull(!NombreDestino) Then mProps.NombreDestino = !NombreDestino
        If Not IsNull(!RucDestino) Then mProps.RucDestino = !RucDestino
        If Not IsNull(!DireccionDestino) Then mProps.DireccionDestino = !DireccionDestino
        If Not IsNull(!NombreTransporte) Then mProps.NombreTransporte = !NombreTransporte
        If Not IsNull(!RUCTransporte) Then mProps.RUCTransporte = !RUCTransporte
        If Not IsNull(!NombreChofer) Then mProps.NombreChofer = !NombreChofer
        If Not IsNull(!RUCChofer) Then mProps.RUCChofer = !RUCChofer
        If Not IsNull(!Placa) Then mProps.Placa = !Placa
        If Not IsNull(!PesoCarga) Then mProps.PesoCarga = !PesoCarga
        If Not IsNull(!BultosCarga) Then mProps.BultosCarga = !BultosCarga
        If Not IsNull(!ValorFlete) Then mProps.ValorFlete = !ValorFlete
        If Not IsNull(!GuiaCarga) Then mProps.GuiaCarga = !GuiaCarga
        
        
    
    
       .Close
    End With
    Set rs = Nothing
End Sub
'AUC el tipo de dato de codgrupo esta  mal en la funcion original revisar y reemplazar la anterior
Public Function RecuperaGNCadenaPreciosxCodGrupoNew(ByVal NumGrupo As Integer, CodGrupo As String) As String
Dim rs As Recordset
Dim sql As String
On Error GoTo CapturaError
    sql = "SELECT PreciosDisponibles from pcgrupo" & NumGrupo
    sql = sql & " where codgrupo" & NumGrupo & "='" & CodGrupo & "'"
    Set rs = Me.Empresa.OpenRecordset(sql)
    With rs
     If rs.RecordCount = 0 Then
        RecuperaGNCadenaPreciosxCodGrupoNew = "0000000"
      Else
         RecuperaGNCadenaPreciosxCodGrupoNew = !PreciosDisponibles
      End If
    End With
    Set rs = Nothing
    
   Exit Function
CapturaError:
        MsgBox Err.Description
        Set rs = Nothing
        Exit Function
End Function

Public Function ListaIVKardexImpresion() As Variant
    Set ListaIVKardexImpresion = ListaIVKardexImpresion2(True)
End Function

'*** MAKOTO 16/dic/00 Agregado
Public Function ListaIVKardexImpresion2( _
                    ByVal ExistPorBodega As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As DAO.QueryDef
    
    If ExistPorBodega Then
        Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsIVKardex")
    Else
        Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsIVKardex2")
    End If
    qdef.Parameters("tid") = mProps.transid
    qdef.Parameters("Cotizacion") = Me.Cotizacion("")
    qdef.Parameters("BandEgreso") = (Me.GNTrans.IVTipoTrans = "E")
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Dim cmd As ADODB.Command
    Set cmd = New ADODB.Command
    cmd.ActiveConnection = mProps.objEmpresa.Coneccion
    'Si la base es de JET
    If mProps.objEmpresa.TipoDB = TIPODB_JET Then
        cmd.CommandType = adCmdTable
        If ExistPorBodega Then
            cmd.CommandText = "spConsIVKardex"
        Else
            cmd.CommandText = "spConsIVKardex2"
        End If
        cmd.Parameters.Append cmd.CreateParameter("tid", adInteger, adParamInput, , mProps.transid)
        cmd.Parameters.Append cmd.CreateParameter("Cotizacion", adCurrency, adParamInput, , mProps.Cotizacion)
        Set rs = cmd.Execute
    'Si la base es de SQLSvr
    Else
        If Me.Empresa.GNOpcion.IVKTipoDatoDouble Then
            sql = "spConsIVKardexImpresionDou " & mProps.transid & ", " & _
                                  Me.Cotizacion("") & ", " & _
                                  CadenaBool(ExistPorBodega, Me.Empresa.TipoDB) & ", " & _
                                  CadenaBool((Me.GNTrans.IVTipoTrans = "E"), Me.Empresa.TipoDB)
        Else
            sql = "spConsIVKardexImpresion " & mProps.transid & ", " & _
                                  Me.Cotizacion("") & ", " & _
                                  CadenaBool(ExistPorBodega, Me.Empresa.TipoDB) & ", " & _
                                  CadenaBool((Me.GNTrans.IVTipoTrans = "E"), Me.Empresa.TipoDB) '*** MAKOTO 26/ene/01 Mod. Si es egreso multiplica -1
        End If
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
    End If
#End If
    Set ListaIVKardexImpresion2 = rs
    Set rs = Nothing
End Function

Public Property Let AtorizaSeleccionarPU(ByVal value As Boolean)
   Mid$(mProps.Opcion, 3, 1) = IIf(value, "S", "N")
    mbooModificado = True
    
End Property

Public Property Get AtorizaSeleccionarPU() As Boolean
    AtorizaSeleccionarPU = (Mid$(Opcion, 3, 1) = "S")
End Property

Public Property Let AutorizaVenta(ByVal value As Boolean)
   Mid$(mProps.Opcion, 4, 1) = IIf(value, "S", "N")
    mbooModificado = True
End Property

Public Property Get AutorizaVenta() As Boolean
    AutorizaVenta = (Mid$(Opcion, 4, 1) = "S")
End Property

Public Property Let CambioFormaPago(ByVal value As Boolean)
   Mid$(mProps.Opcion, 5, 1) = IIf(value, "S", "N")
    mbooModificado = True
End Property

Public Property Get CambioFormaPago() As Boolean
    CambioFormaPago = (Mid$(Opcion, 5, 1) = "S")
End Property


Public Function RecuperaRolesNew(ByVal cond As String, _
                             ByVal Accion As Byte, _
                             ByVal BandRS As Boolean, Optional ByVal IdRol As Long) As Variant   'Recordset
Dim idDep As Long
Dim idSec As Long
Dim v As Variant
Dim s As String
s = ""
Dim rsN As Recordset
    Dim sql As String, rs As Recordset, rs1 As Recordset, numReg As Integer, i As Integer
    idSec = gobjMain.EmpresaActual.GNOpcion.ObtenerValor("seccion") + 1
    idDep = gobjMain.EmpresaActual.GNOpcion.ObtenerValor("Departamento") + 1
    
        sql = "Select e.idelemento from vwRolDetalle rd inner join elemento e on e.idelemento = rd.idelemento"
        sql = sql & " Where rd.TransID = " & Me.transid
        sql = sql & " GROUP BY e.idelemento,e.orden order by e.orden  "
        Set rs1 = Me.Empresa.OpenRecordset(sql)
        Do While Not rs1.EOF
            s = s & rs1!idElemento & ","
            rs1.MoveNext
        Loop
        s = Left(s, Len(s) - 1)
        v = Split(s, ",")
        Set rs1 = Nothing
        VerificaExistenciaTabla 1
        Me.Empresa.EjecutarSQL sql, 1
        sql = "SELECT pcgs.codgrupo" & idSec & ",pcg.codgrupo" & idDep & ",pc.CodProvCli,pc.Nombre,Pc.RUC,Pce.fechaIngreso,cast(0 as bit) as Renuncia ,cast(0 as bit) as Ingreso, cast (0 as bit) as Enfermedad "
        For i = 0 To UBound(v)
            sql = sql & ",cast(0 as money)  as  Exp" & i
        Next i
        sql = sql & " into TMP1 FROM RolDetalle rd " & _
                                "INNER JOIN Empleado pc INNER JOIN PERSONAL Pce  on pce.idempleado = pc.idprovcli  on pc.idprovcli = rd.idempleado " & _
                                "INNER JOIN GnComprobante gn on gn.transid = rd.transid " & _
                                " INNER JOIN PCGRUPO" & idDep & " pcg ON pcg.idgrupo" & idDep & "= rd.idgrupo" & idDep & _
                                " LEFT JOIN PCGRUPO" & idSec & " pcgs ON pcgs.idgrupo" & idSec & "= rd.idgrupo" & idSec & ""
                               sql = sql & " WHERE rd.Transid = " & Me.transid
        sql = sql & " GROUP BY pcgs.codgrupo" & idSec & ",pcg.codgrupo" & idDep & ",pcg.descripcion,pc.CodProvCli,pc.Nombre,Pc.RUC,Pce.fechaIngreso"

        If InStr(1, UCase(Me.Empresa.GNOpcion.NombreEmpresa), "HORMI") > 0 Then
           sql = sql & " ORDER BY pcgs.codgrupo" & idSec & ",pcg.codgrupo" & idDep & ",Pc.nombre"
        Else
            sql = sql & " ORDER BY pcgs.codgrupo" & idSec & ",Pc.nombre"
        End If
       
        Me.Empresa.EjecutarSQL sql, 1
        
        sql = "Delete from tmp1"
        Me.Empresa.EjecutarSQL sql, 1
        
        ''''''vuelvo a cargar
        
        sql = "SELECT pcgs.codgrupo" & idSec & ",pcg.codgrupo" & idDep & ",pc.CodProvCli,pc.Nombre,Pc.RUC,Pce.fechaIngreso,rd.bandrenuncia as Renuncia ,rd.bandIngreso as Ingreso, rd.bandenfermedad as Enfermedad "
        sql = sql & " FROM RolDetalle rd " & _
                                "INNER JOIN Empleado pc INNER JOIN PERSONAL Pce  on pce.idempleado = pc.idprovcli  on pc.idprovcli = rd.idempleado " & _
                                "INNER JOIN GnComprobante gn on gn.transid = rd.transid " & _
                                " INNER JOIN PCGRUPO" & idDep & " pcg ON pcg.idgrupo" & idDep & "= rd.idgrupo" & idDep & _
                                " LEFT JOIN PCGRUPO" & idSec & " pcgs ON pcgs.idgrupo" & idSec & "= rd.idgrupo" & idSec & ""
                               sql = sql & " WHERE rd.Transid = " & Me.transid
        sql = sql & " GROUP BY pcgs.codgrupo" & idSec & ",pcg.codgrupo" & idDep & ",pcg.descripcion,pc.CodProvCli,pc.Nombre,Pc.RUC,Pce.fechaIngreso,rd.bandrenuncia,rd.bandIngreso,rd.bandenfermedad "

        If InStr(1, UCase(Me.Empresa.GNOpcion.NombreEmpresa), "HORMI") > 0 Then
           sql = sql & " ORDER BY pcgs.codgrupo" & idSec & ",pcg.codgrupo" & idDep & ",Pc.nombre"
        Else
            sql = sql & " ORDER BY pcgs.codgrupo" & idSec & ",Pc.nombre"
        End If
        Set rs = Me.Empresa.OpenRecordset(sql)
        
        Do While Not rs.EOF
            'INSERTO TABLA
            sql = " INSERT INTO TMP1 (codgrupo1,codgrupo2,CodProvCli,Nombre,RUC,fechaIngreso,Renuncia,Ingreso,Enfermedad"
            For i = 0 To UBound(v)
                sql = sql & ",Exp" & i
            Next i
            sql = sql & ") "
            
            sql = sql & "(Select "
            sql = sql & "'" & rs!CodGrupo1 & "','" & rs!CodGrupo2 & "','" & rs!CodProvcli & "','" & rs!Nombre & "','" & rs!RUC & "','" & rs!FechaIngreso & "'," & CInt(rs!Renuncia) & "," & CInt(rs!ingreso) & "," & CInt(rs!Enfermedad) & ","
                For i = 0 To UBound(v)
                        sql = sql & "[" & v(i) & "] as Exp" & i & ","
                Next i
            sql = Left(sql, Len(sql) - 1)
            sql = sql & " From (select roldetalle.idelemento,roldetalle.valor from roldetalle Inner join empleado e on e.idprovcli = roldetalle.idempleado "
            sql = sql & "inner join elemento el on el.idelemento = roldetalle.idelemento"
            sql = sql & " where transid =" & Me.transid
            sql = sql & " And e.codprovcli = '" & rs!CodProvcli & "' ) as sourcetable "
            sql = sql & " pivot "
            sql = sql & " (avg(valor) "
            sql = sql & " For idelemento in ("
            For i = 0 To UBound(v)
                sql = sql & "[" & v(i) & "],"
            Next i
            sql = Left(sql, Len(sql) - 1)
            sql = sql & " ))as pivottable)"
            Me.Empresa.EjecutarSQL sql, 1
            rs.MoveNext
        Loop
        sql = "Select * from TMP1"
        sql = sql & " Order by codGrupo1,Codgrupo2,nombre"
        Set rs = Me.Empresa.OpenRecordset(sql)
    If BandRS Then
        Set RecuperaRolesNew = rs
    Else
        RecuperaRolesNew = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function




Public Property Get CountTSResumenVCredito() As Long
    If mcolTSResumenVCredito Is Nothing Then RecuperaTSResumenVCredito
    CountTSResumenVCredito = mcolTSResumenVCredito.Count
End Property
Public Property Get TSResumenvCredito(ix As Long) As TSResumenvCredito
    If mcolTSResumenVCredito Is Nothing Then RecuperaTSResumenVCredito
    Set TSResumenvCredito = mcolTSResumenVCredito.item(ix)
End Property
Private Sub RecuperaTSResumenVCredito()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolTSResumenVCredito Is Nothing Then Set mcolTSResumenVCredito = New Collection
    'Recupera los registros de TSDetalleVCredito
    sql = "SELECT tskc.transid,idtransref,sum(valor) AS VALOR "
    sql = sql & " FROM TSDetalleVCredito tskc "
    sql = sql & " WHERE TransId=" & mProps.transid & " Group by tskc.transid,idtransref  ORDER BY idtransref"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            'If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddTSResumenVCredito
                TSResumenvCredito(i).Recuperar rs
           ' End If
            .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub
Public Function AddTSResumenVCredito() As Long
    Dim nuevo As TSResumenvCredito
    'Cuando SoloVer está establecido a True, genera error
    If mcolTSResumenVCredito Is Nothing Then RecuperaTSResumenVCredito
    Set nuevo = New TSResumenvCredito
    Set nuevo.GNComprobante = Me
    mcolTSResumenVCredito.Add nuevo
    AddTSResumenVCredito = mcolTSResumenVCredito.Count    'Devuelve el indice de nuevo elemento
    Set nuevo = Nothing
    mbooModificado = True
End Function

Public Property Let codMotivoDev(ByVal value As String)
    Dim sql As String, rs As Recordset

    'Cuando cambia el valor
    If value <> mProps.codMotivoDev Then
        If Len(value) > 0 Then
            'Actualiza IdMotivo también
            sql = "SELECT IdMotivo FROM IVMotivo WHERE codMotivo='" & value & "'"
            Set rs = mProps.objEmpresa.OpenRecordset(sql)
            If rs.EOF Then
                Err.Raise ERR_NOHAYCODIGO, "GNComprobante.codMotivoDev", MSGERR_NOHAYCODIGO
                Exit Property
            Else
                IdMotivo = rs!IdMotivo
            End If
            rs.Close
            Set rs = Nothing
        Else
            IdMotivo = 0
        End If
        
        mProps.codMotivoDev = value
        SetModificado
    End If
End Property

Public Property Get codMotivoDev() As String
    codMotivoDev = Trim$(mProps.codMotivoDev)
End Property
'AUC 22/05/2015 PARA LIRA
Public Function RecuperaVentasCreditoxUsuarioRet(ByVal Trans As String, fecha As Date) As Variant
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
    
    sql = "SELECT"
    sql = sql & " G.TRANSID, G.CodTrans + ' ' + CONVERT(varchar, NumTrans)    AS Trans,"
    sql = sql & " pc.nombre, debe as valor"
    sql = sql & " FROM GNCOMPROBANTE G"
    sql = sql & " inner join gntrans gnt on g.codtrans = gnt.codtrans"
    sql = sql & " inner join pcprovcli pc on  g.idclienteref=pc.idprovcli"
    sql = sql & " INNER JOIN PCKARDEX P"
    sql = sql & " inner join tsformacobropago tsf on"
    sql = sql & " p.IdForma = tsf.IdForma"
    sql = sql & " ON G.TRANSID=P.TRANSID"
    sql = sql & " Where g.Estado <> 3 and g.Estado <> 0"
    sql = sql & " and codusuario='" & Me.codUsuario & "'"
    sql = sql & " and CodForma in (" & Trans & ")"
    
    If GNTrans.TSUtilizaFechaGrabado Then
        sql = sql & " AND (g.FechaGrabado between '" & Me.FechaTrans & " 00:00:00' AND '" & Me.FechaTrans & " 23:59:59' ) "
    Else
        sql = sql & " and g.FechaTrans BETWEEN " & FechaYMD(fecha, gobjMain.TipoDB) & " AND " & FechaYMD(fecha, gobjMain.TipoDB) & "  "
    End If
    sql = sql & " and debe>0 AND IDASIGNADO=0"
    sql = sql & " and afectasaldopc=1"
    
    sql = sql & " AND p.idtarjeta=0 and modulo='IV' "
    If Me.EsNuevo Then
        sql = sql & " and g.transid not in( select IdTransRef from tsdetallevcredito tsd inner join gncomprobante g on tsd.transid=g.transid where g.estado<>3)"
    End If
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaVentasCreditoxUsuarioRet = rs
    Set rs = Nothing
End Function
Public Property Get CountTSDetalleVCreditoRet() As Long
    If mcolTSDetalleVCreditoRet Is Nothing Then RecuperaTSDetalleVCreditoRet
    CountTSDetalleVCreditoRet = mcolTSDetalleVCreditoRet.Count
End Property

Public Property Get TSDetalleVCreditoRet(ix As Long) As TSDetalleVCredito
    If mcolTSDetalleVCreditoRet Is Nothing Then RecuperaTSDetalleVCreditoRet
    Set TSDetalleVCreditoRet = mcolTSDetalleVCreditoRet.item(ix)
End Property

Private Sub RecuperaTSDetalleVCreditoRet()
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean

    mod_antes = mbooModificado      'Guarda el estado de Modificado
    If mcolTSDetalleVCreditoRet Is Nothing Then Set mcolTSDetalleVCreditoRet = New Collection
    
    'Recupera los registros de TSDetalleVCredito
    sql = "SELECT tskc.* "
    sql = sql & " FROM TSDetalleVCredito tskc "
    sql = sql & " WHERE BandRet = 1 And TransId=" & mProps.transid & " ORDER BY Orden"
    
    
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    With rs
        Do Until .EOF
            If !Id > 0 Then                 'Para asegurar el Bug de ADO
                i = AddTSDetalleVCreditoRet
                TSDetalleVCreditoRet(i).Recuperar rs
            End If
            .MoveNext
        Loop
        .Close
    End With
    Set rs = Nothing
    mbooModificado = mod_antes      'Para que no cambie el estado de Modificado
End Sub

Public Function AddTSDetalleVCreditoRet() As Long
    Dim nuevo As TSDetalleVCredito
    
    'Cuando SoloVer está establecido a True, genera error
    If mcolTSDetalleVCreditoRet Is Nothing Then RecuperaTSDetalleVCreditoRet
    
    Set nuevo = New TSDetalleVCredito
    Set nuevo.GNComprobante = Me
   
    mcolTSDetalleVCreditoRet.Add nuevo
    AddTSDetalleVCreditoRet = mcolTSDetalleVCreditoRet.Count    'Devuelve el indice de nuevo elemento
    Set nuevo = Nothing
    mbooModificado = True
End Function

Public Sub RemoveTSDetalleVCreditoRet(ByVal ix As Long, Optional obj As TSDetalleVCredito)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.RemoveTSDetalleVCredito", MSGERR_SOLOVER
    If mcolTSDetalleVCreditoRet Is Nothing Then RecuperaTSDetalleVCreditoRet
    
    'Si está especificado un objeto
    If Not (obj Is Nothing) Then
        'Busca el indice del objeto
        For ix = 1 To mcolTSDetalleVCreditoRet.Count
            If mcolTSDetalleVCreditoRet.item(ix) Is obj Then
                mcolTSDetalleVCreditoRet.Remove ix
                Exit For
            End If
        Next ix
    Else
        mcolTSDetalleVCreditoRet.Remove ix
    End If
    
    mbooModificado = True
End Sub

Public Function RecuperaTSDetalleVentaCreditoCierreCajaImpresionRet(transid As Long) As Variant
    Dim sql As String, rs As Recordset
    sql = " select codtrans+'-'+convert(varchar, numtrans) as trans,"
    sql = sql & " RUC , pc.Nombre, Valor"
    sql = sql & " from TSDetalleVCredito tsd"
    sql = sql & " inner join gncomprobante g"
    sql = sql & " inner join pcprovcli pc"
    sql = sql & " on g.idclienteref = pc.idprovcli"
    sql = sql & " on g.transid=tsd.idtransref"
    sql = sql & " Where tsd.transid = " & transid
    sql = sql & " And BandRet = 1"
    sql = sql & " order by codtrans, numtrans"
    
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaTSDetalleVentaCreditoCierreCajaImpresionRet = rs
    Set rs = Nothing
End Function

Public Property Let BandDINARDAP(ByVal value As Boolean)
        mProps.BandDINARDAP = value
        mbooModificado = True
End Property

Public Property Get BandDINARDAP() As Boolean
    BandDINARDAP = mProps.BandDINARDAP
End Property

Public Property Let BandTC(ByVal value As Boolean)
        mProps.BandTC = value
        mbooModificado = True
End Property

Public Property Get BandTC() As Boolean
    BandTC = mProps.BandTC
End Property

'para plan
Public Property Get Plan() As String
    Plan = Trim$(mProps.Plan)
End Property

Public Property Let Plan(ByVal value As String)
    mProps.Plan = value
    'SetModificado
End Property

Private Sub GrabarVehiculoPlan()
''Dim gnc As GNCentroCosto
''Dim ivp As IVPlan
''Dim v
''Dim i As Long
''Dim fechaNew As Date
''Dim sql As String
''v = Split(Me.Plan, ",")
''Set gnc = Me.Empresa.RecuperaGNCentroCosto(Me.CodCentro)
''For i = 0 To UBound(v)
''    Set ivp = Me.Empresa.RecuperaIVPLAN(Val(v(i)))
''    fechaNew = DateAdd("d", ivp.Dias, Me.FechaTrans)
''    sql = "Insert into GNVehiculoPlan (idtrans,idvehiculo,idPlan,FechaProxMan) values ("
''    sql = sql & Me.transid & "," & gnc.IdVehiculo & "," & v(i) & ",'" & fechaNew & "')"
''    Me.Empresa.EjecutarSQL sql, 1
''    Set ivp = Nothing
''Next
''Set gnc = Nothing
End Sub

Public Property Get IdPlan() As Long
    IdPlan = Trim$(mProps.IdPlan)
End Property

Public Property Let IdPlan(ByVal value As Long)
    mProps.IdPlan = value
    'SetModificado
End Property

Public Sub ActualizaPlan(ByVal mBand As Boolean, Optional FechaOrigen As Date)
Dim sql As String
Dim gcc As GNCentroCosto
Dim ivp As IVPlan
Set gcc = Me.Empresa.RecuperaGNCentroCosto(mProps.CodCentro)
Set ivp = Me.Empresa.RecuperaIVPLAN(mProps.IdPlan)
If mBand Then 'cuando es ot cambia el estado del idtrans
    sql = "Update gnvehiculoPlan set idtrans = 1 where idplan =  "
    sql = sql & mProps.IdPlan
    sql = sql & " And IdVehiculo = " & gcc.IdVehiculo
    sql = sql & " And FechaProx = '" & FechaOrigen & "'"
Else   'cuando es factura crea la nueva visita
    sql = "Insert into gnvehiculoplan (idvehiculo,idplan,FechaProx,bandvalida) values ("
    sql = sql & gcc.IdVehiculo & "," & mProps.IdPlan & ",'" & DateAdd("d", ivp.Dias, mProps.FechaTrans) & "',1)"
End If
Me.Empresa.EjecutarSQL sql, 1
Set gcc = Nothing
mProps.objEmpresa.RaiseRefreshEvent REFRESH_IVPLANCALENDARIO
End Sub

Public Property Let CodPuertoEmbarque(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.CodPuertoEmbarque", MSGERR_SOLOVER
    
    If Len(value) > 3 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.CodPuertoEmbarque", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.CodPuertoEmbarque <> value Then
        mProps.CodPuertoEmbarque = value
        mbooModificado = True
    End If
End Property

Public Property Get CodPuertoEmbarque() As String
    CodPuertoEmbarque = Trim$(mProps.CodPuertoEmbarque)
End Property

Public Property Let CodPaisDestino(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.CodPaisDestino", MSGERR_SOLOVER
    
    If Len(value) > 3 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.CodPaisDestino", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.CodPaisDestino <> value Then
        mProps.CodPaisDestino = value
        mbooModificado = True
    End If
End Property

Public Property Get CodPaisDestino() As String
    CodPaisDestino = Trim$(mProps.CodPaisDestino)
End Property


Public Property Let EstadoRevisionActa(ByVal value As Byte)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.EstadoRevisionActa", MSGERR_SOLOVER
        mProps.EstadoRevisionActa = value
        mbooModificado = True
End Property

Public Property Get EstadoRevisionActa() As Byte
    EstadoRevisionActa = mProps.EstadoRevisionActa
End Property

Public Property Let ObservacionesRevisionActa(ByVal value As String)
    mProps.ObservacionesRevisionActa = value
    mbooModificado = True
End Property

Public Property Get ObservacionesRevisionActa() As String
    ObservacionesRevisionActa = Trim$(mProps.ObservacionesRevisionActa)
End Property

Public Property Let Usuario1(ByVal value As String)
    mProps.Usuario1 = value
    mbooModificado = True
End Property

Public Property Get Usuario1() As String
    Usuario1 = Trim$(mProps.Usuario1)
End Property

Public Property Let Usuario2(ByVal value As String)
    mProps.Usuario2 = value
    mbooModificado = True
End Property

Public Property Get Usuario2() As String
    Usuario2 = Trim$(mProps.Usuario2)
End Property

Public Property Let Usuario3(ByVal value As String)
    mProps.Usuario3 = value
    mbooModificado = True
End Property

Public Property Get Usuario3() As String
    Usuario3 = Trim$(mProps.Usuario3)
End Property


Public Property Let CodProveedor1(ByVal value As String)
    Dim sql As String, rs As Recordset
    
    'Cuando cambia el valor
    If value <> mProps.CodProveedor1 Then
        If Len(value) > 0 Then
            sql = "SELECT IdProvCli FROM PCProvCli WHERE CodProvCli='" & value & "'"
            Set rs = mProps.objEmpresa.OpenRecordset(sql)
            If rs.EOF Then
                Err.Raise ERR_NOHAYCODIGO, "GNComprobante.CodProveedor1", MSGERR_NOHAYCODIGO
                Exit Property
            Else
                 IdProveedor1 = rs!IdProvcli
            End If
            rs.Close
            Set rs = Nothing
        Else
            IdProveedor1 = 0
        End If
        
        mProps.CodProveedor1 = value
        SetModificado
    End If
    Set rs = Nothing
End Property

Public Property Get CodProveedor1() As String
    CodProveedor1 = Trim$(mProps.CodProveedor1)
End Property

Public Property Let CodProveedor2(ByVal value As String)
    Dim sql As String, rs As Recordset
    
    'Cuando cambia el valor
    If value <> mProps.CodProveedor2 Then
        If Len(value) > 0 Then
            sql = "SELECT IdProvCli FROM PCProvCli WHERE CodProvCli='" & value & "'"
            Set rs = mProps.objEmpresa.OpenRecordset(sql)
            If rs.EOF Then
                Err.Raise ERR_NOHAYCODIGO, "GNComprobante.CodProveedor2", MSGERR_NOHAYCODIGO
                Exit Property
            Else
                IdProveedor2 = rs!IdProvcli
            End If
            rs.Close
            Set rs = Nothing
        Else
            IdProveedor2 = 0
        End If
        
        mProps.CodProveedor2 = value
        SetModificado
    End If
    Set rs = Nothing
End Property

Public Property Get CodProveedor2() As String
    CodProveedor2 = Trim$(mProps.CodProveedor2)
End Property


Public Property Let CodProveedor3(ByVal value As String)
    Dim sql As String, rs As Recordset
    
    'Cuando cambia el valor
    If value <> mProps.CodProveedor3 Then
        If Len(value) > 0 Then
            sql = "SELECT IdProvCli FROM PCProvCli WHERE CodProvCli='" & value & "'"
            Set rs = mProps.objEmpresa.OpenRecordset(sql)
            If rs.EOF Then
                Err.Raise ERR_NOHAYCODIGO, "GNComprobante.CodProveedor3", MSGERR_NOHAYCODIGO
                Exit Property
            Else
                IdProveedor3 = rs!IdProvcli
            End If
            rs.Close
            Set rs = Nothing
        Else
            IdProveedor3 = 0
        End If
        
        mProps.CodProveedor3 = value
        SetModificado
    End If
    Set rs = Nothing
End Property

Public Property Get CodProveedor3() As String
    CodProveedor3 = Trim$(mProps.CodProveedor3)
End Property


Public Property Let RutaOferta1(ByVal value As String)
    mProps.RutaOferta1 = value
    mbooModificado = True
End Property

Public Property Get RutaOferta1() As String
    RutaOferta1 = Trim$(mProps.RutaOferta1)
End Property


Public Property Let RutaOferta2(ByVal value As String)
    mProps.RutaOferta2 = value
    mbooModificado = True
End Property

Public Property Get RutaOferta2() As String
    RutaOferta2 = Trim$(mProps.RutaOferta2)
End Property


Public Property Let RutaOferta3(ByVal value As String)
    mProps.RutaOferta3 = value
    mbooModificado = True
End Property

Public Property Get RutaOferta3() As String
    RutaOferta3 = Trim$(mProps.RutaOferta3)
End Property


Public Property Let IdProveedor1(ByVal value As Long)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.IdProveedor1", MSGERR_SOLOVER
    
    mProps.IdProveedor1 = value
    mbooModificado = True
End Property

Public Property Get IdProveedor1() As Long
    IdProveedor1 = mProps.IdProveedor1
End Property

Public Property Let IdProveedor2(ByVal value As Long)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.IdProveedor2", MSGERR_SOLOVER
    
    mProps.IdProveedor2 = value
    mbooModificado = True
End Property

Public Property Get IdProveedor2() As Long
    IdProveedor2 = mProps.IdProveedor2
End Property

Public Property Let IdProveedor3(ByVal value As Long)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.IdProveedor3", MSGERR_SOLOVER
    
    mProps.IdProveedor3 = value
    mbooModificado = True
End Property

Public Property Get IdProveedor3() As Long
    IdProveedor3 = mProps.IdProveedor3
End Property


Public Property Let FechaRevisionActa(value As Date)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.FechaRevisionActa", MSGERR_SOLOVER
    
    'Solo cuando cambia el valor
    If mProps.FechaRevisionActa <> value Then
        mProps.FechaRevisionActa = value
        mbooModificado = True
    End If
End Property

Public Property Get FechaRevisionActa() As Date
    FechaRevisionActa = mProps.FechaRevisionActa
End Property

Public Property Let UsuarioActa(ByVal value As String)
    mProps.UsuarioActa = value
    mbooModificado = True
End Property

Public Property Get UsuarioActa() As String
    UsuarioActa = Trim$(mProps.UsuarioActa)
End Property

Public Property Let UsuarioRevActa(ByVal value As String)
    mProps.UsuarioRevActa = value
    mbooModificado = True
End Property

Public Property Get UsuarioRevActa() As String
    UsuarioRevActa = Trim$(mProps.UsuarioRevActa)
End Property

Public Property Get FechaIniSemanal() As Date 'variable temporal para guardar la fecha para cuotas semanales 'creyol
    FechaIniSemanal = mProps.FechaIniSemanal
End Property

Public Property Let FechaIniSemanal(ByVal value As Date)
    mProps.FechaIniSemanal = value
End Property

Public Property Get TipoCuota() As Integer
    TipoCuota = mProps.TipoCuota
End Property

Public Property Let TipoCuota(ByVal value As Integer)
'0 mensual
'1 semanal
    mProps.TipoCuota = value
    mbooModificado = True
End Property

'AUC agregado para bellaluz
Public Property Let IdCobrador(ByVal value As Long)
    mProps.IdCobrador = value
    SetModificado
End Property

Public Property Get IdCobrador() As Long
    IdCobrador = mProps.IdCobrador
End Property

Public Property Let CodCobrador(ByVal value As String)
    Dim sql As String, rs As Recordset
    'Cuando cambia el valor
    If value <> mProps.CodCobrador Then
        If Len(value) > 0 Then
            'Actualiza Idcobrdor también
            sql = "SELECT IdVendedor FROM FCVendedor WHERE CodVendedor='" & value & "'"
            sql = sql & "And bandCobrador = 1"
            Set rs = mProps.objEmpresa.OpenRecordset(sql)
            If rs.EOF Then
                Err.Raise ERR_NOHAYCODIGO, "GNComprobante.CodCobrador", MSGERR_NOHAYCODIGO
                Exit Property
            Else
                IdCobrador = rs!IdVendedor
            End If
            rs.Close
            Set rs = Nothing
        Else
            IdCobrador = 0
        End If
        mProps.CodCobrador = value
        SetModificado
    End If
End Property

Public Property Get CodCobrador() As String
    CodCobrador = Trim$(mProps.CodCobrador)
End Property

Public Function SaldoActual() As Currency
Dim sql As String
Dim numMoneda As Integer
Dim rs As Recordset
Dim Saldo As Currency
numMoneda = Me.Empresa.GNOpcion.IndiceMoneda(Me.CodMoneda)
Select Case numMoneda
    Case 1:    sql = "Select sum(Valor1 - VCancelado1) AS Saldo"
    Case 2:    sql = "Select sum(Valor2 - VCancelado2) AS Saldo"
    Case 3:    sql = "Select sum(Valor3 - VCancelado3) AS Saldo"
    Case 3:    sql = "Select sum(Valor4 - VCancelado4) AS Saldo"
End Select
sql = sql & " From vwConsPCPorCobrarPagar "
sql = sql & " Where transid = " & Me.transid
Set rs = Me.Empresa.OpenRecordset(sql)
If Not rs.EOF Then
    Saldo = rs!Saldo
End If
SaldoActual = Saldo
End Function

Public Function SaldoEntrada() As Currency
Dim sql As String
Dim numMoneda As Integer
Dim rs As Recordset
Dim Saldo As Currency
Dim CodForma As String
CodForma = Me.Empresa.GNOpcion.ObtenerValor("FornmaCobroCuotaInicial")
numMoneda = Me.Empresa.GNOpcion.IndiceMoneda(Me.CodMoneda)
Select Case numMoneda
    Case 1:    sql = "Select sum( VCancelado1) AS vCancelado"
    Case 2:    sql = "Select sum( VCancelado2) AS vCancelado"
    Case 3:    sql = "Select sum( VCancelado3) AS vCancelado"
    Case 3:    sql = "Select sum( VCancelado4) AS vCancelado"
End Select
sql = sql & " From vwConsPCPorCobrarPagar "
sql = sql & " Where transid = " & Me.transid
sql = sql & " And codForma = '" & CodForma & "'"
Set rs = Me.Empresa.OpenRecordset(sql)
If Not rs.EOF Then
    Saldo = (Me.ValorEntrada + Me.ValorSegundaEntrada) - rs!VCancelado
End If
SaldoEntrada = Saldo
End Function

Public Function ListaTransFuenteItemsxBodega( _
                    ByVal CodCentro As String) As Variant
    Dim sql As String, s As String, v As Variant, i As Long, CodT As String
    Dim cond As String, rs As Recordset, cond1 As String
    If Len(GNTrans.CodTransFuente) > 0 Then
        'Puede tener varios codigos de transaccion de fuente    ejm. (FC);(OF)
        v = Split(GNTrans.CodTransFuente, ";")
        For i = 0 To UBound(v)
            If Len(s) > 0 Then s = s & ","
            CodT = v(i)
            CodT = Left$(CodT, Len(CodT) - 1)       'Quita el signo ')'
            CodT = Right$(CodT, Len(CodT) - 1)      'Quita el signo '('
            s = s & "'" & CodT & "'"
        Next i
    Else
        Err.Raise ERR_INVALIDO, "GNComprobante.ListaTransFuente", _
                    "No está definida ningúna transacción de fuente para ésta transacción."
    End If
   'filtramos las bodegas x sucursal
    VerificaExistenciaTabla 1
    sql = "Select gn.transid  into tmp1"
    sql = sql & " From gncomprobante gn "
    sql = sql & " Inner Join ivkardex ivk "
    sql = sql & " Inner join ivbodega ivb "
    sql = sql & " Inner Join gnsucursal gns on gns.idsucursal = ivb.idsucursal"
    sql = sql & " on ivb.idbodega = ivk.idbodega"
    sql = sql & " on ivk.transid = gn.transid"
    sql = sql & " Where gn.codtrans in (" & s & ")"
    sql = sql & " And gns.codsucursal ='" & Me.GNTrans.CodSucursal & "'"
    sql = sql & " group by gn.transid"
    Me.Empresa.EjecutarSQL sql, 1
   sql = "SELECT"
    If Not gobjMain.objCondicion.IncluirCero Then
        If gobjMain.objCondicion.TopN > 0 Then
            sql = sql & " TOP " & gobjMain.objCondicion.TopN
        End If
    End If

    sql = sql & " gc.TransID, gc.FechaTrans, gc.CodTrans, gc.NumTrans, "
    sql = sql & " gc.NumdocRef, gc.Nombre, gc.Descripcion, "
    sql = sql & " cc.idCentro, cc.CodCentro, cc.Descripcion AS DescCentro, gnv.CodVehiculo, gc.Estado, "
    sql = sql & " case gc.Estado when '0' THEN 'NO CONT' when '1' THEN 'APROV' when '2' THEN 'DESPA' when '3' THEN 'ANULA' when '4' THEN 'SEM DESP' END AS estadoL "
'    If Me.GNTrans.CodPantalla = "IVGNG" Then
'        sql = sql & " ,gc.Estado1,gc.Estado2 "
'    End If
       sql = sql & " , gof.FechaValidez, '' AS detalle "
        sql = sql & " , fd.FechaIngreso "
        sql = sql & "FROM GNCentroCosto cc LEFT JOIN  GNVehiculo gnv   ON cc.IdVehiculo = gnv.IdVehiculo RIGHT JOIN "
        sql = sql & "  GNComprobante gc "
        sql = sql & " LEFT JOIN gncentrocostodetalle ccd"
        sql = sql & "  LEFT JOIN fichadetalle fd on fd.id = ccd.idfichadet"
        sql = sql & "  ON ccd.idcentrodet = gc.idcentrohijo"
        sql = sql & " LEFT JOIN gnoferta gof ON  gc.transid=gof.transid "
        sql = sql & " Inner Join tmp1 on tmp1.transid = gc.transid "
       sql = sql & IIf(Len(gobjCond.CodPC1) > 0, " Inner join PcProvCli pc ON (gc.IdProveedorRef = pc.IDProvCli  OR gc.IdClienteRef = pc.IDProvCli) ", " ")
        sql = sql & " ON cc.IdCentro = gc.IdCentro "
        If Not gobjMain.objCondicion.IncluirCero Then
            If Len(cond) > 0 Then cond = cond & " AND "
            cond = cond & " gc.Estado IN ("
            If gobjMain.objCondicion.EstadoBool(ESTADO_NOAPROBADO) Then
                 cond = cond & ESTADO_NOAPROBADO & ","
            End If
            If gobjMain.objCondicion.EstadoBool(ESTADO_APROBADO) Then
                 cond = cond & ESTADO_APROBADO & ","
            End If
             If gobjMain.objCondicion.EstadoBool(ESTADO_DESPACHADO) Then
                 cond = cond & ESTADO_DESPACHADO & ","
            End If
             If gobjMain.objCondicion.EstadoBool(ESTADO_SEMDESPACHADO) Then
                 cond = cond & ESTADO_SEMDESPACHADO & ","
            End If
            cond = Mid$(cond, 1, Len(cond) - 1)
            cond = cond & ")"
        Else
            cond = cond & " bandfinalizado=0"
        End If
      'auc 26/10/07
'        If Me.GNTrans.VerFacturados And Me.GNTrans.CodPantalla = "IVGNG" Then
'                 If Len(cond) > 0 Then cond = cond & " AND "
'                 cond = cond & " gc.Estado1 IN ("
'             If gobjMain.objCondicion.Estado1Bool(ESTADO_FACTURADO) Then
'                 cond = cond & ESTADO_FACTURADO & ","
'            End If
'            If gobjMain.objCondicion.Estado1Bool(ESTADO_NOFACTURADO) Then
'                 cond = cond & ESTADO_NOFACTURADO & ","
'            End If
'                 cond = Mid$(cond, 1, Len(cond) - 1)
'                 cond = cond & ")"
'          ElseIf Me.GNTrans.VerComprados And Me.GNTrans.CodPantalla = "IVGNG" Then
'                 If Len(cond) > 0 Then cond = cond & " AND "
'                 cond = cond & " gc.Estado2 IN ("
'            If gobjMain.objCondicion.Estado2Bool(ESTADO_COMPRAS) Then
'                 cond = cond & ESTADO_COMPRAS & ","
'            End If
'            If gobjMain.objCondicion.Estado2Bool(ESTADO_NOCOMPRAS) Then
'                 cond = cond & ESTADO_NOCOMPRAS & ","
'            End If
'            cond = Mid$(cond, 1, Len(cond) - 1)
'                 cond = cond & ")"
'        End If
      'hasta aqui
    ' Condicion de Busqueda de Fecha
    If Not gobjMain.objCondicion.IncluirCero Then
    If Len(cond) > 0 Then cond = cond & " AND "
     cond = cond & " (gc.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, gobjMain.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, gobjMain.TipoDB) & " ) "
     'Condición de CodProvCli    (Opcional)
     End If
    If Len(gobjCond.CodPC1) > 0 Then
       If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(PC.CodProvCli='" & gobjCond.CodPC1 & "')"
   End If
    If Len(s) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gc.CodTrans IN (" & s & ")"
    End If
'    If Me.GNTrans.CodPantalla <> "IVCOTROC" Then 'auc revisar bien y quitar si es necesario
'        If Me.GNTrans.IVValidarFechaValidez Then
'            If Len(s) > 0 Then
'                If Len(cond) > 0 Then cond = cond & " AND "
'                cond = cond & " (gof.FechaValidez >= " & FechaYMD(Date, gobjMain.TipoDB) & " ) "
'            End If
'        End If
'    End If

    If Len(CodCentro) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " cc.CodCentro='" & CodCentro & "'"
    End If
    If gobjCond.NumTrans1 <> 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gc.Numtrans= " & gobjCond.NumTrans1
    End If
    If gobjCond.NumTrans2 <> 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gc.numdocref= '" & gobjCond.NumTrans2 & "'"
    End If
    'Condición de CodProvCli    (Opcional)
    If Len(gobjCond.CodVehiculo) > 0 Then
       If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(gnv.CodVehiculo='" & gobjCond.CodVehiculo & "')"
   End If
    'JEAA 01/06/2007
    If GNTrans.ImportacionUnicaTrans Then
        cond = cond & " AND GC.TRANSID NOT IN"
        cond = cond & " (SELECT IdTransFuente"
        cond = cond & " FROM GNCentroCosto cc"
        cond = cond & " LEFT JOIN  GNVehiculo gnv   ON cc.IdVehiculo = gnv.IdVehiculo"
        cond = cond & " RIGHT JOIN  GNComprobante gc   ON cc.IdCentro = gc.IdCentro"
        cond = cond & " where gc.Estado <> 3 "
        cond = cond & " AND (gc.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, gobjMain.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, gobjMain.TipoDB) & " ) "
        cond = cond & " AND  gc.CodTrans IN ('" & GNTrans.CodTrans & "')"
        cond = cond & " AND IdTransFuente<>0 )"
        cond = cond & " and gc.transid not in( select idfuente from GNTransIdFuente g inner join gncomprobante gc on gc.transid=g.transid where gc.estado<>3 )"
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
'        If Len(gobjCond.CodBodega1) > 0 Then
'           cond = cond & " AND IVB.CODBODEGA = '" & gobjCond.CodBodega1 & "'"
'       End If
  'AUC importa solo transacciones con sol credito aprobadas
        If Me.GNTrans.ImpTransSolCreApr Then
            sql = sql & " AND gc.transid  IN (select pcsc.idtransfuente FROM pcsolcreprovcli pcsc"
            sql = sql & " left join gncomprobante gc on pcsc.idtransfuente= gc.transid "
            sql = sql & " WHERE pcsc.bandaprobado = 1 and pcsc.TipoSolicitud = 0)"
            If Me.GNTrans.IVPideGarante Then
                sql = sql & " AND gc.transid  IN (select pcsc.idtransfuente FROM pcsolcreprovcli pcsc"
                sql = sql & " left join gncomprobante gc on pcsc.idtransfuente= gc.transid "
                sql = sql & " WHERE pcsc.bandaprobado = 1 and pcsc.TipoSolicitud = 1)"
            End If
        End If
'     If Len(cond) > 0 Then sql = sql & " WHERE " & cond
     sql = sql & " Group by gc.TransID, gc.FechaTrans, gc.horatrans, "
     sql = sql & " gc.CodTrans, gc.NumTrans, gc.NumdocRef, gc.Nombre, gc.Descripcion,"
     sql = sql & " cc.idCentro, cc.CodCentro, cc.Descripcion, gc.Estado, gnv.CodVehiculo "
      sql = sql & " , gof.FechaValidez,fd.FechaIngreso "
     'sql = sql & " ,ivb.descripcion"
'    If Me.GNTrans.CodPantalla = "IVGNG" Then
'            sql = sql & " ,gc.Estado1,gc.Estado2 "
'    End If
   sql = sql & " ORDER BY gc.FechaTrans Desc, gc.horatrans desc  ,gc.CodTrans,gc.NumTrans"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set ListaTransFuenteItemsxBodega = rs
    Set rs = Nothing
End Function
Public Sub ImportaDatos2Sucursal( _
                ByVal TransIDs As String, _
                ByVal Incremental As Boolean)
    Dim Fuente As GNComprobante, i As Long, sql As String, rs As Recordset
    Dim v As Variant, tid As Long, aux_inc As Boolean
    Dim desc As String, pc As PCProvCli
    If Len(TransIDs) = 0 Then Exit Sub
    'Prepara una colección para almacenar TransIDs de fuente,
    ' para cuando graba la transacción cambiar de estado a Despachado
    If mcolTransIDs Is Nothing Then Set mcolTransIDs = New Collection
    'Separa los TransIDs en un vector
    v = Split(TransIDs, ",")
    aux_inc = Incremental
    'Si la transacción está configurada que importa solo desde transacciones Apropadas
    If Me.GNTrans.ImportaSoloAprobado Then
        sql = "SELECT CodTrans, NumTrans FROM GNComprobante " & _
              "WHERE (Not Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & ")) " & _
                    " AND (TransID IN (" & TransIDs & ")) "
        Set rs = Me.Empresa.OpenRecordset(sql)
        If Not rs.EOF Then
            sql = MSGERR_NOIMPORTA & vbCr & vbCr
            Do Until rs.EOF
                sql = sql & rs.Fields("CodTrans") & " " & rs.Fields("NumTrans") & vbCr
                rs.MoveNext
            Loop
            Err.Raise ERR_NOIMPORTA, "GNComprobante.ImportaDatos", sql
        End If
        rs.Close
        Set rs = Nothing
    End If
    desc = " Trans. Fuente: "
    'Repite para todas las transacciones de fuente
    For i = 0 To UBound(v, 1)
        tid = val(v(i))             'Convierte en numérico
        'Desde la segunda trans. hay que incrementar siempre
        If i > 0 Then aux_inc = True
        'Recupera la transaccioón de fuente
        Set Fuente = Empresa.RecuperaGNComprobante(tid)
        If Fuente Is Nothing Then
            Err.Raise ERR_NOHAYCODIGO, "GNComprobante.ImportaDatos", _
                        "No se puede recuperar la transacción de fuente."
        End If
        'Si está ImportaSoloAprobado=True y el origen no está 'aprobado' ni 'despachado'
        If GNTrans.ImportaSoloAprobado And _
            Not (Fuente.Estado = ESTADO_APROBADO Or Fuente.Estado = ESTADO_DESPACHADO Or Fuente.Estado = ESTADO_SEMDESPACHADO) Then
            Err.Raise ERR_NOIMPORTA, "GNComprobante.ImportaDatos", MSGERR_NOIMPORTA
        End If
        'Copia los datos de cabecera
        If Len(Me.idCentros) = 0 Then
            CodCentro = Fuente.CodCentro
            CodCentroHijo = Fuente.CodCentroHijo 'para bolivar
        End If
        If Not Fuente.GNTrans.IVPideEmpleado Then
            If Len(Fuente.CodEmpleadoRef) = 0 Then
                CodProveedorRef = Fuente.CodProveedorRef
            Else
                CodEmpleadoRef = Fuente.CodEmpleadoRef
            End If
        Else
            If Len(Fuente.CodProveedorRef) > 0 Then
                CodEmpleadoRef = Fuente.CodEmpleadoRef
            Else
                CodEmpleadoRef = Fuente.CodEmpleadoRef
            End If
        End If
        CodClienteRef = Fuente.CodClienteRef
        CodVendedor = Fuente.CodVendedor
        If Fuente.CodTrans <> "RI" Then
            If Me.GNTrans.IVValNumDoc Then
                NumDocRef = Fuente.NumSerieEstaSRI & "-" & Fuente.NumSeriePuntoSRI & "-" & Right("000000000" & Fuente.NumTrans, 9)
                If Me.GNTrans.IVComprobanteElectronico Then
                    NumSerieEstablecimiento = Fuente.NumSerieEstaSRI
                    NumSeriePunto = Fuente.NumSeriePuntoSRI
                    NumSecuencial = Right("000000000" & Fuente.NumTrans, 9)
                    NumSerie = Fuente.NumSerieEstaSRI & Fuente.NumSeriePuntoSRI
                    CodTipoComp = Fuente.GNTrans.TipoTrans
                    FechaAnexos = Fuente.FechaTrans
                End If
            Else
                NumDocRef = Fuente.NumDocRef
            End If
        End If
        CodGaranteRef = Fuente.CodGaranteRef
        CodObra = Fuente.CodObra
        If Me.GNTrans.IVVisibleSucursalSolicita Then
            If Len(Fuente.CodZona) = 0 Then
                CodZona = Fuente.GNTrans.CodSucursal
            Else
                CodZona = Fuente.CodZona
            End If
        Else
            CodZona = Fuente.CodZona
        End If
        Estado1 = Fuente.Estado1
        Estado2 = Fuente.Estado2
        Atencion = Fuente.Atencion
        Detalles = Fuente.Detalles
        FechaEntrega = Fuente.FechaEntrega
        FormaPago = Fuente.FormaPago
        idCentroHijo = Fuente.idCentroHijo
        TiempoEntrega = Fuente.TiempoEntrega
        TiempoEstimadoEntrega = Fuente.TiempoEstimadoEntrega
        Validez = Fuente.Validez
        FechaValidez = Fuente.FechaValidez
        NumDireccion = Fuente.NumDireccion
        DirTransporte = Fuente.DirTransporte
        IdPlan = Fuente.IdPlan
        'jeaa 04-04-2005 aumentado para saber de donde importo
        If UBound(v, 1) = 0 Then
            If Not Me.GNTrans.VisualizaTransFuente Then
                If Len(desc & " " & Fuente.CodTrans & " No. " & Fuente.NumTrans & " / ") > 120 Then
                    desc = desc & " " & Fuente.CodTrans & " No. " & Fuente.NumTrans & " / " & Mid$(Fuente.Descripcion, 1, Len(Fuente.Descripcion) - Len(Descripcion) - 20 - Len(Fuente.CodTrans))
                Else
                    desc = desc & " " & Fuente.CodTrans & " No. " & Fuente.NumTrans & " / " & Left$(Fuente.Descripcion, 120 - (Len(desc) + 5))
                End If
            Else
                desc = Left$(Fuente.Descripcion, 120)
                TransFuente = Fuente.CodTrans & " -" & Fuente.NumTrans
            End If
        Else
            If Len(Me.idCentros) = 0 Then
                desc = desc & Fuente.CodTrans & "-" & Fuente.NumTrans & " / "
            Else
                If InStr(1, desc, Fuente.CodCentro) = 0 Then
                    desc = desc & Fuente.CodCentro & " / "
                End If
            End If
        End If
        CodResponsable = Fuente.CodResponsable  '*** MAKOTO 16/ago/2000
        Nombre = Fuente.Nombre                  '*** MAKOTO 06/feb/01 Agregado
        If Fuente.GNTrans.CodPantalla = "PRPR" Then
            If Fuente.GNTrans.CodTrans <> "RI" Then
                CodGaranteRef = Fuente.CodProveedorRef
                If Fuente.ProfAdjudicada = 1 Then
                    CodProveedorRef = Fuente.Proforma1
                ElseIf Fuente.ProfAdjudicada = 2 Then
                    CodProveedorRef = Fuente.Proforma2
                ElseIf Fuente.ProfAdjudicada = 3 Then
                    CodProveedorRef = Fuente.Proforma3
                End If
            End If
            Set pc = Me.Empresa.RecuperaPCProvCliQuick(CodProveedorRef)
               If Not pc Is Nothing Then
                    Nombre = pc.Nombre
               End If
               Set pc = Nothing
    End If
       If Me.GNTrans.IVVisualizarNumPagos Then 'AUC agregado para yolita importa las entradas
        Me.NumeroPagos = Fuente.NumeroPagos
        Me.FechaPrimerPago = Fuente.FechaPrimerPago
        Me.FechaSegundoPago = Fuente.FechaSegundoPago
        Me.ValorEntrada = Fuente.ValorEntrada
        Me.ValorSegundaEntrada = Fuente.ValorSegundaEntrada
        Me.DiaPago = Fuente.DiaPago
       End If
        'Si requiere importar TSKardex
        If GNTrans.ImportaTSK Then
            ImportaTSKardex Fuente
        End If
        'Si requiere importar TSKardexRet       '*** MAKOTO 07/feb/01 Agregado
        If GNTrans.ImportaTSKRet Then
            ImportaTSKardexRet Fuente
        End If
        'Si requiere importar IVKardex
        If GNTrans.Modulo <> "AF" Then
            If GNTrans.ImportaIVK Then
                ImportaIVKardex Fuente, False, aux_inc
            End If
            'Si requiere importar IVKardex pero que pase CostoRealTotal a CostoTotal
            If GNTrans.ImportaIVKReal Then
                ImportaIVKardex Fuente, True, aux_inc
            End If
            'Si requiere importar IVKardexRecargo
            If GNTrans.ImportaIVKR Then
                ImportaIVKardexRecargo Fuente
            End If
        End If
        'Si requiere importar PCKardex
        If GNTrans.ImportaPCK Then
            If Fuente.GNTrans.CodPantalla = "IVRES_ALQ" Or Fuente.GNTrans.CodPantalla = "IVBQD2B" Or Fuente.GNTrans.CodPantalla = "IVBQD2BE" Or Fuente.GNTrans.CodPantalla = "IVRES_ALQF" Then  'AUC 14/02/07
                ImportaPCKardex1 Fuente, aux_inc
            Else
                ImportaPCKardex Fuente
            End If
        End If
        'Si requiere importar PCKardexCHP
        If GNTrans.ImportaPCKCHP Then
            ImportaPCKardexCHP Fuente
        End If
        'Si requiere importar CTLibroDetalle
        If GNTrans.ImportaCTD Then
            ImportaAsiento Fuente, aux_inc
        End If
            'Si requiere importar Presupuesto
        If GNTrans.ImportaPRCTD Then
            ImportaPRAsiento Fuente, aux_inc
        End If
        If GNTrans.IVGuiaRemision Then
            FechaInicio = Date
            FechaFin = Date
        End If
        'Almacena TransID de fuente en la colección
        If Not aux_inc Then LimpiaColeccion mcolTransIDs
        mcolTransIDs.Add item:=Fuente.transid
        'Si es importación incremental, cambia estado del ogígen inmediatamente
        '  Si no es incremental, lo hace al momento de grabar la trans para que
        '  no cambie estado en case de que cancela la transaccion sin grabar
        If Incremental Then
            'Si no está aprobado, no pasa al estado 'Despachado'
            ' para evitar que un asiento descuadrado marque como Despachado y afecte al balance
            If Fuente.Estado = ESTADO_APROBADO Then
                'Cambia el estado de fuente a Despachado
                mProps.objEmpresa.CambiaEstadoGNComp Fuente.transid, ESTADO_DESPACHADO
            End If
        End If
    Next i
    If UBound(v, 1) = 0 Then
        Descripcion = Descripcion & Mid$(desc, 1, 120 - Len(Descripcion))
    Else
        Descripcion = Descripcion & Mid$(desc, 1, 120 - Len(Descripcion))
    End If
    If Len(Descripcion) > 120 Then Descripcion = Mid$(Descripcion, 1, 120)
    Set Fuente = Nothing
End Sub
Private Sub ImportaIVKardexsSucursal( _
                ByVal Fuente As GNComprobante, _
                ByVal ConValorReal As Boolean, _
                ByVal Incremental As Boolean)
    Dim i As Long, ix As Long, ivk As IVKardex
    Dim Signo As Integer, item As IVInventario
    Dim CantOriginal As Currency, c As Currency
    If mcolIVKardex Is Nothing Then Set mcolIVKardex = New Collection
    'Si es importación incremental, no se borra lo anterior
    If Not Incremental Then
        BorrarIVKardex
    End If
        'RECUPERO LAS BODEGAS DE LAS SUCURSAL
        For i = 1 To Fuente.CountIVKardex
            Set ivk = Fuente.IVKardex(i).Clone
            Set ivk.GNComprobante = Me
            If mComparaBodegaPre(ivk.CodBodega) Then 'AUC revisa que la bodega este enlazada a la sucursal
                If Not mComparaFacturadoItem(ivk.Cantidad, ivk.IdInventario, Fuente.transid, ivk.CodBodega) Then
                   Set item = Fuente.Empresa.RecuperaIVInventario(ivk.IdInventario)
                    c = item.CostoDouble2(Me.FechaTrans, _
                    ivk.Cantidad, _
                    Me.transid, _
                    Me.HoraTrans)  '*** MAKOTO 08/dic/00 Agregado Hora
                    CantOriginal = ivk.Cantidad
                    If (GNTrans.Modulo <> Fuente.GNTrans.Modulo) Or _
                        (GNTrans.Modulo = Fuente.GNTrans.Modulo) Then       '**** PEND
                        'Asegura que la cantidad tenga el signo correcto
                        ' Es necesario porque tiene que cambiar de signo cuando importa de
                        ' FC(Egreso) --> FCV(Ingreso) o CP(Ingreso) --> CPV(Egreso)
                        ' HC(Ingreso) --> OF(Egreso) etc...
                        If Me.GNTrans.ImpRespetarSignosCantidad Then
                            If Len(Me.idFuentes) > 0 Or Len(Me.TransFuente) <> 0 Then
                                Signo = IIf(Fuente.GNTrans.IVTipoTrans = "E", -1, 1) '-1 si es egreso
                            Else
                                Signo = IIf(Me.GNTrans.IVTipoTrans = "E", -1, 1) '-1 si es egreso
                            End If
                        Else
                            If Me.GNTrans.IVTransCal Then
                                Signo = IIf(Me.GNTrans.IVTipoTrans = "E", 1, -1) '-1 si es egreso
                            Else
                                Signo = IIf(Me.GNTrans.IVTipoTrans = "E", -1, 1) '-1 si es egreso
                            End If
                        End If
                        ivk.Cantidad = Abs(ivk.Cantidad) * Signo
                        If Len(Me.CodDistrito) <> 0 Then
                            ivk.CodBodega = Me.CodDistrito
                        End If
                    End If
                    If Me.GNTrans.IVTipoTrans = "I" Or Me.GNTrans.IVTipoTrans = "X" Then
                        If Not ConValorReal Then
                            ivk.CostoTotal = Abs(ivk.CostoTotal) * Signo
                            ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
                        Else
                            ivk.CostoTotal = Abs(ivk.CostoRealTotal) * Signo
                            ivk.PrecioTotal = Abs(ivk.PrecioRealTotal) * Signo
                            ivk.Descuento = 0
                        End If
                        ivk.CostoRealTotal = Abs(ivk.CostoRealTotal) * Signo
                        ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
                    Else
                        If Not ConValorReal Then
                                If Me.GNTrans.AnexoCodTipoTrans = "1" Then
                                    If Me.GNTrans.AnexoCodTipoComp = "4" Then
                                        ivk.CostoTotal = ivk.CostoTotal * Signo
                                    Else
                                        ivk.CostoTotal = ivk.CostoTotal
                                    End If
                                Else
                                    ivk.CostoTotal = c * ivk.Cantidad
                                End If
                            If Me.GNTrans.IVActualizaPrecioLista Then
                                ivk.PrecioTotal = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.Cantidad
                            Else
                                ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
                            End If
                        Else
                            ivk.CostoTotal = c * ivk.Cantidad
                            ivk.PrecioTotal = Abs(ivk.PrecioRealTotal) * Signo
                            ivk.Descuento = 0
                        End If
                        ivk.CostoRealTotal = c * ivk.Cantidad
                        If Me.GNTrans.IVActualizaPrecioLista Then
                            ivk.PrecioRealTotal = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.Cantidad
                        Else
                            ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
                        End If
                    End If
                    If Me.GNTrans.IVControlaLimitePorFacturaxLinea Then
                        ivk.Nota1 = Fuente.IVKardex(i).Orden
                    End If
                    ivk.codItemPadre = Fuente.IVKardex(i).codItemPadre
                    'jeaa 23/03/2009
                    Set item = Fuente.Empresa.RecuperaIVInventario(ivk.IdInventario)
                    If Not item Is Nothing Then
                            If Not item.BandNoSeFactura Then
                                ' si se importa de un transferencia solo coge valores de ingreso
                                If Fuente.GNTrans.IVTipoTrans = "T" Or Fuente.GNTrans.IVTipoTrans = "A" Then
                                        If CantOriginal > 0 Then
                                            mcolIVKardex.Add ivk
                                        End If
                                Else
                                    mcolIVKardex.Add ivk
                                End If
                            End If
                   End If
                Set item = Nothing
            Else
                MsgBox "Este Item ya esa Facturado: " & ivk.CodInventario
            End If
       End If
    Next i
End Sub
    

Private Function mComparaBodegaPre(ByVal CodBodega As String) As Boolean
Dim sql As String
Dim rs As Recordset
Dim s As String
sql = "Select codBodega from ivbodega ivb Inner Join GnSucursal gns on gns.idsucursal = ivb.idsucursal"
sql = sql & " Where codSucursal  = '" & Me.GNTrans.CodSucursal & "'"
Set rs = Me.Empresa.OpenRecordset(sql)
Do While Not rs.EOF
    If CodBodega = rs!CodBodega Then
        mComparaBodegaPre = True
        Exit Function
    End If
    rs.MoveNext
Loop
End Function

'solo controla las cantidades de bodegas diferentes
'con transacciones diferentes para controlar todo agregar codigo
Public Function SemideviBodega() As Boolean
Dim bandSemi As Boolean
Dim i As Long
Dim Fuente As GNComprobante
Dim FuenteU As GNComprobante
Dim rs As Recordset
Dim v As Variant
Dim numReg As Long
Dim sql As String, s As String
Set Fuente = Empresa.RecuperaGNComprobante(Me.IdTransFuente)
If Not Fuente Is Nothing Then
    numReg = 0
    If Me.CountIVKardex <> Fuente.CountIVKardex Then
        'reviso si los que faltan ya estan facturados en otra transaccion
        sql = "Select transid from gncomprobante where Estado <> 3 And idtransfuente=" & Me.IdTransFuente
        Set rs = Me.Empresa.OpenRecordset(sql)
            Do While Not rs.EOF
                s = s & rs!transid & ","
                rs.MoveNext
            Loop
            s = Left(s, Len(s) - 1)
            Set rs = Nothing
            v = Split(s, ",")
            For i = 0 To UBound(v)
                Set FuenteU = Empresa.RecuperaGNComprobante(val(v(i)))
                If Not FuenteU Is Nothing Then
                    numReg = numReg + FuenteU.CountIVKardex
                    Set FuenteU = Nothing
                End If
            Next
            If numReg <> Fuente.CountIVKardex Then
                bandSemi = True
            End If
    Else
        'no hace nada porque tiene los mismos items
    End If
End If
SemideviBodega = bandSemi
Set Fuente = Nothing
Set rs = Nothing
End Function

Private Function mComparaFacturadoItem(ByVal CantActual As Currency, ByVal idItem As Long, ByVal IdTransFuente As Long, ByVal CodBodega As String) As Boolean
Dim sql As String
Dim rs As Recordset
Dim s As String
sql = "Select sum(Cantidad)as cantFacturado from IVKardex ivk Inner Join gncomprobante gn on gn.transid = ivk.Transid"
sql = sql & " Inner join ivbodega ivb on ivb.idbodega = ivk.idbodega "
sql = sql & " Where gn.estado <> 3 And gn.idtransfuente = " & IdTransFuente
sql = sql & " And ivk.idinventario = " & idItem
sql = sql & " And ivb.codbodega = '" & CodBodega & "'"
Set rs = Me.Empresa.OpenRecordset(sql)
Do While Not rs.EOF
    If rs!CantFacturado >= CantActual Then
        mComparaFacturadoItem = True
        Exit Function
    End If
    rs.MoveNext
Loop
End Function

Private Sub GrabarLacteos()
    Dim sql As String, rs As Recordset
    Dim AuxDesc As Integer
        'Recupera el registro correspondiente para modificar
        sql = "SELECT * FROM GNLacteos WHERE TransID=" & mProps.transid
        Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
        If Not rs.EOF Then
            #If DAOLIB Then
                rs.Edit
            #End If
        Else
            sql = "SELECT * FROM GNLacteos WHERE 1=0"
            Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
            rs.AddNew
        End If
        
    With rs
        !transid = mProps.transid                       'Es el mismo asignado a GnComprobante
        !Solidos = mProps.Solidos
        !Lactasa = mProps.Lactasa
        !Acidez = mProps.Acidez
        !Alcohol = mProps.Alcohol
        !Filtrado = mProps.Filtrado
        !Temperatura = mProps.Temperatura
        !PH = mProps.PH
        !Grasa = mProps.Grasa
        !Proteina = mProps.Proteina
        !Agua = mProps.Agua
        !QUIO = mProps.QUIO
        !Reduccion = mProps.Reduccion
        !Merma = mProps.Merma
        !BandTanqueLimpio = mProps.BandTanqueLimpio
        !BandEnvaseLimpio = mProps.BandEnvaseLimpio
        !HoraLlegada = mProps.HoraLlegada
        !IdTransportista = mProps.IdTransportista
        !IdTarifaTransp = mProps.IdTarifaTransp
        .Update
        #If DAOLIB Then
                rs.Bookmark = rs.LastModified
        #End If
        .Move 0             'Para actualizar
        .Close
    End With
End Sub

Public Sub RecuperarLacteos(Optional ByVal TransIDGnLacteos As Long)
    Dim sql As String, rs As Recordset
    If TransIDGnLacteos = 0 Then TransIDGnLacteos = mProps.transid
    sql = "SELECT GnL.*, codprovcli as CodTransportista, codinventario as  CodTarifaTransp,r.hora as horaMarcada FROM GnLacteos gnl "
   sql = sql & " Left Join Pcprovcli pc on gnl.idTransportista= pc.idProvcli"
    sql = sql & " Left Join Ivinventario iv on gnl.IdTarifaTransp= iv.idinventario "
    sql = sql & " Left Join Rasistencia r on r.IdJornada= gnl.HoraLlegada "
   sql = sql & " Where transid = " & TransIDGnLacteos
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
   If rs.EOF Then Exit Sub
    With rs
        If Not IsNull(!Solidos) Then mProps.Solidos = !Solidos
        If Not IsNull(!Lactasa) Then mProps.Lactasa = !Lactasa
        If Not IsNull(!Acidez) Then mProps.Acidez = !Acidez
        If Not IsNull(!Alcohol) Then mProps.Alcohol = !Alcohol
        If Not IsNull(!Alcohol) Then mProps.Filtrado = !Filtrado
        If Not IsNull(!Temperatura) Then mProps.Temperatura = !Temperatura
        If Not IsNull(!PH) Then mProps.PH = !PH
        If Not IsNull(!Grasa) Then mProps.Grasa = !Grasa
        If Not IsNull(!Proteina) Then mProps.Proteina = !Proteina
        If Not IsNull(!Agua) Then mProps.Agua = !Agua
        If Not IsNull(!QUIO) Then mProps.QUIO = !QUIO
        If Not IsNull(!Reduccion) Then mProps.Reduccion = !Reduccion
        If Not IsNull(!Merma) Then mProps.Merma = !Merma
        If Not IsNull(!BandTanqueLimpio) Then mProps.BandTanqueLimpio = !BandTanqueLimpio
        If Not IsNull(!BandEnvaseLimpio) Then mProps.BandEnvaseLimpio = !BandEnvaseLimpio
        If Not IsNull(!HoraLlegada) Then mProps.HoraLlegada = !HoraLlegada 'aqui esta el id
        If Not IsNull(!HoraMarcada) Then mProps.HoraMarcada = !HoraMarcada  'aqui la hora
       If Not IsNull(!IdTransportista) Then mProps.IdTransportista = !IdTransportista
        If Not IsNull(!CodTransportista) Then mProps.CodTransportista = !CodTransportista
        If Not IsNull(!IdTarifaTransp) Then mProps.IdTarifaTransp = !IdTarifaTransp
        If Not IsNull(!CodTarifaTransp) Then mProps.CodTarifaTransp = !CodTarifaTransp
       .Close
    End With
    Set rs = Nothing
End Sub


Public Property Let Solidos(ByVal value As Currency)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNLacteos.Solidos", MSGERR_SOLOVER
    mProps.Solidos = value
    mbooModificado = True
End Property

Public Property Get Solidos() As Currency
    Solidos = mProps.Solidos
End Property

Public Property Let Lactasa(ByVal value As Currency)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNLacteos.Lactasa", MSGERR_SOLOVER
    mProps.Lactasa = value
    mbooModificado = True
End Property

Public Property Get Lactasa() As Currency
    Lactasa = mProps.Lactasa
End Property

Public Property Let Acidez(ByVal value As Currency)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNLacteos.Acidez", MSGERR_SOLOVER
    mProps.Acidez = value
    mbooModificado = True
End Property

Public Property Get Acidez() As Currency
    Acidez = mProps.Acidez
End Property

Public Property Let Alcohol(ByVal value As Currency)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNLacteos.Alcohol", MSGERR_SOLOVER
    mProps.Alcohol = value
    mbooModificado = True
End Property

Public Property Get Alcohol() As Currency
    Alcohol = mProps.Alcohol
End Property

Public Property Let Filtrado(ByVal value As Currency)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNLacteos.Filtrado", MSGERR_SOLOVER
    mProps.Filtrado = value
    mbooModificado = True
End Property

Public Property Get Filtrado() As Currency
    Filtrado = mProps.Filtrado
End Property

Public Property Let Temperatura(ByVal value As Currency)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNLacteos.Temperatura", MSGERR_SOLOVER
    mProps.Temperatura = value
    mbooModificado = True
End Property

Public Property Get Temperatura() As Currency
    Temperatura = mProps.Temperatura
End Property

Public Property Let PH(ByVal value As Currency)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNLacteos.PH", MSGERR_SOLOVER
    mProps.PH = value
    mbooModificado = True
End Property

Public Property Get PH() As Currency
    PH = mProps.PH
End Property

Public Property Let Grasa(ByVal value As Currency)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNLacteos.Grasa", MSGERR_SOLOVER
    mProps.Grasa = value
    mbooModificado = True
End Property

Public Property Get Grasa() As Currency
    Grasa = mProps.Grasa
End Property

Public Property Let Proteina(ByVal value As Currency)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNLacteos.Proteina", MSGERR_SOLOVER
    mProps.Proteina = value
    mbooModificado = True
End Property

Public Property Get Proteina() As Currency
    Proteina = mProps.Proteina
End Property

Public Property Let Agua(ByVal value As Currency)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNLacteos.Agua", MSGERR_SOLOVER
    mProps.Agua = value
    mbooModificado = True
End Property

Public Property Get Agua() As Currency
    Agua = mProps.Agua
End Property

Public Property Let QUIO(ByVal value As Currency)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNLacteos.QUIO", MSGERR_SOLOVER
    mProps.QUIO = value
    mbooModificado = True
End Property

Public Property Get QUIO() As Currency
    QUIO = mProps.QUIO
End Property

Public Property Let Reduccion(ByVal value As Currency)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNLacteos.Reduccion", MSGERR_SOLOVER
    mProps.Reduccion = value
    mbooModificado = True
End Property

Public Property Get Reduccion() As Currency
    Reduccion = mProps.Reduccion
End Property

Public Property Let Merma(ByVal value As Currency)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNLacteos.Merma", MSGERR_SOLOVER
    mProps.Merma = value
    mbooModificado = True
End Property

Public Property Get Merma() As Currency
    Merma = mProps.Merma
End Property

Public Property Let BandTanqueLimpio(ByVal value As Byte)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNLacteos.BandTanqueLimpio", MSGERR_SOLOVER
        mProps.BandTanqueLimpio = value
        mbooModificado = True
End Property

Public Property Get BandTanqueLimpio() As Byte
    BandTanqueLimpio = mProps.BandTanqueLimpio
End Property

Public Property Let BandEnvaseLimpio(ByVal value As Byte)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNLacteos.BandEnvaseLimpio", MSGERR_SOLOVER
        mProps.BandEnvaseLimpio = value
        mbooModificado = True
End Property

Public Property Get BandEnvaseLimpio() As Byte
    BandEnvaseLimpio = mProps.BandEnvaseLimpio
End Property

Public Property Let HoraLlegada(value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNLacteos.HoraLlegada", MSGERR_SOLOVER
    
    'Solo cuando cambia el valor
        mProps.HoraLlegada = value
        mbooModificado = True
    
End Property

Public Property Get HoraLlegada() As String
    HoraLlegada = mProps.HoraLlegada
End Property

Public Property Let IdTransportista(ByVal value As Long)
    mProps.IdTransportista = value
    SetModificado
End Property

Public Property Get IdTransportista() As Long
    IdTransportista = mProps.IdTransportista
End Property

Public Property Let CodTransportista(ByVal value As String)
    Dim sql As String, rs As Recordset
    'Cuando cambia el valor
    If value <> mProps.CodTransportista Then
        If Len(value) > 0 Then
            'Actualiza Idcobrdor también
            sql = "SELECT IdProvcli FROM Pcprovcli WHERE bandproveedor=1 and CodProvcli='" & value & "'"
            
            Set rs = mProps.objEmpresa.OpenRecordset(sql)
            If rs.EOF Then
                Err.Raise ERR_NOHAYCODIGO, "GNLacteo.CodTransportista", MSGERR_NOHAYCODIGO
                Exit Property
            Else
                IdTransportista = rs!IdProvcli
            End If
            rs.Close
            Set rs = Nothing
        Else
            IdTransportista = 0
        End If
        mProps.CodTransportista = value
        SetModificado
    End If
End Property

Public Property Get CodTransportista() As String
    CodTransportista = Trim$(mProps.CodTransportista)
End Property

Public Property Let IdTarifaTransp(ByVal value As Long)
    mProps.IdTarifaTransp = value
    SetModificado
End Property

Public Property Get IdTarifaTransp() As Long
    IdTarifaTransp = mProps.IdTarifaTransp
End Property

Public Property Let CodTarifaTransp(ByVal value As String)
    Dim sql As String, rs As Recordset
    'Cuando cambia el valor
    If value <> mProps.CodTarifaTransp Then
        If Len(value) > 0 Then
            'Actualiza Idcobrdor también
            sql = "SELECT IdInventario FROM IvInventario WHERE CodInventario='" & value & "'"
            
            Set rs = mProps.objEmpresa.OpenRecordset(sql)
            If rs.EOF Then
                Err.Raise ERR_NOHAYCODIGO, "GNLacteo.CodTarifaTransp", MSGERR_NOHAYCODIGO
                Exit Property
            Else
                IdTarifaTransp = rs!IdInventario
            End If
            rs.Close
            Set rs = Nothing
        Else
            IdTarifaTransp = 0
        End If
        mProps.CodTarifaTransp = value
        SetModificado
    End If
End Property

Public Property Get CodTarifaTransp() As String
    CodTarifaTransp = Trim$(mProps.CodTarifaTransp)
End Property

Public Property Let HoraMarcada(value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNLacteos.HoraMarcada", MSGERR_SOLOVER
    'Solo cuando cambia el valor
        mProps.HoraMarcada = value
      '  mbooModificado = True
End Property
Public Property Get HoraMarcada() As String
    HoraMarcada = mProps.HoraMarcada
End Property

Public Function ListaTransFuenteHotel( _
                    ByVal idCentro As Long) As Recordset
    Dim sql As String, s As String, v As Variant, i As Long, CodT As String
    Dim cond As String, rs As Recordset, cond1 As String
    If Len(GNTrans.CodTransFuente) > 0 Then
        'Puede tener varios codigos de transaccion de fuente    ejm. (FC);(OF)
        v = Split(GNTrans.CodTransFuente, ";")
        For i = 0 To UBound(v)
            If Len(s) > 0 Then s = s & ","
            CodT = v(i)
            CodT = Left$(CodT, Len(CodT) - 1)       'Quita el signo ')'
            CodT = Right$(CodT, Len(CodT) - 1)      'Quita el signo '('
            s = s & "'" & CodT & "'"
        Next i
    Else
        Err.Raise ERR_INVALIDO, "GNComprobante.ListaTransFuente", _
                    "No está definida ningúna transacción de fuente para ésta transacción."
    End If
    '*** MAKOTO 06/mar/01 Agregado 'Nombre'
    'cambiado por Oliver 27/08/2003
    sql = "SELECT"
    If Not gobjMain.objCondicion.IncluirCero Then
        If gobjMain.objCondicion.TopN > 0 Then
            sql = sql & " TOP " & gobjMain.objCondicion.TopN
        End If
    End If
    sql = sql & " gc.TransID, gc.FechaTrans, gc.CodTrans, gc.NumTrans, "
    sql = sql & " gc.NumdocRef, gc.Nombre, gc.Descripcion, "
    sql = sql & " cc.idCentro, cc.CodCentro, cc.Descripcion AS DescCentro "
    'sql = sql & " case gc.Estado when '0' THEN 'NO CONT' when '1' THEN 'APROV' when '2' THEN 'DESPA' when '3' THEN 'ANULA' when '4' THEN 'SEM DESP' END AS estadoL "
        sql = sql & "FROM GNCentroCosto cc  RIGHT JOIN "
        sql = sql & "  GNComprobante gc "
        sql = sql & " LEFT JOIN gnoferta gof ON  gc.transid=gof.transid "
        sql = sql & " ON cc.IdCentro = gc.IdCentro "
        If Not gobjMain.objCondicion.IncluirCero Then
            If Len(cond) > 0 Then cond = cond & " AND "
            cond = cond & " gc.Estado IN ("
            If gobjMain.objCondicion.EstadoBool(ESTADO_NOAPROBADO) Then
                 cond = cond & ESTADO_NOAPROBADO & ","
            End If
            If gobjMain.objCondicion.EstadoBool(ESTADO_APROBADO) Then
                 cond = cond & ESTADO_APROBADO & ","
            End If
             If gobjMain.objCondicion.EstadoBool(ESTADO_DESPACHADO) Then
                 cond = cond & ESTADO_DESPACHADO & ","
            End If
             If gobjMain.objCondicion.EstadoBool(ESTADO_SEMDESPACHADO) Then
                 cond = cond & ESTADO_SEMDESPACHADO & ","
            End If
            cond = Mid$(cond, 1, Len(cond) - 1)
            cond = cond & ")"
        Else
            cond = cond & " bandfinalizado=0"
        End If
    If Not gobjMain.objCondicion.IncluirCero Then
    If Len(cond) > 0 Then cond = cond & " AND "
     cond = cond & " (gc.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, gobjMain.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, gobjMain.TipoDB) & " ) "
     'Condición de CodProvCli    (Opcional)
     End If
    If Len(gobjCond.CodPC1) > 0 Then
       If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(PC.CodProvCli='" & gobjCond.CodPC1 & "')"
   End If
    If Len(s) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gc.CodTrans IN (" & s & ")"
    End If
    If idCentro > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " cc.idCentro=" & idCentro
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
     sql = sql & " Group by gc.TransID, gc.FechaTrans, gc.horatrans, "
     sql = sql & " gc.CodTrans, gc.NumTrans, gc.NumdocRef, gc.Nombre, gc.Descripcion,"
     sql = sql & " cc.idCentro, cc.CodCentro, cc.Descripcion, gc.Estado "
'    sql = sql & " ORDER BY gc.FechaTrans Desc, gc.horatrans desc  ,gc.CodTrans,gc.NumTrans"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set ListaTransFuenteHotel = rs
    Set rs = Nothing
End Function


Public Property Let BandMensajeDescto(ByVal value As Boolean)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BandMensajeDescto", MSGERR_SOLOVER
        mProps.BandMensajeDescto = value
        mbooModificado = True
End Property

Public Property Get BandMensajeDescto() As Boolean
    BandMensajeDescto = mProps.BandMensajeDescto
End Property

Public Property Let PesoCarga(ByVal value As Currency)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.PesoCarga", MSGERR_SOLOVER
    mProps.PesoCarga = value
    mbooModificado = True
End Property

Public Property Get PesoCarga() As Currency
    PesoCarga = mProps.PesoCarga
End Property

Public Property Let BultosCarga(ByVal value As Currency)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BultosCarga", MSGERR_SOLOVER
    mProps.BultosCarga = value
    mbooModificado = True
End Property

Public Property Get BultosCarga() As Currency
    BultosCarga = mProps.BultosCarga
End Property


Public Property Let ValorFlete(ByVal value As Currency)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.ValorFlete", MSGERR_SOLOVER
    mProps.ValorFlete = value
    mbooModificado = True
End Property

Public Property Get ValorFlete() As Currency
    ValorFlete = mProps.ValorFlete
End Property



Public Property Let GuiaCarga(ByVal value As String)
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.GuiaCarga", MSGERR_SOLOVER
    If Len(value) > 80 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.GuiaCarga", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.GuiaCarga <> value Then
        mProps.GuiaCarga = IIf(value = "0", "", value)
        mbooModificado = True
    End If
End Property

Public Property Get GuiaCarga() As String
    GuiaCarga = Trim$(mProps.GuiaCarga)
End Property

Public Function IVKardexDescRebateItemTotal() As Currency
    Dim t As Currency, i As Long, ivk As IVKardex, bandCosto As Boolean
    Dim u As Currency
    
    'Decide si calcula en base a Precio o Costo
    bandCosto = GNTrans.IVRecargoEnCosto
    
    For i = 1 To CountIVKardex
        Set ivk = IVKardex(i)
        If bandCosto Then
            u = ivk.CostoTotal * ivk.Rebate
            'Redondea al formato de Costos
            u = MiCCur(Format$(u, Me.FormatoCosto))         '*** MAKOTO 29/ene/01 Mod.
        Else
            u = ivk.PrecioTotal * ivk.Descuento          '*** MAKOTO 29/ene/01 Mod.
            'Redondea al formato de P.Total
            u = MiCCur(Format$(u, Me.FormatoMoneda))        '*** MAKOTO 29/ene/01 Mod.
        End If
        
        t = t + u
    Next i
    IVKardexDescRebateItemTotal = Abs(t)      '*** MAKOTO 29/ene/01 Mod. Devuelde en valor absoluto
    Set ivk = Nothing
End Function

Public Property Let IdAgeCurier(ByVal value As Long)
    mProps.IdAgeCurier = value
    SetModificado
End Property
Public Property Get IdAgeCurier() As Long
    IdAgeCurier = mProps.IdAgeCurier
End Property
Public Property Let CodAgeCurier(ByVal value As String)
    Dim sql As String, rs As Recordset
    'Cuando cambia el valor
    If value <> mProps.CodAgeCurier Then
        If Len(value) > 0 Then
            'Actualiza Idcobrdor también
            sql = "SELECT IdAgeCurier FROM GnAgenciaCurier WHERE codAgeCurier='" & value & "'"
            Set rs = mProps.objEmpresa.OpenRecordset(sql)
            If rs.EOF Then
                Err.Raise ERR_NOHAYCODIGO, "GNoferta.CodAgeCurier", MSGERR_NOHAYCODIGO
                Exit Property
            Else
                IdAgeCurier = rs!IdAgeCurier
            End If
            rs.Close
            Set rs = Nothing
        Else
            IdAgeCurier = 0
        End If
        mProps.CodAgeCurier = value
        SetModificado
    End If
End Property
Public Property Get CodAgeCurier() As String
    CodAgeCurier = Trim$(mProps.CodAgeCurier)
End Property
Public Property Let IdDestinatario(ByVal value As Long)
    mProps.IdDestinatario = value
    SetModificado
End Property
Public Property Get IdDestinatario() As Long
    IdDestinatario = mProps.IdDestinatario
End Property
Public Property Let CodDestinatario(ByVal value As String)
    Dim sql As String, rs As Recordset
    'Cuando cambia el valor
    If value <> mProps.CodDestinatario Then
        If Len(value) > 0 Then
            'Actualiza Idcobrdor también
            sql = "SELECT IdProvcli FROM PCProvCli WHERE codprovcli='" & value & "' "
            Set rs = mProps.objEmpresa.OpenRecordset(sql)
            If rs.EOF Then
                Err.Raise ERR_NOHAYCODIGO, "GNoferta.CodDestinatario", MSGERR_NOHAYCODIGO
                Exit Property
            Else
                IdDestinatario = rs!IdProvcli
            End If
            rs.Close
            Set rs = Nothing
        Else
            IdDestinatario = 0
        End If
        mProps.CodDestinatario = value
        SetModificado
    End If
End Property
Public Property Get CodDestinatario() As String
    CodDestinatario = Trim$(mProps.CodDestinatario)
End Property
Public Sub AsignarIdProvcli()
Dim sql As String
Dim rs As Recordset
'Copia el id del cliente en el id del destinatario para guias
sql = "Select * from PCAsigna "
sql = sql & " Where Idprovcli = " & Me.IdClienteRef
sql = sql & " And idprovcliAsignado = " & Me.IdDestinatario
Set rs = Me.Empresa.OpenRecordset(sql)
If rs.RecordCount = 0 Then
    sql = "INSERT INTO PCAsigna (idprovcli,idprovcliAsignado) values(" & Me.IdClienteRef & "," & Me.IdDestinatario & ")"
   Me.Empresa.EjecutarSQL sql, 1
End If
Set rs = Nothing
End Sub
Public Sub ImportaDatosPaca( _
                ByVal TransIDs As String, _
                ByVal Incremental As Boolean)
    Dim Fuente As GNComprobante, i As Long, sql As String, rs As Recordset
    Dim v As Variant, tid As Long, aux_inc As Boolean
    Dim desc As String, pc As PCProvCli
    Dim ix As Long
    Dim iv As IVInventario
    If Len(TransIDs) = 0 Then Exit Sub
    'Prepara una colección para almacenar TransIDs de fuente,
    ' para cuando graba la transacción cambiar de estado a Despachado
    If mcolTransIDs Is Nothing Then Set mcolTransIDs = New Collection
    'Separa los TransIDs en un vector
    v = Split(TransIDs, ",")
    aux_inc = Incremental
    'Si la transacción está configurada que importa solo desde transacciones Apropadas
    If Me.GNTrans.ImportaSoloAprobado Then
        sql = "SELECT CodTrans, NumTrans FROM GNComprobante " & _
              "WHERE (Not Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & ")) " & _
                    " AND (TransID IN (" & TransIDs & ")) "
        Set rs = Me.Empresa.OpenRecordset(sql)
        If Not rs.EOF Then
            sql = MSGERR_NOIMPORTA & vbCr & vbCr
            Do Until rs.EOF
                sql = sql & rs.Fields("CodTrans") & " " & rs.Fields("NumTrans") & vbCr
                rs.MoveNext
            Loop
            Err.Raise ERR_NOIMPORTA, "GNComprobante.ImportaDatos", sql
        End If
        rs.Close
        Set rs = Nothing
    End If
    desc = " Trans. Fuente: "
    'Repite para todas las transacciones de fuente
    For i = 0 To UBound(v, 1)
        tid = val(v(i))             'Convierte en numérico
        'Desde la segunda trans. hay que incrementar siempre
        If i > 0 Then aux_inc = True
        'Recupera la transaccioón de fuente
        Set Fuente = Empresa.RecuperaGNComprobante(tid)
        If Fuente Is Nothing Then
            Err.Raise ERR_NOHAYCODIGO, "GNComprobante.ImportaDatos", _
                        "No se puede recuperar la transacción de fuente."
        End If
        'Si está ImportaSoloAprobado=True y el origen no está 'aprobado' ni 'despachado'
        If GNTrans.ImportaSoloAprobado And _
            Not (Fuente.Estado = ESTADO_APROBADO Or Fuente.Estado = ESTADO_DESPACHADO Or Fuente.Estado = ESTADO_SEMDESPACHADO) Then
            Err.Raise ERR_NOIMPORTA, "GNComprobante.ImportaDatos", MSGERR_NOIMPORTA
        End If
        'Copia los datos de cabecera
        If Len(Me.idCentros) = 0 Then
            CodCentro = Fuente.CodCentro
            CodCentroHijo = Fuente.CodCentroHijo 'para bolivar
        End If
        If Me.GNTrans.IVTipoTrans = "I" And Not Me.GNTrans.AfectaCantidad Then
            Set iv = Me.Empresa.RecuperaIVInventarioQuick(Me.GNTrans.CodInventarioPre)
            ix = Me.AddIVKardex
            Me.IVKardex(ix).CodInventario = iv.CodInventario
            Me.IVKardex(ix).TransidPaca = tid
            Me.IVKardex(ix).Nota = Fuente.CodTrans & "-" & Fuente.NumTrans
        Else
        End If
        'If Not Fuente.GNTrans.IVPideEmpleado Then
         '   If Len(Fuente.CodEmpleadoRef) = 0 Then
          '  CodProveedorRef = Fuente.CodProveedorRef
          '  Else
           ' CodEmpleadoRef = Fuente.CodEmpleadoRef
         '   End If
       ' Else
        '    If Len(Fuente.CodProveedorRef) > 0 Then
         '       CodEmpleadoRef = Fuente.CodEmpleadoRef
         '   Else
         '       CodEmpleadoRef = Fuente.CodEmpleadoRef
         '   End If
        'End If
        'CodClienteRef = Fuente.CodClienteRef
        'CodVendedor = Fuente.CodVendedor
'        If Fuente.CodTrans <> "RI" Then
'            If Me.GNTrans.IVValNumDoc Then
'                NumDocRef = Fuente.NumSerieEstaSRI & "-" & Fuente.NumSeriePuntoSRI & "-" & Right("000000000" & Fuente.NumTrans, 9)
'                If Me.GNTrans.IVComprobanteElectronico Then
'                    NumSerieEstablecimiento = Fuente.NumSerieEstaSRI
'                    NumSeriePunto = Fuente.NumSeriePuntoSRI
'                    NumSecuencial = Right("000000000" & Fuente.NumTrans, 9)
'                    NumSerie = Fuente.NumSerieEstaSRI & Fuente.NumSeriePuntoSRI
'                    CodTipoComp = Fuente.GNTrans.TipoTrans
'                    FechaAnexos = Fuente.FechaTrans
'                End If
'
'            Else
'                NumDocRef = Fuente.NumDocRef
'            End If
'        End If
        'CodGaranteRef = Fuente.CodGaranteRef
        'CodObra = Fuente.CodObra
'        If Me.GNTrans.IVVisibleSucursalSolicita Then
'            If Len(Fuente.CodZona) = 0 Then
'                CodZona = Fuente.GNTrans.CodSucursal
'            Else
'                CodZona = Fuente.CodZona
'            End If
'        Else
'            CodZona = Fuente.CodZona
'        End If
'        Estado1 = Fuente.Estado1
'        Estado2 = Fuente.Estado2
'        Atencion = Fuente.Atencion
'        Detalles = Fuente.Detalles
'        FechaEntrega = Fuente.FechaEntrega
'        FormaPago = Fuente.FormaPago
'        idCentroHijo = Fuente.idCentroHijo
'        TiempoEntrega = Fuente.TiempoEntrega
'        TiempoEstimadoEntrega = Fuente.TiempoEstimadoEntrega
'        Validez = Fuente.Validez
'        FechaValidez = Fuente.FechaValidez
'        NumDireccion = Fuente.NumDireccion
'        DirTransporte = Fuente.DirTransporte
'        IdPlan = Fuente.IdPlan
'        IdAgencia = Fuente.IdAgencia
'        IdEmpleadoRef = Fuente.IdEmpleadoRef
'        Estado1 = Fuente.Estado1
'        RequiereTransporte = Fuente.RequiereTransporte
'        'jeaa 04-04-2005 aumentado para saber de donde importo
'        If UBound(v, 1) = 0 Then
'            If Not Me.GNTrans.VisualizaTransFuente Then
'                If Len(desc & " " & Fuente.CodTrans & " No. " & Fuente.NumTrans & " / ") > 120 Then
'                    desc = desc & " " & Fuente.CodTrans & " No. " & Fuente.NumTrans & " / " & Mid$(Fuente.Descripcion, 1, Len(Fuente.Descripcion) - Len(Descripcion) - 20 - Len(Fuente.CodTrans))
'                Else
'                    desc = desc & " " & Fuente.CodTrans & " No. " & Fuente.NumTrans & " / " & Left$(Fuente.Descripcion, 120 - (Len(desc) + 5))
'                End If
'            Else
'                desc = Left$(Fuente.Descripcion, 120)
'                TransFuente = Fuente.CodTrans & " -" & Fuente.NumTrans
'            End If
'        Else
'            If Len(Me.idCentros) = 0 Then
'                desc = desc & Fuente.CodTrans & "-" & Fuente.NumTrans & " / "
'            Else
'                If InStr(1, desc, Fuente.CodCentro) = 0 Then
'                    desc = desc & Fuente.CodCentro & " / "
'                End If
'            End If
'        End If
'
'        CodResponsable = Fuente.CodResponsable  '*** MAKOTO 16/ago/2000
'        Nombre = Fuente.Nombre                  '*** MAKOTO 06/feb/01 Agregado
'        If Fuente.GNTrans.CodPantalla = "PRPR" Then
'            If Fuente.GNTrans.CodTrans <> "RI" Then
'                CodGaranteRef = Fuente.CodProveedorRef
'                If Fuente.ProfAdjudicada = 1 Then
'                    CodProveedorRef = Fuente.Proforma1
'                ElseIf Fuente.ProfAdjudicada = 2 Then
'                    CodProveedorRef = Fuente.Proforma2
'                ElseIf Fuente.ProfAdjudicada = 3 Then
'                    CodProveedorRef = Fuente.Proforma3
'                End If
'            End If
'            Set pc = Me.Empresa.RecuperaPCProvCliQuick(CodProveedorRef)
'               If Not pc Is Nothing Then
'                    Nombre = pc.Nombre
'               End If
'               Set pc = Nothing
'
'    End If
'       If Me.GNTrans.IVVisualizarNumPagos Then 'AUC agregado para yolita importa las entradas
'        Me.NumeroPagos = Fuente.NumeroPagos
'        Me.FechaPrimerPago = Fuente.FechaPrimerPago
'        Me.FechaSegundoPago = Fuente.FechaSegundoPago
'        Me.ValorEntrada = Fuente.ValorEntrada
'        Me.ValorSegundaEntrada = Fuente.ValorSegundaEntrada
'        Me.DiaPago = Fuente.DiaPago
'       End If
        'Si requiere importar TSKardex
'        If GNTrans.ImportaTSK Then
'            ImportaTSKardex Fuente
'        End If
        'Si requiere importar TSKardexRet       '*** MAKOTO 07/feb/01 Agregado
'        If GNTrans.ImportaTSKRet Then
'            ImportaTSKardexRet Fuente
'        End If
        'Si requiere importar IVKardex
'        If GNTrans.Modulo <> "AF" Then
'            If GNTrans.ImportaIVK Then
'                If GNTrans.FiltroItemxBod Then
'                    ImportaIVKardexsSucursal Fuente, False, aux_inc
'                Else
'                    ImportaIVKardexPACA Fuente, False, aux_inc
'                End If
'            End If
'            'Si requiere importar IVKardex pero que pase CostoRealTotal a CostoTotal
        If Me.GNTrans.IVTipoTrans = "T" Or Me.GNTrans.IVTipoTrans = "E" Or Me.GNTrans.AfectaCantidad Then
          '  If GNTrans.ImportaIVKReal Then
           '     If GNTrans.FiltroItemxBod Then
            '        ImportaIVKardexsSucursal Fuente, False, aux_inc
             '   Else
                    ImportaIVKardexPACA Fuente, True, aux_inc
              '  End If
            'End If
        End If
'
'            'Si requiere importar IVKardexRecargo
''            If GNTrans.ImportaIVKR Then
''                ImportaIVKardexRecargo Fuente
''            End If
'        End If
        'Si requiere importar PCKardex
'        If GNTrans.ImportaPCK Then
'            If Fuente.GNTrans.CodPantalla = "IVRES_ALQ" Or Fuente.GNTrans.CodPantalla = "IVBQD2B" Or Fuente.GNTrans.CodPantalla = "IVBQD2BE" Or Fuente.GNTrans.CodPantalla = "IVRES_ALQF" Then  'AUC 14/02/07
'                ImportaPCKardex1 Fuente, aux_inc
'            Else
'                ImportaPCKardex Fuente
'            End If
'        End If
        'Si requiere importar PCKardexCHP
'        If GNTrans.ImportaPCKCHP Then
'            ImportaPCKardexCHP Fuente
'        End If
'
'        'Si requiere importar CTLibroDetalle
'        If GNTrans.ImportaCTD Then
'            ImportaAsiento Fuente, aux_inc
'        End If
'
'            'Si requiere importar Presupuesto
'        If GNTrans.ImportaPRCTD Then
'            ImportaPRAsiento Fuente, aux_inc
'        End If
'
'        If GNTrans.IVGuiaRemision Then
'            FechaInicio = Date
'            FechaFin = Date
'        End If
        'Almacena TransID de fuente en la colección
        If Not aux_inc Then LimpiaColeccion mcolTransIDs
        mcolTransIDs.Add item:=Fuente.transid
        'Si es importación incremental, cambia estado del ogígen inmediatamente
        '  Si no es incremental, lo hace al momento de grabar la trans para que
        '  no cambie estado en case de que cancela la transaccion sin grabar
'        If Incremental Then
'            'Si no está aprobado, no pasa al estado 'Despachado'
'            ' para evitar que un asiento descuadrado marque como Despachado y afecte al balance
'            If Fuente.Estado = ESTADO_APROBADO Then
'                'Cambia el estado de fuente a Despachado
'                mProps.objEmpresa.CambiaEstadoGNComp Fuente.TransID, ESTADO_DESPACHADO
'            End If
'        End If
    Next i
    If UBound(v, 1) = 0 Then
        Descripcion = Descripcion & Mid$(desc, 1, 120 - Len(Descripcion))
    Else
        Descripcion = Descripcion & Mid$(desc, 1, 120 - Len(Descripcion))
    End If
    If Len(Descripcion) > 120 Then Descripcion = Mid$(Descripcion, 1, 120)
    Set Fuente = Nothing
    Set iv = Nothing
End Sub
Private Sub ImportaIVKardexPACA( _
                ByVal Fuente As GNComprobante, _
                ByVal ConValorReal As Boolean, _
                ByVal Incremental As Boolean)
    Dim i As Long, ix As Long, ivk As IVKardex
    Dim Signo As Integer, item As IVInventario
    If mcolIVKardex Is Nothing Then Set mcolIVKardex = New Collection
    'Si es importación incremental, no se borra lo anterior
    If Not Incremental Then             '*** MAKOTO 15/dic/00
        BorrarIVKardex
    End If
    For i = 1 To Fuente.CountIVKardex
        If Fuente.IVKardex(i).Cantidad > 0 Then 'And Fuente.IVKardex(i).bandVer Then
            Set ivk = Fuente.IVKardex(i).Clone
            Set ivk.GNComprobante = Me
            If (GNTrans.Modulo <> Fuente.GNTrans.Modulo) Or _
                (GNTrans.Modulo = Fuente.GNTrans.Modulo) Then       '**** PEND
                'Asegura que la cantidad tenga el signo correcto
                ' Es necesario porque tiene que cambiar de signo cuando importa de
                ' FC(Egreso) --> FCV(Ingreso) o CP(Ingreso) --> CPV(Egreso)
                ' HC(Ingreso) --> OF(Egreso) etc...
                If Me.GNTrans.ImpRespetarSignosCantidad Then
                   ' If Len(Me.idFuentes) > 0 Then
                        Signo = IIf(Fuente.GNTrans.IVTipoTrans = "E", -1, 1) '-1 si es egreso
                   ' Else
                   '     Signo = IIf(Me.GNTrans.IVTipoTrans = "E", -1, 1) '-1 si es egreso
                   ' End If
                Else
                    If Me.GNTrans.CodPantalla = "IVBDPACA" Then
                        Signo = IIf(Me.GNTrans.IVTipoTrans = "E", 1, -1) '-1 si es egreso
                    Else
                        Signo = IIf(Me.GNTrans.IVTipoTrans = "E", -1, 1) '-1 si es egreso
                    End If
                End If
                ivk.Cantidad = Abs(ivk.Cantidad) * Signo
            End If
            If Not ConValorReal Then
                ivk.CostoTotal = Abs(ivk.CostoTotal) * Signo
                ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
            Else
                ivk.CostoTotal = Abs(ivk.CostoRealTotal) * Signo
                ivk.PrecioTotal = Abs(ivk.PrecioRealTotal) * Signo
            End If
            ivk.CostoRealTotal = Abs(ivk.CostoRealTotal) * Signo
            ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
            ivk.TiempoEntrega = Fuente.IVKardex(i).TiempoEntrega
            ivk.Nota = Fuente.IVKardex(i).Nota
            ivk.IVA = Fuente.IVKardex(i).IVA
            ivk.CodBodega = Me.GNTrans.CodBodegaPre
            ivk.TransidPaca = Fuente.IVKardex(i).TransidPaca
            'jeaa 23/03/2009
            Set item = Fuente.Empresa.RecuperaIVInventario(ivk.IdInventario)
            If Not item Is Nothing Then
                If Not item.BandNoSeFactura Then
                    mcolIVKardex.Add ivk
                End If
            End If
            Set item = Nothing
        End If
    Next i
End Sub
Public Function ListaTransFuenteCurier( _
                    ByVal CodDestino As String) As Variant
    Dim sql As String, s As String, v As Variant, i As Long, CodT As String
    Dim cond As String, rs As Recordset, cond1 As String
    If Len(GNTrans.CodTransFuente) > 0 Then
        'Puede tener varios codigos de transaccion de fuente    ejm. (FC);(OF)
        v = Split(GNTrans.CodTransFuente, ";")
        For i = 0 To UBound(v)
            If Len(s) > 0 Then s = s & ","
            CodT = v(i)
            CodT = Left$(CodT, Len(CodT) - 1)       'Quita el signo ')'
            CodT = Right$(CodT, Len(CodT) - 1)      'Quita el signo '('
            s = s & "'" & CodT & "'"
        Next i
    Else
        Err.Raise ERR_INVALIDO, "GNComprobante.ListaTransFuente", _
                    "No está definida ningúna transacción de fuente para ésta transacción."
    End If
    '*** MAKOTO 06/mar/01 Agregado 'Nombre'
    'cambiado por Oliver 27/08/2003
    sql = "SELECT"
    If Not gobjMain.objCondicion.IncluirCero Then
        If gobjMain.objCondicion.TopN > 0 Then
            sql = sql & " TOP " & gobjMain.objCondicion.TopN
        End If
    End If
    '*** MAKOTO 05/feb/01 Mod. Aumentado 'NumDocRef' y 'Nombre'
    sql = sql & " gc.TransID, gc.FechaTrans, gc.CodTrans, gc.NumTrans, "
    sql = sql & " gc.NumdocRef, gc.Nombre, gc.Descripcion, "
    sql = sql & " cc.idCentro, cc.CodCentro, cc.Descripcion AS DescCentro, "
    sql = sql & " case gc.Estado when '0' THEN 'NO CONT' when '1' THEN 'APROV' when '2' THEN 'DESPA' when '3' THEN 'ANULA' when '4' THEN 'SEM DESP' END AS estadoL "
    sql = sql & " , gna.CodAgeCurier "
        sql = sql & "FROM GNCentroCosto cc "
        sql = sql & "  RIGHT JOIN GNComprobante gc "
        sql = sql & " LEFT JOIN gnoferta gof left join gnagenciacurier gna on gna.idagecurier = gof.idagecurier ON  gc.transid=gof.transid "
        sql = sql & IIf(Len(gobjCond.CodPC1) > 0, " Inner join PcProvCli pc ON (gc.IdProveedorRef = pc.IDProvCli  OR gc.IdClienteRef = pc.IDProvCli) ", " ")
        sql = sql & " ON cc.IdCentro = gc.IdCentro "
        If Not gobjMain.objCondicion.IncluirCero Then
            If Len(cond) > 0 Then cond = cond & " AND "
            cond = cond & " gc.Estado IN ("
            If gobjMain.objCondicion.EstadoBool(ESTADO_NOAPROBADO) Then
                 cond = cond & ESTADO_NOAPROBADO & ","
            End If
            If gobjMain.objCondicion.EstadoBool(ESTADO_APROBADO) Then
                 cond = cond & ESTADO_APROBADO & ","
            End If
             If gobjMain.objCondicion.EstadoBool(ESTADO_DESPACHADO) Then
                 cond = cond & ESTADO_DESPACHADO & ","
            End If
             If gobjMain.objCondicion.EstadoBool(ESTADO_SEMDESPACHADO) Then
                 cond = cond & ESTADO_SEMDESPACHADO & ","
            End If
            cond = Mid$(cond, 1, Len(cond) - 1)
            cond = cond & ")"
        Else
            cond = cond & " bandfinalizado=0"
        End If
    ' Condicion de Busqueda de Fecha
    If Not gobjMain.objCondicion.IncluirCero Then
    If Len(cond) > 0 Then cond = cond & " AND "
     cond = cond & " (gc.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, gobjMain.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, gobjMain.TipoDB) & " ) "
     'Condición de CodProvCli    (Opcional)
     End If
    If Len(gobjCond.CodPC1) > 0 Then
       If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(PC.CodProvCli='" & gobjCond.CodPC1 & "')"
   End If
    If Len(s) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gc.CodTrans IN (" & s & ")"
    End If
    If Len(CodDestino) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gna.Codagecurier='" & CodDestino & "'"
    End If
    If Len(CodCentro) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " cc.CodCentro='" & CodCentro & "'"
    End If
    If gobjCond.NumTrans1 <> 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gc.Numtrans= " & gobjCond.NumTrans1
    End If
    If gobjCond.NumTrans2 <> 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gc.numdocref= '" & gobjCond.NumTrans2 & "'"
    End If
    'JEAA 01/06/2007
    If GNTrans.ImportacionUnicaTrans Then
        cond = cond & " AND GC.TRANSID NOT IN"
        cond = cond & " (SELECT IdTransFuente"
        cond = cond & " FROM GNCentroCosto cc"
        cond = cond & " RIGHT JOIN  GNComprobante gc   ON cc.IdCentro = gc.IdCentro"
       cond = cond & " where gc.Estado <> 3 "
        cond = cond & " AND (gc.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, gobjMain.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, gobjMain.TipoDB) & " ) "
        cond = cond & " AND  gc.CodTrans IN ('" & GNTrans.CodTrans & "')"
        cond = cond & " AND IdTransFuente<>0 )"
        cond = cond & " and gc.transid not in( select idfuente from GNTransIdFuente g inner join gncomprobante gc on gc.transid=g.transid where gc.estado<>3 )"
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
     sql = sql & " Group by gc.TransID, gc.FechaTrans, gc.horatrans, "
     sql = sql & " gc.CodTrans, gc.NumTrans, gc.NumdocRef, gc.Nombre, gc.Descripcion,"
     sql = sql & " cc.idCentro, cc.CodCentro, cc.Descripcion, gc.Estado,gna.codagecurier"
    sql = sql & " ORDER BY gc.FechaTrans,gc.horatrans,gc.CodTrans,gc.NumTrans"
   Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set ListaTransFuenteCurier = rs
    Set rs = Nothing
End Function
Public Function ListaIVKardex2PACA( _
                    ByVal ExistPorBodega As Boolean) As Variant
    Dim sql As String, rs As Recordset
#If DAOLIB Then
    Dim qdef As DAO.QueryDef
    If ExistPorBodega Then
        Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsIVKardex")
    Else
        Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsIVKardex2")
    End If
    qdef.Parameters("tid") = mProps.transid
    qdef.Parameters("Cotizacion") = Me.Cotizacion("")
    qdef.Parameters("BandEgreso") = (Me.GNTrans.IVTipoTrans = "E")
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Dim cmd As ADODB.Command
    Set cmd = New ADODB.Command
    cmd.ActiveConnection = mProps.objEmpresa.Coneccion
    'Si la base es de JET
    If mProps.objEmpresa.TipoDB = TIPODB_JET Then
        cmd.CommandType = adCmdTable
        If ExistPorBodega Then
            cmd.CommandText = "spConsIVKardexISO"
        Else
        '    cmd.CommandText = "spConsIVKardex2"
        End If
        cmd.Parameters.Append cmd.CreateParameter("tid", adInteger, adParamInput, , mProps.transid)
        cmd.Parameters.Append cmd.CreateParameter("Cotizacion", adCurrency, adParamInput, , mProps.Cotizacion)
        Set rs = cmd.Execute
    'Si la base es de SQLSvr
    Else
        If ExistPorBodega Then
        sql = "spConsIVKardexPACA " & mProps.transid & ", " & _
                                  "1" & ", " & _
                                  CadenaBool((Me.GNTrans.IVTipoTrans = "E"), Me.Empresa.TipoDB)
        Else
        sql = "spConsIVKardexPACA " & mProps.transid & ", " & _
                                  Me.Cotizacion("") & ", " & _
                                  CadenaBool((Me.GNTrans.IVTipoTrans = "E"), Me.Empresa.TipoDB)
        End If
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
    End If
#End If
    Set ListaIVKardex2PACA = rs
    Set rs = Nothing
End Function


Public Property Let BandAplicaIvaAnt(value As Boolean)
        If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BandAplicaIvaAnt ", MSGERR_SOLOVER
        'Solo cuando cambia el valor
    If mProps.BandAplicaIvaAnt <> value Then
        mProps.BandAplicaIvaAnt = value
        mbooModificado = True
    End If
End Property

Public Property Get BandAplicaIvaAnt() As Boolean
    BandAplicaIvaAnt = mProps.BandAplicaIvaAnt
End Property

Public Function RecuperaVTConciliacionTrabajoImpresion(transid As Long, ByVal Valor As String, _
            ByVal CodTipo As String, ByVal BandConci As String) As Variant
    Dim sql As String, rs As Recordset
    sql = "select "
    sql = sql & " vw.trans as tr, FechaTrans, "
    sql = sql & " vw.numTrans as numtrans, DirTransporte, Nombre, vendedor, PrecioTotalBase0+PrecioTotalBaseIVA  as Valor, "
    sql = sql & " DirTransporte, dirDetalle,  zona , atencion, trabajo, HORATRANS, numdocref, telefono, planContarto, REFERENCIA2, detalles as trans "
    sql = sql & " from VWVTKardexConciliacionTrabajo vw left join vwConsSUMIVKardexIVA ivk on VW.transid=ivk.transid   "
    sql = sql & " Where transidPadre = " & transid
    sql = sql & " AND BandConciliado = " & BandConci & ""
   sql = sql & " ORDER BY vendedor, FechaTrans,  Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaVTConciliacionTrabajoImpresion = rs
    Set rs = Nothing
End Function

Public Function ListaIVKardexImpresionPACA( _
                    ByVal ExistPorBodega As Boolean) As Variant
        Dim sql As String, rs As Recordset
        Dim s As String
        Dim IdFuente As Long
        VerificaExistenciaTabla 1
        sql = "select  ivp.id,iv.descripcion2 Into Tmp1 "
        sql = sql & "From ivinventariodetallepaca ivp "
        sql = sql & " inner join ivkardex i"
        sql = sql & " Inner join gncomprobante g on g.transid = i.transid"
        sql = sql & " on i.id =ivp.idkardex"
        sql = sql & " Inner join gncomprobante g2"
        sql = sql & " Inner join ivkardex ivk2"
        sql = sql & " Inner join ivinventario iv on iv.idinventario = ivk2.idinventario"
        sql = sql & " on ivk2.transid = g2.transid"
        sql = sql & " on g2.transid = ivp.transid"
        sql = sql & " Where g.Transid = " & mProps.transid
'        sql = sql & " And iv.bandpeso = 1"
        sql = sql & " And len(iv.descripcion2) > 0"
       Me.Empresa.EjecutarSQL sql, 1
        sql = "Delete from tmp1"
        Me.Empresa.EjecutarSQL sql, 1
        sql = "select  ivp.id,iv.descripcion2 "
        sql = sql & "From ivinventariodetallepaca ivp "
        sql = sql & " inner join ivkardex i"
        sql = sql & " Inner join gncomprobante g on g.transid = i.transid"
        sql = sql & " on i.id =ivp.idkardex"
        sql = sql & " Inner join gncomprobante g2"
        sql = sql & " Inner join ivkardex ivk2"
        sql = sql & " Inner join ivinventario iv on iv.idinventario = ivk2.idinventario"
        sql = sql & " on ivk2.transid = g2.transid"
        sql = sql & " on g2.transid = ivp.transid"
        sql = sql & " Where g.Transid = " & mProps.transid
        'sql = sql & " And iv.bandpeso = 1"
        sql = sql & " And len(iv.descripcion2) > 0"
       Set rs = Me.Empresa.OpenRecordset(sql)
        Do While Not rs.EOF
            IdFuente = rs!Id
            s = s & rs!Descripcion2 & ","
            rs.MoveNext
            If Not rs.EOF Then
                If IdFuente <> rs!Id Then
                    s = Left(s, Len(s) - 1)
                    sql = "INSERT INTO TMP1(ID,DESCRIPCION2)VALUES (" & IdFuente & " ,'" & s & "' )"
                    Me.Empresa.EjecutarSQL sql, 1
                    s = ""
                End If
            Else
                    s = Left(s, Len(s) - 1)
                    sql = "INSERT INTO TMP1(ID,DESCRIPCION2)VALUES (" & IdFuente & " ,'" & s & "' )"
                    Me.Empresa.EjecutarSQL sql, 1
                    s = ""
            End If
        Loop
        sql = "spConsIVKardexImpresionPACA " & mProps.transid
       Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set ListaIVKardexImpresionPACA = rs
   Set rs = Nothing
End Function

Public Property Let EstadoGuia(ByVal value As Byte)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.Estado2", MSGERR_SOLOVER
        mProps.EstadoGuia = value
        mbooModificado = True
End Property

Public Property Get EstadoGuia() As Byte
    EstadoGuia = mProps.EstadoGuia
End Property

Public Function IVKardexRecAfectaIvaItemICE() As Currency
    Dim t As Currency, i As Long, ivkr As IVKardexRecargo
    
    For i = 1 To CountIVKardexRecargo
        Set ivkr = IVKardexRecargo(i)
        If ivkr.AfectaIvaItem Then
            t = t + ivkr.Valor
        End If
    Next i
    IVKardexRecAfectaIvaItemICE = t
    Set ivkr = Nothing
End Function

Public Function IVKardexTotalSoloIVA(bandReal As Boolean) As Currency
    Dim t As Currency
    'Decide si calcula en base de Precio o Costo
    If GNTrans.IVRecargoEnCosto Then
        t = IVKardexCTotalSoloIVA(bandReal)
    Else
        t = IVKardexPTotalSoloIVA(bandReal)
    End If
    IVKardexTotalSoloIVA = t
End Function


Public Function IVKardexCTotalSoloIVA(bandReal As Boolean) As Currency
Dim t As Currency, i As Long, v As Currency
    For i = 1 To CountIVKardex
        If IVKardex(i).IVA <> 0 Then
            If bandReal Then
                v = IVKardex(i).CostoRealTotal
            Else
                v = IVKardex(i).CostoTotal
            End If
        Else
            v = 0
        End If
        
        'Redondea con el formato para Costos      *** MAKOTO 13/feb/01 Mod.
        t = t + MiCCur(Format$(v, Me.FormatoCosto))
    Next i
    IVKardexCTotalSoloIVA = t
End Function

Public Function IVKardexPTotalSoloIVA(bandReal As Boolean) As Currency
    Dim t As Currency, i As Long, v As Currency
    t = 0
    For i = 1 To CountIVKardex
        If Me.IVKardex(i).IVA <> 0 Then
            If Me.IVKardex(i).Cantidad <> 0 Then 'AUC agregado para que calcule cuando no tenga cant
                If bandReal Then
                    v = IVKardex(i).PrecioRealTotal
                    t = t + v '***Agregado. 28/08/2003. Angel. No funciona bien 01/jun/04
                Else
                    v = IVKardex(i).PrecioTotal
                    t = t + MiCCur(Format$(v, Me.FormatoMoneda)) '***Antes, quitado para pruebas. Angel. 27/08/2003
                End If
            End If
        Else
            t = 0
        End If
    Next i

    If bandReal Then
        IVKardexPTotalSoloIVA = MiCCur(Format$(t, Me.FormatoMoneda)) '***Antes, quitado para pruebas. Angel. 27/08/2003
    Else
        IVKardexPTotalSoloIVA = t '***Antes, quitado para pruebas. Angel. 27/08/2003
    End If
End Function

Public Function RecuperaTransidenGnFuente(ByVal transid As Long) As String
    Dim sql As String, rs As Recordset
    sql = "select "
    sql = sql & " idfuentes "
    sql = sql & " from gnfuente   "
    sql = sql & " Where transid = " & transid
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    
    
    
    If rs.RecordCount > 0 Then
        RecuperaTransidenGnFuente = rs!idFuentes
    
    End If
    Set rs = Nothing
End Function
'
Public Function IVKardexTotalIVADou(bandReal As Boolean, BandIVA As Boolean) As Double
    Dim t As Double
    'Decide si calcula en base de Precio o Costo
    If GNTrans.IVRecargoEnCosto Then
        t = IVKardexCTotalIVADou(bandReal, BandIVA)
    Else
        t = IVKardexPTotalIVADou(bandReal, BandIVA)
    End If
    IVKardexTotalIVADou = t
End Function
Public Function IVKardexCTotalIVADou(bandReal As Boolean, BandIVA As Boolean) As Double
    Dim t As Double, i As Long, v As Double
    Dim item As IVInventario
    For i = 1 To CountIVKardex
        Set item = Me.Empresa.RecuperaIVInventarioQuick(IVKardex(i).IdInventario)
        If Not item Is Nothing Then
            If item.BandIVA = BandIVA And item.BandNoObjetoIVA = False Then
                If bandReal Then
                    v = IVKardex(i).CostoRealTotalDou
                Else
                    v = IVKardex(i).CostoTotalDou
                End If
                'Redondea con el formato para Costos      *** MAKOTO 13/feb/01 Mod.
                t = t + MiCCur(Format$(v, Me.FormatoCosto))
            End If
        End If
    Next i
    Set item = Nothing
    IVKardexCTotalIVADou = t
End Function
Public Function IVKardexPTotalIVADou(bandReal As Boolean, BandIVA As Boolean) As Double
    Dim t As Double, i As Long, v As Double
    Dim item As IVInventario
    For i = 1 To CountIVKardex
        If IVKardex(i).IdInventario <> 0 Then
            Set item = Me.Empresa.RecuperaIVInventario(IVKardex(i).IdInventario)
            If Not item Is Nothing Then
                If item.BandIVA = BandIVA Then
                    If Me.IVKardex(i).CantidadDou <> 0 Then 'AUC agregado para que calcule cuando no tenga cant
                        If bandReal Then
                            v = IVKardex(i).PrecioRealTotalDou
                            t = t + v '***Agregado. 28/08/2003. Angel. No funciona bien 01/jun/04
                        Else
                            v = IVKardex(i).PrecioTotalDou
                            t = t + MiCCur(Format$(v, Me.FormatoMoneda)) '***Antes, quitado para pruebas. Angel. 27/08/2003
                        End If
                    End If
                End If
            End If
        End If
    Next i
    Set item = Nothing
    If bandReal Then
        IVKardexPTotalIVADou = MiCCur(Format$(t, Me.FormatoMoneda))
    Else
        IVKardexPTotalIVADou = t
    End If
End Function
Public Function IVKardexTotal1Dou(bandReal As Boolean) As Double
    Dim t As Double
   'Decide si calcula en base de Precio o Costo
    If GNTrans.IVRecargoEnCosto Then
        t = IVKardexCTotalDou(bandReal)
    Else
        t = IVKardexPTotal1Dou(bandReal)
    End If
    IVKardexTotal1Dou = t
End Function
'
Public Function IVKardexCTotalDou(bandReal As Boolean) As Double
    Dim t As Double, i As Long, v As Double
    For i = 1 To CountIVKardex
        If bandReal Then
            v = IVKardex(i).CostoRealTotalDou
        Else
            v = IVKardex(i).CostoTotalDou
        End If
        'Redondea con el formato para Costos      *** MAKOTO 13/feb/01 Mod.
        t = t + MiCCur(Format$(v, Me.FormatoCosto))
    Next i
    IVKardexCTotalDou = t
End Function
'
Public Function IVKardexTotalDou(bandReal As Boolean) As Double
    Dim t As Currency
    'Decide si calcula en base de Precio o Costo
    If GNTrans.IVRecargoEnCosto Then
        t = IVKardexCTotalDou(bandReal)
    Else
        t = IVKardexPTotalDou(bandReal)
    End If
    IVKardexTotalDou = t
End Function
Public Function IVKardexPTotalDou(bandReal As Boolean) As Double
    Dim t As Double, i As Long, v As Double
    t = 0
    For i = 1 To CountIVKardex
        If Me.IVKardex(i).CantidadDou <> 0 Then 'AUC agregado para que calcule cuando no tenga cant
            If bandReal Then
                v = IVKardex(i).PrecioRealTotalDou
                t = t + v
            Else
                v = IVKardex(i).PrecioTotalDou
                t = t + MiCCur(Format$(v, Me.FormatoMoneda)) '***Antes, quitado para pruebas. Angel. 27/08/2003
            End If
        End If
    Next i
    If bandReal Then
        IVKardexPTotalDou = MiCCur(Format$(t, Me.FormatoMoneda)) '***Antes, quitado para pruebas. Angel. 27/08/2003
    Else
        IVKardexPTotalDou = t '***Antes, quitado para pruebas. Angel. 27/08/2003
    End If
End Function
'
Public Function IVKardexDescItemTotalTarifasinIVADou() As Double
    Dim t As Currency, i As Long, ivk As IVKardex, bandCosto As Boolean
    Dim u As Currency
    'Decide si calcula en base a Precio o Costo
    bandCosto = GNTrans.IVRecargoEnCosto
    For i = 1 To CountIVKardex
        Set ivk = IVKardex(i)
        If ivk.IVA = 0 Then
            If bandCosto Then
                u = ivk.CostoTotalDou * ivk.Descuento
                'Redondea al formato de Costos
                u = MiCCur(Format$(u, Me.FormatoCosto))
            Else
                u = ivk.PrecioTotalDou * ivk.Descuento
                'Redondea al formato de P.Total
                u = MiCCur(Format$(u, Me.FormatoMoneda))
            End If
            t = t + u
        End If
    Next i
    IVKardexDescItemTotalTarifasinIVADou = Abs(t)
    Set ivk = Nothing
End Function
Public Function IVKardexDescItemTotalTarifaconIVADou() As Double
    Dim t As Double, i As Long, ivk As IVKardex, bandCosto As Boolean
    Dim u As Double
    'Decide si calcula en base a Precio o Costo
    bandCosto = GNTrans.IVRecargoEnCosto
    For i = 1 To CountIVKardex
        Set ivk = IVKardex(i)
        If ivk.IVA <> 0 Then
            If bandCosto Then
                u = ivk.CostoTotalDou * ivk.Descuento           '*** MAKOTO 29/ene/01 Mod.
                'Redondea al formato de Costos
                u = MiCCur(Format$(u, Me.FormatoCosto))         '*** MAKOTO 29/ene/01 Mod.
            Else
                u = ivk.PrecioTotalDou * ivk.Descuento          '*** MAKOTO 29/ene/01 Mod.
                'Redondea al formato de P.Total
                u = MiCCur(Format$(u, Me.FormatoMoneda))        '*** MAKOTO 29/ene/01 Mod.
            End If
            t = t + u
        End If
    Next i
    IVKardexDescItemTotalTarifaconIVADou = Abs(t)      '*** MAKOTO 29/ene/01 Mod. Devuelde en valor absoluto
    Set ivk = Nothing
End Function
Public Function IVKardexIVAItemTotal2BodDou() As Double
    Dim t As Double, i As Long, ivk As IVKardex
    Dim por As Double, v As Double, bandCalculado As Boolean
    If Me.SoloVer Then
        'si era empresa publica no se ve
        For i = 1 To Me.CountIVKardexRecargo
            If Me.IVKardexRecargo(i).CodRecargo = "IVA" Then
                t = Me.IVKardexRecargo(i).Valor
                i = Me.CountIVKardexRecargo
            End If
        Next i
    Else
        For i = 1 To CountIVKardex
            Set ivk = IVKardex(i)
            If Me.IVKardex(i).CantidadDou < 0 Then 'AUC agregado para que no carge valores =0
                v = ivk.CalcularIvaItem(por, bandCalculado)
                t = t + v               'Suma valor de IVA de item
            End If
        Next i
    End If
    IVKardexIVAItemTotal2BodDou = Abs(t)
    Set ivk = Nothing
End Function
Public Function IVKardexIVAItemTotalDou() As Double
    Dim t As Double, i As Long, ivk As IVKardex
    Dim por As Double, v As Double, bandCalculado As Boolean
    If Me.SoloVer Then
        'si era empresa publica no se ve
        For i = 1 To Me.CountIVKardexRecargo
            If Me.IVKardexRecargo(i).CodRecargo = "IVA" Then
                t = Me.IVKardexRecargo(i).Valor
                i = Me.CountIVKardexRecargo
            End If
        Next i
    Else
        For i = 1 To CountIVKardex
            Set ivk = IVKardex(i)
            If Me.IVKardex(i).CantidadDou <> 0 Then 'AUC agregado para que no carge valores =0
                v = ivk.CalcularIvaItemDou(por, bandCalculado)
                t = t + v               'Suma valor de IVA de item
            End If
        Next i
    End If
    IVKardexIVAItemTotalDou = Abs(t)
    Set ivk = Nothing
End Function
'
Public Sub ProrratearIVKardexRecargoDou()
    Dim i As Long, ivk As IVKardex, p As Double, por As Double, Rebate As Double
    Dim ct As Double, pt As Double, desc As Currency, descRebate As Double
    Dim cpr As Double 'para costo/precio redondeado
    Dim Arancel As Double, aran As Double, FODIN As Double, fod As Double, CT_AUX As Double, ICE As Double
    Dim TotalNeto  As Double, TotalPeso As Double, CTP_AUX As Double, valFlete As Double, valSeguro As Double
    Dim Flete As Double, SEG As Double, item As IVInventario, recararan As Double, SOBTA As Double, sob As Double
    Dim fmt As String
    fmt = Me.Empresa.GNOpcion.ObtenerValor("FormatoCantRec")
    TotalPeso = 0
    p = IVRecargoTotal(False, True) 'Total de recargos prorrateados
    If Me.GNTrans.IVTipoTrans = "X" Then
        Flete = IVRecargo("FLETE") 'Arancel 'Total de recargos arancel
        SEG = IVRecargo("SEG") 'Fodin 'Total de recargos arancel
        Arancel = IVRecargo("ARAN") 'Fodin 'Total de recargos arancel
        FODIN = IVRecargo("FODIN") 'Fodin 'Total de recargos arancel
        SOBTA = IVRecargo("SOBTA")
        If SOBTA = 0 Then
            SOBTA = IVRecargo("SALVA")
        End If
        ICE = IVRecargo("ICE") 'Fodin 'Total de recargos arancel
        p = p - Arancel - FODIN - ICE - SOBTA
    End If
    ct = Abs(IVKardexCTotalDou(False))       'Total de costo total neto
    If Me.GNTrans.CodPantalla = "IVRES_ALQ" Or Me.GNTrans.CodPantalla = "IVBQD2BE" Then
       pt = IVKardexPTotal1Dou(False)
    Else
        pt = Abs(IVKardexPTotalDou(False))       'Total de precio total neto
    End If
    TotalPeso = 0
'    If Me.GNTrans.IVTipoTrans = "X" Then
'        For i = 1 To CountIVKardex
'                If Len(Me.IVKardex(i).CodInventario) > 0 Then
''                    Set item = Me.Empresa.RecuperaIVInventario(Me.IVKardex(i).CodInventario)
' '                   TotalPeso = TotalPeso + ((Me.IVKardex(i).Cantidad * item.PesoBruto))
'                End If
'        Next i
'    End If
'    Set item = Nothing
    'Si recargos son basados en Precio
    If Not GNTrans.IVRecargoEnCosto Then
        por = 0
        If pt Then por = p / pt
        For i = 1 To CountIVKardex
            Set ivk = IVKardex(i)
            'Costo real es lo mismo que costo
            ivk.CostoRealTotalDou = ivk.CostoTotalDou
            'Aplica %Descuento a precio total
            desc = ivk.PrecioTotalDou * ivk.Descuento          '*** MAKOTO 13/dic/00
            '*** Esto no estaba pero si esta para compras
            '*** por eso le agrego hay que ver que resultados da
            '*** MAKOTO 29/ene/01 Redondear al formato de presentación
            'desc = desc 'Format$(desc, fmt)
            desc = MiCCur(Format$(desc, Me.FormatoMoneda))
            'Desc = MiCCur(Desc) ''*** oLIVER PARA Q NO HAYA DIFERENCIA ENTRE PRECIOTOTAL Y PRECIOREALTOTAL
            'Prorratea al precio total
            'ivk.PrecioRealTotal = ivk.PrecioTotal * (1# + por) - Desc
            '***pruebas***Angel 01/jun/04
            cpr = Format$(ivk.PrecioTotalDou, fmt)
            'cpr = MiCCur(ivk.PrecioTotal)
 '           ivk.PrecioRealTotalDou = Format(cpr * (1# + por) - desc, fmt)
            ivk.PrecioRealTotalDou = Format(cpr * (1# + por) - desc, Me.Empresa.GNOpcion.FormatoMoneda(Me.CodMoneda)) 'por problema de decimales
       Next i
    'Si recargos son basados en Costo
    Else
        por = 0
        Rebate = 0
        TotalNeto = Abs(Me.IVKardexTotalDou(False))    'Total NETO sin recargo prorateado
        If ct Then por = p / ct
        For i = 1 To CountIVKardex
            Set ivk = IVKardex(i)
            ivk.PrecioRealTotalDou = ivk.PrecioTotalDou   'Precio no prorratea
            '%Descuento aplica a costo total
            desc = ivk.CostoTotalDou * ivk.Descuento       '*** MAKOTO 13/dic/00
            descRebate = ivk.CostoTotalDou * ivk.Rebate
            desc = Format$(desc, fmt)
            descRebate = Format$(descRebate, fmt)
            cpr = Format$(ivk.CostoTotalDou, fmt)
            ct = ivk.CostoTotalDou
            If Me.GNTrans.IVTipoTrans = "X" And TotalNeto <> 0 Then
                aran = ivk.ValArancel
                fod = ivk.ValFodin
                recararan = ivk.ValRecargoArancel
                If ivk.IdICE <> 0 Then
                End If
                ivk.CostoRealTotalDou = Format((cpr * (1# + por) - desc) + aran + fod + ivk.ICE + recararan, fmt)
                valFlete = (((Flete) * CTP_AUX))
                valSeguro = (((SEG) * CTP_AUX))
                Set item = Nothing
            Else
                ivk.CostoRealTotalDou = Format(cpr * (1# + por) - desc - descRebate, fmt)
            End If
       Next i
    End If
    Set ivk = Nothing
End Sub
'
Public Function IVKardexRecargoItemTotalDou() As Double
    Dim t As Double, i As Long, ivk As IVKardex, v As Double
    For i = 1 To CountIVKardex
        Set ivk = IVKardex(i)
        v = ivk.CantidadDou * ivk.ValorRecargoItem
        t = t + v
    Next i
    IVKardexRecargoItemTotalDou = Abs(t)
    Set ivk = Nothing
End Function
'
Public Function IVKardexICEItemDou(ByRef Porcentaje As Double) As Double
    Dim t As Double, i As Long, ivk As IVKardex, v As Double
    Porcentaje = 0
    For i = 1 To CountIVKardex
        Set ivk = IVKardex(i)
        If Me.GNTrans.IVTipoTrans = "X" Then
            t = t + ivk.ICE
        Else
            If GNTrans.IVRecargoEnCosto Then
                v = (ivk.CostoTotalDou + ivk.valFlete + ivk.valSeguro + ivk.ValArancel + ivk.ValFodin) * ivk.PorcentajeRecargoIce
            Else
                v = Abs(ivk.PrecioTotalDou) * ivk.PorcentajeRecargoIce
            End If
            t = t + v               'Suma valor de recargo de item
            If i <> 1 Then
                If Porcentaje = 0 Then
                If Porcentaje = ivk.PorcentajeRecargoIce Then
                    Porcentaje = ivk.PorcentajeRecargoIce
                Else
                    Porcentaje = 0
                End If
                End If
            Else
                Porcentaje = ivk.PorcentajeRecargoIce
            End If
        End If
    Next i
    Porcentaje = Porcentaje * 100
    IVKardexICEItemDou = Abs(t)
    Set ivk = Nothing
End Function
'
Public Function IVKardexSumaIVAItemTotalDou() As Double
    Dim t As Double, i As Long, ivk As IVKardex
    Dim por As Double, v As Double, bandCalculado As Boolean
    Dim pc As PCProvCli
    For i = 1 To CountIVKardex
        Set ivk = IVKardex(i)
        If Me.IVKardex(i).CantidadDou <> 0 Then 'AUC agregado para que no carge valores =0
            v = ivk.CalcularSumaIvaItem(por, bandCalculado)
            t = t + v               'Suma valor de IVA de item
        End If
    Next i
    If Me.FechaTrans < "01/06/2016" Then
        IVKardexSumaIVAItemTotalDou = Abs(t) * Me.GNTrans.Empresa.GNOpcion.PorcentajeIVA
    ElseIf Me.FechaTrans > "31/05/2016" And Me.FechaTrans < "01/06/2017" And Not Me.BandAplicaIvaAnt Then
        IVKardexSumaIVAItemTotalDou = Abs(t) * Me.GNTrans.Empresa.GNOpcion.PorcentajeIVAAnt
    ElseIf Me.FechaTrans >= Me.GNTrans.Empresa.GNOpcion.FechaIVA And Not Me.BandAplicaIvaAnt Then
        If Me.IdTransFuente <> 0 And Me.PorcentIVA = Me.Empresa.GNOpcion.PorcentajeIVAAnt And Me.GNTrans.AnexoCodTipoComp = "4" Then
            IVKardexSumaIVAItemTotalDou = Abs(t) * Me.GNTrans.Empresa.GNOpcion.PorcentajeIVAAnt
        Else
            Set pc = Me.GNTrans.Empresa.RecuperaPCProvCliQuick(Me.IdClienteRef)
            If Not pc Is Nothing Then
                If pc.bandCompensaIVA Then
                    IVKardexSumaIVAItemTotalDou = Abs(t) * Me.GNTrans.Empresa.GNOpcion.PorcentajeIVAAnt          '*** MAKOTO 29/ene/01 Mod.
                Else
                    IVKardexSumaIVAItemTotalDou = Abs(t) * Me.GNTrans.Empresa.GNOpcion.PorcentajeIVA          '*** MAKOTO 29/ene/01 Mod.
                End If
            Else
                IVKardexSumaIVAItemTotalDou = Abs(t) * Me.GNTrans.Empresa.GNOpcion.PorcentajeIVA          '*** MAKOTO 29/ene/01 Mod.
            End If
            Set pc = Nothing
        End If
    Else
        IVKardexSumaIVAItemTotalDou = Abs(t) * Me.GNTrans.Empresa.GNOpcion.PorcentajeIVAAnt          '*** MAKOTO 29/ene/01 Mod.
    End If
    Set ivk = Nothing
    Set pc = Nothing
End Function
Public Function IVKardexPTotal1Dou(bandReal As Boolean) As Double
    Dim t As Double, i As Long, v As Double
    For i = 1 To CountIVKardex
        If Me.IVKardex(i).CantidadDou < 0 Then 'AUC agregado para que calcule cuando no tenga cant
            If bandReal Then
                v = IVKardex(i).PrecioRealTotalDou
                t = t + v
            Else
                v = IVKardex(i).PrecioTotalDou * -1
                t = t + MiCCur(Format$(v, Me.FormatoMoneda))
            End If
        End If
    Next i
    If bandReal Then
        IVKardexPTotal1Dou = MiCCur(Format$(t, Me.FormatoMoneda))
    Else
        IVKardexPTotal1Dou = t
    End If
End Function

Public Property Let CodReceta(ByVal value As String)
    Dim sql As String, rs As Recordset
    'Cuando cambia el valor
    If value <> mProps.CodReceta Then
        If Len(value) > 0 Then
            'Actualiza Idcobrdor también
            sql = "SELECT Id FROM IVReceta WHERE codReceta='" & value & "'"
            Set rs = mProps.objEmpresa.OpenRecordset(sql)
            If rs.EOF Then
                Err.Raise ERR_NOHAYCODIGO, "GNoferta.CodReceta", MSGERR_NOHAYCODIGO
                Exit Property
            Else
                IdReceta = rs!Id
            End If
            rs.Close
            Set rs = Nothing
        Else
            IdReceta = 0
        End If
        mProps.CodReceta = value
        SetModificado
    End If
End Property

Public Property Get CodReceta() As String
    CodReceta = Trim$(mProps.CodReceta)
End Property

Public Property Let IdReceta(ByVal value As Long)
    mProps.IdReceta = value
    SetModificado
End Property

Public Property Get IdReceta() As Long
    IdReceta = mProps.IdReceta
End Property

Friend Sub ActualizaCantidadDou(ByVal Signo As String)
    Dim sql As String
    If CountIVKardex = 0 Then Exit Sub     'Si no tiene detalle de IVKardex, sale
    'Si la transaccion no afecta a la existencia, actualiza comprometido
    If Not GNTrans.AfectaCantidad Then
        'si afecta comprometido jeaa 24/10/2006
        If GNTrans.IVAfectaComprometido Then
            If GNTrans.IVTipoTrans = "E" Then
                If Signo = "-" Then
                    Signo = "+"
                Else
                    Signo = "-"
                End If
                sql = "spIVCompr '" & Signo & "', " & mProps.transid
                mProps.objEmpresa.Execute sql, True
            Else
                If Signo = "-" Then
                    Signo = "+"
                Else
                    Signo = "-"
                End If
                sql = "spIVCompr '" & Signo & "', " & mProps.transid
                mProps.objEmpresa.Execute sql, True
                If Signo = "-" Then
                     Signo = "+"
                Else
                     Signo = "-"
                End If
            End If
        End If
        Exit Sub
    Else
        If GNTrans.IVAfectaComprometido Then
            If Signo = "+" Then
                Signo = "+"
            Else
                Signo = "-"
            End If
            sql = "spIVCompr '" & Signo & "', " & mProps.transid
            mProps.objEmpresa.Execute sql, True
        End If
    End If
    'Aumenta o resta la existencia
    sql = "spIVExistDou '" & Signo & "', " & mProps.transid
    mProps.objEmpresa.Execute sql, True
End Sub
'
Private Sub ImportaIVKardexDou( _
                ByVal Fuente As GNComprobante, _
                ByVal ConValorReal As Boolean, _
                ByVal Incremental As Boolean)
    Dim i As Long, ix As Long, ivk As IVKardex
    Dim Signo As Integer, item As IVInventario
    Dim CantOriginal As Double, c As Double, pc As PCProvCli, nunPCGrupo As Integer, idPcGrupo As Long, cadPrecios  As String, ListaPrecio As String
    Dim v As Variant
    Dim fmt As String
    fmt = Me.Empresa.GNOpcion.ObtenerValor("FormatoCantRec")
    If mcolIVKardex Is Nothing Then Set mcolIVKardex = New Collection
    'Si es importación incremental, no se borra lo anterior
    If Not Incremental Then             '*** MAKOTO 15/dic/00
        BorrarIVKardex
    End If
        For i = 1 To Fuente.CountIVKardex
            If Me.GNTrans.CodPantalla = "IVBQD2B" Or Me.GNTrans.CodPantalla = "IVBQD2BE" Or Me.GNTrans.CodPantalla = "IVDVALQ" Then
                If Fuente.IVKardex(i).CantidadDou < 0 Then
                    Set ivk = Fuente.IVKardex(i).Clone
                    Set ivk.GNComprobante = Me
                    Set item = Fuente.Empresa.RecuperaIVInventario(ivk.IdInventario)
                    If Me.Empresa.GNOpcion.BandCostoUCParaCosto Then
                        c = item.CostoReferencial
                    Else
                        c = item.CostoDouble2(Me.FechaTrans, _
                            ivk.CantidadDou, _
                            Me.transid, _
                            Me.HoraTrans)  '*** MAKOTO 08/dic/00 Agregado Hora
                    End If
                    If (GNTrans.Modulo <> Fuente.GNTrans.Modulo) Or _
                        (GNTrans.Modulo = Fuente.GNTrans.Modulo) Then       '**** PEND
                        'Asegura que la CantidadDou tenga el signo correcto
                        ' Es necesario porque tiene que cambiar de signo cuando importa de
                        ' FC(Egreso) --> FCV(Ingreso) o CP(Ingreso) --> CPV(Egreso)
                        ' HC(Ingreso) --> OF(Egreso) etc...
                        Signo = IIf(GNTrans.IVTipoTrans = "E", -1, 1) '-1 si es egreso
                        ivk.CantidadDou = Abs(ivk.CantidadDou) * Signo
                    End If
                If Me.GNTrans.IVTipoTrans = "I" Then
                 If Not ConValorReal Then
                        ivk.CostoTotalDou = Abs(ivk.CostoTotalDou) * Signo
                        ivk.PrecioTotalDou = Abs(ivk.PrecioTotalDou) * Signo
                    Else
                        ivk.CostoTotalDou = Abs(ivk.CostoRealTotalDou) * Signo
                        ivk.PrecioTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                    End If
                    ivk.CostoRealTotalDou = Abs(ivk.CostoRealTotalDou) * Signo
                    ivk.PrecioRealTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                    ivk.idpadre = Fuente.transid
                    ivk.IdPadreSub = Fuente.IVKardex(i).Orden
                Else
                    If Not ConValorReal Then
                        ivk.CostoTotalDou = c * ivk.CantidadDou * Signo
'                        ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
                        If Me.GNTrans.IVActualizaPrecioLista Then
                            ivk.PrecioRealTotalDou = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.CantidadDou
                            ivk.PrecioTotalDou = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.CantidadDou
                        Else
                            ivk.PrecioRealTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                        End If
                    Else
                        ivk.CostoTotalDou = c * ivk.CantidadDou * Signo
                        ivk.PrecioTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                        ivk.idpadre = Fuente.transid
                        ivk.IdPadreSub = Fuente.IVKardex(i).Orden
                    End If
                End If
              mcolIVKardex.Add ivk
            End If
       ElseIf Me.GNTrans.CodPantalla = "IVRES_ALQ" Or Fuente.GNTrans.CodPantalla = "IVRES_ALQ" Or Fuente.GNTrans.CodPantalla = "IVBQD2BE" Then
            If Right(Fuente.CodTrans, 1) = "M" Then
                If Fuente.IVKardex(i).CantidadDou < 0 Then
                    Set ivk = Fuente.IVKardex(i).Clone
                    Set ivk.GNComprobante = Me
                    Set item = Fuente.Empresa.RecuperaIVInventario(ivk.IdInventario)
                    If Me.Empresa.GNOpcion.BandCostoUCParaCosto Then
                        c = item.CostoReferencial
                    Else
                        c = item.CostoDouble2(Me.FechaTrans, _
                            ivk.CantidadDou, _
                            Me.transid, _
                            Me.HoraTrans)  '*** MAKOTO 08/dic/00 Agregado Hora
                    End If
                   If (GNTrans.Modulo <> Fuente.GNTrans.Modulo) Or _
                        (GNTrans.Modulo = Fuente.GNTrans.Modulo) Then       '**** PEND
                        'Asegura que la CantidadDou tenga el signo correcto
                        ' Es necesario porque tiene que cambiar de signo cuando importa de
                        ' FC(Egreso) --> FCV(Ingreso) o CP(Ingreso) --> CPV(Egreso)
                        ' HC(Ingreso) --> OF(Egreso) etc...
                   If Fuente.GNTrans.CodPantalla = "IVRES_ALQ" Or Fuente.GNTrans.CodPantalla = "IVBQD2BE" Then
                            Signo = 1
                        Else
                            Signo = IIf(Fuente.GNTrans.IVTipoTrans = "A", 1, -1) '-1 si es egreso
                        End If
                        ivk.CantidadDou = Abs(ivk.CantidadDou) * Signo
                        If Fuente.IdTransFuente <> 0 Then
                            ivk.NumDias = Fuente.IdTransFuente
                        Else
                            ivk.NumDias = Fuente.transid
                        End If
                    End If
                    If Me.GNTrans.IVTipoTrans = "I" Then
                        If Not ConValorReal Then
                            ivk.CostoTotalDou = Abs(ivk.CostoTotalDou) * Signo
                            ivk.PrecioTotalDou = Abs(ivk.PrecioTotalDou) * Signo
                        Else
                            ivk.CostoTotalDou = Abs(ivk.CostoRealTotalDou) * Signo
                            ivk.PrecioTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                        End If
                        ivk.CostoRealTotalDou = Abs(ivk.CostoRealTotalDou) * Signo
                        ivk.PrecioRealTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                    Else
                        If Not ConValorReal Then
                            ivk.CostoTotalDou = c * ivk.CantidadDou * Signo
    '                        ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
                            If Me.GNTrans.IVActualizaPrecioLista Then
                                ivk.PrecioRealTotalDou = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.CantidadDou
                                ivk.PrecioTotalDou = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.CantidadDou
                            Else
                                ivk.PrecioRealTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                            End If
                        Else
                            ivk.CostoTotalDou = c * ivk.CantidadDou * Signo
                            ivk.PrecioTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                        End If
                    End If
                    mcolIVKardex.Add ivk
                End If
            Else
                If Fuente.IVKardex(i).CantidadDou > 0 Then
                    Set ivk = Fuente.IVKardex(i).Clone
                    Set ivk.GNComprobante = Me
                    Set item = Fuente.Empresa.RecuperaIVInventario(ivk.IdInventario)
                    If Me.Empresa.GNOpcion.BandCostoUCParaCosto Then
                        c = item.CostoReferencial
                    Else
                        c = item.CostoDouble2(Me.FechaTrans, _
                            ivk.CantidadDou, _
                            Me.transid, _
                            Me.HoraTrans)  '*** MAKOTO 08/dic/00 Agregado Hora
                    End If
                   If (GNTrans.Modulo <> Fuente.GNTrans.Modulo) Or _
                        (GNTrans.Modulo = Fuente.GNTrans.Modulo) Then       '**** PEND
                        'Asegura que la CantidadDou tenga el signo correcto
                        ' Es necesario porque tiene que cambiar de signo cuando importa de
                        ' FC(Egreso) --> FCV(Ingreso) o CP(Ingreso) --> CPV(Egreso)
                        ' HC(Ingreso) --> OF(Egreso) etc...
                        If Fuente.GNTrans.CodPantalla = "IVRES_ALQ" Or Fuente.GNTrans.CodPantalla = "IVBQD2BE" Then
                            Signo = -1
                        Else
                            Signo = IIf(Fuente.GNTrans.IVTipoTrans = "A", -1, 1) '-1 si es egreso
                        End If
                        ivk.CantidadDou = Abs(ivk.CantidadDou) * Signo
                        If Fuente.IdTransFuente <> 0 Then
                            ivk.NumDias = Fuente.IdTransFuente
                        Else
                            ivk.NumDias = Fuente.transid
                        End If
                    End If
                    If Me.GNTrans.IVTipoTrans = "I" Then
                        If Not ConValorReal Then
                            ivk.CostoTotalDou = Abs(ivk.CostoTotalDou) * Signo
                            ivk.PrecioTotalDou = Abs(ivk.PrecioTotalDou) * Signo
                        Else
                            ivk.CostoTotalDou = Abs(ivk.CostoRealTotalDou) * Signo
                            ivk.PrecioTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                        End If
                        ivk.CostoRealTotalDou = Abs(ivk.CostoRealTotalDou) * Signo
                        ivk.PrecioRealTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                    Else
                        If Not ConValorReal Then
                            ivk.CostoTotalDou = c * ivk.CantidadDou '* Signo
                            ivk.PrecioTotalDou = Abs(ivk.PrecioTotalDou) * Signo
                            If Me.GNTrans.IVActualizaPrecioLista Then
                                ivk.PrecioRealTotalDou = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.CantidadDou
                                ivk.PrecioTotalDou = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.CantidadDou
                            Else
                                ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
                            End If
                        Else
                            ivk.CostoTotalDou = c * ivk.CantidadDou * Signo
                            ivk.PrecioTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                        End If
                    End If
                    mcolIVKardex.Add ivk
                Else
                    If Fuente.GNTrans.IVTipoTrans = "A" Then
                        If Fuente.IVKardex(i).CantidadDou > 0 Then
                            Set ivk = Fuente.IVKardex(i).Clone
                            Set ivk.GNComprobante = Me
                            Set item = Fuente.Empresa.RecuperaIVInventario(ivk.IdInventario)
                            If Me.Empresa.GNOpcion.BandCostoUCParaCosto Then
                                c = item.CostoReferencial
                            Else
                                c = item.CostoDouble2(Me.FechaTrans, _
                                    ivk.CantidadDou, _
                                    Me.transid, _
                                    Me.HoraTrans)  '*** MAKOTO 08/dic/00 Agregado Hora
                            End If
                           If (GNTrans.Modulo <> Fuente.GNTrans.Modulo) Or _
                                (GNTrans.Modulo = Fuente.GNTrans.Modulo) Then       '**** PEND
                                'Asegura que la CantidadDou tenga el signo correcto
                                ' Es necesario porque tiene que cambiar de signo cuando importa de
                                ' FC(Egreso) --> FCV(Ingreso) o CP(Ingreso) --> CPV(Egreso)
                                ' HC(Ingreso) --> OF(Egreso) etc...
                                If Fuente.GNTrans.CodPantalla = "IVRES_ALQ" Or Fuente.GNTrans.CodPantalla = "IVBQD2B" Or Fuente.GNTrans.CodPantalla = "IVBQD2BE" Then
                                    Signo = -1
                                Else
                                    Signo = IIf(Fuente.GNTrans.IVTipoTrans = "A", -1, 1) '-1 si es egreso
                                End If
                                ivk.CantidadDou = Abs(ivk.CantidadDou) * Signo
                                If Fuente.IdTransFuente <> 0 Then
                                    ivk.NumDias = Fuente.IdTransFuente
                                Else
                                    ivk.NumDias = Fuente.transid
                                End If
                            End If
                            If Me.GNTrans.IVTipoTrans = "I" Then
                                If Not ConValorReal Then
                                    ivk.CostoTotalDou = Abs(ivk.CostoTotalDou) * Signo
                                    ivk.PrecioTotalDou = Abs(ivk.PrecioTotalDou) * Signo
                                Else
                                    ivk.CostoTotalDou = Abs(ivk.CostoRealTotalDou) * Signo
                                    ivk.PrecioTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                                End If
                                ivk.CostoRealTotalDou = Abs(ivk.CostoRealTotalDou) * Signo
                                ivk.PrecioRealTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                            Else
                                If Not ConValorReal Then
                                    ivk.CostoTotalDou = c * ivk.CantidadDou '* Signo
                                    ivk.PrecioTotalDou = Abs(ivk.PrecioTotalDou) * Signo
                                    If Me.GNTrans.IVActualizaPrecioLista Then
                                        ivk.PrecioRealTotalDou = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.CantidadDou
                                        ivk.PrecioTotalDou = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.CantidadDou
                                    Else
                                        ivk.PrecioRealTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                                    End If
                                Else
                                    ivk.CostoTotalDou = c * ivk.CantidadDou * Signo
                                    ivk.PrecioTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                                End If
                            End If
                            mcolIVKardex.Add ivk
                        End If
                    Else
                        If Fuente.IVKardex(i).CantidadDou < 0 Then
                            Set ivk = Fuente.IVKardex(i).Clone
                            Set ivk.GNComprobante = Me
                            Set item = Fuente.Empresa.RecuperaIVInventario(ivk.IdInventario)
                            If Me.Empresa.GNOpcion.BandCostoUCParaCosto Then
                                c = item.CostoReferencial
                            Else
                                c = item.CostoDouble2(Me.FechaTrans, _
                                ivk.CantidadDou, _
                                Me.transid, _
                                Me.HoraTrans)  '*** MAKOTO 08/dic/00 Agregado Hora
                            End If
                           If (GNTrans.Modulo <> Fuente.GNTrans.Modulo) Or _
                                (GNTrans.Modulo = Fuente.GNTrans.Modulo) Then       '**** PEND
                                'Asegura que la CantidadDou tenga el signo correcto
                                ' Es necesario porque tiene que cambiar de signo cuando importa de
                                ' FC(Egreso) --> FCV(Ingreso) o CP(Ingreso) --> CPV(Egreso)
                                ' HC(Ingreso) --> OF(Egreso) etc...
                                If Fuente.GNTrans.CodPantalla = "IVRES_ALQ" Or Fuente.GNTrans.CodPantalla = "IVBQD2BE" Then
                                    Signo = -1
                                Else
                                    Signo = IIf(Fuente.GNTrans.IVTipoTrans = "A", -1, 1) '-1 si es egreso
                                    If Fuente.GNTrans.IVTipoTrans = "E" Then
                                        Signo = -1
                                    End If
                                End If
                                ivk.CantidadDou = Abs(ivk.CantidadDou) * Signo
                                If Fuente.IdTransFuente <> 0 Then
                                    ivk.NumDias = Fuente.IdTransFuente
                                Else
                                    ivk.NumDias = Fuente.transid
                                End If
                            End If
                            If Me.GNTrans.IVTipoTrans = "I" Then
                                If Not ConValorReal Then
                                    ivk.CostoTotalDou = Abs(ivk.CostoTotalDou) * Signo
                                    ivk.PrecioTotalDou = Abs(ivk.PrecioTotalDou) * Signo
                                Else
                                    ivk.CostoTotalDou = Abs(ivk.CostoRealTotalDou) * Signo
                                    ivk.PrecioTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                                End If
                                ivk.CostoRealTotalDou = Abs(ivk.CostoRealTotalDou) * Signo
                                ivk.PrecioRealTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                            Else
                                If Not ConValorReal Then
                                    ivk.CostoTotalDou = c * ivk.CantidadDou '* Signo
                                    ivk.PrecioTotalDou = Abs(ivk.PrecioTotalDou) * Signo
                                    If Me.GNTrans.IVActualizaPrecioLista Then
                                        ivk.PrecioRealTotalDou = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.CantidadDou
                                        ivk.PrecioTotalDou = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.CantidadDou
                                    Else
                                        ivk.PrecioRealTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                                    End If
                                Else
                                    ivk.CostoTotalDou = c * ivk.CantidadDou * Signo
                                    ivk.PrecioTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                                End If
                            End If
                            mcolIVKardex.Add ivk
                        End If
                    End If
                End If
            End If
        ElseIf Me.GNTrans.CodPantalla = "IVBD" Or Me.GNTrans.CodPantalla = "IVBDBQD" Then 'En caso que importe para transferencia de bodega
            If Fuente.IVKardex(i).CantidadDou > 0 Then
                Set ivk = Fuente.IVKardex(i).Clone
                Set ivk.GNComprobante = Me
                Set item = Fuente.Empresa.RecuperaIVInventario(ivk.IdInventario)
                If Me.Empresa.GNOpcion.BandCostoUCParaCosto Then
                    c = item.CostoReferencial
                Else
                    c = item.CostoDouble2(Me.FechaTrans, _
                        ivk.CantidadDou, _
                        Me.transid, _
                        Me.HoraTrans)  '*** MAKOTO 08/dic/00 Agregado Hora
                End If
               If (GNTrans.Modulo <> Fuente.GNTrans.Modulo) Or _
                    (GNTrans.Modulo = Fuente.GNTrans.Modulo) Then       '**** PEND
                    Signo = IIf(GNTrans.IVTipoTrans = "T", -1, 1)   '-1 si es egreso
                    ivk.CantidadDou = Abs(ivk.CantidadDou) * Signo
                End If
                If Me.GNTrans.IVTipoTrans = "I" Then
                    If Not ConValorReal Then
                        ivk.CostoTotalDou = Abs(ivk.CostoTotalDou) * Signo
                        ivk.PrecioTotalDou = Abs(ivk.PrecioTotalDou) * Signo
                    Else
                        ivk.CostoTotalDou = Abs(ivk.CostoRealTotalDou) * Signo
                        ivk.PrecioTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                    End If
                    ivk.CostoRealTotalDou = Abs(ivk.CostoRealTotalDou) * Signo
                    ivk.PrecioRealTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                ElseIf Fuente.GNTrans.IVTipoTrans = "I" Then
                    ivk.CantidadDou = Abs(ivk.CantidadDou) * Signo
                    ivk.CostoTotalDou = c * Abs(ivk.CantidadDou) * Signo
                Else
                    If Not ConValorReal Then
                        ivk.CostoTotalDou = c * ivk.CantidadDou * Signo
                        ivk.PrecioTotalDou = Abs(ivk.PrecioTotalDou) * Signo
                    Else
                        ivk.CostoTotalDou = c * ivk.CantidadDou * Signo
                        ivk.PrecioTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                    End If
                    ivk.CostoRealTotalDou = c * ivk.CantidadDou * Signo
                    ivk.PrecioRealTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                End If
                mcolIVKardex.Add ivk
            End If
        ElseIf Me.GNTrans.CodPantalla = "IVISOFAC" Then 'En caso que importe para transferencia de bodega
            If Fuente.IVKardex(i).BandVerifica And Fuente.IVKardex(i).CantidadDou > 0 Then
                Set ivk = Fuente.IVKardex(i).Clone
                Set ivk.GNComprobante = Me
                Set item = Fuente.Empresa.RecuperaIVInventario(ivk.IdInventario)
                If Me.Empresa.GNOpcion.BandCostoUCParaCosto Then
                    c = item.CostoReferencial
                Else
                    c = item.CostoDouble2(Me.FechaTrans, _
                        ivk.CantidadDou, _
                        Me.transid, _
                        Me.HoraTrans)  '*** MAKOTO 08/dic/00 Agregado Hora
                End If
               If (GNTrans.Modulo <> Fuente.GNTrans.Modulo) Or _
                    (GNTrans.Modulo = Fuente.GNTrans.Modulo) Then       '**** PEND
                    Signo = IIf(GNTrans.IVTipoTrans = "T", -1, 1)   '-1 si es egreso
                    ivk.CantidadDou = Abs(ivk.CantidadDou) * Signo
                End If
                If Me.GNTrans.IVTipoTrans = "I" Then
                    If Not ConValorReal Then
                        ivk.CostoTotalDou = Abs(ivk.CostoTotalDou) * Signo
                        ivk.PrecioTotalDou = Abs(ivk.PrecioTotalDou) * Signo
                    Else
                        ivk.CostoTotalDou = Abs(ivk.CostoRealTotalDou) * Signo
                        ivk.PrecioTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                    End If
                    ivk.CostoRealTotalDou = Abs(ivk.CostoRealTotalDou) * Signo
                    ivk.PrecioRealTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                Else
                    If Not ConValorReal Then
                        ivk.CostoTotalDou = c * ivk.CantidadDou * Signo
                        ivk.PrecioTotalDou = Abs(ivk.PrecioTotalDou) * Signo
                    Else
                        ivk.CostoTotalDou = c * ivk.CantidadDou * Signo
                        ivk.PrecioTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                    End If
                    ivk.CostoRealTotalDou = c * ivk.CantidadDou * Signo
                    ivk.PrecioRealTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                End If
                mcolIVKardex.Add ivk
            End If
        '------------------------------------------------
                ElseIf Fuente.GNTrans.CodPantalla = "IVRES_ALQ" Or Fuente.GNTrans.CodPantalla = "IVBQD2BE" Then
            If Right(Fuente.GNTrans.CodTrans, 1) = "M" Then
                If Fuente.IVKardex(i).CantidadDou < 0 Then
                    Set ivk = Fuente.IVKardex(i).Clone
                    Set ivk.GNComprobante = Me
                    Set item = Fuente.Empresa.RecuperaIVInventario(ivk.IdInventario)
                    If Me.Empresa.GNOpcion.BandCostoUCParaCosto Then
                        c = item.CostoReferencial
                    Else
                        c = item.CostoDouble2(Me.FechaTrans, _
                            ivk.CantidadDou, _
                            Me.transid, _
                            Me.HoraTrans)  '*** MAKOTO 08/dic/00 Agregado Hora
                    End If
                   If (GNTrans.Modulo <> Fuente.GNTrans.Modulo) Or _
                        (GNTrans.Modulo = Fuente.GNTrans.Modulo) Then       '**** PEND
                        Signo = 1
                        ivk.CantidadDou = Abs(ivk.CantidadDou) * Signo
                        If Fuente.IdTransFuente <> 0 Then
                            ivk.NumDias = Fuente.IdTransFuente
                        Else
                            ivk.NumDias = Fuente.transid
                        End If
                    End If
                    If Me.GNTrans.IVTipoTrans = "I" Then
                        If Not ConValorReal Then
                            ivk.CostoTotalDou = Abs(ivk.CostoTotalDou) * Signo
                            ivk.PrecioTotalDou = Abs(ivk.PrecioTotalDou) * Signo
                        Else
                            ivk.CostoTotalDou = Abs(ivk.CostoRealTotalDou) * Signo
                            ivk.PrecioTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                        End If
                        ivk.CostoRealTotalDou = Abs(ivk.CostoRealTotalDou) * Signo
                        ivk.PrecioRealTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                    Else
                        If Not ConValorReal Then
                            ivk.CostoTotalDou = c * ivk.CantidadDou * Signo
                            If Me.GNTrans.IVActualizaPrecioLista Then
                                ivk.PrecioRealTotalDou = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.CantidadDou
                                ivk.PrecioTotalDou = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.CantidadDou
                            Else
                                ivk.PrecioRealTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                            End If
                        Else
                            ivk.CostoTotalDou = c * ivk.CantidadDou * Signo
                            ivk.PrecioTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                        End If
                    End If
                    mcolIVKardex.Add ivk
                End If
            Else
                If Fuente.IVKardex(i).CantidadDou > 0 Then
                    Set ivk = Fuente.IVKardex(i).Clone
                    Set ivk.GNComprobante = Me
                    Set item = Fuente.Empresa.RecuperaIVInventario(ivk.IdInventario)
                    If Me.Empresa.GNOpcion.BandCostoUCParaCosto Then
                        c = item.CostoReferencial
                    Else
                        c = item.CostoDouble2(Me.FechaTrans, _
                            ivk.CantidadDou, _
                            Me.transid, _
                            Me.HoraTrans)  '*** MAKOTO 08/dic/00 Agregado Hora
                    End If
                   If (GNTrans.Modulo <> Fuente.GNTrans.Modulo) Or _
                        (GNTrans.Modulo = Fuente.GNTrans.Modulo) Then       '**** PEND
                        'Asegura que la CantidadDou tenga el signo correcto
                        ' Es necesario porque tiene que cambiar de signo cuando importa de
                        ' FC(Egreso) --> FCV(Ingreso) o CP(Ingreso) --> CPV(Egreso)
                        ' HC(Ingreso) --> OF(Egreso) etc...
                        Signo = -1 ' IIf(GNTrans.IVTipoTrans = "E", -1, 1) '-1 si es egreso
                        ivk.CantidadDou = Abs(ivk.CantidadDou) * Signo
                        If Fuente.IdTransFuente <> 0 Then
                            ivk.NumDias = Fuente.IdTransFuente
                        Else
                            ivk.NumDias = Fuente.transid
                        End If
                    End If
                    If Me.GNTrans.IVTipoTrans = "I" Then
                        If Not ConValorReal Then
                            ivk.CostoTotalDou = Abs(ivk.CostoTotalDou) * Signo
                            ivk.PrecioTotalDou = Abs(ivk.PrecioTotalDou) * Signo
                        Else
                            ivk.CostoTotalDou = Abs(ivk.CostoRealTotalDou) * Signo
                            ivk.PrecioTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                        End If
                        ivk.CostoRealTotalDou = Abs(ivk.CostoRealTotalDou) * Signo
                        ivk.PrecioRealTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                    Else
                        If Not ConValorReal Then
                            ivk.CostoTotalDou = c * ivk.CantidadDou * Signo
    '                        ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
                            If Me.GNTrans.IVActualizaPrecioLista Then
                                ivk.PrecioRealTotalDou = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.CantidadDou
                                ivk.PrecioTotalDou = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.CantidadDou
                            Else
                                ivk.PrecioRealTotalDou = Abs(ivk.PrecioRealTotal) * Signo
                            End If
                        Else
                            ivk.CostoTotalDou = c * ivk.CantidadDou * Signo
                            ivk.PrecioTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                        End If
    '                    ivk.CostoRealTotalDou = c * ivk.CantidadDou * Signo
     '                   ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
                    End If
                   mcolIVKardex.Add ivk
                End If
            End If
        ElseIf Me.GNTrans.IVTipoTrans = "R" Then
            If Fuente.IVKardex(i).CantidadDou > 0 Then
                Set ivk = Fuente.IVKardex(i).Clone
                Set ivk.GNComprobante = Me
                ivk.CantidadDou = ivk.CantidadDou * -1
                Set item = Fuente.Empresa.RecuperaIVInventario(ivk.IdInventario)
                If Me.Empresa.GNOpcion.BandCostoUCParaCosto Then
                    c = item.CostoReferencial
                Else
                    c = item.CostoDouble2(Me.FechaTrans, _
                    ivk.CantidadDou, _
                    Me.transid, _
                    Me.HoraTrans)
                End If
                If Not ConValorReal Then
                    ivk.CostoTotalDou = Format(c * ivk.CantidadDou, fmt)
                Else
                    ivk.CostoTotalDou = Format(c * ivk.CantidadDou, fmt)
                    ivk.PrecioTotalDou = Format(Abs(ivk.PrecioRealTotalDou) * Signo, fmt)
                    ivk.Descuento = 0
                End If
                ivk.CostoRealTotalDou = Format(c * ivk.CantidadDou, fmt)
                ivk.PrecioRealTotalDou = Format(Abs(ivk.PrecioRealTotalDou) * Signo, fmt)
                ivk.codItemPadre = Fuente.IVKardex(i).codItemPadre
                ivk.CodReceta = Fuente.IVKardex(i).CodReceta
                mcolIVKardex.Add ivk
            End If
        '-----------------------------------------------
        Else
                Set ivk = Fuente.IVKardex(i).Clone
                Set ivk.GNComprobante = Me
                Set item = Fuente.Empresa.RecuperaIVInventario(ivk.IdInventario)
                If Fuente.GNTrans.CodPantalla = "IVBQDISO" Then
                    c = 0
                Else
                    If Me.Empresa.GNOpcion.BandCostoUCParaCosto Then
                        c = item.CostoReferencial
                    Else
                        c = item.CostoDouble2(Me.FechaTrans, _
                            ivk.CantidadDou, _
                            Me.transid, _
                            Me.HoraTrans)  '*** MAKOTO 08/dic/00 Agregado Hora
                    End If
                End If
                    CantOriginal = ivk.CantidadDou
                    If (GNTrans.Modulo <> Fuente.GNTrans.Modulo) Or _
                        (GNTrans.Modulo = Fuente.GNTrans.Modulo) Then       '**** PEND
                        'Asegura que la CantidadDou tenga el signo correcto
                        ' Es necesario porque tiene que cambiar de signo cuando importa de
                        ' FC(Egreso) --> FCV(Ingreso) o CP(Ingreso) --> CPV(Egreso)
                        ' HC(Ingreso) --> OF(Egreso) etc...
                        If Me.GNTrans.ImpRespetarSignosCantidad Then
                            If Len(Me.idFuentes) > 0 Or Len(Me.TransFuente) <> 0 Then
                                Signo = IIf(Fuente.GNTrans.IVTipoTrans = "E", -1, 1) '-1 si es egreso
                            Else
                                Signo = IIf(Me.GNTrans.IVTipoTrans = "E", -1, 1) '-1 si es egreso
                            End If
                        Else
                            If Me.GNTrans.IVTransCal Then
                                Signo = IIf(Me.GNTrans.IVTipoTrans = "E", 1, -1) '-1 si es egreso
                            Else
                                Signo = IIf(Me.GNTrans.IVTipoTrans = "E", -1, 1) '-1 si es egreso
                            End If
                        End If
                        If Me.GNTrans.IVTipoTrans = "R" Or Me.GNTrans.CodPantalla = "IVDV" Then
                            ivk.CantidadDou = Abs(ivk.CantidadDou) * Signo
                        End If
                        If Len(Me.CodDistrito) <> 0 Then
                            ivk.CodBodega = Me.CodDistrito
                        End If
                    End If
                    If Me.GNTrans.IVTipoTrans = "I" Or Me.GNTrans.IVTipoTrans = "X" Then
                        If Not ConValorReal Then
                            ivk.CostoTotalDou = Abs(ivk.CostoTotalDou) * Signo
                            ivk.PrecioTotalDou = Abs(ivk.PrecioTotalDou) * Signo
                        Else
                            ivk.CostoTotalDou = Abs(ivk.CostoRealTotalDou) * Signo
                            ivk.PrecioTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                            ivk.Descuento = 0
                        End If
                        ivk.CostoRealTotalDou = Abs(ivk.CostoRealTotalDou) * Signo
                        ivk.PrecioRealTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                    Else
                        If Not ConValorReal Then
                                If Me.GNTrans.AnexoCodTipoTrans = "1" Then
                                    If Me.GNTrans.AnexoCodTipoComp = "4" Then
                                        ivk.CostoTotalDou = ivk.CostoTotalDou * Signo
                                    Else
                                        ivk.CostoTotalDou = ivk.CostoTotalDou
                                    End If
                                Else
                                    ivk.CostoTotalDou = c * ivk.CantidadDou
                                End If
                            If Me.GNTrans.IVActualizaPrecioLista Then
                                If Me.GNTrans.IVPrecioxPCGrupo Then
                                            If Me.IdClienteRef <> 0 Then
                                                Set pc = Me.Empresa.RecuperaPCProvCli(Me.IdClienteRef)
                                                If Not pc Is Nothing Then
                                                    If Len(Me.Empresa.GNOpcion.ObtenerValor("PrecioxCGrupo")) > 0 Then
                                                        If CInt(Me.Empresa.GNOpcion.ObtenerValor("PrecioxCGrupo")) > 0 Then
                                                                nunPCGrupo = CInt(Me.Empresa.GNOpcion.ObtenerValor("PrecioxCGrupo"))
                                                            Select Case nunPCGrupo
                                                            Case 1
                                                                idPcGrupo = pc.IdGrupo1
                                                            Case 2
                                                                idPcGrupo = pc.IdGrupo2
                                                            Case 3
                                                                idPcGrupo = pc.IdGrupo3
                                                            Case 4
                                                                idPcGrupo = pc.IdGrupo4
                                                            End Select
                                                            If Me.CodForma = "TCC" Then
                                                                cadPrecios = "1000000"
                                                            Else
                                                                cadPrecios = item.RecuperaCadenaPreciosxGrupo(nunPCGrupo, idPcGrupo)
                                                            End If
                                                            ListaPrecio = item.ListaPrecioxPCGrupoParaFlex(Me, cadPrecios)
                                                            v = Split(ListaPrecio, "|")
                                                            ivk.PrecioTotal = Abs(v(1)) * ivk.CantidadDou
                                                            Set pc = Nothing
                                                        End If
                                                    End If
                                                End If
                                            Else
                                                MsgBox "Debe primero seleccionar cliente," & Chr(13) & "Está Transacción está configurada con Precios por Grupo de Cliente"
                                                Exit Sub
                                            End If
                                Else
                                    ivk.PrecioTotalDou = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.CantidadDou
                                End If
                            Else
                                ivk.PrecioTotalDou = Abs(ivk.PrecioTotalDou) * Signo
                            End If
                        Else
                            ivk.CostoTotalDou = c * ivk.CantidadDou
                            ivk.PrecioTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                            ivk.Descuento = 0
                        End If
                        ivk.CostoRealTotalDou = c * ivk.CantidadDou
                        If Me.GNTrans.IVActualizaPrecioLista Then
                            ivk.PrecioRealTotalDou = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.CantidadDou
                        Else
                            ivk.PrecioRealTotalDou = Abs(ivk.PrecioRealTotalDou) * Signo
                        End If
                    End If
                    If Me.GNTrans.IVControlaLimitePorFacturaxLinea Then
                        ivk.Nota1 = Fuente.IVKardex(i).Orden
                    End If
                    ivk.codItemPadre = Fuente.IVKardex(i).codItemPadre
                    ivk.idUnidadConv = Fuente.IVKardex(i).idUnidadConv
                    ivk.UnidadConv = Fuente.IVKardex(i).UnidadConv
                    ivk.CantidadConv = Fuente.IVKardex(i).CantidadConv
                    'jeaa 23/03/2009
                    If item Is Nothing Then
                        Set item = Fuente.Empresa.RecuperaIVInventarioQuick(ivk.IdInventario)
                    End If
                    If Not item Is Nothing Then
                            If Not item.BandNoSeFactura Then
                                ' si se importa de un transferencia solo coge valores de ingreso
                                If (Fuente.GNTrans.IVTipoTrans = "T" Or Fuente.GNTrans.IVTipoTrans = "A") Then
                                        If CantOriginal > 0 Then
                                            mcolIVKardex.Add ivk
                                        End If
                                ElseIf (Fuente.GNTrans.IVTipoTrans = "T" Or Fuente.GNTrans.IVTipoTrans = "A") Then
                                        If CantOriginal < 0 Then
                                            mcolIVKardex.Add ivk
                                        End If
                                Else
                                    mcolIVKardex.Add ivk
                                End If
                            End If
                    End If
                    If ivk.IVA <> 0 Then
                        If Me.FechaTrans < "01/06/2016" Then
                            ivk.IVA = Me.Empresa.GNOpcion.PorcentajeIVA
                        ElseIf Me.FechaTrans > "31/05/2016" And Me.FechaTrans < "01/06/2017" And Not Me.BandAplicaIvaAnt Then
                            ivk.IVA = Me.Empresa.GNOpcion.PorcentajeIVAAnt
                        ElseIf Me.FechaTrans >= Me.Empresa.GNOpcion.FechaIVA Then
                            If Fuente.FechaTrans < Me.Empresa.GNOpcion.FechaIVA And Me.GNTrans.AnexoCodTipoComp = "4" Then
                                ivk.IVA = Me.Empresa.GNOpcion.PorcentajeIVAAnt
                            Else
                                ivk.IVA = Me.Empresa.GNOpcion.PorcentajeIVA
                            End If
                        Else
                            ivk.IVA = Me.Empresa.GNOpcion.PorcentajeIVAAnt
                        End If
                    End If
        End If
            Set item = Nothing
    Next i
End Sub
'
'
Public Function IVKardexCTotalNOIVADou(bandReal As Boolean, BandIVA As Boolean, BandNOIVA As Boolean) As Double
    Dim t As Double, i As Long, v As Double
    Dim item As IVInventario
    For i = 1 To CountIVKardex
        Set item = Me.Empresa.RecuperaIVInventarioQuick(IVKardex(i).IdInventario)
        If Not item Is Nothing Then
            If item.BandIVA = BandIVA And item.BandNoObjetoIVA = BandNOIVA Then
                If bandReal Then
                    v = IVKardex(i).CostoRealTotalDou
                Else
                    v = IVKardex(i).CostoTotalDou
                End If
                'Redondea con el formato para Costos      *** MAKOTO 13/feb/01 Mod.
                t = t + MiCCur(Format$(v, Me.FormatoCosto))
            End If
        End If
    Next i
    Set item = Nothing
    IVKardexCTotalNOIVADou = t
End Function
Public Function IVKardexDescItemTotalDou() As Double
    Dim t As Double, i As Long, ivk As IVKardex, bandCosto As Boolean
    Dim u As Double
    'Decide si calcula en base a Precio o Costo
    bandCosto = GNTrans.IVRecargoEnCosto
    For i = 1 To CountIVKardex
        Set ivk = IVKardex(i)
        If bandCosto Then
            u = ivk.CostoTotalDou * ivk.Descuento
            'Redondea al formato de Costos
            u = MiCCur(Format$(u, Me.FormatoCosto))
        Else
            u = ivk.PrecioTotal * ivk.Descuento
            'Redondea al formato de P.Total
            u = MiCCur(Format$(u, Me.FormatoMoneda))
        End If
        t = t + u
    Next i
    IVKardexDescItemTotalDou = Abs(t)
    Set ivk = Nothing
End Function
Public Function IVKardexDescRebateItemTotalDou() As Double
    Dim t As Double, i As Long, ivk As IVKardex, bandCosto As Boolean
    Dim u As Double
    'Decide si calcula en base a Precio o Costo
    bandCosto = GNTrans.IVRecargoEnCosto
    For i = 1 To CountIVKardex
        Set ivk = IVKardex(i)
        If bandCosto Then
            u = ivk.CostoTotalDou * ivk.Rebate
            'Redondea al formato de Costos
            u = MiCCur(Format$(u, Me.FormatoCosto))
        Else
            u = ivk.PrecioTotalDou * ivk.Descuento
            'Redondea al formato de P.Total
            u = MiCCur(Format$(u, Me.FormatoMoneda))
        End If
        t = t + u
    Next i
    IVKardexDescRebateItemTotalDou = Abs(t)
    Set ivk = Nothing
End Function
'
Private Function GeneraAsientoIVActivoDou( _
                    Param As String) As colAsientoTemp
    Dim i As Long, v As Double, k As IVKardex
    Dim col As colAsientoTemp
    Dim fmt As String
    If Len(Me.Empresa.GNOpcion.ObtenerValor("FormatoCantRec")) > 0 Then
        fmt = Me.Empresa.GNOpcion.ObtenerValor("FormatoCantRec")
    End If
    Set col = New colAsientoTemp
    For i = 1 To CountIVKardex
        v = 0
        Set k = IVKardex(i)
        'Si es que el item no tiene asignado una cuenta de Activo, genera error
        If k.auxIdCuentaActivo = 0 Then
            NoTieneCuentaAsignado True, "ACTIVO", k.CodInventario
        End If
        Select Case Right$(Param, 1)
        Case "+":   If k.CostoRealTotalDou > 0 Then v = Abs(k.CostoRealTotalDou)  'Sólo positivos
        Case "-":   If k.CostoRealTotalDou < 0 Then v = Abs(k.CostoRealTotalDou)  'Sólo negativos
        Case Else:  v = Abs(k.CostoRealTotalDou)       'Todos con valor absoluto
        End Select
        If v <> 0 Then
            'Redondea al formato de moneda
            'No con FormatoCosto porque asiento tiene que ser cuadrado con valores de Ctas x Pagar/Cobrar
            'Por ejemplo si está FormatoMoneda con 2 decimales y FormatoCosto con 4 decimales,
            'va a haber una diferencia entre Kardex de inventario y Libro mayor de inventario, algo que ya es inevitable.
'            v = MiCCur(Format$(v, Me.FormatoMoneda))
            'jeaa 02/10/2006 diferencia en asiento
            If mobjGNTrans.IVTipoTrans = "I" Then
                v = MiCCur(Format$(v, fmt))
            Else
''                If FormatoMoneda = "#,0.00" And Me.FormatoCosto = "#,#.0000" Then
''                    'v = MiCCur(Format$(v, Me.FormatoMoneda))
''                    'v = MiCCur(Format$(v, fmt))
                     v = Format$(v, fmt)
'                Else
'                    v = MiCCur(Format$(v, fmt))
'                End If

            End If
            col.AddD k.auxIdCuentaActivo, v
        End If
    Next i
    'Al ultimo tiene que redondear al formato de Precio Total       '*** MAKOTO 01/mar/01
'    RedondearAsientoDou col, fmt
    RedondearAsiento col, Me.FormatoMoneda
    If col.Count Then Set GeneraAsientoIVActivoDou = col
    Set col = Nothing
End Function
Private Function GeneraAsientoIVCostoDou(Param As String) As colAsientoTemp
    Dim i As Long, v As Double, k As IVKardex
    Dim col As colAsientoTemp
    Dim fmt As String
    Set col = New colAsientoTemp
    If Len(Me.Empresa.GNOpcion.ObtenerValor("FormatoCantRec")) > 0 Then
        fmt = Me.Empresa.GNOpcion.ObtenerValor("FormatoCantRec")
    End If

    For i = 1 To CountIVKardex
        v = 0
        Set k = IVKardex(i)
        If k.auxIdCuentaCosto = 0 Then
            NoTieneCuentaAsignado True, "COSTO", k.CodInventario
        End If
        Select Case Right$(Param, 1)
        Case "+":   If k.CostoRealTotalDou > 0 Then v = Abs(k.CostoRealTotalDou)  'Sólo positivos
        Case "-":   If k.CostoRealTotalDou < 0 Then v = Abs(k.CostoRealTotalDou)  'Sólo negativos
        Case Else:  v = Abs(k.CostoRealTotalDou)       'Todos con valor absoluto
        End Select
        If v <> 0 Then
            'Redondea al formato de moneda
            'No con FormatoCosto porque asiento tiene que ser cuadrado con valores de Ctas x Pagar/Cobrar
            'Por ejemplo si está FormatoMoneda con 2 decimales y FormatoCosto con 4 decimales,
            'va a haber una diferencia entre Kardex de inventario y Libro mayor de inventario, algo que ya es inevitable.
            'v = MiCCur(Format$(v, Me.FormatoMoneda))   '*** MAKOTO 01/mar/01 Error, era formato de costo
            'jeaa 02/10/2006 diferencia en asiento
            If FormatoMoneda = "#,0.00" And Me.FormatoCosto = "#,#.0000" Then
                v = MiCCur(Format$(v, fmt))
            Else
                v = MiCCur(Format$(v, fmt))
            End If
            col.AddD k.auxIdCuentaCosto, v
        End If
    Next i
    'Al ultimo tiene que redondear al formato de Precio Total       '*** MAKOTO 01/mar/01
    RedondearAsiento col, Me.FormatoMoneda
    If col.Count Then Set GeneraAsientoIVCostoDou = col
    Set col = Nothing
End Function
Private Function GeneraAsientoIVCostoTotalDou(Param As String) As colAsientoTemp
    Dim i As Long, k As IVKardex, v As Double
    Dim col As colAsientoTemp
    Set col = New colAsientoTemp
    For i = 1 To CountIVKardex
        v = 0
        Set k = IVKardex(i)
        Select Case Right$(Param, 1)
        Case "+":   If k.CostoRealTotalDou > 0 Then v = Abs(k.CostoRealTotalDou)
        Case "-":   If k.CostoRealTotalDou < 0 Then v = Abs(k.CostoRealTotalDou)
        Case Else:  v = Abs(k.CostoRealTotalDou)
        End Select
        If v <> 0 Then
            'Redondea al formato de moneda               '*** MAKOTO 13/feb/01
            'No con FormatoCosto porque asiento tiene que ser cuadrado con valores de Ctas x Pagar/Cobrar
            'Por ejemplo si está FormatoMoneda con 2 decimales y FormatoCosto con 4 decimales,
            'va a haber una diferencia entre Kardex de inventario y Libro mayor de inventario, algo que ya es inevitable.
            v = MiCCur(Format$(v, Me.FormatoMoneda))
            col.AddD 0, v
        End If
    Next i
    Set GeneraAsientoIVCostoTotalDou = col
    Set col = Nothing
End Function
Public Function IVKardexDescItemTotal2BobDou() As Double
    Dim t As Double, i As Long, ivk As IVKardex, bandCosto As Boolean
    Dim u As Double
    'Decide si calcula en base a Precio o Costo
    bandCosto = GNTrans.IVRecargoEnCosto
    For i = 1 To CountIVKardex
        Set ivk = IVKardex(i)
        If ivk.CantidadDou < 0 Then
            If bandCosto Then
                u = ivk.CostoTotalDou * ivk.Descuento
                'Redondea al formato de Costos
                u = MiCCur(Format$(u, Me.FormatoCosto))
            Else
                u = ivk.PrecioTotalDou * ivk.Descuento
                'Redondea al formato de P.Total
                u = MiCCur(Format$(u, Me.FormatoMoneda))
            End If
            t = t + u
        End If
    Next i
    IVKardexDescItemTotal2BobDou = Abs(t)
    Set ivk = Nothing
End Function
Private Function GeneraAsientoIVVentaDou( _
                    Param As String) As colAsientoTemp
    Dim i As Long, v As Double, k As IVKardex
    Dim col As colAsientoTemp
    Set col = New colAsientoTemp
    For i = 1 To CountIVKardex
        v = 0
        Set k = IVKardex(i)
        'Si es que el item no tiene asignado una cuenta de Activo, genera error
        If k.auxIdCuentaVenta = 0 Then
            NoTieneCuentaAsignado True, "VENTA", k.CodInventario
        End If
        Select Case Right$(Param, 1)
        Case "+":   If k.PrecioRealTotalDou > 0 Then v = Abs(k.PrecioRealTotalDou)
        Case "-":   If k.PrecioRealTotalDou < 0 Then v = Abs(k.PrecioRealTotalDou)
        Case "*":   v = k.PrecioRealTotalDou
        Case "2":   v = Abs(k.PrecioTotalDou)
        Case Else:
            If Me.GNTrans.IVTipoTrans = "E" Then
                If k.PrecioRealTotalDou < 0 Then
                    v = Abs(k.PrecioRealTotalDou)
                Else
                    'cuando esiste devolucion en la misma Factura CAMARI
                    v = (k.PrecioRealTotalDou) * -1
                End If
            Else
                    v = Abs(k.PrecioRealTotalDou)
            End If
        End Select
        If v <> 0 Then
            v = MiCCur(Format$(v, Me.FormatoCosto))
            'col.Add k.auxIdCuentaVenta, v
            col.AddD k.auxIdCuentaVenta, v
        End If
    Next i
    RedondearAsiento col, Me.FormatoMoneda
    If col.Count Then Set GeneraAsientoIVVentaDou = col
    Set col = Nothing
End Function

'---------------
Public Function IVKardexTotalSoloIVADou(bandReal As Boolean) As Double
    Dim t As Double
    'Decide si calcula en base de Precio o Costo
    If GNTrans.IVRecargoEnCosto Then
        t = IVKardexCTotalSoloIVADou(bandReal)
    Else
        t = IVKardexPTotalSoloIVADou(bandReal)
    End If
    IVKardexTotalSoloIVADou = t
End Function


Public Function IVKardexCTotalSoloIVADou(bandReal As Boolean) As Double
Dim t As Double, i As Long, v As Double
    For i = 1 To CountIVKardex
        If IVKardex(i).IVA <> 0 Then
            If bandReal Then
                v = IVKardex(i).CostoRealTotalDou
            Else
                v = IVKardex(i).CostoTotalDou
            End If
        Else
            v = 0
        End If
        'Redondea con el formato para Costos      *** MAKOTO 13/feb/01 Mod.
        t = t + MiCCur(Format$(v, Me.FormatoCosto))
    Next i
    IVKardexCTotalSoloIVADou = t
End Function

Public Function IVKardexPTotalSoloIVADou(bandReal As Boolean) As Double
    Dim t As Double, i As Long, v As Double
    t = 0
    For i = 1 To CountIVKardex
        If Me.IVKardex(i).IVA <> 0 Then
            If Me.IVKardex(i).CantidadDou <> 0 Then 'AUC agregado para que calcule cuando no tenga cant
                If bandReal Then
                    v = IVKardex(i).PrecioRealTotalDou
                    t = t + v
                Else
                    v = IVKardex(i).PrecioTotalDou
                    t = t + MiCCur(Format$(v, Me.FormatoMoneda))
                End If
            End If
        Else
            t = 0
        End If
    Next i

    If bandReal Then
        IVKardexPTotalSoloIVADou = MiCCur(Format$(t, Me.FormatoMoneda))
    Else
        IVKardexPTotalSoloIVADou = t '
    End If
End Function


Public Function NoExisteParaTransformarDou() As Boolean
   Dim item As IVInventario, i As Long, ivk As IVKardex, j As Long, ivk2 As IVKardex
    Dim exist As Double, sumaCant As Double
    Dim msgError As Variant
    Dim cant_ori As Double
   'Si no está configurado para verificar la existencia ó no es egreso, sale
    If Not Me.GNTrans.IVVerificaExist Or Me.GNTrans.IVTipoTrans <> "C" Then
        Exit Function
    End If
    For i = 1 To CountIVKardex
        Set ivk = IVKardex(i)
        Set item = Empresa.RecuperaIVInventario(ivk.IdInventario)
        If Not (item Is Nothing) Then
            If Not item.BandServicio Then
                exist = item.Existencia(ivk.CodBodega)
                sumaCant = 0
                'Obtiene la cantidad original en caso de modificación
                cant_ori = VerificarExistencia_CantOrigDou(ivk.Id)
                'Obtiene la suma de cantidad del mismo ítem en la misma transacción
                For j = 1 To CountIVKardex
                    Set ivk2 = IVKardex(j)
                    'En otra fila,
                    If j <> i Then
                        'Si hay un item con el mismo item y la misma bodega
                        If ivk2.IdInventario = ivk.IdInventario And _
                            ivk2.IdBodega = ivk.IdBodega Then
                            sumaCant = sumaCant + ivk2.CantidadDou
                            'Resta la cantidad original en caso de modificación
                            sumaCant = sumaCant - VerificarExistencia_CantOrigDou(ivk2.Id)
                        End If
                    End If
                Next j
                Set ivk2 = Nothing
                'Si se hace negativa al sumar
                If exist + ivk.CantidadDou + sumaCant - cant_ori < 0 Then
                    msgError = "No puede generar la transformación la existencia se hace negativa" & vbCr & _
                               "Intente con mas items " & vbCr & vbCr & _
                               "Item: [" & item.CodInventario & "] " & item.Descripcion & vbCr & _
                              "Existencia: " & exist & vbCr & _
                               "Cantidad: " & ivk.CantidadDou & vbCr & _
                               "Cant. en otra fila: " & sumaCant & vbCr & _
                               "Existencia nueva: " & exist + ivk.CantidadDou + sumaCant - cant_ori
                    MsgBox msgError, vbInformation
                    NoExisteParaTransformarDou = True
                    Exit Function
                End If
            End If
        End If
    Next i
    Set ivk = Nothing
    Set item = Nothing
End Function

Public Function VerificarExistencia_CantOrigDou(ByVal Id As Long) As Double
    Dim sql As String, rs As Recordset
    'Si es nuevo no hace nada
    If Id = 0 Then Exit Function
    sql = "SELECT CantidadDou FROM IVKardex WHERE Id = " & Id
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    If Not rs.EOF Then
        VerificarExistencia_CantOrigDou = rs.Fields("CantidadDou")
    End If
    rs.Close
    Set rs = Nothing
End Function

Private Sub VerificarExistenciaDou()
    Dim item As IVInventario, i As Long, ivk As IVKardex, j As Long, ivk2 As IVKardex
    Dim exist As Double, sumaCant As Double
    Dim cant_ori As Double
    Dim idpadre As Long
    Dim BandRestriccion As Boolean 'Para saber si utiliza la restriccion
    'Si no está configurado para verificar la existencia ó no es egreso, sale
    If Not Me.GNTrans.IVVerificaExist Then
        Exit Sub
    End If
    'CAMBIADO SI NO NO VERIFICA LA TRANSFERENCIA
     If (Me.GNTrans.IVTipoTrans = "E" Or Me.GNTrans.IVTipoTrans = "T") Then
        'NO HACE NADA
    Else
        Exit Sub
    End If
    For i = 1 To CountIVKardex
        Set ivk = IVKardex(i)
        Set item = Empresa.RecuperaIVInventario(ivk.IdInventario)
        If item.BandServicio Then
            'Set item = nothing
            Exit Sub
        End If
        If Me.GNTrans.ItemsImportantes Then 'pregunta si se van a controlar los items importantes
            If item.Tipo = Preparacion Then idpadre = ivk.IdInventario
                BandRestriccion = siEsREstriccion(ivk.IdInventario, idpadre)
               If Not (item Is Nothing) And item.Tipo <> Preparacion And BandRestriccion Then  'AUC  12/04/06que no verifique el padre verificar la esta bien este if despues
                    If Not item.BandServicio Then
                        exist = item.Existencia(ivk.CodBodega)
                        sumaCant = 0
                        'Obtiene la cantidad original en caso de modificación
                        cant_ori = VerificarExistencia_CantOrigDou(ivk.Id)
                        
                        'Obtiene la suma de cantidad del mismo ítem en la misma transacción
                        For j = 1 To CountIVKardex
                            Set ivk2 = IVKardex(j)
                            
                            'En otra fila,
                            If j <> i Then
                                'Si hay un item con el mismo item y la misma bodega
                                If ivk2.IdInventario = ivk.IdInventario And _
                                    ivk2.IdBodega = ivk.IdBodega Then
                                    sumaCant = sumaCant + ivk2.CantidadDou
                                    
                                    'Resta la cantidad original en caso de modificación
                                    sumaCant = sumaCant - VerificarExistencia_CantOrigDou(ivk2.Id)
                                End If
                            End If
                        Next j
                        Set ivk2 = Nothing
                        
                        'Si se hace negativa al sumar
                        If exist + ivk.CantidadDou + sumaCant - cant_ori < 0 Then
                            Err.Raise ERR_INVALIDO, "GNComprobante.VerificarDatos", _
                                "Al grabar la transacción la existencia se hace negativa, por lo que no puede grabarla." & vbCr & vbCr & _
                                "Item: " & item.CodInventario & " " & item.Descripcion & vbCr & _
                                "Existencia: " & exist & vbCr & _
                                "Cantidad: " & ivk.CantidadDou & vbCr & _
                                "Cant. en otra fila: " & sumaCant & vbCr & _
                                "Existencia nueva: " & exist + ivk.CantidadDou + sumaCant - cant_ori
                        End If
                    End If
                End If
        Else 'CASO QUE NO ESTE SELECCIONADO
            If Not (item Is Nothing) And item.Tipo <> Preparacion Then 'AUC  12/04/06que no verifique el padre verificar la esta bien este if despues
                If Not item.BandServicio Then
                    exist = item.Existencia(ivk.CodBodega)
                    sumaCant = 0
                    'Obtiene la cantidad original en caso de modificación
                    cant_ori = VerificarExistencia_CantOrigDou(ivk.Id)
                    'Obtiene la suma de cantidad del mismo ítem en la misma transacción
                    For j = 1 To CountIVKardex
                        Set ivk2 = IVKardex(j)
                        'En otra fila,
                        If j <> i Then
                            'Si hay un item con el mismo item y la misma bodega
                            If ivk2.IdInventario = ivk.IdInventario And _
                                ivk2.IdBodega = ivk.IdBodega Then
                                sumaCant = sumaCant + ivk2.CantidadDou
                                'Resta la cantidad original en caso de modificación
                                sumaCant = sumaCant - VerificarExistencia_CantOrigDou(ivk2.Id)
                            End If
                        End If
                    Next j
                    Set ivk2 = Nothing
                    'Si se hace negativa al sumar
                    If exist + ivk.CantidadDou + sumaCant - cant_ori < 0 Then
                        If Me.GNTrans.AfectaCantidad Then
                        Err.Raise ERR_INVALIDO, "GNComprobante.VerificarDatos", _
                            "Al grabar la transacción la existencia se hace negativa, por lo que no puede grabarla." & vbCr & vbCr & _
                            "Item: " & item.CodInventario & " " & item.Descripcion & vbCr & _
                            "Existencia: " & exist & vbCr & _
                            "Cantidad: " & ivk.CantidadDou & vbCr & _
                            "Cant. en otra fila: " & sumaCant & vbCr & _
                            "Existencia nueva: " & exist + ivk.CantidadDou + sumaCant - cant_ori
                        Else
                            MsgBox "No existe la cantidad solicitada,  " & vbCr & vbCr & _
                            "Item: " & item.CodInventario & " " & item.Descripcion & vbCr & _
                            "Existencia: " & exist & vbCr & _
                            "Cantidad: " & ivk.CantidadDou & vbCr & _
                            "Cant. en otra fila: " & sumaCant & vbCr & _
                            "Existencia nueva: " & exist + ivk.CantidadDou + sumaCant - cant_ori
                        
                        End If
                    End If
                End If
            End If
        End If
    Next i
    
    Set ivk = Nothing
    Set item = Nothing
End Sub

Public Function ListaPCKardexSRI() As Variant
    Dim sql As String
    
#If DAOLIB Then
    Dim rs As DAO.Recordset, qdef As DAO.QueryDef
    Set qdef = mProps.objEmpresa.Database.QueryDefs("spConsPCKardex")
    qdef.Parameters("tid") = mProps.transid
    qdef.Parameters("Cotizacion") = Me.Cotizacion("")
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Dim rs As ADODB.Recordset, cmd As ADODB.Command
    Set cmd = New ADODB.Command
    cmd.ActiveConnection = mProps.objEmpresa.Coneccion
    
    'Si la base es de JET
    If mProps.objEmpresa.TipoDB = TIPODB_JET Then
        cmd.CommandType = adCmdTable
        cmd.CommandText = "spConsPCKardex"
        cmd.Parameters.Append cmd.CreateParameter("tid", adInteger, adParamInput, , mProps.transid)
        Set rs = cmd.Execute
       
    'Si la base es de SQLSvr
    Else
        sql = "spConsPCKardexSRI " & mProps.transid & "," & Me.Cotizacion("")
        Set rs = mProps.objEmpresa.OpenRecordset(sql)
    End If
#End If

    Set ListaPCKardexSRI = rs
    Set rs = Nothing
End Function

Public Function ListaIVKardex2Conv( _
                    ByVal ExistPorBodega As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
    Dim cmd As ADODB.Command
    Set cmd = New ADODB.Command
    cmd.ActiveConnection = mProps.objEmpresa.Coneccion
            sql = "spConsIVKardexDouConv " & mProps.transid & ", " & _
                                  Me.Cotizacion("") & ", " & _
                                  CadenaBool(ExistPorBodega, Me.Empresa.TipoDB) & ", " & _
                                  CadenaBool((Me.GNTrans.IVTipoTrans = "E"), Me.Empresa.TipoDB)
        
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set ListaIVKardex2Conv = rs
    Set rs = Nothing
End Function


Private Sub RedondearAsientoDou( _
                ByVal c As colAsientoTemp, _
                ByVal fmt As String)
    Dim obj As AsientoTemp
    Dim Valor As Double
    For Each obj In c
        Valor = obj.Valor
        obj.Valor = MiCCur(Format$(obj.Valor, fmt))
        
        If (Valor <> 0) And (obj.Valor = 0) Then obj.Valor = Valor
    Next obj
End Sub

Public Property Let BandPorTC(ByVal value As Boolean)
        mProps.BandPorTC = value
        'mbooModificado = True
End Property

Public Property Get BandPorTC() As Boolean
    BandPorTC = mProps.BandPorTC
End Property

Public Function AsignaSecPaca(cod As String) As Long
    Dim num As Long, sql As String, rs As Recordset, rs2 As Recordset
    'Obtiene el numero siguiente
    sql = "SELECT MAX(IVP.SECUENCIA) AS SEC FROM IVInventarioDetallePACA IVP "
    sql = sql & "INNER JOIN IVKARDEX IVK "
    sql = sql & "iNNER JOIN GNCOMPROBANTE G "
    sql = sql & " Inner join GNSACAHIST gh on gh.transid = g.transid ON G.TRANSID =IVK.TRANSID "
    sql = sql & "ON IVK.ID= IVP.IDKARDEX "
    sql = sql & " AND G.ESTADO <> 3 And gh.guia = '" & cod & "'"
  Set rs2 = mProps.objEmpresa.OpenRecordset(sql)
    If Not rs2 Is Nothing Then
        If IsNull(rs2!Sec) Then
            num = 0
        Else
            num = rs2!Sec
        End If
    End If
    rs2.Close
    Set rs2 = Nothing
    AsignaSecPaca = num
End Function



Private Sub VerificarExistenciaCP()
    Dim item As IVInventario, i As Long, ivk As IVKardex, j As Long, ivk2 As IVKardex
    Dim exist As Double, sumaCant As Double
    Dim cant_ori As Double
    Dim idpadre As Long
    Dim ItemSub As IVInventario
    Dim ItemSub2 As IVInventario
    Dim Item2 As IVInventario
    Dim BandRestriccion As Boolean 'Para saber si utiliza la restriccion
    Dim k As Long, k2 As Long
    'Si no está configurado para verificar la existencia ó no es egreso, sale
    If Not Me.GNTrans.IVVerificaExist Then
        Exit Sub
    End If
    'CAMBIADO SI NO NO VERIFICA LA TRANSFERENCIA
     If (Me.GNTrans.IVTipoTrans = "E" Or Me.GNTrans.IVTipoTrans = "T") Then
        'NO HACE NADA
    Else
        Exit Sub
    End If
    For i = 1 To CountIVKardex
        Set ivk = IVKardex(i)
        Set item = Empresa.RecuperaIVInventario(ivk.IdInventario)
        If item.BandServicio Then
            Exit Sub
        End If
            If item.Tipo = CambioPresentacion Then
                For k = 1 To item.NumFamiliaDetalle
                    Set ItemSub = Empresa.RecuperaIVInventario(item.RecuperaDetalleFamilia(k).CodInventario)
                    exist = ItemSub.Existencia(ivk.CodBodega)
                    sumaCant = 0
                    'Obtiene la cantidad original en caso de modificación
                    'cant_ori = VerificarExistencia_CantOrigDou(ivk.id)
                    'Obtiene la suma de cantidad del mismo ítem en la misma transacción
                    For j = 1 To CountIVKardex
                        Set ivk2 = IVKardex(j)
                            'En otra fila,
                        If j <> i Then
                                'Si hay un item con el mismo item y la misma bodega
                            If ivk2.IdBodega = ivk.IdBodega Then
                                Set Item2 = Empresa.RecuperaIVInventario(ivk2.CodInventario)
                                If Item2.Tipo = CambioPresentacion Then
                                    For k2 = 1 To Item2.NumFamiliaDetalle
                                        Set ItemSub2 = Empresa.RecuperaIVInventario(Item2.RecuperaDetalleFamilia(k2).CodInventario)
                                        If ItemSub2.IdInventario = ItemSub.IdInventario Then
                                            sumaCant = sumaCant + (ivk2.CantidadDou * Item2.RecuperaDetalleFamilia(k2).Cantidad)
                                            'Resta la cantidad original en caso de modificación
                                            'sumaCant = sumaCant - VerificarExistencia_CantOrigDou(ivk2.id)
                                        End If
                                        Set ItemSub2 = Nothing
                                    Next
                                End If
                            End If
                        End If
                        Set Item2 = Nothing
                    Next j
                    Set ivk2 = Nothing
                        'Si se hace negativa al sumar
                    If exist + (ivk.CantidadDou * item.RecuperaDetalleFamilia(k).Cantidad) + sumaCant < 0 Then
                        Err.Raise ERR_INVALIDO, "GNComprobante.VerificarDatos", _
                        "Al grabar la transacción la existencia se hace negativa, por lo que no puede grabarla." & vbCr & vbCr & _
                        "Item: " & ItemSub.CodInventario & " " & ItemSub.Descripcion & vbCr & _
                        "Existencia: " & exist & vbCr & _
                        "Cantidad: " & ivk.CantidadDou * item.RecuperaDetalleFamilia(k).Cantidad & vbCr & _
                        "Cant. en otra fila: " & sumaCant & vbCr & _
                        "Existencia nueva: " & exist + (ivk.CantidadDou * item.RecuperaDetalleFamilia(k).Cantidad) + sumaCant
                    End If
                Next
                Set ItemSub = Nothing
            Else 'aqui hace el proceso normal
                  If Not (item Is Nothing) And item.Tipo <> Preparacion Then 'AUC  12/04/06que no verifique el padre verificar la esta bien este if despues
                If Not item.BandServicio Then
                    'exist = item.Existencia(ivk.CodBodega)
                    exist = Format(item.Existencia(ivk.CodBodega), gobjMain.EmpresaActual.GNOpcion.FormatoCantidad)
                    sumaCant = 0
                    'Obtiene la cantidad original en caso de modificación
                    cant_ori = VerificarExistencia_CantOrigDou(ivk.Id)
                    'Obtiene la suma de cantidad del mismo ítem en la misma transacción
                    For j = 1 To CountIVKardex
                        Set ivk2 = IVKardex(j)
                        'En otra fila,
                        If j <> i Then
                            'Si hay un item con el mismo item y la misma bodega
                            If ivk2.IdInventario = ivk.IdInventario And _
                                ivk2.IdBodega = ivk.IdBodega Then
                                sumaCant = sumaCant + ivk2.CantidadDou
                                'Resta la cantidad original en caso de modificación
                                sumaCant = sumaCant - VerificarExistencia_CantOrigDou(ivk2.Id)
                            End If
                        End If
                    Next j
                    Set ivk2 = Nothing
                    'Si se hace negativa al sumar
                    If exist + ivk.CantidadDou + sumaCant - cant_ori < 0 Then
                        If Me.GNTrans.AfectaCantidad Then
                        Err.Raise ERR_INVALIDO, "GNComprobante.VerificarDatos", _
                            "Al grabar la transacción la existencia se hace negativa, por lo que no puede grabarla." & vbCr & vbCr & _
                            "Item: " & item.CodInventario & " " & item.Descripcion & vbCr & _
                            "Existencia: " & exist & vbCr & _
                            "Cantidad: " & ivk.CantidadDou & vbCr & _
                            "Cant. en otra fila: " & sumaCant & vbCr & _
                            "Existencia nueva: " & exist + ivk.CantidadDou + sumaCant - cant_ori
                        Else
                            MsgBox "No existe la cantidad solicitada,  " & vbCr & vbCr & _
                            "Item: " & item.CodInventario & " " & item.Descripcion & vbCr & _
                            "Existencia: " & exist & vbCr & _
                            "Cantidad: " & ivk.CantidadDou & vbCr & _
                            "Cant. en otra fila: " & sumaCant & vbCr & _
                            "Existencia nueva: " & exist + ivk.CantidadDou + sumaCant - cant_ori
                        
                        End If
                    End If
                End If
            End If
        End If
                    
    Next i
    Set ivk = Nothing
    Set item = Nothing
End Sub



Public Function RecuperaVTConciliacionTrabajo(transid As Long) As Variant
    Dim sql As String, rs As Recordset
    sql = "select "
    sql = sql & " transid , IdTrans, FechaTrans, "
    sql = sql & " Trans, NumDocRef, Nombre, trabajo,"
    sql = sql & " zona,  DirTransporte, dirdetalle,atencion, Haber, Saldo, BandConciliado"
    sql = sql & " SaldoConfirmado , Diferencia, Estado, Orden, XX, HoraTrans, tipo"
   sql = sql & " from VWVTKardexConciliacionTrabajo  "
    sql = sql & " Where transidPadre = " & transid
    sql = sql & " ORDER BY vendedor,  FechaTrans, HoraTrans, TransID, Orden"
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    RecuperaVTConciliacionTrabajo = MiGetRows(rs) 'rs
    Set rs = Nothing
End Function

Public Property Let BandImportoTrans(ByVal value As Boolean)
        mProps.BandImportoTrans = value
End Property

Public Property Get BandImportoTrans() As Boolean
    BandImportoTrans = mProps.BandImportoTrans
End Property
Public Property Let BandCHP(ByVal value As Boolean) 'Para saber en que tab esta
        mProps.BandCHP = value
End Property

Public Property Get BandCHP() As Boolean
    BandCHP = mProps.BandCHP
End Property

Private Function GeneraAsientoPCTotalDebeCHP( _
                    ByVal BandPrincipal As Boolean) As colAsientoTemp
    Dim i As Long, v As Currency, k As PCKardexCHP
    Dim col As colAsientoTemp
    
    Set col = New colAsientoTemp
    For i = 1 To CountPCKardexCHP
        Set k = PCKardexCHP(i)
        'If Not PCKardex(i).EsRubroRol Then
            v = k.Debe
        'Si es que el prov/cli no tiene asignado una cuenta, genera error
            If (v > 0) And ((BandPrincipal And k.auxIdCuenta = 0) Or _
                (Not BandPrincipal And k.auxIdCuenta2 = 0)) Then
                NoTieneCuentaAsignado False, "Cuenta " & IIf(BandPrincipal, "1", "2"), k.CodProvcli
            End If

            If BandPrincipal Then
                col.Add k.auxIdCuenta, v
            Else
                col.Add k.auxIdCuenta2, v
            End If
        'End If
    Next i
    Set GeneraAsientoPCTotalDebeCHP = col
    Set col = Nothing
End Function

Private Function GeneraAsientoPCTotalHaberCHP( _
                    ByVal BandPrincipal As Boolean) As colAsientoTemp
    Dim i As Long, v As Currency, k As PCKardexCHP
    Dim col As colAsientoTemp
    
    Set col = New colAsientoTemp
    For i = 1 To CountPCKardexCHP
        Set k = PCKardexCHP(i)
        v = k.Haber
        
        '*** MAKOTO 08/mar/01 Agregado
        'Si es que el prov/cli no tiene asignado una cuenta, genera error
        If (v > 0) And ((BandPrincipal And k.auxIdCuenta = 0) Or _
            (Not BandPrincipal And k.auxIdCuenta2 = 0)) Then
            NoTieneCuentaAsignado False, "Cuenta " & IIf(BandPrincipal, "1", "2"), k.CodProvcli
        End If
        
        If BandPrincipal Then
            col.Add k.auxIdCuenta, v
        Else
            col.Add k.auxIdCuenta2, v
        End If
    Next i
    Set GeneraAsientoPCTotalHaberCHP = col
    Set col = Nothing
End Function

Public Property Let BandEmp(ByVal value As Boolean) 'Para saber en que tab esta
        mProps.BandEmp = value
End Property

Public Property Get BandEmp() As Boolean
    BandEmp = mProps.BandEmp
End Property

Public Function IVKardexTotalIVANew(bandReal As Boolean, BandIVA As Boolean, ByRef t0 As Currency, ByRef t12 As Currency, ByRef tnoIVA As Currency) As Currency
    Dim t As Currency
    'Decide si calcula en base de Precio o Costo
    If GNTrans.IVRecargoEnCosto Then
        t = IVKardexCTotalIVANew(bandReal, BandIVA, t0, t12, tnoIVA)
    Else
        t = IVKardexPTotalIVANew(bandReal, BandIVA, t0, t12, tnoIVA)
    End If
    IVKardexTotalIVANew = t
End Function

Public Function IVKardexPTotalIVANew(bandReal As Boolean, BandIVA As Boolean, ByRef t0 As Currency, ByRef t12 As Currency, ByRef tnoIVA As Currency) As Currency
    Dim t As Currency, i As Long, v As Currency
    Dim tot0 As Currency, tot12 As Currency, totNOIVA As Currency
    Dim item As IVInventario
    tot0 = 0
    tot12 = 0
    totNOIVA = 0
    For i = 1 To CountIVKardex
        If IVKardex(i).IdInventario <> 0 Then
            Set item = Me.Empresa.RecuperaIVInventarioQuick(IVKardex(i).IdInventario)
            If Not item Is Nothing Then
                If BandIVA Then
                    If item.BandIVA = BandIVA Then
                        If Me.IVKardex(i).Cantidad <> 0 Then 'AUC agregado para que calcule cuando no tenga cant
                            If bandReal Then
                                v = IVKardex(i).PrecioRealTotal
                                t = t + v '***Agregado. 28/08/2003. Angel. No funciona bien 01/jun/04
                                tot12 = tot12 + v
                            Else
                                v = IVKardex(i).PrecioTotal
                                t = t + MiCCur(Format$(v, Me.FormatoMoneda)) '***Antes, quitado para pruebas. Angel. 27/08/2003
                                tot12 = tot12 + MiCCur(Format$(v, Me.FormatoMoneda)) '***Antes, quitado para pruebas. Angel. 27/08/2003
                            End If
                        End If
                    End If
                Else
                    If item.BandIVA = BandIVA Then
                        If Me.IVKardex(i).Cantidad <> 0 Then 'AUC agregado para que calcule cuando no tenga cant
                            If bandReal Then
                                v = IVKardex(i).PrecioRealTotal
                                t = t + v '***Agregado. 28/08/2003. Angel. No funciona bien 01/jun/04
                                tot0 = tot0 + v '***Agregado. 28/08/2003. Angel. No funciona bien 01/jun/04
                            Else
                                v = IVKardex(i).PrecioTotal
                                t = t + MiCCur(Format$(v, Me.FormatoMoneda)) '***Antes, quitado para pruebas. Angel. 27/08/2003
                                tot0 = tot0 + MiCCur(Format$(v, Me.FormatoMoneda)) '***Antes, quitado para pruebas. Angel. 27/08/2003
                            End If
                        End If
                    End If
                End If
            End If
        End If
    Next i
    Set item = Nothing
    
    If bandReal Then
        t0 = Abs(MiCCur(Format$(tot0, Me.FormatoMoneda))) '***Antes, quitado para pruebas. Angel. 27/08/2003
        t12 = Abs(MiCCur(Format$(tot12, Me.FormatoMoneda))) '***Antes, quitado para pruebas. Angel. 27/08/2003
        tnoIVA = Abs(MiCCur(Format$(totNOIVA, Me.FormatoMoneda))) '***Antes, quitado para pruebas. Angel. 27/08/2003
        IVKardexPTotalIVANew = MiCCur(Format$(t, Me.FormatoMoneda)) '***Antes, quitado para pruebas. Angel. 27/08/2003
    Else
        t0 = Abs(tot0)
        t12 = Abs(tot12)
        tnoIVA = Abs(totNOIVA)
        IVKardexPTotalIVANew = t '***Antes, quitado para pruebas. Angel. 27/08/2003
    End If
End Function


Public Function IVKardexCTotalIVANew(bandReal As Boolean, BandIVA As Boolean, ByRef t0 As Currency, ByRef t12 As Currency, ByRef tnoIVA As Currency) As Currency
    Dim t As Currency, i As Long, v As Currency
    Dim item As IVInventario
    Dim tot0 As Currency, tot12 As Currency, totNOIVA As Currency
    tot0 = 0
    tot12 = 0
    totNOIVA = 0
    For i = 1 To CountIVKardex
        Set item = Me.Empresa.RecuperaIVInventarioQuick(IVKardex(i).IdInventario)
        If Not item Is Nothing Then
            If BandIVA Then
                If item.BandIVA = BandIVA And item.BandNoObjetoIVA = False Then
                    If bandReal Then
                        v = IVKardex(i).CostoRealTotal
                    Else
                        v = IVKardex(i).CostoTotal
                    End If
                    'Redondea con el formato para Costos      *** MAKOTO 13/feb/01 Mod.
                    t = t + MiCCur(Format$(v, Me.FormatoCosto))
                    tot12 = tot12 + MiCCur(Format$(v, Me.FormatoCosto))
                End If
            Else
                If item.BandIVA = BandIVA Then
                    If Not item.BandNoObjetoIVA Then
                        If bandReal Then
                            v = IVKardex(i).CostoRealTotal
                        Else
                            v = IVKardex(i).CostoTotal
                        End If
                        'Redondea con el formato para Costos      *** MAKOTO 13/feb/01 Mod.
                        t = t + MiCCur(Format$(v, Me.FormatoCosto))
                        tot0 = tot0 + MiCCur(Format$(v, Me.FormatoCosto))
                    Else
                        If bandReal Then
                            v = IVKardex(i).CostoRealTotal
                        Else
                            v = IVKardex(i).CostoTotal
                        End If
                        'Redondea con el formato para Costos      *** MAKOTO 13/feb/01 Mod.
                        t = t + MiCCur(Format$(v, Me.FormatoCosto))
                        totNOIVA = totNOIVA + MiCCur(Format$(v, Me.FormatoCosto))
                    End If
                End If
            
            End If
        End If
    Next i
    Set item = Nothing
    t0 = Abs(tot0)
    t12 = Abs(tot12)
    tnoIVA = Abs(totNOIVA)
    IVKardexCTotalIVANew = t
End Function

Private Function GeneraAsientoIVActivoDouNew(Param As String, idCuentaFor As Long) As colAsientoTemp
    Dim i As Long, v As Double, k As IVKardex
    Dim col As colAsientoTemp
    Dim fmt As String
    If Len(Me.Empresa.GNOpcion.ObtenerValor("FormatoCantRec")) > 0 Then
        fmt = Me.Empresa.GNOpcion.ObtenerValor("FormatoCantRec")
    End If
    Set col = New colAsientoTemp
    For i = 1 To CountIVKardex
        v = 0
        Set k = IVKardex(i)
        'Si es que el item no tiene asignado una cuenta de Activo, genera error
        If k.auxIdCuentaActivo = 0 Then
            NoTieneCuentaAsignado True, "ACTIVO", k.CodInventario
        End If
        Select Case Right$(Param, 1)
        Case "+":   If k.CostoRealTotalDou > 0 Then v = Abs(k.CostoRealTotalDou)  'Sólo positivos
        Case "-":   If k.CostoRealTotalDou < 0 Then v = Abs(k.CostoRealTotalDou)  'Sólo negativos
        Case Else:  v = Abs(k.CostoRealTotalDou)       'Todos con valor absoluto
        End Select
        If v <> 0 Then
            'Redondea al formato de moneda
            'No con FormatoCosto porque asiento tiene que ser cuadrado con valores de Ctas x Pagar/Cobrar
            'Por ejemplo si está FormatoMoneda con 2 decimales y FormatoCosto con 4 decimales,
            'va a haber una diferencia entre Kardex de inventario y Libro mayor de inventario, algo que ya es inevitable.
'            v = MiCCur(Format$(v, Me.FormatoMoneda))
            'jeaa 02/10/2006 diferencia en asiento
            If mobjGNTrans.IVTipoTrans = "I" Then
                v = MiCCur(Format$(v, fmt))
            Else
                v = Format$(v, fmt)
            End If
            If idCuentaFor = 0 Then
                col.AddD k.auxIdCuentaActivo, v
            Else
                col.AddD 0, v
            End If
        End If
    Next i
    'Al ultimo tiene que redondear al formato de Precio Total       '*** MAKOTO 01/mar/01
'    RedondearAsientoDou col, fmt
    RedondearAsiento col, Me.FormatoMoneda
    If col.Count Then Set GeneraAsientoIVActivoDouNew = col
    Set col = Nothing
End Function
Private Function GeneraAsientoIVCostoDouNew(Param As String, idCuentaFor As Long) As colAsientoTemp
    Dim i As Long, v As Double, k As IVKardex
    Dim col As colAsientoTemp
    Dim fmt As String
    Set col = New colAsientoTemp
    If Len(Me.Empresa.GNOpcion.ObtenerValor("FormatoCantRec")) > 0 Then
        fmt = Me.Empresa.GNOpcion.ObtenerValor("FormatoCantRec")
    End If
    For i = 1 To CountIVKardex
        v = 0
        Set k = IVKardex(i)
        If k.auxIdCuentaCosto = 0 Then
            NoTieneCuentaAsignado True, "COSTO", k.CodInventario
        End If
        Select Case Right$(Param, 1)
        Case "+":   If k.CostoRealTotalDou > 0 Then v = Abs(k.CostoRealTotalDou)  'Sólo positivos
        Case "-":   If k.CostoRealTotalDou < 0 Then v = Abs(k.CostoRealTotalDou)  'Sólo negativos
        Case Else:  v = Abs(k.CostoRealTotalDou)       'Todos con valor absoluto
        End Select
        If v <> 0 Then
            'Redondea al formato de moneda
            'No con FormatoCosto porque asiento tiene que ser cuadrado con valores de Ctas x Pagar/Cobrar
            'Por ejemplo si está FormatoMoneda con 2 decimales y FormatoCosto con 4 decimales,
            'va a haber una diferencia entre Kardex de inventario y Libro mayor de inventario, algo que ya es inevitable.
            'v = MiCCur(Format$(v, Me.FormatoMoneda))   '*** MAKOTO 01/mar/01 Error, era formato de costo
            'jeaa 02/10/2006 diferencia en asiento
'            If FormatoMoneda = "#,0.00" And Me.FormatoCosto = "#,#.0000" Then
'                v = MiCCur(Format$(v, fmt))
'            Else
                v = Format$(v, fmt)
'            End If
            If idCuentaFor = 0 Then
                col.AddD k.auxIdCuentaCosto, v
           Else
                col.AddD 0, v
           End If
        End If
    Next i
    'Al ultimo tiene que redondear al formato de Precio Total       '*** MAKOTO 01/mar/01
    RedondearAsiento col, Me.FormatoMoneda
    If col.Count Then Set GeneraAsientoIVCostoDouNew = col
    Set col = Nothing

End Function



Public Function ListaIVKardex2Receta(ByVal ExistPorBodega As Boolean) As Variant
Dim sql As String, rs As Recordset
    sql = "spConsIVKardexDouReceta " & mProps.transid & ", " & _
    Me.Cotizacion("") & ", " & _
    CadenaBool(ExistPorBodega, Me.Empresa.TipoDB) & ", " & _
    CadenaBool((Me.GNTrans.IVTipoTrans = "E"), Me.Empresa.TipoDB)
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set ListaIVKardex2Receta = rs
    Set rs = Nothing
End Function
Private Function GeneraAsientoIVActivoAjusteDou(Param As String, idCuentaFor As Long) As colAsientoTemp
    Dim i As Long, v As Double, k As IVKardex
    Dim col As colAsientoTemp
    Dim Sumadebe As Currency
    Dim SumaHaber As Currency
    Dim dif As Double
    Dim fmt As String
   If Len(Me.Empresa.GNOpcion.ObtenerValor("FormatoCantRec")) > 0 Then
        fmt = Me.Empresa.GNOpcion.ObtenerValor("FormatoCantRec")
    End If
    Set col = New colAsientoTemp
    For i = 1 To Me.CountCTLibroDetalle
        If Me.CTLibroDetalle(i).Debe Then
            Sumadebe = Sumadebe + Me.CTLibroDetalle(i).Debe
        End If
    Next
    For i = 1 To Me.CountCTLibroDetalle
        If Me.CTLibroDetalle(i).Haber Then
            SumaHaber = SumaHaber + Me.CTLibroDetalle(i).Haber
        End If
    Next
    If Sumadebe <> SumaHaber Then
        dif = Abs(Sumadebe - SumaHaber)
    End If
    If idCuentaFor = 0 Then
        If Sumadebe < SumaHaber Then
            col.AddDes k.auxIdCuentaActivo, dif, True, True, False 'esto  no hace nada dejo ahi para ve si despues me sirve
        Else
            col.AddDes k.auxIdCuentaActivo, dif, True, False, True 'esto  no hace nada dejo ahi para ve si despues me sirve
        End If
    Else
        If Sumadebe < SumaHaber Then
            col.AddDes 0, dif, True, True, False
        Else
            col.AddDes 0, dif, True, False, True
        End If
    End If
    RedondearAsiento col, Me.FormatoMoneda
    If col.Count Then Set GeneraAsientoIVActivoAjusteDou = col
    Set col = Nothing
End Function


Public Function TotalizaItemRepetidoSumaPrecioDou() As Boolean
    Dim ivk As IVKardex, i As Long, j As Long, ivk2 As IVKardex, rt As Boolean
    Dim item As IVInventario
    rt = False
    i = 1
    Do While i <= mcolIVKardex.Count        'Uso Do While para que evalue cada vez la condicion (Con For no está bien)
        Set ivk = mcolIVKardex.item(i)
        'Busca repetidos
        For j = mcolIVKardex.Count To i + 1 Step -1     'En orden al revez
            Set ivk2 = mcolIVKardex.item(j)
            'Si encuentra repetido en la misma bodega, con el mismo signo
            If ivk2.CodInventario = ivk.CodInventario And _
                ivk2.CodBodega = ivk.CodBodega And _
                Sgn(ivk2.CantidadDou) = Sgn(ivk.CantidadDou) Then
                ivk.PrecioTotalDou = ivk.PrecioTotalDou + ivk2.CantidadDou * ivk2.PrecioDou  'Para que no cambie de precio de primer item
                ivk.CostoTotalDou = ivk.CostoTotalDou + ivk2.CantidadDou * ivk2.CostoDou  'Para que no cambie de costo de primer item
                Set item = Me.Empresa.RecuperaIVInventario(ivk.CodInventario)
                If item.BandServicio Then
                    ivk.CantidadDou = 1
                Else
                    ivk.CantidadDou = ivk.CantidadDou + ivk2.CantidadDou
                End If
                If Me.GNTrans.TotalizarAlImprimir Then
                    RemoveIVKardexImprimir j
                Else
                    RemoveIVKardex j
                End If
                rt = True
            End If
        Next j
        i = i + 1
    Loop
    Set item = Nothing
    TotalizaItemRepetidoSumaPrecioDou = rt
End Function


Public Property Let AutorizaDescuento(ByVal value As Boolean)
   Mid$(mProps.Opcion, 6, 1) = IIf(value, "S", "N")
    mbooModificado = True
    
End Property

Public Property Get AutorizaDescuento() As Boolean
    AutorizaDescuento = (Mid$(Opcion, 6, 1) = "S")
End Property

Private Sub RedondearAsientoRol(ByVal c As colAsientoTemp, ByVal fmt As String)
    Dim obj As AsientoTemp
    Dim Valor As Currency
    For Each obj In c
            Valor = obj.Valor
            obj.Valor = MiCCur(Format$(obj.Valor, fmt))
            If (Valor <> 0) And (obj.Valor = 0) Then obj.Valor = Valor
    Next obj
End Sub

Public Property Let NoPuedeModificar(ByVal value As Boolean)
   Mid$(mProps.Opcion, 7, 1) = IIf(value, "S", "N")
    mbooModificado = True
    
End Property

Public Property Get NoPuedeModificar() As Boolean
    NoPuedeModificar = (Mid$(Opcion, 7, 1) = "S")
End Property


Public Function RecuperaTransaccionsxIdTransFuente(ByVal transid As Long) As Variant
    Dim sql As String, rs As Recordset
    sql = "select "
    sql = sql & " transid "
    sql = sql & " from gnComprobante "
    sql = sql & " Where idtransfuente = " & transid
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        Set RecuperaTransaccionsxIdTransFuente = rs
    End If
    Set rs = Nothing
End Function

Private Function GeneraAsientoPCCobroCap( _
                    ByVal BandPrincipal As Boolean) As colAsientoTemp
    Dim i As Long, v As Currency, k As PCKardex
    Dim col As colAsientoTemp, Doc As PCDocAsignado
    Dim FormaCobroCap As String
    Set col = New colAsientoTemp
    
    If Len(Me.Empresa.GNOpcion.ObtenerValor("FornmaCobroOtrasCuotas")) > 0 Then
        FormaCobroCap = Me.Empresa.GNOpcion.ObtenerValor("FornmaCobroOtrasCuotas")
    Else
        MsgBox "No Tiene configurado forma de cobro para Capital"
        Exit Function
    End If
    
    For i = 1 To CountPCKardex
        Set k = PCKardex(i)
        If PCKardex(i).CodForma = FormaCobroCap Then
            v = k.Haber
            ' Cuando tiene documento asignado,
            ' convierte en valor correspondiente a la cotizacion del doc. asignado
            ' Esto sirve para autocalcular diferencial cambiario en asiento contable
            If k.IdAsignado <> 0 Then
                'Si es que el prov/cli no tiene asignado una cuenta, genera error
                If k.auxIdCuenta3 = 0 Then
                    'NoTieneCuentaAsignado False, "Cuenta " & IIf(BandPrincipal, "1", "2"), k.CodForma
                    Err.Raise ERR_NOHAYCODIGO, "GNComprobante.GeneraAsiento", k.CodForma & " No tiene asignado una cuenta diferida"
                End If
                v = v * Me.Cotizacion("")       'Convierte en moneda nacional
                Set Doc = k.RecuperaPCDocAsignado   'Recupera el documento asignado
                If Not (Doc Is Nothing) Then
                    v = v / Me.Cotizacion(Doc.CodMoneda)    'Convierte en moneda original
                    v = v * Doc.Cotizacion              'Convierte en moneda nacional a cotizacion original
                End If
                v = v / Me.Cotizacion("")       'Convierte en moneda ex.
'                If BandPrincipal Then
'                    Col.Add k.auxIdCuenta, v
'                Else
                    col.Add k.auxIdCuenta3, v
                'End If
            End If
        End If
    Next i
    Set GeneraAsientoPCCobroCap = col
    Set k = Nothing
    Set col = Nothing
    Set Doc = Nothing
End Function


Public Property Let NombreArchivoXML(value As String)
        If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.NombreArchivoXML", MSGERR_SOLOVER
        'Solo cuando cambia el valor
    If mProps.NombreArchivoXML <> value Then
        mProps.NombreArchivoXML = value
        mbooModificado = True
    End If
End Property

Public Property Get NombreArchivoXML() As String
    NombreArchivoXML = mProps.NombreArchivoXML
End Property


Public Function ListaTransFuente2paraflex( _
                    ByVal CodCentro As String) As Variant
    Dim sql As String, s As String, v As Variant, i As Long, CodT As String
    Dim cond As String, rs As Recordset, cond1 As String
    If Len(GNTrans.CodTransFuente) > 0 Then
        'Puede tener varios codigos de transaccion de fuente    ejm. (FC);(OF)
        v = Split(GNTrans.CodTransFuente, ";")
        For i = 0 To UBound(v)
            If Len(s) > 0 Then s = s & ","
            CodT = v(i)
            CodT = Left$(CodT, Len(CodT) - 1)       'Quita el signo ')'
            CodT = Right$(CodT, Len(CodT) - 1)      'Quita el signo '('
            s = s & "'" & CodT & "'"
        Next i
    Else
        Err.Raise ERR_INVALIDO, "GNComprobante.ListaTransFuente", _
                    "No está definida ningúna transacción de fuente para ésta transacción."
    End If
    '*** MAKOTO 06/mar/01 Agregado 'Nombre'
    'cambiado por Oliver 27/08/2003
    sql = "SELECT"
'    If Not Me.GNTrans.IVCambiarEstadoFinalizar Then
'        If Not gobjMain.objCondicion.IncluirCero Then
'            If gobjMain.objCondicion.TopN > 0 Then
'                sql = sql & " TOP " & gobjMain.objCondicion.TopN
'            End If
'        End If
'    End If
        sql = sql & " gc.TransID, "
        sql = sql & " gc.CodTrans + ' ' + convert(varchar, gc.NumTrans) as trans, gc.FechaTrans "
    
        sql = sql & " FROM GNCentroCosto cc LEFT JOIN  GNVehiculo gnv   ON cc.IdVehiculo = gnv.IdVehiculo RIGHT JOIN "
        sql = sql & "  GNComprobante gc "
        sql = sql & " LEFT JOIN gncentrocostodetalle ccd"
        sql = sql & "  LEFT JOIN fichadetalle fd on fd.id = ccd.idfichadet"
        sql = sql & "  ON ccd.idcentrodet = gc.idcentrohijo"
        sql = sql & " LEFT JOIN gnoferta gof ON  gc.transid=gof.transid "
        sql = sql & IIf(Len(gobjCond.CodPC1) > 0, " Inner join PcProvCli pc ON (gc.IdProveedorRef = pc.IDProvCli  OR gc.IdClienteRef = pc.IDProvCli) ", " ")
        sql = sql & " ON cc.IdCentro = gc.IdCentro "
        If Not gobjMain.objCondicion.IncluirCero Then
            If Len(cond) > 0 Then cond = cond & " AND "
            cond = cond & " gc.Estado IN ("
            If gobjMain.objCondicion.EstadoBool(ESTADO_NOAPROBADO) Then
                 cond = cond & ESTADO_NOAPROBADO & ","
            End If
            If gobjMain.objCondicion.EstadoBool(ESTADO_APROBADO) Then
                 cond = cond & ESTADO_APROBADO & ","
            End If
             If gobjMain.objCondicion.EstadoBool(ESTADO_DESPACHADO) Then
                 cond = cond & ESTADO_DESPACHADO & ","
            End If
             If gobjMain.objCondicion.EstadoBool(ESTADO_SEMDESPACHADO) Then
                 cond = cond & ESTADO_SEMDESPACHADO & ","
            End If
            cond = Mid$(cond, 1, Len(cond) - 1)
            cond = cond & ")"
            
        Else
            cond = cond & " bandfinalizado=0"
        End If
      'auc 26/10/07
        If Me.GNTrans.VerFacturados And Me.GNTrans.CodPantalla = "IVGNG" Then
                 If Len(cond) > 0 Then cond = cond & " AND "
                 cond = cond & " gc.Estado1 IN ("
             If gobjMain.objCondicion.Estado1Bool(ESTADO_FACTURADO) Then
                 cond = cond & ESTADO_FACTURADO & ","
            End If
            If gobjMain.objCondicion.Estado1Bool(ESTADO_NOFACTURADO) Then
                 cond = cond & ESTADO_NOFACTURADO & ","
            End If
                 cond = Mid$(cond, 1, Len(cond) - 1)
                 cond = cond & ")"
          ElseIf Me.GNTrans.VerComprados And Me.GNTrans.CodPantalla = "IVGNG" Then
                 If Len(cond) > 0 Then cond = cond & " AND "
                 cond = cond & " gc.Estado2 IN ("
            If gobjMain.objCondicion.Estado2Bool(ESTADO_COMPRAS) Then
                 cond = cond & ESTADO_COMPRAS & ","
            End If
            If gobjMain.objCondicion.Estado2Bool(ESTADO_NOCOMPRAS) Then
                 cond = cond & ESTADO_NOCOMPRAS & ","
            End If
            cond = Mid$(cond, 1, Len(cond) - 1)
                 cond = cond & ")"
        End If
       'hasta aqui
    ' Condicion de Busqueda de Fecha
    If Not gobjMain.objCondicion.IncluirCero Then
    If Len(cond) > 0 Then cond = cond & " AND "
     cond = cond & " (gc.FechaTrans BETWEEN " & FechaYMD(DateAdd("yyyy", -1, gobjCond.fecha2), gobjMain.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, gobjMain.TipoDB) & " ) "
        If Me.GNTrans.IVCambiarEstadoFinalizar Then
            cond = cond & " AND bandfinalizado=0 "
        End If
     
     'Condición de CodProvCli    (Opcional)
     End If
    If Len(gobjCond.CodPC1) > 0 Then
       If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(PC.CodProvCli='" & gobjCond.CodPC1 & "')"
   End If
    If Len(s) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gc.CodTrans IN (" & s & ")"
    End If
    
    If Me.GNTrans.CodPantalla <> "IVCOTROC" Then 'auc revisar bien y quitar si es necesario
        If Me.GNTrans.IVValidarFechaValidez Then
            If Len(s) > 0 Then
                If Len(cond) > 0 Then cond = cond & " AND "
                cond = cond & " (gof.FechaValidez >= " & FechaYMD(Date, gobjMain.TipoDB) & " ) "
            End If
        End If
    End If
    
    If Len(CodCentro) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " cc.CodCentro='" & CodCentro & "'"
    End If
    
    If gobjCond.NumTrans1 <> 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gc.Numtrans= " & gobjCond.NumTrans1
    End If
    
    If gobjCond.NumTrans2 <> 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gc.numdocref= '" & gobjCond.NumTrans2 & "'"
    End If
    
    'Condición de CodProvCli    (Opcional)
    If Len(gobjCond.CodVehiculo) > 0 Then
       If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(gnv.CodVehiculo='" & gobjCond.CodVehiculo & "')"
   End If
    
    
    'JEAA 01/06/2007
    If GNTrans.ImportacionUnicaTrans Then
        cond = cond & " AND GC.TRANSID NOT IN"
        cond = cond & " (SELECT IdTransFuente"
        cond = cond & " FROM GNCentroCosto cc"
        cond = cond & " LEFT JOIN  GNVehiculo gnv   ON cc.IdVehiculo = gnv.IdVehiculo"
        cond = cond & " RIGHT JOIN  GNComprobante gc   ON cc.IdCentro = gc.IdCentro"
       cond = cond & " where gc.Estado <> 3 "
        cond = cond & " AND (gc.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, gobjMain.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, gobjMain.TipoDB) & " ) "
        cond = cond & " AND  gc.CodTrans IN ('" & GNTrans.CodTrans & "')"
        cond = cond & " AND IdTransFuente<>0 )"
        cond = cond & " and gc.transid not in( select idfuente from GNTransIdFuente g inner join gncomprobante gc on gc.transid=g.transid where gc.estado<>3 )"
    End If
    
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
'        If Len(gobjCond.CodBodega1) > 0 Then
'           cond = cond & " AND IVB.CODBODEGA = '" & gobjCond.CodBodega1 & "'"
'       End If
  'AUC importa solo transacciones con sol credito aprobadas
        If Me.GNTrans.ImpTransSolCreApr Then
            sql = sql & " AND gc.transid  IN (select pcsc.idtransfuente FROM pcsolcreprovcli pcsc"
            sql = sql & " left join gncomprobante gc on pcsc.idtransfuente= gc.transid "
            sql = sql & " WHERE pcsc.bandaprobado = 1 and pcsc.TipoSolicitud = 0)"
            If Me.GNTrans.IVPideGarante Then
                sql = sql & " AND gc.transid  IN (select pcsc.idtransfuente FROM pcsolcreprovcli pcsc"
                sql = sql & " left join gncomprobante gc on pcsc.idtransfuente= gc.transid "
                sql = sql & " WHERE pcsc.bandaprobado = 1 and pcsc.TipoSolicitud = 1)"
            End If
        End If
        
        
'     If Len(cond) > 0 Then sql = sql & " WHERE " & cond
     sql = sql & " Group by gc.TransID, gc.FechaTrans, gc.horatrans, "
     sql = sql & " gc.CodTrans, gc.NumTrans "
     'sql = sql & " ,ivb.descripcion"
    If Me.GNTrans.CodPantalla = "IVGNG" Then
            sql = sql & " ,gc.Estado1,gc.Estado2 "
    End If
    sql = sql & " ORDER BY gc.FechaTrans Desc, gc.horatrans desc  ,gc.CodTrans,gc.NumTrans"
   Set rs = mProps.objEmpresa.OpenRecordset(sql)
    ListaTransFuente2paraflex = MiGetRows(rs)
    
    Set rs = Nothing
End Function


Public Function RecuperaVentasCobroxUsuario2() As Variant 'PARA CIERRE BALGRAN
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
    sql = "SELECT "
    sql = sql & " G.TRANSID, G.CodTrans + ' ' + CONVERT(varchar, NumTrans)    AS Trans,    pc.nombre, tsk.debe as valor, tst.codtipodoc"
    sql = sql & " FROM GNCOMPROBANTE G inner join gntrans gt on g.codtrans=gt.codtrans"
    sql = sql & " inner join pcprovcli pc on  (g.idclienteref=pc.idprovcli or g.idproveedorref=pc.idprovcli)"
    sql = sql & " inner join tskardex tsk INNER JOIN TSTIPODOCBANCO TST ON TSK.IDTIPODOC=TST.IDTIPODOC on g.transid=tsk.transid"
    sql = sql & " Where G.ESTADO<>3     "
    If GNTrans.TSUtilizaFechaGrabado Then
        sql = sql & " AND (g.FechaGrabado between '" & Me.FechaTrans & " 00:00:00' AND '" & Me.FechaTrans & " 23:59:59' ) "
    Else
        sql = sql & " AND FECHATRANS BETWEEN '" & Me.FechaTrans & "' AND '" & Me.FechaTrans & "'"
    End If
    If Not Me.GNTrans.CierrePorTrans Then
        sql = sql & " AND CODUSUARIO='" & Me.codUsuario & "'"
    End If
    sql = sql & " and gt.modulo <> ('iv')"
    sql = sql & " and afectasaldopc=1"
    sql = sql & " and tsk.debe>0"
    sql = sql & " and AnexoCodTipoComp<>7  and (tsT.CODTIPODOC='EF-I'  OR  tsT.CODTIPODOC='EFEC')"
    If Me.EsNuevo Then
        sql = sql & " and g.transid not in( select IdTransRef from TSDetalleIngreso tsd inner join gncomprobante g on tsd.transid=g.transid where g.estado<>3)"
    End If
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaVentasCobroxUsuario2 = rs
    Set rs = Nothing
End Function

Private Function siGastoPorcentaje(ByVal IdEmpleado As Long, ByRef v() As Variant, ByRef Cont As Integer) As Boolean
Dim i As Long 'SI CONTRATA HAY Q REVISAR DE NUEVO
Dim band As Boolean
Dim j As Long
Dim ele As Elementos
For i = 1 To CountRolDetalle
    If Me.RolDetalle(i).IdEmpleado = IdEmpleado Then
       Set ele = Me.Empresa.RecuperarElemento(Me.RolDetalle(i).idElemento)
        If Not ele Is Nothing Then
            If ele.BandGastoDistPorc Then
                band = True
                ReDim Preserve v(1, j)
                v(0, j) = ele.Codelemento
                v(1, j) = Me.RolDetalle(i).Valor
                If Me.RolDetalle(i).Valor <> 0 Then Cont = Cont + 1
                j = j + 1
            End If
        End If
    End If
Next
siGastoPorcentaje = band
End Function

Public Property Let BandPorMovil(value As Boolean)
        If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.BandPorMovil ", MSGERR_SOLOVER
        'Solo cuando cambia el valor
    If mProps.BandPorMovil <> value Then
        mProps.BandPorMovil = value
        mbooModificado = True
    End If
End Property

Public Property Get BandPorMovil() As Boolean
    BandPorMovil = mProps.BandPorMovil
End Property

Public Function ListaIVKardex2PositivosNegativosDou( _
                    ByVal ExistPorBodega As Boolean, ByRef band As Boolean) As Variant
    Dim sql As String, rs As Recordset
    If band Then 'solo positivos
        sql = "spConsIVKardexPositivosNegativosDou " & mProps.transid & ", " & _
                                  Me.Cotizacion("") & ", " & _
                                  CadenaBool((Me.GNTrans.IVTipoTrans = "E"), Me.Empresa.TipoDB) & _
                                   ",1"
    Else: 'solo negativos
        sql = "spConsIVKardexPositivosNegativosDou " & mProps.transid & ", " & _
                                  Me.Cotizacion("") & ", " & _
                                  CadenaBool((Me.GNTrans.IVTipoTrans = "E"), Me.Empresa.TipoDB) & _
                                   ",0"
    End If
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set ListaIVKardex2PositivosNegativosDou = rs
    Set rs = Nothing
End Function

Public Function RecuperaVentasChequesxVendedor(CodForma As String) As Variant
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
    Dim codfcv As String


    codfcv = gobjMain.EmpresaActual.RecuperaVendedorxUsuario(Me.codUsuario)
    
    'Recupera los registros de TSDetalleCheque
    sql = "SELECT"
    sql = sql & " ivb.codBanco , NumCheque, p.TitularCta,  "
    sql = sql & " p.Debe As Total, G.TRANSID "
    sql = sql & " FROM GNCOMPROBANTE G inner join fcvendedor fcv on g.idvendedor=fcv.idvendedor"
    sql = sql & " inner join gntrans gt on g.codtrans=gt.codtrans"
    sql = sql & " INNER JOIN PCKARDEX P"
    sql = sql & " inner join tsformacobropago tsf on p.idforma=tsf.idforma"
    sql = sql & " INNER JOIN ivbanco ivb "
    sql = sql & " ON p.idBanco=ivb.idBanco"
    sql = sql & " ON G.TRANSID=P.TRANSID"
    sql = sql & " Where"
    sql = sql & " G.ESTADO<>3"
    sql = sql & " AND FECHATRANS BETWEEN '" & Me.FechaTrans & "' AND '" & Me.FechaTrans & "'"
    sql = sql & " AND fcv.CODVendedor='" & codfcv & "'"
    sql = sql & " AND idtarjeta=0"
    sql = sql & " and afectasaldopc=1"
    sql = sql & " and tsf.codforma=" & CodForma
    If Me.EsNuevo Then
        sql = sql & " and g.transid not in( select IdTransRef from TSDetalleCheque tsd inner join gncomprobante g on tsd.transid=g.transid where g.estado<>3)"
    End If
    sql = sql & " order by ivb.codBanco "

    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaVentasChequesxVendedor = rs
    Set rs = Nothing
End Function

Public Function RecuperaVentasChequesPosfechadosxVendedor(CodForma As String) As Variant
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
    Dim codfcv As String, fcv As FCVendedor
    
    codfcv = gobjMain.EmpresaActual.RecuperaVendedorxUsuario(Me.codUsuario)
    
    

    
    'Recupera los registros de TSDetalleCheque
    sql = "SELECT"
    sql = sql & " ivb.codBanco , NumCheque, p.TitularCta,  "
    sql = sql & " p.Debe As Total, G.TRANSID "
    sql = sql & " FROM GNCOMPROBANTE G inner join fcvendedor fcv on g.idvendedor=fcv.idvendedor "
    sql = sql & " inner join gntrans gt on g.codtrans=gt.codtrans"
    If mProps.objEmpresa.GNOpcion.BandCHP Then
        sql = sql & " INNER JOIN PCKARDEX P"
    Else
        sql = sql & " INNER JOIN PCKARDEXCHP P"
    End If
    sql = sql & " inner join tsformacobropago tsf on p.idforma=tsf.idforma"
    sql = sql & " INNER JOIN ivbanco ivb "
    sql = sql & " ON p.idBanco=ivb.idBanco"
    sql = sql & " ON G.TRANSID=P.TRANSID"
    sql = sql & " Where"
    sql = sql & " G.ESTADO<>3"
   
   sql = sql & " AND fcv.CODVendedor='" & codfcv & "'"

    sql = sql & " AND (g.FechaTrans BETWEEN '" & Me.FechaTrans & "' AND '" & Me.FechaTrans & "') "
'    sql = sql & " And (g.HoraTrans BETWEEN '" & Format(gobjMain.objCondicion.Hora1, "hh:mm:ss") & "' AND '" & Format(gobjMain.objCondicion.Hora2, "hh:mm:ss") & "') "

   sql = sql & " and (g.codTrans='" & Me.GNTrans.TSTransCierre & "') "
    sql = sql & " AND idtarjeta=0"
    sql = sql & " and afectasaldopc=1"
    sql = sql & " and tsf.codforma=" & CodForma
    If Me.EsNuevo Then
        sql = sql & " and g.transid not in( select IdTransRef from TSDetalleCheque tsd inner join gncomprobante g on tsd.transid=g.transid where g.estado<>3)"
    End If
    sql = sql & " order by ivb.codBanco "

    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaVentasChequesPosfechadosxVendedor = rs
    Set rs = Nothing
End Function

Public Function RecuperaVentasCobroxVendedor() As Variant
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
    Dim codfcv As String, fcv As FCVendedor
    
    codfcv = gobjMain.EmpresaActual.RecuperaVendedorxUsuario(Me.codUsuario)

    
'    sql = "SELECT distinct "
    sql = "SELECT "
    sql = sql & " G.TRANSID, G.CodTrans + ' ' + CONVERT(varchar, NumTrans)    AS Trans,    pc.nombre, p.haber as valor, p.numletra"
    sql = sql & " FROM GNCOMPROBANTE G inner join fcvendedor fcv on g.idvendedor=fcv.idvendedor  "
    sql = sql & " inner join gntrans gt on g.codtrans=gt.codtrans"
    sql = sql & " inner join pcprovcli pc on  (g.idclienteref=pc.idprovcli or g.idproveedorref=pc.idprovcli)"
    sql = sql & " INNER JOIN PCKARDEX P"
    sql = sql & " inner join tsformacobropago tsf on p.idforma=tsf.idforma"
    sql = sql & " ON G.TRANSID=P.TRANSID"
    sql = sql & " inner join tskardex tsk INNER JOIN TSTIPODOCBANCO TST ON TSK.IDTIPODOC=TST.IDTIPODOC on p.transid=tsk.transid"
    sql = sql & " Where G.ESTADO<>3     "
    sql = sql & " AND FECHATRANS BETWEEN '" & Me.FechaTrans & "' AND '" & Me.FechaTrans & "'"
    sql = sql & " AND fcv.CODvendedor='" & codfcv & "'"
    
    
    sql = sql & " and gt.modulo <> ('iv')"
    sql = sql & " and afectasaldopc=1"
    sql = sql & " and p.haber>0"
    sql = sql & " and gt.codpantalla <>'TSIEE'"
    sql = sql & " and AnexoCodTipoComp<>7  and (tsT.CODTIPODOC='EF-I'  OR  tsT.CODTIPODOC='EFEC')"
    If Me.EsNuevo Then
        sql = sql & " and g.transid not in( select IdTransRef from TSDetalleIngreso tsd inner join gncomprobante g on tsd.transid=g.transid where g.estado<>3)"
    End If
    

    
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    
    Set RecuperaVentasCobroxVendedor = rs
    Set rs = Nothing

End Function

Public Function RecuperaVentasCobroNoEfectivoxVendedor() As Variant
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
    Dim codfcv As String, fcv As FCVendedor
    
    codfcv = gobjMain.EmpresaActual.RecuperaVendedorxUsuario(Me.codUsuario)

    
    'sql = "SELECT distinct "
    sql = "SELECT "
    sql = sql & " G.TRANSID, G.CodTrans + ' ' + CONVERT(varchar, NumTrans)    AS Trans,    pc.nombre, p.haber as valor, p.numletra"
    sql = sql & " FROM GNCOMPROBANTE G inner join fcvendedor fcv on g.idvendedor=fcv.idvendedor "
    sql = sql & " inner join gntrans gt on g.codtrans=gt.codtrans"
    sql = sql & " inner join pcprovcli pc on  g.idclienteref=pc.idprovcli"
    sql = sql & " INNER JOIN PCKARDEX P"
    sql = sql & " inner join tsformacobropago tsf on p.idforma=tsf.idforma"
    sql = sql & " ON G.TRANSID=P.TRANSID"
    sql = sql & " inner join tskardex tsk INNER JOIN TSTIPODOCBANCO TST ON TSK.IDTIPODOC=TST.IDTIPODOC on p.transid=tsk.transid"
    sql = sql & " Where G.ESTADO<>3     "

    sql = sql & " AND FECHATRANS BETWEEN '" & Me.FechaTrans & "' AND '" & Me.FechaTrans & "'"

    sql = sql & " AND fcv.CODvendedor='" & codfcv & "'"
    
    sql = sql & " and gt.modulo<>'iv'"
    sql = sql & " and afectasaldopc=1"
    sql = sql & " and p.haber>0"
    sql = sql & " and AnexoCodTipoComp<>7 and gt.codpantalla <>'TSIEE' and  tsT.CODTIPODOC<>'EF-I' AND tsT.CODTIPODOC<>'EFEC'"
    If Me.EsNuevo Then
        sql = sql & " and g.transid not in( select IdTransRef from TSDetalleIngreso tsd inner join gncomprobante g on tsd.transid=g.transid where g.estado<>3)"
    End If
    

    
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    
    Set RecuperaVentasCobroNoEfectivoxVendedor = rs
    Set rs = Nothing

End Function

Public Function RecuperaVentasCreditoxVendedor(ByVal Trans As String, fecha As Date) As Variant
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
    Dim codfcv As String, fcv As FCVendedor
    
    codfcv = gobjMain.EmpresaActual.RecuperaVendedorxUsuario(Me.codUsuario)

    sql = "SELECT"
    sql = sql & " G.TRANSID, G.CodTrans + ' ' + CONVERT(varchar, NumTrans)    AS Trans,"
    sql = sql & " pc.nombre, debe as valor"
    sql = sql & " FROM GNCOMPROBANTE G inner join fcvendedor fcv on g.idvendedor=fcv.idvendedor "
    sql = sql & " inner join gntrans gnt on g.codtrans = gnt.codtrans"
    sql = sql & " inner join pcprovcli pc on  g.idclienteref=pc.idprovcli"
    sql = sql & " INNER JOIN PCKARDEX P"
    sql = sql & " inner join tsformacobropago tsf on"
    sql = sql & " p.IdForma = tsf.IdForma"
    sql = sql & " ON G.TRANSID=P.TRANSID"
    sql = sql & " Where g.Estado <> 3 and g.Estado <> 0"
    sql = sql & " and CodForma not in (" & Trans & ")"
    sql = sql & " AND fcv.CODvendedor='" & codfcv & "'"

    sql = sql & " AND (g.FechaTrans BETWEEN '" & Me.FechaTrans & "' AND '" & Me.FechaTrans & "') And"
    sql = sql & " (g.HoraTrans BETWEEN '" & Format(gobjMain.objCondicion.Hora1, "hh:mm:ss") & "' AND '" & Format(gobjMain.objCondicion.Hora2, "hh:mm:ss") & "') And"
    sql = sql & " (g.codTrans='" & Me.GNTrans.TSTransCierre & "') "
    
    sql = sql & " and debe>0 AND IDASIGNADO=0"
    sql = sql & " and afectasaldopc=1"
    sql = sql & " AND p.idtarjeta=0 and modulo='IV' "
    If Me.EsNuevo Then
        sql = sql & " and g.transid not in( select IdTransRef from tsdetallevcredito tsd inner join gncomprobante g on tsd.transid=g.transid where g.estado<>3)"
    End If
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaVentasCreditoxVendedor = rs
    Set rs = Nothing
End Function

Public Function RecuperaVentasCreditoxVendedorRet(ByVal Trans As String, fecha As Date) As Variant
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
    
    Dim codfcv As String, fcv As FCVendedor
    
    codfcv = gobjMain.EmpresaActual.RecuperaVendedorxUsuario(Me.codUsuario)
    
    sql = "SELECT"
    sql = sql & " G.TRANSID, G.CodTrans + ' ' + CONVERT(varchar, NumTrans)    AS Trans,"
    sql = sql & " pc.nombre, debe as valor"
    sql = sql & " FROM GNCOMPROBANTE G"
    sql = sql & " inner join fcvendedor fcv on g.idvendedor=fcv.idvendedor "
    sql = sql & " inner join gntrans gnt on g.codtrans = gnt.codtrans"
    sql = sql & " inner join pcprovcli pc on  g.idclienteref=pc.idprovcli"
    sql = sql & " INNER JOIN PCKARDEX P"
    sql = sql & " inner join tsformacobropago tsf on"
    sql = sql & " p.IdForma = tsf.IdForma"
    sql = sql & " ON G.TRANSID=P.TRANSID"
    sql = sql & " Where g.Estado <> 3 and g.Estado <> 0"
    sql = sql & " and codvendedor='" & CodVendedor & "'"
    sql = sql & " and CodForma in (" & Trans & ")"
    
    sql = sql & " and g.FechaTrans BETWEEN " & FechaYMD(fecha, gobjMain.TipoDB) & " AND " & FechaYMD(fecha, gobjMain.TipoDB) & "  "
    sql = sql & " and debe>0 AND IDASIGNADO=0"
    sql = sql & " and afectasaldopc=1"
    
    sql = sql & " AND p.idtarjeta=0 and modulo='IV' "
    If Me.EsNuevo Then
        sql = sql & " and g.transid not in( select IdTransRef from tsdetallevcredito tsd inner join gncomprobante g on tsd.transid=g.transid where g.estado<>3)"
    End If
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaVentasCreditoxVendedorRet = rs
    Set rs = Nothing
End Function

Public Function RecuperaVentasTarjetaxVendedor(ByVal CodTarjeta As String) As Variant
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
    
    Dim codfcv As String, fcv As FCVendedor
    
    codfcv = gobjMain.EmpresaActual.RecuperaVendedorxUsuario(Me.codUsuario)
    
    
    'Recupera los registros de TSDetalleCheque
    sql = "SELECT"
    sql = sql & " ivt.codtarjeta , NumCheque, p.TitularCta,  "
    sql = sql & " p.Debe As Total, G.TRANSID "
    sql = sql & " FROM GNCOMPROBANTE G"
    sql = sql & " inner join fcvendedor fcv on g.idvendedor=fcv.idvendedor "
    sql = sql & " INNER JOIN PCKARDEX P"
    sql = sql & " INNER JOIN ivtarjeta ivt "
    sql = sql & " ON p.idtarjeta=ivt.idtarjeta"
    sql = sql & " ON G.TRANSID=P.TRANSID"
    sql = sql & " Where"
    sql = sql & " G.ESTADO<>3"
    sql = sql & " AND FECHATRANS BETWEEN '" & Me.FechaTrans & "' AND '" & Me.FechaTrans & "'"
    sql = sql & " AND CODvendedor='" & codfcv & "'"
    sql = sql & " AND p.idtarjeta<>0"
    sql = sql & " AND ivt.codtarjeta = '" & CodTarjeta & "'"
    If Me.EsNuevo Then
        sql = sql & " and g.transid not in( select IdTransRef from TSDetalleTarjeta tsd inner join gncomprobante g on tsd.transid=g.transid where g.estado<>3)"
    End If
    sql = sql & " order by ivt.codtarjeta "
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaVentasTarjetaxVendedor = rs
    Set rs = Nothing
End Function

Public Property Let CodCredTribMod(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.CodCredTribMod", MSGERR_SOLOVER
    
    If Len(value) > 2 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.CodCredTribMod", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.CodCredTribMod <> value Then
        mProps.CodCredTribMod = value
        mbooModificado = True
    End If
End Property

Public Property Get CodCredTribMod() As String
    CodCredTribMod = Trim$(mProps.CodCredTribMod)
End Property

Public Property Let CodTipoCompMod(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.CodTipoCompMod", MSGERR_SOLOVER
    
    If Len(value) > 2 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.CodTipoCompMod", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.CodTipoCompMod <> value Then
        mProps.CodTipoCompMod = value
        mbooModificado = True
    End If
End Property

Public Property Get CodTipoCompMod() As String
    CodTipoCompMod = Trim$(mProps.CodTipoCompMod)
End Property

Public Property Let NumAutSRIMod(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.NumAutSRIMod", MSGERR_SOLOVER
    If value = "" Then value = "0"
    If Not IsNumeric(value) Then Err.Raise ERR_INVALIDO, "GNComprobante.NumAutSRIMod", MSGERR_INVALIDO
    
    If Len(value) > 50 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.NumAutSRIMod", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.NumAutSRIMod <> value Then
        mProps.NumAutSRIMod = IIf(value = "0", "", value)
        mbooModificado = True
    End If
End Property

Public Property Get NumAutSRIMod() As String
    NumAutSRIMod = Trim$(mProps.NumAutSRIMod)
End Property

Public Property Let NumSerieEstablecimientoMod(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.NumSerieEstablecimientoMod", MSGERR_SOLOVER
    mProps.NumSerieEstablecimientoMod = value
    mbooModificado = True
End Property

Public Property Get NumSerieEstablecimientoMod() As String
    NumSerieEstablecimientoMod = mProps.NumSerieEstablecimientoMod
End Property

'jeaa 16/07/2007
Public Property Let NumSeriePuntoMod(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.NumSeriePuntoMod", MSGERR_SOLOVER
    mProps.NumSeriePuntoMod = value
    mbooModificado = True
End Property

Public Property Get NumSeriePuntoMod() As String
    NumSeriePuntoMod = mProps.NumSeriePuntoMod
End Property

Public Property Let NumSecuencialMod(ByVal value As String)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.NumSecuencialMod", MSGERR_SOLOVER
'    If Not IsNumeric(value) Then Err.Raise ERR_INVALIDO, "GNComprobante.NumSecuencialMod", MSGERR_INVALIDO
    
    If Len(value) > 9 Then
        Err.Raise ERR_INVALIDO, "GNComprobante.NumSecuencialMod", MSGERR_INVALIDO
    End If
    
    'Solo cuando cambia el valor
    If mProps.NumSecuencialMod <> value Then
        mProps.NumSecuencialMod = value
        mbooModificado = True
    End If
End Property

Public Property Get NumSecuencialMod() As String
    NumSecuencialMod = Trim$(mProps.NumSecuencialMod)
End Property

Private Function GeneraAsientoIVDevolucion( _
                    Param As String) As colAsientoTemp
    Dim i As Long, v As Currency, k As IVKardex
    Dim col As colAsientoTemp
    
    Set col = New colAsientoTemp
    For i = 1 To CountIVKardex
        v = 0
        Set k = IVKardex(i)
        
        '*** MAKOTO 08/mar/01 Agregado
        'Si es que el item no tiene asignado una cuenta de Activo, genera error
        If k.auxIdCuentaVenta = 0 Then
            NoTieneCuentaAsignado True, "VENTA", k.CodInventario
        End If
        
        Select Case Right$(Param, 1)
        Case "+":   If k.PrecioRealTotal > 0 Then v = Abs(k.PrecioRealTotal)
        Case "-":   If k.PrecioRealTotal < 0 Then v = Abs(k.PrecioRealTotal)
        Case "*":   v = k.PrecioRealTotal
        Case "2":   v = Abs(k.PrecioTotal)           '*** DIEGO  14/07/03 Modificado Necesitamos Precio Total
        Case Else:
''            jeaa  09/02/2007 sii factura por impresion x item
            If Me.GNTrans.IVTipoTrans = "E" Then
                If k.PrecioRealTotal < 0 Then
                    v = Abs(k.PrecioRealTotal)      '*** MAKOTO 14/dic/00 Modificado para que tome PrecioRealTotal
                Else
                    'cuando esiste devolucion en la misma Factura CAMARI
                    v = (k.PrecioRealTotal) * -1
                End If
            Else
                    v = Abs(k.PrecioRealTotal)      '*** MAKOTO 14/dic/00 Modificado para que tome PrecioRealTotal
            End If
        End Select
        
        If v <> 0 Then
            'Redondea al formato de P.Total               '*** MAKOTO 13/feb/01
            'v = MiCCur(Format$(v, Me.FormatoMoneda))
            'jeaa 21/junio/2005 antes v = MiCCur(Format$(v, Me.Formatomoneda))
            v = MiCCur(Format$(v, Me.FormatoCosto))
            
            col.Add k.auxIdCuentaDevolucion, v
        End If
    Next i
    'Al ultimo tiene que redondear al formato de Precio Total       '*** MAKOTO 01/mar/01
    RedondearAsiento col, Me.FormatoMoneda
    
    
    If col.Count Then Set GeneraAsientoIVDevolucion = col
    Set col = Nothing
End Function


Private Function GeneraAsientoPcGasto( _
                    Param As String) As colAsientoTemp
    Dim i As Long, v As Currency, k As IVKardex
    Dim col As colAsientoTemp
    Dim pc As PCProvCli
    
    Set pc = Me.Empresa.RecuperaPCProvCliQuick(Me.CodProveedorRef)
    If pc.IdCuentaContableGasto = 0 Then
        NoTieneCuentaAsignado True, "PCGASTO", pc.Nombre
    End If
    
    
    Set col = New colAsientoTemp
    For i = 1 To CountIVKardex
        v = 0
        Set k = IVKardex(i)
        
        '*** MAKOTO 08/mar/01 Agregado
        'Si es que el item no tiene asignado una cuenta de Activo, genera error
        
        Select Case Right$(Param, 1)
        Case "+":   If k.CostoRealTotal > 0 Then v = Abs(k.CostoRealTotal)  'Sólo positivos
        Case "-":   If k.CostoRealTotal < 0 Then v = Abs(k.CostoRealTotal)  'Sólo negativos
        Case Else:  v = Abs(k.CostoRealTotal)       'Todos con valor absoluto
        End Select
        
        If v <> 0 Then
            'Redondea al formato de moneda               '*** MAKOTO 13/feb/01
            'No con FormatoCosto porque asiento tiene que ser cuadrado con valores de Ctas x Pagar/Cobrar
            'Por ejemplo si está FormatoMoneda con 2 decimales y FormatoCosto con 4 decimales,
            'va a haber una diferencia entre Kardex de inventario y Libro mayor de inventario, algo que ya es inevitable.
'            v = MiCCur(Format$(v, Me.FormatoMoneda))   '*** MAKOTO 01/mar/01 Error, era formato de costo
            'jeaa 02/10/2006 diferencia en asiento
            If mobjGNTrans.IVTipoTrans = "I" Then
                v = MiCCur(Format$(v, Me.FormatoCosto))
            Else
                If FormatoMoneda = "#,0.00" And Me.FormatoCosto = "#,#.0000" Then
                    v = MiCCur(Format$(v, Me.FormatoMoneda))
                Else
                    v = MiCCur(Format$(v, Me.FormatoCosto))
                End If
            End If
            col.Add pc.IdCuentaContableGasto, v
        End If
    Next i
    'Al ultimo tiene que redondear al formato de Precio Total       '*** MAKOTO 01/mar/01
    RedondearAsiento col, Me.FormatoMoneda
    If col.Count Then Set GeneraAsientoPcGasto = col
    Set col = Nothing
    Set pc = Nothing
End Function

Public Property Let TipoPeso(ByVal value As String)
    Mid$(mProps.Opcion, 8, 1) = value
    mbooModificado = True
End Property

Public Property Get TipoPeso() As String
    TipoPeso = Mid$(Opcion, 8, 1)
End Property

Public Property Let IdSeguro(value As Long)
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.IdSeguro ", MSGERR_SOLOVER
        mProps.IdSeguro = value
        mbooModificado = True
End Property

Public Property Get idSegruo() As Long
    IdSeguro = mProps.IdSeguro
End Property

Public Property Let CodSeguro(ByVal value As String)
    Dim sql As String, rs As Recordset
    'Cuando cambia el valor
    If value <> mProps.CodSeguro Then
        If Len(value) > 0 Then
            'Actualiza Idcobrdor también
            sql = "SELECT Id FROM GnSeguro WHERE codSeguro='" & value & "'"
            Set rs = mProps.objEmpresa.OpenRecordset(sql)
            If rs.EOF Then
                Err.Raise ERR_NOHAYCODIGO, "GNoferta.CodSeguro", MSGERR_NOHAYCODIGO
                Exit Property
            Else
                IdSeguro = rs!Id
            End If
            rs.Close
            Set rs = Nothing
        Else
            IdSeguro = 0
        End If
        mProps.CodSeguro = value
        SetModificado
    End If
End Property
Public Property Get CodSeguro() As String
    CodSeguro = Trim$(mProps.CodSeguro)
End Property

Public Property Let VariosDest(ByVal value As String)
    '1 o 0 si es 1 puede enviar a varios destinos caso contrario verifica el mismo destino para curier
    Mid$(mProps.Opcion, 9, 1) = value
    mbooModificado = True
End Property

Public Property Get VariosDest() As String
    VariosDest = Mid$(Opcion, 9, 1)
End Property

Public Property Let ValorDeclarado(ByVal value As Currency)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.ValorDeclarado", MSGERR_SOLOVER
    If mProps.ValorDeclarado <> value Then
        mProps.ValorDeclarado = value
        mbooModificado = True
    End If
End Property

Public Property Get ValorDeclarado() As Currency
    ValorDeclarado = Trim$(mProps.ValorDeclarado)
End Property

Public Property Get BandReproCostos() As Boolean
    BandReproCostos = mProps.BandReproCostos
End Property

Public Property Let BandReproCostos(ByVal value As Boolean)
    'Cuando SoloVer está establecido a True, genera error
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNLacteos.BandReproCostos", MSGERR_SOLOVER
        mProps.BandReproCostos = value
'        mbooModificado = True
End Property

Public Function NumCoutasAmort() As Long
Dim i As Long
Dim num As Long
For i = 1 To Me.CountPCKardex
    If Me.PCKardex(i).ValorInteres > 0 Then
        num = num + 1
   End If
Next
    NumCoutasAmort = num
End Function


Private Function AsignaNumRef(CodT As String) As Long
    Dim num As Long, sql As String, rs As Recordset
    'Obtiene el numero siguiente
    sql = "SELECT NumRefSig FROM GNTrans WHERE CodTrans='" & CodT & "'"
    Set rs = New Recordset
    rs.CursorLocation = adUseServer
    rs.Open sql, mProps.objEmpresa.Coneccion, adOpenDynamic, adLockPessimistic
    num = rs!NumRefSig
    'Si es que ya está asignado un número por UI
    'If Val(mProps.NumDocRef) <> 0 Then num = mProps.NumDocRef
        'Actualiza el numero siguiente
        rs!NumRefSig = num + 1
        rs.Update
    rs.Close
    Set rs = Nothing
    AsignaNumRef = num
End Function


Public Function ListaIVKardex2PACA2( _
                    ByVal ExistPorBodega As Boolean) As Variant
    Dim sql As String, rs As Recordset
    Dim cmd As ADODB.Command
    Set cmd = New ADODB.Command
    cmd.ActiveConnection = mProps.objEmpresa.Coneccion
    If ExistPorBodega Then
        sql = "spConsIVKardexPACA2 " & mProps.transid & ", " & _
                              "1" & ", " & _
                              CadenaBool((Me.GNTrans.IVTipoTrans = "E"), Me.Empresa.TipoDB)
    Else
        sql = "spConsIVKardexPACA2 " & mProps.transid & ", " & _
                              Me.Cotizacion("") & ", " & _
                              CadenaBool((Me.GNTrans.IVTipoTrans = "E"), Me.Empresa.TipoDB)
    End If
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set ListaIVKardex2PACA2 = rs
    Set rs = Nothing
End Function


Public Property Let Codruta(ByVal value As String)
    Dim sql As String, rs As Recordset
    'Cuando cambia el valor
    If value <> mProps.Codruta Then
        If Len(value) > 0 Then
            'Actualiza IdClienteRef también
            sql = "SELECT Id FROM GNRuta WHERE CodRuta='" & value & "'"
            Set rs = mProps.objEmpresa.OpenRecordset(sql)
            If rs.EOF Then
                Err.Raise ERR_NOHAYCODIGO, "GNComprobante.CodRuta", MSGERR_NOHAYCODIGO
                Exit Property
            Else
                IdRuta = rs!Id
              '  RaiseEvent ClienteCambiado
            End If
            rs.Close
        Else
            IdRuta = 0
        End If
        mProps.Codruta = value
        SetModificado
    End If
    Set rs = Nothing
End Property

Public Property Get Codruta() As String
    Codruta = Trim$(mProps.Codruta)
End Property
Public Property Let IdRuta(ByVal value As Long)
    If mbooSoloVer Then Err.Raise ERR_SOLOVER, "GNComprobante.IdRuta", MSGERR_SOLOVER
    mProps.IdRuta = value
    mbooModificado = True
End Property

Public Property Get IdRuta() As Long
    IdRuta = mProps.IdRuta
End Property

Public Function RecuperaCobroRetencionxSucursal() As Variant
    Dim sql As String, rs As Recordset, i As Long, mod_antes As Boolean
    
    sql = "SELECT distinct "
    sql = sql & " G.TRANSID, G.CodTrans + ' ' + CONVERT(varchar, NumTrans)    AS Trans,    pc.nombre, haber as valor, p.numletra"
    sql = sql & " FROM GNCOMPROBANTE G "
    sql = sql & " inner join gntrans gt "
    sql = sql & " inner join gnsucursal gns "
    sql = sql & " on gt.idsucursal=gns.idsucursal "
    sql = sql & " on g.codtrans=gt.codtrans"

    sql = sql & " inner join pcprovcli pc on  g.idclienteref=pc.idprovcli"
    sql = sql & " INNER JOIN PCKARDEX P"
    sql = sql & " inner join tsformacobropago tsf on p.idforma=tsf.idforma"
    sql = sql & " ON G.TRANSID=P.TRANSID"
    sql = sql & " Where G.ESTADO<>3     "

    If GNTrans.TSUtilizaFechaGrabado Then
        sql = sql & " AND (g.FechaGrabado between '" & Me.FechaTrans & " 00:00:00' AND '" & Me.FechaTrans & " 23:59:59' ) "
    Else
        sql = sql & " AND FECHATRANS BETWEEN '" & Me.FechaTrans & "' AND '" & Me.FechaTrans & "'"
    End If
    sql = sql & " AND CODsucursal='" & Me.GNTrans.CodSucursal & "'"
    sql = sql & " and gt.modulo<>'iv'"
    sql = sql & " and afectasaldopc=1"
    sql = sql & " and haber>0"
    sql = sql & " and AnexoCodTipoComp=7"
    If Me.EsNuevo Then
        sql = sql & " and g.transid not in( select IdTransRef from TSDetalleIngreso tsd inner join gncomprobante g on tsd.transid=g.transid where g.estado<>3)"
    End If
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set RecuperaCobroRetencionxSucursal = rs
    Set rs = Nothing
End Function

Public Function ListaTransDestino() As Variant
    Dim sql As String, rs As Recordset
    sql = "Select codtrans,numtrans from gncomprobante where idtransfuente = " & Me.transid
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set ListaTransDestino = rs
    Set rs = Nothing
End Function

Private Sub GrabarSacaHist()
    Dim sql As String, rs As Recordset
        'Recupera el registro correspondiente para modificar
        sql = "SELECT * FROM GnSacaHist WHERE TransID=" & mProps.transid
        Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
        If Not rs.EOF Then
            #If DAOLIB Then
                rs.Edit
            #End If
        Else
            sql = "SELECT * FROM GnSacaHist WHERE 1=0"
            Set rs = mProps.objEmpresa.OpenRecordsetParaEdit(sql)
            rs.AddNew
        End If
    With rs
        !transid = mProps.transid
        !Aerolinea = mProps.Aerolinea
        !Guia = mProps.GuiaCurier
        .Update
        #If DAOLIB Then
                rs.Bookmark = rs.LastModified
        #End If
        .Move 0             'Para actualizar
        .Close
    End With
End Sub

Public Sub RecuperarSacaHist()
    Dim sql As String, rs As Recordset
    'If TransIDGnSaca = 0 Then TransIDGnSaca = mProps.transid
    sql = "SELECT * "
    sql = sql & " From GnSacaHist "
    sql = sql & " Where transid = " & mProps.transid
    Set rs = mProps.objEmpresa.OpenRecordset(sql)
   If rs.EOF Then Exit Sub
    With rs
        If Not IsNull(!Aerolinea) Then mProps.Aerolinea = !Aerolinea
        If Not IsNull(!Guia) Then mProps.GuiaCurier = !Guia
       .Close
    End With
    Set rs = Nothing
End Sub

Public Property Let Aerolinea(ByVal value As String)
    mProps.Aerolinea = value
    mbooModificado = True
End Property

Public Property Get Aerolinea() As String
    Aerolinea = mProps.Aerolinea
End Property

Public Property Let GuiaCurier(ByVal value As String)
    mProps.GuiaCurier = value
    mbooModificado = True
End Property

Public Property Get GuiaCurier() As String
    GuiaCurier = mProps.GuiaCurier
End Property

Public Property Let Peso(ByVal value As Currency)
    mProps.Peso = value
    mbooModificado = True
End Property

Public Property Get Peso() As Currency
    Peso = mProps.Peso
End Property

Public Function VerificarLimiteItemConTransCambioBodega( _
                    ByVal CodTrans As String, _
                    ByVal NumTrans As Long, _
                    ByVal IdTransFuente As Long, _
                    ByVal CodInventario As String, _
                    ByRef CantLimite As Currency, _
                    ByRef cantGrabada As Currency) As Boolean
    Dim sql As String, rs As Recordset
    CantLimite = 0
    cantGrabada = 0
    'Obtiene Suma de cantidad de los comprobantes con los que vamos a comparar (Puede haber varios)
    sql = "SELECT Sum(ivk.Cantidad) AS SumaCant " & _
          "FROM GNComprobante gc INNER JOIN " & _
                        "(IVInventario iv INNER JOIN IVKardex ivk inner join ivbodega ivb on ivk.idbodega=ivb.idbodega " & _
                            "ON iv.IdInventario = ivk.IdInventario) " & _
                    "ON gc.TransID=ivk.TransID "
'          "WHERE (gc.CodTrans='" & Me.GNTrans.IVVerificaLimiteCon & "') AND "
    '*** MAKOTO 25/ene/01 Mod. Para sumar al presupuesto las transacción con 'M'. ejm. 'HC' y 'HCM' (M es de Modificación)
    If Me.GNTrans.IVactualizaTRansFuente Then
        sql = sql & " WHERE (gc.CodTrans IN ('" & Me.GNTrans.IVVerificaLimiteCon & "')) AND "
        sql = sql & " (gc.Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & "))  "
    Else
        If Not Me.GNTrans.ListaTranVerificaLimite Then
            sql = sql & " WHERE (gc.CodTrans IN ('" & Me.GNTrans.IVVerificaLimiteCon & "', '" & _
                                                 Me.GNTrans.IVVerificaLimiteCon & "M')) AND " & _
                        "(gc.Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & "))  "
        Else
            sql = sql & " WHERE gc.CodTrans IN (" & PreparaListaTransLimite(Me.GNTrans.TransDespuesDevolucion) & ")"
            sql = sql & " AND  (gc.Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & "))  "
        
        End If
    End If
        'jeaa 17/05/2006
        If Me.GNTrans.IVControlaLimitePorFactura = False And Me.GNTrans.IVControlaLimitePorFacturaxLinea = False Then

            sql = sql & " and (gc.IdCentro=" & Me.idCentro & ") "
        End If
        sql = sql & " and (iv.CodInventario='" & CodInventario & "')"
        If Me.GNTrans.IVControlaLimitePorFactura Or Me.GNTrans.IVControlaLimitePorFacturaxLinea Then
            If NumTrans = 0 Then
                sql = sql & " and ( GC.TRANSID=" & Me.IdTransFuente & " or  gc.idtransfuente =" & Me.IdTransFuente & ")"
            Else
                If Me.GNTrans.IVTipoTrans <> "I" Then
                    sql = sql & " and ( GC.NUMTRANS=" & NumTrans & " or  gc.idtransfuente =" & Me.IdTransFuente & ")"
                Else
                    sql = sql & " and ( GC.TRANSID=" & Me.IdTransFuente & " or  gc.idtransfuente =" & Me.IdTransFuente & ")"
                End If
            End If
        End If
        sql = sql & " and codbodega='" & Me.GNTrans.CodBodegaPre & "'"
'        sql = sql & " and cantidad>0"
            
        Set rs = Me.Empresa.OpenRecordset(sql)
        
        
    If Not IsNull(rs!sumaCant) Then CantLimite = rs!sumaCant
    rs.Close
    'Obtiene Suma de cantidad de los comprobantes 'hermanos' que son del mismo C.Costo
    sql = "SELECT Sum((ivk.Cantidad)) AS SumaCant " & _
          "FROM GNTrans gt INNER JOIN " & _
                    "(GNComprobante gc INNER JOIN " & _
                        "(IVInventario iv INNER JOIN IVKardex ivk inner join ivbodega ivb on ivk.idbodega=ivb.idbodega " & _
                            "ON iv.IdInventario = ivk.IdInventario) " & _
                        "ON gc.TransID=ivk.TransID) " & _
                    "ON gt.CodTrans=gc.CodTrans "
        sql = sql & " WHERE  (gc.Estado<>" & ESTADO_ANULADO & ")  "
        If Not Me.GNTrans.ListaTranVerificaLimite Then
            sql = sql & " AND ((gt.VerificaLimiteCon='" & Me.GNTrans.IVVerificaLimiteCon & "' or (gc.codtrans='" & Me.CodTrans & "M')) ) "
        Else
'            sql = sql & " AND (gt.TransDespuesDevolucion ='" & Me.GNTrans.TransDespuesDevolucion & "') "
        End If
            
            If Me.GNTrans.IVControlaLimitePorFactura = False Then
                sql = sql & " AND (gc.IdCentro=" & Me.idCentro & ")  "
            End If
            sql = sql & "  AND (iv.CodInventario='" & CodInventario & "') AND " & _
            "(gc.TransID<>" & Me.transid & ")"
'            If Me.GNTrans.IVTipoTrans <> "I" Then
                If Me.GNTrans.IVControlaLimitePorFactura Then
                    sql = sql & " and gc.idtransfuente=" & IdTransFuente
                End If
'            Else
            If Not Me.GNTrans.ListaTranVerificaLimite Then
                If InStr(1, UCase(Me.Empresa.GNOpcion.NombreEmpresa), "MEGA") = 0 Then
                    sql = sql & " and (gc.codtrans<>'" & Me.GNTrans.IVVerificaLimiteCon & "M" & "')"
                End If
            Else
                sql = sql & " and (gc.codtrans not in (" & PreparaListaTransM(Me.GNTrans.TransDespuesDevolucion) & "))"
            End If
            
            'sql = sql & " and cantidad>0"
            sql = sql & " and codbodega<>'" & Me.GNTrans.CodBodegaPre & "'"
                
'            End If
                  'Hay que excluir éste comprobante mismo
        Set rs = Me.Empresa.OpenRecordset(sql)
    If Not IsNull(rs!sumaCant) Then cantGrabada = rs!sumaCant
    rs.Close
    Set rs = Nothing
   VerificarLimiteItemConTransCambioBodega = True
End Function


Public Function SaldoxTrans(ByVal Id As Long) As Currency
Dim sql As String
Dim rs As Recordset
Dim Saldo As Currency
sql = "Select * from Pckardex where idasignado = " & Id
Set rs = Me.Empresa.OpenRecordset(sql)
If Not rs.EOF Then
    Saldo = rs!Saldo
End If
SaldoxTrans = Saldo
End Function

Public Sub ImportaDatosDista( _
                ByVal TransIDs As String, _
                ByVal Incremental As Boolean, cadIV As String)
    Dim Fuente As GNComprobante, i As Long, sql As String, rs As Recordset
    Dim v As Variant, tid As Long, aux_inc As Boolean
    Dim desc As String, pc As PCProvCli
    If Len(TransIDs) = 0 Then Exit Sub
    
    'Prepara una colección para almacenar TransIDs de fuente,
    ' para cuando graba la transacción cambiar de estado a Despachado
    If mcolTransIDs Is Nothing Then Set mcolTransIDs = New Collection
    
    'Separa los TransIDs en un vector
    v = Split(TransIDs, ",")
    aux_inc = Incremental
    
    'Si la transacción está configurada que importa solo desde transacciones Apropadas
    If Me.GNTrans.ImportaSoloAprobado Then
        sql = "SELECT CodTrans, NumTrans FROM GNComprobante " & _
              "WHERE (Not Estado IN (" & ESTADO_APROBADO & "," & ESTADO_DESPACHADO & "," & ESTADO_SEMDESPACHADO & ")) " & _
                    " AND (TransID IN (" & TransIDs & ")) "
        Set rs = Me.Empresa.OpenRecordset(sql)
        If Not rs.EOF Then
            sql = MSGERR_NOIMPORTA & vbCr & vbCr
            Do Until rs.EOF
                sql = sql & rs.Fields("CodTrans") & " " & rs.Fields("NumTrans") & vbCr
                rs.MoveNext
            Loop
            Err.Raise ERR_NOIMPORTA, "GNComprobante.ImportaDatos", sql
        End If
        rs.Close
        Set rs = Nothing
    End If
    desc = " Trans. Fuente: "
    'Repite para todas las transacciones de fuente
    For i = 0 To UBound(v, 1)
        tid = val(v(i))             'Convierte en numérico
        
        'Desde la segunda trans. hay que incrementar siempre
        If i > 0 Then aux_inc = True
        
        'Recupera la transaccioón de fuente
        Set Fuente = Empresa.RecuperaGNComprobante(tid)
        If Fuente Is Nothing Then
            Err.Raise ERR_NOHAYCODIGO, "GNComprobante.ImportaDatos", _
                        "No se puede recuperar la transacción de fuente."
        End If
    
        'Si está ImportaSoloAprobado=True y el origen no está 'aprobado' ni 'despachado'
        If GNTrans.ImportaSoloAprobado And _
            Not (Fuente.Estado = ESTADO_APROBADO Or Fuente.Estado = ESTADO_DESPACHADO Or Fuente.Estado = ESTADO_SEMDESPACHADO) Then
            Err.Raise ERR_NOIMPORTA, "GNComprobante.ImportaDatos", MSGERR_NOIMPORTA
        End If
        
        'Copia los datos de cabecera
        If Len(Me.idCentros) = 0 Then
            CodCentro = Fuente.CodCentro
            CodCentroHijo = Fuente.CodCentroHijo 'para bolivar
        End If
        
        'If Not Fuente.GNTrans.IVPideEmpleado Then
         '   If Len(Fuente.CodEmpleadoRef) = 0 Then
            CodProveedorRef = Fuente.CodProveedorRef
          '  Else
            CodEmpleadoRef = Fuente.CodEmpleadoRef
         '   End If
       ' Else
        '    If Len(Fuente.CodProveedorRef) > 0 Then
         '       CodEmpleadoRef = Fuente.CodEmpleadoRef
         '   Else
         '       CodEmpleadoRef = Fuente.CodEmpleadoRef
         '   End If
        'End If
        CodClienteRef = Fuente.CodClienteRef
        CodVendedor = Fuente.CodVendedor
        
        
        If Fuente.CodTrans <> "RI" Then
            If Me.GNTrans.IVValNumDoc Then
                NumDocRef = Fuente.NumSerieEstaSRI & "-" & Fuente.NumSeriePuntoSRI & "-" & Right("000000000" & Fuente.NumTrans, 9)
                If Me.GNTrans.IVComprobanteElectronico Then
                    NumSerieEstablecimiento = Fuente.NumSerieEstaSRI
                    NumSeriePunto = Fuente.NumSeriePuntoSRI
                    NumSecuencial = Right("000000000" & Fuente.NumTrans, 9)
                    NumSerie = Fuente.NumSerieEstaSRI & Fuente.NumSeriePuntoSRI
                    CodTipoComp = Fuente.GNTrans.TipoTrans
                    FechaAnexos = Fuente.FechaTrans

                End If
                
            Else
                If Me.GNTrans.IVVisibleReceta Then
                    NumDocRef = Fuente.CodTrans & "-" & Fuente.NumTrans
                Else
                    NumDocRef = Fuente.NumDocRef
                End If
            End If
        End If
        CodGaranteRef = Fuente.CodGaranteRef
        CodObra = Fuente.CodObra
        If Me.GNTrans.IVVisibleSucursalSolicita Then
            If Len(Fuente.CodZona) = 0 Then
                CodZona = Fuente.GNTrans.CodSucursal
            Else
                CodZona = Fuente.CodZona
            End If
        Else
            CodZona = Fuente.CodZona
        End If
        
        Estado1 = Fuente.Estado1
        Estado2 = Fuente.Estado2
        Atencion = Fuente.Atencion
        Detalles = Fuente.Detalles
        FechaEntrega = Fuente.FechaEntrega
        FormaPago = Fuente.FormaPago
        idCentroHijo = Fuente.idCentroHijo
        TiempoEntrega = Fuente.TiempoEntrega
        TiempoEstimadoEntrega = Fuente.TiempoEstimadoEntrega
        Validez = Fuente.Validez
        FechaValidez = Fuente.FechaValidez
        NumDireccion = Fuente.NumDireccion
        DirTransporte = Fuente.DirTransporte
        IdPlan = Fuente.IdPlan
        IdAgencia = Fuente.IdAgencia
        IdEmpleadoRef = Fuente.IdEmpleadoRef
        Estado1 = Fuente.Estado1
        RequiereTransporte = Fuente.RequiereTransporte
        
        If Fuente.FechaTrans < "01/06/2016" Then
            PorcentIVA = Me.Empresa.GNOpcion.PorcentajeIVA
        ElseIf Me.FechaTrans > "31/05/2016" And Me.FechaTrans < "01/06/2017" And Not Me.BandAplicaIvaAnt Then
            PorcentIVA = Me.Empresa.GNOpcion.PorcentajeIVAAnt
        ElseIf Me.FechaTrans >= Me.Empresa.GNOpcion.FechaIVA Then
            If Fuente.FechaTrans < Me.Empresa.GNOpcion.FechaIVA And Me.GNTrans.AnexoCodTipoComp = "4" Then
                PorcentIVA = Me.Empresa.GNOpcion.PorcentajeIVAAnt
            Else
                PorcentIVA = Me.Empresa.GNOpcion.PorcentajeIVA
            End If
        Else
            PorcentIVA = Me.Empresa.GNOpcion.PorcentajeIVAAnt
        End If
        
        
        'jeaa 04-04-2005 aumentado para saber de donde importo
        If UBound(v, 1) = 0 Then
            If Not Me.GNTrans.VisualizaTransFuente Then
                If Len(desc & " " & Fuente.CodTrans & " No. " & Fuente.NumTrans & " / ") > 120 Then
                    desc = desc & " " & Fuente.CodTrans & " No. " & Fuente.NumTrans & " / " & Mid$(Fuente.Descripcion, 1, Len(Fuente.Descripcion) - Len(Descripcion) - 20 - Len(Fuente.CodTrans))
                Else
                    desc = desc & " " & Fuente.CodTrans & " No. " & Fuente.NumTrans & " / " & Left$(Fuente.Descripcion, 120 - (Len(desc) + 5))
                End If
            Else
                desc = Left$(Fuente.Descripcion, 120)
                TransFuente = Fuente.CodTrans & " -" & Fuente.NumTrans
            End If
        Else
            If Len(Me.idCentros) = 0 Then
                desc = desc & Fuente.CodTrans & "-" & Fuente.NumTrans & " / "
            Else
                If InStr(1, desc, Fuente.CodCentro) = 0 Then
                    desc = desc & Fuente.CodCentro & " / "
                End If
            End If
        End If
        
        CodResponsable = Fuente.CodResponsable  '*** MAKOTO 16/ago/2000
        Nombre = Fuente.Nombre                  '*** MAKOTO 06/feb/01 Agregado
        
        If Fuente.GNTrans.CodPantalla = "PRPR" Then
            If Fuente.GNTrans.CodTrans <> "RI" Then
                CodGaranteRef = Fuente.CodProveedorRef
                If Fuente.ProfAdjudicada = 1 Then
                    CodProveedorRef = Fuente.Proforma1
                ElseIf Fuente.ProfAdjudicada = 2 Then
                    CodProveedorRef = Fuente.Proforma2
                ElseIf Fuente.ProfAdjudicada = 3 Then
                    CodProveedorRef = Fuente.Proforma3
                End If
            End If
            Set pc = Me.Empresa.RecuperaPCProvCliQuick(CodProveedorRef)
               If Not pc Is Nothing Then
                    Nombre = pc.Nombre
               End If
               Set pc = Nothing

    End If
       If Me.GNTrans.IVVisualizarNumPagos Then 'AUC agregado para yolita importa las entradas
        Me.NumeroPagos = Fuente.NumeroPagos
        Me.FechaPrimerPago = Fuente.FechaPrimerPago
        Me.FechaSegundoPago = Fuente.FechaSegundoPago
        Me.ValorEntrada = Fuente.ValorEntrada
        Me.ValorSegundaEntrada = Fuente.ValorSegundaEntrada
        Me.DiaPago = Fuente.DiaPago
       End If
        Me.CodReceta = Fuente.CodReceta
        Me.CodSeguro = Fuente.CodSeguro
        Me.ValorDeclarado = Fuente.ValorDeclarado
        Me.Peso = Fuente.Peso
        Me.IdDestinatario = Fuente.IdDestinatario
        Me.IdAgeCurier = Fuente.IdAgeCurier
        
        'Si requiere importar TSKardex
        If GNTrans.ImportaTSK Then
            ImportaTSKardex Fuente
        End If
        
        'Si requiere importar TSKardexRet       '*** MAKOTO 07/feb/01 Agregado
        If GNTrans.ImportaTSKRet Then
            ImportaTSKardexRet Fuente
        End If
        
        'Si requiere importar IVKardex
        If GNTrans.Modulo <> "AF" Then
            If GNTrans.ImportaIVK Then
                If GNTrans.FiltroItemxBod Then
                    ImportaIVKardexsSucursal Fuente, False, aux_inc
                Else
                    If Me.Empresa.GNOpcion.IVKTipoDatoDouble Then
                        ImportaIVKardexDou Fuente, False, aux_inc
                    Else
                       ImportaIVKardexDista Fuente, False, aux_inc, cadIV
                    End If
                End If
            End If
            'Si requiere importar IVKardex pero que pase CostoRealTotal a CostoTotal
            If GNTrans.ImportaIVKReal Then
                If GNTrans.FiltroItemxBod Then
                    ImportaIVKardexsSucursal Fuente, False, aux_inc
                Else
                    If Me.Empresa.GNOpcion.IVKTipoDatoDouble Then
                        ImportaIVKardexDou Fuente, True, aux_inc
                    Else
                       ImportaIVKardex Fuente, True, aux_inc
                    End If
                End If
            End If
            'Si requiere importar IVKardexRecargo
            If GNTrans.ImportaIVKR Then
                ImportaIVKardexRecargo Fuente
            End If
        End If
    
        'Si requiere importar PCKardex
        If GNTrans.ImportaPCK Then
            If Fuente.GNTrans.CodPantalla = "IVRES_ALQ" Or Fuente.GNTrans.CodPantalla = "IVBQD2B" Or Fuente.GNTrans.CodPantalla = "IVBQD2BE" Or Fuente.GNTrans.CodPantalla = "IVRES_ALQF" Then  'AUC 14/02/07
                ImportaPCKardex1 Fuente, aux_inc
            Else
                ImportaPCKardex Fuente
            End If
        End If
        'Si requiere importar PCKardexCHP
        If GNTrans.ImportaPCKCHP Then
            ImportaPCKardexCHP Fuente
        End If
        
        'Si requiere importar CTLibroDetalle
        If GNTrans.ImportaCTD Then
            ImportaAsiento Fuente, aux_inc
        End If
    
            'Si requiere importar Presupuesto
        If GNTrans.ImportaPRCTD Then
            ImportaPRAsiento Fuente, aux_inc
        End If
        
        If GNTrans.IVGuiaRemision Then
            FechaInicio = Date
            FechaFin = Date
        End If
        
        'Almacena TransID de fuente en la colección
        If Not aux_inc Then LimpiaColeccion mcolTransIDs
        mcolTransIDs.Add item:=Fuente.transid
    
        'Si es importación incremental, cambia estado del ogígen inmediatamente
        '  Si no es incremental, lo hace al momento de grabar la trans para que
        '  no cambie estado en case de que cancela la transaccion sin grabar
        If Incremental Then
            'Si no está aprobado, no pasa al estado 'Despachado'
            ' para evitar que un asiento descuadrado marque como Despachado y afecte al balance
            If Fuente.Estado = ESTADO_APROBADO Then
                'Cambia el estado de fuente a Despachado
                mProps.objEmpresa.CambiaEstadoGNComp Fuente.transid, ESTADO_DESPACHADO
            End If
        End If
    Next i
    If UBound(v, 1) = 0 Then
        Descripcion = Descripcion & Mid$(desc, 1, 120 - Len(Descripcion))
    Else
        Descripcion = Descripcion & Mid$(desc, 1, 120 - Len(Descripcion))
    End If
    If Len(Descripcion) > 120 Then Descripcion = Mid$(Descripcion, 1, 120)
    Set Fuente = Nothing
End Sub

Private Sub ImportaIVKardexDista( _
                ByVal Fuente As GNComprobante, _
                ByVal ConValorReal As Boolean, _
                ByVal Incremental As Boolean, ByVal codIV As String)
    Dim i As Long, ix As Long, ivk As IVKardex
    Dim Signo As Integer, item As IVInventario
    Dim CantOriginal As Currency, c As Currency, pc As PCProvCli, nunPCGrupo As Integer, idPcGrupo As Long, cadPrecios  As String, ListaPrecio As String
    Dim v As Variant, respIVA As Single
    Dim ivVec As Variant, ij As Long
    If mcolIVKardex Is Nothing Then Set mcolIVKardex = New Collection
    ivVec = Split(codIV, ",")
    'Si es importación incremental, no se borra lo anterior
    If Not Incremental Then             '*** MAKOTO 15/dic/00
        BorrarIVKardex
    End If
        For i = 1 To Fuente.CountIVKardex
'        If Me.GNTrans.CodPantalla = "IVRES_ALQ" Then
'
'        Else
                Set ivk = Fuente.IVKardex(i).Clone
                Set ivk.GNComprobante = Me
                Set item = Fuente.Empresa.RecuperaIVInventario(ivk.IdInventario)
        For ij = 0 To UBound(ivVec)
            If item.CodInventario = ivVec(ij) Then
                If Fuente.GNTrans.CodPantalla = "IVBQDISO" Then
                    c = 0
                Else
                    If Me.Empresa.GNOpcion.BandCostoUCParaCosto Then
                        c = item.CostoReferencial
                    Else
                        c = item.CostoDouble2(Me.FechaTrans, _
                            ivk.Cantidad, _
                            Me.transid, _
                            Me.HoraTrans)  '*** MAKOTO 08/dic/00 Agregado Hora
                    End If
                End If
                    CantOriginal = ivk.Cantidad
                    If (GNTrans.Modulo <> Fuente.GNTrans.Modulo) Or _
                        (GNTrans.Modulo = Fuente.GNTrans.Modulo) Then       '**** PEND
                        'Asegura que la cantidad tenga el signo correcto
                        ' Es necesario porque tiene que cambiar de signo cuando importa de
                        ' FC(Egreso) --> FCV(Ingreso) o CP(Ingreso) --> CPV(Egreso)
                        ' HC(Ingreso) --> OF(Egreso) etc...
                        If Me.GNTrans.ImpRespetarSignosCantidad Then
                            If Len(Me.idFuentes) > 0 Or Len(Me.TransFuente) <> 0 Then
                                Signo = IIf(Fuente.GNTrans.IVTipoTrans = "E", -1, 1) '-1 si es egreso
                            Else
                                Signo = IIf(Me.GNTrans.IVTipoTrans = "E", -1, 1) '-1 si es egreso
                            End If
                        Else
                            If Me.GNTrans.IVTransCal Then
                                Signo = IIf(Me.GNTrans.IVTipoTrans = "E", 1, -1) '-1 si es egreso
                            Else
                                Signo = IIf(Me.GNTrans.IVTipoTrans = "E", -1, 1) '-1 si es egreso
                            End If
                        End If
                        ivk.Cantidad = Abs(ivk.Cantidad) * Signo
                        If Len(Me.CodDistrito) <> 0 Then
                            ivk.CodBodega = Me.CodDistrito
                        End If
                        ivk.Descuento = ivk.Descuento
                    End If
                    If Me.GNTrans.IVTipoTrans = "I" Or Me.GNTrans.IVTipoTrans = "X" Then
                        If Not ConValorReal Then
                            ivk.CostoTotal = Abs(ivk.CostoTotal) * Signo
                            ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
                        Else
                            ivk.CostoTotal = Abs(ivk.CostoRealTotal) * Signo
                            ivk.PrecioTotal = Abs(ivk.PrecioRealTotal) * Signo
                            ivk.Descuento = 0
                        End If
                        ivk.CostoRealTotal = Abs(ivk.CostoRealTotal) * Signo
                        ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
                    Else
                        If Not ConValorReal Then
                                If Me.GNTrans.AnexoCodTipoTrans = "1" Then
                                    If Me.GNTrans.AnexoCodTipoComp = "4" Then
                                        ivk.CostoTotal = ivk.CostoTotal * Signo
                                    Else
                                        ivk.CostoTotal = ivk.CostoTotal
                                    End If
                                Else
                                    ivk.CostoTotal = c * ivk.Cantidad
                                End If
                            If Me.GNTrans.IVActualizaPrecioLista Then
                                If Me.GNTrans.IVPrecioxPCGrupo Then
                                            If Me.IdClienteRef <> 0 Then
                                                Set pc = Me.Empresa.RecuperaPCProvCli(Me.IdClienteRef)
                                                If Not pc Is Nothing Then
                                                    If Len(Me.Empresa.GNOpcion.ObtenerValor("PrecioxCGrupo")) > 0 Then
                                                        If CInt(Me.Empresa.GNOpcion.ObtenerValor("PrecioxCGrupo")) > 0 Then
                                                                nunPCGrupo = CInt(Me.Empresa.GNOpcion.ObtenerValor("PrecioxCGrupo"))
                                                            Select Case nunPCGrupo
                                                            Case 1
                                                                idPcGrupo = pc.IdGrupo1
                                                            Case 2
                                                                idPcGrupo = pc.IdGrupo2
                                                            Case 3
                                                                idPcGrupo = pc.IdGrupo3
                                                            Case 4
                                                                idPcGrupo = pc.IdGrupo4
                                                            End Select
                                                            If Me.CodForma = "TCC" Then
                                                                cadPrecios = "1000000"
                                                            Else
                                                                cadPrecios = item.RecuperaCadenaPreciosxGrupo(nunPCGrupo, idPcGrupo)
                                                            End If
                                                            ListaPrecio = item.ListaPrecioxPCGrupoParaFlex(Me, cadPrecios)
                                                            v = Split(ListaPrecio, "|")
                                                            
                                                            If ivk.PrecioTotal <> (Abs(v(1)) * ivk.Cantidad) Then
                                                                MsgBox " Para el item " & item.CodInventario & "-" & item.Descripcion & Chr(13) & "Se actualiza el precio de " & Abs(ivk.PrecioTotal) & " a " & Abs(Abs(v(1)) * ivk.Cantidad)
                                                            End If
                                                            ivk.PrecioTotal = Abs(v(1)) * ivk.Cantidad
                                                            Set pc = Nothing
                                                        End If
                                                    End If
                                                End If
                                            Else
                                                MsgBox "Debe primero seleccionar cliente," & Chr(13) & "Está Transacción está configurada con Precios por Grupo de Cliente"
                                                Exit Sub
                                            End If
                                Else
                                    ivk.PrecioTotal = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.Cantidad
                                End If
                            Else
                                ivk.PrecioTotal = Abs(ivk.PrecioTotal) * Signo
                            End If
                        Else
                            ivk.CostoTotal = c * ivk.Cantidad
                            ivk.PrecioTotal = Abs(ivk.PrecioRealTotal) * Signo
                            ivk.Descuento = 0
                        End If
                        ivk.CostoRealTotal = c * ivk.Cantidad
                        If Me.GNTrans.IVActualizaPrecioLista Then
                            ivk.PrecioRealTotal = Abs(item.Precio(Me.GNTrans.IVPrecioPre)) * ivk.Cantidad
                        Else
                            ivk.PrecioRealTotal = Abs(ivk.PrecioRealTotal) * Signo
                        End If
                    End If
                    If Me.GNTrans.IVControlaLimitePorFacturaxLinea Then
                        ivk.Nota1 = Fuente.IVKardex(i).Orden
                    End If
                    ivk.codItemPadre = Fuente.IVKardex(i).codItemPadre
                    'jeaa 23/03/2009
                    If item Is Nothing Then
                        Set item = Fuente.Empresa.RecuperaIVInventarioQuick(ivk.IdInventario)
                    End If
                    If Not item Is Nothing Then
                            If Not item.BandNoSeFactura Then
                                ' si se importa de un transferencia solo coge valores de ingreso
                                If Fuente.GNTrans.IVTipoTrans = "T" Or Fuente.GNTrans.IVTipoTrans = "A" Then
                                    If CantOriginal > 0 Then
                                        mcolIVKardex.Add ivk
                                    End If
                                Else
                                    mcolIVKardex.Add ivk
                                End If
                            End If
                    End If
                    If Fuente.PorcentIVA <> Me.Empresa.GNOpcion.PorcentajeIVA And Me.GNTrans.AnexoCodTipoComp <> "4" Then
                        If Not Me.BandAplicaIvaAnt Then
                            respIVA = MsgBox("La transaccion importada " & Fuente.CodTrans & "-" & Fuente.NumTrans & " tiene un porcentaje de IVA de: " & Fuente.PorcentIVA * 100 & Chr(13) & "El cual es  diferente al porcentaj Actual que es: " & Me.Empresa.GNOpcion.PorcentajeIVA * 100 & Chr(13) & "Desea manter el Porcentaje Anterior: " & Fuente.PorcentIVA * 100, vbYesNo)
                        Else
                            respIVA = vbYes
                        End If
                    End If
                    If respIVA = vbNo Or (respIVA = 0 And Me.GNTrans.AnexoCodTipoComp = "4") Then
                        If ivk.IVA <> 0 Then
                            If Me.FechaTrans < "01/06/2016" Or Fuente.FechaTrans < "01/06/2016" Then
                                ivk.IVA = Fuente.PorcentIVA
                                Me.PorcentIVA = Fuente.PorcentIVA
                            ElseIf Me.FechaTrans > "31/05/2016" And Me.FechaTrans < "01/06/2017" And Not Me.BandAplicaIvaAnt Then
                                ivk.IVA = Fuente.PorcentIVA
                                Me.PorcentIVA = Fuente.PorcentIVA
                            ElseIf Me.FechaTrans >= Me.Empresa.GNOpcion.FechaIVA Then
                                If Fuente.FechaTrans < Me.Empresa.GNOpcion.FechaIVA And Me.GNTrans.AnexoCodTipoComp = "4" Then
                                    ivk.IVA = Me.Empresa.GNOpcion.PorcentajeIVAAnt
                                    Me.PorcentIVA = Me.Empresa.GNOpcion.PorcentajeIVAAnt
                                Else
                                    If Me.GNTrans.AnexoCodTipoComp = "4" Then
                                        ivk.IVA = Fuente.PorcentIVA
                                        Me.PorcentIVA = Fuente.PorcentIVA
'                                        Me.BandAplicaIvaAnt = True
                                    Else
                                        ivk.IVA = Me.Empresa.GNOpcion.PorcentajeIVA
                                    End If
                                End If
                            Else
                                ivk.IVA = Me.Empresa.GNOpcion.PorcentajeIVAAnt
                                Me.PorcentIVA = Me.Empresa.GNOpcion.PorcentajeIVAAnt
                            End If
                        End If
                    ElseIf respIVA = vbYes Then
                        Me.BandAplicaIvaAnt = True
                        ivk.IVA = Me.Empresa.GNOpcion.PorcentajeIVAAnt
                        Me.PorcentIVA = Me.Empresa.GNOpcion.PorcentajeIVAAnt
                    End If
           End If
        Next ij
        Set item = Nothing
    Next i
End Sub


Public Function ListaTransFuente2Dista( _
                    ByVal CodCentro As String, ByVal sInv As String) As Variant
    Dim sql As String, v As Variant, i As Long, CodT As String
    Dim cond As String, rs As Recordset, cond1 As String, s As String
    If Len(GNTrans.CodTransFuente) > 0 Then
        'Puede tener varios codigos de transaccion de fuente    ejm. (FC);(OF)
        v = Split(GNTrans.CodTransFuente, ";")
        For i = 0 To UBound(v)
            If Len(s) > 0 Then s = s & ","
            CodT = v(i)
            CodT = Left$(CodT, Len(CodT) - 1)       'Quita el signo ')'
            CodT = Right$(CodT, Len(CodT) - 1)      'Quita el signo '('
            s = s & "'" & CodT & "'"
        Next i
    Else
        Err.Raise ERR_INVALIDO, "GNComprobante.ListaTransFuente", _
                    "No está definida ningúna transacción de fuente para ésta transacción."
    End If
    '*** MAKOTO 06/mar/01 Agregado 'Nombre'
    'cambiado por Oliver 27/08/2003
    sql = "SELECT"
    If Not Me.GNTrans.IVCambiarEstadoFinalizar Then
        If Not gobjMain.objCondicion.IncluirCero Then
            If gobjMain.objCondicion.TopN > 0 Then
                sql = sql & " TOP " & gobjMain.objCondicion.TopN
            End If
        End If
    End If
    '*** MAKOTO 05/feb/01 Mod. Aumentado 'NumDocRef' y 'Nombre'
    sql = sql & " gc.TransID, gc.FechaTrans, gc.CodTrans, gc.NumTrans, "
    sql = sql & " gc.NumdocRef, gc.Nombre, gc.Descripcion, "
    sql = sql & " cc.idCentro, cc.CodCentro, cc.Descripcion AS DescCentro, gnv.CodVehiculo, gc.Estado, "
    sql = sql & " case gc.Estado when '0' THEN 'NO CONT' when '1' THEN 'APROV' when '2' THEN 'DESPA' when '3' THEN 'ANULA' when '4' THEN 'SEM DESP' END AS estadoL "
    
    If Me.GNTrans.CodPantalla = "IVGNG" Then
        sql = sql & " ,gc.Estado1,gc.Estado2 "
    End If
    sql = sql & " , gof.FechaValidez, '' AS detalle "
    sql = sql & " , fd.FechaIngreso "
    
        sql = sql & "FROM GNCentroCosto cc LEFT JOIN  GNVehiculo gnv   ON cc.IdVehiculo = gnv.IdVehiculo RIGHT JOIN "
        sql = sql & "  GNComprobante gc  Inner join ivkardex ivk    INner join ivinventario iv on iv.idinventario = ivk.idinventario    on ivk.transid = gc.transid"
        sql = sql & " LEFT JOIN gncentrocostodetalle ccd"
        sql = sql & "  LEFT JOIN fichadetalle fd on fd.id = ccd.idfichadet"
        sql = sql & "  ON ccd.idcentrodet = gc.idcentrohijo"
        
        sql = sql & " LEFT JOIN gnoferta gof ON  gc.transid=gof.transid "
        sql = sql & IIf(Len(gobjCond.CodPC1) > 0, " Inner join PcProvCli pc ON (gc.IdProveedorRef = pc.IDProvCli  OR gc.IdClienteRef = pc.IDProvCli) ", " ")
        sql = sql & " ON cc.IdCentro = gc.IdCentro "
        If Not gobjMain.objCondicion.IncluirCero Then
            If Len(cond) > 0 Then cond = cond & " AND "
            cond = cond & " gc.Estado IN ("
            If gobjMain.objCondicion.EstadoBool(ESTADO_NOAPROBADO) Then
                 cond = cond & ESTADO_NOAPROBADO & ","
            End If
            If gobjMain.objCondicion.EstadoBool(ESTADO_APROBADO) Then
                 cond = cond & ESTADO_APROBADO & ","
            End If
             If gobjMain.objCondicion.EstadoBool(ESTADO_DESPACHADO) Then
                 cond = cond & ESTADO_DESPACHADO & ","
            End If
             If gobjMain.objCondicion.EstadoBool(ESTADO_SEMDESPACHADO) Then
                 cond = cond & ESTADO_SEMDESPACHADO & ","
            End If
            cond = Mid$(cond, 1, Len(cond) - 1)
            cond = cond & ")"
        Else
            cond = cond & " bandfinalizado=0"
        End If
      'auc 26/10/07
        If Me.GNTrans.VerFacturados And Me.GNTrans.CodPantalla = "IVGNG" Then
                 If Len(cond) > 0 Then cond = cond & " AND "
                 cond = cond & " gc.Estado1 IN ("
             If gobjMain.objCondicion.Estado1Bool(ESTADO_FACTURADO) Then
                 cond = cond & ESTADO_FACTURADO & ","
            End If
            If gobjMain.objCondicion.Estado1Bool(ESTADO_NOFACTURADO) Then
                 cond = cond & ESTADO_NOFACTURADO & ","
            End If
                 cond = Mid$(cond, 1, Len(cond) - 1)
                 cond = cond & ")"
          ElseIf Me.GNTrans.VerComprados And Me.GNTrans.CodPantalla = "IVGNG" Then
                 If Len(cond) > 0 Then cond = cond & " AND "
                 cond = cond & " gc.Estado2 IN ("
            If gobjMain.objCondicion.Estado2Bool(ESTADO_COMPRAS) Then
                 cond = cond & ESTADO_COMPRAS & ","
            End If
            If gobjMain.objCondicion.Estado2Bool(ESTADO_NOCOMPRAS) Then
                 cond = cond & ESTADO_NOCOMPRAS & ","
            End If
            cond = Mid$(cond, 1, Len(cond) - 1)
                 cond = cond & ")"
        End If
       'hasta aqui
    ' Condicion de Busqueda de Fecha
    If Not gobjMain.objCondicion.IncluirCero Then
    If Len(cond) > 0 Then cond = cond & " AND "
     cond = cond & " (gc.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, gobjMain.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, gobjMain.TipoDB) & " ) "
        If Me.GNTrans.IVCambiarEstadoFinalizar Then
            cond = cond & " AND bandfinalizado=0 "
        End If
     If Len(cond) > 0 Then cond = cond & " AND "
     cond = cond & " iv.codinventario in (" & PreparaCadena(sInv) & ")"
     
     'Condición de CodProvCli    (Opcional)
     End If
    If Len(gobjCond.CodPC1) > 0 Then
       If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(PC.CodProvCli='" & gobjCond.CodPC1 & "')"
   End If
    If Len(s) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gc.CodTrans IN (" & s & ")"
    End If
    
    If Me.GNTrans.CodPantalla <> "IVCOTROC" Then 'auc revisar bien y quitar si es necesario
        If Me.GNTrans.IVValidarFechaValidez Then
            If Len(s) > 0 Then
                If Len(cond) > 0 Then cond = cond & " AND "
                cond = cond & " (gof.FechaValidez >= " & FechaYMD(Date, gobjMain.TipoDB) & " ) "
            End If
        End If
    End If
    
    If Len(CodCentro) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " cc.CodCentro='" & CodCentro & "'"
    End If
    
    If gobjCond.NumTrans1 <> 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gc.Numtrans= " & gobjCond.NumTrans1
    End If
    
    If gobjCond.NumTrans2 <> 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " gc.numdocref= '" & gobjCond.NumTrans2 & "'"
    End If
    
    'Condición de CodProvCli    (Opcional)
    If Len(gobjCond.CodVehiculo) > 0 Then
       If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(gnv.CodVehiculo='" & gobjCond.CodVehiculo & "')"
   End If
    
    
    'JEAA 01/06/2007
    If GNTrans.ImportacionUnicaTrans Then
        cond = cond & " AND GC.TRANSID NOT IN"
        cond = cond & " (SELECT IdTransFuente"
        cond = cond & " FROM GNCentroCosto cc"
        cond = cond & " LEFT JOIN  GNVehiculo gnv   ON cc.IdVehiculo = gnv.IdVehiculo"
        cond = cond & " RIGHT JOIN  GNComprobante gc   ON cc.IdCentro = gc.IdCentro"
       cond = cond & " where gc.Estado <> 3 "
        cond = cond & " AND (gc.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, gobjMain.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, gobjMain.TipoDB) & " ) "
        cond = cond & " AND  gc.CodTrans IN ('" & GNTrans.CodTrans & "')"
        cond = cond & " AND IdTransFuente<>0 )"
        cond = cond & " and gc.transid not in( select idfuente from GNTransIdFuente g inner join gncomprobante gc on gc.transid=g.transid where gc.estado<>3 )"
    End If
    
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
'        If Len(gobjCond.CodBodega1) > 0 Then
'           cond = cond & " AND IVB.CODBODEGA = '" & gobjCond.CodBodega1 & "'"
'       End If
  'AUC importa solo transacciones con sol credito aprobadas
        If Me.GNTrans.ImpTransSolCreApr Then
            sql = sql & " AND gc.transid  IN (select pcsc.idtransfuente FROM pcsolcreprovcli pcsc"
            sql = sql & " left join gncomprobante gc on pcsc.idtransfuente= gc.transid "
            sql = sql & " WHERE pcsc.bandaprobado = 1 and pcsc.TipoSolicitud = 0)"
            If Me.GNTrans.IVPideGarante Then
                sql = sql & " AND gc.transid  IN (select pcsc.idtransfuente FROM pcsolcreprovcli pcsc"
                sql = sql & " left join gncomprobante gc on pcsc.idtransfuente= gc.transid "
                sql = sql & " WHERE pcsc.bandaprobado = 1 and pcsc.TipoSolicitud = 1)"
            End If
        End If
        
        
'     If Len(cond) > 0 Then sql = sql & " WHERE " & cond
     sql = sql & " Group by gc.TransID, gc.FechaTrans, gc.horatrans, "
     sql = sql & " gc.CodTrans, gc.NumTrans, gc.NumdocRef, gc.Nombre, gc.Descripcion,"
     sql = sql & " cc.idCentro, cc.CodCentro, cc.Descripcion, gc.Estado, gnv.CodVehiculo "
      sql = sql & " , gof.FechaValidez,fd.FechaIngreso "
     'sql = sql & " ,ivb.descripcion"
    If Me.GNTrans.CodPantalla = "IVGNG" Then
            sql = sql & " ,gc.Estado1,gc.Estado2 "
    End If
    sql = sql & " ORDER BY gc.FechaTrans Desc, gc.horatrans desc  ,gc.CodTrans,gc.NumTrans"
   Set rs = mProps.objEmpresa.OpenRecordset(sql)
    Set ListaTransFuente2Dista = rs
    Set rs = Nothing
End Function

Private Function GeneraAsientoIVGarantiaDebe(Param As String) As colAsientoTemp
    Dim i As Long, v As Currency, k As IVKardex
    Dim col As colAsientoTemp
    Dim rs As Recordset
    Dim sql As String
    Dim val As Currency
    Set col = New colAsientoTemp
    For i = 1 To CountIVKardex
        v = 0
        Set k = IVKardex(i)
        sql = " Select * from  IVGarantia Where idinventario = " & k.IdInventario
        sql = sql & " And  ('" & Me.FechaTrans & "'  between Fechadesde  And FechaHasta)"
        Set rs = Me.Empresa.OpenRecordset(sql)
        If Not rs Is Nothing Then
             val = rs!Valor
        End If
        Set rs = Nothing
        
        If k.BandGarantiaV Then
            v = Abs(k.PrecioRealTotal * (val / 100))
        ElseIf k.BandGarantiaC Then
            v = Abs(k.CostoRealTotal * (val / 100))
        End If
        
        If v <> 0 Then
            v = MiCCur(Format$(v, Me.FormatoCosto))
            col.Add 0, v
        End If
    Next i
    RedondearAsiento col, Me.FormatoMoneda
    If col.Count Then Set GeneraAsientoIVGarantiaDebe = col
    Set col = Nothing
End Function

Private Function GeneraAsientoIVGarantiaHaber(Param As String) As colAsientoTemp
    Dim i As Long, v As Currency, k As IVKardex
    Dim col As colAsientoTemp
    Dim rs As Recordset
    Dim sql As String
    Dim val As Currency
    
    Set col = New colAsientoTemp
    For i = 1 To CountIVKardex
        v = 0
        Set k = IVKardex(i)
        sql = " Select * from  IVGarantia Where idinventario = " & k.IdInventario
        sql = sql & " And  ('" & Me.FechaTrans & "'  between Fechadesde  And FechaHasta)"
        
        Set rs = Me.Empresa.OpenRecordset(sql)
        If Not rs Is Nothing Then
             val = rs!Valor
        End If
        Set rs = Nothing
        If k.BandGarantiaV Then
            v = Abs(k.PrecioRealTotal * (val / 100))
        ElseIf k.BandGarantiaC Then
            v = Abs(k.CostoRealTotal * (val / 100))
        End If
        If v <> 0 Then
            v = MiCCur(Format$(v, Me.FormatoCosto))
            col.Add 0, v
        End If
    Next i
    RedondearAsiento col, Me.FormatoMoneda
    If col.Count Then Set GeneraAsientoIVGarantiaHaber = col
    Set col = Nothing
End Function


