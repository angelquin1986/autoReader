VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "Empresa"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = True
Attribute VB_Ext_KEY = "SavedWithClassBuilder6" ,"Yes"
Attribute VB_Ext_KEY = "Member0" ,"SiiMain"
Attribute VB_Ext_KEY = "Top_Level" ,"Yes"
Option Explicit

Public Enum E_SIITIPOCUENTA
    sictTODOS = 0
    sictACTIVO = 1
    sictPASIVO = 2
    sictPATRIMONIO = 4
    sictINGRESO = 8
    sictEGRESO = 16
End Enum
 
Private Declare Function GetComputerName Lib "kernel32" Alias "GetComputerNameA" (ByVal lpBuffer As String, nSize As Long) As Long
Private Declare Function GetUserName Lib "advapi32.dll" Alias "GetUserNameA" (ByVal lpBuffer As String, nSize As Long) As Long
'Private Declare Function GetUserName Lib "kernel32" Alias "GetUserNameA" (ByVal lpBuffer As String, nSize As Long) As Long

'Posición de columnas dentro de la matríz de Balance general
Private Const BAL_IDCUENTA = 0
Private Const BAL_CODCUENTA = 1
Private Const BAL_NOMBRECUENTA = 2
Private Const BAL_CODSUCURSAL = 3       'JEAA
Private Const BAL_VALOR = 4
Private Const BAL_VALMODPRESUPUESTO = 9

Private Const BAL_VALPRESUPUESTO = 9
Private Const BAL_VALREFORMA1 = 10
Private Const BAL_VALREFORMA2 = 11
Private Const BAL_VALREFORMA3 = 12
Private Const BAL_VALREFORMA4 = 13
Private Const BAL_VALSALDO = 14
Private Const BAL_VALPRESUP_COMP = 15
Private Const BAL_P_COMP = 16
Private Const BAL_VALPRESUP_EJEC = 17
Private Const BAL_P_EJEC = 18
Private Const BAL_COMP_EJEC = 19

Private Const BAL_SALDOLPRESUP = 20
Private Const BAL_PSALDOLPRESUP = 21
Private Const BAL_SALDOLPRESUP_EJEC = 22
Private Const BAL_PSALDOLPRESUP_EJEC = 23

'********* egresos presupuesto

Private Const BAL_E_VALSALDO = 10
Private Const BAL_E_VALPRESUP_COMP = 11
Private Const BAL_E_VALPRESUP_EJEC = 12
Private Const BAL_E_VALPRESUP_PAGO = 13
Private Const BAL_E_SALDOLPRESUP_COMP = 14
Private Const BAL_E_SALDOLPRESUP_EJEC = 15

Private Const BAL_NIVEL = 5
Private Const BAL_IDPADRE = 6
Private Const BAL_TIPO = 7
Private Const BAL_BANDTOTAL = 8

Private Type T_PROPS
    CodEmpresa As String
    Descripcion As String
    TipoDB As Byte
    Ruta As String
    NombreDB As String
    Server As String
    Device As String
    UserName As String
    Password As String
    LimiteParaCompactar As Integer      'Límite de # de LOGIN para auto compactación
    fechagrabado As Date
    objSiiMain As SiiMain
    objGNOpcion As GNOpcion
    ObjEmp2 As Empresa2
End Type

Private mProps As T_PROPS
Private mbooEsNuevo As Boolean
Private mbooModificado As Boolean
Private mbooCompact As Boolean
Public mbooBandPorCobrar As Boolean

#If DAOLIB Then
    Private mdbEmpresa As DAO.Database
#Else
    Private mcnEmpresa As ADODB.Connection
    Private mcnEmpresaSuc As ADODB.Connection
    Private mcnEmpresaConfigRep As ADODB.Connection
#End If

Event Refresh(Tipo As Integer)
Event Procesando(ByVal msg As String, ByRef Cancel As Boolean)      '*** MAKOTO 26/dic/00 Agregado

Public Sub Grabar()
    Dim sql As String, i As Long, archi As String, rs As Recordset
    On Error GoTo ErrTrap
    
    'Si no está modificado no hace nada
    If Not mbooModificado Then Exit Sub
    
#If DAOLIB Then
    gobjWS.BeginTrans                   '===== Comienza la transacción
#Else
    gobjMain.Coneccion.BeginTrans       '===== Comienza la transacción
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseServer
#End If

    'Si es nueva
    If mbooEsNuevo Then
        'Verifica si no repite el código
        sql = "SELECT CodEmpresa FROM Empresa WHERE CodEmpresa='" & CodEmpresa & "'"
#If DAOLIB Then
        Set rs = gobjMain.Database.OpenRecordset(sql, dbOpenSnapshot, dbReadOnly)
#Else
        rs.Open sql, gobjMain.Coneccion, adOpenStatic, adLockReadOnly
#End If
        If Not rs.EOF Then      'Si ya existe el codigo
            Err.Raise ERR_REPITECODIGO, "Empresa_Grabar", MSGERR_REPITECODIGO
        End If
        rs.Close
        
        sql = "SELECT * FROM Empresa WHERE 1=0"
#If DAOLIB Then
        Set rs = gobjMain.Database.OpenRecordset(sql)
#Else
        rs.Open sql, gobjMain.Coneccion, adOpenKeyset, adLockPessimistic
#End If
        rs.AddNew
    
    'Si es modificada
    Else
        'Recupera el registro correspondiente para modificar
        sql = "SELECT * FROM Empresa WHERE CodEmpresa='" & CodEmpresa & "'"
#If DAOLIB Then
        Set rs = gobjMain.Database.OpenRecordset(sql)
        rs.Edit
#Else
        rs.Open sql, gobjMain.Coneccion, adOpenKeyset, adLockPessimistic
#End If
        
        'Verifica la FechaGrabado para asegurar que otros usuarios no ha modificado el mismo registro
        If rs!fechagrabado <> mProps.fechagrabado Then
            Err.Raise ERR_MODIFICADO, "Empresa_Grabar", MSGERR_MODIFICADO
        End If
    End If

    'Graba la empresa
    With rs
        !CodEmpresa = CodEmpresa
        !Descripcion = Descripcion
        !TipoDB = TipoDB
        !Ruta = Ruta
        !NombreDB = NombreDB
        !Server = Server
        !Device = Device
        !UserName = UserName
        !Password = CifrarTexto(Password, "Empresa")         '*** MAKOTO 14/sep/00 Cifrar
        !fechagrabado = Now
        .Update
#If DAOLIB Then
        rs.Bookmark = rs.LastModified
#End If
        rs.Move 0   'Para actualizar
        mProps.fechagrabado = !fechagrabado
        .Close
    End With
    
    'Si es nueva, crea la base de dato de la empresa
    If mbooEsNuevo Then
        'Si el tipo es de Jet
        If mProps.TipoDB = TIPODB_JET Then
            archi = Ruta & NombreDB & ".mdb"
            If ExisteArchivo(archi) Then
                Err.Raise ERR_INVALIDO, "Empresa_Grabar", _
                           "No se puede crear la empresa debido a que ya existe un archivo con el mismo nombre." & vbCr & _
                           "Cambie nombre o ruta e intente de nuevo."
            End If
        
            'Copia del archivo modelo ('NOMBREDB_ORIGEN') al archivo nuevo
            FileCopy mProps.objSiiMain.Ruta & NOMBREDB_ORIGEN_JET, archi
        
        'Si el tipo es de SQLSvr
        Else
'            CreaEmpresaEnSQLSvr        'Está llamando desde UI (SiiConfig) directamente
        End If
    End If
    
#If DAOLIB Then
    gobjWS.CommitTrans                  '===== Completa la transacción
#Else
    gobjMain.Coneccion.CommitTrans      '===== Completa la transacción
#End If
    
    RaiseEvent Refresh(REFRESH_EMPRESA)
    Set rs = Nothing
    mbooEsNuevo = False
    mbooModificado = False
    Exit Sub

ErrTrap:

#If DAOLIB Then
    gobjWS.Rollback                      '===== Completa la transacción
#Else
    gobjMain.Coneccion.RollbackTrans     '===== Completa la transacción
#End If
    
    Err.Raise Err.Number, Err.Source, Err.Description
    Exit Sub
End Sub

'Forza que genere e evento Refresh
'(Para generar desde otros objetos)
Public Sub RaiseRefreshEvent(Tipo As Integer)
    RaiseEvent Refresh(Tipo)
End Sub

Public Sub CreaEmpresaEnSQLSvr()
    Dim s As String, sql As String, numReg As Long, Cancel As Boolean
    On Error GoTo ErrTrap
    
    'Verifica si tiene permiso de Supervisor
    If Not gobjMain.UsuarioActual.BandSupervisor Then
        Err.Raise ERR_NODERECHO, "Empresa.CreaEmpresa", MSGERR_NODERECHO
    End If
    
#If DAOLIB Then
    Debug.Assert True
#Else
    RaiseEvent Procesando("Está creándo la base de datos...", Cancel)
    DoEvents
    If Cancel Then Exit Sub
    
    'Cambia la BD actual a 'master'
    sql = "use master"
    gobjMain.Coneccion.Execute sql
    
    'Crear B.D. hasta 1.8 GB
    sql = "CREATE DATABASE [" & Me.NombreDB & "]  " & _
          "ON PRIMARY (" & _
                    "Name = N'" & Me.NombreDB & "_Datos'," & _
                    "FileName = N'" & Ruta & Me.NombreDB & "_Datos.MDF' ," & _
                    "SIZE = 6, MAXSIZE = 1843200KB, " & _
                    "FILEGROWTH = 10" & _
                    ") " & _
          "LOG ON (" & _
                    "Name = N'" & Me.NombreDB & "_Registro'," & _
                    "FileName = N'" & Me.Ruta & Me.NombreDB & "_Registro.LDF' ," & _
                    "SIZE = 6, MAXSIZE = 1843200KB, " & _
                    "FILEGROWTH = 10" & _
                    ")"
    gobjMain.Coneccion.Execute sql
    
    'Cambia la base actual a la base SiiMain
    sql = "use [" & gobjMain.NombreDBSQL & "]"
    gobjMain.Coneccion.Execute sql
    
    
    'Ejecuta las consultas para crear tablas/vistas/procs etc
    AbrirSoloConeccion
    EjecutarSQL "PROC:Creación inicial", numReg
    CerrarSoloConeccion
#End If
    Exit Sub
ErrTrap:
    If Err.Number = -2147217900 Then
        MsgBox Err.Description
        Resume Next
    Else
        Err.Raise Err.Number, Err.Source, Err.Description, Err.HelpFile, Err.HelpContext
    End If
End Sub

Friend Sub Recuperar()
    Dim sql As String, rs As Recordset
    
    sql = "SELECT * FROM Empresa WHERE CodEmpresa='" & CodEmpresa & "'"
#If DAOLIB Then
    Set rs = gobjMain.Database.OpenRecordset(sql, dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    rs.Open sql, gobjMain.Coneccion, adOpenStatic, adLockReadOnly
#End If

    'Recupera los datos de Usuario
    With rs
        If Not IsNull(!CodEmpresa) Then mProps.CodEmpresa = !CodEmpresa
        If Not IsNull(!Descripcion) Then mProps.Descripcion = !Descripcion
        If Not IsNull(!TipoDB) Then mProps.TipoDB = !TipoDB
        If Not IsNull(!Ruta) Then mProps.Ruta = !Ruta
        If Not IsNull(!NombreDB) Then mProps.NombreDB = !NombreDB
        If Not IsNull(!Server) Then mProps.Server = !Server
        If Not IsNull(!Device) Then mProps.Device = !Device
        If Not IsNull(!UserName) Then mProps.UserName = !UserName
        If Not IsNull(!Password) Then mProps.Password = DecifrarTexto(!Password, "Empresa")   '*** MAKOTO 14/sep/00 Decifrar
        mProps.fechagrabado = !fechagrabado
        .Close
    End With
    
    Set rs = Nothing
    mbooEsNuevo = False
    mbooModificado = False
End Sub

Public Sub Eliminar(EliminaBase As Boolean)
    Dim sql As String

    'Si no tiene derecho de supervisor, no puede hacer
    If Not gobjUsuarioActual.BandSupervisor Then
        Err.Raise ERR_NODERECHO, "Empresa_Eliminar", MSGERR_NODERECHO
    End If
    
    'Elimina los permisos sobre la empresa
    sql = "DELETE FROM Permiso WHERE CodEmpresa='" & CodEmpresa & "'"
#If DAOLIB Then
    gobjMain.Database.Execute sql, dbFailOnError
#Else
    gobjMain.Coneccion.Execute sql
#End If
    
    'Elimina el registro de la empresa en la base principal
    sql = "DELETE FROM Empresa WHERE CodEmpresa='" & CodEmpresa & "'"
#If DAOLIB Then
    gobjMain.Database.Execute sql, dbFailOnError
#Else
    gobjMain.Coneccion.Execute sql
#End If
    
    If EliminaBase Then
        'Elimina la base de datos
        If mProps.TipoDB = TIPODB_JET Then
            Kill mProps.Ruta & mProps.NombreDB & ".mdb"
        Else
#If DAOLIB Then
    Debug.Assert True
#Else
            gobjMain.Coneccion.DefaultDatabase = "master"
            sql = "drop database " & mProps.NombreDB
            gobjMain.Coneccion.Execute sql
            gobjMain.Coneccion.DefaultDatabase = mProps.objSiiMain.NombreDBSQL
#End If
        End If
    End If

    mbooEsNuevo = True
    mbooModificado = True
End Sub

Public Function Clone() As Empresa
    Dim nuevo As Empresa
    
    'Copia las propiedades de Usuario al nuevo objeto
    Set nuevo = New Empresa
    nuevo.Props = mProps
    
    Set Clone = nuevo
    Set nuevo = Nothing
End Function

Friend Property Let Props(value As T_PROPS)         'Para el método Clone
    mProps = value
    mbooModificado = True
End Property

#If DAOLIB Then
Public Property Get Database() As DAO.Database
    Set Database = mdbEmpresa
End Property
#Else
Public Property Get Coneccion() As ADODB.Connection
    Set Coneccion = mcnEmpresa
End Property
#End If

'Encapsula la diferencia de OpenRecordset(DAO) y rs.Open(ADO)
'Esta sirve solo para lectura
Public Function OpenRecordset(ByVal sql As String) As Recordset
#If DAOLIB Then
    Set OpenRecordset = mdbEmpresa.OpenRecordset(sql, dbOpenSnapshot, dbReadOnly)
#Else
    Dim rs As Recordset
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    'Modificado 17/07/2001 OLIVER
    'Pruebas de compilacion
    mcnEmpresa.CommandTimeout = GetSetting(APPNAME, SECTION, "TimeOut", 0)
    rs.Open sql, mcnEmpresa, adOpenStatic, adLockReadOnly
    
    Set OpenRecordset = rs
    Set rs = Nothing
#End If
End Function

'Encapsula la diferencia de OpenRecordset(DAO) y rs.Open(ADO)
'Esta sirve para hacer Edit/AddNew después
Public Function OpenRecordsetParaEdit(ByVal sql As String) As Recordset
#If DAOLIB Then
    Set OpenRecordsetParaEdit = mdbEmpresa.OpenRecordset(sql)
#Else
    Dim rs As ADODB.Recordset
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseServer
    rs.Open sql, mcnEmpresa, adOpenKeyset, adLockPessimistic
    Set OpenRecordsetParaEdit = rs
    Set rs = Nothing
#End If

End Function

'Encapsula la diferencia del metodo Execute de DAO y ADO
Public Sub Execute( _
                ByVal sql As String, _
                Optional ByVal FailOnError As Boolean, _
                Optional ByRef numReg As Long) 'AUC cambiado public por friend
#If DAOLIB Then
    If FailOnError Then
        mdbEmpresa.Execute sql, dbFailOnError
    Else
        mdbEmpresa.Execute sql
    End If
#Else
    mcnEmpresa.Execute sql, numReg
#End If
End Sub

Public Sub Abrir()
    Dim s As String
    
    '*** MAKOTO 22/dic/00
    AbrirSoloConeccion

    'Asigna a la variable global
    Set gobjEmpresaActual = Me
    'Graba un registro en GNLogAccion
    GrabaGNLogAccion "LOGIN", "", "GN"
    
    'Graba en el registro de sistema para recuperar cuando inicia de nuevo
    SaveSetting APPNAME, SECTION, "Empresa_Anterior", mProps.CodEmpresa
End Sub

'*** MAKOTO 22/dic/00 Agregado
Friend Sub AbrirSoloConeccion()
    Dim s As String
    
#If DAOLIB Then
    Set mdbEmpresa = DBEngine.Workspaces(0).OpenDatabase( _
                        mProps.Ruta & mProps.NombreDB & ".mdb", _
                        False, False, _
                        ";UID=" & mProps.UserName & _
                        ";pwd=" & mProps.Password)
#Else
    'Prepara la cadena de coneccion
    If mProps.TipoDB = TIPODB_JET Then
        s = CADENA_CONECCION_JET & mProps.Ruta & mProps.NombreDB & ".mdb"
    Else
        s = CADENA_CONECCION_SQL & _
            "Initial Catalog=" & mProps.NombreDB & ";Data Source=" & mProps.Server
            
            
            
            
    End If

    'Establece la conección con la base de la empresa
    mcnEmpresa.Open s, mProps.UserName, mProps.Password
#End If
End Sub

Public Sub Cerrar()
    Dim bandCompact As Boolean
#If DAOLIB Then
    If Not mdbEmpresa Is Nothing Then
    
#Else
    If mcnEmpresa.State <> adStateClosed Then
#End If
        'Graba un registro en GNLogAccion
        
    
        GrabaGNLogAccion "LOGOUT", "", "GN"
        mbooCompact = NecesarioCompactar        'Para compactar en Class_Terminate
        
        'Cierra la conección con la empresa
#If DAOLIB Then
        On Error Resume Next
        mdbEmpresa.Close
        Set mdbEmpresa = Nothing
        Err.Clear
        On Error GoTo 0
        
#Else
        mcnEmpresa.Close
#End If
        
        If gobjEmpresaActual Is Me Then
            'Asigna a Nothing la variable global
            Set gobjEmpresaActual = Nothing
        End If
        
    End If
    Set mProps.objSiiMain = Nothing
End Sub

Friend Sub CerrarSoloConeccion()
#If DAOLIB Then
    If Not mdbEmpresa Is Nothing Then
#Else
    If mcnEmpresa.State <> adStateClosed Then
#End If
        'Cierra la conección con la empresa
#If DAOLIB Then
        On Error Resume Next
        mdbEmpresa.Close
        Set mdbEmpresa = Nothing
        Err.Clear
        On Error GoTo 0
        
#Else
        mcnEmpresa.Close
#End If
    End If
End Sub

Public Function NecesarioCompactar() As Boolean
    Dim sql As String, maxid As Long
    
#If DAOLIB Then
    Dim rs  As DAO.Recordset
    
    'Obtiene Id de la última compactación
    sql = "SELECT Max(Id) AS MaxID FROM GNLogAccion WHERE CodAccion='COMPACT'"
    Set rs = mdbEmpresa.OpenRecordset(sql, dbOpenSnapshot, dbReadOnly)
    If Not rs.EOF Then
        If Not IsNull(rs!maxid) Then maxid = rs!maxid
    End If
    
    'Obtiene # de LOGIN desde la última compactación
    sql = "SELECT Count(CodAccion) AS Cnt FROM GNLogAccion " & _
          "WHERE CodAccion='LOGIN' AND Id>" & maxid
    Set rs = mdbEmpresa.OpenRecordset(sql, dbOpenSnapshot, dbReadOnly)
    If Not rs.EOF Then
        If Not IsNull(rs!cnt) Then
            NecesarioCompactar = (rs!cnt > mProps.LimiteParaCompactar)
        End If
    End If
#Else
    'no hace nada
#End If
End Function

Public Sub Compactar()
    Dim tmp As String, Base As String, cnt As Integer
#If DAOLIB Then
    If Not mdbEmpresa Is Nothing Then
        Err.Raise ERR_INVALIDO, "Empresa_Compactar", _
                    "No se puede compactar la base mientras está abierta."
    End If
    
    tmp = NOMBREDB_TEMP & "comp.mdb"
    Base = mProps.Ruta & mProps.NombreDB & ".mdb"
    
    'Elimina el archivo temporal si existe
    On Error Resume Next
    Kill tmp
    Err.Clear
    On Error GoTo ErrTrap
    
    'Repara y compacta el archivo de base
'    DBEngine.RepairDatabase base       '(En DAO3.6 no existe.)
    DBEngine.CompactDatabase Base, tmp, _
        ";pwd=" & mProps.Password, , ";pwd=" & mProps.Password
     
    'Copia de archivo temporal al archivo original
    FileCopy tmp, Base
    Kill tmp
    
    'Graba la acción 'COMPACT' en GNLogAccion
'    Set mdbEmpresa = gobjWS.OpenDatabase(base)     '*** MAKOTO 03/oct/00 Modificado para que envie Password
    Set mdbEmpresa = DBEngine.Workspaces(0).OpenDatabase( _
                        Base, False, False, _
                        ";UID=" & mProps.UserName & ";pwd=" & mProps.Password)
    GrabaGNLogAccion "COMPACT", "", "GN"
    mdbEmpresa.Close
    Set mdbEmpresa = Nothing
#Else
#End If
    Exit Sub
ErrTrap:
    If cnt < 10 Then
        cnt = cnt + 1
        Resume
    End If
    If Err.Number = 3356 Then
'        MsgBox "El programa intentó compactar la base para liberar espacio " & _
'               "sin embargo no pudo completar el proceso debido a que la base " & _
'               "de datos está abierta por otro usuario." & vbCr & _
'               "Lo intentará de nuevo en la proxima vez que cierre el programa.", vbInformation
        Exit Sub
    Else
'        Err.Raise Err.Number, Err.Source, Err.Description  '*** MAKOTO 03/oct/00 Modificado
        cnt = 0                                             '***
        Resume Next                                         '***
    End If
    Exit Sub
End Sub

    Public Function ListaGNTrans( _
                        Modulo As String, _
                        BandInvisibles As Boolean, _
                        BandRS As Boolean) As Variant
        Dim sql As String, cond As String, rs As Recordset
        
        sql = "SELECT CodTrans, NombreTrans FROM GNTrans "
        
        If Len(Modulo) > 0 Then cond = cond & "Modulo='" & Modulo & "' "
        If Not BandInvisibles Then
            If Len(cond) > 0 Then cond = cond & " AND "
            cond = cond & "BandVisible=" & CadenaBool(True, TipoDB)
        End If
        
        If Len(cond) > 0 Then sql = sql & "WHERE " & cond
        sql = sql & " ORDER BY CodTrans"
        Set rs = Me.OpenRecordset(sql)
        
        If BandRS Then
            Set ListaGNTrans = rs
        Else
            ListaGNTrans = MiGetRows(rs)
            rs.Close
        End If
        Set rs = Nothing
    End Function


Public Function ListaGNConsCentro(BandRS As Boolean) As Variant
    Dim sql As String, cond As String, rs As Recordset
    
    sql = "SELECT * FROM vwConsGNCentro"
    
    If Len(cond) > 0 Then sql = sql & "WHERE " & cond
    sql = sql & " ORDER BY TransID"
    Set rs = Me.OpenRecordset(sql)
    
    If BandRS Then
        Set ListaGNConsCentro = rs
    Else
        ListaGNConsCentro = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function



Public Function ListaGNResponsable(BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    

    sql = "SELECT CodResponsable,Nombre,BandValida FROM GNResponsable "

    sql = sql & " ORDER BY CodResponsable"

    Set rs = Me.OpenRecordset(sql)
    
    If BandRS Then
        Set ListaGNResponsable = rs
    Else
        ListaGNResponsable = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaCTLocal(BandRS As Boolean, bandResumido As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodLocal,Nombre FROM CTLocal "
    If bandResumido Then
        sql = "SELECT CodLocal,Nombre FROM CTLocal "
    Else
        sql = "SELECT idlocal,CodLocal,Nombre FROM CTLocal "
    End If
    sql = sql & " ORDER BY CodLocal"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaCTLocal = rs
    Else
        ListaCTLocal = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


Public Function ListaCTCuenta(IncluyeTotal As Boolean, TipoCuenta As Integer, bandResumido As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, cond As String
    Dim rs As Recordset
    
    If bandResumido Then
        sql = "SELECT CodCuenta, NombreCuenta FROM CTCuenta "
    Else
        sql = "SELECT CodCuenta, NombreCuenta, Nivel, CodCuentaSuma, TipoCuenta, BandTotal FROM vwCTCuenta "
    End If
    
    If TipoCuenta <> 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "TipoCuenta=" & TipoCuenta & " "
    End If
    If Not IncluyeTotal Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "BandTotal=" & CadenaBool(False, TipoDB)
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    
    sql = sql & " ORDER BY CodCuenta"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaCTCuenta = rs
    Else
        ListaCTCuenta = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

'*** MAKOTO 20/dic/00 Agregado para poder seleccionar varios tipos de cuenta
Public Function ListaCTCuenta2( _
                    ByVal IncluyeTotal As Boolean, _
                    ByVal TipoCuenta As E_SIITIPOCUENTA, _
                    ByVal bandResumido As Boolean, _
                    ByVal BandRS As Boolean) As Variant
    Dim sql As String, cond As String, s As String, i As Long
    Dim rs As Recordset
    
    If bandResumido Then
        sql = "SELECT CodCuenta, NombreCuenta FROM CTCuenta "
    Else
        sql = "SELECT CodCuenta, NombreCuenta, Nivel, CodCuentaSuma, TipoCuenta, BandTotal FROM vwCTCuenta "
    End If
    
    If TipoCuenta <> sictTODOS Then
        If Len(cond) > 0 Then cond = cond & " AND "
        
        For i = 1 To 5
            If (TipoCuenta And 2 ^ (i - 1)) <> 0 Then
                If Len(s) > 0 Then s = s & " OR "
                s = s & "TipoCuenta=" & i
            End If
        Next i
            
        cond = cond & "(" & s & ")"
    End If
    
    If Not IncluyeTotal Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(BandTotal=" & CadenaBool(False, TipoDB) & ")"
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    
    sql = sql & " ORDER BY CodCuenta"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaCTCuenta2 = rs
    Else
        ListaCTCuenta2 = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


'Devuelve Array de Variant para directamente mandar a FlexCombo
Public Function ListaCTCuentaParaCombo(IncluyeTotal As Boolean, TipoCuenta As Integer) As Variant
    Dim sql As String, cond As String
    Dim rs As Recordset
    
    sql = "SELECT CodCuenta, CodCuenta+'  '+NombreCuenta AS Cuenta FROM CTCuenta "
    If TipoCuenta <> 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "TipoCuenta=" & TipoCuenta & " "
    End If
    If Not IncluyeTotal Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "BandTotal=" & CadenaBool(False, TipoDB)
    End If
    sql = sql & " where bandvalida=1"
    If Len(cond) > 0 Then sql = sql & " and " & cond
    'ANULADO JEAA 01/12/2005 filtra solo las validas  If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    
    sql = sql & " ORDER BY CodCuenta"
    Set rs = Me.OpenRecordset(sql)
    ListaCTCuentaParaCombo = MiGetRows(rs)
    rs.Close
    Set rs = Nothing
End Function

'Devuelve una cadena para asignar a ListCombo de vsFlexGrid
Public Function ListaCTCuentaParaFlexGrid(TipoCuenta As Integer) As String
    Dim sql As String, cad As String, rs As Recordset
    
    sql = "SELECT Codigo, Nombre FROM vwCTCuentaParaCombo WHERE bandvalida=1 "
    If TipoCuenta > 0 Then sql = sql & " and TipoCuenta=" & TipoCuenta
    'jeaa 01/12/2005
'    sql = "SELECT Codigo, Nombre FROM vwCTCuentaParaCombo"
'    If TipoCuenta > 0 Then sql = sql & " WHERE TipoCuenta=" & TipoCuenta
    sql = sql & " ORDER BY Codigo"
    Set rs = Me.OpenRecordset(sql)

    'Pero por ahora uso lo siguiente para controlar cuentas de total y de movimiento
#If DAOLIB Then
    cad = "|" & GetStringDAO(rs, 21 + (20 + 80 + 2))        'Código+'*'=21, Space+NombreCuenta+'[]'=20+80+2
#Else
    If Not rs.EOF Then cad = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    
    rs.Close
    Set rs = Nothing
    
    ListaCTCuentaParaFlexGrid = cad
End Function




Public Function ListaCTPresupuesto(CodCuenta1 As String, CodCuenta2 As String, Anio As Integer, mes As Integer) As Variant
End Function



Public Function ListaGNCentroCosto(BandSoloValida As Boolean, BandDetallado As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
    If BandDetallado Then
        '*** MAKOTO 14/feb/01 Mod. aumentado Nombre
        sql = "SELECT CodCentro, Nombre, Descripcion, FechaInicio,FechaFinal,FechaEntrega,IdCentro FROM GNCentroCosto "
    Else
        sql = "SELECT CodCentro, Nombre, Descripcion FROM GNCentroCosto "
    End If
    
    If BandSoloValida Then sql = sql & "WHERE FechaFinal Is Null "
    sql = sql & " ORDER BY CodCentro"

    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaGNCentroCosto = rs
    Else
        ListaGNCentroCosto = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

'*** MAKOTO 16/feb/01 Agregado
'Para que salga nombre y descripción juntos para Visualizar en FlexCombo
Public Function ListaGNCentroCosto2(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
#If DAOLIB Then
    sql = "SELECT CodCentro, " & _
                "IIF((Nombre Is NULL) OR (Len(Nombre)=0), Descripcion, " & _
                "Nombre + ' ' + Descripcion) AS Descripcion " & _
          "FROM GNCentroCosto "
#Else
    sql = "SELECT CodCentro, " & _
                "CASE WHEN (Nombre Is NULL) OR Len(Nombre)=0 THEN Descripcion " & _
                "  ELSE Nombre + ' ' + Descripcion " & _
                "END AS Descripcion " & _
          "FROM GNCentroCosto "
#End If
    If BandSoloValida Then sql = sql & "WHERE FechaFinal Is Null "
    sql = sql & " ORDER BY CodCentro"

    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaGNCentroCosto2 = rs
    Else
        ListaGNCentroCosto2 = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


Public Function ListaGNMoneda() As Variant
    Dim sql As String, v() As Variant, i As Integer, j As Integer
    
    For i = 1 To 4
        If Len(Me.GNOpcion.CodMoneda(i)) > 0 Then
            ReDim Preserve v(1, j)
            v(0, j) = Me.GNOpcion.CodMoneda(i)
            v(1, j) = Me.GNOpcion.NombreMoneda(i)
            j = j + 1
        End If
    Next i
    ListaGNMoneda = v
End Function



Public Function ListaTSBanco(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
    sql = "SELECT CodBanco,Descripcion FROM TSBanco "
    If BandSoloValida Then
        sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY CodBanco"

    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaTSBanco = rs
    Else
        ListaTSBanco = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

'*** MAKOTO 07/feb/01 Agregado
Public Function ListaTSRetencion(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
    sql = "SELECT t.CodRetencion, t.Descripcion, t.porcentaje*100 , case when bandiva=0 THEN a.codretencion ELSE aIVA.codretencion End as CodRetSRI,"
    sql = sql & " case when bandiva=0 then 'RENTA' else 'IVA' end as Bandiva"
    sql = sql & " from TSRetencion  t left join anexos_retencion_IR a on T.idanexo = a.id"
    sql = sql & " left join anexos_retencion_IVA aIVA on T.idanexo = aIVA.id "
    If BandSoloValida Then sql = sql & " WHERE t.BandValida=" & CadenaBool(True, TipoDB)
    sql = sql & " ORDER BY t.CodRetencion"

    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaTSRetencion = rs
    Else
        ListaTSRetencion = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaTSTipoDocBanco(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
    sql = "SELECT CodTipoDoc,Descripcion FROM TSTipoDocBanco "
    If BandSoloValida Then
        sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY CodTipoDoc "

    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaTSTipoDocBanco = rs
    Else
        ListaTSTipoDocBanco = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaIVInventario(CodInventario As String, _
                                  CodAlterno As String, _
                                  Descripcion As String, _
                                  CodBodega As String, _
                                  BandSoloValida As Boolean, _
                                  BandRS As Boolean) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset
    
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If

    sql = "SELECT CodInventario, Descripcion, CodBodega, Exist, " & _
            "Precio1, Precio2, Precio3, CodGrupo1, CodGrupo2, CodGrupo3," & _
            " CodGrupo4, CodGrupo5, bandvalida FROM vwIVInventario "
    
    If BandSoloValida Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(BandValida=" & CadenaBool(True, TipoDB) & ")"
    End If
    
    If Len(CodInventario) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodInventario LIKE '" & CodInventario & comodin & "') "
    End If
    
    If Len(CodAlterno) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "((CodAlterno1 LIKE '" & CodAlterno & comodin & "') " & _
                      "OR (CodAlterno2 LIKE '" & CodAlterno & comodin & "')) "
    End If
    
    If Len(Descripcion) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(Descripcion LIKE '" & Descripcion & comodin & "') "
    End If
    
    If Len(CodBodega) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodBodega='" & CodBodega & "') "
    End If
    
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " ORDER BY CodInventario,CodBodega "
    
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVInventario = rs
    Else
        ListaIVInventario = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaIVInventario2(CodInventario As String, _
                                  CodAlterno As String, _
                                  Descripcion As String, _
                                  CodBodega As String, _
                                  CodGrupo() As String, _
                                  BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset, i As Integer
    
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If

    sql = "SELECT CodInventario, CodAlterno1, Descripcion, Observacion, CodBodega, Exist, " & _
            "Precio1, Precio2, Precio3, CodGrupo1, CodGrupo2, CodGrupo3," & _
            " CodGrupo4, CodGrupo5, Tipo, bandvalida FROM vwIVInventario "
    
    If BandSoloValida Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(BandValida=" & CadenaBool(True, TipoDB) & ")"
    End If
    
    If Len(CodInventario) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodInventario LIKE '" & CodInventario & comodin & "') "
    End If
    
    If Len(CodAlterno) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "((CodAlterno1 LIKE '" & CodAlterno & comodin & "') " & _
                      "OR (CodAlterno2 LIKE '" & CodAlterno & comodin & "')) "
    End If
    
    If Len(Descripcion) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(Descripcion LIKE '" & Descripcion & comodin & "') "
    End If
    
    If Len(CodBodega) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodBodega='" & CodBodega & "') "
    End If
    
    For i = LBound(CodGrupo) To UBound(CodGrupo)
        If Len(CodGrupo(i)) > 0 Then
            If Len(cond) > 0 Then cond = cond & "AND "
'            cond = cond & "(CodGrupo" & i & " LIKE '" & CodGrupo(i) & comodin & "') "
            cond = cond & "(CodGrupo" & i & " = '" & CodGrupo(i) & "') "
        End If
    Next i
    
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " ORDER BY CodInventario,CodBodega "
    
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVInventario2 = rs
    Else
        ListaIVInventario2 = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


Public Function ListaIVCodAlterno(CodInventario As String, _
                                  CodAlterno As String, _
                                  Descripcion As String, _
                                  CodBodega As String, _
                                  BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset
    
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If

    sql = "SELECT CodInventario, CodAlterno1, CodAlterno2, Descripcion " & _
          "FROM IVInventario "
          
    If BandSoloValida Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(BandValida=" & CadenaBool(True, TipoDB) & ")"
    End If
    
    If Len(CodInventario) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodInventario LIKE '" & CodInventario & comodin & "') "
    End If
    
    If Len(CodAlterno) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "((CodAlterno1 LIKE '" & CodAlterno & comodin & "') " & _
                      "OR (CodAlterno2 LIKE '" & CodAlterno & comodin & "')) "
    End If
    
    If Len(Descripcion) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(Descripcion LIKE '" & Descripcion & comodin & "') "
    End If

'*** Parametro CodBodega NO tiene efecto porque en la tabla IVInventario no hay CodBodega
'    If Len(CodBodega) > 0 Then
'        If Len(cond) > 0 Then cond = cond & "AND "
'        cond = cond & "(CodBodega='" & CodBodega & "') "
'    End If
    
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " ORDER BY CodInventario,CodAlterno1,CodAlterno2 "
    
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVCodAlterno = rs
    Else
        ListaIVCodAlterno = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function



Public Function ListaIVInventarioSimple() As Variant
    Dim sql As String, rs As Recordset
    
    sql = "SELECT CodInventario, Descripcion FROM IVInventario ORDER BY CodInventario"
    
    Set rs = Me.OpenRecordset(sql)
    ListaIVInventarioSimple = MiGetRows(rs)
    rs.Close
    Set rs = Nothing
End Function


Public Function ListaIVInventarioPorRango(ByVal CodItemDesde As String, _
                                          ByVal CodItemHasta As String, _
                                          ByVal CodG1Desde As String, _
                                          ByVal CodG1Hasta As String, _
                                          ByVal CodG2Desde As String, _
                                          ByVal CodG2Hasta As String, _
                                          ByVal CodG3Desde As String, _
                                          ByVal CodG3Hasta As String, _
                                          ByVal CodG4Desde As String, _
                                          ByVal CodG4Hasta As String, _
                                          ByVal CodG5Desde As String, _
                                          ByVal CodG5Hasta As String) As Variant
    Dim sql As String, rs As Recordset, cond As String
    
    If (Len(CodItemDesde) > 0) And (Len(CodItemHasta) > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "CodInventario BETWEEN '" & CodItemDesde & "' AND '" & CodItemHasta & "'"
    End If
    
    If (Len(CodG1Desde) > 0) And (Len(CodG1Hasta) > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "CodGrupo1 BETWEEN '" & CodG1Desde & "' AND '" & CodG1Hasta & "'"
    End If
    
    If (Len(CodG2Desde) > 0) And (Len(CodG2Hasta) > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "CodGrupo2 BETWEEN '" & CodG2Desde & "' AND '" & CodG2Hasta & "'"
    End If
    
    If (Len(CodG3Desde) > 0) And (Len(CodG3Hasta) > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "CodGrupo3 BETWEEN '" & CodG3Desde & "' AND '" & CodG3Hasta & "'"
    End If
    
    If (Len(CodG4Desde) > 0) And (Len(CodG4Hasta) > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "CodGrupo4 BETWEEN '" & CodG4Desde & "' AND '" & CodG4Hasta & "'"
    End If
    
    If (Len(CodG5Desde) > 0) And (Len(CodG5Hasta) > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "CodGrupo5 BETWEEN '" & CodG5Desde & "' AND '" & CodG5Hasta & "'"
    End If
    
    
    sql = "SELECT CodInventario FROM vwIVInventario"
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " ORDER BY CodInventario"
    
    Set rs = Me.OpenRecordset(sql)
    ListaIVInventarioPorRango = MiGetRows(rs)
    rs.Close
    Set rs = Nothing
End Function


Public Function ListaIVItemParaFlex(CodBodega As String, _
                                    CodGrupo1 As String, _
                                    CodGrupo2 As String, _
                                    CodGrupo3 As String, _
                                    CodGrupo4 As String, _
                                    CodGrupo5 As String) As String
    Dim sql As String, cond As String, s As String
    Dim rs As Recordset
    
    sql = "SELECT CodInventario,Descripcion FROM vwIVInventarioRecuperar"
    
'*** CodBodega No tiene efecto
'    If Len(CodBodega) > 0 Then
'        If Len(cond) > 0 Then cond = cond & "AND "
'        cond = cond & "CodBodega ='" & CodBodega & "' "
'    End If
    
    If CodGrupo1 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo1='" & CodGrupo1 & "' "
    End If
    If CodGrupo2 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo2='" & CodGrupo2 & "' "
    End If
    If CodGrupo3 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo3='" & CodGrupo3 & "' "
    End If
    If CodGrupo4 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo4='" & CodGrupo4 & "' "
    End If
    If CodGrupo5 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo5='" & CodGrupo5 & "' "
    End If
    'jeaa 01/12/2005
'    sql = sql & " WHERE  BandValida= 1  "
'    If Len(cond) > 0 Then sql = sql & " and " & cond
'    sql = sql & " ORDER BY CodInventario"
'    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
'    sql = sql & " ORDER BY CodInventario"
        sql = sql & " WHERE  BandValida= 1  and BandVenta= 1  "
    If Len(cond) > 0 Then sql = sql & " and " & cond
    sql = sql & " ORDER BY CodInventario"

    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 20 + 80)     'Código=20, Descripcion=80      '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    
    ListaIVItemParaFlex = s
    rs.Close
    Set rs = Nothing
End Function

'*** MAKOTO 25/ene/01 OJO:Parece que no está utilizado
Public Function ListaIVItemParaFlexFazzy(codItem As String, _
                                      CodGrupo1 As String, _
                                      CodGrupo2 As String, _
                                      CodGrupo3 As String, _
                                      CodGrupo4 As String, _
                                      CodGrupo5 As String) As String
        Dim sql As String, cond As String, s As String
    Dim rs As Recordset
    
    sql = "SELECT DISTINCT CodInventario,Descripcion FROM vwIVInventario "
    If Len(CodGrupo1) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo1='" & CodGrupo1 & "' "
    End If
    If Len(CodGrupo2) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo2='" & CodGrupo2 & "' "
    End If
    If Len(CodGrupo3) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo3='" & CodGrupo3 & "' "
    End If
    If Len(CodGrupo4) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo4='" & CodGrupo4 & "' "
    End If
    If Len(CodGrupo5) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo5='" & CodGrupo5 & "' "
    End If
    
    If Len(codItem) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
#If DAOLIB Then
        cond = cond & "CodInventario LIKE '" & codItem & "*' "
#Else
        cond = cond & "CodInventario LIKE '" & codItem & "%' "
#End If
    End If
        
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " ORDER BY CodInventario"
    
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 20 + 80)
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    
    ListaIVItemParaFlexFazzy = s
    rs.Close
    Set rs = Nothing
End Function

'*** MAKOTO 25/ene/01 OJO:Parece que no está utilizado
Public Function ListaIVCodAlternoParaFlex() As String
    Dim sql As String, cond As String, s As String
    Dim rs As Recordset
    
    sql = "SELECT CodInventario,Descripcion FROM vwIVInventarioRecuperar"
    cond = "((CodAlterno1 Is Not Null) And (CodAlterno1<>'')) "
    
    
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " ORDER BY CodAlterno1, CodInventario"
    
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 20 + 80)
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If

    ListaIVCodAlternoParaFlex = s
    rs.Close
    Set rs = Nothing
End Function



Public Function ListaIVCodAlternoParaFlexPorGrupo(CodGrupo1 As String, _
                                          CodGrupo2 As String, _
                                          CodGrupo3 As String, _
                                          CodGrupo4 As String, _
                                          CodGrupo5 As String) As String
    Dim sql As String, cond As String, s As String
    Dim rs As Recordset
    
    sql = "SELECT CodAlterno1,Descripcion FROM vwIVInventarioRecuperar"
    cond = "((CodAlterno1 Is Not Null) And (CodAlterno1<>'')) "
    
    If CodGrupo1 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo1='" & CodGrupo1 & "' "
    End If
    If CodGrupo2 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo2='" & CodGrupo2 & "' "
    End If
    If CodGrupo3 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo3='" & CodGrupo3 & "' "
    End If
    If CodGrupo4 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo4='" & CodGrupo4 & "' "
    End If
    If CodGrupo5 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo5='" & CodGrupo5 & "' "
    End If
    'jeaa 01/12/2005
    'If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " where bandvalida=1"
    If Len(cond) > 0 Then sql = sql & " and " & cond
    sql = sql & " ORDER BY CodAlterno1, CodInventario"
    
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 20 + 80)     'MAKOTO 25/ene/01
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If

    ListaIVCodAlternoParaFlexPorGrupo = s
    rs.Close
    Set rs = Nothing
End Function


Public Function ListaIVItemDescParaFlex(CodGrupo1 As String, _
                                        CodGrupo2 As String, _
                                        CodGrupo3 As String, _
                                        CodGrupo4 As String, _
                                        CodGrupo5 As String) As String
    Dim sql As String, cond As String, s As String
    Dim rs As Recordset
    
#If DAOLIB Then
    sql = "SELECT Descripcion & ' [' & CodInventario & ']' FROM vwIVInventarioRecuperar"
#Else
    sql = "SELECT Descripcion + ' [' + CodInventario + ']' FROM vwIVInventarioRecuperar"
#End If
    
    If CodGrupo1 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo1='" & CodGrupo1 & "' "
    End If
    If CodGrupo2 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo2='" & CodGrupo2 & "' "
    End If
    If CodGrupo3 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo3='" & CodGrupo3 & "' "
    End If
    If CodGrupo4 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo4='" & CodGrupo4 & "' "
    End If
    If CodGrupo5 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo5='" & CodGrupo5 & "' "
    End If
 'jeaa 01/12/2005
'    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " where bandvalida=1"
    If Len(cond) > 0 Then sql = sql & " and " & cond
   sql = sql & " ORDER BY Descripcion"
    Set rs = Me.OpenRecordset(sql)
    
'**    s = "|"            'Esto era para que sea editable el ComboBox
#If DAOLIB Then
    s = s & GetStringDAO(rs, 80 + 20 + 3)       '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = s & rs.GetString(adClipString, , vbTab, "|")
#End If
    
    ListaIVItemDescParaFlex = s
    rs.Close
    Set rs = Nothing
End Function



Public Function BuscaIVCodAlterno(codalt As String, ByRef s As String) As Long
    Dim sql As String, n As Long
    Dim rs As Recordset
    
    sql = "SELECT CodInventario FROM IVInventario " & _
          "WHERE CodAlterno1='" & codalt & "'"
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        s = rs!CodInventario
        n = rs.RecordCount
    End If
    rs.Close
    Set rs = Nothing
    BuscaIVCodAlterno = n
End Function

'Public Function BuscaIVCodAlterno(codalt As String, ByRef s As String) As Long
'    Dim sql As String, n As Long
'    Dim rs As Recordset
'
'    sql = "SELECT Count(*) AS Num FROM vwIVCodAlterno " & _
'          "WHERE CodAlterno='" & codalt & "'"
'#If DAOLIB Then
'    Set rs = mdbEmpresa.OpenRecordset(sql, dbOpenSnapshot, dbReadOnly)
'#Else
'    Set rs = New ADODB.Recordset
'    rs.CursorLocation = adUseClient
'    rs.Open sql, mcnEmpresa, adOpenStatic, adLockReadOnly
'#End If
'    If Not IsNull(rs!num) Then n = rs!num
'    rs.Close
'
'    If n > 0 Then
'        sql = "SELECT CodAlterno,CodInventario FROM vwIVCodAlterno " & _
'              "WHERE CodAlterno='" & codalt & "'"
'#If DAOLIB Then
'        Set rs = mdbEmpresa.OpenRecordset(sql, dbOpenSnapshot, dbReadOnly)
'#Else
'        rs.Open sql, mcnEmpresa, adOpenStatic, adLockReadOnly
'#End If
'        s = rs!CodInventario
'        rs.Close
'    End If
'    Set rs = Nothing
'    BuscaIVCodAlterno = n
'End Function


Public Function ListaIVBodega(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
    sql = "SELECT CodBodega,Descripcion, codsucursal, ivbodega.BandValida FROM IVBodega left join gnsucursal on ivbodega.idsucursal=gnsucursal.idsucursal"
    If BandSoloValida Then
        sql = sql & " WHERE ivbodega.BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY CodBodega"
    
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVBodega = rs
    Else
        ListaIVBodega = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaIVBodegaParaFlexGrid() As String
    Dim sql As String, s As String
    Dim rs As Recordset
    
    sql = "SELECT CodBodega,Descripcion FROM IVBodega "
    sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    sql = sql & " ORDER BY CodBodega"

    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 10 + 40)         '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|", "(nulo)")
#End If
    ListaIVBodegaParaFlexGrid = s
    rs.Close
    Set rs = Nothing
End Function

Public Function ListaIVGrupo(NumGrupo As Integer, BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodGrupo" & NumGrupo & ",Descripcion FROM IVGrupo" & NumGrupo
    If BandSoloValida Then
        sql = sql & " WHERE BandValida=" & CadenaBool(True, TipoDB)
        sql = sql & " AND BandProduccion= 0"
    Else
        sql = sql & " WHERE BandProduccion= 0"
    End If
    'sql = sql & " ORDER BY CodGrupo" & NumGrupo
    sql = sql & " ORDER BY Descripcion"

    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVGrupo = rs
    Else
        ListaIVGrupo = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function
    
Public Function ListaIVGrupoParaFlexGrid(NumGrupo As Integer) As String
    Dim sql As String, s As String
    Dim rs As Recordset
    sql = "SELECT CodGrupo" & NumGrupo & ",Descripcion FROM IVGrupo" & NumGrupo
    sql = sql & " WHERE BandValida=" & CadenaBool(True, TipoDB)
    sql = sql & " ORDER BY CodGrupo" & NumGrupo
    
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
'    s = "|" & GetStringDAO(rs)         '*** MAKOTO 07/ago/2000 Modificado
    If Not rs.EOF Then s = "|" & GetStringDAO(rs, 20 + 50)      '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|", "(nulo)")
#End If
    ListaIVGrupoParaFlexGrid = s
    rs.Close
    Set rs = Nothing
End Function

Public Function ListaIVGrupoParaFlexGrid2(NumGrupo As Integer, _
                                          CodGrupo1 As String, _
                                          CodGrupo2 As String, _
                                          CodGrupo3 As String, _
                                          CodGrupo4 As String, _
                                          CodGrupo5 As String) As String
    Dim sql As String, s As String, cond As String
    Dim rs As Recordset
    
    sql = "SELECT DISTINCT CodGrupo" & NumGrupo & ",G" & NumGrupo & " FROM vwIVGrupo"
    
    If Len(CodGrupo1) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodGrupo1='" & CodGrupo1 & "') "
    End If
    If Len(CodGrupo2) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodGrupo2='" & CodGrupo2 & "') "
    End If
    If Len(CodGrupo3) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodGrupo3='" & CodGrupo3 & "') "
    End If
    If Len(CodGrupo4) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodGrupo4='" & CodGrupo4 & "') "
    End If
    If Len(CodGrupo5) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodGrupo5='" & CodGrupo5 & "') "
    End If
    
    If Len(cond) > 0 Then sql = sql & " WHERE ( " & cond & " AND (CodGrupo" & NumGrupo & "<>NULL)  ) "
    sql = sql & " ORDER BY CodGrupo" & NumGrupo

    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 20 + 50)         '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|", "(nulo)")
#End If
    ListaIVGrupoParaFlexGrid2 = s
    rs.Close
    Set rs = Nothing
End Function


Public Function ListaIVRecargo(BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
    sql = "SELECT CodRecargo,Descripcion FROM IVRecargo ORDER BY CodRecargo "

    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVRecargo = rs
    Else
        ListaIVRecargo = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaNivelCredito(BandRS As Boolean, NumGrupoControl As Integer) As Variant  'AUC Para cargar los niveles de credito
   Dim sql As String, rs As Recordset
    sql = "SELECT CodGrupo" & NumGrupoControl & " , Descripcion FROM PCGrupo" & NumGrupoControl & "  where BANDVALIDA=1 AND origen =2 ORDER BY CodGrupo" & NumGrupoControl & ""
   Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaNivelCredito = rs
    Else
        ListaNivelCredito = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaTSFormaCobroPago(BandCobro As Boolean, BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodForma,NombreForma FROM TSFormaCobroPago WHERE "
    sql = sql & " BandCobro=" & CadenaBool(BandCobro, TipoDB)
    If BandSoloValida Then sql = sql & " AND BandValida=" & CadenaBool(True, TipoDB)
    sql = sql & " ORDER BY CodForma "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaTSFormaCobroPago = rs
    Else
        ListaTSFormaCobroPago = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function



Public Function ListaTSFormaCobroPagoParaFlex(BandCobro As Boolean) As String
    Dim sql As String, s As String, i As Integer
    Dim rs As Recordset
    
        sql = "SELECT CodForma,NombreForma"
          sql = sql & " FROM TSFormaCobroPago WHERE "
           sql = sql & " BandCobro=" & CadenaBool(BandCobro, TipoDB)
           sql = sql & " AND BandValida=" & CadenaBool(True, TipoDB)
           sql = sql & " ORDER BY CodForma "
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 5 + 20)          '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    ListaTSFormaCobroPagoParaFlex = s
    rs.Close
    Set rs = Nothing
End Function


Public Function ListaTSTipoDocParaFlex(ingreso As Boolean, egreso As Boolean) As String
    Dim sql As String, s As String
    Dim rs As Recordset
    
    sql = "SELECT CodTipoDoc,Descripcion FROM TSTipoDocBanco WHERE "
    sql = sql & " BandValida=" & CadenaBool(True, TipoDB)
    If Not (ingreso And egreso) Then
        If ingreso Then
            sql = sql & " AND UsoEnIngreso=" & CadenaBool(True, TipoDB)
        Else
            sql = sql & " AND UsoEnIngreso=" & CadenaBool(False, TipoDB)
        End If
    End If
    sql = sql & " ORDER BY CodTipoDoc "

    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
'    s = "|" & GetStringDAO(rs)
    s = GetStringDAO(rs, 5 + 20)            '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then
'        s = "|" & rs.GetString(adClipString, , vbTab, "|")
        s = rs.GetString(adClipString, , vbTab, "|")
    End If
#End If
    
    ListaTSTipoDocParaFlex = s
    rs.Close
    Set rs = Nothing
End Function

'***Agregado. 24/mar/2003. Angel
Private Function DesintegridadxCatalogo(IdCuenta As Long) As Recordset
    Dim sql As String, rs As Recordset, numReg As Long, i As Integer
        
    'Para evitar situaciones en las que no hay sido borrada la tabla temporal
    For i = 1 To 3
        VerificaExistenciaTabla i
    Next i
    
    'Busca en el catálogo de IVInventario y devuelve el número de registros
    sql = "SELECT 'IVInventario' AS Tabla, COUNT(CodInventario) AS NumReg " & _
          "INTO tmp1 " & _
          "FROM IVInventario " & _
          "WHERE (IdCuentaActivo = " & IdCuenta & ") Or " & _
                "(IdCuentaCosto = " & IdCuenta & ") Or " & _
                "(IdCuentaVenta = " & IdCuenta & ") " & _
          "HAVING Count(CodInventario) > 0"
    Me.EjecutarSQL sql, numReg

    'Busca en el catálogo de PCProvCli y devuelve el número de registros
    sql = "SELECT 'PCProvCli' AS Tabla, COUNT(CodProvCli) AS NumReg " & _
          "INTO tmp2 " & _
          "FROM PCProvCli " & _
          "WHERE IdCuentaContable = " & IdCuenta & " " & _
          "HAVING Count(CodProvCli) > 0"
    Me.EjecutarSQL sql, numReg

    'Busca en el catálogo de TSBanco y devuelve el número de registros
    sql = "SELECT 'TSBanco' AS Tabla, COUNT(CodBanco) As NumReg " & _
          "INTO tmp3 " & _
          "FROM TSBanco " & _
          "WHERE IdCuentaContable = " & IdCuenta & " " & _
          "HAVING Count(CodBanco) > 0"
    Me.EjecutarSQL sql, numReg
    
    'Realiza la union de tablas a, b, c
    sql = "SELECT Tabla, NumReg FROM tmp1 " & _
          "UNION SELECT Tabla, NumReg FROM tmp2 " & _
          "UNION SELECT Tabla, NumReg FROM tmp3 "
     
    Set rs = Me.OpenRecordset(sql)
    Set DesintegridadxCatalogo = rs
    Set rs = Nothing
    
    'Borra las tablas tmp1,tmp2,tmp3 que se utilizan temporalmente
    sql = "DROP TABLE tmp1 DROP TABLE tmp2 DROP TABLE tmp3"
    Me.EjecutarSQL sql, numReg
End Function

'***Agregado. 26/mar/2003. Angel
Private Function DesintegridadxTransaccion(IdCuenta As Long) As Recordset
    Dim sql As String, rs As Recordset
       
    sql = " SELECT gc.codtrans, gt.NombreTrans, COUNT(gc.codtrans)" & _
          " FROM GNTrans gt INNER JOIN" & _
          "     (GNComprobante gc INNER JOIN " & _
          "         (CTLibroDetalle ctl INNER JOIN CTCuenta ct ON ctl.idcuenta = ct.idcuenta)" & _
          "                       ON gc.CodAsiento=ctl.CodAsiento)" & _
          "                 ON gt.CodTrans=gc.CodTrans" & _
          " WHERE (gc.Estado<>3) AND " & _
                 "(ctl.IdCuenta = " & IdCuenta & ") AND  " & _
                 "(ctl.BandIntegridad NOT IN (" & INTEG_AUTO & "," & INTEG_INTEGRADO & "))" & _
          " GROUP BY gc.CodTrans, gt.NombreTrans" & _
          " ORDER BY gc.CodTrans"
    
    Set rs = Me.OpenRecordset(sql)
    Set DesintegridadxTransaccion = rs
    Set rs = Nothing
End Function

'***Agregado. 24/mar/2003. Angel
'Permite saber que catálogos ó transacciones están trabajando con determinada cuenta contable
Public Function ListaDesintegridad(CodCuenta As String, BandCat_Trans As Boolean, BandRS As Boolean) As Variant
'BandCat_Trans=True --> Busca en Catálogos
'             =False -> Busca en los asientos contables de las diferentes transacciones
    Dim rs As Recordset, rs1 As Recordset, IdCuenta As Long, sql As String
    
    'Busca el id de la cuenta
    sql = "SELECT IdCuenta FROM CTCuenta WHERE codcuenta = '" & CodCuenta & "'"
    Set rs1 = Me.OpenRecordset(sql)
    If Not (rs1.BOF And rs1.EOF) Then
        IdCuenta = rs1!IdCuenta
    Else
        IdCuenta = 0
    End If
    If Not (rs1 Is Nothing) Then rs1.Close
    
    If BandCat_Trans Then
        Set rs = DesintegridadxCatalogo(IdCuenta)
    Else
        Set rs = DesintegridadxTransaccion(IdCuenta)
    End If
    
    If BandRS Then
        Set ListaDesintegridad = rs
    Else
        ListaDesintegridad = MiGetRows(rs)
        rs.Close
    End If
    
    Set rs = Nothing
    Set rs1 = Nothing
End Function

'***Agregado. 31/Mar/2003. Angel
Private Function DetalleDesintegridadxCatalago(IdCuenta As Long, Cod_Cat As String) As Recordset
    Dim sql As String, rs As Recordset
    
    Select Case Cod_Cat
    Case "IV"
        sql = "SELECT CodInventario, Descripcion, IdCuentaActivo, space(0) As CuentaActivo, " & _
              "IdCuentaCosto, space(0) As CuentaCosto, IdCuentaVenta, space(0) As CuentaVenta " & _
              "FROM IVInventario " & _
              "WHERE (IdCuentaActivo = " & IdCuenta & ") Or " & _
              "(IdCuentaCosto = " & IdCuenta & ") Or " & _
              "(IdCuentaVenta = " & IdCuenta & ") " & _
              "ORDER BY CodInventario"
        Set rs = Me.OpenRecordset(sql)
    Case "PC"
        sql = "SELECT CodProvCli, Nombre, IdCuentaContable, space(0) As CuentaContable1, " & _
              "IdCuentaContable2, space(0) As CuentaContable2, " & _
              "(CASE BandCliente " & _
              "WHEN 0 THEN 'Proveedor' " & _
              "WHEN 1 THEN 'Cliente' " & _
              "END) As BandPC " & _
              "FROM PCProvCli " & _
              "WHERE (IdCuentaContable = " & IdCuenta & ") Or " & _
              "(IdCuentaContable2 = " & IdCuenta & ") " & _
              "ORDER BY BandCliente, CodProvCli"
        Set rs = Me.OpenRecordset(sql)
    Case "TS"
        sql = "SELECT tsb.CodBanco, tsb.Descripcion, ct.codcuenta " & _
              "FROM CTCuenta ct INNER JOIN TSBanco tsb ON ct.IdCuenta=tsb.IdCuentaContable " & _
              "WHERE IdCuentaContable = " & IdCuenta & " " & _
              "ORDER BY tsb.codbanco"
        Set rs = Me.OpenRecordset(sql)
    End Select
    
    Set DetalleDesintegridadxCatalago = rs
    Set rs = Nothing
End Function

'***Agregado. 31/Mar/2003. Angel
Private Function DetalleDesintegridadxTransaccion(IdCuenta As Long, cod_trans As String) As Recordset
    Dim sql As String, rs As Recordset
       
    sql = "SELECT (gc.CodTrans+' '+CONVERT(VARCHAR,gc.NumTrans)) AS Trans, gc.FechaTrans, gc.CodAsiento " & _
          "FROM GNComprobante gc INNER JOIN CTLibroDetalle ctl " & _
          "                      ON gc.CodAsiento=ctl.CodAsiento " & _
          "WHERE (gc.Estado<>3) AND " & _
                "(gc.CodTrans = '" & cod_trans & "') AND " & _
                "(ctl.IdCuenta = " & IdCuenta & ") AND  " & _
                "(ctl.BandIntegridad NOT IN (" & INTEG_AUTO & "," & INTEG_INTEGRADO & ")) " & _
          "ORDER BY gc.FechaTrans, gc.HoraTrans"
    
    Set rs = Me.OpenRecordset(sql)
    Set DetalleDesintegridadxTransaccion = rs
    Set rs = Nothing
End Function

'***Agregado. 31/Mar/2003. Angel
'Busca los registros de catálogos ó de transacciones que usen la cuenta que viene
'como parámetro. Para determinar posible problema de desintegridad
Public Function ListaDetalleDesintegridad(CodCuenta As String, CodCat_Trans As String, BandCat_Trans As Boolean, BandRS As Boolean) As Variant
'BandCat_Trans=True --> Busca en Catálogos
'             =False -> Busca en los asientos contables de las diferentes transacciones
    Dim rs As Recordset, rs1 As Recordset, IdCuenta As Long, sql As String
    
    'Busca el id de la cuenta
    sql = "SELECT IdCuenta FROM CTCuenta WHERE codcuenta = '" & CodCuenta & "'"
    Set rs1 = Me.OpenRecordset(sql)
    If Not (rs1.BOF And rs1.EOF) Then
        IdCuenta = rs1!IdCuenta
    Else
        IdCuenta = 0
    End If
    If Not (rs1 Is Nothing) Then rs1.Close
    
    If BandCat_Trans Then
        Set rs = DetalleDesintegridadxCatalago(IdCuenta, CodCat_Trans)
    Else
        Set rs = DetalleDesintegridadxTransaccion(IdCuenta, CodCat_Trans)
    End If
    
    If BandRS Then
        Set ListaDetalleDesintegridad = rs
    Else
        ListaDetalleDesintegridad = MiGetRows(rs)
        rs.Close
    End If
    
    Set rs = Nothing

End Function

Public Function ListaFCVendedor(BandSoloValida As Boolean, BandRS As Boolean) As Variant
'BandRS : True  --> Devuelve Recordset de ADO
'      False --> Devuelve en Array de Variant

    Dim sql As String, rs As Recordset
    
    sql = "SELECT CodVendedor,Nombre FROM FCVendedor "
    If BandSoloValida Then sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    sql = sql & " ORDER BY Nombre"

    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaFCVendedor = rs
    Else
        ListaFCVendedor = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaFCVendedorParaFlex() As String
    Dim s As String, sql As String
    Dim rs As Recordset
    
    sql = "SELECT CodVendedor,Nombre FROM FCVendedor "
    sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    sql = sql & " ORDER BY CodVendedor"

    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 10 + 40)         '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    
    ListaFCVendedorParaFlex = s
    rs.Close
    Set rs = Nothing
End Function


Public Function ListaPCProvCli(BandProveedor As Boolean, _
                               BandCliente As Boolean, _
                               BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
         '------------------- cambiado AUC  02/09/20005
             sql = "SELECT pc.CodProvCli, pc.Nombre, g1.CodGrupo1, g2.CodGrupo2, g3.CodGrupo3,g4.codgrupo4,pc.observacion, pc.estado  "
             sql = sql & " FROM PCGrupo4 g4 RIGHT JOIN( PCGrupo3 g3 RIGHT JOIN (PCGrupo2 g2 RIGHT JOIN (PCGrupo1 g1 RIGHT JOIN PCProvCli pc " & _
                          " ON g1.IdGrupo1 = pc.IdGrupo1) " & _
                    " ON g2.IdGrupo2 = pc.IdGrupo2) " & _
                " ON g3.IdGrupo3 = pc.IdGrupo3) " & _
               " ON g4.idgrupo4 = pc.idgrupo4 "
          '------------------
    If Not (BandProveedor And BandCliente) Then
        If BandProveedor Then
            sql = sql & " WHERE pc.BandProveedor=" & CadenaBool(True, TipoDB)
        Else
            If gobjMain.GrupoActual.PermisoActual.ConsRepVen Then
                sql = sql & " INNER JOIN FCVendedor v on v.idvendedor = pc.idvendedor"
            End If
            sql = sql & " WHERE pc.BandCliente=" & CadenaBool(True, TipoDB)
            If gobjMain.GrupoActual.PermisoActual.ConsRepVen Then
                sql = sql & " AND v.codvendedor = '" & gobjMain.UsuarioActual.codUsuario & "' "
            End If
        End If
        sql = sql & "and Estado <> 2 "
    End If
    sql = sql & " ORDER BY pc.Nombre"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCProvCli = rs
    Else
        ListaPCProvCli = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

'*** MAKOTO 03/sep/00 Agregado para que en catálogo
'                     de Prov/Cli se pueda ordenar por grupo
Public Function ListaPCProvCliConGrupo(BandProveedor As Boolean, _
                                       BandCliente As Boolean, _
                                       BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    'Listado de Proveedores/Clientes con PCGrupo1,2,3
    sql = "SELECT pc.CodProvCli, pc.Nombre, a.CodTipoDocumento , pc.ruc ,  TipoProvCli, pccan.descripcion, pcprov.descripcion, pcparr.descripcion, " & _
            " g1.CodGrupo1, g2.CodGrupo2, g3.CodGrupo3, g4.CodGrupo4,pc.observacion, pc.estado  "
             sql = sql & "FROM PCGrupo4 g4 RIGHT JOIN (PCGrupo3 g3 RIGHT JOIN (PCGrupo2 g2 RIGHT JOIN (PCGrupo1 g1 RIGHT JOIN PCProvCli pc LEFT JOIN pcprovincia pcprov on pc.idprovincia= pcprov.idprovincia LEFT JOIN pccanton pccan  on pc.idcanton= pccan.idCanton LEFT JOIN pcparroquia pcparr on pc.idparroquia= pcparr.idparroquia " & _
                        " left join Anexo_TipoDocumento a on pc.IdTipoDocumento  = a.Id" & _
                         " ON g1.IdGrupo1 = pc.IdGrupo1) " & _
                    " ON g2.IdGrupo2 = pc.IdGrupo2) " & _
                " ON g3.IdGrupo3 = pc.IdGrupo3) " & _
                " ON g4.idgrupo4 = pc.IdGrupo4 "
    If Not (BandProveedor And BandCliente) Then
        If BandProveedor Then
            sql = sql & " WHERE pc.BandProveedor=" & CadenaBool(True, TipoDB)
        Else
            If gobjMain.GrupoActual.PermisoActual.ConsRepVen Then
                sql = sql & " INNER JOIN FCVendedor v on v.idvendedor = pc.idvendedor"
            End If
            sql = sql & " WHERE pc.BandCliente=" & CadenaBool(True, TipoDB)
            If gobjMain.GrupoActual.PermisoActual.ConsRepVen Then
                sql = sql & " AND v.codvendedor = '" & gobjMain.UsuarioActual.codUsuario & "' "
            End If
        End If
    End If
    sql = sql & " ORDER BY pc.Nombre"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCProvCliConGrupo = rs
    Else
        ListaPCProvCliConGrupo = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


'*** MAKOTO 23/jun/2000 Aumentó por que en las condiciones de búsqueda necesito
'***                    que salga ordenado por código.
Public Function ListaPCProvCliPorCodigo(BandProveedor As Boolean, _
                               BandCliente As Boolean, _
                               BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
    sql = "SELECT CodProvCli,Nombre FROM PCProvCli "
    If Not (BandProveedor And BandCliente) Then
        If BandProveedor Then
            sql = sql & " WHERE BandProveedor=" & CadenaBool(True, TipoDB)
        Else
            sql = sql & " WHERE BandCliente=" & CadenaBool(True, TipoDB)
        End If
    End If
    sql = sql & " ORDER BY CodProvCli"

    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCProvCliPorCodigo = rs
    Else
        ListaPCProvCliPorCodigo = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaPCProvCliParaFlex(BandProveedor As Boolean) As String
    '*** MAKOTO 23/oct/00 Dejo para la compatibilidad
    ListaPCProvCliParaFlex = ListaPCProvCliParaFlexEx(BandProveedor, Not BandProveedor)
End Function

'*** MAKOTO 23/oct/00 Agregado para sacar prov/cli ambos
Public Function ListaPCProvCliParaFlexEx( _
                    BandProveedor As Boolean, _
                    BandCliente As Boolean) As String
    Dim sql As String, s As String, cond As String
    Dim rs As Recordset
    
    sql = "SELECT  CodProvCli, Nombre FROM PCProvCli "
    If BandProveedor And Not BandCliente Then
        cond = "BandProveedor=" & CadenaBool(True, Me.TipoDB)
    ElseIf Not BandProveedor And BandCliente Then
        cond = "BandCliente=" & CadenaBool(True, Me.TipoDB)
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " ORDER BY CodProvCli"

    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 20 + 40)         '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    
    ListaPCProvCliParaFlexEx = s
    rs.Close
    Set rs = Nothing
End Function


'*** MAKOTO 18/jul/00 Agregado.
'    Para permitir seleccionar por nombre en Documentos por pagar/cobrar.
Public Function ListaPCProvCliParaFlex2(BandProveedor As Boolean) As String
    '*** MAKOTO 23/oct/00 Dejo para la compatibilidad
    ListaPCProvCliParaFlex2 = ListaPCProvCliParaFlex2Ex(BandProveedor, Not BandProveedor)
End Function

'*** MAKOTO 23/oct/00 Agregado
Public Function ListaPCProvCliParaFlex2Ex( _
                    BandProveedor As Boolean, _
                    BandCliente As Boolean) As String
    Dim sql As String, s As String, rs As Recordset, cond As String
    
#If DAOLIB Then
    sql = "SELECT  Nombre & ' [' & CodProvCli & ']' FROM PCProvCli "
#Else
    sql = "SELECT  Nombre + ' [' + CodProvCli + ']' FROM PCProvCli "
#End If
    If BandProveedor And Not BandCliente Then
        cond = "BandProveedor=" & CadenaBool(True, Me.TipoDB)
    ElseIf Not BandProveedor And BandCliente Then
        cond = "BandCliente=" & CadenaBool(True, Me.TipoDB)
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " ORDER BY Nombre"      'Ordena por nombre

    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 40 + 20 + 3)     '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    
    ListaPCProvCliParaFlex2Ex = s
    rs.Close
    Set rs = Nothing
End Function

Public Function ListaTSBancoParaFlex() As String
    Dim sql As String, s As String
    Dim rs As Recordset
    
    sql = "SELECT CodBanco,Descripcion FROM TSBanco WHERE "
    sql = sql & "BandValida=" & CadenaBool(True, TipoDB)
    sql = sql & " ORDER BY CodBanco"

    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
'    s = "|" & GetStringDAO(rs)
    s = GetStringDAO(rs, 20 + 50)       '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then
'        s = "|" & rs.GetString(adClipString, , vbTab, "|")
        s = rs.GetString(adClipString, , vbTab, "|")
    End If
#End If
    
    ListaTSBancoParaFlex = s
    rs.Close
    Set rs = Nothing
End Function

'*** MAKOTO 08/feb/01 Agregado
Public Function ListaTSRetencionParaFlex() As String
    Dim sql As String, s As String
    Dim rs As Recordset
    
    sql = "SELECT CodRetencion, Descripcion, CodSRI FROM TSRetencion WHERE "
    sql = sql & "BandValida=" & CadenaBool(True, TipoDB)
    sql = sql & " ORDER BY CodRetencion"

    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = GetStringDAO(rs, 10 + 40)
#Else
    If Not rs.EOF Then
        s = rs.GetString(adClipString, , vbTab, "|")
    End If
#End If
    
    ListaTSRetencionParaFlex = s
    rs.Close
    Set rs = Nothing
End Function




Public Function ListaPCGrupo(NumGrupo As Integer, BandSoloValida As Boolean, BandRS As Boolean) As Variant
'BandRS : True  --> Devuelve Recordset
'          False --> Devuelve en Array de Variant

    Dim sql As String, rs As Recordset
    
    sql = "SELECT CodGrupo" & NumGrupo & ",Descripcion, BandValida FROM PCGrupo" & NumGrupo
    If BandSoloValida Then sql = sql & " WHERE BandValida=" & CadenaBool(True, TipoDB)
    sql = sql & " ORDER BY CodGrupo" & NumGrupo

    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCGrupo = rs
    Else
        ListaPCGrupo = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function
Public Function ListaPCGrupoTipo(NumGrupo As Integer, BandSoloValida As Boolean, BandRS As Boolean, Tipo As Integer) As Variant
'BandRS : True  --> Devuelve Recordset
'          False --> Devuelve en Array de Variant
'tipo  : 0 para clientes
        '1 para proveedores
        '2 para empleados
    Dim sql As String, rs As Recordset
    sql = "SELECT CodGrupo" & NumGrupo & ",Descripcion FROM PCGrupo" & NumGrupo
    If BandSoloValida Then sql = sql & " WHERE BandValida=" & CadenaBool(True, TipoDB)
    Select Case Tipo
        Case 0: sql = sql & " AND bandCliente =" & CadenaBool(True, TipoDB)
        Case 1: sql = sql & " AND bandproveedor =" & CadenaBool(True, TipoDB)
        Case 2: sql = sql & " AND bandEmpleado =" & CadenaBool(True, TipoDB)
    End Select
    sql = sql & " ORDER BY CodGrupo" & NumGrupo
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCGrupoTipo = rs
    Else
        ListaPCGrupoTipo = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaPCGrupoParaFlexGrid(NumGrupo As Integer) As String
    Dim sql As String, rs As Recordset, s As String
   sql = "SELECT CodGrupo" & NumGrupo & ",Descripcion FROM PCGrupo" & NumGrupo
    sql = sql & " WHERE BandValida=" & CadenaBool(True, TipoDB)
    sql = sql & " ORDER BY CodGrupo" & NumGrupo
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
'    s = "|" & GetStringDAO(rs)         '*** MAKOTO 07/ago/2000 Modificado
    If Not rs.EOF Then s = "|" & GetStringDAO(rs, 20 + 50)      '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|", "(nulo)")
#End If
    ListaPCGrupoParaFlexGrid = s
    rs.Close
    Set rs = Nothing
End Function

Public Function ObtieneCotizacion(ByVal fecha As Date, ByVal CodMoneda As String) As Currency
    Dim sql As String, rs As Recordset
    
    ObtieneCotizacion = 1       'Valor predeterminado
    
    'Si es de moneda predeterminada, no es necesario buscar en la base
    If CodMoneda = MONEDA_PRE Then Exit Function
    
    sql = "SELECT Max(TransID) AS MaxID FROM GNComprobante " & _
          "WHERE FechaTrans<=" & FechaYMD(fecha, TipoDB) & " AND Estado<>3"

    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        If Not IsNull(rs!maxid) Then
            sql = "SELECT Cotizacion" & Me.GNOpcion.IndiceMoneda(CodMoneda) & _
                  " AS Cotiza FROM GNComprobante WHERE TransID=" & rs!maxid
            rs.Close
            Set rs = Me.OpenRecordset(sql)
            If Not rs.EOF Then
                ObtieneCotizacion = rs!Cotiza
            End If
        End If
    End If
    rs.Close
    Set rs = Nothing
End Function

Public Function ConsCTDiario() As Variant
    Dim sql As String, cond As String
    Dim rs As Recordset
    
    sql = "SELECT TransID, FechaTrans, CodAsiento, CodTrans, NumTrans, " & _
            "CodCuenta, NombreCuenta, Descripcion, nombre ,"
    Select Case gobjCond.numMoneda
    Case 1: sql = sql & "Debe1 AS Debe, Haber1 AS Haber, 1 AS Cotizacion, "
    Case 2: sql = sql & "Debe1/Cotizacion2 AS Debe, Haber1/Cotizacion2 AS Haber, Cotizacion2 AS Cotizacion, "
    Case 3: sql = sql & "Debe1/Cotizacion3 AS Debe, Haber1/Cotizacion3 AS Haber, Cotizacion3 AS Cotizacion, "
    Case 4: sql = sql & "Debe1/Cotizacion4 AS Debe, Haber1/Cotizacion4 AS Haber, Cotizacion4 AS Cotizacion, "
    End Select
    sql = sql & "CodCentro, Estado FROM  "
    
    If Me.GNOpcion.ObtenerValor("PermitirDistribucionGastos") = "1" Then
        sql = sql & " vwConsCTDiarioxGasto "
    Else
        sql = sql & " vwConsCTDiario "
    End If
    
    'Condición de FechaTrans
    cond = " BANDNIIF=0 AND  (FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB) & ")"
    
'    'Condición de CodAsiento
'    If coda1 > 0 And coda2 > 0 Then
'        If Len(cond)> 0 Then cond = cond & " AND "
'        cond = cond & "(CodAsiento BETWEEN " & coda1 & " AND " & coda2 & ")"
'    ElseIf coda1 > 0 Then
'        If Len(cond)> 0 Then cond = cond & " AND "
'        cond = cond & "(CodAsiento>=" & coda1 & ")"
'    ElseIf coda2 > 0 Then
'        If Len(cond)> 0 Then cond = cond & " AND "
'        cond = cond & "(CodAsiento<=" & coda2 & ")"
'    End If
    
    'Condición de CodTrans
    If Len(gobjCond.CodTrans) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodTrans='" & gobjCond.CodTrans & "'" & ")"
    End If
    
    'Condición de NumTrans
    If gobjCond.NumTrans1 > 0 And gobjCond.NumTrans2 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans BETWEEN " & gobjCond.NumTrans1 & " AND " & gobjCond.NumTrans2 & ")"
    ElseIf gobjCond.NumTrans1 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans>=" & gobjCond.NumTrans1 & ")"
    ElseIf gobjCond.NumTrans2 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans<=" & gobjCond.NumTrans2 & ")"
    End If
    
    'Condición de Estado
    If gobjCond.EstadoBool(ESTADO_NOAPROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_NOAPROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_APROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_APROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_DESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_DESPACHADO & ")"
    End If
    
    'AUC
    If gobjCond.EstadoBool(ESTADO_SEMDESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_SEMDESPACHADO & ")"
    End If
    
    
    If gobjCond.EstadoBool(ESTADO_ANULADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_ANULADO & ")"
    End If
    
    'Condición de Sucursal   '*********** jeaa 19-01-04  para filtrado de sucursales
    If Len(gobjCond.Sucursal) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        If Me.GNOpcion.ObtenerValor("PermitirDistribucionGastos") = "1" Then
            cond = cond & "(IdGasto=" & gobjCond.Sucursal & ")"
        Else
            cond = cond & "(IdLocal=" & gobjCond.Sucursal & ")"
        End If
    End If
    
    
    If Len(cond) > 0 Then sql = sql & " WHERE (" & cond & ")"
    
    sql = sql & " ORDER BY FechaTrans, CodAsiento, "
    
    
    '*** MAKOTO 27/nov/00 Modificado para recuperar primero los Debes y luego Haber
    If Me.GNOpcion.ObtenerValor("OrdenarAsientoPorDebe") = "0" Then
        sql = sql & "Orden"
    Else
#If DAOLIB Then
        sql = sql & "Iif(Haber1>0, 1, 0), CodCuenta, Orden"
#Else
        sql = sql & "(CASE WHEN Haber1>0 THEN 1 ELSE 0 END), CodCuenta, Orden"
#End If
    End If
    
    Set rs = Me.OpenRecordset(sql)
    Set ConsCTDiario = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Asientos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "CT"
End Function


'Para Libro Mayor
Public Function ConsCTKardex() As Variant
    Dim sql As String, cond As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsCTLibroMayor")
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    qdef.Parameters("CodCuenta1") = IIf(Len(gobjCond.CodCuenta1) = 0, "0", gobjCond.CodCuenta1)
    qdef.Parameters("CodCuenta2") = IIf(Len(gobjCond.CodCuenta2) = 0, "99999999999999999999", gobjCond.CodCuenta2)
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    'jeaa 07/04/2005
    qdef.Parameters("CodTrans") = gobjCond.CodTrans
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient

    If Me.GNOpcion.ObtenerValor("PermitirDistribucionGastos") = "1" Then
        If Len(gobjCond.Sucursal) > 0 Then
            sql = "spConsCTLibroMayorxGasto "
        Else
            sql = "spConsCTLibroMayor "
        End If
    Else
        sql = "spConsCTLibroMayor "
    End If
    sql = sql & gobjCond.numMoneda & ",'" & _
                gobjCond.CodCuenta1 & "','" & _
                gobjCond.CodCuenta2 & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB) & ",'" & gobjCond.Sucursal & "','" & _
                gobjCond.CodTrans & "'" ' jeaa 17-01-04 para filtrado por sucursal y por trans

    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    Set ConsCTKardex = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Libro Mayor " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "CT"
End Function

'Para Balance de comprobación
Public Function ConsCTBalanceComp() As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim cta1 As String, cta2 As String
    
    'Si no hay condición, coge todas las cuentas
    cta1 = "0"
    cta2 = String(20, "9")
    If Len(gobjCond.CodCuenta1) > 0 Then cta1 = gobjCond.CodCuenta1
    If Len(gobjCond.CodCuenta2) > 0 Then cta2 = gobjCond.CodCuenta2

#If DAOLIB Then
    Dim qdef As QueryDef
    
    Set qdef = mdbEmpresa.QueryDefs("spConsCTBalanceComp")
    With qdef
        .Parameters("FechaDesde") = gobjCond.fecha1
        .Parameters("FechaHasta") = gobjCond.fecha2
        .Parameters("CodCuenta1") = cta1
        .Parameters("CodCuenta2") = cta2
        .Parameters("NumMoneda") = gobjCond.numMoneda
        .Parameters("CodSucursal") = gobjCond.Sucursal 'jeaa
        Set rs = .OpenRecordset(dbOpenSnapshot, dbReadOnly)
    End With
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
'    '**************************
'    gobjCond.Sucursal = "'S1'"
'    '**************************
    If Me.GNOpcion.ObtenerValor("PermitirDistribucionGastos") = "1" Then
        If Len(gobjCond.Sucursal) > 0 Then
            sql = "spConsCTBalanceCompxGasto "
        Else
            sql = "spConsCTBalanceComp "
        End If
    Else
        sql = "spConsCTBalanceComp "
    End If
    sql = sql & gobjCond.numMoneda & ",'" & cta1 & "','" & cta2 & "'," & _
            FechaYMD(gobjCond.fecha1, TipoDB) & "," & FechaYMD(gobjCond.fecha2, TipoDB) & ",'" & gobjCond.Sucursal & "'"    ' jeaa 17-01-04 para filtrado por sucursal
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    Set ConsCTBalanceComp = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Balance Comprobacion " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "CT"
End Function

'Para Balance Por Mes           '*** MAKOTO 12/mar/01 Agregado
Public Function ConsCTBalancePorMes() As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim cta1 As String, cta2 As String
    
    'Si no hay condición, coge todas las cuentas
    cta1 = "0"
    cta2 = String(20, "9")
    If Len(gobjCond.CodCuenta1) > 0 Then cta1 = gobjCond.CodCuenta1
    If Len(gobjCond.CodCuenta2) > 0 Then cta2 = gobjCond.CodCuenta2

#If DAOLIB Then
'PENDIENTE
'    Dim qdef As QueryDef
'
'    Set qdef = mdbEmpresa.QueryDefs("spConsCTBalancePorMes")
'    With qdef
'        .Parameters("FechaIni") = gobjCond.FechaCorte
'        .Parameters("CodCuenta1") = cta1
'        .Parameters("CodCuenta2") = cta2
'        .Parameters("NumMoneda") = gobjCond.NumMoneda
'        Set rs = .OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    If Me.GNOpcion.ObtenerValor("PermitirDistribucionGastos") = "1" Then
        sql = "spConsCTBalancePorMes "
    Else
        sql = "spConsCTBalancePorMes "
    End If
    sql = sql & gobjCond.numMoneda & ", " & _
            FechaYMD(gobjCond.FechaCorte, TipoDB) & ", " & _
            "'" & cta1 & "','" & cta2 & "'" & ",'" & gobjCond.Sucursal & "'"    ' jeaa 17-01-04 para filtrado por sucursal
    Set rs = Me.OpenRecordset(sql)
    UltimoRecordset rs
#End If
    
    Set ConsCTBalancePorMes = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Balance x Mes " & gobjCond.FechaCorte, "CT"
End Function

'Para Balance de general y Estado de pérdidas y ganancias
Public Function ConsCTBalance(bandBalance As Boolean) As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim v As Variant, v2() As Variant, i As Long, j As Long
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsCTBalance")
    qdef.Parameters("FechaDesde") = IIf(bandBalance, Me.GNOpcion.FechaInicio, gobjCond.fecha1)
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodCuenta1") = "0"
    qdef.Parameters("CodCuenta2") = String(20, "9")
    qdef.Parameters("CodSucursal") = gobjCond.Sucursal ' ********* jeaa
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
    If Not rs.EOF Then
        rs.MoveLast
        rs.MoveFirst
        v = rs.GetRows(rs.RecordCount)
    End If
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
'    '**************************
'    gobjCond.Sucursal = "'S2'"
'    '**************************
    If Me.GNOpcion.ObtenerValor("PermitirDistribucionGastos") = "1" Then
        If Not gobjCond.IncluirCero Or Len(gobjCond.Sucursal) > 0 Then
            If Len(gobjCond.Codciudad1) = 0 Then
                sql = "spConsCTBalancexGasto "
            Else
                sql = "spConsCTBalancexGastoSinUtilSinIR "
            End If
        Else
            If Len(gobjCond.Codciudad1) = 0 Then
                sql = "spConsCTBalance "
            Else
                sql = " spConsCTBalanceSinUtilSinIR "
            End If
        End If
    Else
            If Len(gobjCond.Codciudad1) = 0 Then
                sql = "spConsCTBalance "
            Else
                sql = " spConsCTBalanceSinUtilSinIR "
            End If
    End If
    sql = sql & gobjCond.numMoneda
    If Len(gobjCond.Codciudad1) = 0 Then
        sql = sql & ",'0','" & String(20, "9") & "',"
    Else
        sql = sql & ",'" & gobjCond.Codciudad1 & "','" & gobjCond.Codciudad2 & "',"
    End If
    sql = sql & FechaYMD(IIf(bandBalance, Me.GNOpcion.FechaInicio, gobjCond.fecha1), TipoDB) & ","
    sql = sql & FechaYMD(gobjCond.fecha2, TipoDB) & ",'" & gobjCond.Sucursal & "'"    ' jeaa 17-01-04 para filtrado por sucursal
                        
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    If Not rs.EOF Then v = rs.GetRows()
#End If
    
    'Mayoriza los valores
    Mayoriza v
    
    'Pasa los valores de v a v2 cambiando formato
    ' y filtrando registros por TipoCuenta, Nivel y Valor
    j = 0
    For i = 0 To UBound(v, 2)
        If Not IsNull(v(BAL_VALOR, i)) Then
            'Solo los que tengan valor diferente de 0
            If v(BAL_VALOR, i) <> 0 Then
                'Si es para balance, solo tipo 1,2 y 3, sino solo tipo 4 y 5
                If (bandBalance And (v(BAL_TIPO, i) <= 3)) Or _
                   ((Not bandBalance) And (v(BAL_TIPO, i) >= 4)) Then
                   
                   'Solo hasta el nivel indicado
                   If v(BAL_NIVEL, i) <= gobjCond.Nivel Then
                        ReDim Preserve v2(6, j)
                        v2(0, j) = v(BAL_TIPO, i)           'TipoCuenta
                        v2(1, j) = v(BAL_CODCUENTA, i)      'CodCuenta
                        v2(2, j) = v(BAL_NOMBRECUENTA, i)   'Cuenta
                        v2(3, j) = v(BAL_CODSUCURSAL, i)          'CODSUCURSAL   JEAA 16/01/04
                        v2(4, j) = v(BAL_VALOR, i)          'Valor
                        If Not bandBalance Then v2(4, j) = v2(4, j) * -1    'Invierta el signo cuando es EstadoPG
                        v2(5, j) = v(BAL_NIVEL, i)          'Nivel
                        j = j + 1
                    End If
                End If
            End If
        End If
    Next i
        
    If j Then ConsCTBalance = v2
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Balance ", "CT"
End Function




Private Sub Mayoriza(ByRef v As Variant)
    Dim i As Integer, nmax As Integer, j As Long
    
#If DAOLIB Then
    nmax = ObtieneMax(mdbEmpresa, "CTCuenta", "Nivel")
#Else
    nmax = ObtieneMax(mcnEmpresa, "CTCuenta", "Nivel")
#End If
    
    'Desde el nivel inferior hacia el nivel superior
    For i = nmax To 0 Step -1
        For j = 0 To UBound(v, 2)
            If (v(BAL_NIVEL, j) = i) And (v(BAL_BANDTOTAL, j) = True) Then
                v(BAL_VALOR, j) = SumaHijos(v, j)
            End If
        Next j
    Next i
End Sub

Private Function SumaHijos(ByRef v As Variant, ByVal j As Long) As Currency
    Dim i As Long, t As Currency
    
    'Busca todos los hijos de la cuenta indicada por j
    ' saca la suma total de los hijos en t
    For i = 0 To UBound(v, 2)
        'Si IdCuentaSuma es igual a IdCuenta de j, es hijo de la cuenta j
        If v(BAL_IDPADRE, i) = v(BAL_IDCUENTA, j) Then
            If Not IsNull(v(BAL_VALOR, i)) Then t = t + v(BAL_VALOR, i)
        End If
    Next i
    SumaHijos = t
End Function


'Para balance/resultado de centro de costo
Public Function ConsCTCentroBalance(bandBalance As Boolean) As Variant
    Dim sql As String, cond As String, rs As Recordset
    
#If DAOLIB Then
    sql = "SELECT TransID,CodCentro,Descripcion,Tipo,CodCuenta,NombreCuenta," & _
          "FechaTrans,CodTrans,CodTrans & NumTrans AS Trans, descripcion, "
    Select Case gobjCond.numMoneda
    Case 1: sql = sql & "Valor1 AS Valor, 1 AS Cotizacion, "
    Case 2: sql = sql & "Valor1/Cotizacion2 AS Valor, Cotizacion2 AS Cotizacion, "
    Case 3: sql = sql & "Valor1/Cotizacion3 AS Valor, Cotizacion3 AS Cotizacion, "
    Case 4: sql = sql & "Valor1/Cotizacion4 AS Valor, Cotizacion4 AS Cotizacion, "
    End Select
    sql = sql & "Estado FROM vwConsCTCentro "
    
    cond = IIf(bandBalance, "(TipoCuenta IN (1,2,3))", "(TipoCuenta IN (4,5))")
    
    If (Len(gobjCond.CodCentro1) > 0) And (Len(gobjCond.CodCentro2) > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = "(CodCentro BETWEEN '" & gobjCond.CodCentro1 & "' AND '" & gobjCond.CodCentro2 & "')"
    ElseIf Len(gobjCond.CodCentro1) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = "(CodCentro>='" & gobjCond.CodCentro1 & "')"
    ElseIf Len(gobjCond.CodCentro2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = "(CodCentro<='" & gobjCond.CodCentro2 & "')"
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE (" & cond & ")"

    Set rs = mdbEmpresa.OpenRecordset(sql, dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    
'    sql = "spConsCTCentro " & gobjCond.numMoneda & "," & _
'                CadenaBool(bandBalance, TipoDB) & ",'" & _
'                gobjCond.CodCentro1 & "','" & _
'                gobjCond.CodCentro2 & "'"
    '***Agregado. 04/ago/2004. Angel. Condiciones de Fecha
    sql = "spConsCTCentro " & gobjCond.numMoneda & "," & _
                CadenaBool(bandBalance, TipoDB) & ",'" & _
                gobjCond.CodCentro1 & "','" & _
                gobjCond.CodCentro2 & "','" & _
                gobjCond.fecha1 & "','" & _
                gobjCond.fecha2 & "'"
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
#End If
    
    Set ConsCTCentroBalance = rs
    Set rs = Nothing
End Function


Public Function ConsIVCCosto() As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    
    sql = "SELECT TransID, CodCentro,DescCentro,FechaTrans,CodTrans,"
#If DAOLIB Then
    sql = sql & "CodTrans & ' ' & NumTrans AS Trans, "
#Else
    sql = sql & "CodTrans + ' ' + CONVERT(varchar, NumTrans) AS Trans, "
#End If
    sql = sql & "CodInventario, DescItem, CodBodega, Cantidad, "

    Select Case gobjCond.numMoneda
    Case 1: sql = sql & "CUR1 AS CUR, CTR1 AS CTR, PUR1 AS PUR,PTR1 AS PTR,1 AS Cotizacion "
    Case 2: sql = sql & "CUR1/Cotizacion2 AS CUR, CTR1/Cotizacion2 AS CTR, PUR1/Cotizacion2 AS PUR,PTR1/Cotizacion2 AS PTR,Cotizacion2 AS Cotizacion "
    Case 3: sql = sql & "CUR1/Cotizacion3 AS CUR, CTR1/Cotizacion3 AS CTR, PUR1/Cotizacion3 AS PUR,PTR1/Cotizacion3 AS PTR,Cotizacion3 AS Cotizacion "
    Case 4: sql = sql & "CUR1/Cotizacion4 AS CUR, CTR1/Cotizacion4 AS CTR, PUR1/Cotizacion4 AS PUR,PTR1/Cotizacion4 AS PTR,Cotizacion4 AS Cotizacion "
    End Select
    sql = sql & " FROM vwConsIVTrans "
    
    'Condición de FechaTrans
    cond = "(FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB) & ")"

    'Condición de CodTrans
    If Len(gobjCond.CodTrans) > 0 Then
        'Si está especificada una transacción
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodTrans='" & gobjCond.CodTrans & "')"
    Else
        'Si no está especificada, selecciona SOLO a las que tiene acceso el usuario
        If Len(cond) > 0 Then cond = cond & " AND "
        s = gobjMain.GrupoActual.PermisoActual.ListaTrans(True)
        cond = cond & "(CodTrans " & s & ")"
    End If

    'Condición de NumTrans
    If gobjCond.NumTrans1 > 0 And gobjCond.NumTrans2 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans BETWEEN " & gobjCond.NumTrans1 & " AND " & gobjCond.NumTrans2 & ")"
    ElseIf gobjCond.NumTrans1 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans>=" & gobjCond.NumTrans1 & ")"
    ElseIf gobjCond.NumTrans2 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans<=" & gobjCond.NumTrans2 & ")"
    End If

    'Condición de C.Costo
    If (Len(gobjCond.CodCentro1) > 0) And (Len(gobjCond.CodCentro1) > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodCentro BETWEEN '" & gobjCond.CodCentro1 & "' AND '" & gobjCond.CodCentro2 & "')"
    ElseIf Len(gobjCond.CodCentro1) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodCentro>='" & gobjCond.CodCentro1 & "')"
    ElseIf Len(gobjCond.CodCentro2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodCentro<='" & gobjCond.CodCentro2 & "')"
    End If

    'Condición de Estado
    If gobjCond.EstadoBool(ESTADO_NOAPROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_NOAPROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_APROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_APROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_DESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_DESPACHADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_ANULADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_ANULADO & ")"
    End If
    
    If Len(cond) > 0 Then sql = sql & " WHERE (" & cond & ")"
'    sql = sql & " ORDER BY CodCentro,FechaTrans,TransID,CodInventario"
    sql = sql & " ORDER BY CodCentro,FechaTrans, HoraTrans, TransID, CodInventario"
    
    Set rs = Me.OpenRecordset(sql)
    Set ConsIVCCosto = rs
    Set rs = Nothing
End Function



Public Function ConsIVTrans() As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    
    sql = "SELECT TransID, FechaTrans, CodAsiento, CodTrans, NumTrans, NumDocRef, " & _
            "Nombre, Descripcion, CodInventario, DescItem, CodBodega, Cantidad, "
    
    Select Case gobjCond.numMoneda
    Case 1: sql = sql & "CUR1 AS CUR, CTR1 AS CTR, PUR1 AS PUR,PTR1 AS PTR,1 AS Cotizacion, "
    Case 2: sql = sql & "CUR1/Cotizacion2 AS CUR, CTR1/Cotizacion2 AS CTR, PUR1/Cotizacion2 AS PUR,PTR1/Cotizacion2 AS PTR,Cotizacion2 AS Cotizacion, "
    Case 3: sql = sql & "CUR1/Cotizacion3 AS CUR, CTR1/Cotizacion3 AS CTR, PUR1/Cotizacion3 AS PUR,PTR1/Cotizacion3 AS PTR,Cotizacion3 AS Cotizacion, "
    Case 4: sql = sql & "CUR1/Cotizacion4 AS CUR, CTR1/Cotizacion4 AS CTR, PUR1/Cotizacion4 AS PUR,PTR1/Cotizacion4 AS PTR,Cotizacion4 AS Cotizacion, "
    End Select
    sql = sql & " CodCentro,Estado FROM vwConsIVTrans "
    
    'Condición de FechaTrans
    cond = "(FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB) & ")"
    
    'Condición de CodTrans
    If Len(gobjCond.CodTrans) > 0 Then
        'Si está especificada una transacción
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodTrans='" & gobjCond.CodTrans & "')"
    Else
        'Si no está especificada, selecciona SOLO a las que tiene acceso el usuario
        If Len(cond) > 0 Then cond = cond & " AND "
        s = gobjMain.GrupoActual.PermisoActual.ListaTrans(True)
        cond = cond & "(CodTrans " & s & ")"
    End If
    
    'Condición de NumTrans
    If gobjCond.NumTrans1 > 0 And gobjCond.NumTrans2 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans BETWEEN " & gobjCond.NumTrans1 & " AND " & gobjCond.NumTrans2 & ")"
    ElseIf gobjCond.NumTrans1 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans>=" & gobjCond.NumTrans1 & ")"
    ElseIf gobjCond.NumTrans2 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans<=" & gobjCond.NumTrans2 & ")"
    End If
    
    'Condición de C.Costo
    If (Len(gobjCond.CodCentro1) > 0) And (Len(gobjCond.CodCentro1) > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodCentro BETWEEN '" & gobjCond.CodCentro1 & "' AND '" & gobjCond.CodCentro2 & "')"
    ElseIf Len(gobjCond.CodCentro1) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodCentro>='" & gobjCond.CodCentro1 & "')"
    ElseIf Len(gobjCond.CodCentro2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodCentro<='" & gobjCond.CodCentro2 & "')"
    End If
    
    'Condición de Estado
    If gobjCond.EstadoBool(ESTADO_NOAPROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_NOAPROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_APROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_APROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_DESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_DESPACHADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_ANULADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_ANULADO & ")"
    End If
    
    If Len(cond) > 0 Then sql = sql & " WHERE (" & cond & ")"
'    sql = sql & " ORDER BY FechaTrans, TransID, Orden"
'    sql = sql & " ORDER BY FechaTrans, TransID"     '*** MAKOTO 19/ago/2000 Faltaba ordenar
    sql = sql & " ORDER BY FechaTrans, HoraTrans, TransID, Orden"     '*** MAKOTO 07/dic/00
    
    Set rs = Me.OpenRecordset(sql)
    Set ConsIVTrans = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons. Transacciones inventario " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "IV"
End Function

'Para corrección de existencias
'Devuelve los items que tienen existencia incorrecta comparando con
' la suma de IVKardex.
Public Function ConsIVCorrecExist() As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    Dim ex1 As String, ex2 As String, ex3 As String, ex4 As String
    Dim ex5 As String, ex6 As String
    
#If DAOLIB Then
    ex1 = "IIF(IsNull(ive.Exist),0,ive.Exist)"
    ex2 = "IIF(IsNull(iv.IdInventario), iv2.IdInventario, iv.IdInventario)"
    ex3 = "IIF(IsNull(iv.CodInventario), iv2.CodInventario, iv.CodInventario)"
    ex4 = "IIF(IsNull(vw.SumaDeCantidad),0, vw.SumaDeCantidad)"
    ex5 = "IIF(IsNull(ivb.IdBodega), ivb2.IdBodega, ivb.IdBodega)"
    ex6 = "IIF(IsNull(ivb.CodBodega), ivb2.CodBodega, ivb.CodBodega)"
#Else
    ex1 = "isnull(ive.Exist,0)"
    ex2 = "isnull(iv.IdInventario, iv2.IdInventario)"
    ex3 = "isnull(iv.CodInventario, iv2.CodInventario)"
    ex4 = "isnull(vw.SumaDeCantidad,0)"
    ex5 = "isnull(ivb.IdBodega, ivb2.IdBodega)"
    ex6 = "isnull(ivb.CodBodega, ivb2.CodBodega)"
#End If

    'Muestra la diferencia de existencia y suma de IVKardex si es que la hay
    sql = "SELECT " & ex2 & " AS IdInventario, " & ex3 & " AS CodInventario, " & _
                 ex5 & " AS IdBodega, " & ex6 & " AS CodBodega, " & ex1 & " AS Exist1, " & _
                 ex4 & " AS SumaDeCantidad, (" & ex1 & " - " & ex4 & ") AS Dif " & _
          "FROM IVInventario iv2 RIGHT JOIN " & _
                    "(IVInventario iv RIGHT JOIN " & _
                        "(IVBodega ivb2 RIGHT JOIN " & _
                            "(IVBodega ivb RIGHT JOIN "
#If DAOLIB Then                         '*** MAKOTO 25/ene/01 Mod. porque en DAO no sporta FULL JOIN
                    sql = sql & "(vwConsIVKardexSuma vw Right JOIN IVExist ive "
#Else
                    If Me.GNOpcion.IVKTipoDatoDouble Then
                        sql = sql & "(vwConsIVKardexSumaDou vw FULL JOIN IVExist ive "
                    Else
                        sql = sql & "(vwConsIVKardexSuma vw FULL JOIN IVExist ive "
                    End If
#End If
                    sql = sql & "ON (vw.IdBodega = ive.IdBodega) AND (vw.IdInventario = ive.IdInventario) ) " & _
                            "ON ivb.IdBodega = vw.IdBodega) " & _
                        "ON ivb2.IdBodega = ive.IdBodega) " & _
                    "ON iv.IdInventario=vw.IdInventario) " & _
                "ON iv2.IdInventario = ive.IdInventario " & _
          "WHERE (" & ex1 & " - " & ex4 & ")<>0 " & _
                 "AND " & ex2 & " is not null " & _
          "ORDER BY " & ex3
    
    Set rs = Me.OpenRecordset(sql)
    Set ConsIVCorrecExist = rs
    Set rs = Nothing
End Function

'Para corregir existencias incorrectas
Public Sub CorregirExistencia()
    Dim rs As Recordset, sql As String, rs2 As Recordset
    If Me.GNOpcion.IVKTipoDatoDouble Then
        Set rs = Me.ConsIVCorrecExistDou
    Else
        Set rs = Me.ConsIVCorrecExist
    End If
    If rs.EOF Then Exit Sub
    
#If DAOLIB = 0 Then
    Set rs2 = New ADODB.Recordset
    rs2.CursorLocation = adUseClient
#End If

    With rs
        Do Until .EOF
            'Verifica si existe el registro
            If Me.GNOpcion.IVKTipoDatoDouble Then
                sql = "SELECT ExistDou FROM IVExist " & _
                  " WHERE IdInventario=" & !IdInventario & _
                  " AND IdBodega=" & !IdBodega
            Else
                sql = "SELECT Exist FROM IVExist " & _
                  " WHERE IdInventario=" & !IdInventario & _
                  " AND IdBodega=" & !IdBodega
            End If
#If DAOLIB Then
            Set rs2 = mdbEmpresa.OpenRecordset(sql, dbOpenSnapshot, dbReadOnly)
#Else
            rs2.Open sql, mcnEmpresa, adOpenStatic, adLockReadOnly
#End If
            'Si no existe, lo inserta
            If rs2.EOF Then
                If Me.GNOpcion.IVKTipoDatoDouble Then
                    sql = "INSERT INTO IVExist (IdInventario,IdBodega,ExistDou) " & _
                          "VALUES (" & !IdInventario & "," & !IdBodega & "," & !SumaDeCantidad & ")"
                Else
                    sql = "INSERT INTO IVExist (IdInventario,IdBodega,Exist) " & _
                          "VALUES (" & !IdInventario & "," & !IdBodega & "," & !SumaDeCantidad & ")"
                End If
            
            'Si existe, lo modifica
            Else
                If Me.GNOpcion.IVKTipoDatoDouble Then
                    sql = "UPDATE IVExist SET ExistDou=" & !SumaDeCantidad & _
                      " WHERE IdInventario=" & !IdInventario & _
                      " AND IdBodega=" & !IdBodega
                Else
                    sql = "UPDATE IVExist SET Exist=" & !SumaDeCantidad & _
                      " WHERE IdInventario=" & !IdInventario & _
                      " AND IdBodega=" & !IdBodega
                End If
            End If
            Me.Execute sql, True
            rs2.Close
            .MoveNext
        Loop
        .Close
    End With
    Set rs2 = Nothing
    Set rs = Nothing
End Sub

Public Function ConsGNTrans() As Variant
    'Llama a la nueva función por orden descendente     '*** MAKOTO 20/oct/00
    Set ConsGNTrans = ConsGNTrans2(False)
End Function

'*** MAKOTO 20/oct/00 Agregado
Public Function ConsGNTrans2( _
                    Optional ByVal OrdenAscendente As Boolean) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    '*** MAKOTO 03/oct/00
    sql = "SELECT"
    'gobjCond.TopN = 1
    If gobjCond.TopN > 0 Then
        sql = sql & " TOP " & gobjCond.TopN
    End If
    '*** MAKOTO 05/feb/01 Mod. Aumentado 'NumDocRef' y 'Nombre'
    sql = sql & " vwConsGNTrans.TransID, vwConsGNTrans.FechaTrans, vwConsGNTrans.CodAsiento, vwConsGNTrans.CodTrans, "
    sql = sql & " vwConsGNTrans.NumTrans, "
    sql = sql & " vwConsGNTrans.NumDocRef, vwConsGNTrans.Nombre, vwConsGNTrans.Descripcion, vwConsGNTrans.CodCentro,"
    sql = sql & " vwConsGNTrans.Estado , "
    sql = sql & " case vwConsGNTrans.Estado when '0' THEN 'NO CONT' when '1' THEN 'APROV' when '2' THEN 'DESPA' when '3' THEN 'ANULA' when '4' THEN 'SEM DESP' END AS estadoL, "
    sql = sql & " vwConsGNTrans.CodPRAsiento,  "
    sql = sql & " enviado, informacionAdicional "
     If InStr(1, UCase(gobjMain.EmpresaActual.GNOpcion.NombreEmpresa), "COURIER") > 0 Then
        sql = sql & ",Case SUBSTRING(gnt.OPCION2,167,1) when 'S' THEN  CASE vwConsGNTrans.ESTADOGUIA WHEN 1 THEN 'EMPAQUETADO' WHEN 0 THEN 'NO EMPAQUETADO' WHEN 2 THEN 'EN TRANSITO' WHEN 3 THEN 'ENTREGADO' END  ELSE '' END AS Sticker,"
        sql = sql & " vwConsGNTrans.codAgeCurier"
    End If
    sql = sql & " FROM vwConsGNTrans Inner Join gntrans gnt on gnt.codtrans = vwConsGNTrans.CODTRANS "
    'If Not gobjCond.IncluirCero Then
    If Not gobjCond.BandTodo Then
        If gobjCond.Cliente Then
            sql = sql & " INNER JOIN GNComprobante gn inner join PCProvCli pc "
            If gobjMain.GrupoActual.PermisoActual.ConsRepVen Then
                sql = sql & "  INNER JOIN FCVendedor  v"
                sql = sql & " ON v.idvendedor = pc.idvendedor "
            End If
                sql = sql & " ON pc.IdProvcli = gn.idClienteRef "
                sql = sql & " ON gn.transid = vwConsGNTrans.transid "
        ElseIf gobjCond.Proveedor Then
            sql = sql & " INNER JOIN GNComprobante gn Left join PCProvCli pc "
            sql = sql & " ON pc.IdProvcli = gn.idProveedorRef "
            sql = sql & " ON gn.transid = vwConsGNTrans.transid "
        ElseIf gobjCond.Empleado Then
            sql = sql & " INNER JOIN GNComprobante gn inner join gnoferta gof inner join empleado pc "
            sql = sql & " ON pc.IdProvcli = gof.idempleadoRef "
            sql = sql & " ON gof.transid = gn.transid "
            sql = sql & " ON gn.transid = vwConsGNTrans.transid "
        End If
    End If
    'Condición de FechaTrans
    cond = "vwConsGNTrans.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB)
   'Condición de CodTrans
    If Len(cond) > 0 Then cond = cond & " AND "
    If Len(gobjCond.CodTrans) > 0 Then      'Si está especificado transaccion
        'Si es una sola transaccion
        If InStr(gobjCond.CodTrans, ",") = 0 Then
            cond = cond & "(vwConsGNTrans.CodTrans='" & gobjCond.CodTrans & "')"

        'Si está seleccionado varias trans.
       Else
            cond = cond & "(vwConsGNTrans.CodTrans IN (" & gobjCond.CodTrans & "))"
        End If
    Else
        'Si no hay condicion de cod.trans, selecciona todas las trans.
        ' que tenga permiso
        s = gobjMain.GrupoActual.PermisoActual.ListaTrans(True)
        If Len(s) > 0 Then
            cond = cond & "(vwConsGNTrans.CodTrans " & s & ")"
        Else
            cond = cond & "(vwConsGNTrans.CodTrans = '-------')"    'Para que NO devuelva nada si no tiene ningún permiso  '*** MAKOTO 26/dic/00
        End If
    End If
    'Condición de NumTrans
    If (gobjCond.NumTrans1 > 0) And (gobjCond.NumTrans2 > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.NumTrans BETWEEN " & gobjCond.NumTrans1 & " AND " & gobjCond.NumTrans2 & ")"
    ElseIf gobjCond.NumTrans1 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.NumTrans>=" & gobjCond.NumTrans1 & ")"
    ElseIf gobjCond.NumTrans2 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.NumTrans<=" & gobjCond.NumTrans2 & ")"
    End If
    'Condición de Estado
    If gobjCond.EstadoBool(ESTADO_NOAPROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.Estado<>" & ESTADO_NOAPROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_APROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.Estado<>" & ESTADO_APROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_DESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.Estado<>" & ESTADO_DESPACHADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_ANULADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.Estado<>" & ESTADO_ANULADO & ")"
    End If
    '----------------------------------------
    '----- CAO 13/06/2006
    '-----------------------------------------
    If gobjCond.EstadoBool(ESTADO_SEMDESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.Estado<>" & ESTADO_SEMDESPACHADO & ")"
   End If
    If Len(gobjCond.CodCentro1) > 0 And Len(gobjCond.CodCentro2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " codCentro between '" & gobjCond.CodCentro1 & "' and '" & gobjCond.CodCentro2 & "'"
    End If
    If Len(gobjCond.Codciudad1) > 0 And Len(gobjCond.Codciudad2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " vwConsGNTrans.codVendedor between '" & gobjCond.Codciudad1 & "' and '" & gobjCond.Codciudad2 & "'"
    End If
    If gobjMain.GrupoActual.PermisoActual.ConsRepVen Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " vw.codvendedor = '" & gobjMain.UsuarioActual.codUsuario & "'  "
    End If
    If Len(gobjCond.CodPC1) > 0 Then ' And Not gobjCond.IncluirCero Then
        '---------------- ojo esto falta ANgel 15/may/2015
        '--------------------------
        If Not gobjCond.BandTodo Then
            If Len(cond) > 0 Then cond = cond & " AND "
            If gobjMain.GrupoActual.PermisoActual.ConsRepVen Then
                cond = cond & " pc.codprovcli = '" & gobjCond.CodPC1 & "' " 'AUC aqui porque tiene filtro de vendedor
        Else
                cond = cond & " pc.codprovcli = '" & gobjCond.CodPC1 & "' " 'AQUI con el filtro de la vista
        End If
       End If
    End If

   If Len(cond) > 0 Then sql = sql & " WHERE " & cond
   'Ordern de filas
    If OrdenAscendente Then
'        sql = sql & " ORDER BY FechaTrans, TransID"         '*** MAKOTO 03/oct/00 Modificado para que salga más actual al primero
        sql = sql & " ORDER BY vwConsGNTrans.FechaTrans, vwConsGNTrans.HoraTrans, vwConsGNTrans.TransID"         '*** MAKOTO 07/dic/00 Modificado para HoraTrans
    Else
'        sql = sql & " ORDER BY FechaTrans DESC, TransID DESC"
        sql = sql & " ORDER BY vwConsGNTrans.FechaTrans DESC, vwConsGNTrans.HoraTrans DESC, vwConsGNTrans.TransID DESC"       '*** MAKOTO 07/dic/00 HoraTrans agregado
    End If
    Set rs = Me.OpenRecordset(sql)
    Set ConsGNTrans2 = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta General " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function



'*** Agregado por Oliver, Usa la condicion de busqueda por hora
'*** 03/12/2002
Public Function ConsGNTrans3( _
                    Optional ByVal OrdenAscendente As Boolean) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    
    '*** MAKOTO 03/oct/00
    sql = "SELECT"
    
    '*** MAKOTO 05/feb/01 Mod. Aumentado 'NumDocRef' y 'Nombre'
    sql = sql & " TransID, FechaTrans + HoraTrans, CodAsiento, CodTrans, NumTrans, " & _
            "NumDocRef, Nombre, Descripcion, CodCentro,Estado FROM vwConsGNTrans "
    
    'Condición de FechaTrans
    cond = "FechaTrans + HoraTrans BETWEEN " & FechaYMD(gobjCond.fecha1 + gobjCond.Hora1, mProps.TipoDB, True) & " AND " & FechaYMD(gobjCond.fecha2 + gobjCond.Hora2, mProps.TipoDB, True)
    
    'Condición de CodTrans
    If Len(cond) > 0 Then cond = cond & " AND "
    If Len(gobjCond.CodTrans) > 0 Then      'Si está especificado transaccion
        'Si es una sola transaccion
        If InStr(gobjCond.CodTrans, ",") = 0 Then
            cond = cond & "(CodTrans='" & gobjCond.CodTrans & "')"
        'Si está seleccionado varias trans.
        Else
            cond = cond & "(CodTrans IN (" & gobjCond.CodTrans & "))"
        End If
    Else
        'Si no hay condicion de cod.trans, selecciona todas las trans.
        ' que tenga permiso
        s = gobjMain.GrupoActual.PermisoActual.ListaTrans(True)
        If Len(s) > 0 Then
            cond = cond & "(CodTrans " & s & ")"
        Else
            cond = cond & "(CodTrans = '-------')"    'Para que NO devuelva nada si no tiene ningún permiso  '*** MAKOTO 26/dic/00
        End If
    End If
    
    'Condición de NumTrans
    If (gobjCond.NumTrans1 > 0) And (gobjCond.NumTrans2 > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans BETWEEN " & gobjCond.NumTrans1 & " AND " & gobjCond.NumTrans2 & ")"
    ElseIf gobjCond.NumTrans1 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans>=" & gobjCond.NumTrans1 & ")"
    ElseIf gobjCond.NumTrans2 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans<=" & gobjCond.NumTrans2 & ")"
    End If
    
    'Condición de Estado
    If gobjCond.EstadoBool(ESTADO_NOAPROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_NOAPROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_APROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_APROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_DESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_DESPACHADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_ANULADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_ANULADO & ")"
    End If
    
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    
    'Ordern de filas
    If OrdenAscendente Then
'        sql = sql & " ORDER BY FechaTrans, TransID"         '*** MAKOTO 03/oct/00 Modificado para que salga más actual al primero
        sql = sql & " ORDER BY FechaTrans, HoraTrans, TransID"         '*** MAKOTO 07/dic/00 Modificado para HoraTrans
    Else
'        sql = sql & " ORDER BY FechaTrans DESC, TransID DESC"
        sql = sql & " ORDER BY FechaTrans DESC, HoraTrans DESC, TransID DESC"       '*** MAKOTO 07/dic/00 HoraTrans agregado
    End If
    'sql = "SELECT TransID, FechaTrans, CodAsiento, CodTrans, NumTrans, NumDocRef, Nombre, Descripcion, CodCentro,Estado FROM vwConsGNTrans  WHERE FechaTrans + HoraTrans BETWEEN '03/11/2002' AND '04/12/2002' AND (CodTrans='FC') AND (Estado<>3) ORDER BY FechaTrans, HoraTrans, TransID"
    Set rs = Me.OpenRecordset(sql)
    Set ConsGNTrans3 = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta General " & gobjCond.fecha1 + gobjCond.Hora1 & "-" & gobjCond.fecha2 + gobjCond.Hora2, "GN"
End Function
'Consulta de auditoria
'Condición : Fecha1, Fecha2, (CodUsuario, Modulo, CodAccion)
Public Function ConsGNAuditoria() As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    
    sql = "SELECT FechaHora, CodUsuario, CodAccion, Descripcion, Modulo, Equipo,UsuarioRed " & _
          "FROM GNLogAccion "
    
    
    'Condición de FechaTrans
    cond = "FechaHora BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & _
            " AND " & FechaYMD(gobjCond.fecha2 + 1, mProps.TipoDB)
    
    If gobjCond.CodTrans <> "TODOS" Then
        cond = cond & "AND CodAccion='" & gobjCond.CodTrans & "'"
    End If
    
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " ORDER BY FechaHora DESC"
    
    Set rs = Me.OpenRecordset(sql)
    Set ConsGNAuditoria = rs
    Set rs = Nothing
End Function

Public Function ConsRutaAuditoria() As Variant

    Dim sql As String, cond As String, s As String, rs As Recordset
    
    sql = "SELECT vwConsIVTrans.TransID, GNC.CodUsuario, vwConsIVTrans.FechaTrans + vwConsIVTrans.HoraTrans, " & _
          "vwConsIVTrans.CodTrans, vwConsIVTrans.NumTrans, GNT.Descripcion AS Establecimiento," & _
            "vwConsIVTrans.Descripcion, CodInventario, DescItem, vwConsIVTrans.CodBodega, vwConsIVTrans.Cantidad, "
    
    Select Case gobjCond.numMoneda
    Case 1: sql = sql & "CUR1 AS CUR, CTR1 AS CTR, PUR1 AS PUR,PTR1 AS PTR, "
    Case 2: sql = sql & "CUR1/vwConsIVTrans.Cotizacion2 AS CUR, CTR1/vwConsIVTrans.Cotizacion2 AS CTR, PUR1/vwConsIVTrans.Cotizacion2 AS PUR,PTR1/vwConsIVTrans.Cotizacion2 AS PTR, "
    Case 3: sql = sql & "CUR1/vwConsIVTrans.Cotizacion3 AS CUR, CTR1/vwConsIVTrans.Cotizacion3 AS CTR, PUR1/vwConsIVTrans.Cotizacion3 AS PUR,PTR1/vwConsIVTrans.Cotizacion3 AS PTR, "
    Case 4: sql = sql & "CUR1/vwConsIVTrans.Cotizacion4 AS CUR, CTR1/vwConsIVTrans.Cotizacion4 AS CTR, PUR1/vwConsIVTrans.Cotizacion4 AS PUR,PTR1/vwConsIVTrans.Cotizacion4 AS PTR, "
    End Select
    sql = sql & " vwConsIVTrans.Estado FROM gnTrans GNT Inner join " & _
         "(vwConsIVTrans inner join gncomprobante GNC on GNC.TransID = vwConsIvTrans.TransID) " & _
         " ON  GNT.CodTrans = gnc.CodTrans "
   
    
    'Condición de FechaTrans
    cond = "(vwConsIVTrans.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB) & ")"
    
    'Condición de CodTrans
'    If Len(gobjCond.CodTrans) > 0 Then
'        'Si está especificada una transacción
'        If Len(cond) > 0 Then cond = cond & " AND "
'        cond = cond & "(vwConsIVTrans.CodTrans='" & gobjCond.CodTrans & "')"
'    Else
        'Si no está especificada, selecciona SOLO a las que tiene acceso el usuario
        If Len(cond) > 0 Then cond = cond & " AND "
        s = gobjMain.GrupoActual.PermisoActual.ListaTrans(True)
        cond = cond & "(vwConsIVTrans.CodTrans " & s & ")"
'    End If
    
    
    
    If Len(gobjCond.Usuario1) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " GNC.CodUsuario BETWEEN '" & gobjCond.Usuario1 & _
                                        "' AND '" & gobjCond.Usuario2 & "'"
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE (" & cond & ")"
'    sql = sql & " ORDER BY FechaTrans, TransID, Orden"
'    sql = sql & " ORDER BY FechaTrans, TransID"     '*** MAKOTO 19/ago/2000 Faltaba ordenar
    sql = sql & " ORDER BY vwConsIVTrans.FechaTrans, vwConsIVTrans.HoraTrans, vwConsIVTrans.TransID, vwConsIVTrans.Orden"     '*** MAKOTO 07/dic/00
    
    Set rs = Me.OpenRecordset(sql)
    Set ConsRutaAuditoria = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Ruta de Auditoria ", "GN"
End Function

'Consulta de Accseo  a modulos
'Condición : Fecha1, Fecha2, Hora1, Hora2 , Usuario1, usuario2
'Resultado : FechaHora, CodUsuario, CodAccion, Descripcion, Modulo
Public Function ConsGNAccesoModulo() As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    
    sql = "SELECT FechaHora, CodUsuario, CodAccion, Descripcion, Modulo, Equipo " & _
          "FROM GNLogAccion "
    'Condición de FechaTrans
    cond = " (FechaHora BETWEEN " & _
                FechaYMD(gobjCond.fecha1 + gobjCond.Hora1, _
                gobjMain.EmpresaActual.TipoDB, True) & _
                " AND " & FechaYMD(gobjCond.fecha2 + gobjCond.Hora2, _
                gobjMain.EmpresaActual.TipoDB, True) & ") "
    
    If Len(gobjCond.Usuario1) > 0 Then
        cond = cond & " AND CodUsuario BETWEEN '" & gobjCond.Usuario1 & _
                                        "' AND '" & gobjCond.Usuario2 & "'"
    End If
    sql = sql & " WHERE " & cond
    sql = sql & " ORDER BY FechaHora DESC, CodUsuario"
    
    Set rs = Me.OpenRecordset(sql)
    Set ConsGNAccesoModulo = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Acceso a Modulos ", "GN"
End Function


'*** MAKOTO 13/dic/00
Public Function ConsGNVersion( _
                    ByVal TopN As Integer, _
                    ByVal Detallado As Boolean, _
                    ByVal BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
    If TopN > 0 Then
        sql = "SELECT Top " & TopN
    Else
        sql = "SELECT"
    End If
    
    If Detallado Then
        sql = sql & " Version, Fecha, Nombre, Comentario FROM GNVersion "
    Else
        sql = sql & " Version FROM GNVersion "
    End If
    
    sql = sql & " ORDER BY Version DESC"
    Set rs = Me.OpenRecordset(sql)
    
    If BandRS Then
        Set ConsGNVersion = rs
    Else
        ConsGNVersion = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

'Para Kardex de items
Public Function ConsIVKardex() As Variant
    Dim sql As String, cond As String, rs As Recordset
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsIVKardexPorFecha")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("prmCodBodega") = gobjCond.CodBodega1
    qdef.Parameters("CodItem1") = IIf(Len(gobjCond.CodItem1) = 0, "!", gobjCond.CodItem1)
    qdef.Parameters("CodItem2") = IIf(Len(gobjCond.CodItem2) = 0, String$(20, "z"), gobjCond.CodItem2)
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
     If Me.GNOpcion.IVKTipoDatoDouble Then
        sql = "spConsIVKardexPorFechaDou " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodBodega1 & "','" & _
                gobjCond.CodItem1 & "','" & _
                gobjCond.CodItem2 & "','" & _
                gobjCond.NombreItem & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB)
    Else
        sql = "spConsIVKardexPorFecha " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodBodega1 & "','" & _
                gobjCond.CodItem1 & "','" & _
                gobjCond.CodItem2 & "','" & _
                gobjCond.NombreItem & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB)
    End If

    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    Set ConsIVKardex = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Kardex inv. " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "IV"
End Function


'Consulta de comparación entre Presupuesto  y Consumos
Public Function ConsIVComparativo() As Variant
    Dim sql As String, cond As String, rs As Recordset
    
#If DAOLIB Then
'*** PENDIENTE EN DAO
'    Dim qdef As QueryDef
'    Set qdef = mdbEmpresa.QueryDefs("spConsIVComparativo")
'    qdef.Parameters("CodT") = gobjCond.CodTrans
'    qdef.Parameters("CodCC") = gobjCond.CodCentro1
'    qdef.Parameters("NumMoneda") = gobjCond.NumMoneda
'    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient

    sql = "spConsIVComparativo '" & _
                gobjCond.CodTrans & "', '" & _
                gobjCond.CodCentro1 & "', " & _
                gobjCond.numMoneda
'    sql = "spConsIVComparativoCC '" & _
'                gobjCond.CodTrans & "', '" & _
'                gobjCond.CodCentro1 & "', '" & _
'                gobjCond.CodCentro2 & "', '" & _
'                gobjCond.CodPC1 & "', '" & _
'                gobjCond.CodPC1 & "', '" & _
'                gobjCond.CodItem1 & "', '" & _
'                gobjCond.CodItem2 & "', " & _
'                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
'                FechaYMD(gobjCond.fecha2, TipoDB) & ", " & _
'               gobjCond.numMoneda & ", " & _
'                CadenaBool(gobjCond.IncluirCero, Me.TipoDB) 'IncluirCero True: Incluir Terminados
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    Set ConsIVComparativo = rs
    Set rs = Nothing
End Function

'*** MAKOTO 05/feb/01 Agregado
'Consulta de comparación entre Presupuesto  y Consumos Totalizado
Public Function ConsIVComparativo2() As Variant
    Dim sql As String, cond As String, rs As Recordset
    
#If DAOLIB Then
'*** PENDIENTE DAO
'    Dim qdef As QueryDef
'    Set qdef = mdbEmpresa.QueryDefs("spConsIVComparativoSuma")
'    qdef.Parameters("CodT") = gobjCond.CodTrans
'    qdef.Parameters("CodCC1") = gobjCond.CodCentro1
'    qdef.Parameters("CodCC2") = gobjCond.CodCentro2
'    qdef.Parameters("NumMoneda") = gobjCond.NumMoneda
'    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient

    sql = "spConsIVComparativoSuma '" & _
                gobjCond.CodTrans & "', '" & _
                gobjCond.CodCentro1 & "', '" & _
                gobjCond.CodCentro2 & "', " & _
                gobjCond.numMoneda & ", " & _
                CadenaBool(gobjCond.IncluirCero, Me.TipoDB) 'IncluirCero True: Incluir Terminados
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    Set ConsIVComparativo2 = rs
    Set rs = Nothing
End Function




'*** MAKOTO 24/sep/2000 Agregado
Public Function ConsPCKardexPorTrans(ByVal BandProveedor As Boolean, _
                                     ByVal BandCliente As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsPCKardexPorTrans")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodProvCli1") = IIf(Len(gobjCond.CodPC1) = 0, "!", gobjCond.CodPC1)
    qdef.Parameters("CodProvCli2") = IIf(Len(gobjCond.CodPC2) = 0, String$(20, "z"), gobjCond.CodPC2)
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    qdef.Parameters("prmBandProveedor") = BandProveedor
    qdef.Parameters("prmBandCliente") = BandCliente
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient

    If gobjMain.GrupoActual.PermisoActual.ConsRepVen And BandCliente Then
        sql = "spConsPCKardexPorTransVen " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodPC1 & "','" & _
                gobjCond.CodPC2 & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB) & "," & _
                CadenaBool(BandProveedor, TipoDB) & "," & _
                CadenaBool(BandCliente, TipoDB) & ",'" & _
                gobjMain.UsuarioActual.codUsuario & "'"
    Else
        sql = "spConsPCKardexPorTrans " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodPC1 & "','" & _
                gobjCond.CodPC2 & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB) & "," & _
                CadenaBool(BandProveedor, TipoDB) & "," & _
                CadenaBool(BandCliente, TipoDB)
    End If
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    Set ConsPCKardexPorTrans = rs
    Set rs = Nothing
End Function



'*** MAKOTO 13/jul/2000 Cambio para aceptar rango de fechas
Public Function ConsPCKardex(ByVal BandProveedor As Boolean, _
                             ByVal BandCliente As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsPCKardexPorFecha")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodProvCli1") = IIf(Len(gobjCond.CodPC1) = 0, "!", gobjCond.CodPC1)
    qdef.Parameters("CodProvCli2") = IIf(Len(gobjCond.CodPC2) = 0, String$(20, "z"), gobjCond.CodPC2)
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    qdef.Parameters("prmBandProveedor") = BandProveedor
    qdef.Parameters("prmBandCliente") = BandCliente
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient

    If gobjMain.GrupoActual.PermisoActual.ConsRepVen And BandCliente Then
        sql = "spConsPCKardexPorFechaVen " & _
                    gobjCond.numMoneda & ",'" & _
                gobjCond.CodPC1 & "','" & _
                gobjCond.CodPC2 & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB) & "," & _
                CadenaBool(BandProveedor, TipoDB) & "," & _
                CadenaBool(BandCliente, TipoDB) & ",'" & _
                gobjMain.UsuarioActual.codUsuario & "'"
    Else
        sql = "spConsPCKardexPorFecha " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodPC1 & "','" & _
                gobjCond.CodPC2 & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB) & "," & _
                CadenaBool(BandProveedor, TipoDB) & "," & _
                CadenaBool(BandCliente, TipoDB)
    End If
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    Set ConsPCKardex = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Kardex Prov-Cli ", "PC"
End Function
    

Public Function ConsPCSaldo(ByVal BandProveedor As Boolean, _
                            ByVal BandCliente As Boolean) As Variant
    Dim sql As String, cond As String, rs As Recordset, CodForma As String

#If DAOLIB Then
    '*** MAKOTO 25/ene/01 Modificado para usar spConsPCSaldo2 con Fecha de corte
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsPCSaldo2")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodPC1") = IIf(Len(gobjCond.CodPC1) = 0, "!", gobjCond.CodPC1)
    qdef.Parameters("CodPC2") = IIf(Len(gobjCond.CodPC2) = 0, String$(20, "z"), gobjCond.CodPC2)
    qdef.Parameters("FechaCorte") = gobjCond.FechaCorte
    qdef.Parameters("prmBandProveedor") = BandProveedor
    qdef.Parameters("prmBandCliente") = BandCliente
    qdef.Parameters("prmBandSaldoCero") = gobjCond.IncluirCero
    qdef.Parameters("prmTipoSaldo") = gobjCond.TipoSaldo
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    '*** MAKOTO 13/mar/01 Mod. NumPCGrupo y CodPCGrupo agregado.
        Select Case gobjCond.TipoSaldo
        Case 0
            If gobjMain.GrupoActual.PermisoActual.ConsRepVen And BandCliente Then
                sql = "spConsPCSaldo2Ven "
            Else
                sql = "spConsPCSaldo2 "
            End If
        Case 1
            If BandCliente Then
                sql = "spConsPCSaldoAnticiposCli "
                CodForma = Me.GNOpcion.ObtenerValor("FormaPagoAnticipo")
            Else
                sql = "spConsPCSaldoAnticiposProv "
                CodForma = Me.GNOpcion.ObtenerValor("FormaCobroAnticipo")
            End If
        Case 2
            'sql = "spConsPCSaldoXCobrar "
            If BandCliente Then
                sql = "spConsPCSaldoXCobrarCli "
                CodForma = Me.GNOpcion.ObtenerValor("FormaPagoAnticipo")
            Else
                sql = "spConsPCSaldoXCobrarProv "
                CodForma = Me.GNOpcion.ObtenerValor("FormaCobroAnticipo")
            End If
        
    

        End Select
    
    gobjCond.CodPC1 = ""
    gobjCond.CodPC2 = ""
    
            sql = sql & CadenaBool(BandProveedor, TipoDB) & ", " & _
            CadenaBool(BandCliente, TipoDB) & ", " & _
            gobjCond.numMoneda & ", '" & _
            gobjCond.CodPC1 & "', '" & _
            gobjCond.CodPC2 & "', " & _
            CadenaBool(gobjCond.IncluirCero, TipoDB) & ", " & _
            FechaYMD(gobjCond.FechaCorte, TipoDB) & ", " & _
            gobjCond.NumPCGrupo & ", '" & _
            gobjCond.CodPCGrupo & "'," & _
            gobjCond.TipoSaldo
'            If gobjCond.TipoSaldo <> 0 Then
'                sql = sql & ",'" & gobjCond.TipoSaldo & "'"
'            End If
            If gobjCond.TipoSaldo = 2 Then
                  sql = sql & ",''"
            End If
            If gobjMain.GrupoActual.PermisoActual.ConsRepVen And BandCliente Then
                sql = sql & ",'" & gobjMain.UsuarioActual.codUsuario & "'"
            End If


    Set rs = Me.OpenRecordset(sql)
    UltimoRecordset rs
#End If
    
    Set ConsPCSaldo = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Saldos ProvCli " & gobjCond.FechaCorte, "PC"
End Function
    

Public Function ConsPCSaldoFormaCobro(ByVal BandProveedor As Boolean, _
                            ByVal BandCliente As Boolean, LogAccion As Boolean) As Variant
    'Parametro LogAccion  para grabar  o no un registro en logaccion
    Dim sql As String, cond As String, rs As Recordset

    '*** MAKOTO 13/mar/01 Mod. NumPCGrupo y CodPCGrupo agregado.
    sql = "spConsPCSaldoformaCobro " & _
            CadenaBool(BandProveedor, TipoDB) & ", " & _
            CadenaBool(BandCliente, TipoDB) & ", " & _
            gobjCond.numMoneda & ", '" & _
            gobjCond.CodPC1 & "', '" & _
            gobjCond.CodPC2 & "', " & _
            CadenaBool(gobjCond.IncluirCero, TipoDB) & ", " & _
            FechaYMD(gobjCond.FechaCorte, TipoDB) & ", " & _
            gobjCond.NumPCGrupo & ", '" & _
            gobjCond.CodPCGrupo & "', 0"
    Set rs = Me.OpenRecordset(sql)
    UltimoRecordset rs

    Set ConsPCSaldoFormaCobro = rs
    Set rs = Nothing
    If LogAccion Then
        Me.GrabaGNLogAccion "CONSULTA", "Consulta Saldos ProvCli con FormaCobro " & gobjCond.FechaCorte, "PC"
    End If
    
End Function







'Para selección de documentos por cobrar/pagar
Public Function ConsTSPorCobrarPagar(ByVal PorCobrar As Boolean, _
                                     ByVal CodProvcli As String, _
                                     ByVal FechaVenci As Date, _
                                     ByVal CodForma As String, _
                                     ByVal CodMoneda As String) As Variant
    'Llama a la nueva función con los mismos parámetros sin CodGrupo1   '*** MAKOTO 20/oct/00
    Set ConsTSPorCobrarPagar = ConsTSPorCobrarPagar2( _
                            PorCobrar, _
                            CodProvcli, _
                            FechaVenci, _
                            CodForma, _
                            CodMoneda, _
                            "")
End Function

Public Function ConsTSPorCobrarPagar2( _
                    ByVal PorCobrar As Boolean, _
                    ByVal CodProvcli As String, _
                    ByVal FechaVenci As Date, _
                    ByVal CodForma As String, _
                    ByVal CodMoneda As String, _
                    ByVal CodGrupo1 As String) As Variant
    Dim aux_codpc As String, aux_f1 As Date, aux_f2 As Date
    Dim aux_PorCobrar As Boolean, aux_Cliente As Boolean, aux_Proveedor As Boolean
    Dim aux_CodForma As String, aux_CodMoneda As String, aux_codgrupo As String
    Dim aux_incluircero As Boolean
    
    With gobjMain.objCondicion
        'Conservar valores actuales para que no afecte a otras consultas
        aux_codpc = .CodPC1
        aux_f1 = .fecha1
        aux_f2 = .fecha2
        aux_PorCobrar = .PorCobrar
        aux_Cliente = .Cliente
        aux_Proveedor = .Proveedor
        aux_CodForma = .CodForma
        aux_CodMoneda = .CodMoneda
        aux_codgrupo = .CodGrupo
        aux_incluircero = .IncluirCero
    
        .PorCobrar = PorCobrar
        .Cliente = True
        .Proveedor = True
        .CodPC1 = CodProvcli
        .fecha1 = Me.GNOpcion.FechaInicio
        .fecha2 = FechaVenci
        .CodForma = CodForma
        .CodMoneda = CodMoneda
        .CodGrupo = CodGrupo1
        .IncluirCero = False
        
        Set ConsTSPorCobrarPagar2 = ConsTSPorCobrarPagar4()
        
        'Recuperar valores reservados
        .CodPC1 = aux_codpc
        .fecha1 = aux_f1
        .fecha2 = aux_f2
        .PorCobrar = aux_PorCobrar
        .Cliente = aux_Cliente
        .Proveedor = aux_Proveedor
        .CodForma = aux_CodForma
        .CodMoneda = aux_CodMoneda
        .CodGrupo = aux_codgrupo
        .IncluirCero = aux_incluircero
    End With
End Function

'*** MAKOTO 20/oct/00 Agregado para aumentar la condición de tipo de prov/cli
'Para selección de documentos por cobrar/pagar
Public Function ConsTSPorCobrarPagar3() As Variant
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim objCond As Condicion
    
    Set objCond = gobjMain.objCondicion
    
    'Si no está especificada la moneda, coge la Moneda predeterminada
    If Len(objCond.CodMoneda) = 0 Then objCond.CodMoneda = MONEDA_PRE
    numMoneda = Me.GNOpcion.IndiceMoneda(objCond.CodMoneda)
    
#If DAOLIB Then
    sql = "SELECT Id, CodProvCli, Nombre, TransID, CodTrans, Trans, CodForma,NumLetra, Doc, "
    Select Case numMoneda
    Case 1:  sql = sql & "Valor1 AS Valor, VCancelado1 AS VCancelado, " & _
                          "Valor1-VCancelado1 AS Saldo, CodMoneda, Cancela, 1 AS Cotizacion, "
    Case 2:  sql = sql & "Valor2 AS Valor, VCancelado2 AS VCancelado, " & _
                          "Valor2-VCancelado2 AS Saldo, CodMoneda, Cancela, Cotizacion2 AS Cotizacion, "
    Case 3:  sql = sql & "Valor3 AS Valor, VCancelado3 AS VCancelado, " & _
                          "Valor3-VCancelado3 AS Saldo, CodMoneda, Cancela, Cotizacion3 AS Cotizacion, "
    Case 4:  sql = sql & "Valor4 AS Valor, VCancelado4 AS VCancelado, " & _
                          "Valor4-VCancelado4 AS Saldo, CodMoneda, Cancela, Cotizacion4 AS Cotizacion, "
    End Select
    sql = sql & "FechaEmision, Plazo, FechaVenci "
    If objCond.PorCobrar Then
        sql = sql & " FROM vwConsPCPorCobrar "
    Else
        sql = sql & " FROM vwConsPCPorPagar "
    End If
    
    'Solo los que tengan saldo >0   (Necesario)
    cond = "(Valor" & objCond.numMoneda & ">VCancelado" & objCond.numMoneda & ")"
    
    'Condición de FechaVenci    (Necesario)             '*** MAKOTO 10/dic/00 Modificado
    cond = cond & " AND (FechaVenci BETWEEN " & _
                    FechaYMD(objCond.fecha1, TipoDB) & " AND " & _
                    FechaYMD(objCond.fecha2, TipoDB) & ")"
    
    'Condición de CodMoneda     (Necesario)
    If Len(cond) > 0 Then cond = cond & " AND "
    cond = cond & "(CodMoneda='" & Me.GNOpcion.CodMoneda(numMoneda) & "')"
    
    'Condición de CodProvCli    (Opcional)
    If Len(objCond.CodPC1) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodProvCli='" & objCond.CodPC1 & "')"
    End If
    
    'Condición de CodForma    (Opcional)
    If Len(objCond.CodForma) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodForma='" & objCond.CodForma & "')"
    End If
    
    'Condición de Cod. Grupo1 de prov/cliente (Opcional)
    If Len(objCond.CodGrupo) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodGrupo1='" & objCond.CodGrupo & "')"
    End If
    
    'Condición de si incluir cliente/proveedor          '*** MAKOTO 10/dic/00
    If Len(cond) > 0 Then cond = cond & " AND "
    cond = cond & "(BandCliente=" & CadenaBool(objCond.Cliente, TipoDB) & _
                    " OR BandProveedor=" & CadenaBool(objCond.Proveedor, TipoDB) & ")"
    
    If Len(cond) > 0 Then sql = sql & " WHERE (" & cond & ")"
    sql = sql & " ORDER BY CodProvCli,FechaVenci"
#Else
    If gobjMain.GrupoActual.PermisoActual.ConsRepVen And objCond.Cliente Then
        sql = "spConsTSPorCobrarPagarVen " & numMoneda & ", " & _
                objCond.CodMoneda & "," & _
                CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                CadenaBool(objCond.Cliente, TipoDB) & "," & _
                CadenaBool(objCond.Proveedor, TipoDB) & "," & _
                FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                objCond.CodPC1 & "','" & _
                objCond.CodPC1 & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodGrupo & "'," & IIf(Me.GNOpcion.Los100DocCobroPago, 1, 0)
            sql = sql & ",'" & gobjMain.UsuarioActual.codUsuario & "'"
    Else
        sql = "spConsTSPorCobrarPagar " & numMoneda & ", " & _
                objCond.CodMoneda & "," & _
                CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                CadenaBool(objCond.Cliente, TipoDB) & "," & _
                CadenaBool(objCond.Proveedor, TipoDB) & "," & _
                FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                objCond.CodPC1 & "','" & _
                objCond.CodPC1 & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodGrupo & "'," & IIf(Me.GNOpcion.Los100DocCobroPago, 1, 0)
    End If
#End If
    Set rs = Me.OpenRecordset(sql)
    Set ConsTSPorCobrarPagar3 = rs
    Set rs = Nothing
    Set objCond = Nothing
End Function

'Diego 12/20/2003
Public Function ConsPCPorCobrarPagar_NumDiasVencidos( _
                    ByVal PorCobrar As Boolean, _
                    ByVal CodProvcli As String, _
                    ByVal FechaVenci As Date, _
                    ByVal CodForma As String, _
                    ByVal CodMoneda As String, _
                    ByVal NumdiasVencidos As Integer) As Variant
    'Consulta para limite de credito por numero de dias vencidos
    Dim aux_codpc As String, aux_f1 As Date, aux_f2 As Date
    Dim aux_PorCobrar As Boolean, aux_Cliente As Boolean, aux_Proveedor As Boolean
    Dim aux_CodForma As String, aux_CodMoneda As String, aux_codgrupo As String
    Dim aux_incluircero As Boolean, sql  As String, rs As Recordset
    Dim numMoneda As Integer
    
    'Si no está especificada la moneda, coge la Moneda predeterminada
    If Len(gobjMain.objCondicion.CodMoneda) = 0 Then gobjMain.objCondicion.CodMoneda = MONEDA_PRE
    numMoneda = Me.GNOpcion.IndiceMoneda(gobjMain.objCondicion.CodMoneda)
    
    With gobjMain.objCondicion
        'Conservar valores actuales para que no afecte a otras consultas
        If Len(.CodPC1) = 0 Then
        Else
        End If
        aux_codpc = .CodPC1
        aux_f1 = .fecha1
        aux_f2 = .fecha2
        aux_PorCobrar = .PorCobrar
        aux_Cliente = .Cliente
        aux_Proveedor = .Proveedor
        aux_CodForma = .CodForma
        aux_CodMoneda = .CodMoneda
        aux_codgrupo = .CodGrupo
        aux_incluircero = .IncluirCero
            
        .PorCobrar = PorCobrar
        .Cliente = True
        .Proveedor = True
        .CodPC1 = CodProvcli
        .fecha1 = Me.GNOpcion.FechaInicio
        .fecha2 = FechaVenci
        .CodForma = CodForma
        .CodMoneda = CodMoneda
        .IncluirCero = False
        
        If Not Me.GNOpcion.BandCHP Then
            sql = "spConsPCPorCobrarPagar_NumDiasVencidos " & numMoneda & ", " & _
                        .CodMoneda & "," & _
                        CadenaBool(.PorCobrar, TipoDB) & "," & _
                        CadenaBool(False, TipoDB) & "," & _
                        CadenaBool(.Cliente, TipoDB) & "," & _
                        CadenaBool(.Proveedor, TipoDB) & "," & _
                        FechaYMD(.fecha2, TipoDB) & ",'" & _
                        .CodPC1 & "','" & _
                        .CodPC1 & "','" & _
                        .CodForma & "','" & _
                        .CodForma & "'," & _
                         IIf(Me.GNOpcion.Los100DocCobroPago, 1, 0) & ", " & NumdiasVencidos
        Else
            sql = "spConsPCPorCobrarPagar_NumDiasVencidosCHP " & numMoneda & ", " & _
                        .CodMoneda & "," & _
                        CadenaBool(.PorCobrar, TipoDB) & "," & _
                        CadenaBool(False, TipoDB) & "," & _
                        CadenaBool(.Cliente, TipoDB) & "," & _
                        CadenaBool(.Proveedor, TipoDB) & "," & _
                        FechaYMD(.fecha2, TipoDB) & ",'" & _
                        .CodPC1 & "','" & _
                        .CodPC1 & "','" & _
                        .CodForma & "','" & _
                        .CodForma & "'," & _
                         IIf(Me.GNOpcion.Los100DocCobroPago, 1, 0) & ", " & NumdiasVencidos
        
        End If
        Set rs = Me.OpenRecordset(sql)
        Set ConsPCPorCobrarPagar_NumDiasVencidos = rs
        Set rs = Nothing
        'Set objCond = Nothing
        
        'Recuperar valores reservados
        .CodPC1 = aux_codpc
        .fecha1 = aux_f1
        .fecha2 = aux_f2
        .PorCobrar = aux_PorCobrar
        .Cliente = aux_Cliente
        .Proveedor = aux_Proveedor
        .CodForma = aux_CodForma
        .CodMoneda = aux_CodMoneda
        .IncluirCero = aux_incluircero
    End With
End Function


Public Function ConsTSPorCobrarPagar_SinEfectivos( _
                    ByVal PorCobrar As Boolean, _
                    ByVal CodProvcli As String, _
                    ByVal FechaVenci As Date, _
                    ByVal CodForma As String, _
                    ByVal CodMoneda As String, _
                    ByVal CodGrupo1 As String) As Variant
    Dim aux_codpc As String, aux_f1 As Date, aux_f2 As Date
    Dim aux_PorCobrar As Boolean, aux_Cliente As Boolean, aux_Proveedor As Boolean
    Dim aux_CodForma As String, aux_CodMoneda As String, aux_codgrupo As String
    Dim aux_incluircero As Boolean
    
    With gobjMain.objCondicion
        'Conservar valores actuales para que no afecte a otras consultas
        aux_codpc = .CodPC1
        aux_f1 = .fecha1
        aux_f2 = .fecha2
        aux_PorCobrar = .PorCobrar
        aux_Cliente = .Cliente
        aux_Proveedor = .Proveedor
        aux_CodForma = .CodForma
        aux_CodMoneda = .CodMoneda
        aux_codgrupo = .CodGrupo
        aux_incluircero = .IncluirCero
            
        .PorCobrar = PorCobrar
        .Cliente = True
        .Proveedor = True
        .CodPC1 = CodProvcli
        .fecha1 = Me.GNOpcion.FechaInicio
        .fecha2 = FechaVenci
        .CodForma = CodForma
        .CodMoneda = CodMoneda
        .CodGrupo = CodGrupo1
        .IncluirCero = False
        
        
        Set ConsTSPorCobrarPagar_SinEfectivos = ConsTSPorCobrarPagar4()
        
        'Recuperar valores reservados
        .CodPC1 = aux_codpc
        .fecha1 = aux_f1
        .fecha2 = aux_f2
        .PorCobrar = aux_PorCobrar
        .Cliente = aux_Cliente
        .Proveedor = aux_Proveedor
        .CodForma = aux_CodForma
        .CodMoneda = aux_CodMoneda
        .CodGrupo = aux_codgrupo
        .IncluirCero = aux_incluircero
    End With
End Function

'*** PARA SACAR LOS DOCUMENTOS PENDIENTES, PERO TENIENDO EN CUENTA QUE LAS FORMA  DE COBRO PAGO
' QUE SE CONSIDERAN COMO EFECTIVO , NO TAS TOME EN CUENTA
Public Function ConsTSPorCobrarPagar4() As Variant
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim objCond As Condicion
    
    Set objCond = gobjMain.objCondicion
    
    'Si no está especificada la moneda, coge la Moneda predeterminada
    If Len(objCond.CodMoneda) = 0 Then objCond.CodMoneda = MONEDA_PRE
    numMoneda = Me.GNOpcion.IndiceMoneda(objCond.CodMoneda)
    
#If DAOLIB Then
    sql = "SELECT Id, CodProvCli, Nombre, TransID, CodTrans, Trans, CodForma,NumLetra, Doc, "
    Select Case numMoneda
    Case 1:  sql = sql & "Valor1 AS Valor, VCancelado1 AS VCancelado, " & _
                          "Valor1-VCancelado1 AS Saldo, CodMoneda, Cancela, 1 AS Cotizacion, "
    Case 2:  sql = sql & "Valor2 AS Valor, VCancelado2 AS VCancelado, " & _
                          "Valor2-VCancelado2 AS Saldo, CodMoneda, Cancela, Cotizacion2 AS Cotizacion, "
    Case 3:  sql = sql & "Valor3 AS Valor, VCancelado3 AS VCancelado, " & _
                          "Valor3-VCancelado3 AS Saldo, CodMoneda, Cancela, Cotizacion3 AS Cotizacion, "
    Case 4:  sql = sql & "Valor4 AS Valor, VCancelado4 AS VCancelado, " & _
                          "Valor4-VCancelado4 AS Saldo, CodMoneda, Cancela, Cotizacion4 AS Cotizacion, "
    End Select
    sql = sql & "FechaEmision, Plazo, FechaVenci "
    If objCond.PorCobrar Then
        sql = sql & " FROM vwConsPCPorCobrar "
    Else
        sql = sql & " FROM vwConsPCPorPagar "
    End If
    
    'Solo los que tengan saldo >0   (Necesario)
    cond = "(Valor" & objCond.numMoneda & ">VCancelado" & objCond.numMoneda & ")"
    
    'Condición de FechaVenci    (Necesario)             '*** MAKOTO 10/dic/00 Modificado
    cond = cond & " AND (FechaVenci BETWEEN " & _
                    FechaYMD(objCond.fecha1, TipoDB) & " AND " & _
                    FechaYMD(objCond.fecha2, TipoDB) & ")"
    
    'Condición de CodMoneda     (Necesario)
    If Len(cond) > 0 Then cond = cond & " AND "
    cond = cond & "(CodMoneda='" & Me.GNOpcion.CodMoneda(numMoneda) & "')"
    
    'Condición de CodProvCli    (Opcional)
    If Len(objCond.CodPC1) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodProvCli='" & objCond.CodPC1 & "')"
    End If
    
    'Condición de CodForma    (Opcional)
    If Len(objCond.CodForma) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodForma='" & objCond.CodForma & "')"
    End If
    
    'Condición de Cod. Grupo1 de prov/cliente (Opcional)
    If Len(objCond.CodGrupo) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodGrupo1='" & objCond.CodGrupo & "')"
    End If
    
    'Condición de si incluir cliente/proveedor          '*** MAKOTO 10/dic/00
    If Len(cond) > 0 Then cond = cond & " AND "
    cond = cond & "(BandCliente=" & CadenaBool(objCond.Cliente, TipoDB) & _
                    " OR BandProveedor=" & CadenaBool(objCond.Proveedor, TipoDB) & ")"
    
    If Len(cond) > 0 Then sql = sql & " WHERE (" & cond & ")"
    sql = sql & " ORDER BY CodProvCli,FechaVenci"
    
#Else
    If Not Me.GNOpcion.BandCHP Then
        sql = "spConsTSPorCobrarPagar_EfectivoSINO " & numMoneda & ", " & _
                    objCond.CodMoneda & "," & _
                    CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                    CadenaBool(False, TipoDB) & "," & _
                    CadenaBool(objCond.Cliente, TipoDB) & "," & _
                    CadenaBool(objCond.Proveedor, TipoDB) & "," & _
                    FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                    objCond.CodPC1 & "','" & _
                    objCond.CodPC1 & "','" & _
                    objCond.CodForma & "','" & _
                    objCond.CodForma & "','" & _
                    objCond.CodGrupo & "'," & IIf(Me.GNOpcion.Los100DocCobroPago, 1, 0)
    Else
        sql = "spConsTSPorCobrarPagar_EfectivoSINOCHP " & numMoneda & ", " & _
                    objCond.CodMoneda & "," & _
                    CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                    CadenaBool(False, TipoDB) & "," & _
                    CadenaBool(objCond.Cliente, TipoDB) & "," & _
                    CadenaBool(objCond.Proveedor, TipoDB) & "," & _
                    FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                    objCond.CodPC1 & "','" & _
                    objCond.CodPC1 & "','" & _
                    objCond.CodForma & "','" & _
                    objCond.CodForma & "','" & _
                    objCond.CodGrupo & "'," & IIf(Me.GNOpcion.Los100DocCobroPago, 1, 0)
    
    End If
#End If
    Set rs = Me.OpenRecordset(sql)
    Set ConsTSPorCobrarPagar4 = rs
    Set rs = Nothing
    Set objCond = Nothing
End Function


Public Function ConsTSKardex() As Variant
    Dim sql As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsTSKardexPorFecha")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodBanco1") = IIf(Len(gobjCond.CodBanco1) = 0, "!", gobjCond.CodBanco1)
    qdef.Parameters("CodBanco2") = IIf(Len(gobjCond.CodBanco2) = 0, String$(20, "z"), gobjCond.CodBanco2)
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
'    qdef.Parameters("CodTrans") = gobjCond.CodTrans
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient

    sql = "spConsTSKardexPorFecha " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodBanco1 & "','" & _
                gobjCond.CodBanco2 & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB) & ", '" & _
                gobjCond.CodTrans & "'"             '*** MAKOTO 13/mar/01 Agregado
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    Set ConsTSKardex = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons. Kardex Bancos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "TS"
End Function
    
'*** MAKOTO 15/feb/01 Agregado
Public Function ConsTSKardexRet() As Variant
    Dim sql As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsTSKardexRetPorFecha")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodBanco1") = IIf(Len(gobjCond.CodBanco1) = 0, "!", gobjCond.CodBanco1)
    qdef.Parameters("CodBanco2") = IIf(Len(gobjCond.CodBanco2) = 0, String$(20, "z"), gobjCond.CodBanco2)
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient

    sql = "spConsTSKardexRetPorFecha " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodRetencion1 & "','" & _
                gobjCond.CodRetencion2 & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB)
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    Set ConsTSKardexRet = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons. Kardex Retencion " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "TS"
End Function
    
'*** MAKOTO 06/feb/01 Agregado
Public Function ConsTSConciliacion() As Variant
    Dim sql As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsTSConciliacion")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodBanco") = gobjCond.CodBanco1
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient

    sql = "spConsTSConciliacion " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodBanco1 & "', " & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB)
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    ConsTSConciliacion = MiGetRows(rs)
    Set rs = Nothing
End Function



Public Function ConsTSSaldo() As Variant
    Dim sql As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsTSSaldo")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodBanco1") = IIf(Len(gobjCond.CodBanco1) = 0, "!", gobjCond.CodBanco1)
    qdef.Parameters("CodBanco2") = IIf(Len(gobjCond.CodBanco2) = 0, String$(20, "z"), gobjCond.CodBanco2)
    qdef.Parameters("FechaCorte") = gobjCond.FechaCorte
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    sql = "spConsTSSaldo " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodBanco1 & "','" & _
                gobjCond.CodBanco2 & "'," & _
                FechaYMD(gobjCond.FechaCorte, TipoDB)
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    Set ConsTSSaldo = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons. Saldo Bancos ", "TS"
End Function


'Public Function ConsTSSaldo() As Variant
'    Dim sql As String, cond As String, rs As Recordset
'
'    sql = "SELECT CodBanco, Banco, "
'    Select Case gobjCond.NumMoneda
'    Case 1: sql = sql & "Debe1 AS Debe, Haber1 AS Haber, Saldo1 AS Saldo "
'    Case 2: sql = sql & "Debe2 AS Debe, Haber2 AS Haber, Saldo2 AS Saldo "
'    Case 3: sql = sql & "Debe3 AS Debe, Haber3 AS Haber, Saldo3 AS Saldo "
'    Case 4: sql = sql & "Debe4 AS Debe, Haber4 AS Haber, Saldo4 AS Saldo "
'    End Select
'    sql = sql & " FROM vwConsTSSaldo "
'
'    'Condición de CodBanco
'    If (Len(gobjCond.CodBanco1) > 0) And (Len(gobjCond.CodBanco2) > 0) Then
'        If Len(cond) > 0 Then cond = cond & " AND "
'        cond = cond & "(CodBanco BETWEEN '" & gobjCond.CodBanco1 & "' AND '" & gobjCond.CodBanco2 & "')"
'    ElseIf Len(gobjCond.CodBanco1) > 0 Then
'        If Len(cond) > 0 Then cond = cond & " AND "
'        cond = cond & "(CodBanco>='" & gobjCond.CodBanco1 & "')"
'    ElseIf Len(gobjCond.CodBanco2) > 0 Then
'        If Len(cond) > 0 Then cond = cond & " AND "
'        cond = cond & "(CodBanco<='" & gobjCond.CodBanco2 & "')"
'    End If
'
'
'    If Len(cond) > 0 Then sql = sql & " WHERE (" & cond & ")"
'    sql = sql & " ORDER BY CodBanco"
'
'    Set rs = Me.OpenRecordset(sql)
'    Set ConsTSSaldo = rs
'    Set rs = Nothing
'End Function




'Cobros/Pagos por transacción
Public Function ConsPCCobroPago(ByVal BandProveedor As Boolean) As Variant
    Dim sql As String, cond As String, NumMon As Integer, cot As String
    Dim rs As Recordset
    
#If DAOLIB Then
    sql = "SELECT TIDOrigen,CodProvCli, Nombre, FechaOrigen, " & _
          "CodTOrigen, CodTOrigen & NumTOrigen AS Trans, DescOrigen,IDOrigen, "
    Select Case gobjCond.numMoneda
    Case 1: cot = ""
    Case 2: cot = "/CotizacionA2"
    Case 3: cot = "/CotizacionA3"
    Case 4: cot = "/CotizacionA4"
    End Select
    If BandProveedor Then
        sql = sql & "(Haber0-Debe0)" & cot & " AS Valor, (DebeCancela-HaberCancela)" & cot & " AS VCancela, "
    Else
        sql = sql & "(Debe0-Haber0)" & cot & " AS Valor, (HaberCancela-DebeCancela)" & cot & " AS VCancela, "
    End If
    sql = sql & "0 AS Saldo,CodForma & NumL AS DocOrigen, FechaVenciOrigen, " & _
                "FechaCancela,TIDCancela,CodTCancela,CodTCancela & NumTCancela AS TransCancela, " & _
                "EstadoOrigen FROM vwConsPCCobroPago"
    
    'Proveedor/Cliente
    If BandProveedor Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = "(BandProveedor=" & CadenaBool(True, TipoDB) & ")"
    Else
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = "(BandCliente=" & CadenaBool(True, TipoDB) & ")"
    End If
    
    'Condición de FechaVenci
'    If Len(cond)> 0 Then cond = cond & " AND "
'    cond = cond & " AND FechaVenci<=" & FechaYMD(FechaVenci, TipoDB)
    
    'Condición de CodPCProvCli
    If (Len(gobjCond.CodPC1) > 0) And (Len(gobjCond.CodPC2) > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodProvCli BETWEEN '" & gobjCond.CodPC1 & "' AND '" & gobjCond.CodPC2 & "')"
    ElseIf Len(gobjCond.CodPC1) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodProvCli>='" & gobjCond.CodPC1 & "')"
    ElseIf Len(gobjCond.CodPC2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodProvCli<='" & gobjCond.CodPC2 & "')"
    End If
    
    If Len(cond) > 0 Then sql = sql & " WHERE (" & cond & ")"
    sql = sql & " ORDER BY CodProvCli, FechaVenciOrigen"
    
    Set rs = mdbEmpresa.OpenRecordset(sql, dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
        
        If Not gobjMain.GrupoActual.PermisoActual.ConsRepVen Then
           sql = "spConsPCCobroPago " & gobjCond.numMoneda & ", " & _
                CadenaBool(BandProveedor, TipoDB) & ",'" & _
                gobjCond.CodPC1 & "','" & _
                gobjCond.CodPC2 & "'"
        Else
            sql = "spConsPCCobroPagoven " & gobjCond.numMoneda & ", " & _
                CadenaBool(BandProveedor, TipoDB) & ",'" & _
                gobjCond.CodPC1 & "','" & _
                gobjCond.CodPC2 & "'" & _
                ",'" & gobjMain.UsuarioActual.codUsuario & "'"
        End If
    rs.Open sql, mcnEmpresa, adOpenStatic, adLockReadOnly
#End If
    Set ConsPCCobroPago = rs
    Set rs = Nothing
End Function



'Para consulta de proyección de cobros/pagos
Public Function ConsPCProyCobroPago(ByVal BandPorCobrar As Boolean) As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim sql1 As String, sql2 As String, sql3 As String, sql4 As String
    Dim campo As String, campo2 As String

#If DAOLIB Then
    'Por Cobrar o Por Pagar
    cond = IIf(BandPorCobrar, " AND (PorCobrar=True)", " AND (PorCobrar=False)")
    
    sql = "SELECT TransID,CodProvCli, Nombre, " & _
          "FechaTrans,CodTrans, CodTrans & NumTrans AS Trans, CodForma & NumLetra AS Doc, " & _
          "FechaVenci, DateDiff('d', FechaVenci," & FechaYMD(gobjCond.FechaCorte, TipoDB) & ") AS NumD,"
    
    campo = "Saldo" & gobjCond.numMoneda
    campo2 = IIf(gobjCond.numMoneda = 1, "1", "Cotizacion" & gobjCond.numMoneda)
    
    'Condición de CodPCProvCli
    If (Len(gobjCond.CodPC1) > 0) And (Len(gobjCond.CodPC2) > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodProvCli BETWEEN '" & gobjCond.CodPC1 & "' AND '" & gobjCond.CodPC2 & "')"
    ElseIf Len(gobjCond.CodPC1) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodProvCli>='" & gobjCond.CodPC1 & "')"
    ElseIf Len(gobjCond.CodPC2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodProvCli<='" & gobjCond.CodPC2 & "')"
    End If
    
    sql1 = sql & campo & " AS V1,' ' AS V2,' ' AS V3,' ' AS V4, Estado FROM vwConsPCProyCobroPago " & _
          " WHERE (" & campo & ">0) AND (FechaVenci <=" & FechaYMD(gobjCond.FechaCorte + gobjCond.NumDias1, TipoDB) & ")" & cond
    sql2 = sql & "' ' AS V1," & campo & " AS V2,' ' AS V3,' ' AS V4, Estado FROM vwConsPCProyCobroPago " & _
          " WHERE (" & campo & ">0) AND (FechaVenci BETWEEN " & FechaYMD(gobjCond.FechaCorte + gobjCond.NumDias1 + 1, TipoDB) & _
                    " AND " & FechaYMD(gobjCond.FechaCorte + gobjCond.NumDias2, TipoDB) & ")" & cond
    sql3 = sql & "' ' AS V1,' ' AS V2," & campo & " AS V3,' ' AS V4, Estado FROM vwConsPCProyCobroPago " & _
          " WHERE (" & campo & ">0) AND (FechaVenci BETWEEN " & FechaYMD(gobjCond.FechaCorte + gobjCond.NumDias2 + 1, TipoDB) & _
                    " AND " & FechaYMD(gobjCond.FechaCorte + gobjCond.NumDias3, TipoDB) & ")" & cond
    sql4 = sql & "' ' AS V1,' ' AS V2,' ' AS V3," & campo & " AS Valor4, Estado FROM vwConsPCProyCobroPago " & _
          " WHERE (" & campo & ">0) AND (FechaVenci>" & FechaYMD(gobjCond.FechaCorte + gobjCond.NumDias3, TipoDB) & ")" & cond
    
    sql = sql1 & " UNION " & sql2 & " UNION " & sql3 & " UNION " & sql4
    sql = sql & " ORDER BY CodProvCli, FechaVenci"
    Set rs = mdbEmpresa.OpenRecordset(sql, dbOpenSnapshot, dbReadOnly)
    
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    If gobjMain.GrupoActual.PermisoActual.ConsRepVen Then
        sql = "spConsPCProyCobroPagoVen " & gobjCond.numMoneda & ", " & _
                CadenaBool(BandPorCobrar, TipoDB) & "," & _
                FechaYMD(gobjCond.FechaCorte, TipoDB) & ",'" & _
                gobjCond.CodPC1 & "','" & _
                gobjCond.CodPC2 & "'," & _
                gobjCond.NumDias1 & "," & _
                gobjCond.NumDias2 & "," & _
                gobjCond.NumDias3 & "," & _
                "'" & gobjMain.UsuarioActual.codUsuario & "'"
    Else
        sql = "spConsPCProyCobroPago " & gobjCond.numMoneda & ", " & _
                CadenaBool(BandPorCobrar, TipoDB) & "," & _
                FechaYMD(gobjCond.FechaCorte, TipoDB) & ",'" & _
                gobjCond.CodPC1 & "','" & _
                gobjCond.CodPC2 & "'," & _
                gobjCond.NumDias1 & "," & _
                gobjCond.NumDias2 & "," & _
                gobjCond.NumDias3
    End If
    rs.Open sql, mcnEmpresa, adOpenStatic, adLockReadOnly, adCmdText
#End If
    Set ConsPCProyCobroPago = rs
    Set rs = Nothing
End Function

'Para consulta de Flujo de caja
Public Function ConsTSFlujo(BandIngreso As Boolean) As Variant
    Dim sql As String, cond As String, campo As String, rs As Recordset
    Dim sql1 As String, sql2 As String, sql3 As String, sql4 As String
    Dim campo2 As String
    
#If DAOLIB Then
    'Ingreso o egreso
    cond = IIf(BandIngreso, " AND (Debe0>0)", " AND (Haber0>0)")
    
    'Condición de CodBanco
    If (Len(gobjCond.CodBanco1) > 0) And (Len(gobjCond.CodBanco2) > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodBanco BETWEEN '" & gobjCond.CodBanco1 & "' AND '" & gobjCond.CodBanco2 & "')"
    ElseIf Len(gobjCond.CodBanco1) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodBanco>='" & gobjCond.CodBanco1 & "')"
    ElseIf Len(gobjCond.CodBanco2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodBanco<='" & gobjCond.CodBanco2 & "')"
    End If
    
    sql = "SELECT TransID,CodBanco, Descripcion, " & _
          "FechaTrans,CodTrans, CodTrans & NumTrans AS Trans, CodTipoDoc & NumDoc AS Doc, " & _
          "FechaVenci, DateDiff('d',FechaVenci," & FechaYMD(gobjCond.FechaCorte, TipoDB) & ") AS NumD,"
    
    Select Case gobjCond.numMoneda
    Case 1
        campo = "Valor0"
        campo2 = "1"
    Case 2
        campo = "Valor0/Cotizacion2"
        campo2 = "Cotizacion2"
    Case 3
        campo = "Valor0/Cotizacion3"
        campo2 = "Cotizacion3"
    Case 4
        campo = "Valor0/Cotizacion4"
        campo2 = "Cotizacion4"
    End Select
          
    sql1 = sql & campo & " AS V1,' ' AS V2,' ' AS V3,' ' AS V4, " & _
            campo2 & ",Estado FROM vwConsTSDoc " & _
            " WHERE (FechaVenci <=" & FechaYMD(gobjCond.FechaCorte + gobjCond.NumDias1, TipoDB) & cond & ")"
    sql2 = sql & "' ' AS V1," & campo & " AS V2,' ' AS V3,' ' AS V4, " & _
            campo2 & ",Estado FROM vwConsTSDoc " & _
            " WHERE (FechaVenci BETWEEN " & FechaYMD(gobjCond.FechaCorte + gobjCond.NumDias1 + 1, TipoDB) & _
            " AND " & FechaYMD(gobjCond.FechaCorte + gobjCond.NumDias2, TipoDB) & cond & ")"
    sql3 = sql & "' ' AS V1,' ' AS V2," & campo & " AS V3,' ' AS V4, " & _
            campo2 & ",Estado FROM vwConsTSDoc " & _
            " WHERE (FechaVenci BETWEEN " & FechaYMD(gobjCond.FechaCorte + gobjCond.NumDias2 + 1, TipoDB) & _
            " AND " & FechaYMD(gobjCond.FechaCorte + gobjCond.NumDias3, TipoDB) & cond & ")"
    sql4 = sql & "' ' AS V1,' ' AS V2,' ' AS V3," & campo & " AS V4, " & _
            campo2 & ",Estado FROM vwConsTSDoc " & _
            " WHERE (FechaVenci>" & FechaYMD(gobjCond.FechaCorte + gobjCond.NumDias3, TipoDB) & cond & ")"
    
    sql = sql1 & " UNION " & sql2 & " UNION " & sql3 & " UNION " & sql4
    sql = sql & cond & " ORDER BY CodBanco, FechaVenci"
    
    Set rs = mdbEmpresa.OpenRecordset(sql, dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
        
    sql = "spConsTSFlujo " & gobjCond.numMoneda & ", " & _
                CadenaBool(BandIngreso, TipoDB) & "," & _
                FechaYMD(gobjCond.FechaCorte, TipoDB) & ",'" & _
                gobjCond.CodBanco1 & "','" & _
                gobjCond.CodBanco2 & "'," & _
                gobjCond.NumDias1 & "," & _
                gobjCond.NumDias2 & "," & _
                gobjCond.NumDias3
    rs.Open sql, mcnEmpresa, adOpenStatic, adLockReadOnly
#End If
    Set ConsTSFlujo = rs
    Set rs = Nothing
End Function




Public Function GNOpcion() As GNOpcion
    If mProps.objGNOpcion Is Nothing Then
        Set mProps.objGNOpcion = New GNOpcion
        Set mProps.objGNOpcion.Empresa = Me
        mProps.objGNOpcion.Recuperar
    End If
    Set GNOpcion = mProps.objGNOpcion
End Function


'Recupera GNComprobante por TransID o por CodTrans y NumTrans (Cuando TransID=0)
Public Function RecuperaGNComprobante(transid As Long, _
                                      Optional CodTrans As String, _
                                      Optional NumTrans As Long) As GNComprobante
    Dim obj As GNComprobante
    
    Set obj = New GNComprobante
    Set obj.Empresa = Me
  
    On Error Resume Next
    'jeaa 09/05/2005 para igualar la hora con el servidor
    If obj.Empresa.GNOpcion.ObtenerValor("IgualarHora") = "1" Then
        AjustaHoraServidor
    End If
    obj.Recuperar transid, CodTrans, NumTrans
    If Err.Number = 0 Then Set RecuperaGNComprobante = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CreaGNComprobante(CodTrans As String) As GNComprobante
    Dim obj As GNComprobante, pt As PermisoTrans, gnt As GNTrans
    'jeaa 09/05/2005 para igualar la hora con el servidor
    If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("IgualarHora") = "1" Then
        AjustaHoraServidor
    End If
    
    
    If Len(CodTrans) = 0 Or Len(CodTrans) > 5 Then
        Err.Raise ERR_INVALIDO, "Empresa_CreaGNComprobante", MSGERR_INVALIDO
    End If
    
    'Verifica si tiene permiso para crear o no
    Set pt = gobjMain.GrupoActual.PermisoActual.Trans(CodTrans)
    If pt Is Nothing Then
        Err.Raise ERR_NODERECHO, "Empresa_CreaGNComprobante", MSGERR_NODERECHO
    Else
        If Not pt.Crear Then
            Err.Raise ERR_NODERECHO, "Empresa_CreaGNComprobante", MSGERR_NODERECHO
        End If
    End If
    
    'Verifica si la transaccion esta activa
    Set gnt = Me.RecuperaGNTrans(CodTrans)
    If Not gnt Is Nothing Then
        If Not gnt.BandValida Then
            Err.Raise ERR_TRANS_INVALIDO, "Empresa_CreaGNComprobante", MSGERR_TRANS_INVALIDO
        End If
    End If
    Set obj = New GNComprobante
    Set obj.Empresa = Me
    obj.CodTrans = CodTrans
    obj.FechaInicioTrans = Date
    obj.HoraInicioTrans = Time
    
    If gnt.IVAutoImpresor Then
        If Len(Me.GNOpcion.ObtenerValor("ValidacionAutoimpresores")) > 0 Then
            If Me.GNOpcion.ObtenerValor("ValidacionAutoimpresores") = "0" Then
                Err.Raise ERR_VALAUTOIMPRESOR, "Empresa_CreaGNComprobante", MSGERR_VALAUTOIMPRESOR
            End If
        End If
    End If
        
    
    
    
    
    
    Set CreaGNComprobante = obj
    
    'jeaa 25/09/2007
    'alerta sobre transacciones con documentos preimpresos caducados o fuera
    'del rango de impresion
    If Not obj Is Nothing Then
        If obj.GNTrans.UtilizaPreImpreso Then
'            If obj.GNTrans.AnexoCodTipoTrans <> "1" And obj.GNTrans.TipoTrans <> "6" Then
                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("AlertaRangoFechaCaducidad") = "1" Then
                    If (obj.GNTrans.AnexoCodTipoTrans = "2" Or obj.GNTrans.AnexoCodTipoComp = "7") And obj.Empresa.GNOpcion.ObtenerValor("ImportaDatosFactura") = "0" Then
                        If obj.GNTrans.FechaCaducidad < obj.FechaTrans Then
                            MsgBox "Esta creando una Transacción " & obj.CodTrans & Chr(13) & "Que tiene el Formulario Preimpreso Caducado en la Configuracion " & Chr(13) & "Fecha de Caducidad: " & Format(obj.GNTrans.FechaCaducidad, "dd/mm/yyyy")
                            Set CreaGNComprobante = Nothing
                        ElseIf obj.GNTrans.FechaCaducidad < DateAdd("d", 15, obj.FechaTrans) Then
                            MsgBox "Los Formularios Preimeresos están a punto de caducar, para la transacción " & obj.CodTrans & Chr(13) & "Fecha de Caducidad: " & Format(obj.GNTrans.FechaCaducidad, "dd/mm/yyyy") & ", dispone de: " & DateDiff("d", obj.FechaTrans, obj.GNTrans.FechaCaducidad) & " días para su caducidad"
                        ElseIf obj.GNTrans.NumTransUltimoPreimpreso < (obj.GNTrans.NumTransSiguiente + 1) Then
                            MsgBox "Esta creando una Transacción " & obj.CodTrans & Chr(13) & "Que tiene el # de Formulario Preimpreso Fuera del Rango Configurado " & Chr(13) & "# Ultimo Preimpreso:" & obj.GNTrans.NumTransUltimoPreimpreso
                            Set CreaGNComprobante = Nothing
                        ElseIf obj.GNTrans.NumTransUltimoPreimpreso < (500 + obj.GNTrans.NumTransSiguiente + 1) Then
                            MsgBox "Se están Terminando los Formularios Preimpresos para esta transacción " & obj.CodTrans & Chr(13) & "# Ultimo Preimpreso:" & obj.GNTrans.NumTransUltimoPreimpreso & ", dispone de: " & obj.GNTrans.NumTransUltimoPreimpreso - (obj.GNTrans.NumTransSiguiente + 1) & " Formularios"
                        End If
                    End If
                End If
'            End If
        ElseIf obj.GNTrans.IVAutoImpresor Then
                If obj.GNTrans.FechaCaducidad < obj.FechaTrans Then
                    MsgBox "No puede crear una Transacción " & obj.CodTrans & " que utiliza Autoimpresor " & Chr(13) & "Por que tiene la Fecha de Caducidad mayor a la autorizada por el SRI" & Chr(13) & "Fecha de Caducidad: " & Format(obj.GNTrans.FechaCaducidad, "dd/mm/yyyy")
                        Set CreaGNComprobante = Nothing
    '                Err.Raise ERR_INVALIDO, "Empresa_CreaGNComprobante", MSGERR_INVALIDO
                End If
        End If
    End If
    Set gnt = Nothing
    Set obj = Nothing
End Function

Public Function RecuperaGNTrans(CodTrans As String) As GNTrans
    Dim obj As GNTrans
    
    Set obj = New GNTrans
    Set obj.Empresa = Me
    obj.CodTrans = CodTrans
        
    On Error Resume Next
    obj.Recuperar
    If Err.Number = 0 Then Set RecuperaGNTrans = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CreaGNTrans() As GNTrans
    Dim obj As GNTrans
    
    Set obj = New GNTrans
    Set obj.Empresa = Me
    Set CreaGNTrans = obj
    Set obj = Nothing
End Function

Public Function RecuperaGNResponsable(key As Variant) As GNResponsable
    Dim obj As GNResponsable
    
    Set obj = New GNResponsable
    Set obj.Empresa = Me
    
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaGNResponsable = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CreaGNResponsable() As GNResponsable
    Dim obj As GNResponsable
    
    Set obj = New GNResponsable
    Set obj.Empresa = Me
    Set CreaGNResponsable = obj
    Set obj = Nothing
End Function


Public Function RecuperaTSBanco(key As Variant) As TSBanco
    Dim obj As TSBanco
    
    Set obj = New TSBanco
    Set obj.Empresa = Me
    
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaTSBanco = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CreaTSBanco() As TSBanco
    Dim obj As TSBanco
    
    Set obj = New TSBanco
    Set obj.Empresa = Me
    Set CreaTSBanco = obj
    Set obj = Nothing
End Function

'*** MAKOTO 07/feb/01 Agregado
Public Function RecuperaTSRetencion(key As Variant) As TSRetencion
    Dim obj As TSRetencion
    
    Set obj = New TSRetencion
    Set obj.Empresa = Me
    
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaTSRetencion = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

'*** MAKOTO 07/feb/01 Agregado
Public Function CreaTSRetencion() As TSRetencion
    Dim obj As TSRetencion
    
    Set obj = New TSRetencion
    Set obj.Empresa = Me
    Set CreaTSRetencion = obj
    Set obj = Nothing
End Function

Public Function RecuperaGNCentroCosto(key As Variant) As GNCentroCosto
    Dim obj As GNCentroCosto
    
    Set obj = New GNCentroCosto
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaGNCentroCosto = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CreaGNCentroCosto() As GNCentroCosto
    Dim obj As GNCentroCosto
    
    Set obj = New GNCentroCosto
    Set obj.Empresa = Me
    Set CreaGNCentroCosto = obj
    Set obj = Nothing
End Function



Public Function RecuperaTSTipoDocBanco(key As Variant) As TSTipoDocBanco
    Dim obj As TSTipoDocBanco
    
    Set obj = New TSTipoDocBanco
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaTSTipoDocBanco = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CreaTSTipoDocBanco() As TSTipoDocBanco
    Dim obj As TSTipoDocBanco
    
    Set obj = New TSTipoDocBanco
    Set obj.Empresa = Me
    Set CreaTSTipoDocBanco = obj
    Set obj = Nothing
End Function

Public Function RecuperaIVBodega(key As Variant) As IVBodega
    Dim obj As IVBodega
    
    Set obj = New IVBodega
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaIVBodega = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CreaIVBodega() As IVBodega
    Dim obj As IVBodega
    
    Set obj = New IVBodega
    Set obj.Empresa = Me
    Set CreaIVBodega = obj
    Set obj = Nothing
End Function

Public Function RecuperaIVInventario(key As Variant) As IVInventario
    Dim obj As IVInventario
    
    Set obj = New IVInventario
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaIVInventario = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CreaIVInventario() As IVInventario
    Dim obj As IVInventario
    
    Set obj = New IVInventario
    Set obj.Empresa = Me
    Set CreaIVInventario = obj
    Set obj = Nothing
End Function

Public Function RecuperaIVGrupo(NumGrupo As Byte, key As Variant) As ivgrupo
    Dim obj As ivgrupo
    
    Set obj = New ivgrupo
    Set obj.Empresa = Me
    obj.NumGrupo = NumGrupo
    
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaIVGrupo = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CreaIVGrupo(NumGrupo As Byte) As ivgrupo
    Dim obj As ivgrupo
    
    Set obj = New ivgrupo
    Set obj.Empresa = Me
    obj.NumGrupo = NumGrupo
    Set CreaIVGrupo = obj
    Set obj = Nothing
End Function


Public Function RecuperaIVRecargo(key As Variant) As IVRecargo
    Dim obj As IVRecargo
    
    Set obj = New IVRecargo
    Set obj.Empresa = Me
    
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaIVRecargo = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CreaIVRecargo() As IVRecargo
    Dim obj As IVRecargo
    
    Set obj = New IVRecargo
    Set obj.Empresa = Me
    Set CreaIVRecargo = obj
    Set obj = Nothing
End Function

Public Function CreaNivelRecargo() As IVRecargo
    Dim obj As IVRecargo
    Set obj = New IVRecargo
   Set obj.Empresa = Me
    Set CreaIVRecargo = obj
    Set obj = Nothing
End Function


Public Function RecuperaPCProvCli(key As Variant) As PCProvCli
    Dim obj As PCProvCli
    
    Set obj = New PCProvCli
    Set obj.Empresa = Me
    
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaPCProvCli = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CreaPCProvCli() As PCProvCli
    Dim obj As PCProvCli
    
    Set obj = New PCProvCli
    Set obj.Empresa = Me
    Set CreaPCProvCli = obj
    Set obj = Nothing
End Function

Public Function RecuperaPCGrupo(NumGrupo As Byte, key As Variant) As PcGrupo
    Dim obj As PcGrupo
    
    Set obj = New PcGrupo
    Set obj.Empresa = Me
    obj.NumGrupo = NumGrupo
    
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaPCGrupo = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CreaPCGrupo(NumGrupo As Byte) As PcGrupo
    Dim obj As PcGrupo
    
    Set obj = New PcGrupo
    Set obj.Empresa = Me
    obj.NumGrupo = NumGrupo
    Set CreaPCGrupo = obj
    Set obj = Nothing
End Function
'
'
Public Function RecuperaFCVendedor(key As Variant) As FCVendedor
    Dim obj As FCVendedor
    
    Set obj = New FCVendedor
    Set obj.Empresa = Me
    
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaFCVendedor = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CreaFCVendedor() As FCVendedor
    Dim obj As FCVendedor
    
    Set obj = New FCVendedor
    Set obj.Empresa = Me
    Set CreaFCVendedor = obj
    Set obj = Nothing
End Function

Public Function RecuperaTSFormaCobroPago(key As Variant) As TSFormaCobroPago
    Dim obj As TSFormaCobroPago
    
    
    Set obj = New TSFormaCobroPago
    Set obj.Empresa = Me
    
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaTSFormaCobroPago = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CreaTSFormaCobroPago() As TSFormaCobroPago
    Dim obj As TSFormaCobroPago
    Set obj = New TSFormaCobroPago
    Set obj.Empresa = Me
    Set CreaTSFormaCobroPago = obj
    Set obj = Nothing
End Function

Public Function RecuperaCTCuenta(key As Variant) As CTCuenta
    Dim obj As CTCuenta
    Set obj = New CTCuenta
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaCTCuenta = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function RecuperaCTLocal(key As Variant) As CTLocal
    Dim obj As CTLocal
    Set obj = New CTLocal
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaCTLocal = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CreaCTCuenta() As CTCuenta
    Dim obj As CTCuenta
   Set obj = New CTCuenta
    Set obj.Empresa = Me
    Set CreaCTCuenta = obj
    Set obj = Nothing
End Function

Public Function CreaCTLocal() As CTLocal
    Dim obj As CTLocal
    Set obj = New CTLocal
    Set obj.Empresa = Me
    Set CreaCTLocal = obj
    Set obj = Nothing
End Function
Public Function RecuperaCTPresupuesto(Anio As Integer, mes As Byte, IdCuenta As Long) As CTPresupuesto
    Dim obj As CTPresupuesto
   Set obj = New CTPresupuesto
    Set obj.Empresa = Me
    obj.Anio = Anio
    obj.mes = mes
    obj.IdCuenta = IdCuenta
    On Error Resume Next
    obj.Recuperar
    If Err.Number = 0 Then Set RecuperaCTPresupuesto = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CreaCTPresupuesto() As CTPresupuesto
    Dim obj As CTPresupuesto
    
    Set obj = New CTPresupuesto
    Set obj.Empresa = Me
    Set CreaCTPresupuesto = obj
    Set obj = Nothing
End Function

Public Function ReporteTempDB() As TempDB
    'No hay nada
End Function

Public Sub GrabaGNLogAccion(ByVal CodAccion As String, _
                            ByVal Descripcion As String, _
                            ByVal Modulo)
    Dim sql As String, codu As String, n As Long, rs As Recordset
    
    On Error Resume Next
    
    codu = "(Anonimo)"
    
    If Not (gobjUsuarioActual Is Nothing) Then
        codu = gobjUsuarioActual.codUsuario
    End If
    'jeaa 05/04/2005 antes 40
    Descripcion = Left(Descripcion, 200)
    'jeaa 23/11/2009 se aumenta nombreEquipo
    sql = "INSERT INTO GNLogAccion (CodUsuario,CodAccion,Descripcion,Modulo,Equipo,UsuarioRed) " & _
          " VALUES ('" & UCase(codu) & "','" & _
                         UCase(CodAccion) & "','" & _
                         Descripcion & "','" & _
                         UCase(Modulo) & "','" & NombrePC & "'" & _
                          ",'" & NombreUsuarioPC & "')"
    
    Me.Execute sql, True
    
    'Elimina registros antiguos
    If CodAccion = "LOGOUT" Then
        If Not (gobjMain Is Nothing) Then
            '*** MAKOTO 09/feb/01 Mod. , 11/abr/02 Angel mod. de 2000 a 3000
            'Elimina registros más antiguos que 60 días
            'ó si existe más de 3000 registros, hasta que quede solo 3000
            sql = "SELECT Count(*) AS Cnt FROM GNLogAccion"
            Set rs = Me.OpenRecordset(sql)
            If Not rs.EOF Then n = rs.Fields("Cnt") - 3000
            rs.Close
            Set rs = Nothing
            If n > 0 Then
                    '5000 regs
                    '19-01-05 jeaa pasa a la tabla RegAuditoria
                    sql = "Insert RegAuditoria select FechaHora, CodUsuario, CodAccion, Descripcion, " & _
                    " Modulo, equipo, UsuarioRed from GNlogaccion WHERE GNLOGACCION.ID < (SELECT MAX (A.ID)  FROM " & _
                    " (SELECT TOP " & n & " ID FROM GNLOGACCION ORDER BY FECHAHORA) AS A ) "
                    Me.OpenRecordset sql
                   
                    
                   sql = "DELETE GNLOGACCION " & _
                            " WHERE GNLOGACCION.ID < (SELECT MAX (A.ID)  FROM " & _
                            "(SELECT TOP " & n & " ID FROM GNLOGACCION ORDER BY FECHAHORA) AS A) "
    
                Else
                    'Solo 185 días  6 meses
                    '19-01-05 jeaa pasa a la tabla RegAuditoria
                    sql = "Insert RegAuditoria select FechaHora, CodUsuario, CodAccion, Descripcion, " & _
                    " Modulo, Equipo, UsuarioRed from GNlogaccion WHERE FechaHora<" & FechaYMD(Date - 185, mProps.TipoDB)
                    Me.OpenRecordset sql
                    'borra logaccion de la base de datos
                   sql = "DELETE FROM GNLogAccion " & _
                          "WHERE FechaHora<" & FechaYMD(Date - 185, mProps.TipoDB)
                End If
                Me.Execute sql, True
        End If
    End If
End Sub


'*** MAKOTO 13/oct/00 Agregado
Friend Sub ProcAprobacionUnica( _
                ByVal CodT As String, _
                ByVal idCentro As Long)
    Dim sql As String, gnt As GNTrans
    
    'Obtiene Objeto GNTrans
    Set gnt = Me.RecuperaGNTrans(CodT)
    If Not (gnt Is Nothing) Then
        'Si la transacción está configurada como 'Aprobación única'
        If gnt.AprobacionUnica Then
            'Desaprueba todas las transacciones del mismo CodTrans
            ' excepto los anulados
            sql = "UPDATE GNComprobante SET Estado=" & ESTADO_NOAPROBADO & _
                  " WHERE (CodTrans = '" & CodT & "') AND " & _
                         "(IdCentro = " & idCentro & ") AND " & _
                         "(Estado<>" & ESTADO_ANULADO & ")"
            Me.Execute sql, True
        End If
    End If
    Set gnt = Nothing
End Sub

'*** MAKOTO 24/nov/00 Agregado
Friend Sub VerificaAnulacion( _
                ByVal tid As Long, _
                ByVal bandAnulacion As Boolean)
    Dim sql As String, rs As Recordset, s As String
    
    sql = "SELECT gc.CodTrans,gc.NumTrans, gc.Estado " & _
          "FROM PCKardex pck INNER JOIN GNComprobante gc " & _
                "ON pck.TransID=gc.TransID " & _
          "WHERE (IdAsignado IN " & _
             "(Select Id From PCKardex pck2 " & _
                "Inner Join GNComprobante gc2 On pck2.TransID=gc2.TransID " & _
                "Where gc2.TransID = " & tid & ")) "
                
                
                
    If bandAnulacion Then       'Cuando está eliminando no debe ir ésta condición
        sql = sql & " AND (gc.Estado <> " & ESTADO_ANULADO & ") "
    End If
    sql = sql & " AND (gc.TransID <>" & tid & ")"
    
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        Do Until rs.EOF
            s = s & "        " & rs.Fields("CodTrans") & " " & _
                                 rs.Fields("NumTrans")
            If rs.Fields("Estado") = ESTADO_ANULADO Then s = s & " (Anulado)"
            s = s & vbCr
            rs.MoveNext
        Loop
        If Len(s) > 0 Then
            s = Left$(s, Len(s) - 1)
            If bandAnulacion Then           '*** MAKOTO 11/dic/00 Modificado
                Err.Raise ERR_INVALIDO, "Empresa.CambiaEstadoGNComp", _
                    "No se puede anular la transacción porque tiene cobros o pagos asignados." & vbCr & _
                    "Primero tendrá que anular ó modificar las siguientes transacciones: " & vbCr & vbCr & s
            Else
                Err.Raise ERR_INVALIDO, "GNComprobante.Eliminar", _
                    "No se puede eliminar la transacción porque tiene cobros o pagos asignados." & vbCr & _
                    "Primero tendrá que eliminar las siguientes transacciones: " & vbCr & vbCr & s
            End If
        End If
    End If
    
    '''----  REVISA EN PCKARDEXCHP
    
    
    sql = "SELECT gc.CodTrans,gc.NumTrans, gc.Estado " & _
          "FROM PCKardexCHP pck INNER JOIN GNComprobante gc " & _
                "ON pck.TransID=gc.TransID " & _
          "WHERE (IdAsignadopck IN " & _
             "(Select Id From PCKardex pck2 " & _
                "Inner Join GNComprobante gc2 On pck2.TransID=gc2.TransID " & _
                "Where gc2.TransID = " & tid & ")) "
                
                
                
    If bandAnulacion Then       'Cuando está eliminando no debe ir ésta condición
        sql = sql & " AND (gc.Estado <> " & ESTADO_ANULADO & ") "
    End If
    sql = sql & " AND (gc.TransID <>" & tid & ")"
    
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        Do Until rs.EOF
            s = s & "        " & rs.Fields("CodTrans") & " " & _
                                 rs.Fields("NumTrans")
            If rs.Fields("Estado") = ESTADO_ANULADO Then s = s & " (Anulado)"
            s = s & vbCr
            rs.MoveNext
        Loop
        If Len(s) > 0 Then
            s = Left$(s, Len(s) - 1)
            If bandAnulacion Then           '*** MAKOTO 11/dic/00 Modificado
                Err.Raise ERR_INVALIDO, "Empresa.CambiaEstadoGNComp", _
                    "No se puede anular la transacción porque tiene cobros o pagos asignados en PCKardex de Respaldo ." & vbCr & _
                    "Primero tendrá que anular ó modificar las siguientes transacciones: " & vbCr & vbCr & s
            Else
                Err.Raise ERR_INVALIDO, "GNComprobante.Eliminar", _
                    "No se puede eliminar la transacción porque tiene cobros o pagos asignados en PCKardex de Respaldo." & vbCr & _
                    "Primero tendrá que eliminar las siguientes transacciones: " & vbCr & vbCr & s
            End If
        End If
    End If
    
    
    rs.Close
    Set rs = Nothing
End Sub

'*** MAKOTO 11/dic/00 Agregado
Private Sub VerificaRecuperacion(ByVal tid As Long)
    Dim sql As String, rs As Recordset, s As String
    
    sql = "SELECT gc.CodTrans,gc.NumTrans, gc.Estado " & _
          "FROM PCKardex pck INNER JOIN GNComprobante gc " & _
                "ON pck.TransID=gc.TransID " & _
          "WHERE (pck.Id IN " & _
             "(Select pck2.IdAsignado From PCKardex pck2 " & _
                "Inner Join GNComprobante gc2 On pck2.TransID=gc2.TransID " & _
                "Where gc2.TransID = " & tid & ")) "
    sql = sql & " AND (gc.Estado = " & ESTADO_ANULADO & ") "
    sql = sql & " AND (gc.TransID <>" & tid & ")"
    
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        Do Until rs.EOF
            s = s & "        " & rs.Fields("CodTrans") & " " & _
                                 rs.Fields("NumTrans")
            If rs.Fields("Estado") = ESTADO_ANULADO Then s = s & " (Anulado)"
            s = s & vbCr
            rs.MoveNext
        Loop
        If Len(s) > 0 Then
            s = Left$(s, Len(s) - 1)
            Err.Raise ERR_INVALIDO, "Empresa.CambiaEstadoGNComp", _
                "No se puede recuperar la transacción porque uno o más de " & _
                "los documentos asignados están anulados." & vbCr & _
                "Primero tendrá que recuperar las siguientes transacciones: " & vbCr & vbCr & s
        End If
    End If
    rs.Close
    Set rs = Nothing
End Sub

Public Sub CambiaEstadoGNComp(transid As Long, value As Byte)
    Dim sql As String, pt As PermisoTrans, CodT As String, gc As GNComprobante
    Dim est As Byte, rs As Recordset, idCentro As Long, EstadoOriginal As Byte, pos As Integer
    Dim idAsiento As Long, gcaux As GNComprobante, IdTransFuente As Long, i As Long
    Dim rsA As Recordset
    Dim IdFuente As Long
    
    If transid = 0 Then Exit Sub        '*** MAKOTO 15/dic/00
    
    'Obtiene CodTrans de la transacción
    sql = "SELECT CodTrans, Estado, IdCentro, idtransfuente  FROM GNComprobante WHERE TransID=" & transid
    Set rs = Me.OpenRecordset(sql)
    If rs.EOF Then
        Err.Raise ERR_NOHAYCODIGO, "Empresa.CambiaEstadoGNComp", "No se enencuentra la transacción."
    End If
    CodT = rs!CodTrans
    est = rs!Estado                 'Estado actual de la trans.
    idCentro = rs!idCentro
    IdTransFuente = rs!IdTransFuente
    rs.Close
    
    'Si no está cambiando no hace nada
    If est = value Then Exit Sub
            
    'Recupera el permiso para la transacción
    Set pt = gobjMain.GrupoActual.PermisoActual.Trans(CodT)
    If Not pt Is Nothing Then
        Select Case value
        Case ESTADO_APROBADO
            If Not pt.Aprobar Then _
                    Err.Raise ERR_NODERECHO, "Empresa.CambiaEstadoGNComp", MSGERR_NODERECHO
            If est = ESTADO_ANULADO Then
                    Err.Raise ERR_NODERECHO, "Empresa.CambiaEstadoGNComp", _
                        "No se puede aprobar porque el comprobante está anulado." & vbCr & _
                        "Primero recupérelo y luego intente de nuevo."
            End If
            
            Set gc = RecuperaGNComprobante(transid)
            
            If gc.GNTrans.Modulo = "CT" Then
                If IdTransFuente <> 0 Then
                Set gc = Nothing
                Err.Raise ERR_ASIENTOAUTOIMPRESOR, "Empresa.CambiaEstadoGNComp", _
                        "No se puede cambiar de estado es un asiento generado por una" & vbCr & _
                        "transaccion de AutoImpresor."
                End If
            End If
            
            'Verifica si está cuadrado el asiento
            If Not gc.Cuadrado Then
                Set gc = Nothing
                Err.Raise ERR_INVALIDO, "Empresa.CambiaEstadoGNComp", _
                        "No se puede aprobar mientras el asiento está descuadrado." & vbCr & _
                        "Primero debería modificarlo para que esté cuadrado el asiento."
            End If
            pos = InStr(1, UCase(Me.GNOpcion.NombreEmpresa), "HORMI")
            If pos > 0 Then
                If gc.GNTrans.NecesitaAprobacion And value = 1 Or (gc.Estado = 0 And value <> 0) Then
                    sql = "UPDATE GNComprobante SET CodUsuarioAutoriza='" & gobjMain.UsuarioActual.codUsuario & _
                      "' WHERE TransID=" & transid
                    Me.Execute sql, True
                
                End If
            End If
        Case ESTADO_NOAPROBADO
            Set gc = RecuperaGNComprobante(transid)
            If Not pt.Desaprobar Then Err.Raise ERR_NODERECHO, "Empresa.CambiaEstadoGNComp", MSGERR_NODERECHO
            
            If est = 3 Then
                If gc.GNTrans.IVAutoImpresor Then
                Set gc = Nothing
                Err.Raise ERR_ASIENTOAUTOIMPRESOR, "Empresa.CambiaEstadoGNComp", _
                        "No se puede recuperar está transacción porque es autoimpresor." & vbCr & _
                        "Existen asientos asociados a este."
                End If
            End If
            
            If est = ESTADO_ANULADO Then
'                    Err.Raise ERR_NODERECHO, "Empresa.CambiaEstadoGNComp", _
'                        "No se puede desaprobar porque el comprobante está anulado." & vbCr & _
'                        "Primero recupérelo y luego intente de nuevo."

            ' verifica si no se perdio relacion con pckardex
            For i = 1 To gc.CountPCKardex
                If gc.PCKardex(i).IdAsignado <> 0 Then
                    If Not gc.RecuperaInformaciondelPago(gc.PCKardex(i).IdAsignado) Then
                        MsgBox "Se va recuperar el comprobante pero tenía un pago errado, se va ha eliminar dicho pago"
                        gc.RecuperaDetalleTodo
                        gc.RemovePCKardex i
                        gc.BandNoGrabaTransXML = False
                        gc.GeneraAsiento
                        gc.Grabar False, False
                    End If
                    
                End If
            Next i
            End If
        Case ESTADO_DESPACHADO
            If Not pt.Despachar Then Err.Raise ERR_NODERECHO, "Empresa.CambiaEstadoGNComp", MSGERR_NODERECHO
            If est = ESTADO_ANULADO Then
                    Err.Raise ERR_NODERECHO, "Empresa_CambiaEstadoGNComp", _
                        "No se puede despachar porque el comprobante está anulado." & vbCr & _
                        "Primero recupérelo y luego intente de nuevo."
            ElseIf est = ESTADO_NOAPROBADO Then
                Err.Raise ERR_INVALIDO, "Empresa.CambiaEstadoGNComp", _
                        "No se puede aprobar mientras el asiento está descuadrado." & vbCr & _
                        "Primero debería modificarlo para que esté cuadrado el asiento."
            End If
            Set gc = RecuperaGNComprobante(transid)
        Case ESTADO_ANULADO
            If Not pt.Anular Then Err.Raise ERR_NODERECHO, "Empresa.CambiaEstadoGNComp", MSGERR_NODERECHO
            'jeaa 24/04/2008 anulado por que se cambiA   el estado a 2
            If est <> ESTADO_NOAPROBADO Then
                    Err.Raise ERR_NODERECHO, "Empresa.CambiaEstadoGNComp", _
                        "No se puede anular porque el comprobante ya está aprobado o despachado." & vbCr & _
                        "Primero desapruébelo y luego intente de nuevo."
            End If
            Set gc = RecuperaGNComprobante(transid)
        End Select
    Else
        Err.Raise ERR_NODERECHO, "Empresa.CambiaEstadoGNComp", MSGERR_NODERECHO
    End If
    
    '*** MAKOTO 24/nov/00 Agregado
    'Verifica si la trans. tiene cobros/pagos asignados y quiere anular
    If value = ESTADO_ANULADO Then
        VerificaAnulacion transid, True
    End If

    '*** jeaa 30/12/2009
    'Verifica si la trans. estaconciliada
    If value = ESTADO_ANULADO Then
        VerificaAnulacionConciliacion transid, True
    End If
    If value = ESTADO_ANULADO Then
        VerificaAnulacionCurier transid, True
    End If

    '*** jeaa 13/02/2008
    'Verifica si la trans. tiene Transacciones asignados y quiere anular
    If gc.Estado = 0 Then
        If Not gc.GNTrans.IVAutoImpresor Then
             If value = ESTADO_ANULADO Then
                 VerificaAnulacionGNComp transid, True
            End If
        Else
            If VerificaAnulacionGNCompAutoImpresor(transid, True) Then
                MsgBox " Se va ha crear una transaciión de reversion de asiento"
                idAsiento = RecuperaTransid(gc.transid, gc.GNTrans.AsientoTrans)
                Set gcaux = Me.RecuperaGNComprobante(idAsiento)
                If Not gcaux Is Nothing Then
                    If GrabarTransReversionAsiento(gc.GNTrans.AsientoTransAnulada, gcaux, gc) Then
                    End If
                End If
            End If
            
        End If
    End If

    If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("PermiteControlAspectosAnexos") = "1" Then
        'Verifica si la trans. tiene anexos
        If value = ESTADO_ANULADO Then
            VerificaAnulacionAnexos transid, True
        End If
    End If


    '*** MAKOTO 11/dic/00 Agregado
    'Verifica si existe trans. asignado que están anulada, si es que sí no permite recuperar
    If value = ESTADO_NOAPROBADO Then
     Set gc = RecuperaGNComprobante(transid)
        If gc.GNTrans.CodPantalla = "IVRES_ALQ" Then
            VerificaRecuperacionAlq transid
        Else
            VerificaRecuperacion transid
        End If
    End If

    '*** jeaa 13/02/2008
    'Verifica si existe trans. asignado que están anulada, si es que sí no permite recuperar
    If value = ESTADO_NOAPROBADO Then
        VerificaRecuperacionGnComp transid
    End If
 
 #If DAOLIB Then
    gobjWS.BeginTrans           '================= Comienza la transacción
#Else
    mcnEmpresa.BeginTrans       '================= Comienza la transacción
#End If
    On Error GoTo ErrTrap

    '*** MAKOTO 13/oct/00 Agregado
    If value = ESTADO_APROBADO Then
        'Desaprueba otras transacciones del mismo C.Costo
        'si es que está configurado 'Aprobación única'
        ProcAprobacionUnica CodT, idCentro
    End If
    
    
    
    'Si cambia a anulado y antes no estaba anulado
    If value = ESTADO_ANULADO Then
        If gc Is Nothing Then Set gc = RecuperaGNComprobante(transid)
        
        'Actualiza la existencia de inventario (Devuelve)
        'gc.ActualizaCantidad "-"
        'auc 12/06/2006
        'If gc.GNTrans.IVTipoTrans <> "A" Then 'pregunto que si esta anulando una reservacion no hace nada
            If Me.GNOpcion.IVKTipoDatoDouble Then
                gc.ActualizaCantidadDou "-"
            Else
                gc.ActualizaCantidad "-"
            End If
            gc.ActualizaCantidadAFCustodio "-"
            gc.ActualizaCantidadIVSerie "-"
            'if gc.GNTrans.CodPantalla = 'ivgns'
        'End If
         'AUC borra la reservacion dela tabla ivresrevacion
         If gc Is Nothing Then Set gc = RecuperaGNComprobante(transid)
        If gc.GNTrans.IVTipoTrans = "A" Or gc.GNTrans.IVTipoTrans = "E" Then
          sql = "DELETE FROM ivreservacion WHERE TransID=" & gc.transid
          Me.Execute sql, True
        End If
        
         If gc.GNTrans.CodPantalla = "IVDEV" Or gc.GNTrans.CodPantalla = "IVDEVE" Or gc.GNTrans.CodPantalla = "IVDVALQ" Then
                sql = "DELETE FROM GNFUENTE WHERE Transid =" & gc.transid
                Me.Execute sql, True
        End If
        
    
    'Si cambia a diferente de anulado y antes estaba anulado
    ElseIf est = ESTADO_ANULADO Then
        If gc Is Nothing Then Set gc = RecuperaGNComprobante(transid)
        
        'Actualiza a existencia de inventario (Suma)
        gc.ActualizaCantidad "+"
    End If

    'Si no hay problema en permisos, cambia el estado
    sql = "UPDATE GNComprobante SET Estado=" & value & _
          " WHERE TransID=" & transid
    Me.Execute sql, True
    
     If value = ESTADO_ANULADO Then
        If gc.GNTrans.CodPantalla = "IVBQDPACA" Then 'Si anulamos la saca cambiamos el estado de las guias
            For i = 1 To gc.CountIVKardex
                IdFuente = ObtieneIdFuente(gc.IVKardex(i).traking)
                If IdFuente <> 0 Then
                    sql = "Update GNOferta set EstadoGuia = 0 "
                    sql = sql & " Where Transid =" & IdFuente
                    Me.EjecutarSQL sql, 1
                End If
            Next
        End If
    End If

    If gc.GNTrans.IVMostrarMarcacion Then
        sql = "Select * from gnlacteos where transid = " & transid
        Set rsA = Me.OpenRecordset(sql)
        If Not rsA.EOF Then
            If val(rsA!HoraLlegada) <> 0 Then
                sql = "Update RAsistencia set bandOcupada = 0"
                sql = sql & " Where idJornada =" & rsA!HoraLlegada
                Me.EjecutarSQL sql, 1
            End If
        End If
    End If
  
    
    
    'Si no hay problema en permisos, cambia la fecha de grabado
    sql = "UPDATE GNComprobante SET FechaGrabado='" & Now & _
      "' WHERE TransID=" & transid
    Me.Execute sql, True
    
    
    'Si no hay problema en permisos, cambia la fecha de grabado
    If InStr(1, UCase(Me.GNOpcion.NombreEmpresa), "MEGA") > 0 And Not gc.GNTrans.UtilizaPreImpreso And value = 1 Then
            sql = "UPDATE GNComprobante SET FechaCaducidadSRI='" & Now & _
              "' , autorizacionsri='" & UCase(Mid$(gobjMain.UsuarioActual.codUsuario, 1, 10)) & "' WHERE TransID=" & transid
            Me.Execute sql, True
    End If
    
    
    'Si no hay problema en permisos, cambia el usuario que modifica solo cuando anula
    If value = 3 Or (gc.Estado = 3 And value <> 3) Then
        sql = "UPDATE GNComprobante SET CodUsuarioModifica='" & gobjMain.UsuarioActual.codUsuario & _
          "' WHERE TransID=" & transid
        Me.Execute sql, True
    End If
    
    'AUC 14/11/007 Cambia el estado del Historial de clientes
    If VerificaExisteHistorial(transid) Then
        sql = "UPDATE PCHistorial SET Estado =" & value & _
              " WHERE TransID=" & transid
        Me.Execute sql, True
    End If
    
    'jeaa 16/05/2009
    'Si es conciliacion cambia estado en tskardex
    If value = ESTADO_ANULADO Then
        If gc.GNTrans.CodPantalla = "TSCONCIT" Then
            sql = " Update TSKardex"
            sql = sql & " Set BandConciliado = 0"
            sql = sql & " from TSKardexConcilia tskc"
            sql = sql & " inner join  tskardex tsk on tskc.idtskardex=tsk.id"
            sql = sql & " Where tskc.TransID = " & transid
            Me.Execute sql, True
        End If
        If gc.GNTrans.CodPantalla = "VTCONCITT" Then
            sql = " Update GnComprobante"
            sql = sql & " Set BandCierre = 0"
            sql = sql & " from VTKardexConciliaTrans vtk"
            sql = sql & " inner join  GnComprobante g on g.transid=vtk.idtrans"
            sql = sql & " Where vtk.TransID = " & transid
            Me.Execute sql, True
        End If
    
    
    End If
    
    
    'jeaa 16/05/2009
    'Si es nota de credito cambia estado en PCKardexND
    If value = ESTADO_ANULADO Then
            sql = " Update PCKardexND"
            sql = sql & " Set BandValida = 0"
            sql = sql & " Where TransID = " & transid
            Me.Execute sql, True
    End If
    
    
    'Graba en GNLogAccion para utilizarlo como historial
    If value = ESTADO_ANULADO Then           '*** ANGEL 23/mar/02
            Me.GrabaGNLogAccion "ANU_TRANS", "Transacción Anulada " & _
                                                         gc.CodTrans & gc.NumTrans, "GN"
    ElseIf value = ESTADO_APROBADO Then            '*** ANGEL 23/mar/02
        Me.GrabaGNLogAccion "MOD_TRANS", "Transacción Aprobada " & _
                                                         gc.CodTrans & gc.NumTrans, "GN"
    
    ElseIf value = ESTADO_NOAPROBADO Then            '*** ANGEL 23/mar/02
        If est = ESTADO_ANULADO Then
            Me.GrabaGNLogAccion "REC_TRANS", "Recupera Transacción Anulada " & _
                                                         gc.CodTrans & gc.NumTrans, "GN"
        Else
            Me.GrabaGNLogAccion "MOD_TRANS", "Transacción Desaprobada " & _
                                                         gc.CodTrans & gc.NumTrans, "GN"
        End If
    ElseIf value = ESTADO_DESPACHADO Then            '*** ANGEL 23/mar/02
        Me.GrabaGNLogAccion "MOD_TRANS", "Transacción Despachada " & _
                                                         gc.CodTrans & gc.NumTrans, "GN"
    ElseIf value = ESTADO_SEMDESPACHADO Then            '*** ANGEL 23/mar/02
        Me.GrabaGNLogAccion "MOD_TRANS", "Transacción Semidespachada " & _
                                                         gc.CodTrans & gc.NumTrans, "GN"
    
    End If
    
    
    
'*** MAKOTO 15/dic/00   Eliminado por que no debería cambiar el codusuario
'                       Sólo por que cambió el estado. Sobre todo cuando despacha(importa)
'    'Modifica Codigo de usuario del comprobante
'    sql = "UPDATE GNComprobante SET CodUsuario='" & _
'                gobjMain.UsuarioActual.CodUsuario & "' " & _
'          " WHERE TransID=" & TransID
'    Me.Execute sql, True
    
#If DAOLIB Then
    gobjWS.CommitTrans          '============ Completa la transacción
#Else
    mcnEmpresa.CommitTrans      '============ Completa la transacción
#End If
    Set gc = Nothing
    Set rsA = Nothing

    Exit Sub

ErrTrap:
#If DAOLIB Then
    gobjWS.Rollback             '============ Anula la transacción
#Else
    mcnEmpresa.RollbackTrans    '============ Anula la transacción
#End If
    
    Err.Raise Err.Number, Err.Source, Err.Description
    Exit Sub
End Sub


'Diego 29/08/2002
'Cuando  se  raliza el cierre  no  verifica Anulacion
'Porque las relaciones de Idasignado  se las realiza  despues
Public Sub CambiaEstadoGNCompCierre(transid As Long, value As Byte)
    Dim sql As String, pt As PermisoTrans, CodT As String, gc As GNComprobante
    Dim est As Byte, rs As Recordset, idCentro As Long
    
    If transid = 0 Then Exit Sub        '*** MAKOTO 15/dic/00
    
    'Obtiene CodTrans de la transacción
    sql = "SELECT CodTrans, Estado, IdCentro, NumTrans FROM GNComprobante WHERE TransID=" & transid
    Set rs = Me.OpenRecordset(sql)
    If rs.EOF Then
        Err.Raise ERR_NOHAYCODIGO, "Empresa.CambiaEstadoGNComp", "No se enencuentra la transacción."
    End If
    CodT = rs!CodTrans
    est = rs!Estado                 'Estado actual de la trans.
    idCentro = rs!idCentro
    rs.Close
    'Si no está cambiando no hace nada
    If est = value Then Exit Sub
            
    'Recupera el permiso para la transacción
    Set pt = gobjMain.GrupoActual.PermisoActual.Trans(CodT)
    If Not pt Is Nothing Then
        Select Case value
        Case ESTADO_APROBADO
            If Not pt.Aprobar Then _
                    Err.Raise ERR_NODERECHO, "Empresa.CambiaEstadoGNComp", MSGERR_NODERECHO
            If est = ESTADO_ANULADO Then
                    Err.Raise ERR_NODERECHO, "Empresa.CambiaEstadoGNComp", _
                        "No se puede aprobar porque el comprobante está anulado." & vbCr & _
                        "Primero recupérelo y luego intente de nuevo."
            End If
            
            Set gc = RecuperaGNComprobante(transid)
            'Verifica si está cuadrado el asiento
            If Not gc.Cuadrado Then
                Set gc = Nothing
                Err.Raise ERR_INVALIDO, "Empresa.CambiaEstadoGNComp", _
                        "No se puede aprobar mientras el asiento está descuadrado." & vbCr & _
                        "Primero debería modificarlo para que esté cuadrado el asiento."
            End If
            
        Case ESTADO_NOAPROBADO
            If Not pt.Desaprobar Then Err.Raise ERR_NODERECHO, "Empresa.CambiaEstadoGNComp", MSGERR_NODERECHO
            If est = ESTADO_ANULADO Then
'                    Err.Raise ERR_NODERECHO, "Empresa.CambiaEstadoGNComp", _
'                        "No se puede desaprobar porque el comprobante está anulado." & vbCr & _
'                        "Primero recupérelo y luego intente de nuevo."
            End If
        Case ESTADO_DESPACHADO
            If Not pt.Despachar Then Err.Raise ERR_NODERECHO, "Empresa.CambiaEstadoGNComp", MSGERR_NODERECHO
            If est = ESTADO_ANULADO Then
                    Err.Raise ERR_NODERECHO, "Empresa_CambiaEstadoGNComp", _
                        "No se puede despachar porque el comprobante está anulado." & vbCr & _
                        "Primero recupérelo y luego intente de nuevo."
            End If
        Case ESTADO_ANULADO
            If Not pt.Anular Then Err.Raise ERR_NODERECHO, "Empresa.CambiaEstadoGNComp", MSGERR_NODERECHO
            If est <> ESTADO_NOAPROBADO Then
                    Err.Raise ERR_NODERECHO, "Empresa.CambiaEstadoGNComp", _
                        "No se puede anular porque el comprobante ya está aprobado o despachado." & vbCr & _
                        "Primero desapruébelo y luego intente de nuevo."
            End If
        End Select
    Else
        Err.Raise ERR_NODERECHO, "Empresa.CambiaEstadoGNComp", MSGERR_NODERECHO
    End If
    
    '*** MAKOTO 24/nov/00 Agregado
    'Verifica si la trans. tiene cobros/pagos asignados y quiere anular
    'Error cuando se  realiza  Cierre  de Ejercicio
'    If value = ESTADO_ANULADO Then
'        VerificaAnulacion TransID, True
'    End If
    'Verifica si existe trans. asignado que están anulada, si es que sí no permite recuperar
    If value = ESTADO_NOAPROBADO Then
        VerificaRecuperacion transid
    End If
#If DAOLIB Then
    gobjWS.BeginTrans           '================= Comienza la transacción
#Else
    mcnEmpresa.BeginTrans       '================= Comienza la transacción
#End If
    On Error GoTo ErrTrap
    '*** MAKOTO 13/oct/00 Agregado
    If value = ESTADO_APROBADO Then
        'Desaprueba otras transacciones del mismo C.Costo
        'si es que está configurado 'Aprobación única'
        ProcAprobacionUnica CodT, idCentro
    End If
    
    'Si cambia a anulado y antes no estaba anulado
    If value = ESTADO_ANULADO Then
        If gc Is Nothing Then Set gc = RecuperaGNComprobante(transid)
        
        'Actualiza la existencia de inventario (Devuelve)
        gc.ActualizaCantidad "-"
    
    'Si cambia a diferente de anulado y antes estaba anulado
    ElseIf est = ESTADO_ANULADO Then
        If gc Is Nothing Then Set gc = RecuperaGNComprobante(transid)
        
        'Actualiza a existencia de inventario (Suma)
        gc.ActualizaCantidad "+"
    End If
    'Si no hay problema en permisos, cambia el estado
    sql = "UPDATE GNComprobante SET Estado=" & value & _
          " WHERE TransID=" & transid
    Me.Execute sql, True
    
'     If value = ESTADO_ANULADO Then
'        If gc.GNTrans.IVGeneraNumSerie And gc.GNTrans.IVTipoTrans = "E" Then
'           CambiaEstadoIVSerie gc, ESTADO_ANULADO
'        End If
'    End If
'
'    If value = ESTADO_NOAPROBADO Then
'        If gc.GNTrans.IVGeneraNumSerie And gc.GNTrans.IVTipoTrans = "E" Then
'               CambiaEstadoIVSerie gc, ESTADO_NOAPROBADO
'       End If
'   End If
    
    'Graba en GNLogAccion para utilizarlo como historial
    If value = ESTADO_ANULADO Then           '*** ANGEL 23/mar/02
        Me.GrabaGNLogAccion "ANU_TRANS", "Transacción Anulada " & _
                                                         gc.CodTrans & gc.NumTrans, "GN"
    End If
    
#If DAOLIB Then
    gobjWS.CommitTrans          '============ Completa la transacción
#Else
    mcnEmpresa.CommitTrans      '============ Completa la transacción
#End If
    Exit Sub
ErrTrap:
#If DAOLIB Then
    gobjWS.Rollback             '============ Anula la transacción
#Else
    mcnEmpresa.RollbackTrans    '============ Anula la transacción
#End If
    
    Err.Raise Err.Number, Err.Source, Err.Description
    Exit Sub
End Sub




Public Sub AprobacionPorLote()
    'No borre ésta para no romper la compatibilidad binaria
End Sub

Public Function CierreDeEjercicio(objEmpresaDestino As Empresa) As Boolean
    'No borre ésta para no romper la compatibilidad binaria
End Function

Public Sub Conciliar(IdTSKardex As Long)
    'No borre ésta para no romper la compatibilidad binaria
End Sub

'*** MAKOTO 06/feb/01 Agregado
'Para conciliación bancaria
Public Sub CambiaConciliado( _
                ByVal Id As Long, _
                ByVal Valor As Boolean)
    Dim sql As String
    
    sql = "UPDATE TSKardex SET BandConciliado = " & CadenaBool(Valor, Me.TipoDB)

    sql = sql & " WHERE (Id = " & Id & ") AND " & _
                       "(BandConciliado <> " & CadenaBool(Valor, Me.TipoDB) & ") "
    
    Me.Execute sql, True
End Sub

Public Sub ActualizaExistencia(CodInventario1 As String, CodInventario As String)
    Dim cond As String, sql As String
    
    On Error Resume Next
    sql = "DROP TABLE TempExist"
    Me.Execute sql
    Err.Clear
    On Error GoTo 0
    
    sql = "SELECT * INTO TempExist FROM vwConsIVKardexSuma"
    Me.Execute sql, True
    
    sql = "UPDATE IVExist a, TempExist b SET a.Exist=b.SumaDeCantidad " & _
          "WHERE a.IdBodega=b.IdBodega AND a.IdInventario=b.IdInventario"
    Me.Execute sql, True
End Sub

Public Sub ActualizaCostoPorItem(CodInventario1 As String, CodInventario2 As String)

End Sub

Public Sub ActualizaCostoPorBodega(CodBodega1 As String, CodBodega2 As String)

End Sub

Public Sub ActualizaCostoPorGrupo(NumGrupo As Integer, CodGrupoDesde As String, CodGrupoHasta As String)

End Sub

Public Sub ActualizaPrecioPorItem(CodInventario1 As String, _
                                  CodInventario2 As String, _
                                  BandPrecio1 As Boolean, _
                                  BandPrecio2 As Boolean, _
                                  BandPrecio3 As Boolean)

End Sub

Public Sub ActualizaPrecioPorGrupo(NumGrupo As Integer, _
                                  CodGrupoDesde As String, _
                                  CodGrupoHasta As String, _
                                  BandPrecio1 As Boolean, _
                                  BandPrecio2 As Boolean, _
                                  BandPrecio3 As Boolean)

End Sub


Public Function EliminaLog(fechadesde As Date, fechaHasta As Date, Optional CodAccion As String) As Long
    Dim sql As String, cond As String, n As Long
    
    If Len(CodAccion) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " CodAccion='" & CodAccion & "'"
    End If
    
    If Len(cond) > 0 Then cond = cond & " AND "
    cond = cond & " FechaHora BETWEEN " & FechaYMD(fechadesde, TipoDB) & " AND " & FechaYMD(fechaHasta, TipoDB)
    sql = "DELETE FROM GNLogAccion WHERE " & cond
#If DAOLIB Then
    mdbEmpresa.Execute sql
    n = mdbEmpresa.RecordsAffected
#Else
    mcnEmpresa.Execute sql, n
#End If
    EliminaLog = n
End Function

Friend Property Set SiiMain(value As SiiMain)
    Set mProps.objSiiMain = value
End Property

Friend Property Get SiiMain() As SiiMain
    Set SiiMain = mProps.objSiiMain
End Property

Public Property Let CodEmpresa(ByVal value As String)
    If Not mbooEsNuevo Then
        Err.Raise ERR_NOMODIFICABLE, "Empresa_CodEmpresa", MSGERR_NOMODIFICABLE
    End If
    
    If Len(value) > 20 Then
        Err.Raise ERR_INVALIDO, "Empresa_CodEmpresa", MSGERR_INVALIDO
    End If
    
    mProps.CodEmpresa = value
    mbooModificado = True
End Property

Public Property Get CodEmpresa() As String
    CodEmpresa = Trim$(mProps.CodEmpresa)
End Property

Public Property Let Descripcion(ByVal value As String)
    If Len(value) > 50 Then
        Err.Raise ERR_INVALIDO, "Empresa_Descripcion", MSGERR_INVALIDO
    End If
    
    mProps.Descripcion = value
    mbooModificado = True
End Property

Public Property Get Descripcion() As String
    Descripcion = Trim$(mProps.Descripcion)
End Property

Public Property Let TipoDB(ByVal value As Byte)
    If value <> TIPODB_JET And value <> TIPODB_SQL Then
        Err.Raise ERR_INVALIDO, "Empresa_TipoDB", MSGERR_INVALIDO
    End If
    
    mProps.TipoDB = value
    mbooModificado = True
End Property

Public Property Get TipoDB() As Byte
    TipoDB = mProps.TipoDB
End Property

Public Property Let Ruta(ByVal value As String)
    If Right$(value, 1) <> "\" And Len(value) > 0 Then value = value & "\"
    mProps.Ruta = value
    mbooModificado = True
End Property

Public Property Get Ruta() As String
    Ruta = Trim$(mProps.Ruta)
End Property

Public Property Let NombreDB(ByVal value As String)
    mProps.NombreDB = QuitaExtension(value)
    mbooModificado = True
End Property

Public Property Get NombreDB() As String
    NombreDB = Trim$(mProps.NombreDB)
End Property

Public Property Let Server(ByVal value As String)
    mProps.Server = value
    mbooModificado = True
End Property

Public Property Get Server() As String
    Server = Trim$(mProps.Server)
End Property

Public Property Let Device(ByVal value As String)
    mProps.Device = value
    mbooModificado = True
End Property

Public Property Get Device() As String
    Device = Trim$(mProps.Device)
End Property

Public Property Let UserName(ByVal value As String)
    mProps.UserName = value
    mbooModificado = True
End Property

Public Property Get UserName() As String
    UserName = Trim$(mProps.UserName)
End Property

Public Property Let Password(ByVal value As String)
    mProps.Password = value
    mbooModificado = True
End Property

Public Property Get Password() As String
    Password = Trim$(mProps.Password)
End Property


Public Property Get fechagrabado() As Date
    fechagrabado = mProps.fechagrabado
End Property

Public Property Get EsNuevo() As Boolean
    EsNuevo = mbooEsNuevo
End Property

Public Property Get Modificado() As Boolean
    Modificado = mbooModificado
End Property



Private Sub Class_Initialize()
#If DAOLIB Then
#Else
    Set mcnEmpresa = New ADODB.Connection
    Set mcnEmpresaSuc = New ADODB.Connection
    Set mcnEmpresaConfigRep = New ADODB.Connection

#End If
    
    'Valores predeterminados
    With mProps
        .CodEmpresa = ""
        .Descripcion = "Nueva empresa"
        .Server = gobjMain.Server
        .NombreDB = "Nueva empresa"
        .Device = gobjMain.Device
        .TipoDB = gobjMain.TipoDB
        .LimiteParaCompactar = 50
        mbooBandPorCobrar = True
#If DAOLIB Then
        .UserName = "admin"
        .Password = "sii111"
        .Ruta = gobjMain.Ruta
#Else
        .UserName = gobjMain.UserNameSQL
        .Password = gobjMain.PasswordSQL
        .Ruta = "C:\MSSQL7\data\"
#End If
    End With
    
    mbooEsNuevo = True
    mbooModificado = False
End Sub

Private Sub Class_Terminate()
    Cerrar
#If DAOLIB Then
    Set mdbEmpresa = Nothing
#Else
    Set mcnEmpresa = Nothing
    Set mcnEmpresaSuc = Nothing
    Set mcnEmpresaConfigRep = Nothing
#End If
    Set mProps.objGNOpcion = Nothing
    Set mProps.objSiiMain = Nothing
    Set mProps.ObjEmp2 = Nothing
    
    'Realiza compactación automática si es necesario
    If mbooCompact Then Compactar
    mbooCompact = False
End Sub


'*** MAKOTO 22/dic/00
'Ejecutar consultas SQL desde un archivo de texto o directamente
'  Si SQL comienza con FILE:, abre ese archivo y lo ejecuta sino ejecuta directamente
'  Si SQL comienza con PROC:, abre el archivo SiiEsquema.mdb
'        y obtiene los SQLs que tienen el mismo CodProc y los ejecuta por orden del campo 'Orden'
Public Sub EjecutarSQL( _
                ByVal sql As String, _
                ByRef numReg As Long)
    Dim f As Integer, s As String

    Select Case UCase(Left$(sql, 5))
    'Caso A. Si comienza con 'FILE:'
    Case "FILE:"
        sql = Right$(sql, Len(sql) - 5)         'Quita 'FILE:' y saca nombre de archivo a abrir

        'Lee el contenido del archivo a la variable s
        f = FreeFile
        Open sql For Binary As #f
        s = Input(LOF(f), f)
        Close #f
    
    'Caso B. Si comienza con 'PROC:'
    Case "PROC:"
        sql = Right$(sql, Len(sql) - 5)         'Quita 'PROC:' y saca nombre de procedimiento para ejecutarlo
        
        'Ejecuta todos los SQLs
        EjecutarSiiEsquema sql, numReg
        s = ""
    
    'Caso C. Si envia directamente SQL
    Case Else
        s = sql
    End Select

    'En caso A. y C. aquí se ejecuta el SQL
    If Len(s) > 0 Then
        Me.Execute s, True, numReg
    End If
End Sub

'Abre SiiEsquema.mdb y ejecuta las consultas del procedimiento indicado
' El archivo SiiEsquema.mdb debe estar en la misma carpeta que Sii_A.DLL
Private Function EjecutarSiiEsquema( _
                    ByVal codProc As String, _
                    ByRef numReg As Long) As Boolean
    Dim s As String, rs As Recordset, sql As String, Cancel As Boolean
    Dim ofs As Long
    On Error GoTo ErrTrap
    
    sql = "SELECT * FROM SQLText WHERE CodProc='" & codProc & "' ORDER BY Orden"
    
#If DAOLIB Then
    Dim db As Database
    'Pendiente
#Else
    Dim cn As ADODB.Connection
    Set cn = New ADODB.Connection
    
    s = "Provider=Microsoft.Jet.OLEDB.4.0;" & _
        "Data Source=" & App.Path & "\Sii4Esquema.mdb;" & _
        "Jet OLEDB:Database Password='aq9021'" & _
        ";" & "Persist Security Info=False"
    cn.Open s, "admin", ""
    
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    rs.Open sql, cn, adOpenStatic, adLockReadOnly
#End If
    With rs
        Do Until rs.EOF
            If Not IsNull(rs.Fields("Texto")) Then
                If Len(rs.Fields("Texto")) > 0 Then
                    'Obtiene todo el contenido del campo 'Texto'
                    ' Hay que usar el mátodo GetChunk porque es de tipo 'memo'
                    sql = ""
                    ofs = 0
                    Do
#If DAOLIB Then
                        s = rs.Fields("Texto").GetChunk(ofs, 1024)
#Else
                        s = rs.Fields("Texto").GetChunk(1024)
#End If
                        ofs = ofs + Len(s)
                        sql = sql & s
                    Loop Until Len(s) < 1024
                    
                    EjecutarSQLSub sql, numReg, Cancel
                    Debug.Print sql
                    If Cancel Then Exit Do          'Si fue cancelado por usuario, sale del ciclo
                End If
            End If
            .MoveNext
        Loop
        .Close
    End With
    
#If DAOLIB Then
#Else
    cn.Close
    Set cn = Nothing
#End If
    
    Set rs = Nothing
    EjecutarSiiEsquema = True
    Exit Function
ErrTrap:
    Err.Raise Err.Number, Err.Source, Err.Description, Err.HelpFile, Err.HelpContext
End Function

Private Sub EjecutarSQLSub( _
                ByVal sql As String, _
                ByRef numReg As Long, _
                ByRef Cancel As Boolean)
    Dim s As String, i As Long, v As Variant
    On Error Resume Next
    
    If Len(sql) = 0 Then Exit Sub
    
    sql = Replace(sql, vbCrLf & "go", vbCrLf & "GO")    'Convierte de 'go' --> 'GO'
    v = Split(sql, vbCrLf & "GO")                       'Divide la cadena por partes
    
#If DAOLIB Then
#Else
    Dim obj As ADODB.Error
    
    For i = LBound(v, 1) To UBound(v, 1)
        'Aviso al programa UI para visualizar estado
        RaiseEvent Procesando("Está ejecutándo SQL " & i + 1 & " de " & UBound(v, 1) + 1, Cancel)
        DoEvents
        If Cancel Then Exit For
            
        If Len(v(i)) > 0 Then
            Me.Coneccion.Execute v(i), numReg
            
            'Si hay algún mensaje o error
            If Me.Coneccion.Errors.Count Then
                s = ""
                For Each obj In Me.Coneccion.Errors
                    'Estado '01000' indica que es mensaje nada más (no es error)
                    If obj.SQLState <> "01000" Then
                        s = s & obj.Description & vbCr & vbCr & obj.SQLState
                    End If
                Next obj
                If Len(s) > 0 Then
                    'Si hay error, genera evento para avisar al programa UI.
                    RaiseEvent Procesando(s, Cancel)
                    DoEvents
                    If Cancel Then Exit For     'Si el usuario cancela el proceso, sale del ciclo
                End If
            End If
        End If
    Next i
#End If
    Err.Clear
End Sub


Public Function ConsANClientesProv(BandCliente As Boolean) As Variant
    Dim sql As String, cond As String, rs As Recordset
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    cond = IIf(BandCliente, _
            "PCProvCli.BandCliente=" & CadenaBool(True, gobjMain.EmpresaActual.TipoDB), _
            "PCProvCli.BandProveedor=" & CadenaBool(True, gobjMain.EmpresaActual.TipoDB))

    'Agregado Alex: proveedores por fecha modificado
    cond = cond & " AND (PCProvCli.FechaGrabado BETWEEN " & _
                FechaYMD(gobjCond.fecha1, gobjMain.EmpresaActual.TipoDB, False) & " AND " & _
                FechaYMD(gobjCond.fecha2 + 1, gobjMain.EmpresaActual.TipoDB, False) & ")"

    If Not (Len(gobjCond.Grupo1) = 0 And Len(gobjCond.Grupo2) = 0) Then
        cond = cond & " AND (CodGrupo" & gobjCond.NumPCGrupo & " BETWEEN '" & gobjCond.Grupo1 & _
            "' AND '" & gobjCond.Grupo2 & "')"
    End If

    sql = "SELECT PCGrupo" & gobjCond.NumPCGrupo & ".CodGrupo" & gobjCond.NumPCGrupo & ", PCGrupo" & gobjCond.NumPCGrupo & _
            ".Descripcion, PCProvCli.CodProvCli, PCProvCli.RUC, PCProvCli.Nombre, " & _
            "PCProvCli.Direccion1, PCProvCli.Ciudad,  PCProvCli.Provincia, PCProvCli.Telefono1, " & _
            "PCProvCli.NumAutSRI, PCProvCli.TipoComprobante, PCProvCli.TipoDocumento " & _
            "FROM PCGrupo" & gobjCond.NumPCGrupo & " RIGHT JOIN PCProvCli ON PCGrupo" & gobjCond.NumPCGrupo & ".IdGrupo" & gobjCond.NumPCGrupo & _
            " = PCProvCli.IdGrupo" & gobjCond.NumPCGrupo & "  WHERE "

    sql = sql & cond & " ORDER BY CodGrupo" & gobjCond.NumPCGrupo & ", PCProvCli.Nombre"
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANClientesProv = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Clientes/Proveedores para Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
End Function


Public Function ConsANRetIR(BandCliente As Boolean) As Variant
    Dim sql As String, cond As String, rs As Recordset, cond2 As String
    Dim Moneda As String, rs_aux As Recordset
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    Set rs_aux = New ADODB.Recordset
    rs_aux.CursorLocation = adUseClient
With gobjCond
        If .Usuario2 = "" Then
            sql = "Select MAX(CodRetencion)  AS CodRetencion2 FROM TSRetencion"
            Set rs_aux = gobjMain.EmpresaActual.OpenRecordset(sql)
            If Not rs_aux.EOF Then
                .Usuario2 = rs_aux!CodRetencion2
            End If
            Set rs_aux = Nothing
        End If
        .CodMoneda = MONEDA_PRE
        Moneda = IIf(.numMoneda > 0, "/Cotizacion" & .numMoneda + 1, "")
        sql = "SELECT TransID,CodRetencion,Retencion,FechaTrans,CodTrans," & _
                " Trans,NumDocRef,RUC,Nombre,Descripcion,NumDoc, Base" & Moneda & ",Porcent,Valor" & Moneda
        sql = sql & " FROM vwConsRetencion "
        cond = "WHERE ((CodRetencion Between '" & .Usuario1 & "' AND '" & .Usuario2 & "') AND ("
        cond = cond & "fechaTrans Between " & FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ")"
        cond = cond & " AND (CodTrans IN (" & PreparaCadena(.CodTrans) & ")) "
        '(" & PreparaCadena(gobjCond.CodTrans) & ")"
        cond2 = "AND ("
        If .Cliente = True Then  ' true para valores de DEBE
            cond2 = cond2 & "DEBE > 0)"
        Else
            cond2 = cond2 & "HABER > 0)"
        End If
        
        cond = cond & cond2 & ")"
        sql = sql & cond
        sql = sql & " ORDER BY CodRetencion,  FechaTrans, TransID, Orden"
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANRetIR = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Retenciones para Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
End Function

Public Function ConsANCompras() As Variant
    Dim pck As PCKardex, pcd As PCDocAsignado
    Dim objGnComp As GNComprobante, objGnCompDocOriginal As GNComprobante
    Dim sql As String, cond As String, CadenaValores As String
    Dim Recargo As String 'CadenaAgrupa  As String
    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
    Dim from As String, numReg As Long
    Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
    Dim Servicios As String, Bienes As String, RowRet As Long
    Const COL_BASESER = 15
    'segunda parte de la consulta: carga los valores de  Detalles de Anexos
    Const COL_FECHA = 2
    Const COL_CODCREDTRIB = 7
    Const COL_TRANSID = 1
    Const COL_TRANSRET = 5
    Dim condServ As String
    Dim condBien As String
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    With gobjCond
            cond = " AND (GNC.FechaTrans  BETWEEN " & _
                    FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                    FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
'            If Len(.Usuario1) > 0 Or Len(.Usuario2) > 0 Then
'                   cond = cond & " AND pcprovcli.CodProvCli  BETWEEN  '" & .Usuario1 & "' AND '" & .Usuario2 & "' "
'            End If
            VerificaExistenciaTabla 0
            VerificaExistenciaTabla 1
            VerificaExistenciaTabla 2
            VerificaExistenciaTabla 3
            VerificaExistenciaTabla 4
            VerificaExistenciaTabla 5
            VerificaExistenciaTabla 6
            sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as TotalDescuento Into tmp0 " & _
                    "From IvRecargo ivR inner join " & _
                        "IvKardexRecargo ivkR Inner join " & _
                            "GnComprobante gNc  " & _
                        "On ivkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = IvkR.IdRecargo "
            sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.CodForma) & ") " & cond & _
                    " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")" & _
                  "Group by IvkR.TransID"
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            'jeaa 09/01/2007
            'datos ICE
            sql = " Select Ivkr.TransID, "
            If Me.GNOpcion.IVKTipoDatoDouble Then
                sql = sql & " SUM(IVK.CostoRealTotalDou) AS BASEice,"
            Else
                sql = sql & " SUM(IVK.CostoRealTotal) AS BASEice,"
            End If
           sql = sql & " MAX(IVC.CodICE) AS CodICE, MAX(ivkr.Valor) As ValorICE"
            sql = sql & " Into tmp6"
            sql = sql & " From IvRecargo ivR"
            sql = sql & " inner join IvKardexRecargo ivkR"
            sql = sql & " INNER JOIN IVKARDEX IVK"
            sql = sql & " INNER JOIN IVINVENTARIO IV"
            sql = sql & " INNER JOIN IVRECARGOICE IVC"
            sql = sql & " ON IV.IDICE=IVC.IDICE"
            sql = sql & " ON IVK.IDINVENTARIO=IV.IDINVENTARIO"
            sql = sql & " ON IVKR.TRANSID=IVK.TRANSID"
            sql = sql & " Inner join GnComprobante gNc"
            sql = sql & " On ivkr.TransID = gNc.TransID"
            sql = sql & " On Ivr.IdRecargo = IvkR.IdRecargo"
            sql = sql & " Where gnc.Estado <> 3"
            sql = sql & " AND ivr.CodRecargo IN ('" & gobjMain.EmpresaActual.GNOpcion.ObtenerValor("RecDescParaICE") & "')" & cond
            sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")"
            sql = sql & " Group by IvkR.TransID"
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
'--datos de indices
            VerificaExistenciaTabla 3
            sql = " Select  DISTINCT GNC.TransID AS cp_id, GNC_b.TransID AS rtp_id"
            sql = sql & " Into tmp3"
            sql = sql & " From    (gncomprobante GNC Inner join pckardex pck_a ON GNC.TransID = pck_a.TransID ) INNER JOIN"
            sql = sql & "  (gncomprobante GNC_b Inner join pckardex pck_B ON GNC_b.TransID = pck_B.TransID )"
            sql = sql & " ON  PCK_A.ID = PCK_B.IDASIGNADO"
            sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " AND GNC_b.CodTrans IN (" & PreparaCadena(gobjCond.Grupo1) & ")"
            sql = sql & " AND (GNC.FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = sql & " and GNC.Estado<>3 and GNC_b.estado<>3 "
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            '--datos de la compra
            sql = " Select  GNC.TransID, Ane.FechaAnexos, GNC.FechaTrans, pcprovcli.ruc,"
            sql = sql & " GNC.Nombre, Ane.CodCredTrib, Ane.CodTipoComp, Ane.NumAutSRI,"
            sql = sql & " Ane.NumSerie, Ane.NumSecuencial, GNC.Descripcion,"
            sql = sql & " Case Ane.BandDevolucion WHEN 0 THEN 'N' ELSE 'S' END AS BandDev,"
            sql = sql & " Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as Trans,"
            sql = sql & " Gnc.CodTrans as Transa,"
            sql = sql & " Case vw.CostoTotalBase0 When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBase0 + (vw.CostoTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))) ) end As Valor0, "
            sql = sql & " Case vw.CostoTotalBaseIVA When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseIVA + (vw.CostoTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) end AS Valor12, "
            sql = sql & " Case vw.CostoTotal When 0 then 0 else "
            sql = sql & " vw.SignoCompra  * (vw.CostoTotal + (vw.CostoTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))))  End AS CostoTotal,  "
            sql = sql & " ane.NumSerieEstablecimiento ,ane.NumSeriePunto ,ane.FechaCaducidad, "
            sql = sql & " tmp6.BASEice, tmp6.CodICE ,tmp6.ValorICE"
            sql = sql & " Into tmp1"
            sql = sql & " from    (( tmp0 Right join gncomprobante Gnc "
            sql = sql & " inner join gntrans gnt"
            sql = sql & " inner join GNTransRecargo gntr"
            sql = sql & " inner join ivrecargo ivr"
            sql = sql & " on ivr.idrecargo=gntr.idrecargo"
            sql = sql & " on gnt.codtrans= gntr.codtrans"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " left join tmp6 on gnc.transid=tmp6.transid"
            If Me.GNOpcion.IVKTipoDatoDouble Then
                sql = sql & " inner join vwConsSUMIVKardexIVADou vw ON Gnc.TransID = vw.transid "
            Else
                sql = sql & " inner join vwConsSUMIVKardexIVA vw ON Gnc.TransID = vw.transid "
            End If

            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " inner join Anexos Ane on Gnc.TransID = Ane.Transid)"
            sql = sql & " right join pcprovcli  on gnc.IdProveedorRef=pcprovcli.idprovcli"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
'            sql = sql & " and CodRecargo='" & gobjMain.EmpresaActual.GNOpcion.ObtenerValor("RecDescParaIVA") & "'"
            sql = sql & " and GNC.Estado<>3 " & cond
            '--datos de la compra sin recargo de iva
'            sql = sql & " union all  Select  GNC.TransID, Ane.FechaAnexos, GNC.FechaTrans, pcprovcli.ruc,"
'            sql = sql & " GNC.Nombre, Ane.CodCredTrib, Ane.CodTipoComp, Ane.NumAutSRI,"
'            sql = sql & " Ane.NumSerie, Ane.NumSecuencial, GNC.Descripcion,"
'            sql = sql & " Case Ane.BandDevolucion WHEN 0 THEN 'N' ELSE 'S' END AS BandDev,"
'            sql = sql & " Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as Trans,"
'            sql = sql & " Gnc.CodTrans as Transa,"
'            sql = sql & " Case vw.CostoTotalBase0 When 0 then 0 else "
'            sql = sql & " vw.SignoCompra * (vw.CostoTotalBase0 + (vw.CostoTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))) ) end + "
'            sql = sql & " Case vw.CostoTotalBaseIVA When 0 then 0 else "
'            sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseIVA + (vw.CostoTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) end AS Valor0, "
'            sql = sql & " 0 AS Valor12, "
'            sql = sql & " Case vw.CostoTotal When 0 then 0 else "
'            sql = sql & " vw.SignoCompra  * (vw.CostoTotal + (vw.CostoTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))))  End AS CostoTotal,  "
'            sql = sql & " ane.NumSerieEstablecimiento ,ane.NumSeriePunto ,ane.FechaCaducidad, "
'            sql = sql & " tmp6.BASEice, tmp6.CodICE ,tmp6.ValorICE"
'            'sql = sql & " Into tmp1"
'            sql = sql & " from    (( tmp0 Right join gncomprobante Gnc "
'            sql = sql & " inner join gntrans gnt"
'            sql = sql & " inner join GNTransRecargo gntr"
'            sql = sql & " inner join ivrecargo ivr"
'            sql = sql & " on ivr.idrecargo=gntr.idrecargo"
'            sql = sql & " on gnt.codtrans= gntr.codtrans"
'            sql = sql & " on gnc.codtrans=gnt.codtrans"
'            sql = sql & " left join tmp6 on gnc.transid=tmp6.transid"
'            sql = sql & " inner join vwConsSUMIVKardexIVA vw ON Gnc.TransID = vw.transid "
'            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
'            sql = sql & " inner join Anexos Ane on Gnc.TransID = Ane.Transid)"
'            sql = sql & " right join pcprovcli  on gnc.IdProveedorRef=pcprovcli.idprovcli"
'            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
'            sql = sql & " and not CodRecargo='" & gobjMain.EmpresaActual.GNOpcion.ObtenerValor("RecDescParaIVA") & "'"
'            sql = sql & " and GNC.Estado<>3 " & cond
'
'
'
'
            VerificaExistenciaTabla 1
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            '-- datos de las retenciones
            sql = " select  GNC.TransID, Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as TransRet,"
            sql = sql & " sum(ts_retb.Debe+ts_retb.Haber) as ValorBien , sum(ts_retb.base) as BaseBien, tsrb.CodRetencion  as CodBien,"
            sql = sql & " Sum(ts_rets.Base)  as BaseServ, sum(ts_rets.Debe+ts_rets.Haber) as ValorServicio, tsrs.CodRetencion as CodServicio,"
            'jeaa 23/03/2006
            'sql = sql & " Sum(ts_retI.Base)  as BaseIR,     sum(ts_retI.Debe+ts_retI.Haber) as ValorIR,    tsrI.CodRetencion as CodIR,"
            sql = sql & " NumSerieEstablecimiento,"
            sql = sql & " NumSeriePunto ,"
            'jeaa 07/07/2006
            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosRetencion")) > 0 Then
                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosRetencion") > 0 Then
                    sql = sql & " gnc.NumDocRef as NumeroTrans , "
                Else
                    sql = sql & " gnc.NumTrans as NumeroTrans, "
                End If
            Else
                sql = sql & " gnc.NumTrans as NumeroTrans, "
            End If
            'jeaa 12/09/2007
            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion")) > 0 Then
                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion") > 0 Then
                    sql = sql & " gnc.AutorizacionSRI as NumAutorizacion , "
                Else
                    sql = sql & " gnt.NumAutorizacion as NumAutorizacion, "
                End If
            Else
                sql = sql & " gnt.NumAutorizacion as NumAutorizacion, "
            End If
            'sql = sql & " gnt.NumAutorizacion ,"
            sql = sql & " gnc.FechaTRans"
            sql = sql & " Into tmp2"
            sql = sql & " from    gntrans gnt inner join gncomprobante Gnc "
            sql = sql & "  inner join"
            sql = sql & " (tskardexret ts_retb inner join tsretencion tsrb on"
            sql = sql & " ts_retb.IdRetencion = tsrb.IdRetencion and tsrb.CodRetencion in"
            sql = sql & " (" & PreparaCadena(gobjCond.Bienes) & "))"
            sql = sql & " full Join"
            sql = sql & " (tskardexret ts_rets inner join tsretencion tsrs on"
            sql = sql & " ts_rets.IdRetencion = tsrs.IdRetencion AND tsrs.CodRetencion in"
            sql = sql & " (" & PreparaCadena(gobjCond.Servicios) & "))"
            sql = sql & " on ts_retb.IdRetencion = ts_rets.IdRetencion"
            sql = sql & " on GNC.TransID=ts_retb.TransID or GNC.TransID=ts_rets.TransID" ' or GNC.TransID=ts_retI.TransID "
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " WHERE GNC.CodTrans IN (" & PreparaCadena(gobjCond.Grupo1) & ")"
            sql = sql & " and GNC.Estado<>3 "
            sql = sql & " Group By ts_retb.TransID, ts_rets.TransID, GNC.TransId, GNC.CodTrans, GnC.NumTrans ,tsrb.CodRetencion, tsrs.CodRetencion, "
            sql = sql & " NumSerieEstablecimiento, NumSeriePunto,  "
            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosRetencion")) > 0 Then
                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosRetencion") > 0 Then
                    sql = sql & " gnc.NumDocRef , "
                Else
                    sql = sql & " gnc.NumTrans , "
                End If
            Else
                sql = sql & " gnc.NumTrans , "
            End If
                        'jeaa 12/09/2007
            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion")) > 0 Then
                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion") > 0 Then
                    sql = sql & " gnc.AutorizacionSRI , "
                Else
                    sql = sql & " gnt.NumAutorizacion , "
                End If
            Else
                sql = sql & " gnt.NumAutorizacion , "
            End If
             sql = sql & "  gnc.FechaTRans "
            'sql = sql & " ts_reti.TransID , ts_reti.TransID, tsrI.CodRetencion"
            VerificaExistenciaTabla 2
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            '-- datos de las retenciones  IMPUESTIO A LA RENTA
            'jeaa 23/03/2006
            sql = " select GNC.TransID, Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as TransRet,"
            sql = sql & " tsk.Base as BaseIR,(tsk.Debe+tsk.Haber) as ValorIR,  tsr.codretencion as CodIR,"
            sql = sql & " NumSerieEstablecimiento , NumSeriePunto, "
            'jeaa 07/07/2006
            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosRetencion")) > 0 Then
                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosRetencion") > 0 Then
                    sql = sql & " gnc.NumDocRef as NumeroTrans , "
                Else
                    sql = sql & " gnc.NumTrans as NumeroTrans, "
                End If
            Else
                sql = sql & " gnc.NumTrans as NumeroTrans, "
            End If
            'jeaa 12/09/2007
            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion")) > 0 Then
                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion") > 0 Then
                    sql = sql & " gnc.AutorizacionSRI as NumAutorizacion , "
                Else
                    sql = sql & " gnt.NumAutorizacion as NumAutorizacion, "
                End If
            Else
                sql = sql & " gnt.NumAutorizacion as NumAutorizacion, "
            End If
            sql = sql & "  gnc.FechaTrans"
            sql = sql & " Into tmp4"
            sql = sql & " from gntrans gnt"
            sql = sql & " inner join gncomprobante gnc"
            sql = sql & " inner join tskardexret tsk"
            sql = sql & " inner join tsretencion tsr"
            sql = sql & " on tsk.idretencion=tsr.idretencion"
            sql = sql & " on gnc.transid=tsk.transid"
            sql = sql & " on gnt.codtrans=gnc.codtrans"
            sql = sql & " where tsr.CodRetencion  like  '%IR%'"
            sql = sql & " and GNC.CodTrans IN (" & PreparaCadena(gobjCond.Grupo1) & ")"
            sql = sql & " and GNC.Estado<>3 "
              VerificaExistenciaTabla 4
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            'compras sin retencion
            sql = " select GNC.TransID,"
            sql = sql & " Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as TransRet,"
            sql = sql & " Valor0+Valor12 as baseIR,"
            sql = sql & " 0 as ValorIR ,"
            sql = sql & " ane. CodTipoRetencion as CodIR"
            sql = sql & " Into tmp5"
            sql = sql & " from anexos ane"
            sql = sql & " inner join gncomprobante gnc"
            sql = sql & " inner join tmp1 t"
            sql = sql & " on gnc.transid=t.transid"
            sql = sql & " on ane.transid=gnc.transid"
            sql = sql & " Where gnc.Estado <> 3"
            sql = sql & " and ane.BandCompraSinRetencion=1"
            sql = sql & " order by gnc.transid desc"
            VerificaExistenciaTabla 5
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            ' union de las tres tablas
            ' union de las tres tablas
            sql = " select  DISTINCT  a.Transid,a.FechaAnexos, a.FechaTrans, a.Trans, a.Transa, "
            sql = sql & "a.RUC, a.Nombre, "
            sql = sql & " a.NumSerieEstablecimiento , a.NumSeriePunto, "
            sql = sql & " a.NumSecuencial, a.NumAutSRI, a.FechaCaducidad, "
            sql = sql & "a.CodCredTrib, a.CodTipoComp,a. BandDev, "
            sql = sql & " a.Descripcion, a.Valor0, a.Valor12, b.BaseServ, b.CodServicio,"
            sql = sql & " b.ValorServicio , b.BaseBien, b.CodBien, b.ValorBien,  "
            sql = sql & " isnull(D.BaseIR,e.BaseIR) as baseIR, isnull(d.CodIR,e.CodIR) as CodIR, isnull(d.ValorIR, e.ValorIR) as ValorIR,"
            'sql = sql & " D.BaseIR, d.CodIR, d.ValorIR,  "
            sql = sql & "  isnull(b.TransRet, d.TransRet ) as TransRet,"
            sql = sql & "  isnull(b.NumSerieEstablecimiento, d.NumSerieEstablecimiento) as NumSerieEstablecimiento,"
            sql = sql & "  isnull(b.NumSeriePunto , d.NumSeriePunto ) NumSeriePunto ,"
            sql = sql & "  isnull(b.NumeroTrans, d.NumeroTrans) as NumTrans,"
            sql = sql & "  isnull(b.NumAutorizacion, d.NumAutorizacion) as NumAutorizacion,"
            sql = sql & "  isnull(b.FechaTrans, d.FechaTrans) As FechaTrans, "
            sql = sql & "  a.BASEice, a.CodICE ,a.ValorICE"
            sql = sql & " From (tmp1 a left JOIN tmp5 E on E.Transid=a.Transid) left join tmp2 b right join tmp3 c left join tmp4 D on d.Transid=c.rtp_id on b.Transid=c.rtp_id on a.Transid=c.cp_id"
            sql = sql & " order by a.CodTipoComp"
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANCompras = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Compraspara Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 4
End Function

Public Function ConsANCreditoDebito() As Variant
    Dim pck As PCKardex, pcd As PCDocAsignado
    Dim objGnComp As GNComprobante, objGnCompDocOriginal As GNComprobante
    Dim sql As String, cond As String, CadenaValores As String
    Dim CadenaAgrupa  As String, Recargo As String
    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
    Dim from As String, numReg As Long
    Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
        Set rs = New ADODB.Recordset
        rs.CursorLocation = adUseClient
    With gobjCond
        VerificaExistenciaTabla 0
        cond = " "
        '******* procedimiento almacenado no funciona si se selcciona mas de una transacciones
     '   If Len(.CodTrans) > 0 Then
     '      cond = PreparaCadena(.CodTrans)
     '   End If
     '   sql = "spConsANDebitosCreditos " & cond & "," & FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB)
     '   sql = sql & "," & FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB)
    '******* procedimiento almacenado no funciona si se selcciona mas de una transacciones
        If Len(.CodTrans) > 0 Then
           cond = cond & " WHERE GNComprobante.CodTrans IN (" & PreparaCadena(.CodTrans) & ")"
        End If
        ' primero sacamos y prorrateamos el descuento
        'JEAA 26/08/04
        sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as TotalDescuento Into tmp0 " & _
                    "From IvRecargo ivR inner join " & _
                        "IvKardexRecargo ivkR Inner join " & _
                            "GnComprobante  " & _
                        "On ivkr.TransID = GnComprobante.TransID " & _
                    "On Ivr.IdRecargo = IvkR.IdRecargo "
            sql = sql & cond & " AND GnComprobante.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.Servicios) & ") " & _
                  " Group by IvkR.TransID"
        gobjMain.EmpresaActual.EjecutarSQL sql, 0
        'PRIMERA PARTE: Ubicar las transacciones de compra afectadas por las NC/ND
        VerificaExistenciaTabla 1
                sql = "SELECT ANEXOS.TRANSID, " & _
                    "GNCOMPROBANTE.CodTrans+' '+CONVERT(varchar,NumTrans) as Trans " & _
                    "INTO TMP1 FROM GNCOMPROBANTE INNER JOIN ANEXOS " & _
                    "ON GNCOMPROBANTE.TRANSID = ANEXOS.TRANSIDAFECTADA " & _
                    "WHERE ANEXOS.TRANSIDAFECTADA IN (SELECT Anexos.TransidAfectada " & _
                    "FROM GNCOMPROBANTE INNER JOIN ANEXOS " & _
                    " ON GNCOMPROBANTE.TRANSID = ANEXOS.TRANSID "
        sql = sql & cond & ")"
        gobjMain.EmpresaActual.EjecutarSQL sql, 0
    'Otras condiciones necesarias para el caso de devoluciones
        If Len(.Usuario1) > 0 Or Len(.Usuario2) > 0 Then
               cond = cond & " AND pcprovcli.CodProvCli BETWEEN  '" & .Usuario1 & "' AND '" & .Usuario2 & "' "
        End If
'        sql = "SELECT TransId, CostoRealTotal, Case IVA WHEN 0 THEN CostoRealTotal " & _
'                "ELSE 0 END AS Costo0, Case IVA WHEN 0 THEN 0 Else: CostoRealTotal " & _
'                "END As Costo12 Into Tmp2 From IVKardex"
            sql = " Select  gncomprobante.TransID,"
            sql = sql & " Case vw.CostoTotal When 0 then 0 else "
            sql = sql & " vw.CostoTotal + (vw.CostoTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))  End AS CostoRealTotal, "
            sql = sql & " Case vw.CostoTotalBase0 When 0 then 0 else "
            sql = sql & " vw.CostoTotalBase0 + (vw.CostoTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))  end As Costo0, "
            sql = sql & " Case vw.CostoTotalBaseIVA When 0 then 0 else "
            sql = sql & "  vw.CostoTotalBaseIVA + (vw.CostoTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))) end AS Costo12 "
            sql = sql & " Into tmp2"
            sql = sql & " From    ( tmp0 Right join gncomprobante inner join  "
            If Me.GNOpcion.IVKTipoDatoDouble Then
                sql = sql & " vwConsSUMIVKardexIVADou vw"
            Else
                sql = sql & " vwConsSUMIVKardexIVA vw"
            End If
            sql = sql & " ON gncomprobante.TransID = vw.transid ON tmp0.TransID = gncomprobante.TransID)" & cond
        VerificaExistenciaTabla 2
        gobjMain.EmpresaActual.EjecutarSQL sql, 0
       cond = cond & " and (GnComprobante.FechaTrans  BETWEEN " & _
        FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
        FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
        VerificaExistenciaTabla 3
        CadenaValores = "abs(Sum(IVK.Costo0" & _
              IIf(.numMoneda > 0, "/Cotizacion" & .numMoneda + 1, "") & ")) As Valor0, "
        CadenaValores = CadenaValores & "abs(Sum(IVK.Costo12" & _
              IIf(.numMoneda > 0, "/Cotizacion" & .numMoneda + 1, "") & ")) As Valor12 "
         CadenaValores = " IVK.Costo0, IVK.Costo12 "
        sql = "Select GNCOMPROBANTE.TRANSID, GNComprobante.FechaTrans, GNComprobante.FechaTrans,  " & _
                "GNCOMPROBANTE.CodTrans+' '+CONVERT(varchar,NumTrans) as Trans, GNCOMPROBANTE.CodTrans, Tmp1.Trans,  PCProvCli.RUC, " & _
                "GNComprobante.Nombre, ANEXOS.CodCredTrib, Anexos.CodTipocomp, " & _
                " Anexos.NumSerieEstablecimiento, Anexos.NumSeriePunto, "
             If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosNotaCredito")) > 0 Then
                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosNotaCredito") = 0 Then
                    sql = sql & " Anexos.NumSecuencial as NumSecuencial, "
                Else
                    sql = sql & " NumDocRef as NumSecuencial, "
                End If
            Else
                sql = sql & " Anexos.NumSecuencial as NumSecuencial, "
            End If
        sql = sql & " Anexos.NumAutSRI, Anexos.FechaCaducidad, " & _
                " GNComprobante.Descripcion , " & CadenaValores
        sql = sql & "FROM (((GnComprobante  LEFT JOIN PCProvCli ON GnComprobante.IdProveedorRef = PCProvCli.IdProvCli) " & _
                "INNER JOIN Tmp2 IVK ON GNComprobante.TransID = IVK.TransID) " & _
                "LEFT JOIN ANEXOS ON GNCOMPROBANTE.TRANSID = ANEXOS.TRANSID) " & _
                 "LEFT JOIN TMP1 ON  ANEXOS.TRANSID = TMP1.TRANSID "
        sql = sql & cond & " and GNCOMPROBANTE.estado<>3 "
        sql = sql & " GROUP BY GNCOMPROBANTE.TRANSID, " & _
                "GNComprobante.CodTrans+' '+CONVERT(varchar,GNComprobante.NumTrans),  " & _
                "GNComprobante.FechaTrans, GNComprobante.Nombre, GNComprobante.Descripcion, " & _
                "Anexos.CodCredTrib, Anexos.CodTipoComp,  " & _
                "Anexos.NumSerieEstablecimiento,Anexos.NumSeriePunto,Anexos.FechaCaducidad, ANEXOS.NumAutSRI, " & _
                "Anexos.NumSecuencial, Anexos.TransIDAfectada,  Tmp1.Trans, PCProvCli.RUC, IVK.Costo0, IVK.Costo12,GNComprobante.CodTrans , NUMDOCREF " & _
                "ORDER BY ANEXOS.TRANSIDAFECTADA"
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANCreditoDebito = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Notas de Credito y Notas de Debito para Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    VerificaExistenciaTabla 3
End Function

'Devuelve una cadena para asignar a ListCombo de vsFlexGrid

Public Function ListaCTLocalesParaFlexGrid(TipoCuenta As Integer) As String
    Dim sql As String, cad As String, rs As Recordset

    sql = "SELECT  Nombre FROM CtLocal order by nombre"
    Set rs = Me.OpenRecordset(sql)

    'Pero por ahora uso lo siguiente para controlar cuentas de total y de movimiento
#If DAOLIB Then
    cad = "|" & GetStringDAO(rs, 21 + (20 + 80 + 2))        'Código+'*'=21, Space+NombreCuenta+'[]'=20+80+2
#Else
    If Not rs.EOF Then cad = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    
    rs.Close
    Set rs = Nothing
    
    ListaCTLocalesParaFlexGrid = cad
End Function


Public Function ListaIVItemFamiliaParaFlex() As String
    Dim sql As String, cond As String, s As String
    Dim rs As Recordset
    
    sql = "SELECT Descripcion FROM IVInventario WHERE tipo=2"
    sql = sql & " ORDER BY CodInventario"
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 20 + 80)
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If

    ListaIVItemFamiliaParaFlex = s
    rs.Close
    Set rs = Nothing
End Function

'Consulta de comparación entre Presupuesto  y Consumos con rango de Fechas
Public Function ConsIVComparativoFecha() As Variant
    Dim sql As String, cond As String, rs As Recordset
    
#If DAOLIB Then
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient

    sql = "spConsIVComparativoFecha '" & _
                gobjCond.CodTrans & "', '" & _
                gobjCond.CodCentro1 & "', " & _
                gobjCond.numMoneda & ", " & _
                FechaYMD(gobjCond.fecha1, TipoDB) & ", " & _
                FechaYMD(gobjCond.fecha2, TipoDB)
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    Set ConsIVComparativoFecha = rs
    Set rs = Nothing
End Function

Public Function ConsANVentas() As Variant
    Dim sql As String, cond As String, CadenaValores As String
    Dim CadenaAgrupa  As String
    Dim v As Variant, max As Integer, i As Integer
    Dim from As String, numReg As Long, f1 As String
    Dim rs As Recordset
    Static Recargo As String
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    With gobjCond
        VerificaExistenciaTabla 0
        'Reporte de un mes a la vez
        f1 = DateSerial(Year(.fecha1), Month(.fecha1), 1)
        cond = " AND GC.FechaTrans BETWEEN " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & _
               " AND " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB)
        
        If Len(.Usuario1) > 0 Or Len(.Usuario2) > 0 Then
               cond = cond & " AND pcprovcli.CodProvCli BETWEEN  '" & .Usuario1 & "' AND '" & .Usuario2 & "' "
        End If
        
        If Len(.CodTrans) > 0 Then
           cond = cond & " AND GC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")"
        End If
        
        sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as TotalDescuento Into tmp0 " & _
                "From IvRecargo ivR inner join " & _
                    "IvKardexRecargo ivkR Inner join " & _
                        "GnComprobante gc Inner join PcPRovCLi on gc.IdClienteRef = PCProvCli.IdProvCli " & _
                    "On ivkr.TransID = gc.TransID " & _
                "On Ivr.IdRecargo = IvkR.IdRecargo "
        sql = sql & "WHERE gc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.Servicios) & ") " & cond & _
              "Group by IvkR.TransID"
        
        gobjMain.EmpresaActual.EjecutarSQL sql, 0
    
        sql = "SELECT " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB) & " as Fecha, " & _
              "PCProvCli.RUC,PCProvCli.Nombre,GC.CodTrans,Count(GC.NumTrans) as NumDocs ," & _
              "SUM(PrecioTotalBase0 + (PrecioTotalBase0 * (cast(isnull(TotalDescuento,0) as float) / cast(PrecioTotal as float)))) as Base0, " & _
              "SUM(PrecioTotalBaseIVA + (PrecioTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(PrecioTotal as float)))) As BaseIVA "
        sql = sql & " FROM tmp0 Right join " & _
                        "vwConsSUMIVKardexIVA inner join " & _
                            "GNComprobante GC  Inner JOIN PCProvCli ON GC.IdClienteRef = PCProvCli.IdProvCli " & _
                        "ON vwConsSUMIVKardexIVA.TransID = GC.TransID " & _
                    "ON tmp0.TransID = GC.TransID"
        sql = sql & " WHERE GC.Estado<>3 " & cond & _
              "GROUP BY PCProvCli.RUC, PCProvCli.Nombre,GC.CodTrans "
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    
    UltimoRecordset rs
    Set ConsANVentas = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Ventas para Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
End Function


' jeaa 05/04/2004 para Hormipisos
'Para Kardex de items separadas las columnas de Costo Total + y -
Public Function ConsIVKardex2Col() As Variant
    Dim sql As String, cond As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsIVKardexPorFecha")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("prmCodBodega") = gobjCond.CodBodega1
    qdef.Parameters("CodItem1") = IIf(Len(gobjCond.CodItem1) = 0, "!", gobjCond.CodItem1)
    qdef.Parameters("CodItem2") = IIf(Len(gobjCond.CodItem2) = 0, String$(20, "z"), gobjCond.CodItem2)
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient

    sql = "spConsIVKardexPorFecha2Col " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodBodega1 & "','" & _
                gobjCond.CodItem1 & "','" & _
                gobjCond.CodItem2 & "','" & _
                gobjCond.NombreItem & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB)

    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    Set ConsIVKardex2Col = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Kardex inv. " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "IV"
End Function

'jeaa 30/08/04
'*** PARA SACAR LAS LAS FORMA  DE COBRO PAGO
    ' QUE SE CONSIDERAN COMO EFECTIVO
Public Function ConsTSConsideradoEfectivo(ByVal CodForma As String) As Boolean
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    sql = "select CodForma from tsformacobropago where ConsiderarComoEfectivo =1 and codforma ='" & CodForma & "'"
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        ConsTSConsideradoEfectivo = True
    Else
        ConsTSConsideradoEfectivo = False
    End If
    Set rs = Nothing
End Function


'jeaa 31/08/04
'* LISTA DE CLIENTES CON FILTROS

Public Function ListaPCProvCliFiltro(BandProveedor As Boolean, _
                                    BandCliente As Boolean, _
                                    codPC As String, _
                                    Nombre As String, _
                                    Direccion As String, _
                                    RUC As String, _
                                    CodGrupoDesde As String, _
                                    CodGrupoHasta As String, _
                                    numG As Integer, _
                                    BandSoloValida As Boolean, _
                                    BandRS As Boolean) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset, i As Integer
    
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If

    sql = "SELECT pc.CodProvCli, pc.Nombre, a.CodTipoDocumento, pc.RUC, TipoProvCli , g1.CodGrupo1, g2.CodGrupo2, g3.CodGrupo3, g4.CodGrupo4 ,pc.observacion, PC.ESTADO  FROM " & _
          " PCGrupo4 g4 RIGHT JOIN (PCGrupo3 g3 RIGHT JOIN (PCGrupo2 g2 RIGHT JOIN (PCGrupo1 g1 RIGHT JOIN PCProvCli pc " & _
            " left join Anexo_TipoDocumento a on pc.IdTipoDocumento  = a.Id" & _
                          " ON g1.IdGrupo1 = pc.IdGrupo1) " & _
                    " ON g2.IdGrupo2 = pc.IdGrupo2) " & _
                " ON g3.IdGrupo3 = pc.IdGrupo3) " & _
                " ON g4.IdGrupo4 = pc.IdGrupo4 "
    If Not (BandProveedor And BandCliente) Then
        If BandProveedor Then
            sql = sql & " WHERE pc.BandProveedor=" & CadenaBool(True, TipoDB)
        Else
            sql = sql & " WHERE pc.BandCliente=" & CadenaBool(True, TipoDB)
        End If
    End If
    
    If Len(codPC) > 0 Then
        cond = cond & " and (CodProvCli LIKE '" & codPC & comodin & "') "
    End If
    
    If Len(Nombre) > 0 Then
        cond = cond & " and ((Nombre LIKE '" & Nombre & comodin & "') " & _
                      "OR (Nombre LIKE '" & Nombre & comodin & "')) "
    End If
    
    If Len(Direccion) > 0 Then
        cond = cond & " and (Direccion1 LIKE '" & Descripcion & comodin & "') "
    End If
    
    If Len(RUC) > 0 Then
        cond = cond & " and (ruc LIKE '" & RUC & comodin & "') "
    End If
    
    
    If Not (Len(CodGrupoDesde) = 0 And Len(CodGrupoHasta) = 0) Then
        cond = cond & " AND (CodGrupo" & numG & " BETWEEN '" & CodGrupoDesde & _
            "' AND '" & CodGrupoHasta & "')"
    End If

    
    If Len(cond) > 0 Then sql = sql & cond
    sql = sql & " ORDER BY Nombre "
    
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCProvCliFiltro = rs
    Else
        ListaPCProvCliFiltro = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaIVRecargoTransaccion(ByVal CodTrans As String, ByVal BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    'ivr.idrecargo,
    sql = "SELECT ivr.codrecargo, ivr.descripcion " & _
            " FROM GNTransRecargo gnt inner join IVRecargo ivr on ivr.idrecargo=gnt.idRecargo " & _
            " WHERE codtrans='" & CodTrans & "' ORDER BY CodRecargo "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVRecargoTransaccion = rs
    Else
        ListaIVRecargoTransaccion = MiGetRows(rs)

        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function DesctoPCxIV(ByVal CodIVGrupo As String, ByVal codPC As String) As Double
Dim sql As String, rs As Recordset, NumIVGrupo As Integer, NumPCGrupo As Integer
    NumIVGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumIVGrupo")) + 1
    NumPCGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumPCGrupo")) + 1
    sql = "Select valor from ivgrupo" & NumIVGrupo
    sql = sql & " inner join  DescIVGPCG desct"
    sql = sql & " inner join pcgrupo" & NumPCGrupo & " pcg "
    sql = sql & " inner join pcprovcli pc"
    sql = sql & " on pc.idGrupo" & NumPCGrupo & "=pcg.idGrupo" & NumPCGrupo & ""
    sql = sql & " on pc.idgrupo" & NumPCGrupo & " = desct.idpcgrupo "
    sql = sql & " on ivgrupo" & NumIVGrupo & ".idgrupo" & NumIVGrupo & " = Desct.idivgrupo"
    sql = sql & " WHERE ivgrupo" & NumIVGrupo & ".CodGrupo" & NumIVGrupo & " = '" & CodIVGrupo & "'"
    sql = sql & " and CodProvCli ='" & codPC & "'"
'    Set rs = mobjGNComp.Empresa.OpenRecordset(sql)
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        DesctoPCxIV = rs!Valor
    Else
        DesctoPCxIV = 0
    End If
    Set rs = Nothing
End Function


Public Function ListaDesctoPCxIV(BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset, NumIVGrupo As Integer, NumPCGrupo As Integer
    NumIVGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumIVGrupo")) + 1
    NumPCGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumPCGrupo")) + 1
    sql = " Select desct.CodPcGrupo,pcg.descripcion, desct.CodIvGRupo,ivg.descripcion, desct.valor"
    sql = sql & " from pcgrupo" & NumPCGrupo & " pcg"
    sql = sql & " inner join DescIVGPCG desct"
    sql = sql & " inner join ivgrupo" & NumIVGrupo & " ivg"
    sql = sql & " on ivg.idgrupo" & NumIVGrupo & "=desct.idivgrupo"
    sql = sql & " on PCg.idgrupo" & NumPCGrupo & "=desct.idpcgrupo"
'    sql = " Select  desct.CodPcGrupo, desct.CodIvGRupo, desct.valor"
'    sql = sql & " from DescIVGPCG desct"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaDesctoPCxIV = rs
    Else
        ListaDesctoPCxIV = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

'jeaa 05/01/05
Public Function CreaDesctPCxIV() As DesctoPcGrupoxIVGrupo
    Dim obj As DesctoPcGrupoxIVGrupo
    Set obj = New DesctoPcGrupoxIVGrupo
    Set obj.Empresa = Me
    Set CreaDesctPCxIV = obj
    Set obj = Nothing
End Function

Public Function RecuperaDesctPCxIV(key As Variant) As DesctoPcGrupoxIVGrupo
    Dim obj As DesctoPcGrupoxIVGrupo
    Set obj = New DesctoPcGrupoxIVGrupo
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaDesctPCxIV = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function ListaDesctoPCxIV2(CodPCGrupo As String, _
                                  CodIVGrupo As String, _
                                  BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset, i As Integer
    Dim NumIVGrupo As Integer, NumPCGrupo As Integer
    NumIVGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumIVGrupo")) + 1
    NumPCGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumPCGrupo")) + 1
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If
    sql = " Select desct.CodPcGrupo,pcg.descripcion, desct.CodIvGRupo, ivg.descripcion, desct.valor, desct.valorAdicional"
    sql = sql & " from pcgrupo" & NumPCGrupo & " pcg"
    sql = sql & " inner join DescIVGPCG desct"
    sql = sql & " inner join ivgrupo" & NumIVGrupo & " ivg"
    sql = sql & " on ivg.idgrupo" & NumIVGrupo & "=desct.idivgrupo"
    sql = sql & " on PCg.idgrupo" & NumPCGrupo & "=desct.idpcgrupo"
'        sql = " Select  desct.CodPcGrupo, desct.CodIvGRupo, desct.valor"
'        sql = sql & " from DescIVGPCG desct"
    If Len(CodPCGrupo) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(desct.CodPCgrupo= '" & CodPCGrupo & " ') "
    End If
    If Len(CodIVGrupo) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(desct.CodIVgrupo= '" & CodIVGrupo & " ') "
    End If
        If Len(cond) > 0 Then sql = sql & " WHERE " & cond
        
    sql = sql & " ORDER BY desct.CodPcGrupo"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaDesctoPCxIV2 = rs
    Else
        ListaDesctoPCxIV2 = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaUsuarios(BandSoloValida As Boolean, BandRS As Boolean) As Variant
'BandRS : True  --> Devuelve Recordset de ADO
'      False --> Devuelve en Array de Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodUsuario,NombreUsuario,CodGrupo,BandSupervisor " & _
          "FROM " & gobjMain.NombreDBSQL & ".dbo.Usuario "
    If BandSoloValida Then sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    sql = sql & " ORDER BY CodUsuario"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaUsuarios = rs
    Else
        ListaUsuarios = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


Public Function ConsPCSaldoconF_Corte(ByVal BandProveedor As Boolean, _
                            ByVal BandCliente As Boolean) As Variant
    Dim sql As String, cond As String, rs As Recordset
   Dim aux As String, Condicion As String
   Dim numReg As Long, Trans As String, i As Integer
        VerificaExistenciaTabla 1
        'Prepara reporte utilizando Tablas Temporales
    '1) Prepara los  documentos  Asignados  menores a la fecha
        aux = IIf(gobjCond.numMoneda > 0, "/Cotizacion" & gobjCond.numMoneda + 1, "")
        sql = "SELECT " & _
            "pck.IdAsignado, " & _
            "(pck.Debe + pck.Haber) " & aux & " AS Valor " & _
            "INTO tmp1 " & _
            "From " & _
            "GNtrans gt INNER JOIN " & _
                "(GNComprobante gc INNER JOIN PCKardex pck " & _
                "ON gc.transID = pck.transID) " & _
                          "ON gt.Codtrans = gc.Codtrans " & _
            "Where (pck.IdAsignado <> 0) " & _
            "AND (gc.Estado <> 3) " & _
            "AND (gt.AfectaSaldoPC=1) " & _
            "AND (gc.Fechatrans<= " & FechaYMD(gobjCond.FechaCorte, gobjMain.EmpresaActual.TipoDB) & ")"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        VerificaExistenciaTabla 2
    '2)Agrupa  estos  documentos por IdAsignado
        sql = "SELECT " & _
              "IdAsignado," & _
              "isnull(Sum(Valor),0) AS VCancelado " & _
              "INTO tmp2 " & _
              "FROM tmp1 " & _
              "GROUP BY IdAsignado"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
    '3) Finalmente une  con el documento  Padre
        VerificaExistenciaTabla 3
        sql = "SELECT  gc.transId, gc.Codtrans, gc.Numtrans, gc.NumDocRef, pc.IdProvCli, " & _
            "pc.CodProvCli, pc.Nombre, " & _
            "(pck.Debe ) " & aux & " AS Debe, " & _
            "( pck.Haber) " & aux & " AS Haber, " & _
            "(pck.Debe + pck.Haber) " & aux & " AS Valor, " & _
            "isnull(vw.VCancelado,0) AS VCancelado, " & _
            "(pck.Debe + pck.Haber) " & aux & " - isnull(vw.VCancelado,0) AS Saldo, " & _
            "pck.IdForma, pck.NumLetra, " & _
            "pck.FechaEmision, pck.FechaVenci, " & _
            "pck.Observacion " & _
            "INTO tmp3 " & _
            "From GNComprobante gc INNER JOIN " & _
                    "(PCProvCli pc  INNER JOIN " & _
                    "    (PCKardex pck  LEFT JOIN " & _
                    "      tmp2 vw  ON vw.IdAsignado = pck.Id) " & _
                    " ON pc.IdProvCli = pck.IdProvCli) " & _
                "ON gc.transID = pck.transID " & _
            "Where (pck.IdAsignado = 0) And (gc.Estado <> 3) " & _
            "AND (gc.Fechatrans<=" & FechaYMD(gobjCond.FechaCorte, gobjMain.EmpresaActual.TipoDB) & ") and pck.Idelemento=0 "
            If BandProveedor = False And BandCliente = True Then
                If gobjCond.TipoSaldo = 1 Then
                    sql = sql & "AND (pck.Haber > 0) "
                ElseIf gobjCond.TipoSaldo = 2 Then
                    sql = sql & "AND (pck.Debe > 0) "
                End If
            Else
                If gobjCond.TipoSaldo = 1 Then
                    sql = sql & "AND (pck.DEBE > 0) "
                ElseIf gobjCond.TipoSaldo = 2 Then
                    sql = sql & "AND (pck.HABER > 0) "
                End If
            End If
            If BandCliente = True And BandProveedor = False Then
                    sql = sql & "and bandcliente=1"
            ElseIf BandCliente = False And BandProveedor = True Then
                    sql = sql & "and bandproveedor=1"
            End If
      gobjMain.EmpresaActual.EjecutarSQL sql, numReg
    '---------------------------------------------------------------------------------
    '4  Consulta  final
        If gobjCond.TipoSaldo = 1 Then
            Condicion = Condicion & " AND vw.FechaVenci <= " & FechaYMD(gobjCond.FechaCorte, gobjMain.EmpresaActual.TipoDB)
        End If
        If Len(gobjCond.CodPCGrupo) > 0 Then
            Condicion = Condicion & " AND PCGrupo" & gobjCond.NumPCGrupo & ".CodGrupo" & gobjCond.NumPCGrupo & " = '" & _
                        gobjCond.CodPCGrupo & " '"
        End If
#If DAOLIB Then
    Trans = "vw.Codtrans & ' ' & CSTR(vw.Numtrans)"
#Else
    Trans = "vw.Codtrans + ' ' + CONVERT(varchar,vw.Numtrans)"
#End If
       sql = "SELECT " & _
             "vw.CodProvCli, vw.Nombre,  "
            If gobjCond.TipoSaldo = 0 Then
                'sql = sql & " sum(vw.debe) as debe, " & _
               "sum(vw.haber) as haber, " & _
                " (sum(vw.debe) - sum(vw.haber) ) as Saldo, "
                '" (sum(vw.debe) - sum(vw.haber) ) as Saldo, "
                '" as Saldo, "
                sql = sql & " abs(sum(vw.debe)) +abs(sum(vw.VCANCELADO))  as debe, "
                sql = sql & "  abs(sum(vw.haber)) as haber, "
                'sql = sql & "((sum(vw.debe) -sum(vw.VCANCELADO)) - sum(vw.haber) ) as Saldo,  "
                sql = sql & " (abs(sum(vw.debe)) -abs(sum(vw.VCANCELADO)))+ (abs(sum(vw.haber))) as saldo,"
           Else
                sql = sql & " abs(sum(vw.VALOR)) as debe, " & _
                "abs(sum(vw.VCANCELADO)) as haber, " & _
                " (abs(sum(vw.VALOR)) - abs(sum(vw.VCANCELADO)) ) as Saldo, "
                '" (sum(vw.debe) - sum(vw.haber) ) as Saldo, "
                '"sum(saldo) as Saldo, "
           End If
            sql = sql & " PCGrupo1.CODGRUPO1, PCGrupo1.DESCRIPCION,    PCGrupo2.CODGRUPO2, PCGrupo2.DESCRIPCION,  PCGrupo3.CODGRUPO3,   PCGrupo3.Descripcion,  PCGrupo4.CODGRUPO4, PCGrupo4.Descripcion"
             sql = sql & " FROM Gntrans INNER JOIN ((tmp3 vw INNER JOIN " & _
               "((PCProvCli  LEFT JOIN PCGrupo1 ON " & _
                    " (PCProvCli.IdGrupo1 =  PCGrupo1.IDGrupo1 )" & _
                    " LEFT JOIN PCGrupo2 ON PCProvCli.IdGrupo2 =  PCGrupo2.IDGrupo2) " & _
                    " LEFT JOIN PCGrupo3 ON PCProvCli.IdGrupo3 =  PCGrupo3.IDGrupo3) " & _
                    " LEFT JOIN PCGrupo4 ON PCProvCli.IdGrupo4 =  PCGrupo4.IDGrupo4 " & _
               " ON PCProvCli.IdProvCli = vw.IdProvCli) LEFT JOIN TSFormaCobroPago tsforma on vw.idforma = tsforma.idforma) ON Gntrans.Codtrans = vw.Codtrans  "
        sql = sql & "Where  Saldo > 0 " & Condicion & "  AND  (Gntrans.AfectaSaldoPC=1)"
        sql = sql & " group by vw.CodProvCli, vw.Nombre,PCGrupo1.DESCRIPCION,    PCGrupo2.DESCRIPCION,    PCGrupo3.Descripcion, PCGrupo4.Descripcion, "
        sql = sql & " PCGrupo1.CODGRUPO1 , PCGrupo2.CODGRUPO2, PCGrupo3.CODGRUPO3, PCGrupo4.CODGRUPO4"
        If gobjCond.TipoSaldo = 1 Then
            sql = sql & " having sum(vw.VALOR) >0 "
        End If
        Set rs = Me.OpenRecordset(sql)
    Set ConsPCSaldoconF_Corte = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Saldos ProvCli con fecha de corte" & gobjCond.FechaCorte, "PC"
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
End Function


'jeaa 25/04/2005
Public Function ListaMotivo(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
    If InStr(1, UCase(Me.CodEmpresa), "CORP") > 0 Then
        sql = "SELECT CodMotivo,motivo.Descripcion,pc.Nombre, gnd.CodDestino, BAndArribo FROM Motivo"
        sql = sql & " left JOIN Pcprovcli PC on Motivo.Idcliente=pc.idprovcli "
        sql = sql & " left JOIN GnDestino GND on Motivo.Iddestino=gnd.idDestino "
    Else
        sql = "SELECT CodMotivo,motivo.Descripcion FROM Motivo"
   
    End If
    If BandSoloValida Then
        sql = sql & " WHERE Motivo.BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY CodMotivo"

    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaMotivo = rs
    Else
        ListaMotivo = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaMotivoParaFlexGrid() As String
    Dim sql As String, s As String
    Dim rs As Recordset
    
    sql = "SELECT CodMotivo,Descripcion FROM Motivo "
    sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    sql = sql & " ORDER BY CodMotivo"

    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 10 + 40)         '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|", "(nulo)")
#End If
    ListaMotivoParaFlexGrid = s
    rs.Close
    Set rs = Nothing
End Function


Public Function RecuperaMotivo(key As Variant) As motivo
    Dim obj As motivo
    
    Set obj = New motivo
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaMotivo = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CreaMotivo() As motivo
    Dim obj As motivo
    
    Set obj = New motivo
    Set obj.Empresa = Me
    Set CreaMotivo = obj
    Set obj = Nothing
End Function
'jeaa 26/04/2005
'Para Kardex de items por transaccion
Public Function ConsIVKardexTrans() As Variant
    Dim sql As String, cond As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsIVKardexPorFecha")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("prmCodBodega") = gobjCond.CodBodega1
    qdef.Parameters("CodItem1") = IIf(Len(gobjCond.CodItem1) = 0, "!", gobjCond.CodItem1)
    qdef.Parameters("CodItem2") = IIf(Len(gobjCond.CodItem2) = 0, String$(20, "z"), gobjCond.CodItem2)
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient

    sql = "spConsIVKardexPorTrans " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodBodega1 & "','" & _
                gobjCond.CodItem1 & "','" & _
                gobjCond.CodItem2 & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB)
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    Set ConsIVKardexTrans = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Kardex inv. " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "IV"
End Function

Public Sub AjustaHoraServidor()
    Dim aj As ajuste, fmt As String
    On Error GoTo ErrTrap
      Set aj = New ajuste
      fmt = "dd/MMM/yyyy HH:NN:ss"
        If mProps.objGNOpcion.ObtenerValor("IgualarHora") = "1" Then
            aj.AjustarAServidor mProps.Server, mProps.UserName, mProps.Password
        End If
      Set aj = Nothing
      Exit Sub
ErrTrap:
    MsgBox "El servidor no está disponible para igualar la hora", vbExclamation
    
    Exit Sub

End Sub




'jeaa 10/05/2005
Public Function VerificaAsientos() As Variant
Dim sql As String, rs As Recordset
        sql = " select    gnc.transid, gnc.fechatrans, ctl.CodAsiento,  "
        sql = sql & " gnc.CodTrans , gnc.NumTrans,  "
        sql = sql & " gnc.Nombre , gnc.Descripcion,   "
        sql = sql & " sum(Debe) as Tdebe,    sum(Haber) as THaber, "
        sql = sql & " (sum(Debe) - sum(Haber)) as Saldo,gnc.Estado  FROM GNCOMPROBANTE gnc"
        sql = sql & " INNER JOIN ctlibrodetalle ctl    on gnc.CodAsiento = ctl.codasiento"
        sql = sql & " WHERE FECHATRANS BETWEEN '" & gobjCond.fecha1 & "' AND '" & gobjCond.fecha2 & "'"
        sql = sql & " AND gnc.estado <>3 "
        sql = sql & " group by gnc.transid,ctl.CodAsiento, gnc.codtrans, gnc.NumTrans, gnc.fechatrans, "
        sql = sql & " gnc.Nombre, gnc.Descripcion, gnc.Estado, HoraTrans"
        sql = sql & " Having (sum(Debe) - sum(Haber)) <> 0  order by gnc.fechatrans, HoraTrans, TransID"
    Set rs = Me.OpenRecordset(sql)
    Set VerificaAsientos = rs
    Set rs = Nothing
End Function
'jeaa 18/05/2005
'Devuelve Array de Variant para directamente mandar a FlexCombo
Public Function ListaRecDescParaCombo() As Variant
    Dim sql As String, cond As String
    Dim rs As Recordset
    
    sql = "SELECT CodRecargo, Descripcion AS Cuenta FROM IvRecargo "
    sql = sql & " ORDER BY CodRecargo"
    Set rs = Me.OpenRecordset(sql)
    ListaRecDescParaCombo = MiGetRows(rs)
    rs.Close
    Set rs = Nothing
End Function


Public Function ListaGNListaCamposTabla(BandRS As Boolean, _
                                nomTabla As String, nomBD As String, _
                                emp As Empresa) As Variant
    Dim sql As String, rs As Recordset, numReg As Long
    numReg = 100
    sql = " use " & nomBD
    emp.EjecutarSQL sql, numReg
    
    sql = "SELECT syscolumns.colid,  syscolumns.name  " & _
            " FROM syscolumns inner join sysobjects on syscolumns.id = sysobjects.id " & _
            " where sysobjects.name='" & nomTabla & "' order by syscolumns.colid "


    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaGNListaCamposTabla = rs
    Else
        ListaGNListaCamposTabla = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


'AUC 21/10/2005 para verificar que las formas de cobro que grabo pertenecen al cliente seleccionado
Public Function Verifica(ByRef CodForma, CodGrupo) As Boolean
    Dim sql As String, s As String
    Dim rs As Recordset
        sql = "SELECT CodForma"
          sql = sql & " From TSFormaCobroPago, vwPCProvCli, PCGrupo4" & _
          " Where vwPCProvCli.codGrupo4= PCGrupo4.codGrupo4" & _
          " AND tsformacobropago.codforma =  '" & CodForma & "'" & _
          " AND  tsformacobropago.NotaCredito like  '" & "%" & CodGrupo & "%" & "'" & _
          " GROUP BY tsformacobropago.codforma "
    Set rs = Me.OpenRecordset(sql)
        If rs.RecordCount = 0 Then
           Verifica = False
        Else
           Verifica = True
        End If
  rs.Close
    Set rs = Nothing
End Function

'AUC 01/11/2005 para borrar todos los niveles de credito cuando se cambia de grupo
Public Sub EliminarCredito()
    Dim sql As String, rs As Recordset
    'Elimina la forma de cobro/pago
    sql = "UPDATE TSFORMACOBROPAGO SET NotaCredito= ''"
    Me.EliminaFormasCobroPago sql, , True
    'Genera evento Refresh del objeto Empresa
    Me.RaiseRefreshEvent REFRESH_FORMACOBROPAGO
End Sub

'-----------------
'Agregadoa AUC 24/10/2005 para el control de cobros en siifactura
'Agregadoa AUC 24/10/2005 para el control de cobros en siifactura
Public Function ListaTSFormaCobroPagoParaFlexSiiFac(ByVal BandCobro As Boolean, ByVal PcGrupo As String, ByVal mobjGNComp As GNComprobante, ByVal CodGrupo As String) As Variant
    Dim sql As String, s As String
    Dim rs As Recordset
        sql = "SELECT CodForma,NombreForma"
   If PcGrupo = "" Or Not mobjGNComp.GNTrans.IVControlaCreditos Then
           sql = sql & " FROM TSFormaCobroPago WHERE "
           sql = sql & " BandCobro=" & CadenaBool(BandCobro, TipoDB)
           sql = sql & " AND BandValida=" & CadenaBool(True, TipoDB)
           sql = sql & " ORDER BY CodForma "
   Else
          sql = sql & " From PCGrupo4, TSFormaCobroPago, PCProvCli"
          sql = sql & " Where PCProvCli.IdGrupo4 = PCGrupo4.IdGrupo4 "
          sql = sql & " AND  tsformacobropago.notacredito LIKE '" & "%" & CodGrupo & "%" & "'"
          sql = sql & " AND PCGrupo4.descripcion = '" & PcGrupo & "'"
          sql = sql & " AND BandCobro=" & CadenaBool(BandCobro, TipoDB)
          sql = sql & " GROUP BY tsformacobropago.codforma, tsformacobropago.nombreforma "
          sql = sql & " ORDER BY CodForma "
  End If
    Set rs = Me.OpenRecordset(sql)
     ListaTSFormaCobroPagoParaFlexSiiFac = MiGetRows(rs)
    rs.Close
    Set rs = Nothing
End Function

Public Function ListaTSFormaCobroPagoParaFlexContolFormas(ByVal BandCobro As Boolean, ByVal CodGrupo As String) As String
    Dim sql As String, s As String, i As Integer
    Dim rs As Recordset
        sql = "SELECT CodForma,NombreForma"
          sql = sql & " From  TSFormaCobroPago "
          sql = sql & " Where tsformacobropago.notacredito LIKE '" & "%" & CodGrupo & "%" & "'"
          sql = sql & " AND BandCobro=" & CadenaBool(BandCobro, TipoDB)
'          sql = sql & " AND BandValida=" & CadenaBool(True, TipoDB)
          sql = sql & " ORDER BY CodForma "
   Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount = 0 Then
         rs.Close
         Set rs = Nothing
         sql = "SELECT CodForma,NombreForma"
         sql = sql & " FROM TSFormaCobroPago WHERE "
         sql = sql & " BandCobro=" & CadenaBool(BandCobro, TipoDB)
         sql = sql & " AND BandValida=" & CadenaBool(True, TipoDB)
         sql = sql & " ORDER BY CodForma "
         Set rs = Me.OpenRecordset(sql)
    End If
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 5 + 20)          '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    ListaTSFormaCobroPagoParaFlexContolFormas = s
   rs.Close
    Set rs = Nothing
End Function

Public Function ListaTSFormaCobroPagoParaFlexContolFormasA(ByVal BandCobro As Boolean, ByVal CodGrupo As String) As Variant
    Dim sql As String, s As String, i As Integer
    Dim rs As Recordset
        sql = "SELECT CodForma,NombreForma"
          sql = sql & " From  TSFormaCobroPago "
          sql = sql & " Where tsformacobropago.notacredito LIKE '" & "%" & CodGrupo & "%" & "'"
          sql = sql & " AND BandCobro=" & CadenaBool(BandCobro, TipoDB)
          sql = sql & " ORDER BY CodForma "
   Set rs = Me.OpenRecordset(sql)
    ListaTSFormaCobroPagoParaFlexContolFormasA = MiGetRows(rs)
    rs.Close
    Set rs = Nothing
End Function

'AUC Funcion para siiFActura que devuelve recordset
Public Function ListaTSFormaCobroPagoParaFlexA(BandCobro As Boolean) As Variant
    Dim sql As String, s As String, i As Integer
    Dim rs As Recordset
        sql = "SELECT CodForma,NombreForma"
          sql = sql & " FROM TSFormaCobroPago WHERE "
           sql = sql & " BandCobro=" & CadenaBool(BandCobro, TipoDB)
           sql = sql & " AND BandValida=" & CadenaBool(True, TipoDB)
           sql = sql & " ORDER BY CodForma "
    Set rs = Me.OpenRecordset(sql)
      ListaTSFormaCobroPagoParaFlexA = MiGetRows(rs)
    rs.Close
    Set rs = Nothing
End Function

Public Function RecuperarAnexosExportar(ByVal cod As String, num As Long) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT * FROM Anexos inner join gncomprobante on anexos.transid=gncomprobante.transid WHERE codtrans='" & cod & "' and numtrans=" & num
    Set rs = Me.OpenRecordset(sql)
    Set RecuperarAnexosExportar = rs
    Set rs = Nothing
End Function

'jeaa 16/11/2005
Public Function ListaIVItemDescSoloDescuentoParaFlex(codItem As String) As String
    Dim sql As String, cond As String, s As String
    Dim rs As Recordset
#If DAOLIB Then
    sql = "SELECT Descripcion & ' [' & CodInventario & ']' FROM vwIVInventarioRecuperar"
#Else
    sql = "SELECT Descripcion + ' [' + CodInventario + ']' FROM vwIVInventarioRecuperar"
#End If
    sql = sql & " where  CodInventario='" & codItem & "' "
    sql = sql & " ORDER BY Descripcion"
    Set rs = Me.OpenRecordset(sql)
'**    s = "|"            'Esto era para que sea editable el ComboBox
#If DAOLIB Then
    s = s & GetStringDAO(rs, 80 + 20 + 3)       '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = s & rs.GetString(adClipString, , vbTab, "|")
#End If
    ListaIVItemDescSoloDescuentoParaFlex = s
   rs.Close
    Set rs = Nothing
End Function

Public Function ConsIVMovCC() As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim numReg As Long, condNum As String
    cond = " WHERE   (gc.Estado IN (1,2,4))"
    condNum = ""
    'para filtrado por cliente
    If Len(gobjCond.CodPC1) > 0 Or Len(gobjCond.CodPC2) > 0 Then
        If Len(gobjCond.CodPC1) > 0 And Len(gobjCond.CodPC2) = 0 Then
            cond = cond & " AND (pc.codprovcli BETWEEN '" & gobjCond.CodPC1 & " 'AND '" & gobjCond.CodPC1 & "')"
        ElseIf Len(gobjCond.CodPC1) = 0 And Len(gobjCond.CodPC2) > 0 Then
            cond = cond & " AND (pc.codprovcli BETWEEN '" & gobjCond.CodPC2 & " 'AND '" & gobjCond.CodPC2 & "')"
        ElseIf Len(gobjCond.CodPC1) > 0 And Len(gobjCond.CodPC2) > 0 Then
            cond = cond & " AND (pc.codprovcli BETWEEN '" & gobjCond.CodPC1 & " 'AND '" & gobjCond.CodPC2 & "')"
        End If
    End If
    'para filtrado por centro de costo
    If Len(gobjCond.CodCentro1) > 0 Or Len(gobjCond.CodCentro2) > 0 Then
        If Len(gobjCond.CodCentro1) > 0 And Len(gobjCond.CodCentro2) = 0 Then
            cond = cond & " AND (CodCentro BETWEEN '" & gobjCond.CodCentro1 & "'AND '" & gobjCond.CodCentro1 & "')"
        ElseIf Len(gobjCond.CodCentro1) = 0 And Len(gobjCond.CodCentro2) > 0 Then
            cond = cond & " AND (CodCentro BETWEEN '" & gobjCond.CodCentro2 & "'AND '" & gobjCond.CodCentro2 & "')"
        ElseIf Len(gobjCond.CodCentro1) > 0 And Len(gobjCond.CodCentro2) > 0 Then
            cond = cond & " AND (CodCentro BETWEEN '" & gobjCond.CodCentro1 & "'AND '" & gobjCond.CodCentro2 & "')"
        End If
    End If
    'para filtrado por item
    If Len(gobjCond.CodItem1) > 0 Or Len(gobjCond.CodItem2) > 0 Then
        If Len(gobjCond.CodItem1) > 0 And Len(gobjCond.CodItem2) = 0 Then
            cond = cond & " AND (Codinventario BETWEEN '" & gobjCond.CodItem1 & "'AND '" & gobjCond.CodItem1 & "')"
        ElseIf Len(gobjCond.CodItem1) = 0 And Len(gobjCond.CodItem2) > 0 Then
            cond = cond & " AND (Codinventario BETWEEN '" & gobjCond.CodItem2 & "'AND '" & gobjCond.CodItem2 & "')"
        ElseIf Len(gobjCond.CodItem1) > 0 And Len(gobjCond.CodItem2) > 0 Then
            cond = cond & " AND (Codinventario BETWEEN '" & gobjCond.CodItem1 & "'AND '" & gobjCond.CodItem2 & "')"
        End If
    End If
'    cond = cond & " and (gc.FechaTrans >" & FechaYMD(gobjCond.fecha1, gobjMain.EmpresaActual.TipoDB) & ")"
    'para filtrado por numero de transaccion
        If gobjCond.NumTrans1 <> 0 Or gobjCond.NumTrans2 <> 0 Then
        If gobjCond.NumTrans1 <> 0 And gobjCond.NumTrans2 = 0 Then
            condNum = condNum & " AND (gc.Numtrans BETWEEN '" & gobjCond.NumTrans1 & "'AND '" & gobjCond.NumTrans1 & "')"
        ElseIf gobjCond.NumTrans1 = 0 And gobjCond.NumTrans2 <> 0 Then
            condNum = condNum & " AND (gc.Numtrans BETWEEN '" & gobjCond.NumTrans2 & "'AND '" & gobjCond.NumTrans2 & "')"
        ElseIf gobjCond.NumTrans1 > 0 And gobjCond.NumTrans2 > 0 Then
            condNum = condNum & " AND (gc.Numtrans BETWEEN '" & gobjCond.NumTrans1 & "'AND '" & gobjCond.NumTrans2 & "')"
        End If
    End If

'---------- Listado de suma de Cantidad y Costo por items en Presupuesto
        VerificaExistenciaTablaTemporal 1
        sql = " SELECT gc.transid, gc.fechaTrans, gc.Codtrans+' '+CONVERT(varchar, gc.Numtrans) as TransPresup,"
        sql = sql & " pc.nombre, gcc.codcentro, gcc.Descripcion AS DescCentro, ivk.IdInventario,"
        sql = sql & " Sum(ivk.Cantidad) AS SumaCantPre "
        sql = sql & " Into t1 "
        sql = sql & " From (GNCentroCosto gcc RIGHT JOIN GNComprobante gc ON gcc.IdCentro = gc.IdCentro)"
        sql = sql & " inner join pcprovcli pc on gc.IdClienteRef=pc.idprovcli"
        sql = sql & " INNER JOIN IVKardex ivk"
        sql = sql & " INNER JOIN IVInventario iv"
        sql = sql & " ON ivk.idinventario= iv.idinventario"
        sql = sql & " ON gc.TransID = ivk.TransID " & cond & condNum
        sql = sql & " AND (gc.CodTrans ='" & gobjCond.CodTrans & "')"
        sql = sql & " and (gc.FechaTrans Between " & FechaYMD(gobjCond.fecha1, gobjMain.EmpresaActual.TipoDB)
        sql = sql & " and  " & FechaYMD(gobjCond.fecha2, gobjMain.EmpresaActual.TipoDB) & ")"
        sql = sql & " GROUP BY gc.IdCentro, ivk.IdInventario, gcc.Descripcion, gc.codtrans, gc.Numtrans, gcc.codcentro, pc.nombre, gc.transid, gc.fechaTrans"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        VerificaExistenciaTablaTemporal 2
        '---------- Listado de suma de Cantidad y Costos por items en Consumos
        sql = "  SELECT gc.transid,gc.IdTransFuente,gc.fechaTrans,"
        sql = sql & " gc.Codtrans+' '+CONVERT(varchar, gc.Numtrans) as TransConsumos,"
        sql = sql & " pc.nombre , gcc.codcentro, gcc.Descripcion AS DescCentro, ivk.IdInventario,"
        sql = sql & " Sum(ivk.Cantidad) AS SumaCant "
        sql = sql & " INTO t2"
        sql = sql & "  From (GNCentroCosto gcc RIGHT JOIN GNComprobante gc ON gcc.IdCentro = gc.IdCentro)"
        sql = sql & " inner join pcprovcli pc on gc.IdClienteRef=pc.idprovcli"
        sql = sql & " INNER JOIN IVKardex ivk"
        sql = sql & " INNER JOIN IVInventario iv"
        sql = sql & " ON ivk.idinventario= iv.idinventario"
        sql = sql & " ON gc.TransID = ivk.TransID " & cond
        sql = sql & " and (gc.CodTrans IN (SELECT CodTrans FROM GNTrans WHERE VerificaLimiteCon='" & gobjCond.CodTrans & "'))"
        sql = sql & " AND (gc.CodTrans <> '" & gobjCond.CodTrans & "M')"
        sql = sql & "  GROUP BY gc.IdCentro, ivk.IdInventario, gcc.Descripcion, gc.codtrans, gc.Numtrans,pc.nombre, gc.transid,gc.IdTransFuente,gc.fechaTrans, gcc.codcentro"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        VerificaExistenciaTablaTemporal 3
        '---------- Listado de suma de Cantidad  y Costos en Modificaciones de Presupuesto
        sql = "  SELECT  gc.transid,gc.IdTransFuente,gc.fechaTrans,"
        sql = sql & "  gc.Codtrans+'  '+CONVERT(varchar, gc.Numtrans) as TransModif,"
        sql = sql & "  pc.nombre, gcc.codcentro , gcc.Descripcion AS DescCentro, ivk.IdInventario,"
        sql = sql & "   sum(ivk.Cantidad) AS SumaCantPre "
        sql = sql & "  INTO t3"
        sql = sql & "  From (GNCentroCosto gcc RIGHT JOIN GNComprobante gc ON gcc.IdCentro = gc.IdCentro)"
        sql = sql & "  inner join pcprovcli pc on gc.IdClienteRef=pc.idprovcli"
        sql = sql & "  INNER JOIN IVKardex ivk"
        sql = sql & "  INNER JOIN IVInventario iv"
        sql = sql & "  ON ivk.idinventario= iv.idinventario"
        sql = sql & "  ON gc.TransID = ivk.TransID" & cond
        sql = sql & " AND (gc.CodTrans = '" & gobjCond.CodTrans & "M')"
        sql = sql & " GROUP BY gc.IdCentro, ivk.IdInventario, gcc.Descripcion, gc.codtrans, gc.Numtrans,pc.nombre, gc.TransID , gc.IdTransFuente,gc.fechaTrans, gcc.codcentro"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        VerificaExistenciaTablaTemporal 4
        '--saldo de consumos
        sql = "  SELECT gc.IdTransFuente, ivk.IdInventario,gc.fechaTrans,  gcc.codcentro, "
        sql = sql & "   sum(ABS(ivk.Cantidad))*-1 AS TotalConsumo"
        sql = sql & "  INTO t4"
        sql = sql & "   From (GNCentroCosto gcc RIGHT JOIN GNComprobante gc ON gcc.IdCentro = gc.IdCentro)"
        sql = sql & "  inner join pcprovcli pc on gc.IdClienteRef=pc.idprovcli"
        sql = sql & "  INNER JOIN IVKardex ivk"
        sql = sql & "  INNER JOIN IVInventario iv"
        sql = sql & "  ON ivk.idinventario= iv.idinventario"
        sql = sql & "  ON gc.TransID = ivk.TransID" & cond
        sql = sql & "  and (gc.CodTrans IN (SELECT CodTrans FROM GNTrans WHERE VerificaLimiteCon='" & gobjCond.CodTrans & "'))"
        sql = sql & "   GROUP by gc.IdTransFuente, ivk.IdInventario,gc.fechaTrans,gcc.codcentro "
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        VerificaExistenciaTablaTemporal 5
        sql = " select   IdTransFuente,IdInventario, sum(abs(totalConsumo))* -1 as totalConsumido, codcentro"
        'sql = sql & " case when sum(totalConsumo)>0 then sum(totalConsumo)*-1 else sum(totalConsumo) end as totalConsumido"
        sql = sql & "  INTO t5"
        sql = sql & "   From t4"
        sql = sql & "   group by IdTransFuente,IdInventario, codcentro "
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        '----------- une tabla 4 y 5
        VerificaExistenciaTablaTemporal 6
        sql = "  SELECT distinct t4.IdTransFuente, t4.IdInventario,t4.fechaTrans, t4. codcentro , "
        sql = sql & "   t4. TotalConsumo, t5.totalConsumido"
        sql = sql & "  INTO t6"
        sql = sql & "   From t4 inner join t5"
        
        'sql = sql & "   on t4.codcentro=t5.codcentro and t4.IdInventario=t5.IdInventario"
        sql = sql & "   on t4.IdTransFuente=t5.IdTransFuente and t4.IdInventario=t5.IdInventario"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        '---------- Combina las tres tablas temporales para comparar
        'VerificaExistenciaTablaTemporal 6
        sql = " SELECT distinct t1.codcentro, t1.DescCentro, isnull(t1.nombre,(isnull(t2.nombre,(isnull(t3.nombre,0))))) as PCNombre,"
        sql = sql & "    t1.TransPresup, t1.fechaTrans, iv.CodInventario, iv.Descripcion,"
        sql = sql & "   isnull(t1.SumaCantPre, 0) * -1 As Presupuesto,"
        sql = sql & "   t3.TransModif as TransMod, t3.fechaTrans as FechaMod,"
        sql = sql & "   isnull(t3.SumaCantPre, 0) * -1 AS PreMod,"
        sql = sql & "   t2.TransConsumos, t2.fechaTrans as FechaCons, isnull(t2.SumaCant, 0) As Consumo,"
        sql = sql & "   (isnull(t1.SumaCantPre, 0) * -1) AS TotalPresup "
        sql = sql & "  ,isnull(t6.totalConsumido,0) as TotalConsum, "
        sql = sql & "    (isnull(t1.SumaCantPre, 0) * -1)+ isnull(t6.totalConsumido,0) as saldo "
        sql = sql & "   From IVInventario iv"
        sql = sql & "   INNER JOIN t3"
        sql = sql & "   right join  ( t1 left join t6 on t1.transid=t6.IdTransFuente and t6.IdInventario= t1.IdInventario)"
        sql = sql & "   LEFT join t2"
        sql = sql & "   on t1.transid=t2.IdTransFuente and t1.IdInventario= t2.IdInventario"
        sql = sql & "   on t1.transid=t3.IdTransFuente and t1.IdInventario= t3.IdInventario"
        
        sql = sql & "   ON (iv.IdInventario=t1.IdInventario )"
        sql = sql & " where iv.bandservicio=0 "
        If Not gobjCond.IncluirCero Then
            sql = sql & " and (isnull(t1.SumaCantPre, 0) * -1)+ isnull(t6.totalConsumido,0)  <> 0"
        End If
        sql = sql & "   ORDER BY isnull(t1.nombre,(isnull(t2.nombre,(isnull(t3.nombre,0))))),t1.codcentro,t1.DescCentro,t1.fechaTrans, iv.CodInventario"
        
    Set rs = Me.OpenRecordset(sql)
   Set ConsIVMovCC = rs
    Set rs = Nothing
    VerificaExistenciaTablaTemporal 1
    VerificaExistenciaTablaTemporal 2
    VerificaExistenciaTablaTemporal 3
    VerificaExistenciaTablaTemporal 4
    VerificaExistenciaTablaTemporal 5
    VerificaExistenciaTablaTemporal 6
End Function


Public Function ConsTSPorCobrarPagarUnificado(ByVal CodCli As String) As Variant
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim objCond As Condicion
    Set objCond = gobjMain.objCondicion
    'Si no está especificada la moneda, coge la Moneda predeterminada
    If Len(objCond.CodMoneda) = 0 Then objCond.CodMoneda = MONEDA_PRE
    numMoneda = Me.GNOpcion.IndiceMoneda(objCond.CodMoneda)
    sql = "select "
    If Me.GNOpcion.Los100DocCobroPago Then
        sql = sql & " Top 100 "
   End If
    sql = sql & "  Id,     CodProvCli,     Nombre,     TransID,     CodTrans,"
    sql = sql & " Trans,    CodForma,     NumLetra,     Doc,     "
    sql = sql & " Valor" & numMoneda & " AS Valor,"
    sql = sql & " VCancelado" & numMoneda & " AS VCancelado, "
    sql = sql & "  Valor" & numMoneda & " -" & " VCancelado" & numMoneda & " AS Saldo, "
    sql = sql & " CodMoneda,    Cancela,"
    sql = sql & numMoneda & " AS Cotizacion,"
    sql = sql & " FechaEmision,    Plazo,    FechaVenci,     "
    sql = sql & " DateDiff(dd,FechaVenci" & ", " & FechaYMD(Date, TipoDB) & ")  As DiasVencidos,    PorCobrar"
   sql = sql & " From vwConsPCPorCobrarPagar"
   sql = sql & " WHERE  FechaVenci <=  " & FechaYMD(objCond.fecha2, TipoDB)
    sql = sql & "  AND CodMoneda='" & objCond.CodMoneda & "'"
    sql = sql & " and CodProvCli ='" & CodCli & "'"
    sql = sql & " and ConsiderarComoEfectivo = " & CadenaBool(False, TipoDB)
    sql = sql & "  and Valor" & numMoneda & " - VCancelado" & numMoneda & "  >0"
   sql = sql & " ORDER BY CodForma,CodProvCli, FechaVenci"
    Set rs = Me.OpenRecordset(sql)
    Set ConsTSPorCobrarPagarUnificado = rs
    Set rs = Nothing
    Set objCond = Nothing
End Function


'AUC para verificar que el id del cliente este en el centro de costo
Public Function RecuperarIDCC(key As Variant) As Long
    Dim sql As String, rs As Recordset
        sql = "SELECT * FROM GNCentroCosto WHERE CodCentro='" & key & "'"
    Set rs = Me.OpenRecordset(sql)
    
    With rs
     If rs.RecordCount = 0 Then
        RecuperarIDCC = 0
      Else
        RecuperarIDCC = !IdCliente
        .Close
      End If
    End With
    Set rs = Nothing
End Function
'jeaa 18/11/2005
Public Function RecuperaIVInventarioParaCostos(Id As Long) As Variant
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim objCond As Condicion
    Set objCond = gobjMain.objCondicion
    'Si no está especificada la moneda, coge la Moneda predeterminada
    If Len(objCond.CodMoneda) = 0 Then objCond.CodMoneda = MONEDA_PRE
    numMoneda = Me.GNOpcion.IndiceMoneda(objCond.CodMoneda)
    VerificaExistenciaTabla 0
    sql = "select "
    sql = sql & " iv.idinventario, Sum(ivk.CostoRealTotal / gc.Cotizacion2) as ctotal,"
    sql = sql & " Sum(ivk.Cantidad) as cant,"
    sql = sql & " case  when Sum(ivk.Cantidad)>0 then (Sum(ivk.CostoRealTotal / gc.Cotizacion2) / Sum(ivk.Cantidad))"
    sql = sql & " else 0 end     as cprom"
    sql = sql & " Into tmp0 From"
    sql = sql & " GNTrans gt INNER JOIN"
    sql = sql & " (GNComprobante gc INNER JOIN IVKardex ivk"
    sql = sql & " INNER JOIN IVInventario iv"
    sql = sql & " ON iv.idinventario=ivk.idinventario"
    sql = sql & " ON gc.TransID = ivk.TransID)"
    sql = sql & " ON gt.CodTrans = gc.CodTrans"
    sql = sql & " WHERE ( ((gc.FechaTrans < '31/10/2005')"
    sql = sql & " OR (gc.FechaTrans = '31/10/2005' AND gc.HoraTrans< '23:59:59')"
    sql = sql & " OR (gc.FechaTrans='31/10/2005' AND gc.HoraTrans = '23:59:59' AND gc.TransID<0))"
    sql = sql & " AND (gc.Estado <> 3)"
    sql = sql & " AND (gt.AfectaCantidad =1))"
    sql = sql & " group by    iv.idinventario"
    
    VerificaExistenciaTabla 1
    sql = " SELECT *"
    sql = sql & " Into tmp1"
    sql = sql & " FROM vwIVInventarioRecuperar "
    sql = sql & " select * from tmp0 inner join tmp1 on tmp0.idinventario=tmp1.idinventario"
    Set rs = Me.OpenRecordset(sql)
    Set RecuperaIVInventarioParaCostos = rs
    Set rs = Nothing
    Set objCond = Nothing
     VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
End Function
'jeaa 22/11/2005
'Para Balance Por Mes con Niveles
Public Function ConsCTBalancePorMesNiveles() As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim v As Variant, v2() As Variant, i As Long, j As Long, numReg As Long
    Dim bandBalance As Boolean
    Dim mes As Long, MesFin As Integer
    Const BAL_VAL = 7
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsCTBalance")
    qdef.Parameters("FechaDesde") = IIf(bandBalance, Me.GNOpcion.FechaInicio, gobjCond.fecha1)
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodCuenta1") = "0"
    qdef.Parameters("CodCuenta2") = String(20, "9")
    qdef.Parameters("CodSucursal") = gobjCond.Sucursal ' ********* jeaa
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
    If Not rs.EOF Then
        rs.MoveLast
        rs.MoveFirst
        v = rs.GetRows(rs.RecordCount)
    End If
#Else
    bandBalance = True
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    MesFin = DateDiff("m", gobjCond.fecha1, gobjCond.fecha2) + 2
    For mes = 1 To MesFin + 1
       '/*-------------------------------------------------
        ' * Filtrar solo los asientos que est n dentro del rango
        ' --------------------------------------------------*/
        VerificaExistenciaTabla (10 * mes) + 1
        sql = " SELECT CTCuenta.CodCuenta, Debe/Cotizacion2 Debe0,"
        sql = sql & " Haber/Cotizacion2 AS Haber0, 0 AS Saldo"
        sql = sql & " Into tmp" & (10 * mes) + 1
        sql = sql & " FROM CTCuenta INNER JOIN (GNComprobante"
        sql = sql & " INNER JOIN CTLibroDetalle ON GNComprobante.CodAsiento = CTLibroDetalle.CodAsiento)"
        sql = sql & " ON CTCuenta.IdCuenta = CTLibroDetalle.IdCuenta"
        sql = sql & " where ((GNComprobante.Estado)<>3  And (GNComprobante.Estado<>0))"
        If mes = 1 Then
            sql = sql & " AND (GNComprobante.FechaTrans <" & FechaYMD(gobjCond.fecha1, TipoDB) & " )"
        ElseIf mes < (MesFin + 1) Then
            sql = sql & " AND (GNComprobante.FechaTrans >= " & FechaYMD(DateAdd("m", mes - 2, gobjCond.fecha1), TipoDB) & " and GNComprobante.FechaTrans < " & FechaYMD(DateAdd("m", mes - 1, gobjCond.fecha1), TipoDB) & ")"
        ElseIf mes = (MesFin + 1) Then
            sql = sql & " AND (GNComprobante.FechaTrans >= " & FechaYMD(gobjCond.fecha1, TipoDB) & " and GNComprobante.FechaTrans <= " & FechaYMD(DateAdd("m", mes - 2, gobjCond.fecha1), TipoDB) & ")"
        End If
        If Len(gobjCond.CodCuenta2) = 0 Then gobjCond.CodCuenta2 = gobjCond.CodCuenta1
        If Len(gobjCond.CodCuenta1) > 0 Then
            sql = sql & " AND CTCuenta.CodCuenta BETWEEN '" & gobjCond.CodCuenta1 & "' AND '" & gobjCond.CodCuenta2 & "'"
        End If
        If Len(gobjCond.Sucursal) > 0 Then
            sql = sql & "   and idLocal like " & gobjCond.Sucursal
        End If
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        '/*-------------------------------------------------
        ' * Calcular la suma por cuenta
        ' --------------------------------------------------*/
        VerificaExistenciaTabla (10 * mes) + 2
        sql = " SELECT"
        sql = sql & " tmp" & (10 * mes) + 1 & ".CodCuenta,"
        sql = sql & " Sum(tmp" & (10 * mes) + 1 & ".Debe0) AS Debe,    Sum(tmp" & (10 * mes) + 1 & ".Haber0) AS Haber"
        sql = sql & " Into tmp" & (10 * mes) + 2
        sql = sql & " From tmp" & (10 * mes) + 1
        sql = sql & " GROUP BY tmp" & (10 * mes) + 1 & ".CodCuenta"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        ' /*-------------------------------------------------
        ' * Devolver en formato de Balance/Estado P.G.
        ' --------------------------------------------------*/
        VerificaExistenciaTabla (10 * mes) + 3
        sql = " SELECT"
        sql = sql & " ct.IdCuenta, ct.CodCuenta, ct.NombreCuenta,"
        sql = sql & " CTL.Nombre, Debe , Haber, Debe - Haber AS Valor, ct.Nivel,"
        sql = sql & " ct.IdCuentaSuma , ct.TipoCuenta, ct.BandTotal"
        sql = sql & " Into tmp" & (10 * mes) + 3
        sql = sql & " FROM CTLocal ctl right join CTcuenta ct"
        sql = sql & " left JOIN tmp" & (10 * mes) + 2 & " ON ct.CodCuenta = tmp" & (10 * mes) + 2 & ".CodCuenta"
        sql = sql & " on ct.idlocal=ctl.IDLocal"
        sql = sql & " ORDER BY ct.CodCuenta"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
    Next mes
    mes = 1
    sql = "select "
    sql = sql & " tmp" & mes & "3.IdCuenta, tmp" & mes & "3.CodCuenta, tmp" & mes & "3.NombreCuenta, tmp" & mes & "3.Nombre,  tmp" & mes & "3.BandTotal, "
    For mes = 1 To MesFin + 1
       sql = sql & " tmp" & mes & "3.debe, tmp" & mes & "3.Haber,"
        sql = sql & " tmp" & mes & "3.Valor, tmp" & mes & "3.Nivel,"
        sql = sql & " tmp" & mes & "3.IdCuentaSuma , tmp" & mes & "3.TipoCuenta,"
    Next mes
    'quita ultima coma
    sql = Mid$(sql, 1, Len(sql) - 1)
    sql = sql & " from tmp13  "
    If mes > 1 Then
        For mes = 2 To MesFin + 1
           sql = sql & " inner join tmp" & mes & "3 on tmp" & mes & "3.idcuenta=tmp13.idcuenta "
        Next mes
    End If
    If Not gobjCond.IncluirCero Then
        sql = sql & " where tmp13.BandTotal=" & 0
    End If
    sql = sql & " order by tmp13.codcuenta"
   rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    If Not rs.EOF Then v = rs.GetRows()
#End If
    'Mayoriza los valores
    'MayorizaxMeses v, MesFin - 1
    MayorizaxMeses v, MesFin
    'Pasa los valores de v a v2 cambiando formato
    ' y filtrando registros por TipoCuenta, Nivel y Valor
    Dim BandSigue As Boolean, bandDifCero As Boolean
    BandSigue = True
    bandDifCero = True
'    j = 0
    For i = 0 To UBound(v, 2)
        For mes = 0 To MesFin
           If Not IsNull(v(BAL_VAL + (8 * mes), i)) Then
                BandSigue = True
                Exit For
            Else
                BandSigue = False
            End If
        Next mes
        For mes = 0 To MesFin
           If (v(5 + (6 * mes), i) <> 0 Or v(6 + (6 * mes), i) <> 0 Or v(7 + (6 * mes), i) <> 0) Then
                bandDifCero = True
                Exit For
            Else
                bandDifCero = False
            End If
        Next mes
        If BandSigue Then
            'Solo los que tengan valor diferente de 0
            If bandDifCero Then
                   'Solo hasta el nivel indicado
                   If v(8, i) <= gobjCond.Nivel Then
                        ReDim Preserve v2(70, j)
                        v2(0, j) = v(BAL_TIPO + 3, i)         'TipoCuenta
                        v2(1, j) = v(BAL_CODCUENTA, i)     'CodCuenta
                        v2(2, j) = v(BAL_NOMBRECUENTA, i)  'Cuenta
                        v2(3, j) = v(BAL_CODSUCURSAL, i)         'CODSUCURSAL   JEAA 16/01/04
                        v2(4, j) = IIf(v(4, i), 1, 0)  'Cuenta de total
                        For mes = 0 To MesFin
                           v2(5 + (mes * 4), j) = v(5 + (mes * 6), i)     'Valor
                            v2(6 + (mes * 4), j) = v(6 + (mes * 6), i)     'Valor
                            v2(7 + (mes * 4), j) = v(7 + (mes * 6), i)     'Valor
                            If Not bandBalance Then v2(7 + (mes * 4), j) = v2(7 + (mes * 2), j) * -1   'Invierta el signo cuando es EstadoPG
                            v2(8 + (mes * 4), j) = v(8 + (mes * 6), i)      'Nivel
                        Next mes
                        j = j + 1
                    End If
            End If
        End If
    Next i
    If j Then ConsCTBalancePorMesNiveles = v2
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Balance x Mes Niveles", "CT"
    For mes = 1 To MesFin + 1
        VerificaExistenciaTabla (10 * mes) + 1
    Next mes
End Function

Private Sub MayorizaxMeses(ByRef v As Variant, Nivel As Integer)
    Dim i As Integer, nmax As Integer, j As Long
    Dim num As Integer
    Const INTER = 6
#If DAOLIB Then
    nmax = ObtieneMax(mdbEmpresa, "CTCuenta", "Nivel")
#Else
    nmax = ObtieneMaxconNivel(mcnEmpresa, "CTCuenta", "Nivel", Nivel)
'    nmax = ObtieneMaxconNivel(mcnEmpresa, "tmp2", "Nivel", Nivel)
#End If
    'Desde el nivel inferior hacia el nivel superior
    For num = 0 To Nivel
       For i = nmax To 0 Step -1
            For j = 0 To UBound(v, 2)
                If (v(8, j) = i) And (v(4, j) = True) Then
                    v(5 + (INTER * num), j) = v(5 + (INTER * num), j)
                    v(6 + (INTER * num), j) = v(6 + (INTER * num), j)
                    v(7 + (INTER * num), j) = SumaHijosxMes(v, j, num)
                End If
            Next j
        Next i
    Next num
End Sub

Private Function SumaHijosxMes(ByRef v As Variant, ByVal j As Long, ByVal mes As Integer) As Currency
    Dim i As Long, t As Currency
    Dim col_val As Integer
    col_val = 7 + (6 * mes)
    'Busca todos los hijos de la cuenta indicada por j
    ' saca la suma total de los hijos en t
    If col_val <> 6 Then
'        MsgBox "hola"
    End If
    For i = 0 To UBound(v, 2)
        'Si IdCuentaSuma es igual a IdCuenta de j, es hijo de la cuenta j
        If v(9, i) = v(BAL_IDCUENTA, j) Then
            If Not IsNull(v(col_val, i)) Then t = t + v(col_val, i)
        End If
    Next i
    SumaHijosxMes = t
End Function

Public Function ConsIVkardexCC() As Variant
End Function
Public Sub EliminaFormasCobroPago( _
                ByVal sql As String, _
                Optional ByVal FailOnError As Boolean, _
                Optional ByRef numReg As Long)
#If DAOLIB Then
    If FailOnError Then
        mdbEmpresa.Execute sql, dbFailOnError
    Else
        mdbEmpresa.Execute sql
    End If
#Else
    If numReg > 0 Then
        mcnEmpresa.Execute sql, numReg
    End If
#End If
End Sub


Public Function ListaTSRetencionAutoParaFlex() As String
    Dim sql As String, s As String
    Dim rs As Recordset
    
    sql = "SELECT CodRetencion, Descripcion, CodSRI FROM TSRetencion WHERE "
    sql = sql & "BandValida=" & CadenaBool(True, TipoDB)
    sql = sql & " ORDER BY CodRetencion"

    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = GetStringDAO(rs, 10 + 40)
#Else
    If Not rs.EOF Then
        s = rs.GetString(adClipString, , vbTab, "|")
        s = s & "0" & vbTab & "Ninguno"
    End If
#End If
    
    ListaTSRetencionAutoParaFlex = s
    rs.Close
    Set rs = Nothing
End Function

Public Function ConsTSPorCobrarPagarAuto(ByVal Id As Long, Valor As Currency) As Variant
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim objCond As Condicion
    
    Set objCond = gobjMain.objCondicion
    
    'Si no está especificada la moneda, coge la Moneda predeterminada
    If Len(objCond.CodMoneda) = 0 Then objCond.CodMoneda = MONEDA_PRE
    numMoneda = Me.GNOpcion.IndiceMoneda(objCond.CodMoneda)
    
    
    sql = " select Id, CodProvCli, Nombre, TransID,"
    sql = sql & " Trans, CodForma, Valor" & numMoneda & " AS Valor, VCancelado" & numMoneda & " AS VCancelado,"
    sql = sql & " Valor" & numMoneda & " - VCancelado" & numMoneda & " AS Saldo, "
    sql = sql & " CodMoneda," & Valor & " as Cancela, "
    sql = sql & " Cotizacion" & numMoneda & " AS Cotizacion, " & Valor & "*1 as cot,"
    sql = sql & Valor & " *1/Cotizacion" & numMoneda & " as cot1 ,"
    sql = sql & " Valor" & numMoneda & " - VCancelado" & numMoneda & "-" & Valor & " as saldo ,FechaEmision,"
    sql = sql & " Plazo, FechaVenci from vwConsPCPorCobrarPagar"
    sql = sql & " Where transId = " & Id
    
    Set rs = Me.OpenRecordset(sql)
    Set ConsTSPorCobrarPagarAuto = rs
    Set rs = Nothing
    Set objCond = Nothing
End Function


'jeaa 25/04/2005
Public Function ListaIVTipoCompra(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
    sql = "SELECT CodTipoCompra,Descripcion FROM IVTipoCompra"
    If BandSoloValida Then
        sql = sql & " WHERE BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY CodTipoCompra"

    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVTipoCompra = rs
    Else
        ListaIVTipoCompra = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function RecuperaIVTipoCompra(key As Variant) As IVTipoCompra
    Dim obj As IVTipoCompra
    
    Set obj = New IVTipoCompra
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaIVTipoCompra = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CreaIVTipoCompra() As IVTipoCompra
    Dim obj As IVTipoCompra
    
    Set obj = New IVTipoCompra
    Set obj.Empresa = Me
    Set CreaIVTipoCompra = obj
    Set obj = Nothing
End Function

Public Function ListaIVTipoCompraParaFlex() As String
    Dim sql As String, s As String, i As Integer
    Dim rs As Recordset
    
        sql = "SELECT CodTipoCompra,Descripcion"
          sql = sql & " FROM IVTipoCompra WHERE "
           sql = sql & " BandValida=" & CadenaBool(True, TipoDB)
           sql = sql & " ORDER BY CodTipoCompra "
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 5 + 20)          '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    ListaIVTipoCompraParaFlex = s
    rs.Close
    Set rs = Nothing
End Function

' jeaa 28/12/2005 camari
'Para Kardex de items separadas las columnas de Costo Total + y -
Public Function ConsIVKardex3Col() As Variant
    Dim sql As String, cond As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsIVKardexPorFecha")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("prmCodBodega") = gobjCond.CodBodega1
    qdef.Parameters("CodItem1") = IIf(Len(gobjCond.CodItem1) = 0, "!", gobjCond.CodItem1)
    qdef.Parameters("CodItem2") = IIf(Len(gobjCond.CodItem2) = 0, String$(20, "z"), gobjCond.CodItem2)
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient

    sql = "spConsIVKardexPorFecha3Col " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodBodega1 & "','" & _
                gobjCond.CodItem1 & "','" & _
                gobjCond.CodItem2 & "','" & _
                gobjCond.NombreItem & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB)

    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    Set ConsIVKardex3Col = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Kardex inv. " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "IV"
End Function


'AUC 02/12/05
Public Function CreaUnidad() As IVUnidad
    Dim obj As IVUnidad
    Set obj = New IVUnidad
    Set obj.Empresa = Me
    Set CreaUnidad = obj
    Set obj = Nothing
End Function

'AUC 02/12/05
Public Function RecuperaUnidad(key As Variant) As IVUnidad
    Dim obj As IVUnidad
    Set obj = New IVUnidad
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaUnidad = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

'AUC 02/12/05
Public Function ListaUnidad(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodUnidad,Descripcion FROM IVUnidad"
   If BandSoloValida Then
        sql = sql & " WHERE BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY CodUnidad"
   Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaUnidad = rs
   Else
        ListaUnidad = MiGetRows(rs)
       rs.Close
    End If
    Set rs = Nothing
End Function
'AUC 008/12/05 agregado
Public Function ListaIVUnidad(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodUnidad,Descripcion FROM IVUnidad "
    If BandSoloValida Then
        sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY CodUnidad"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVUnidad = rs
    Else
        ListaIVUnidad = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Sub GrabarCostoUltimoIngreso(ByRef cod As String, ByRef Costo As Currency)
    Dim sql As String, i As Integer
    Dim rs As Recordset
        sql = "SELECT * FROM IVInventario WHERE CODInventario= '" & cod & "'"
        Set rs = Me.OpenRecordsetParaEdit(sql)
    With rs
        !CostoUltimoIngreso = Costo
        .Update
    End With
    Set rs = Nothing
  Exit Sub
ErrTrap:
End Sub

Public Function ListaIVItemParaFlexPreparacion(CodBodega As String, _
                                    CodGrupo1 As String, _
                                    CodGrupo2 As String, _
                                    CodGrupo3 As String, _
                                    CodGrupo4 As String, _
                                    CodGrupo5 As String, _
                                    Optional SiPreparacion As String) As String
    Dim sql As String, cond As String, s As String
    Dim rs As Recordset
    sql = "SELECT CodInventario,Descripcion FROM vwIVInventarioRecuperar"
    If CodGrupo1 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo1='" & CodGrupo1 & "' "
    End If
    If CodGrupo2 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo2='" & CodGrupo2 & "' "
    End If
    If CodGrupo3 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo3='" & CodGrupo3 & "' "
    End If
    If CodGrupo4 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo4='" & CodGrupo4 & "' "
    End If
    If CodGrupo5 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo5='" & CodGrupo5 & "' "
    End If
    'auc 29/01/2006
    If Len(SiPreparacion) > 0 Then 'auc Agregado para saber si lista para preparacion de receta
        sql = sql & " WHERE  BandValida= 1 "
    Else
        sql = sql & " WHERE  BandValida= 1   "
    End If
    'jeaa 01/12/2005
    If Len(cond) > 0 Then sql = sql & " and " & cond
    sql = sql & " ORDER BY CodInventario"
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 20 + 80)     'Código=20, Descripcion=80      '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    ListaIVItemParaFlexPreparacion = s
    rs.Close
    Set rs = Nothing
End Function

Public Sub GrabarCostoUltIngreso(ByRef IdInventario As Long, ByRef CostoUltimo As Currency)
    Dim sql As String
    Dim rs As Recordset
        sql = "SELECT CostoUltimoIngreso FROM IVInventario WHERE idInventario= " & IdInventario
        Set rs = Me.OpenRecordsetParaEdit(sql)
    With rs
        !CostoUltimoIngreso = CostoUltimo
      .Update
    End With
    Set rs = Nothing
  Exit Sub
ErrTrap:
End Sub


Public Function ListaIVItemParaFlexDescripcion(CodBodega As String, _
                                   CodGrupo1 As String, _
                                    CodGrupo2 As String, _
                                    CodGrupo3 As String, _
                                    CodGrupo4 As String, _
                                    CodGrupo5 As String, Optional SiPreparacion As String) As String
    Dim sql As String, cond As String, s As String
    Dim rs As Recordset
    sql = "SELECT Descripcion,CodInventario FROM vwIVInventarioRecuperar"
    If CodGrupo1 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo1='" & CodGrupo1 & "' "
    End If
    If CodGrupo2 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo2='" & CodGrupo2 & "' "
    End If
    If CodGrupo3 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo3='" & CodGrupo3 & "' "
    End If
    If CodGrupo4 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo4='" & CodGrupo4 & "' "
    End If
    If CodGrupo5 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo5='" & CodGrupo5 & "' "
    End If
    If Len(SiPreparacion) > 0 Then 'auc Agregado para saber si lista para preparacion de receta
        sql = sql & " WHERE  BandValida= 1 "
    Else
        sql = sql & " WHERE  BandValida= 1  and BandVenta= 1  "
   End If
    If Len(cond) > 0 Then sql = sql & " and " & cond
    sql = sql & " ORDER BY Descripcion"
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 20 + 80)     'Código=20, Descripcion=80      '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    ListaIVItemParaFlexDescripcion = s
   rs.Close
    Set rs = Nothing
End Function

Public Function ListaIVItemParaFlexPrep(CodBodega As String, _
                                    CodGrupo1 As String, _
                                    CodGrupo2 As String, _
                                    CodGrupo3 As String, _
                                    CodGrupo4 As String, _
                                    CodGrupo5 As String, _
                                    Optional SiPreparacion As String) As String
    Dim sql As String, cond As String, s As String
    Dim rs As Recordset
    sql = "SELECT CodInventario,Descripcion FROM vwIVInventarioRecuperar"
    If CodGrupo1 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo1='" & CodGrupo1 & "' "
    End If
    If CodGrupo2 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo2='" & CodGrupo2 & "' "
    End If
    If CodGrupo3 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo3='" & CodGrupo3 & "' "
    End If
    If CodGrupo4 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo4='" & CodGrupo4 & "' "
    End If
    If CodGrupo5 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo5='" & CodGrupo5 & "' "
    End If
    If Len(SiPreparacion) > 0 Then 'auc Agregado para saber si lista para preparacion de receta
        sql = sql & " WHERE  BandValida= 1 "
    Else
        sql = sql & " WHERE  BandValida= 1  and BandVenta= 1  "
    End If
    If Len(cond) > 0 Then sql = sql & " and " & cond
    sql = sql & " ORDER BY CodInventario"
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 20 + 80)     'Código=20, Descripcion=80      '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    ListaIVItemParaFlexPrep = s
    rs.Close
    Set rs = Nothing
End Function




'*** MAKOTO 24/nov/00 Agregado
Friend Sub VerificaAnulacionAnexos( _
                ByVal tid As Long, _
                ByVal bandAnulacion As Boolean)
    Dim sql As String, rs As Recordset, s As String
    
    sql = "SELECT gc.CodTrans,gc.NumTrans, gc.Estado " & _
          "FROM PCKardex pck INNER JOIN GNComprobante gc " & _
                "ON pck.TransID=gc.TransID " & _
          "WHERE (IdAsignado IN " & _
             "(Select Id From PCKardex pck2 " & _
                "Inner Join GNComprobante gc2 On pck2.TransID=gc2.TransID " & _
                "Where gc2.TransID = " & tid & ")) "
    If bandAnulacion Then       'Cuando está eliminando no debe ir ésta condición
        sql = sql & " AND (gc.Estado <> " & ESTADO_ANULADO & ") "
    End If
    sql = sql & " AND (gc.TransID <>" & tid & ")"
    
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        Do Until rs.EOF
            s = s & "        " & rs.Fields("CodTrans") & " " & _
                                 rs.Fields("NumTrans")
            If rs.Fields("Estado") = ESTADO_ANULADO Then s = s & " (Anulado)"
            s = s & vbCr
            rs.MoveNext
        Loop
        If Len(s) > 0 Then
            s = Left$(s, Len(s) - 1)
            If bandAnulacion Then           '*** MAKOTO 11/dic/00 Modificado
                Err.Raise ERR_INVALIDO, "Empresa.CambiaEstadoGNComp", _
                    "No se puede anular la transacción porque tiene cobros o pagos asignados." & vbCr & _
                    "Primero tendrá que anular ó modificar las siguientes transacciones: " & vbCr & vbCr & s
            Else
                Err.Raise ERR_INVALIDO, "GNComprobante.Eliminar", _
                    "No se puede eliminar la transacción porque tiene cobros o pagos asignados." & vbCr & _
                    "Primero tendrá que eliminar las siguientes transacciones: " & vbCr & vbCr & s
            End If
        End If
    End If
    rs.Close
    Set rs = Nothing
End Sub

'jeaa 08/03/2006
Public Sub GrabaAccion(ByVal antes As String, ByVal despues As String, ByVal campo As String, ByVal Accion As String)
    'Graba en GNLogAccion para utilizarlo como historial
        Me.GrabaGNLogAccion Accion, "Campo: " & _
                                                         campo & " Valor Antes: " & antes & " Valor Desp: " & despues, "GN"
End Sub


Public Function ConsANVentasNew() As Variant
    Dim pck As PCKardex, pcd As PCDocAsignado
    Dim objGnComp As GNComprobante, objGnCompDocOriginal As GNComprobante
    Dim sql As String, cond As String, CadenaValores As String
    Dim Recargo As String 'CadenaAgrupa  As String
    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
    Dim from As String, numReg As Long, f1 As String
    Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
    Dim Servicios As String, Bienes As String, RowRet As Long
    Const COL_BASESER = 15
    'segunda parte de la consulta: carga los valores de  Detalles de Anexos
    Const COL_FECHA = 2
    Const COL_CODCREDTRIB = 7
    Const COL_TRANSID = 1
    Const COL_TRANSRET = 5
    Dim condServ As String
    Dim condBien As String
    
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   
    With gobjCond
        'Reporte de un mes a la vez
        f1 = DateSerial(Year(.fecha1), Month(.fecha1), 1)
        cond = " AND GNC.FechaTrans BETWEEN " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & _
               " AND " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB)
        
           
            VerificaExistenciaTabla 0
            VerificaExistenciaTabla 1
            VerificaExistenciaTabla 2
            VerificaExistenciaTabla 3
            
            sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as TotalDescuento Into tmp0 " & _
                    "From IvRecargo ivR inner join " & _
                        "IvKardexRecargo ivkR Inner join " & _
                            "GnComprobante gNc  " & _
                        "On ivkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = IvkR.IdRecargo "
            sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.CodForma) & ") " & cond & _
                    " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")" & _
                  "Group by IvkR.TransID"
                  
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg

'--datos de indices
            VerificaExistenciaTabla 3
            sql = " Select  DISTINCT GNC.IdClienteRef AS FC_id, GNC_b.IdClienteRef AS rtp_id1, "
            sql = sql & " CASE WHEN GNC_b.IdClienteRef=0 THEN PCK_b.IdProvcli WHEN GNC_b.IdClienteRef<>0 THEN GNC_b.IdClienteRef end as rtp_id "
            sql = sql & " Into tmp3"
            sql = sql & " From    (gncomprobante GNC Inner join pckardex pck_a ON GNC.TransID = pck_a.TransID ) INNER JOIN"
            sql = sql & "  (gncomprobante GNC_b Inner join pckardex pck_B ON GNC_b.TransID = pck_B.TransID )"
            sql = sql & " ON  PCK_A.ID = PCK_B.IDASIGNADO"
            sql = sql & " where GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " AND GNC_b.CodTrans IN (" & PreparaCadena(gobjCond.Grupo1) & ")"
            sql = sql & " AND (GNC.FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = sql & " and GNC.Estado<>3 and GNC.IdClienteRef<>0 and GNC_b.IdClienteRef<>0 "
            
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            '--datos de la Venta
            
            
            sql = " Select gnc.IdClienteRef, pc.ruc, pc.Nombre,"
            sql = sql & " Gnc.Codtrans, count(Gnc.NumTrans) as cantTrans, Gnc.Numtrans, "
            'sql = sql & " 'FC' as Codtrans, count(Gnc.NumTrans) as cantTrans,"
            sql = sql & " sum( (vw.PrecioTotalBase0 + (vw.PrecioTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float))) ))*-1  As Valor0,"
            sql = sql & " sum( (vw.PrecioTotalBaseIVA + (vw.PrecioTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1 AS Valor12,"
            sql = sql & " sum( (vw.PrecioTotal + (vw.PrecioTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1   AS PrecioTotal"
            sql = sql & " Into tmp1"
            sql = sql & " from    ("
            sql = sql & " tmp0"
            sql = sql & " Right join gncomprobante Gnc INNER JOIN PCPROVClI pc ON GNC.IdClienteRef=pc.idprovcli "
            sql = sql & " inner join vwConsSUMIVKardexIVA vw"
            sql = sql & " ON Gnc.TransID = vw.transid"
            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " and GNC.Estado<>3 " & cond
            sql = sql & " group by  gnc.IdClienteRef, pc.ruc, pc.Nombre, Gnc.Codtrans, Gnc.Numtrans "
            
            VerificaExistenciaTabla 1
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            '-- datos de las retenciones
            sql = " select  case when gnc.IdClienteRef=0 then pck.Idprovcli when gnc.IdClienteRef<>0 then gnc.IdClienteRef end as idclienteref, "
            sql = sql & " sum(ts_retb.Debe+ts_retb.Haber) as ValorBien , "
            sql = sql & " sum(ts_retb.base) as BaseBien, tsrb.CodRetencion  as CodBien,"
            sql = sql & " Sum(ts_rets.Base)  as BaseServ, "
            sql = sql & " sum(ts_rets.Debe+ts_rets.Haber) as ValorServicio, "
            sql = sql & " tsrs.CodRetencion as CodServicio"
            sql = sql & " , ts_retb.NUMDOC as numdoc_ser , ts_rets.NUMDOC as numdoc_bie"
            'jeaa 23/03/2006
            'sql = sql & " Sum(ts_retI.Base)  as BaseIR,     sum(ts_retI.Debe+ts_retI.Haber) as ValorIR,    tsrI.CodRetencion as CodIR,"
            sql = sql & " Into tmp2"
            sql = sql & " from    gntrans gnt inner join (gncomprobante gnc inner join pckardex pck on gnc.transid=pck.transid) "
            sql = sql & "  inner join"
            sql = sql & " (tskardexret ts_retb inner join tsretencion tsrb on"
            sql = sql & " ts_retb.IdRetencion = tsrb.IdRetencion and tsrb.CodRetencion in"
            sql = sql & " (" & PreparaCadena(gobjCond.Bienes) & "))"
            sql = sql & " full Join"
            sql = sql & " (tskardexret ts_rets inner join tsretencion tsrs on"
            sql = sql & " ts_rets.IdRetencion = tsrs.IdRetencion AND tsrs.CodRetencion in"
            sql = sql & " (" & PreparaCadena(gobjCond.Servicios) & "))"
            sql = sql & " on ts_retb.IdRetencion = ts_rets.IdRetencion"
            sql = sql & " on GNC.TransID=ts_retb.TransID or GNC.TransID=ts_rets.TransID" ' or GNC.TransID=ts_retI.TransID "
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " WHERE GNC.CodTrans IN (" & PreparaCadena(gobjCond.Grupo1) & ")"
            sql = sql & " AND (GNC.FechaTrans  >  " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = sql & " and GNC.Estado<>3 "
            
            sql = sql & " Group By gnc.IdClienteRef, tsrb.CodRetencion, tsrs.CodRetencion, pck.Idprovcli , ts_retb.NUMDOC, ts_rets.NUMDOC"
            VerificaExistenciaTabla 2
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            '-- datos de las retenciones  IMPUESTIO A LA RENTA
            sql = " select  GNC.TransID, Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as TransRet,"
            'jeaa 23/03/2006
           
        sql = " select case when gnc.IdClienteRef=0 then pck.Idprovcli when gnc.IdClienteRef<>0 then gnc.IdClienteRef end as idclienteref,"
        sql = sql & " SUM(tsk.Base) as BaseIR, SUM(tsk.Debe+tsk.Haber) as ValorIR,  tsr.codretencion as CodIR"
        'sql = sql & " NumSerEstablecimiento , NumSerPunto, gnc.NumTrans, NumAutorizacion, gnc.FechaTrans"
        sql = sql & " ,tsk.numdoc"
        sql = sql & " Into tmp4"
        sql = sql & " from gntrans gnt"
        sql = sql & " inner join (gncomprobante gnc inner join pckardex pck on gnc.transid=pck.transid) "
        sql = sql & " inner join tskardexret tsk"
        sql = sql & " inner join tsretencion tsr"
        sql = sql & " on tsk.idretencion=tsr.idretencion"
        sql = sql & " on gnc.transid=tsk.transid"
        sql = sql & " on gnt.codtrans=gnc.codtrans"
        sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.Grupo1) & ")"
        sql = sql & " AND tsr.CodRetencion  like  '%IR%'"
            sql = sql & " AND (GNC.FechaTrans  > " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = sql & " and GNC.Estado<>3 "
'        sql = sql & " and GNC.Estado<>3 " & cond
        sql = sql & " GROUP BY    gnc.IdClienteRef,tsr.codretencion,pck.Idprovcli,tsk.numdoc "
            
            VerificaExistenciaTabla 4
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            
            ' union de las tres tablas
            sql = "SELECT DISTINCT " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB) & " as Fecha, "
            sql = sql & "a.RUC, a.Nombre, a.Codtrans, a.cantTrans, "
            sql = sql & " a.Valor0*-1 , a.Valor12*-1, "
            sql = sql & " 0,'',0, "
            sql = sql & " b.BaseServ, b.CodServicio, "
            sql = sql & " b.ValorServicio , b.BaseBien, b.CodBien, b.ValorBien,  "
            sql = sql & " D.BaseIR, d.CodIR, d.ValorIR  "
            sql = sql & "From ( tmp1 a left join tmp2 b on a.IdClienteRef=b.IdClienteRef)  left join tmp4 D on d.IdClienteRef=a.IdClienteRef "
            sql = sql & " order by a.Nombre"
            
            sql = " SELECT  '31/01/2005' as Fecha,"
            sql = sql & " a.RUC, a.Nombre, a.Codtrans,"
            sql = sql & " sum(a.cantTrans) as cantTrans,"
            sql = sql & " sum(a.Valor0*-1) as Valor0 ,"
            sql = sql & " sum(a.Valor12*-1) as Valor12,"
            sql = sql & " 0,'',0,"
            sql = sql & " sum(b.BaseServ) as BaseServ,"
            sql = sql & " b.CodServicio,"
            sql = sql & " sum(b.ValorServicio) as ValorServicio,"
            sql = sql & " sum(b.BaseBien) as BaseBien,"
            sql = sql & " b.CodBien,"
            sql = sql & " sum(b.ValorBien) as ValorBien,"
            sql = sql & " sum(D.BaseIR) as BaseIR,"
            sql = sql & " d.CodIR,"
            sql = sql & " sum(d.ValorIR) As ValorIR "
'            sql = sql & " From ( tmp1 a left join tmp2 b on a.IdClienteRef=b.IdClienteRef and((numtrans=numdoc_ser) or (numtrans=numdoc_bie) ))"
 '           sql = sql & " left join tmp4 D on d.IdClienteRef=a.IdClienteRef  and((numtrans=numdoc)  )"
            sql = sql & "From ( tmp1 a left join tmp2 b on a.IdClienteRef=b.IdClienteRef)  left join tmp4 D on d.IdClienteRef=a.IdClienteRef "
            sql = sql & " group by a.RUC, a.Nombre, a.Codtrans, b.CodServicio, b.CodBien, d.CodIR"
            sql = sql & " order by a.Nombre"
            
            
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANVentasNew = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Compraspara Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 4

End Function


'*** MAKOTO 20/oct/00 Agregado
'*** MAKOTO 20/oct/00 Agregado
Public Function ConsGNTrans22( _
                    Optional ByVal OrdenAscendente As Boolean) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    
    '*** MAKOTO 03/oct/00
    sql = "SELECT"
    If gobjCond.TopN > 0 Then
        sql = sql & " TOP " & gobjCond.TopN
    End If
    
    '*** MAKOTO 05/feb/01 Mod. Aumentado 'NumDocRef' y 'Nombre'
    sql = sql & " VW.TransID, FechaTrans, CodAsiento, CodTrans, NumTrans, " & _
            " NumDocRef, Nombre, vw.Descripcion, ROUND((costoRealTotal/cantidad),4) as CUR, ROUND((costoTotal/cantidad),4) as CU, CodCentro,Estado FROM " & _
            " (IVGrupo1 RIGHT JOIN IVInventario ON IVGrupo1.IdGrupo1 = IVInventario.IdGrupo1) inner join " & _
            " vwConsGNTrans " & _
            " VW INNER JOIN IVKARDEX IVK ON IVK.TRANSID=VW.TRANSID " & _
            " ON IVInventario.IdInventario = IVK.IdInventario "
    
    'Condición de FechaTrans
    cond = "FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB)
    
    'Condición de CodTrans
    If Len(cond) > 0 Then cond = cond & " AND "
    If Len(gobjCond.CodTrans) > 0 Then      'Si está especificado transaccion
        'Si es una sola transaccion
        If InStr(gobjCond.CodTrans, ",") = 0 Then
            cond = cond & "(CodTrans='" & gobjCond.CodTrans & "')"
        'Si está seleccionado varias trans.
        Else
            cond = cond & "(CodTrans IN (" & gobjCond.CodTrans & "))"
        End If
    Else
        'Si no hay condicion de cod.trans, selecciona todas las trans.
        ' que tenga permiso
        s = gobjMain.GrupoActual.PermisoActual.ListaTrans(True)
        If Len(s) > 0 Then
            cond = cond & "(CodTrans " & s & ")"
        Else
            cond = cond & "(CodTrans = '-------')"    'Para que NO devuelva nada si no tiene ningún permiso  '*** MAKOTO 26/dic/00
        End If
    End If
    
    'Condición de NumTrans
    If (gobjCond.NumTrans1 > 0) And (gobjCond.NumTrans2 > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans BETWEEN " & gobjCond.NumTrans1 & " AND " & gobjCond.NumTrans2 & ")"
    ElseIf gobjCond.NumTrans1 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans>=" & gobjCond.NumTrans1 & ")"
    ElseIf gobjCond.NumTrans2 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans<=" & gobjCond.NumTrans2 & ")"
    End If
    
    'Condición de Estado
    If gobjCond.EstadoBool(ESTADO_NOAPROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_NOAPROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_APROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_APROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_DESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_DESPACHADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_ANULADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_ANULADO & ")"
    End If
    'jeaa 22/05/2006
    If Not (Len(gobjCond.Grupo1) = 0 And Len(gobjCond.Grupo2) = 0) Then
        cond = cond & " AND (codGrupo" & gobjCond.NumGrupo & " BETWEEN '" & _
                gobjCond.Grupo1 & "' AND '" & gobjCond.Grupo2 & "') "
    End If
    If Not (Len(gobjCond.CodItem1) = 0 And Len(gobjCond.CodItem2) = 0) Then
        cond = cond & "AND (CodInventario BETWEEN '" & gobjCond.CodItem1 & "' AND '" & gobjCond.CodItem2 & "') "
    End If

    
    
    
    
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    'sql = sql & "AND IVK.IDINVENTARIO=54277"
    'Ordern de filas
    If OrdenAscendente Then
'        sql = sql & " ORDER BY FechaTrans, TransID"         '*** MAKOTO 03/oct/00 Modificado para que salga más actual al primero
        sql = sql & " ORDER BY FechaTrans, HoraTrans, VW.TransID"         '*** MAKOTO 07/dic/00 Modificado para HoraTrans
    Else
'        sql = sql & " ORDER BY FechaTrans DESC, TransID DESC"
        sql = sql & " ORDER BY FechaTrans DESC, HoraTrans DESC, VW.TransID DESC"       '*** MAKOTO 07/dic/00 HoraTrans agregado
    End If
    
    Set rs = Me.OpenRecordset(sql)
    Set ConsGNTrans22 = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta General " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function


Public Function ConsANComprobantesAnulado() As Variant
    Dim sql As String, cond As String, CadenaValores As String
    Dim rs As Recordset
        
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   
    With gobjCond

            cond = " AND (GNC.FechaTrans  BETWEEN " & _
                    FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                    FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = " select  gnc.FechaTrans, gnc.CodTrans, "
            sql = sql & " gnt.NumSerieEstablecimiento, gnt.NumSeriePunto,"
'            'jeaa 07/07/2006
            sql = sql & " case left(gnc.CodTrans,2)"
            sql = sql & " when 'FC' then "
            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura")) > 0 Then
                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura") > 0 Then
                    sql = sql & " NumDocRef  "
                Else
                     sql = sql & " NumTrans  "
                 End If
            Else
                sql = sql & " NumTrans  "
            End If
            sql = sql & " when 'FD' then "
            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura")) > 0 Then
                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura") > 0 Then
                    sql = sql & " NumDocRef  "
                Else
                     sql = sql & " NumTrans  "
                 End If
            Else
                sql = sql & " NumTrans  "
            End If
            sql = sql & " when 'FA' then "
            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura")) > 0 Then
                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura") > 0 Then
                    sql = sql & " NumDocRef  "
                Else
                     sql = sql & " NumTrans  "
                 End If
            Else
                sql = sql & " NumTrans  "
            End If
            
            sql = sql & " when 'NV' then "
            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura")) > 0 Then
                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura") > 0 Then
                    sql = sql & " NumDocRef  "
                Else
                     sql = sql & " NumTrans  "
                 End If
            Else
                sql = sql & " NumTrans  "
            End If
            sql = sql & " when 'VT' then "
            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura")) > 0 Then
                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura") > 0 Then
                    sql = sql & " NumDocRef  "
                Else
                     sql = sql & " NumTrans  "
                 End If
            Else
                sql = sql & " NumTrans  "
            End If
            
            sql = sql & " when 'RT' then "
            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosRetencion")) > 0 Then
                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosRetencion") > 0 Then
                    sql = sql & " NumDocRef "
                Else
                     sql = sql & " NumTrans  "
                End If
            Else
                sql = sql & " NumTrans  "
            End If
            sql = sql & " Else "
            sql = sql & " NumTrans "
            
            sql = sql & " end as numtrans, "
            
            
            
            'sql = sql & " numtrans, "
            
            'jeaa 12/09/2007
            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion")) > 0 Then
                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion") > 0 Then
                    sql = sql & " gnc.AutorizacionSRI as NumAutorizacion , "
                Else
                    sql = sql & " gnt.NumAutorizacion as NumAutorizacion, "
                End If
            Else
                sql = sql & " gnt.NumAutorizacion as NumAutorizacion, "
            End If
            
            sql = sql & " GNC.FechaTrans"
            sql = sql & " from gncomprobante gnc inner join gntrans gnt on gnc.codtrans=gnt.codtrans "
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodPC2) & ")"
            sql = sql & " and Estado = 3 " & cond
            sql = sql & " order by gnc.FechaTrans,gnc.codTrans "
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANComprobantesAnulado = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons CompAnuladas para Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"

End Function


'jeaa 04/04/2006
Public Sub EliminaGNComprobantedeAnexos(transid As Long)
    Dim sql As String, pt As PermisoTrans, CodT As String, gc As GNComprobante
    Dim est As Byte, rs As Recordset, idCentro As Long
    
    If transid = 0 Then Exit Sub        '*** MAKOTO 15/dic/00
    

#If DAOLIB Then
    gobjWS.BeginTrans           '================= Comienza la transacción
#Else
    mcnEmpresa.BeginTrans       '================= Comienza la transacción
#End If
    On Error GoTo ErrTrap

    'Si no hay problema en permisos, cambia el estado
    sql = "delete from anexos "
    sql = sql & " WHERE TransID=" & transid
    Me.Execute sql, True
    
    
#If DAOLIB Then
    gobjWS.CommitTrans          '============ Completa la transacción
#Else
    mcnEmpresa.CommitTrans      '============ Completa la transacción
#End If
    Exit Sub

ErrTrap:
#If DAOLIB Then
    gobjWS.Rollback             '============ Anula la transacción
#Else
    mcnEmpresa.RollbackTrans    '============ Anula la transacción
#End If
    
    Err.Raise Err.Number, Err.Source, Err.Description
    Exit Sub
End Sub



Public Function ConsGNTransError() As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
        sql = "select gnc.fechagrabado,gnc.CodTrans, gnc.NumTrans, gnc.descripcion  from pckardex pck"
        sql = sql & " inner join gncomprobante gnc"
        sql = sql & " on pck.transid=gnc.transid"
        sql = sql & " where idasignado not in(select id from pckardex)"
        sql = sql & " and idasignado<>0"
        sql = sql & " and gnc.estado<>3"
        sql = sql & " and FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB)
        sql = sql & " order by gnc.fechagrabado,gnc.CodTrans, gnc.NumTrans"
       Set rs = Me.OpenRecordset(sql)
        Set ConsGNTransError = rs
        Set rs = Nothing
        Me.GrabaGNLogAccion "CONSULTA", "Consulta Trans Erradas " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function

Public Function RecuperaIVUnidad(key As Variant) As IVUnidad
    Dim obj As IVUnidad
    
    Set obj = New IVUnidad
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaIVUnidad = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CreaIVUnidad() As IVUnidad
    Dim obj As IVUnidad
    
    Set obj = New IVUnidad
    Set obj.Empresa = Me
    Set CreaIVUnidad = obj
    Set obj = Nothing
End Function

Public Sub GrabaAccionModulo(ByVal antes As String, ByVal despues As String, ByVal campo As String, ByVal Accion As String, ByVal Modulo As String)
    'Graba en GNLogAccion para utilizarlo como historial
        Me.GrabaGNLogAccion Accion, "" & _
                                                         campo & " Valor Antes: " & antes & " Valor Desp: " & despues, Modulo
End Sub


Public Function ConsANVentasNew1() As Variant
End Function


'*** jeaa 29/04/2006
Public Function ConsPCKardexPorTransRes(ByVal BandProveedor As Boolean, _
                                     ByVal BandCliente As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsPCKardexPorTransRes")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodProvCli1") = IIf(Len(gobjCond.CodPC1) = 0, "!", gobjCond.CodPC1)
    qdef.Parameters("CodProvCli2") = IIf(Len(gobjCond.CodPC2) = 0, String$(20, "z"), gobjCond.CodPC2)
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    qdef.Parameters("prmBandProveedor") = BandProveedor
    qdef.Parameters("prmBandCliente") = BandCliente
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient

        If gobjMain.GrupoActual.PermisoActual.ConsRepVen And BandCliente Then
            sql = "spConsPCKardexPorTransResVen " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodPC1 & "','" & _
                gobjCond.CodPC2 & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB) & "," & _
                CadenaBool(BandProveedor, TipoDB) & "," & _
                CadenaBool(BandCliente, TipoDB) & "," & _
                "'" & gobjMain.UsuarioActual.codUsuario & "'"
    Else
        sql = "spConsPCKardexPorTransRes " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodPC1 & "','" & _
                gobjCond.CodPC2 & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB) & "," & _
                CadenaBool(BandProveedor, TipoDB) & "," & _
                CadenaBool(BandCliente, TipoDB)
    End If

    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    Set ConsPCKardexPorTransRes = rs
    Set rs = Nothing
End Function


Public Function ConsANRETVentas() As Variant
    Dim pck As PCKardex, pcd As PCDocAsignado
    Dim objGnComp As GNComprobante, objGnCompDocOriginal As GNComprobante
    Dim sql As String, cond As String, CadenaValores As String
    Dim Recargo As String 'CadenaAgrupa  As String
    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
    Dim from As String, numReg As Long, f1 As String
    Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
    Dim Servicios As String, Bienes As String, RowRet As Long
    Const COL_BASESER = 15
    'segunda parte de la consulta: carga los valores de  Detalles de Anexos
    Const COL_FECHA = 2
    Const COL_CODCREDTRIB = 7
    Const COL_TRANSID = 1
    Const COL_TRANSRET = 5
    Dim condServ As String
    Dim condBien As String
    
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   
    With gobjCond
        'Reporte de un mes a la vez
        f1 = DateSerial(Year(.fecha1), Month(.fecha1), 1)
        cond = " AND GNC.FechaTrans BETWEEN " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & _
               " AND " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB)
        
           
            VerificaExistenciaTabla 0
            VerificaExistenciaTabla 1
            VerificaExistenciaTabla 2
            VerificaExistenciaTabla 3
            
'            sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as TotalDescuento Into tmp0 " & _
'                    "From IvRecargo ivR inner join " & _
'                        "IvKardexRecargo ivkR Inner join " & _
'                            "GnComprobante gNc  " & _
'                        "On ivkr.TransID = gNc.TransID " & _
'                    "On Ivr.IdRecargo = IvkR.IdRecargo "
'            sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.CodForma) & ") " & cond & _
'                    " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")" & _
'                  "Group by IvkR.TransID"
                  
'            gobjMain.EmpresaActual.EjecutarSQL sql, numReg

'--datos de indices
'            VerificaExistenciaTabla 3
'            sql = " Select  DISTINCT GNC.IdClienteRef AS FC_id, GNC_b.IdClienteRef AS rtp_id1, "
'            sql = sql & " CASE WHEN GNC_b.IdClienteRef=0 THEN PCK_b.IdProvcli WHEN GNC_b.IdClienteRef<>0 THEN GNC_b.IdClienteRef end as rtp_id "
'            sql = sql & " Into tmp3"
'            sql = sql & " From    (gncomprobante GNC Inner join pckardex pck_a ON GNC.TransID = pck_a.TransID ) INNER JOIN"
'            sql = sql & "  (gncomprobante GNC_b Inner join pckardex pck_B ON GNC_b.TransID = pck_B.TransID )"
'            sql = sql & " ON  PCK_A.ID = PCK_B.IDASIGNADO"
'            sql = sql & " where GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
'            sql = sql & " AND GNC_b.CodTrans IN (" & PreparaCadena(gobjCond.Grupo1) & ")"
'            sql = sql & " AND (GNC.FechaTrans  BETWEEN " & _
'                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
'                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
'            sql = sql & " and GNC.Estado<>3 and GNC.IdClienteRef<>0 and GNC_b.IdClienteRef<>0 "
'
'            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            '--datos de la Venta
            
            
            sql = " Select gnc.IdClienteRef, pc.ruc, pc.Nombre,"
            'sql = sql & " Gnc.Codtrans, count(Gnc.NumTrans) as cantTrans,"
'            sql = sql & " 'FC' as Codtrans, count(Gnc.NumTrans) as cantTrans,"
'            sql = sql & " sum( (vw.PrecioTotalBase0 + (vw.PrecioTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float))) ))*-1  As Valor0,"
'            sql = sql & " sum( (vw.PrecioTotalBaseIVA + (vw.PrecioTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1 AS Valor12,"
'            sql = sql & " sum( (vw.PrecioTotal + (vw.PrecioTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1   AS PrecioTotal"
'            sql = sql & " Into tmp1"
'            sql = sql & " from    ("
'            sql = sql & " tmp0"
'            sql = sql & " Right join gncomprobante Gnc INNER JOIN PCPROVClI pc ON GNC.IdClienteRef=pc.idprovcli "
'            sql = sql & " inner join vwConsSUMIVKardexIVA vw"
'            sql = sql & " ON Gnc.TransID = vw.transid"
'            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
'            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
'            sql = sql & " and GNC.Estado<>3 " & cond
'            sql = sql & " group by  gnc.IdClienteRef, pc.ruc, pc.Nombre"
'
'            VerificaExistenciaTabla 1
'            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
'
            '-- datos de las retenciones IVA
            sql = " select  case when gnc.IdClienteRef=0 then pck.Idprovcli when gnc.IdClienteRef<>0 then gnc.IdClienteRef end as idclienteref, pc.ruc, pc.nombre, "
            sql = sql & " sum(ts_retb.Debe+ts_retb.Haber) as ValorBien , "
            sql = sql & " sum(ts_retb.base) as BaseBien, tsrb.CodRetencion  as CodBien,"
            sql = sql & " Sum(ts_rets.Base)  as BaseServ, "
            sql = sql & " sum(ts_rets.Debe+ts_rets.Haber) as ValorServicio, "
            sql = sql & " tsrs.CodRetencion as CodServicio"
            'jeaa 23/03/2006
            'sql = sql & " Sum(ts_retI.Base)  as BaseIR,     sum(ts_retI.Debe+ts_retI.Haber) as ValorIR,    tsrI.CodRetencion as CodIR,"
            sql = sql & " Into tmp2"
            sql = sql & " from    gntrans gnt inner join  "
            sql = sql & " (gncomprobante Gnc  inner join pckardex pck on gnc.transid=pck.idprovcli"
            sql = sql & " inner join pcprovcli pc on pck.idprovcli=pc.idprovcli )"
            sql = sql & "  inner join"
            sql = sql & " (tskardexret ts_retb inner join tsretencion tsrb on"
            sql = sql & " ts_retb.IdRetencion = tsrb.IdRetencion and tsrb.CodRetencion in"
            sql = sql & " (" & PreparaCadena(gobjCond.Bienes) & "))"
            sql = sql & " full Join"
            sql = sql & " (tskardexret ts_rets inner join tsretencion tsrs on"
            sql = sql & " ts_rets.IdRetencion = tsrs.IdRetencion AND tsrs.CodRetencion in"
            sql = sql & " (" & PreparaCadena(gobjCond.Servicios) & "))"
            sql = sql & " on ts_retb.IdRetencion = ts_rets.IdRetencion"
            sql = sql & " on GNC.TransID=ts_retb.TransID or GNC.TransID=ts_rets.TransID" ' or GNC.TransID=ts_retI.TransID "
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " WHERE gnc.estado<>3  AND GNC.CodTrans IN (" & PreparaCadena(gobjCond.Grupo1) & ")" & cond
            sql = sql & " Group By gnc.IdClienteRef, tsrb.CodRetencion, tsrs.CodRetencion, pck.idprovcli, pc.ruc, pc.nombre "
            VerificaExistenciaTabla 2
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            '-- datos de las retenciones  IMPUESTIO A LA RENTA
            sql = " select  GNC.TransID, Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as TransRet,"
            
            'jeaa 23/03/2006
           
        sql = " select case when gnc.IdClienteRef=0 then pck.Idprovcli when gnc.IdClienteRef<>0 then gnc.IdClienteRef end as idclienteref, pc.ruc, pc.nombre,"
        sql = sql & " SUM(tsk.Base) as BaseIR, SUM(tsk.Debe+tsk.Haber) as ValorIR,  tsr.codretencion as CodIR"
        'sql = sql & " NumSerEstablecimiento , NumSerPunto, gnc.NumTrans, NumAutorizacion, gnc.FechaTrans"
        sql = sql & " Into tmp4"
        sql = sql & " from gntrans gnt"
        sql = sql & " inner join (gncomprobante gnc inner join pckardex pck on gnc.transid=pck.transid inner join pcprovcli pc on pck.idprovcli=pc.idprovcli  ) "
        sql = sql & " inner join tskardexret tsk"
        sql = sql & " inner join tsretencion tsr"
        sql = sql & " on tsk.idretencion=tsr.idretencion"
        sql = sql & " on gnc.transid=tsk.transid"
        sql = sql & " on gnt.codtrans=gnc.codtrans"
        sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.Grupo1) & ")"
        sql = sql & " AND tsr.CodRetencion  like  '%IR%'"
        sql = sql & " and GNC.Estado<>3 " & cond
        sql = sql & " GROUP BY    gnc.IdClienteRef,tsr.codretencion,pck.Idprovcli,  pc.ruc, pc.nombre "
            
            VerificaExistenciaTabla 4
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            
            ' union de las tres tablas
            sql = "SELECT DISTINCT " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB) & " as Fecha, "
            sql = sql & "a.RUC, a.Nombre, a.Codtrans, a.cantTrans, "
            sql = sql & " a.Valor0*-1 , a.Valor12*-1, "
            sql = sql & " 0,'',0, "
            sql = sql & " b.BaseServ, b.CodServicio, "
            sql = sql & " b.ValorServicio , b.BaseBien, b.CodBien, b.ValorBien,  "
            sql = sql & " D.BaseIR, d.CodIR, d.ValorIR  "
            sql = sql & "From ( tmp1 a left join tmp2 b on a.IdClienteRef=b.IdClienteRef)  left join tmp4 D on d.IdClienteRef=a.IdClienteRef "
            sql = sql & " order by a.Nombre"
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANRETVentas = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Compraspara Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 4

End Function


Public Function ConsANVentasN() As Variant
    Dim pck As PCKardex, pcd As PCDocAsignado
    Dim objGnComp As GNComprobante, objGnCompDocOriginal As GNComprobante
    Dim sql As String, cond As String, CadenaValores As String
    Dim Recargo As String 'CadenaAgrupa  As String
    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
    Dim from As String, numReg As Long, f1 As String
    Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
    Dim Servicios As String, Bienes As String, RowRet As Long
    Const COL_BASESER = 15
    'segunda parte de la consulta: carga los valores de  Detalles de Anexos
    Const COL_FECHA = 2
    Const COL_CODCREDTRIB = 7
    Const COL_TRANSID = 1
    Const COL_TRANSRET = 5
    Dim condServ As String
    Dim condBien As String
    
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   
    With gobjCond
        'Reporte de un mes a la vez
        f1 = DateSerial(Year(.fecha1), Month(.fecha1), 1)
        cond = " AND GNC.FechaTrans BETWEEN " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & _
               " AND " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB)
        
           
            VerificaExistenciaTabla 0
            VerificaExistenciaTabla 1
            VerificaExistenciaTabla 2
            VerificaExistenciaTabla 3
            
            sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as TotalDescuento Into tmp0 " & _
                    "From IvRecargo ivR inner join " & _
                        "IvKardexRecargo ivkR Inner join " & _
                            "GnComprobante gNc  " & _
                        "On ivkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = IvkR.IdRecargo "
            sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.CodForma) & ") " & cond & _
                    " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")" & _
                  "Group by IvkR.TransID"
                  
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg

'--datos de indices
            VerificaExistenciaTabla 3
            sql = " Select  DISTINCT GNC.IdClienteRef AS FC_id, GNC_b.IdClienteRef AS rtp_id1, "
            sql = sql & " CASE WHEN GNC_b.IdClienteRef=0 THEN PCK_b.IdProvcli WHEN GNC_b.IdClienteRef<>0 THEN GNC_b.IdClienteRef end as rtp_id "
            sql = sql & " Into tmp3"
            sql = sql & " From    (gncomprobante GNC Inner join pckardex pck_a ON GNC.TransID = pck_a.TransID ) INNER JOIN"
            sql = sql & "  (gncomprobante GNC_b Inner join pckardex pck_B ON GNC_b.TransID = pck_B.TransID )"
            sql = sql & " ON  PCK_A.ID = PCK_B.IDASIGNADO"
            sql = sql & " where GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " AND GNC_b.CodTrans IN (" & PreparaCadena(gobjCond.Grupo1) & ")"
            sql = sql & " AND (GNC.FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = sql & " and GNC.Estado<>3 and GNC.IdClienteRef<>0 and GNC_b.IdClienteRef<>0 "
            
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            '--datos de la Venta
            
            
            sql = " Select gnc.IdClienteRef, pc.ruc, pc.Nombre,"
            sql = sql & " Gnc.Codtrans, count(Gnc.NumTrans) as cantTrans,  "
            sql = sql & " sum( (vw.PrecioTotalBase0 + (vw.PrecioTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float))) ))*-1  As Valor0,"
            sql = sql & " sum( (vw.PrecioTotalBaseIVA + (vw.PrecioTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1 AS Valor12,"
            sql = sql & " sum( (vw.PrecioTotal + (vw.PrecioTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1   AS PrecioTotal"
            sql = sql & " Into tmp1"
            sql = sql & " from    ("
            sql = sql & " tmp0"
            sql = sql & " Right join gncomprobante Gnc INNER JOIN PCPROVClI pc ON GNC.IdClienteRef=pc.idprovcli "
            If Me.GNOpcion.IVKTipoDatoDouble Then
                sql = sql & " inner join vwConsSUMIVKardexIVADou vw"
            Else
                sql = sql & " inner join vwConsSUMIVKardexIVA vw"
            End If
            sql = sql & " ON Gnc.TransID = vw.transid"
            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " and GNC.Estado<>3 " & cond
            sql = sql & " group by  gnc.IdClienteRef, pc.ruc, pc.Nombre, Gnc.Codtrans "
            
            VerificaExistenciaTabla 1
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            '-- datos de las retenciones
            sql = " select  gnc.IdClienteRef, "
            sql = sql & " sum(ts_retb.Debe+ts_retb.Haber) as ValorBien , "
            sql = sql & " sum(ts_retb.base) as BaseBien, tsrb.CodRetencion  as CodBien,"
            sql = sql & " Sum(ts_rets.Base)  as BaseServ, "
            sql = sql & " sum(ts_rets.Debe+ts_rets.Haber) as ValorServicio, "
            sql = sql & " tsrs.CodRetencion as CodServicio"
            sql = sql & " Into tmp2"
            sql = sql & " from    gntrans gnt inner join gncomprobante gnc  "
            sql = sql & "  inner join"
            sql = sql & " (tskardexret ts_retb inner join tsretencion tsrb on"
            sql = sql & " ts_retb.IdRetencion = tsrb.IdRetencion and tsrb.CodRetencion in"
            sql = sql & " (" & PreparaCadena(gobjCond.Bienes) & "))"
            sql = sql & " full Join"
            sql = sql & " (tskardexret ts_rets inner join tsretencion tsrs on"
            sql = sql & " ts_rets.IdRetencion = tsrs.IdRetencion AND tsrs.CodRetencion in"
            sql = sql & " (" & PreparaCadena(gobjCond.Servicios) & "))"
            sql = sql & " on ts_retb.IdRetencion = ts_rets.IdRetencion"
            sql = sql & " on GNC.TransID=ts_retb.TransID or GNC.TransID=ts_rets.TransID" ' or GNC.TransID=ts_retI.TransID "
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " WHERE GNC.CodTrans IN (" & PreparaCadena(gobjCond.Grupo1) & ")"
            sql = sql & " AND GNC.FechaTrans BETWEEN " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & _
               " AND " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB)
            sql = sql & " and GNC.Estado<>3 "
            
            sql = sql & " Group By gnc.IdClienteRef, tsrb.CodRetencion, tsrs.CodRetencion"
            VerificaExistenciaTabla 2
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            '-- datos de las retenciones  IMPUESTIO A LA RENTA
            sql = " select  GNC.TransID, Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as TransRet,"
            'jeaa 23/03/2006
           
        sql = " select gnc.IdClienteRef ,"
        sql = sql & " pc.ruc,pc.nombre,  "
        sql = sql & " SUM(tsk.Base) as BaseIR, SUM(tsk.Debe+tsk.Haber) as ValorIR,  tsr.codretencion as CodIR"
        sql = sql & " Into tmp4"
        sql = sql & " from gntrans gnt"
        sql = sql & " inner join (gncomprobante  GNC inner join pcprovcli pc on gnc.idclienteref=pc.idprovcli)"
        sql = sql & " inner join tskardexret tsk"
        sql = sql & " inner join tsretencion tsr"
        sql = sql & " on tsk.idretencion=tsr.idretencion"
        sql = sql & " on gnc.transid=tsk.transid"
        sql = sql & " on gnt.codtrans=gnc.codtrans"
        sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.Grupo1) & ")"
        sql = sql & " AND tsr.CodRetencion  like  '%IR%'"
        sql = sql & " AND GNC.FechaTrans BETWEEN " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & _
               " AND " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB)
            sql = sql & " and GNC.Estado<>3 "
        sql = sql & " GROUP BY    gnc.IdClienteRef,tsr.codretencion,pc.nombre, pc.ruc "
            
            VerificaExistenciaTabla 4
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            
            ' union de las tres tablas
            sql = "SELECT DISTINCT " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB) & " as Fecha, "
            'sql = sql & "a.RUC, a.Nombre, a.Codtrans, a.cantTrans, "
            sql = sql & " isnull(a.RUC,d.ruc)as ruc, isnull(a.Nombre,d.nombre) as nombre, isnull(a.Codtrans,'FC'), isnull(a.cantTrans,0),"
            sql = sql & " isnull(a.Valor0*-1,0) , isnull(a.Valor12*-1,0), "
            sql = sql & " 0,'',0, "
            sql = sql & " b.BaseServ, b.CodServicio, "
            sql = sql & " b.ValorServicio , b.BaseBien, b.CodBien, b.ValorBien,  "
            sql = sql & " D.BaseIR, d.CodIR, d.ValorIR  "
            sql = sql & " From tmp4 D FULL join (tmp3 c right join tmp1 a on c.FC_id=a.IdClienteRef  ) left join tmp2 b on b.IdClienteRef=c.rtp_id on d.IdClienteRef=c.FC_id "
            sql = sql & " order by a.Nombre"
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANVentasN = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Compraspara Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 4

End Function

Public Function ConsANRetencionVentas() As Variant
    Dim pck As PCKardex, pcd As PCDocAsignado
    Dim objGnComp As GNComprobante, objGnCompDocOriginal As GNComprobante
    Dim sql As String, cond As String, CadenaValores As String
    Dim Recargo As String 'CadenaAgrupa  As String
    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
    Dim from As String, numReg As Long, f1 As String
    Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
    Dim Servicios As String, Bienes As String, RowRet As Long
    Const COL_BASESER = 15
    'segunda parte de la consulta: carga los valores de  Detalles de Anexos
    Const COL_FECHA = 2
    Const COL_CODCREDTRIB = 7
    Const COL_TRANSID = 1
    Const COL_TRANSRET = 5
    Dim condServ As String
    Dim condBien As String
    
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   
    With gobjCond
        'Reporte de un mes a la vez
        f1 = DateSerial(Year(.fecha1), Month(.fecha1), 1)
        cond = " AND GNC.FechaTrans BETWEEN " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & _
               " AND " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB)
        
           
            VerificaExistenciaTabla 0
            VerificaExistenciaTabla 1
            VerificaExistenciaTabla 2
            VerificaExistenciaTabla 3
            
            sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as TotalDescuento Into tmp0 " & _
                    "From IvRecargo ivR inner join " & _
                        "IvKardexRecargo ivkR Inner join " & _
                            "GnComprobante gNc  " & _
                        "On ivkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = IvkR.IdRecargo "
            sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.CodForma) & ") " & cond & _
                    " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")" & _
                  "Group by IvkR.TransID"
                  
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg

'--datos de indices
            VerificaExistenciaTabla 3
            sql = " Select  DISTINCT GNC.IdClienteRef AS FC_id, GNC_b.IdClienteRef AS rtp_id1, "
            sql = sql & " CASE WHEN GNC_b.IdClienteRef=0 THEN PCK_b.IdProvcli WHEN GNC_b.IdClienteRef<>0 THEN GNC_b.IdClienteRef end as rtp_id "
            sql = sql & " Into tmp3"
            sql = sql & " From    (gncomprobante GNC Inner join pckardex pck_a ON GNC.TransID = pck_a.TransID ) INNER JOIN"
            sql = sql & "  (gncomprobante GNC_b Inner join pckardex pck_B ON GNC_b.TransID = pck_B.TransID )"
            sql = sql & " ON  PCK_A.ID = PCK_B.IDASIGNADO"
            sql = sql & " where GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " AND GNC_b.CodTrans IN (" & PreparaCadena(gobjCond.Grupo1) & ")"
            sql = sql & " AND (GNC.FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = sql & " and GNC.Estado<>3 and GNC.IdClienteRef<>0 and GNC_b.IdClienteRef<>0 "
            
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            '--datos de la Venta
            
            
            sql = " Select gnc.IdClienteRef, pc.ruc, pc.Nombre,"
            sql = sql & " count(Gnc.NumTrans) as cantTrans,  "
            sql = sql & " sum( (vw.PrecioTotalBase0 + (vw.PrecioTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float))) ))*-1  As Valor0,"
            sql = sql & " sum( (vw.PrecioTotalBaseIVA + (vw.PrecioTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1 AS Valor12,"
            sql = sql & " sum( (vw.PrecioTotal + (vw.PrecioTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1   AS PrecioTotal"
            sql = sql & " Into tmp1"
            sql = sql & " from    ("
            sql = sql & " tmp0"
            sql = sql & " Right join gncomprobante Gnc INNER JOIN PCPROVClI pc ON GNC.IdClienteRef=pc.idprovcli "
            sql = sql & " inner join vwConsSUMIVKardexIVA vw"
            sql = sql & " ON Gnc.TransID = vw.transid"
            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " and GNC.Estado<>3 " & cond
            sql = sql & " group by  gnc.IdClienteRef, pc.ruc, pc.Nombre "
            
            VerificaExistenciaTabla 1
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            '-- datos de las retenciones
            sql = " select  gnc.IdClienteRef, "
            sql = sql & " pc.ruc,pc.nombre,  "
            sql = sql & " sum(ts_retb.Debe+ts_retb.Haber) as ValorBien , "
            sql = sql & " sum(ts_retb.base) as BaseBien, max(tsrb.CodRetencion)  as CodBien,"
            sql = sql & " Sum(ts_rets.Base)  as BaseServ, "
            sql = sql & " sum(ts_rets.Debe+ts_rets.Haber) as ValorServicio, "
            sql = sql & " max(tsrs.CodRetencion) as CodServicio"
            sql = sql & " Into tmp2"
            sql = sql & " from    gntrans gnt inner join (gncomprobante  GNC inner join pcprovcli pc on gnc.idclienteref=pc.idprovcli)  "
            sql = sql & "  inner join"
            sql = sql & " (tskardexret ts_retb inner join tsretencion tsrb on"
            sql = sql & " ts_retb.IdRetencion = tsrb.IdRetencion and tsrb.CodRetencion in"
            sql = sql & " (" & PreparaCadena(gobjCond.Bienes) & "))"
            sql = sql & " full Join"
            sql = sql & " (tskardexret ts_rets inner join tsretencion tsrs on"
            sql = sql & " ts_rets.IdRetencion = tsrs.IdRetencion AND tsrs.CodRetencion in"
            sql = sql & " (" & PreparaCadena(gobjCond.Servicios) & "))"
            sql = sql & " on ts_retb.IdRetencion = ts_rets.IdRetencion"
            sql = sql & " on GNC.TransID=ts_retb.TransID or GNC.TransID=ts_rets.TransID" ' or GNC.TransID=ts_retI.TransID "
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " WHERE GNC.CodTrans IN (" & PreparaCadena(gobjCond.Grupo1) & ")"
            sql = sql & " AND GNC.FechaTrans BETWEEN " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & _
               " AND " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB)
            sql = sql & " and GNC.Estado<>3 "
            
            sql = sql & " Group By gnc.IdClienteRef, pc.nombre, pc.ruc "
            VerificaExistenciaTabla 2
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
          
        sql = " select gnc.IdClienteRef ,"
        sql = sql & " pc.ruc,pc.nombre,  "
        sql = sql & " SUM(tsk.Base) as BaseIR, SUM(tsk.Debe+tsk.Haber) as ValorIR,  tsr.codretencion as CodIR"
        sql = sql & " Into tmp4"
        sql = sql & " from gntrans gnt"
        sql = sql & " inner join (gncomprobante  GNC inner join pcprovcli pc on gnc.idclienteref=pc.idprovcli)"
        sql = sql & " inner join tskardexret tsk"
        sql = sql & " inner join tsretencion tsr"
        sql = sql & " on tsk.idretencion=tsr.idretencion"
        sql = sql & " on gnc.transid=tsk.transid"
        sql = sql & " on gnt.codtrans=gnc.codtrans"
        sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.Grupo1) & ")"
        sql = sql & " AND tsr.CodRetencion  like  '%IR%'"
        sql = sql & " AND GNC.FechaTrans BETWEEN " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & _
               " AND " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB)
            sql = sql & " and GNC.Estado<>3 "
        sql = sql & " GROUP BY    gnc.IdClienteRef,tsr.codretencion,pc.nombre, pc.ruc "
            
            VerificaExistenciaTabla 4
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            
            ' union de las tres tablas
            sql = "SELECT DISTINCT " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB) & " as Fecha, "
            'sql = sql & "a.RUC, a.Nombre, a.Codtrans, a.cantTrans, "
            sql = sql & " isnull(a.RUC,isnull(b.ruc,d.ruc))as ruc, isnull(a.Nombre,isnull(b.nombre,d.nombre)) as nombre, "
            sql = sql & " 0,0, "
            'sql = sql & " isnull(a.Valor0*-1,0) , isnull(a.Valor12*-1,0), "
            sql = sql & " b.BaseServ, b.CodServicio, "
            sql = sql & " b.ValorServicio , b.BaseBien, b.CodBien, b.ValorBien,  "
            sql = sql & " D.BaseIR, d.CodIR, d.ValorIR  "
'            sql = sql & " From tmp4 D inner join tmp1 a on d.IdClienteRef=a.IdClienteRef"
'            sql = sql & " left join tmp2 b on b.IdClienteRef=a.IdClienteRef"
            sql = sql & " From tmp2 b right join tmp4 d    left join tmp1 a"
            sql = sql & " on d.IdClienteRef=a.IdClienteRef"
            sql = sql & " on b.IdClienteRef=d.IdClienteRef or b.IdClienteRef=a.IdClienteRef"
            
            'sql = sql & " From tmp4 D FULL join (tmp3 c inner join tmp1 a on c.FC_id=a.IdClienteRef  ) inner join tmp2 b on b.IdClienteRef=c.rtp_id on d.IdClienteRef=c.FC_id "
            sql = sql & " order by a.Nombre"
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANRetencionVentas = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Compraspara Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 4

End Function



Public Function ConsANCompras_ItemTipoSRI() As Variant
    Dim pck As PCKardex, pcd As PCDocAsignado
    Dim objGnComp As GNComprobante, objGnCompDocOriginal As GNComprobante
    Dim sql As String, cond As String, CadenaValores As String
    Dim Recargo As String 'CadenaAgrupa  As String
    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
    Dim from As String, numReg As Long
    Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
    Dim Servicios As String, Bienes As String, RowRet As Long
    Const COL_BASESER = 15
    'segunda parte de la consulta: carga los valores de  Detalles de Anexos
    Const COL_FECHA = 2
    Const COL_CODCREDTRIB = 7
    Const COL_TRANSID = 1
    Const COL_TRANSRET = 5
    Dim condServ As String
    Dim condBien As String
    
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   
    With gobjCond
        
            cond = " AND (GNC.FechaTrans  BETWEEN " & _
                    FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                    FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            
'            If Len(.Usuario1) > 0 Or Len(.Usuario2) > 0 Then
'                   cond = cond & " AND pcprovcli.CodProvCli  BETWEEN  '" & .Usuario1 & "' AND '" & .Usuario2 & "' "
'            End If
            
            VerificaExistenciaTabla 0
            
            VerificaExistenciaTabla 2
            VerificaExistenciaTabla 3
            
            sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as TotalDescuento Into tmp0 " & _
                    "From IvRecargo ivR inner join " & _
                        "IvKardexRecargo ivkR Inner join " & _
                            "GnComprobante gNc  " & _
                        "On ivkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = IvkR.IdRecargo "
            sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.CodForma) & ") " & cond & _
                    " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")" & _
                  "Group by IvkR.TransID"
                  
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg

'--datos de indices
            VerificaExistenciaTabla 3
            sql = " Select  DISTINCT GNC.TransID AS cp_id, GNC_b.TransID AS rtp_id"
            sql = sql & " Into tmp3"
            sql = sql & " From    (gncomprobante GNC Inner join pckardex pck_a ON GNC.TransID = pck_a.TransID ) INNER JOIN"
            sql = sql & "  (gncomprobante GNC_b Inner join pckardex pck_B ON GNC_b.TransID = pck_B.TransID )"
            sql = sql & " ON  PCK_A.ID = PCK_B.IDASIGNADO"
            sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " AND GNC_b.CodTrans IN (" & PreparaCadena(gobjCond.Grupo1) & ")"
            sql = sql & " AND (GNC.FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = sql & " and GNC.Estado<>3 and GNC_b.estado<>3 "
            
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            '--datos de la compra
            sql = " Select  GNC.TransID, Ane.FechaAnexos, GNC.FechaTrans, pcprovcli.ruc,"
            sql = sql & " GNC.Nombre, Ane.CodCredTrib, Ane.CodTipoComp, Ane.NumAutSRI,"
            sql = sql & " Ane.NumSerie, Ane.NumSecuencial, GNC.Descripcion,"
            sql = sql & " Case Ane.BandDevolucion WHEN 0 THEN 'N' ELSE 'S' END AS BandDev,"
            sql = sql & " Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as Trans,"
            sql = sql & " Case vw.CostoTotalBase0 When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBase0 + (vw.CostoTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))) ) end As Valor0, "
            sql = sql & " Case vw.CostoTotalBaseIVA When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseIVA + (vw.CostoTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) end AS Valor12, "
            sql = sql & " Case vw.CostoTotal When 0 then 0 else "
            sql = sql & " vw.SignoCompra  * (vw.CostoTotal + (vw.CostoTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))))  End AS CostoTotal,  "
            sql = sql & " ane.NumSerieEstablecimiento ,ane.NumSeriePunto ,ane.FechaCaducidad"
            sql = sql & " Into tmp1"
            sql = sql & " from    (( tmp0 Right join gncomprobante Gnc inner join vwConsSUMIVKardexIVA vw ON Gnc.TransID = vw.transid ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " inner join Anexos Ane on Gnc.TransID = Ane.Transid)"
            'sql = sql & " inner join pckardex on pckardex.transid=GNC.TRansId)"
            'sql = sql & " inner join pcprovcli  on pckardex.idprovcli=pcprovcli.idprovcli"
            sql = sql & " right join pcprovcli  on gnc.IdProveedorRef=pcprovcli.idprovcli"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " and GNC.Estado<>3 " & cond
            VerificaExistenciaTabla 1
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            '--datos de la compra si es bienes
            sql = " Select  GNC.TransID, "
            sql = sql & " Case vw.CostoTotalBaseIVA* MAXIVA  When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseIVA + (vw.CostoTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))))*MAXIVA   end AS ValorBienes "
            sql = sql & " Into tmp5"
            sql = sql & " from    (( tmp0 Right join gncomprobante Gnc inner join vwConsSUMIVKardexIvTipoSRI vw ON Gnc.TransID = vw.transid ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " inner join Anexos Ane on Gnc.TransID = Ane.Transid)"
            'sql = sql & " inner join pckardex on pckardex.transid=GNC.TRansId)"
            'sql = sql & " inner join pcprovcli  on pckardex.idprovcli=pcprovcli.idprovcli"
            sql = sql & " right join pcprovcli  on gnc.IdProveedorRef=pcprovcli.idprovcli"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " and GNC.Estado<>3 " & cond
            sql = sql & " and vw.TipoSri=0 "
            VerificaExistenciaTabla 5
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            '--datos de la compra si es servicios
            sql = " Select  GNC.TransID, "
            sql = sql & " Case vw.CostoTotalBaseIVA*MAXIVA  When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseIVA + (vw.CostoTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))))*MAXIVA  end AS ValorServicio "
            sql = sql & " Into tmp6"
            sql = sql & " from    (( tmp0 Right join gncomprobante Gnc inner join vwConsSUMIVKardexIvTipoSRI vw ON Gnc.TransID = vw.transid ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " inner join Anexos Ane on Gnc.TransID = Ane.Transid)"
            'sql = sql & " inner join pckardex on pckardex.transid=GNC.TRansId)"
            'sql = sql & " inner join pcprovcli  on pckardex.idprovcli=pcprovcli.idprovcli"
            sql = sql & " right join pcprovcli  on gnc.IdProveedorRef=pcprovcli.idprovcli"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " and GNC.Estado<>3 " & cond
            sql = sql & " and vw.TipoSri<>0 "
            VerificaExistenciaTabla 6
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            '-- datos de las retenciones
            sql = " select  GNC.TransID, Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as TransRet,"
            sql = sql & " sum(ts_retb.Debe+ts_retb.Haber) as ValorBien , sum(ts_retb.base) as BaseBien, tsrb.CodRetencion  as CodBien,"
            sql = sql & " Sum(ts_rets.Base)  as BaseServ, sum(ts_rets.Debe+ts_rets.Haber) as ValorServicio, tsrs.CodRetencion as CodServicio,"
            'jeaa 23/03/2006
            'sql = sql & " Sum(ts_retI.Base)  as BaseIR,     sum(ts_retI.Debe+ts_retI.Haber) as ValorIR,    tsrI.CodRetencion as CodIR,"
            sql = sql & " NumSerieEstablecimiento,"
            sql = sql & " NumSeriePunto ,"
            sql = sql & " Gnc.NumTrans,"
            sql = sql & " NumAutorizacion ,"
            sql = sql & " gnc.FechaTRans"
            sql = sql & " Into tmp2"
            sql = sql & " from    gntrans gnt inner join gncomprobante Gnc "
            sql = sql & "  inner join"
            sql = sql & " (tskardexret ts_retb inner join tsretencion tsrb on"
            sql = sql & " ts_retb.IdRetencion = tsrb.IdRetencion and tsrb.CodRetencion in"
            sql = sql & " (" & PreparaCadena(gobjCond.Bienes) & "))"
            sql = sql & " full Join"
            sql = sql & " (tskardexret ts_rets inner join tsretencion tsrs on"
            sql = sql & " ts_rets.IdRetencion = tsrs.IdRetencion AND tsrs.CodRetencion in"
            sql = sql & " (" & PreparaCadena(gobjCond.Servicios) & "))"
            sql = sql & " on ts_retb.IdRetencion = ts_rets.IdRetencion"
            sql = sql & " on GNC.TransID=ts_retb.TransID or GNC.TransID=ts_rets.TransID" ' or GNC.TransID=ts_retI.TransID "
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " WHERE GNC.CodTrans IN (" & PreparaCadena(gobjCond.Grupo1) & ")"
            sql = sql & " and GNC.Estado<>3 "
            sql = sql & " Group By ts_retb.TransID, ts_rets.TransID, GNC.TransId, GNC.CodTrans, GnC.NumTrans ,tsrb.CodRetencion, tsrs.CodRetencion, "
            sql = sql & " NumSerieEstablecimiento, NumSeriePunto , Gnc.NumTrans, NumAutorizacion , gnc.FechaTRans "
            'sql = sql & " ts_reti.TransID , ts_reti.TransID, tsrI.CodRetencion"
            VerificaExistenciaTabla 2
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            '-- datos de las retenciones  IMPUESTIO A LA RENTA
            'jeaa 23/03/2006
            sql = " select GNC.TransID, Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as TransRet,"
            sql = sql & " tsk.Base as BaseIR,(tsk.Debe+tsk.Haber) as ValorIR,  tsr.codretencion as CodIR,"
            sql = sql & " NumSerieEstablecimiento , NumSeriePunto, gnc.NumTrans, NumAutorizacion, gnc.FechaTrans"
            sql = sql & " Into tmp4"
            sql = sql & " from gntrans gnt"
            sql = sql & " inner join gncomprobante gnc"
            sql = sql & " inner join tskardexret tsk"
            sql = sql & " inner join tsretencion tsr"
            sql = sql & " on tsk.idretencion=tsr.idretencion"
            sql = sql & " on gnc.transid=tsk.transid"
            sql = sql & " on gnt.codtrans=gnc.codtrans"
            sql = sql & " where tsr.CodRetencion  like  '%IR%'"
            sql = sql & " and GNC.CodTrans IN (" & PreparaCadena(gobjCond.Grupo1) & ")"
            sql = sql & " and GNC.Estado<>3 "
              VerificaExistenciaTabla 4
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            
            ' union de las tres tablas
            sql = " select  DISTINCT  a.Transid,a.FechaAnexos, a.FechaTrans, a.Trans,"
            sql = sql & "a.RUC, a.Nombre, "
            sql = sql & " a.NumSerieEstablecimiento , a.NumSeriePunto, "
            sql = sql & " a.NumSecuencial, a.NumAutSRI, a.FechaCaducidad, "
            sql = sql & "a.CodCredTrib, a.CodTipoComp,a. BandDev, "
            sql = sql & " a.Descripcion,a.Valor0, a.Valor12, "
            sql = sql & " isnull(b.BaseServ,isnull(f.ValorServ,0)) as BaseServ,"
            sql = sql & " isnull(b.CodServicio,'IVA0') as Codservicio,"
            sql = sql & " isnull(b.ValorServicio, 0) as Valorservicio,"
            sql = sql & " isnull(b.BaseBien,isnull(e.ValorBien,0)) as BaseBien,"
            sql = sql & " isnull(b.CodBien,'IVA0') as CodBiein,"
            sql = sql & " isnull(b.ValorBien,0) as ValorVien,"
            sql = sql & " D.BaseIR, d.CodIR, d.ValorIR,  "
            sql = sql & "  isnull(b.TransRet, d.TransRet) as TransRet,"
            sql = sql & "  isnull(b.NumSerieEstablecimiento, d.NumSerieEstablecimiento) as NumSerieEstablecimiento,"
            sql = sql & "  isnull(b.NumSeriePunto , d.NumSeriePunto ) NumSeriePunto ,"
            sql = sql & "  isnull(b.NumTrans, d.NumTrans ) as NumTrans,"
            sql = sql & "  isnull(b.NumAutorizacion, d.NumAutorizacion) as NumAutorizacion,"
            sql = sql & "  isnull(b.FechaTrans, d.FechaTrans) As FechaTrans"
            'sql = sql & " From tmp1 a "
            sql = sql & " From ((tmp1 a left join tmp5 e on a.transid=e.transid) left join tmp6 f on a.transid=f.transid)"
            sql = sql & " left join tmp2 b right join tmp3 c right join tmp4 D on d.Transid=c.rtp_id on b.Transid=c.rtp_id on a.Transid=c.cp_id"
            sql = sql & " order by a.FechaAnexos"
            
sql = "  select  DISTINCT  a.Transid,a.FechaAnexos, a.FechaTrans, a.Trans,a.RUC, a.Nombre,"
sql = sql & "  a.NumSerieEstablecimiento , a.NumSeriePunto,  a.NumSecuencial, a.NumAutSRI, a.FechaCaducidad,"
sql = sql & "  a.CodCredTrib, a.CodTipoComp,a. BandDev,  a.Descripcion, a.Valor0, a.Valor12,"
sql = sql & "  case when b.BaseServ>0 or b.BaseBien>0"
sql = sql & "  then b.BaseServ "
sql = sql & "  else isnull(b.BaseServ,f.Valorservicio)"
sql = sql & "  end as BaseServ,"


'sql = sql & "  case when b.BaseServ>0 or b.BaseBien>0 then b.CodServicio else 'IVA0' end as Codservicio, "
sql = sql & "  b.CodServicio, "
sql = sql & "  b.ValorServicio as Valorservicio,"
sql = sql & "  case when b.BaseServ>0 or b.BaseBien>0"
sql = sql & "  then b.BaseBien"
sql = sql & "  else isnull(b.BaseBien,e.ValorBienes)"
sql = sql & "  end as BaseBien,"
'sql = sql & "  case when b.BaseServ>0 or b.BaseBien>0 or b.codservicio is null then b.CodBien else 'IVA0' end as CodBiein, "
sql = sql & "  b.CodBien, "
sql = sql & "  (b.ValorBien) as ValorVien,"
sql = sql & "  D.BaseIR, d.CodIR, d.ValorIR,    isnull(b.TransRet, d.TransRet) as TransRet,  isnull(b.NumSerieEstablecimiento, d.NumSerieEstablecimiento) as NumSerieEstablecimiento,  isnull(b.NumSeriePunto , d.NumSeriePunto ) NumSeriePunto ,  isnull(b.NumTrans, d.NumTrans ) as NumTrans,  isnull(b.NumAutorizacion, d.NumAutorizacion) as NumAutorizacion,  isnull(b.FechaTrans, d.FechaTrans) As FechaTrans"
sql = sql & "  From ((tmp1 a left join tmp5 e on a.transid=e.transid) left join tmp6 f on a.transid=f.transid)"
sql = sql & "  left join tmp2 b"
sql = sql & "  right join tmp3 c"
sql = sql & "  right join tmp4 D"
sql = sql & "  on d.Transid=c.rtp_id"
sql = sql & "  on b.Transid=c.rtp_id"
sql = sql & "  on a.Transid=c.cp_id"
sql = sql & "  order by a.FechaAnexos"
            
            
            
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANCompras_ItemTipoSRI = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Compraspara Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 4
End Function


Public Function ConsANComprasCAMARI() As Variant
    Dim pck As PCKardex, pcd As PCDocAsignado
    Dim objGnComp As GNComprobante, objGnCompDocOriginal As GNComprobante
    Dim sql As String, cond As String, CadenaValores As String
    Dim Recargo As String 'CadenaAgrupa  As String
    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
    Dim from As String, numReg As Long
    Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
    Dim Servicios As String, Bienes As String, RowRet As Long
    Const COL_BASESER = 15
    'segunda parte de la consulta: carga los valores de  Detalles de Anexos
    Const COL_FECHA = 2
    Const COL_CODCREDTRIB = 7
    Const COL_TRANSID = 1
    Const COL_TRANSRET = 5
    Dim condServ As String
    Dim condBien As String
    
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   
    With gobjCond
        
            cond = " AND (GNC.FechaTrans  BETWEEN " & _
                    FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                    FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            
'            If Len(.Usuario1) > 0 Or Len(.Usuario2) > 0 Then
'                   cond = cond & " AND pcprovcli.CodProvCli  BETWEEN  '" & .Usuario1 & "' AND '" & .Usuario2 & "' "
'            End If
            
            VerificaExistenciaTabla 0
            
            VerificaExistenciaTabla 2
            VerificaExistenciaTabla 3
            
            sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as TotalDescuento Into tmp0 " & _
                    "From IvRecargo ivR inner join " & _
                        "IvKardexRecargo ivkR Inner join " & _
                            "GnComprobante gNc  " & _
                        "On ivkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = IvkR.IdRecargo "
            sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.CodForma) & ") " & cond & _
                    " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")" & _
                  "Group by IvkR.TransID"
                  
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg

'--datos de indices
            VerificaExistenciaTabla 3
            sql = " Select  DISTINCT GNC.TransID AS cp_id, GNC_b.TransID AS rtp_id"
            sql = sql & " Into tmp3"
            sql = sql & " From    (gncomprobante GNC Inner join pckardex pck_a ON GNC.TransID = pck_a.TransID ) INNER JOIN"
            sql = sql & "  (gncomprobante GNC_b Inner join pckardex pck_B ON GNC_b.TransID = pck_B.TransID )"
            sql = sql & " ON  PCK_A.ID = PCK_B.IDASIGNADO"
            sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " AND GNC_b.CodTrans IN (" & PreparaCadena(gobjCond.Grupo1) & ")"
            sql = sql & " AND (GNC.FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = sql & " and GNC.Estado<>3 and GNC_b.estado<>3 "
            
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            '--datos de la compra con recargo de iva
            sql = " Select  GNC.TransID, Ane.FechaAnexos, GNC.FechaTrans, pcprovcli.ruc,"
            sql = sql & " GNC.Nombre, Ane.CodCredTrib, Ane.CodTipoComp, Ane.NumAutSRI,"
            sql = sql & " Ane.NumSerie, Ane.NumSecuencial, GNC.Descripcion,"
            sql = sql & " Case Ane.BandDevolucion WHEN 0 THEN 'N' ELSE 'S' END AS BandDev,"
            sql = sql & " Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as Trans,"
            sql = sql & " Case vw.CostoTotalBase0 When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBase0 + (vw.CostoTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))) ) end As Valor0, "
            sql = sql & " Case vw.CostoTotalBaseIVA When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseIVA + (vw.CostoTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) end AS Valor12, "
            sql = sql & " Case vw.CostoTotalBaseIVA When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseIVA + (vw.CostoTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))))* MAXIVA end AS ValorIVA, "
            sql = sql & " Case vw.CostoTotal When 0 then 0 else "
            sql = sql & " vw.SignoCompra  * (vw.CostoTotal + (vw.CostoTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))))  End AS CostoTotal,  "
            sql = sql & " ane.NumSerieEstablecimiento ,ane.NumSeriePunto ,ane.FechaCaducidad "
            sql = sql & " Into tmp1"
            sql = sql & " from    (( tmp0 Right join gncomprobante Gnc "
            sql = sql & " inner join gntrans gnt"
            sql = sql & " inner join GNTransRecargo gntr"
            sql = sql & " inner join ivrecargo ivr"
            sql = sql & " on ivr.idrecargo=gntr.idrecargo"
            sql = sql & " on gnt.codtrans= gntr.codtrans"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " inner join vwConsSUMIVKardexIVA vw ON Gnc.TransID = vw.transid ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " inner join Anexos Ane on Gnc.TransID = Ane.Transid)"
            sql = sql & " right join pcprovcli  on gnc.IdProveedorRef=pcprovcli.idprovcli"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " and CodRecargo='" & gobjMain.EmpresaActual.GNOpcion.ObtenerValor("RecDescParaIVA") & "'"
            sql = sql & " and GNC.Estado<>3 " & cond
            
            
            '--datos de la compra sin recargo de iva
            
            If InStr(1, gobjCond.CodTrans, "CPART") > 0 Or InStr(1, gobjCond.CodTrans, "CPARM") > 0 Then
                sql = sql & " union all  Select  GNC.TransID, Ane.FechaAnexos, GNC.FechaTrans, pcprovcli.ruc,"
                sql = sql & " GNC.Nombre, Ane.CodCredTrib, Ane.CodTipoComp, Ane.NumAutSRI,"
                sql = sql & " Ane.NumSerie, Ane.NumSecuencial, GNC.Descripcion,"
                sql = sql & " Case Ane.BandDevolucion WHEN 0 THEN 'N' ELSE 'S' END AS BandDev,"
                sql = sql & " Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as Trans,"
                sql = sql & " Case vw.CostoTotalBase0 When 0 then 0 else "
                sql = sql & " vw.SignoCompra * (vw.CostoTotalBase0 + (vw.CostoTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))) ) end + "
                sql = sql & " Case vw.CostoTotalBaseIVA When 0 then 0 else "
                sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseIVA + (vw.CostoTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) end AS Valor0, "
                'sql = sql & " Case vw.CostoTotalBaseIVA When 0 then 0 else "
                'sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseIVA + (vw.CostoTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))))* MAXIVA end AS ValorIVA, "
                sql = sql & " 0 AS Valor12, "
                sql = sql & " 0 AS ValorIVA, "
                sql = sql & " Case vw.CostoTotal When 0 then 0 else "
                sql = sql & " vw.SignoCompra  * (vw.CostoTotal + (vw.CostoTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))))  End AS CostoTotal,  "
                sql = sql & " ane.NumSerieEstablecimiento ,ane.NumSeriePunto ,ane.FechaCaducidad "
                'sql = sql & " Into tmp1"
                sql = sql & " from    (( tmp0 Right join gncomprobante Gnc "
                sql = sql & " inner join gntrans gnt"
                sql = sql & " inner join GNTransRecargo gntr"
                sql = sql & " inner join ivrecargo ivr"
                sql = sql & " on ivr.idrecargo=gntr.idrecargo"
                sql = sql & " on gnt.codtrans= gntr.codtrans"
                sql = sql & " on gnc.codtrans=gnt.codtrans"
                sql = sql & " inner join vwConsSUMIVKardexIVA vw ON Gnc.TransID = vw.transid ON tmp0.TransID = Gnc.TransID)"
                sql = sql & " inner join Anexos Ane on Gnc.TransID = Ane.Transid)"
                sql = sql & " right join pcprovcli  on gnc.IdProveedorRef=pcprovcli.idprovcli"
                'sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
                sql = sql & " where  GNC.CodTrans IN ('CPART','CPARM')"
                sql = sql & " and not CodRecargo='" & gobjMain.EmpresaActual.GNOpcion.ObtenerValor("RecDescParaIVA") & "'"
                sql = sql & " and GNC.Estado<>3 " & cond
            End If
                        
            
            VerificaExistenciaTabla 1
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            
            
            '-- datos de las retenciones
            sql = " select  GNC.TransID, Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as TransRet,"
            sql = sql & " sum(ts_retb.Debe+ts_retb.Haber) as ValorBien , sum(ts_retb.base) as BaseBien, tsrb.CodSRI  as CodBien, tsrb.Porcentaje*100 as PorcentajeBien, "
            sql = sql & " 0 as codIVAS,0 as codIVAB,"
            sql = sql & " Sum(ts_rets.Base)  as BaseServ, sum(ts_rets.Debe+ts_rets.Haber) as ValorServicio, tsrs.CodSRI as CodServicio, tsrs.Porcentaje*100 as PorcentajeServicio, "
            'jeaa 23/03/2006
            'sql = sql & " Sum(ts_retI.Base)  as BaseIR,     sum(ts_retI.Debe+ts_retI.Haber) as ValorIR,    tsrI.CodRetencion as CodIR,"
            sql = sql & " NumSerieEstablecimiento,"
            sql = sql & " NumSeriePunto ,"
            'jeaa 07/07/2006
'            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosRetencion")) > 0 Then
'                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosRetencion") > 0 Then
'                    sql = sql & " gnc.NumDocRef as NumeroTrans , "
'                Else
'                    sql = sql & " gnc.NumTrans as NumeroTrans, "
'                End If
'
'            Else
                sql = sql & " gnc.NumTrans as NumeroTrans, "
'            End If
            
            'jeaa 12/09/2007
'            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion")) > 0 Then
'                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion") > 0 Then
'                    sql = sql & " gnc.AutorizacionSRI as NumAutorizacion , "
'                Else
'                    sql = sql & " gnt.NumAutorizacion as NumAutorizacion, "
'                End If
'            Else
'                sql = sql & " gnt.NumAutorizacion as NumAutorizacion, "
'            End If
            
            sql = sql & " info.numeroautorizacion as NumAutorizacion , "
            
'            sql = sql & " NumAutorizacion ,"
            sql = sql & " gnc.FechaTRans"
            sql = sql & " Into tmp2"
            sql = sql & " from    gntrans gnt inner join gncomprobante Gnc "
            sql = sql & "  inner join infocomprobantes info on gnc.transid=info.transid "
                        
            sql = sql & "  inner join"
            sql = sql & " (tskardexret ts_retb inner join tsretencion tsrb on"
            sql = sql & " ts_retb.IdRetencion = tsrb.IdRetencion and tsrb.CodRetencion in"
            sql = sql & " (" & PreparaCadena(gobjCond.Bienes) & "))"
            sql = sql & " full Join"
            sql = sql & " (tskardexret ts_rets inner join tsretencion tsrs on"
            sql = sql & " ts_rets.IdRetencion = tsrs.IdRetencion AND tsrs.CodRetencion in"
            sql = sql & " (" & PreparaCadena(gobjCond.Servicios) & "))"
            sql = sql & " on ts_retb.IdRetencion = ts_rets.IdRetencion"
            sql = sql & " on GNC.TransID=ts_retb.TransID or GNC.TransID=ts_rets.TransID" ' or GNC.TransID=ts_retI.TransID "
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " WHERE GNC.CodTrans IN (" & PreparaCadena(gobjCond.Grupo1) & ")"
            sql = sql & " and GNC.Estado<>3 "
            sql = sql & " Group By ts_retb.TransID, ts_rets.TransID, GNC.TransId, GNC.CodTrans, GnC.NumTrans ,tsrb.CodSRI, tsrs.CodSRI, tsrb.Porcentaje, tsrs.Porcentaje, "
            sql = sql & " NumSerieEstablecimiento, NumSeriePunto,  "
'            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosRetencion")) > 0 Then
'                sql = sql & " gnc.NumDocRef , "
'            Else
                sql = sql & " gnc.NumTrans , "
'            End If
            
            'jeaa 12/09/2007
'''            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion")) > 0 Then
'''                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion") > 0 Then
'''                    sql = sql & " gnc.AutorizacionSRI , "
'''                Else
'''                    sql = sql & " gnt.NumAutorizacion , "
'''                End If
'''            Else
'''                sql = sql & " gnt.NumAutorizacion , "
'''            End If
            
             sql = sql & "  info.numeroautorizacion, gnc.FechaTRans "

            'sql = sql & " ts_reti.TransID , ts_reti.TransID, tsrI.CodRetencion"
            VerificaExistenciaTabla 2
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            '-- datos de las retenciones  IMPUESTIO A LA RENTA
            'jeaa 23/03/2006
            sql = " select GNC.TransID, Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as TransRet,"
            sql = sql & " tsk.Base as BaseIR,(tsk.Debe+tsk.Haber) as ValorIR,  tsr.codSRI as CodIR,"
            sql = sql & " NumSerieEstablecimiento , NumSeriePunto, "
            sql = sql & " 0 as codRetIR, "
            'jeaa 07/07/2006
'            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosRetencion")) > 0 Then
'                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosRetencion") > 0 Then
'                    sql = sql & " gnc.NumDocRef as NumeroTrans , "
'                Else
'                    sql = sql & " gnc.NumTrans as NumeroTrans, "
'                End If
'
'            Else
                sql = sql & " gnc.NumTrans as NumeroTrans, "
'            End If
            
                        'jeaa 12/09/2007
'            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion")) > 0 Then
'                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion") > 0 Then
'                    sql = sql & " gnc.AutorizacionSRI as NumAutorizacion , "
'                Else
'                    sql = sql & " gnt.NumAutorizacion as NumAutorizacion, "
'                End If
'            Else
'                sql = sql & " gnt.NumAutorizacion as NumAutorizacion, "
'            End If

            sql = sql & "  info.numeroautorizacion as NumAutorizacion , gnc.FechaTrans"
            sql = sql & " Into tmp4"
            sql = sql & " from gntrans gnt"
            sql = sql & " inner join gncomprobante gnc"
            sql = sql & "  inner join infocomprobantes info on gnc.transid=info.transid "
            sql = sql & " inner join tskardexret tsk"
            sql = sql & " inner join tsretencion tsr"
            sql = sql & " on tsk.idretencion=tsr.idretencion"
            sql = sql & " on gnc.transid=tsk.transid"
            sql = sql & " on gnt.codtrans=gnc.codtrans"
            sql = sql & " where BANDIVA=0"
            sql = sql & " and GNC.CodTrans IN (" & PreparaCadena(gobjCond.Grupo1) & ")"
            sql = sql & " and GNC.Estado<>3 "
              VerificaExistenciaTabla 4
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            
            ' union de las tres tablas
            ' union de las tres tablas
            sql = " select  DISTINCT  a.Transid,a.Trans,a.CodCredTrib, "
            sql = sql & " case when a.BandDev='S' then 'VERDADERO' else 'FALSO' end AS devol,"
            'iif(a. BandDev='S','VERDADERO','FALSO') AS devol, "
            sql = sql & " 0 AS EgresoCont, "
            'sql = sql & ",  "
            sql = sql & " a.RUC, a.Nombre,  a.CodTipoComp, a.FechaTrans, "
            sql = sql & " a.NumSerieEstablecimiento , a.NumSeriePunto, "
            sql = sql & " a.NumSecuencial, a.FechaAnexos, a.NumAutSRI, a.FechaCaducidad, "
            'sql = sql & " a.Descripcion,"
            sql = sql & "  a.Valor0, a.Valor12, a.ValorIVA, '' as CompIVA,"
            sql = sql & "  b.BaseBien, b.PorcentajeBien, b.codBIEN, b.ValorBien,  "
            sql = sql & "  b.BaseServ , b.PorcentajeServicio, b.codSERVICIO, b.ValorServicio ,''  as CompRetIVA, "
            sql = sql & "  d.codRetIR, d.CodIR, D.BaseIR,  d.ValorIR,  ''  as CompIR, "
            sql = sql & "  isnull(b.NumSerieEstablecimiento, d.NumSerieEstablecimiento) as NumSerieEstablecimiento,"
            sql = sql & "  isnull(b.NumSeriePunto , d.NumSeriePunto ) NumSeriePunto ,"
            sql = sql & "  isnull(b.NumeroTrans, d.NumeroTrans) as NumTrans,"
            sql = sql & "  isnull(b.NumAutorizacion, d.NumAutorizacion) as NumAutorizacion,"
            sql = sql & "  isnull(b.FechaTrans, d.FechaTrans) As FechaTrans, 0 as FechaAnulacion "
            sql = sql & " From tmp1 a left join tmp2 b right join tmp3 c left join tmp4 D on d.Transid=c.rtp_id on b.Transid=c.rtp_id on a.Transid=c.cp_id"
            sql = sql & " order by a.FechaAnexos"
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANComprasCAMARI = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Compraspara Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 4
End Function


Public Function ConsANVentasCamari() As Variant
    Dim pck As PCKardex, pcd As PCDocAsignado
    Dim objGnComp As GNComprobante, objGnCompDocOriginal As GNComprobante
    Dim sql As String, cond As String, CadenaValores As String
    Dim Recargo As String 'CadenaAgrupa  As String
    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
    Dim from As String, numReg As Long, f1 As String
    Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
    Dim Servicios As String, Bienes As String, RowRet As Long
    Const COL_BASESER = 15
    'segunda parte de la consulta: carga los valores de  Detalles de Anexos
    Const COL_FECHA = 2
    Const COL_CODCREDTRIB = 7
    Const COL_TRANSID = 1
    Const COL_TRANSRET = 5
    Dim condServ As String
    Dim condBien As String
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    With gobjCond
        'Reporte de un mes a la vez
        f1 = DateSerial(Year(.fecha1), Month(.fecha1), 1)
        cond = " AND GNC.FechaTrans BETWEEN " & FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & _
               " AND " & FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB)
           VerificaExistenciaTabla 0
            VerificaExistenciaTabla 1
            VerificaExistenciaTabla 2
            VerificaExistenciaTabla 3
            sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as TotalDescuento Into tmp0 " & _
                    "From IvRecargo ivR inner join " & _
                        "IvKardexRecargo ivkR Inner join " & _
                            "GnComprobante gNc  " & _
                        "On ivkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = IvkR.IdRecargo "
            sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.Sucursal) & ") " & cond & _
                    " AND GNC.CodTrans IN (" & PreparaCadena(.CodGrupo) & ")" & _
                  "Group by IvkR.TransID"
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
'--datos de indices
            VerificaExistenciaTabla 3
            sql = " Select  DISTINCT GNC.IdClienteRef AS FC_id, GNC_b.IdClienteRef AS rtp_id1, "
            sql = sql & " CASE WHEN GNC_b.IdClienteRef=0 THEN PCK_b.IdProvcli WHEN GNC_b.IdClienteRef<>0 THEN GNC_b.IdClienteRef end as rtp_id "
            sql = sql & " Into tmp3"
            sql = sql & " From    (gncomprobante GNC Inner join pckardex pck_a ON GNC.TransID = pck_a.TransID ) INNER JOIN"
            sql = sql & "  (gncomprobante GNC_b Inner join pckardex pck_B ON GNC_b.TransID = pck_B.TransID )"
            sql = sql & " ON  PCK_A.ID = PCK_B.IDASIGNADO"
            sql = sql & " where GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
            sql = sql & " AND GNC_b.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion2) & ")"
            sql = sql & " AND (GNC.FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = sql & " and GNC.Estado<>3 and GNC.IdClienteRef<>0 and GNC_b.IdClienteRef<>0 "
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            '--datos de la Venta
            sql = " Select gnc.IdClienteRef, pc.ruc, pc.Nombre,"
            sql = sql & " Gnc.Codtrans, Gnc.Numtrans, gnc.NumDocRef, Gnc.FechaTrans, "
           sql = sql & " ( (vw.PrecioTotalBase0 ))*-1  As Valor0,"
            sql = sql & " CASE WHEN cast(vw.PrecioTotal as float)<> 0 THEN ( (vw.PrecioTotalBase0 + (vw.PrecioTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float))) ))*-1  ELSE 0 END As NValor0,"
           sql = sql & " ( (vw.PrecioTotalBaseIVA ))*-1 AS Valor12,"
            sql = sql & " CASE WHEN cast(vw.PrecioTotal as float)<> 0 THEN ( (vw.PrecioTotalBaseIVA + (vw.PrecioTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1 ELSE 0 END AS NValor12,"
            sql = sql & " CASE WHEN cast(vw.PrecioTotal as float)<> 0 THEN ( (vw.PrecioTotal + (vw.PrecioTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1   ELSE 0 END AS PrecioTotal, "
           sql = sql & " gt.NumSerieEstablecimiento, NumSeriePunto, info.numeroautorizacion as NumAutorizacion, "
            sql = sql & " CASE WHEN cast(vw.PrecioTotal as float)<> 0 THEN ( (vw.PrecioTotalBaseIVA + (vw.PrecioTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float))))) * MAXIVA *-1 ELSE 0 END AS IVA, "
            sql = sql & " gt.AnexoCodTipoComp "
           sql = sql & " Into tmp1"
            sql = sql & " from    ("
            sql = sql & " tmp0"
            sql = sql & " Right join gncomprobante Gnc inner join gntrans gt on gnc.codtrans=gt.codtrans "
            sql = sql & "  inner join infocomprobantes info on gnc.transid=info.transid "
            sql = sql & "  INNER JOIN PCPROVClI pc ON GNC.IdClienteRef=pc.idprovcli "
            sql = sql & " inner join vwConsSUMIVKardexIVAcamari vw"
            sql = sql & " ON Gnc.TransID = vw.transid"
            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
            sql = sql & " and GNC.Estado<>3 " & cond
'            sql = sql & " group by  gnc.IdClienteRef, pc.ruc, pc.Nombre, Gnc.Codtrans "
            VerificaExistenciaTabla 1
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            '-- datos de las retenciones
            sql = " select  gnc.IdClienteRef, "
            sql = sql & " (ts_retb.Debe+ts_retb.Haber) as ValorBien , "
            sql = sql & " (ts_retb.base) as BaseBien, tsrb.CodRetencion  as CodBien,"
            sql = sql & " (ts_rets.Base)  as BaseServ, "
            sql = sql & " (ts_rets.Debe+ts_rets.Haber) as ValorServicio, "
            sql = sql & " tsrs.CodRetencion as CodServicio"
            sql = sql & " Into tmp2"
            sql = sql & " from    gntrans gnt inner join gncomprobante gnc  "
            sql = sql & "  inner join"
            sql = sql & " (tskardexret ts_retb inner join tsretencion tsrb on"
            sql = sql & " ts_retb.IdRetencion = tsrb.IdRetencion and tsrb.CodRetencion in"
            sql = sql & " (" & PreparaCadena(gobjCond.Bienes) & "))"
            sql = sql & " full Join"
            sql = sql & " (tskardexret ts_rets inner join tsretencion tsrs on"
            sql = sql & " ts_rets.IdRetencion = tsrs.IdRetencion AND tsrs.CodRetencion in"
            sql = sql & " (" & PreparaCadena(gobjCond.Servicios) & "))"
            sql = sql & " on ts_retb.IdRetencion = ts_rets.IdRetencion"
            sql = sql & " on GNC.TransID=ts_retb.TransID or GNC.TransID=ts_rets.TransID" ' or GNC.TransID=ts_retI.TransID "
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " WHERE GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion2) & ")"
            sql = sql & " AND GNC.FechaTrans BETWEEN " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & _
               " AND " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB)
            sql = sql & " and GNC.Estado<>3 "
'            sql = sql & " Group By gnc.IdClienteRef, tsrb.CodRetencion, tsrs.CodRetencion"
            VerificaExistenciaTabla 2
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            '-- datos de las retenciones  IMPUESTIO A LA RENTA
            sql = " select  GNC.TransID, Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as TransRet,"
            'jeaa 23/03/2006
        sql = " select gnc.IdClienteRef ,"
        sql = sql & " pc.ruc,pc.nombre,  "
        sql = sql & " (tsk.Base) as BaseIR, (tsk.Debe+tsk.Haber) as ValorIR,  tsr.codretencion as CodIR"
        sql = sql & " Into tmp4"
        sql = sql & " from gntrans gnt"
        sql = sql & " inner join (gncomprobante  GNC inner join pcprovcli pc on gnc.idclienteref=pc.idprovcli)"
        sql = sql & " inner join tskardexret tsk"
        sql = sql & " inner join tsretencion tsr"
        sql = sql & " on tsk.idretencion=tsr.idretencion"
        sql = sql & " on gnc.transid=tsk.transid"
        sql = sql & " on gnt.codtrans=gnc.codtrans"
        sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
        sql = sql & " AND tsr.CodRetencion  like  '%IR%'"
        sql = sql & " AND GNC.FechaTrans BETWEEN " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & _
               " AND " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB)
            sql = sql & " and GNC.Estado<>3 "
        'sql = sql & " GROUP BY    gnc.IdClienteRef,tsr.codretencion,pc.nombre, pc.ruc "
            VerificaExistenciaTabla 4
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            ' union de las tres tablas
            sql = " select a.codtrans,isnull(a.RUC,d.ruc)as ruc, isnull(a.Nombre,d.nombre) as nombre, a.AnexoCodTipoComp TipoComp, "
            sql = sql & "a.NumSerieEstablecimiento, a.NumSeriePunto, a.Numtrans, a.NumDocRef, a.NumAutorizacion,"
           sql = sql & "  '1' as cantTrans, "
            sql = sql & " a.FechaTrans, '', a.FechaTrans,  "
            sql = sql & " isnull(a.Valor0,0) , 'FALSO' AS Presunt, isnull(a.Valor12,0), "
            sql = sql & " (abs(isnull(a.Valor0,0)-isnull(a.Valor0,0))+ abs(isnull(a.nValor12,0)-isnull(a.nValor12,0))) as desc1, "
            sql = sql & "  isnull(a.nValor0,0) , isnull(a.nValor12,0) , a.iva "
            sql = sql & " From tmp4 D FULL join (tmp3 c right join tmp1 a on c.FC_id=a.IdClienteRef  ) left join tmp2 b on b.IdClienteRef=c.rtp_id on d.IdClienteRef=c.FC_id "
            sql = sql & " order by a.codtrans, a.Numtrans "
   End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANVentasCamari = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Compraspara Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 4
End Function

'jeaa 25/04/2005
Public Function ListaICE(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodICE,  Descripcion, porcentaje*100 FROM IVRecargoICE"
    If BandSoloValida Then
        sql = sql & " WHERE BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY CodICE"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaICE = rs
    Else
        ListaICE = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function RecuperaICE(key As Variant) As IVRecargoICE
    Dim obj As IVRecargoICE
    Set obj = New IVRecargoICE
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaICE = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CreaICE() As IVRecargoICE
    Dim obj As IVRecargoICE
    Set obj = New IVRecargoICE
    Set obj.Empresa = Me
    Set CreaICE = obj
    Set obj = Nothing
End Function

'jeaa 10/08/2006
Public Function ListaAnexoTipoComprobante(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodComprobante,  Descripcion, SecuencialValidos,Sustentos, bandAutoimpresor FROM Anexo_Comprobantes"
    If BandSoloValida Then
        sql = sql & " where bandvalida=1 "
    End If
    sql = sql & " ORDER BY CodComprobante"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaAnexoTipoComprobante = rs
    Else
        ListaAnexoTipoComprobante = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

'jeaa 10/08/2006
Public Function ListaAnexoTipoSustento(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodSustento,  Descripcion FROM Anexo_Suntentos"
    sql = sql & " ORDER BY CodSustento"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaAnexoTipoSustento = rs
    Else
        ListaAnexoTipoSustento = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


'jeaa 10/08/2006
Public Function ListaAnexoTipoTransacciones(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodTrans,  Descripcion,SecuencialTransValidos,ComprobantesValidos FROM Anexos_Transacciones"
    sql = sql & " ORDER BY CodTrans"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaAnexoTipoTransacciones = rs
    Else
        ListaAnexoTipoTransacciones = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function



' jeaa 05/04/2004 para Hormipisos
'Para Kardex de items separadas las columnas de Costo Total + y -
Public Function ConsIVKardexAjuste() As Variant
    Dim sql As String, cond As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsIVKardexPorFecha")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("prmCodBodega") = gobjCond.CodBodega1
    qdef.Parameters("CodItem1") = IIf(Len(gobjCond.CodItem1) = 0, "!", gobjCond.CodItem1)
    qdef.Parameters("CodItem2") = IIf(Len(gobjCond.CodItem2) = 0, String$(20, "z"), gobjCond.CodItem2)
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient

    sql = "spConsIVKardexPorFecha2ColAjuste " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodBodega1 & "','" & _
                gobjCond.CodItem1 & "','" & _
                gobjCond.CodItem2 & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB)
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    Set ConsIVKardexAjuste = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Kardex inv. " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "IV"
End Function


'Para corrección de Comprometidos
'Devuelve los items que tienen existencia incorrecta comparando con
' la suma de IVKardex.
Public Function ConsIVCorrecCompr(venta As String, entrega As String) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    Dim numReg As Long
   
        'Obtiene lo facturado
        VerificaExistenciaTabla 1
        sql = " SELECT ivk.idinventario, iv.codinventario, iv.Descripcion,ivk.idbodega,"
        sql = sql & " codbodega, "
        sql = sql & " Sum(ivk.Cantidad) As sumaCant"
        sql = sql & " Into tmp1"
        sql = sql & " FROM GNComprobante gc"
        sql = sql & " INNER JOIN (IVInventario iv"
        sql = sql & " INNER JOIN IVKardex ivk"
        sql = sql & " inner join IVBodega IVB"
        sql = sql & " on ivk.idbodega=ivb.idbodega"
        sql = sql & " ON iv.IdInventario = ivk.IdInventario)"
        sql = sql & " ON gc.TransID=ivk.TransID"
        'sql = sql & " WHERE (gc.CodTrans IN ('FD1', 'FD1M'))"
        sql = sql & " WHERE (gc.CodTrans IN (" & venta & "))"
        sql = sql & " AND (gc.Estado IN (1,2,4))"
        sql = sql & " group by ivk.idinventario, iv.codinventario,iv.Descripcion,ivk.idbodega, codbodega "
        Me.EjecutarSQL sql, numReg
        
        'obtiene los consumos
        VerificaExistenciaTabla 2
        sql = " SELECT ivk.idinventario, iv.codinventario,iv.Descripcion,ivk.idbodega, codbodega,"
        sql = sql & " Sum((ivk.Cantidad)) As sumaCant"
        sql = sql & " Into tmp2"
        sql = sql & " FROM GNTrans gt"
        sql = sql & " INNER JOIN (GNComprobante gc"
        sql = sql & " INNER JOIN (IVInventario iv"
        sql = sql & " INNER JOIN IVKardex ivk"
        sql = sql & " inner join IVBodega IVB"
        sql = sql & " on ivk.idbodega=ivb.idbodega"
        sql = sql & " ON iv.IdInventario = ivk.IdInventario)"
        sql = sql & " ON gc.TransID=ivk.TransID)"
        sql = sql & " ON gt.CodTrans=gc.CodTrans"
        'sql = sql & " WHERE (gt.VerificaLimiteCon='FD1')"
        sql = sql & " WHERE (gc.CodTrans IN (" & entrega & "))"
        sql = sql & " AND (gc.Estado<>3)"
        sql = sql & " group by ivk.idinventario, iv.codinventario,ivk.idbodega, codbodega, iv.Descripcion"
        Me.EjecutarSQL sql, numReg
        
        'une las dos tablas
        sql = " select isnull(t1.idinventario,isnull(t2.idinventario,ivi.idinventario)) as idinventario, "
        sql = sql & " isnull(t1.codinventario, isnull(t2.codinventario,ivi.codinventario)) as codinventario, "
        sql = sql & " isnull(t1.Descripcion,isnull(t2.Descripcion,ivi.Descripcion)) as Descripcion, "
        sql = sql & " isnull(t1.idbodega, isnull(t2.idbodega,ivb.idbodega)) as idbodega, "
        sql = sql & " isnull(t1.codbodega, isnull(t2.codbodega,ivb.codbodega)) as codbodega, "
        sql = sql & " isnull(t1.sumaCant,0)*-1, isnull(t2.sumaCant,0)*-1, "
        sql = sql & " isnull(ivc.compr,0) as Comprometido,"
        sql = sql & " (abs(isnull(t1.SumaCant,0))-abs(isnull(t2.SumaCant,0))) as SumaDeCantidad,"
        sql = sql & " abs(isnull(ivc.compr,0)-(abs(isnull(t1.SumaCant,0))-abs(isnull(t2.SumaCant,0)))) as dif"
        sql = sql & " from tmp2 t2"
        sql = sql & " FULL join tmp1 t1"
        sql = sql & " FULL join ivcompr ivc"
        sql = sql & " inner JOin IVInventario ivi"
        sql = sql & " on ivi.idinventario=ivc.idinventario"
        sql = sql & " inner JOin IVBodega ivb"
        sql = sql & " on ivc.idbodega=ivb.idbodega"
        
        sql = sql & " on t1.idinventario=ivc.idinventario and t1.IdBodega = ivc.IdBodega"
        sql = sql & " on t1.idinventario=t2.idinventario and t1.IdBodega = t2.IdBodega "
''        sql = sql & " Where (abs(isnull(t1.SumaCant,0))-abs(isnull(t2.SumaCant,0))) <>0"
''        sql = sql & " and abs(isnull(ivc.compr,0)-(abs(isnull(t1.SumaCant,0))-abs(isnull(t2.SumaCant,0)))) <>0 "
''        sql = sql & " Where abs(isnull(t1.SumaCant,0))<>0 "
''        sql = sql & " and  abs(isnull(t2.SumaCant,0)) <>0 "
        sql = sql & " Where  isnull(ivc.compr,0) <> (abs(isnull(t1.SumaCant,0))-abs(isnull(t2.SumaCant,0)))"
        sql = sql & " order by t1.codinventario,t1.codbodega "
    
    Set rs = Me.OpenRecordset(sql)
    Set ConsIVCorrecCompr = rs
    Set rs = Nothing
End Function


'Para corregir comprometidos incorrectos
Public Sub CorregirComprometido()
    Dim rs As Recordset, sql As String, rs2 As Recordset
    
    Set rs = Me.ConsIVCorrecCompr(gobjCond.CodTrans, gobjCond.Bienes)
    If rs.EOF Then Exit Sub
    
#If DAOLIB = 0 Then
    Set rs2 = New ADODB.Recordset
    rs2.CursorLocation = adUseClient
#End If

    With rs
        Do Until .EOF
            'Verifica si existe el registro
            sql = "SELECT Compr FROM IVcompr " & _
                  " WHERE IdInventario=" & !IdInventario & _
                  " AND IdBodega=" & !IdBodega
#If DAOLIB Then
            Set rs2 = mdbEmpresa.OpenRecordset(sql, dbOpenSnapshot, dbReadOnly)
#Else
            rs2.Open sql, mcnEmpresa, adOpenStatic, adLockReadOnly
#End If
            'Si no existe, lo inserta
            If rs2.EOF Then
                sql = "INSERT INTO IVCompr (IdInventario,IdBodega,Compr) " & _
                      "VALUES (" & !IdInventario & "," & !IdBodega & "," & !SumaDeCantidad & ")"
            
            'Si existe, lo modifica
            Else
                sql = "UPDATE IVCompr SET Compr=" & !SumaDeCantidad & _
                      " WHERE IdInventario=" & !IdInventario & _
                      " AND IdBodega=" & !IdBodega
            End If
            Me.Execute sql, True
            rs2.Close
            .MoveNext
        Loop
        .Close
    End With
    Set rs2 = Nothing
    Set rs = Nothing
End Sub


'*** jeaa 10/NOV/06 Agregado para sacar centro de Costos
Public Function ListaGNCentoCostoFlexEx( _
                    BandFecha As Boolean) As String
    Dim sql As String, s As String, cond As String
    Dim rs As Recordset
    
    sql = "SELECT CodCentro, Descripcion FROM GnCentroCosto "
    If BandFecha Then
        cond = " FechaFinal Is Null "
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " ORDER BY CodCentro"

    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 20 + 40)         '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    
    ListaGNCentoCostoFlexEx = s
    rs.Close
    Set rs = Nothing
End Function


'obtiene lista de recargo y de3scuentos de la transaccion configurada o padrea
Public Function ListaIVRecargoTransaccionparaFlex(ByVal CodTrans As String) As String
    Dim sql As String, s As String, i As Integer
    Dim rs As Recordset
    
    sql = "SELECT ivr.codrecargo, ivr.descripcion " & _
            " FROM GNTransRecargo gnt inner join IVRecargo ivr on ivr.idrecargo=gnt.idRecargo " & _
            " WHERE codtrans='" & CodTrans & "' and bandorigen not in('0','-3') ORDER BY CodRecargo "
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 5 + 20)          '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    ListaIVRecargoTransaccionparaFlex = s
    rs.Close
    Set rs = Nothing
End Function

Public Function CargaHistorialAutorizaciones(ByVal cod As String) As Variant
    Dim rs As Recordset, sql As String
    Dim i As Long
    sql = " select NumAutSRI, FechaCaducidad, NumSecuencialDesde, NumSecuencialHasta, FechaGrabado "
    sql = sql & " from HistorialAutoriza Where codTrans='" & cod & "'"
    sql = sql & " order by Id  desc"
    Set rs = Me.OpenRecordset(sql)
    Set CargaHistorialAutorizaciones = rs ' MiGetRows(rs)
'    rs.Close
    Set rs = Nothing
End Function

Public Sub GrabarHistorialAutorizaciones(ByRef cod As String)
    Dim sql As String, i As Integer
    Dim rs As Recordset
    Dim rsaux As Recordset
    Dim rs1 As Recordset
    Dim UltimoNumSec As String
    sql = "SELECT  NumAutorizacion, FechaCaducidad, NumTransSiguiente, NumTransSiguiente,numtransinicio, numtransultimopreimpreso FROM gntrans WHERE codtrans='" & cod & "'"
   Set rsaux = Me.OpenRecordset(sql)
    UltimoNumSec = rsaux.Fields("NumTransSiguiente") - 1
    UltimoNumSec = rsaux.Fields("NumTransInicio")
   sql = "SELECT * FROM HistorialAutoriza WHERE 1=0"
    'Set rs = Me.OpenRecordset(sql)
    Set rs = Me.OpenRecordsetParaEdit(sql)
    rs.AddNew
    'graba la nueva autorizacion
    With rs
        !CodTrans = cod
        !NumAutSRI = rsaux.Fields("NumAutorizacion")
        !FechaCaducidad = rsaux.Fields("FechaCaducidad")
        !NumSecuencialDesde = rsaux.Fields("NumTransInicio")
        !NumSecuencialHasta = rsaux.Fields("numtransultimopreimpreso")
       !fechagrabado = Now
        .Update
        .Move 0             'Para actualizar
        .Close
    End With
   Set rs = Nothing
    Set rsaux = Nothing
    Set rs1 = Nothing
  Exit Sub
ErrTrap:
End Sub

Public Function ConsANComprobantesAnuladoCamari() As Variant
    Dim sql As String, cond As String, CadenaValores As String
    Dim rs As Recordset
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    With gobjCond
            cond = " AND (GNC.FechaTrans  BETWEEN " & _
                    FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                    FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = " select  gnc.FechaTrans, gnc.CodTrans, "
            sql = sql & " gnt.NumSerieEstablecimiento, gnt.NumSeriePunto,"
            sql = sql & " numtrans, numdocref, "
            
            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion")) > 0 Then
                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion") > 0 Then
                    sql = sql & " gnc.AutorizacionSRI as NumAutorizacion , "
                Else
                    sql = sql & " gnt.NumAutorizacion as NumAutorizacion, "
                End If
            Else
                sql = sql & " gnt.NumAutorizacion as NumAutorizacion, "
            End If
            
            sql = sql & " GNC.FechaTrans"
            sql = sql & " from gncomprobante gnc inner join gntrans gnt on gnc.codtrans=gnt.codtrans "
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodPC2) & ")"
            sql = sql & " and Estado = 3 " & cond
            sql = sql & " order by gnc.FechaTrans,gnc. codTrans "
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANComprobantesAnuladoCamari = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons CompAnuladas para Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
End Function


'jeaa 18/12/2006
Public Function ListaAnexoTipoRetencion(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodRetencion, Descripcion,porcentaje/100 as Porcentaje FROM anexos_retencion_IR"
    sql = sql & " ORDER BY CodRetencion"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaAnexoTipoRetencion = rs
    Else
        ListaAnexoTipoRetencion = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


Public Function ListaCTCuentaNombreParaFlexGrid(TipoCuenta As Integer) As String
    Dim sql As String, cad As String, rs As Recordset
    
    'sql = "SELECT Nombre,codigo FROM vwCTCuentaNombreParaCombo WHERE bandvalida=1 "
    sql = "SELECT nombre + ' [' + Codigo + ']' FROM vwCTCuentaNombreParaCombo WHERE bandvalida=1"
    If TipoCuenta > 0 Then sql = sql & " and TipoCuenta=" & TipoCuenta
    
    'jeaa 01/12/2005
    sql = sql & " ORDER BY nombre"
    Set rs = Me.OpenRecordset(sql)

    'Pero por ahora uso lo siguiente para controlar cuentas de total y de movimiento
#If DAOLIB Then
    cad = "|" & GetStringDAO(rs, 21 + (20 + 80 + 2))        'Código+'*'=21, Space+NombreCuenta+'[]'=20+80+2
#Else
    If Not rs.EOF Then cad = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    rs.Close
    Set rs = Nothing
    ListaCTCuentaNombreParaFlexGrid = cad
End Function


'AUC 27/03/07
Public Function CreaAnexos() As Anexos
    Dim obj As Anexos
    Set obj = New Anexos
    Set obj.Empresa = Me
    Set CreaAnexos = obj
    Set obj = Nothing
End Function

'AUC 27/03/07
Public Function RecuperaAnexos(key As Variant) As Anexos
Dim obj As Anexos
    Set obj = New Anexos
    Set obj.Empresa = Me
    On Error Resume Next
    obj.RecuperarAnexoComprobante key
    If Err.Number = 0 Then Set RecuperaAnexos = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function



'AUC 27/03/07
Public Function RecuperaAnexosSust(key As Variant) As Anexos
Dim obj As Anexos
    Set obj = New Anexos
    Set obj.Empresa = Me
    On Error Resume Next
    obj.RecuperarAnexoSust key
    If Err.Number = 0 Then Set RecuperaAnexosSust = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function


Public Function RecuperaAnexosRetIR(key As Variant) As Anexos
Dim obj As Anexos
    Set obj = New Anexos
    Set obj.Empresa = Me
    On Error Resume Next
    obj.RecuperarAnexoRetIR key
    If Err.Number = 0 Then Set RecuperaAnexosRetIR = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function


Public Function RecuperaAnexosTrans(key As Variant) As Anexos
Dim obj As Anexos
    Set obj = New Anexos
    Set obj.Empresa = Me
    On Error Resume Next
    obj.RecuperarAnexosTrans key
    If Err.Number = 0 Then Set RecuperaAnexosTrans = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function ConsIVMovRes() As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim numReg As Long, condNum As String
    cond = " WHERE   (gc.Estado IN (1,2,4))"
    condNum = ""
    'para filtrado por cliente
    If Len(gobjCond.CodPC1) > 0 Or Len(gobjCond.CodPC2) > 0 Then
        If Len(gobjCond.CodPC1) > 0 And Len(gobjCond.CodPC2) = 0 Then
            cond = cond & " AND (pc.codprovcli BETWEEN '" & gobjCond.CodPC1 & " 'AND '" & gobjCond.CodPC1 & "')"
        ElseIf Len(gobjCond.CodPC1) = 0 And Len(gobjCond.CodPC2) > 0 Then
            cond = cond & " AND (pc.codprovcli BETWEEN '" & gobjCond.CodPC2 & " 'AND '" & gobjCond.CodPC2 & "')"
        ElseIf Len(gobjCond.CodPC1) > 0 And Len(gobjCond.CodPC2) > 0 Then
            cond = cond & " AND (pc.codprovcli BETWEEN '" & gobjCond.CodPC1 & " 'AND '" & gobjCond.CodPC2 & "')"
        End If
    End If
    'para filtrado por centro de costo
    If Len(gobjCond.CodCentro1) > 0 Or Len(gobjCond.CodCentro2) > 0 Then
        If Len(gobjCond.CodCentro1) > 0 And Len(gobjCond.CodCentro2) = 0 Then
            cond = cond & " AND (CodCentro BETWEEN '" & gobjCond.CodCentro1 & "'AND '" & gobjCond.CodCentro1 & "')"
        ElseIf Len(gobjCond.CodCentro1) = 0 And Len(gobjCond.CodCentro2) > 0 Then
            cond = cond & " AND (CodCentro BETWEEN '" & gobjCond.CodCentro2 & "'AND '" & gobjCond.CodCentro2 & "')"
        ElseIf Len(gobjCond.CodCentro1) > 0 And Len(gobjCond.CodCentro2) > 0 Then
            cond = cond & " AND (CodCentro BETWEEN '" & gobjCond.CodCentro1 & "'AND '" & gobjCond.CodCentro2 & "')"
        End If
    End If
    'para filtrado por item
    If Len(gobjCond.CodItem1) > 0 Or Len(gobjCond.CodItem2) > 0 Then
        If Len(gobjCond.CodItem1) > 0 And Len(gobjCond.CodItem2) = 0 Then
            cond = cond & " AND (Codinventario BETWEEN '" & gobjCond.CodItem1 & "'AND '" & gobjCond.CodItem1 & "')"
        ElseIf Len(gobjCond.CodItem1) = 0 And Len(gobjCond.CodItem2) > 0 Then
            cond = cond & " AND (Codinventario BETWEEN '" & gobjCond.CodItem2 & "'AND '" & gobjCond.CodItem2 & "')"
        ElseIf Len(gobjCond.CodItem1) > 0 And Len(gobjCond.CodItem2) > 0 Then
            cond = cond & " AND (Codinventario BETWEEN '" & gobjCond.CodItem1 & "'AND '" & gobjCond.CodItem2 & "')"
        End If
    End If
'    cond = cond & " and (gc.FechaTrans >" & FechaYMD(gobjCond.fecha1, gobjMain.EmpresaActual.TipoDB) & ")"
    'para filtrado por numero de transaccion
        If gobjCond.NumTrans1 <> 0 Or gobjCond.NumTrans2 <> 0 Then
        If gobjCond.NumTrans1 <> 0 And gobjCond.NumTrans2 = 0 Then
            condNum = condNum & " AND (gc.Numtrans BETWEEN '" & gobjCond.NumTrans1 & "'AND '" & gobjCond.NumTrans1 & "')"
        ElseIf gobjCond.NumTrans1 = 0 And gobjCond.NumTrans2 <> 0 Then
            condNum = condNum & " AND (gc.Numtrans BETWEEN '" & gobjCond.NumTrans2 & "'AND '" & gobjCond.NumTrans2 & "')"
        ElseIf gobjCond.NumTrans1 > 0 And gobjCond.NumTrans2 > 0 Then
            condNum = condNum & " AND (gc.Numtrans BETWEEN '" & gobjCond.NumTrans1 & "'AND '" & gobjCond.NumTrans2 & "')"
        End If
    End If

'---------- Listado de suma de Cantidad y Costo por items en Presupuesto
        VerificaExistenciaTablaTemporal 1
        sql = " SELECT gc.transid, gc.fechaTrans, gc.Codtrans+' '+CONVERT(varchar, gc.Numtrans) as TransPresup,"
        sql = sql & " pc.nombre, gcc.codcentro, gcc.Descripcion AS DescCentro, ivk.IdInventario,"
        sql = sql & " Sum(ivk.Cantidad) AS SumaCantPre "
        sql = sql & " Into t1 "
        sql = sql & " From (GNCentroCosto gcc RIGHT JOIN GNComprobante gc ON gcc.IdCentro = gc.IdCentro)"
        sql = sql & " inner join pcprovcli pc on gc.IdClienteRef=pc.idprovcli"
        sql = sql & " INNER JOIN IVKardex ivk"
        sql = sql & " INNER JOIN IVInventario iv"
        sql = sql & " ON ivk.idinventario= iv.idinventario"
        sql = sql & " ON gc.TransID = ivk.TransID " & cond & condNum
        sql = sql & " AND (gc.CodTrans ='" & gobjCond.CodTrans & "')"
        sql = sql & " and (gc.FechaTrans Between " & FechaYMD(gobjCond.fecha1, gobjMain.EmpresaActual.TipoDB)
        sql = sql & " and  " & FechaYMD(gobjCond.fecha2, gobjMain.EmpresaActual.TipoDB) & ")"
        sql = sql & " GROUP BY gc.IdCentro, ivk.IdInventario, gcc.Descripcion, gc.codtrans, gc.Numtrans, gcc.codcentro, pc.nombre, gc.transid, gc.fechaTrans"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        VerificaExistenciaTablaTemporal 2
        '---------- Listado de suma de Cantidad y Costos por items en Consumos
        sql = "  SELECT gc.IdTransFuente,"
        sql = sql & "  ivk.IdInventario,"
        sql = sql & " Sum(ivk.Cantidad) AS SumaCant "
        sql = sql & " INTO t2"
        sql = sql & "  From (GNCentroCosto gcc RIGHT JOIN GNComprobante gc ON gcc.IdCentro = gc.IdCentro)"
        sql = sql & " inner join pcprovcli pc on gc.IdClienteRef=pc.idprovcli"
        sql = sql & " INNER JOIN IVKardex ivk"
        sql = sql & " INNER JOIN IVInventario iv"
        sql = sql & " ON ivk.idinventario= iv.idinventario"
        sql = sql & " ON gc.TransID = ivk.TransID " & cond
        sql = sql & " and (gc.CodTrans IN (SELECT CodTrans FROM GNTrans WHERE VerificaLimiteCon='" & gobjCond.CodTrans & "'))"
        sql = sql & " AND (gc.CodTrans <> '" & gobjCond.CodTrans & "M')"
        sql = sql & "  GROUP BY ivk.IdInventario, gc.IdTransFuente"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        VerificaExistenciaTablaTemporal 3
        '---------- Listado de suma de Cantidad  y Costos en Modificaciones de Presupuesto
        sql = "  SELECT  gc.IdTransFuente,"
        sql = sql & "  ivk.IdInventario,"
        sql = sql & "   sum(ivk.Cantidad) AS SumaCantPre "
        sql = sql & "  INTO t3"
        sql = sql & "  From (GNCentroCosto gcc RIGHT JOIN GNComprobante gc ON gcc.IdCentro = gc.IdCentro)"
        sql = sql & "  inner join pcprovcli pc on gc.IdClienteRef=pc.idprovcli"
        sql = sql & "  INNER JOIN IVKardex ivk"
        sql = sql & "  INNER JOIN IVInventario iv"
        sql = sql & "  ON ivk.idinventario= iv.idinventario"
        sql = sql & "  ON gc.TransID = ivk.TransID" & cond
        sql = sql & " AND (gc.CodTrans = '" & gobjCond.CodTrans & "M')"
        sql = sql & " GROUP BY ivk.IdInventario, gc.IdTransFuente"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        VerificaExistenciaTablaTemporal 4
        '--saldo de consumos
        sql = "  SELECT gc.IdTransFuente, ivk.IdInventario,gc.fechaTrans,"
        sql = sql & "   sum(ABS(ivk.Cantidad))*-1 AS TotalConsumo"
        sql = sql & "  INTO t4"
        sql = sql & "   From (GNCentroCosto gcc RIGHT JOIN GNComprobante gc ON gcc.IdCentro = gc.IdCentro)"
        sql = sql & "  inner join pcprovcli pc on gc.IdClienteRef=pc.idprovcli"
        sql = sql & "  INNER JOIN IVKardex ivk"
        sql = sql & "  INNER JOIN IVInventario iv"
        sql = sql & "  ON ivk.idinventario= iv.idinventario"
        sql = sql & "  ON gc.TransID = ivk.TransID" & cond
        sql = sql & "  and (gc.CodTrans IN (SELECT CodTrans FROM GNTrans WHERE VerificaLimiteCon='" & gobjCond.CodTrans & "'))"
        sql = sql & "   GROUP by gc.IdTransFuente, ivk.IdInventario,gc.fechaTrans"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        VerificaExistenciaTablaTemporal 5
        sql = " select   IdTransFuente,IdInventario, sum(abs(totalConsumo))* -1 as totalConsumido"
        'sql = sql & " case when sum(totalConsumo)>0 then sum(totalConsumo)*-1 else sum(totalConsumo) end as totalConsumido"
        sql = sql & "  INTO t5"
        sql = sql & "   From t4"
        sql = sql & "   group by IdTransFuente,IdInventario"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        '----------- une tabla 4 y 5
        VerificaExistenciaTablaTemporal 6
        sql = "  SELECT t4.IdTransFuente, t4.IdInventario,t4.fechaTrans,"
        sql = sql & "   t4. TotalConsumo, t5.totalConsumido"
        sql = sql & "  INTO t6"
        sql = sql & "   From t4 inner join t5"
        sql = sql & "   on t4.IdTransFuente=t5.IdTransFuente and t4.IdInventario=t5.IdInventario"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        '---------- Combina las tres tablas temporales para comparar
        'VerificaExistenciaTablaTemporal 6
        sql = " SELECT distinct t1.codcentro, t1.DescCentro, isnull(t1.nombre,0) as PCNombre,"
        sql = sql & "    t1.TransPresup, t1.fechaTrans, iv.CodInventario, iv.Descripcion,"
        sql = sql & "   isnull(t1.SumaCantPre, 0) * -1 As Presupuesto,"
        sql = sql & "   isnull(t3.SumaCantPre, 0) * -1 AS PreMod,"
        sql = sql & "    isnull(t2.SumaCant, 0) As Consumo,"
        sql = sql & "   (isnull(t1.SumaCantPre, 0) * -1) AS TotalPresup "
        sql = sql & "  ,isnull(t6.totalConsumido,0) as TotalConsum, "
        sql = sql & "    (isnull(t1.SumaCantPre, 0) * -1)+ isnull(t6.totalConsumido,0) as saldo "
        sql = sql & "   From IVInventario iv"
        sql = sql & "   INNER JOIN t3"
        sql = sql & "   right join  ( t1 left join t6 on t1.transid=t6.IdTransFuente and t6.IdInventario= t1.IdInventario)"
        sql = sql & "   LEFT join t2"
        sql = sql & "   on t1.transid=t2.IdTransFuente and t1.IdInventario= t2.IdInventario"
        sql = sql & "   on t1.transid=t3.IdTransFuente and t1.IdInventario= t3.IdInventario"
        sql = sql & "   ON (iv.IdInventario=t1.IdInventario )"
        sql = sql & " where iv.bandservicio=0 "
        If Not gobjCond.IncluirCero Then
            sql = sql & " and (isnull(t1.SumaCantPre, 0) * -1)+ isnull(t6.totalConsumido,0)  <> 0"
        End If
        sql = sql & "   ORDER BY pc.PCNombre,t1.codcentro,t1.DescCentro,t1.fechaTrans, iv.CodInventario"
        
    Set rs = Me.OpenRecordset(sql)
   Set ConsIVMovRes = rs
    Set rs = Nothing
    VerificaExistenciaTablaTemporal 1
    VerificaExistenciaTablaTemporal 2
    VerificaExistenciaTablaTemporal 3
    VerificaExistenciaTablaTemporal 4
    VerificaExistenciaTablaTemporal 5
    VerificaExistenciaTablaTemporal 6
End Function


'Para corregir existencias incorrectas
Public Sub CorregirExistenciaBaseNueva(ByRef NombreBD As String)
    Dim rs As Recordset, sql As String, rs2 As Recordset
    
    Set rs = Me.ConsIVCorrecExist
    If rs.EOF Then Exit Sub
    
#If DAOLIB = 0 Then
    Set rs2 = New ADODB.Recordset
    rs2.CursorLocation = adUseClient
#End If

    With rs
        Do Until .EOF
            'Verifica si existe el registro
            sql = "SELECT Exist FROM" & NombreBD & "IVExist " & _
                  " WHERE IdInventario=" & !IdInventario & _
                  " AND IdBodega=" & !IdBodega
#If DAOLIB Then
            Set rs2 = mdbEmpresa.OpenRecordset(sql, dbOpenSnapshot, dbReadOnly)
#Else
            rs2.Open sql, mcnEmpresa, adOpenStatic, adLockReadOnly
#End If
            'Si no existe, lo inserta
            If rs2.EOF Then
                sql = "INSERT INTO " & NombreBD & " IVExist (IdInventario,IdBodega,Exist) " & _
                      "VALUES (" & !IdInventario & "," & !IdBodega & "," & !SumaDeCantidad & ")"
            
            'Si existe, lo modifica
            Else
                sql = "UPDATE " & NombreBD & "IVExist SET Exist=" & !SumaDeCantidad & _
                      " WHERE IdInventario=" & !IdInventario & _
                      " AND IdBodega=" & !IdBodega
            End If
            Me.Execute sql, True
            rs2.Close
            .MoveNext
        Loop
        .Close
    End With
    Set rs2 = Nothing
    Set rs = Nothing
End Sub


'jeaa 15/07/2007
Public Function ListaAnexoTipoDocumento(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodTipoDocumento,  Descripcion FROM Anexo_TipoDocumento"
    sql = sql & " ORDER BY CodTipoDocumento"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaAnexoTipoDocumento = rs
    Else
        ListaAnexoTipoDocumento = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function RecuperaAnexosTipoDocumento(key As Variant) As Anexos
Dim obj As Anexos
    Set obj = New Anexos
    Set obj.Empresa = Me
    On Error Resume Next
    obj.RecuperarAnexoTipoDocumento key
    If Err.Number = 0 Then Set RecuperaAnexosTipoDocumento = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function ConsTSPorCobrarPagarVende( _
                    ByVal PorCobrar As Boolean, _
                    ByVal CodProvcli As String, _
                    ByVal FechaVenci As Date, _
                    ByVal CodForma As String, _
                    ByVal CodMoneda As String, _
                    ByVal CodGrupo1 As String, _
                    ByVal CodVendedor As String) As Variant
    Dim aux_codpc As String, aux_f1 As Date, aux_f2 As Date
    Dim aux_PorCobrar As Boolean, aux_Cliente As Boolean, aux_Proveedor As Boolean
    Dim aux_CodForma As String, aux_CodMoneda As String, aux_codgrupo As String
    Dim aux_incluircero As Boolean, aux_codVendedor As String
    
    With gobjMain.objCondicion
        'Conservar valores actuales para que no afecte a otras consultas
        aux_codpc = .CodPC1
        aux_f1 = .fecha1
        aux_f2 = .fecha2
        aux_PorCobrar = .PorCobrar
        aux_Cliente = .Cliente
        aux_Proveedor = .Proveedor
        aux_CodForma = .CodForma
        aux_CodMoneda = .CodMoneda
        aux_codgrupo = .CodGrupo
        aux_incluircero = .IncluirCero
        aux_codVendedor = .Usuario1
        .PorCobrar = PorCobrar
        .Cliente = True
        .Proveedor = True
        .CodPC1 = CodProvcli
        .fecha1 = Me.GNOpcion.FechaInicio
        .fecha2 = FechaVenci
        .CodForma = CodForma
        .CodMoneda = CodMoneda
        .CodGrupo = CodGrupo1
        .IncluirCero = False
        .Usuario1 = CodVendedor
        Set ConsTSPorCobrarPagarVende = ConsTSPorCobrarPagarVendedor()
        
        'Recuperar valores reservados
        .CodPC1 = aux_codpc
        .fecha1 = aux_f1
        .fecha2 = aux_f2
        .PorCobrar = aux_PorCobrar
        .Cliente = aux_Cliente
        .Proveedor = aux_Proveedor
        .CodForma = aux_CodForma
        .CodMoneda = aux_CodMoneda
        .CodGrupo = aux_codgrupo
        .IncluirCero = aux_incluircero
        .Usuario1 = aux_codVendedor
    End With
End Function



'Para selección de documentos por cobrar/pagar
Public Function ConsTSPorCobrarPagarVendedor() As Variant
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim objCond As Condicion
    Dim BandModulo As Boolean
    Set objCond = gobjMain.objCondicion
    'Si no está especificada la moneda, coge la Moneda predeterminada
    If Len(objCond.CodMoneda) = 0 Then objCond.CodMoneda = MONEDA_PRE
    numMoneda = Me.GNOpcion.IndiceMoneda(objCond.CodMoneda)
#If DAOLIB Then
    sql = "SELECT Id, CodProvCli, Nombre, TransID, CodTrans, Trans, CodForma,NumLetra, Doc, "
    Select Case numMoneda
    Case 1:  sql = sql & "Valor1 AS Valor, VCancelado1 AS VCancelado, " & _
                          "Valor1-VCancelado1 AS Saldo, CodMoneda, Cancela, 1 AS Cotizacion, "
    Case 2:  sql = sql & "Valor2 AS Valor, VCancelado2 AS VCancelado, " & _
                          "Valor2-VCancelado2 AS Saldo, CodMoneda, Cancela, Cotizacion2 AS Cotizacion, "
    Case 3:  sql = sql & "Valor3 AS Valor, VCancelado3 AS VCancelado, " & _
                          "Valor3-VCancelado3 AS Saldo, CodMoneda, Cancela, Cotizacion3 AS Cotizacion, "
    Case 4:  sql = sql & "Valor4 AS Valor, VCancelado4 AS VCancelado, " & _
                          "Valor4-VCancelado4 AS Saldo, CodMoneda, Cancela, Cotizacion4 AS Cotizacion, "
    End Select
    sql = sql & "FechaEmision, Plazo, FechaVenci "
    If objCond.PorCobrar Then
        sql = sql & " FROM vwConsPCPorCobrar "
    Else
        sql = sql & " FROM vwConsPCPorPagar "
    End If
    'Solo los que tengan saldo >0   (Necesario)
    cond = "(Valor" & objCond.numMoneda & ">VCancelado" & objCond.numMoneda & ")"
    'Condición de FechaVenci    (Necesario)             '*** MAKOTO 10/dic/00 Modificado
    cond = cond & " AND (FechaVenci BETWEEN " & _
                    FechaYMD(objCond.fecha1, TipoDB) & " AND " & _
                    FechaYMD(objCond.fecha2, TipoDB) & ")"
    'Condición de CodMoneda     (Necesario)
    If Len(cond) > 0 Then cond = cond & " AND "
    cond = cond & "(CodMoneda='" & Me.GNOpcion.CodMoneda(numMoneda) & "')"
    'Condición de CodProvCli    (Opcional)
    If Len(objCond.CodPC1) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodProvCli='" & objCond.CodPC1 & "')"
    End If
    'Condición de CodForma    (Opcional)
    If Len(objCond.CodForma) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodForma='" & objCond.CodForma & "')"
    End If
    'Condición de Cod. Grupo1 de prov/cliente (Opcional)
    If Len(objCond.CodGrupo) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodGrupo1='" & objCond.CodGrupo & "')"
    End If
    'Condición de si incluir cliente/proveedor          '*** MAKOTO 10/dic/00
    If Len(cond) > 0 Then cond = cond & " AND "
    cond = cond & "(BandCliente=" & CadenaBool(objCond.Cliente, TipoDB) & _
                    " OR BandProveedor=" & CadenaBool(objCond.Proveedor, TipoDB) & ")"
    If Len(cond) > 0 Then sql = sql & " WHERE (" & cond & ")"
    sql = sql & " ORDER BY CodProvCli,FechaVenci"
#Else
    If Len(objCond.Sucursal) = 0 Then
        BandModulo = gobjMain.PermisoModuloEspecial(gobjMain.UsuarioActual.codUsuario, ModuloPagaRol)
                If (BandModulo And objCond.Empleado) Or objCond.BandAnticipo Then  'Esto es para pagar ets
                    sql = "spConsTSPorCobrarPagarEmpleado " & numMoneda & ", " & _
                    objCond.CodMoneda & "," & _
                    CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                    FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                    objCond.CodPC1 & "','" & _
                    objCond.CodPC1 & "','" & _
                    objCond.CodForma & "','" & _
                    objCond.CodForma & "','" & _
                    objCond.Codelemento & "','" & _
                    objCond.Codelemento & "','" & _
                    objCond.CodGrupo & "'"
                Else
                    sql = "spConsTSPorCobrarPagarVendedorSinRol " & numMoneda & ", " & _
                    objCond.CodMoneda & "," & _
                    CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                    CadenaBool(objCond.Cliente, TipoDB) & "," & _
                    CadenaBool(objCond.Proveedor, TipoDB) & "," & _
                    FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                    objCond.CodPC1 & "','" & _
                    objCond.CodPC1 & "','" & _
                    objCond.CodForma & "','" & _
                    objCond.CodForma & "','" & _
                    objCond.CodGrupo & "','" & _
                    objCond.Usuario1 & "','" & _
                    objCond.Usuario1 & "'," & _
                    IIf(Me.GNOpcion.Los100DocCobroPago, 1, 0)
                    If InStr(1, UCase(Me.GNOpcion.NombreEmpresa), "ITAL") Then
                        sql = sql & ",2"
                    Else
                        sql = sql & ",1"
                    End If
        End If
                  'sql = sql & ",'" & objCond.Codelemento & "'," & _
                "'" & objCond.Codelemento & "'"
    Else               'AUC cambiado para agregar el filtro sucusal
            sql = "spConsTSPorCobrarPagarVendedorSucursal " & numMoneda & ", " & _
                objCond.CodMoneda & "," & _
                CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                CadenaBool(objCond.Cliente, TipoDB) & "," & _
                CadenaBool(objCond.Proveedor, TipoDB) & "," & _
                FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                objCond.CodPC1 & "','" & _
                objCond.CodPC1 & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodGrupo & "','" & _
                objCond.Usuario1 & "','" & _
                objCond.Usuario1 & "'," & _
                IIf(Me.GNOpcion.Los100DocCobroPago, 1, 0) & ",'" & _
                objCond.Sucursal & "','" & _
                objCond.Sucursal & "'"
    End If
#End If
    Set rs = Me.OpenRecordset(sql)
    Set ConsTSPorCobrarPagarVendedor = rs
    Set rs = Nothing
    Set objCond = Nothing
End Function


Public Function ListaFCVendedorParaFlex2() As String
    Dim s As String, sql As String
    Dim rs As Recordset
    
    sql = "SELECT Nombre + ' [' + CodVendedor + ']' FROM FCVendedor "
    'sql = "SELECT CodVendedor,Nombre FROM FCVendedor "
    sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    sql = sql & " ORDER BY Nombre "

    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 10 + 40)         '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    
    ListaFCVendedorParaFlex2 = s
    rs.Close
    Set rs = Nothing
End Function

Public Function ListaFCCobrador(BandSoloValida As Boolean, BandRS As Boolean, _
                                                BandVendedor As Boolean, BandCobrador As Boolean) As Variant
'BandRS : True  --> Devuelve Recordset de ADO
'      False --> Devuelve en Array de Variant

    Dim sql As String, rs As Recordset
    
    sql = "SELECT CodVendedor,Nombre FROM FCVendedor "
    If BandVendedor Then
        sql = sql & " WHERE BandVendedor=" & CadenaBool(True, TipoDB)
    Else
        sql = sql & " WHERE BandCobrador=" & CadenaBool(True, TipoDB)
    End If

    If BandSoloValida Then sql = sql & " and  BandValida=" & CadenaBool(True, TipoDB)
    sql = sql & " ORDER BY CodVendedor"

    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaFCCobrador = rs
    Else
        ListaFCCobrador = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaFCVendedorN(BandSoloValida As Boolean, BandRS As Boolean, _
                                                BandVendedor As Boolean, BandCobrador As Boolean) As Variant
'BandRS : True  --> Devuelve Recordset de ADO
'      False --> Devuelve en Array de Variant

    Dim sql As String, rs As Recordset
    
    sql = "SELECT CodVendedor,Nombre, BandValida  "
'    If BandSoloValida Then sql = sql & ", BandValida"
    
    sql = sql & " FROM FCVendedor "
    If BandVendedor Then
        sql = sql & " WHERE BandVendedor=" & CadenaBool(True, TipoDB)
    Else
        sql = sql & " WHERE BandCobrador=" & CadenaBool(True, TipoDB)
    End If
    If BandSoloValida Then sql = sql & " and BandValida=" & CadenaBool(True, TipoDB)
    sql = sql & " ORDER BY CodVendedor"

    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaFCVendedorN = rs
    Else
        ListaFCVendedorN = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


Public Function ConsTSPorCobrarPagarRapida( _
                    ByVal PorCobrar As Boolean, _
                    ByVal FechaVenci As Date, _
                    ByVal CodForma As String, _
                    ByVal BandVacaciones As Boolean, _
                    ByVal CodPCGrupo As String, _
                    ByVal Intervalo As Integer) As Variant

    Dim objCond As Condicion
    Dim sql As String, cond As String, f1 As String
    Dim rs As Recordset, numMoneda As Integer
    
    Set objCond = gobjMain.objCondicion
    cond = " AND FechaVenci <= " & FechaYMD(FechaVenci, gobjMain.EmpresaActual.TipoDB)
    numMoneda = Me.GNOpcion.IndiceMoneda(objCond.CodMoneda)
    
        sql = " select Id,pc.CodProvCli,"
        sql = sql & " pc.Nombre, TransID,"
        sql = sql & " CodTrans, Trans,"
        sql = sql & " CodForma, NumLetra,"
        sql = sql & " Doc, Valor" & numMoneda & "  AS Valor,"
        sql = sql & " VCancelado" & numMoneda & " AS VCancelado,"
        sql = sql & " Valor" & numMoneda & " - VCancelado" & numMoneda & " AS Saldo,"
        sql = sql & " CodMoneda, Cancela,"
        sql = sql & " Cotizacion" & numMoneda & " AS Cotizacion,"
        sql = sql & " FechaEmision, Plazo,"
        sql = sql & " FechaVenci, CodVendedor,"
        sql = sql & " nomVendedor"
        sql = sql & " From vwConsPCPorCobrarPagar vw"
        sql = sql & " inner join pcprovcli pc "
        sql = sql & " inner join pcgrupo" & Me.GNOpcion.ObtenerValor("FormaCobroCli") + 1 & " pcg"
        sql = sql & " on pc.idgrupo" & Me.GNOpcion.ObtenerValor("FormaCobroCli") + 1 & "="
        sql = sql & " pcg.idgrupo" & Me.GNOpcion.ObtenerValor("FormaCobroCli") + 1
        sql = sql & " on vw.codprovcli=pc.codprovcli"
        sql = sql & " where (CodForma IN (" & CodForma & ")) AND"
        sql = sql & IIf(PorCobrar, " (PorCobrar=1)", " (PorCobrar=0)")
        sql = sql & " AND (Valor" & numMoneda & " - VCancelado" & numMoneda & " >0)"
        If BandVacaciones And DatePart("m", FechaVenci) <> 12 Then
            sql = sql & " AND FechaVenci <= " & FechaYMD(DateAdd("d", Intervalo * 4, FechaVenci), gobjMain.EmpresaActual.TipoDB)
            If Len(CodPCGrupo) > 0 Then
                sql = sql & cond & " and pcg.codgrupo" & Me.GNOpcion.ObtenerValor("FormaCobroCli") + 1 & " <>'" & CodPCGrupo & "'"
            End If
        
        Else
            sql = sql & " AND FechaVenci <= " & FechaYMD(DateAdd("d", 4 * Intervalo, FechaVenci), gobjMain.EmpresaActual.TipoDB)
            If DatePart("m", FechaVenci) <> 12 Then
                If Len(CodPCGrupo) > 0 Then
                    sql = sql & " and pcg.codgrupo" & Me.GNOpcion.ObtenerValor("FormaCobroCli") + 1 & " ='" & CodPCGrupo & "'"
                End If
            Else
                If Len(CodPCGrupo) > 0 Then
                    sql = sql & " and pcg.codgrupo" & Me.GNOpcion.ObtenerValor("FormaCobroCli") + 1 & "<>'" & CodPCGrupo & "'"
                End If
            End If
        End If
        sql = sql & " ORDER BY pc.Nombre, FechaVenci"


    Set rs = Me.OpenRecordset(sql)
    Set ConsTSPorCobrarPagarRapida = rs
    Set rs = Nothing
    Set objCond = Nothing

End Function

Public Function ConsIVMovCCCons() As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim numReg As Long, condNum As String
    cond = " WHERE   (gc.Estado IN (1,2,4))"
    condNum = ""
    'para filtrado por cliente
    If Len(gobjCond.CodPC1) > 0 Or Len(gobjCond.CodPC2) > 0 Then
        If Len(gobjCond.CodPC1) > 0 And Len(gobjCond.CodPC2) = 0 Then
            cond = cond & " AND (pc.codprovcli BETWEEN '" & gobjCond.CodPC1 & " 'AND '" & gobjCond.CodPC1 & "')"
        ElseIf Len(gobjCond.CodPC1) = 0 And Len(gobjCond.CodPC2) > 0 Then
            cond = cond & " AND (pc.codprovcli BETWEEN '" & gobjCond.CodPC2 & " 'AND '" & gobjCond.CodPC2 & "')"
        ElseIf Len(gobjCond.CodPC1) > 0 And Len(gobjCond.CodPC2) > 0 Then
            cond = cond & " AND (pc.codprovcli BETWEEN '" & gobjCond.CodPC1 & " 'AND '" & gobjCond.CodPC2 & "')"
        End If
    End If
    'para filtrado por centro de costo
    If Len(gobjCond.CodCentro1) > 0 Or Len(gobjCond.CodCentro2) > 0 Then
        If Len(gobjCond.CodCentro1) > 0 And Len(gobjCond.CodCentro2) = 0 Then
            cond = cond & " AND (CodCentro BETWEEN '" & gobjCond.CodCentro1 & "'AND '" & gobjCond.CodCentro1 & "')"
        ElseIf Len(gobjCond.CodCentro1) = 0 And Len(gobjCond.CodCentro2) > 0 Then
            cond = cond & " AND (CodCentro BETWEEN '" & gobjCond.CodCentro2 & "'AND '" & gobjCond.CodCentro2 & "')"
        ElseIf Len(gobjCond.CodCentro1) > 0 And Len(gobjCond.CodCentro2) > 0 Then
            cond = cond & " AND (CodCentro BETWEEN '" & gobjCond.CodCentro1 & "'AND '" & gobjCond.CodCentro2 & "')"
        End If
    End If
    'para filtrado por item
    If Len(gobjCond.CodItem1) > 0 Or Len(gobjCond.CodItem2) > 0 Then
        If Len(gobjCond.CodItem1) > 0 And Len(gobjCond.CodItem2) = 0 Then
            cond = cond & " AND (Codinventario BETWEEN '" & gobjCond.CodItem1 & "'AND '" & gobjCond.CodItem1 & "')"
        ElseIf Len(gobjCond.CodItem1) = 0 And Len(gobjCond.CodItem2) > 0 Then
            cond = cond & " AND (Codinventario BETWEEN '" & gobjCond.CodItem2 & "'AND '" & gobjCond.CodItem2 & "')"
        ElseIf Len(gobjCond.CodItem1) > 0 And Len(gobjCond.CodItem2) > 0 Then
            cond = cond & " AND (Codinventario BETWEEN '" & gobjCond.CodItem1 & "'AND '" & gobjCond.CodItem2 & "')"
        End If
    End If
'    cond = cond & " and (gc.FechaTrans >" & FechaYMD(gobjCond.fecha1, gobjMain.EmpresaActual.TipoDB) & ")"
    'para filtrado por numero de transaccion
        If gobjCond.NumTrans1 <> 0 Or gobjCond.NumTrans2 <> 0 Then
        If gobjCond.NumTrans1 <> 0 And gobjCond.NumTrans2 = 0 Then
            condNum = condNum & " AND (gc.Numtrans BETWEEN '" & gobjCond.NumTrans1 & "'AND '" & gobjCond.NumTrans1 & "')"
        ElseIf gobjCond.NumTrans1 = 0 And gobjCond.NumTrans2 <> 0 Then
            condNum = condNum & " AND (gc.Numtrans BETWEEN '" & gobjCond.NumTrans2 & "'AND '" & gobjCond.NumTrans2 & "')"
        ElseIf gobjCond.NumTrans1 > 0 And gobjCond.NumTrans2 > 0 Then
            condNum = condNum & " AND (gc.Numtrans BETWEEN '" & gobjCond.NumTrans1 & "'AND '" & gobjCond.NumTrans2 & "')"
        End If
    End If
'---------- Listado de suma de Cantidad y Costo por items en Presupuesto
        VerificaExistenciaTablaTemporal 1
        sql = " SELECT gc.transid, gc.fechaTrans, gc.Codtrans+' '+CONVERT(varchar, gc.Numtrans) as TransPresup,"
        sql = sql & " pc.nombre, gcc.codcentro, gcc.Descripcion AS DescCentro, ivk.IdInventario,"
        sql = sql & " Sum(ivk.Cantidad) AS SumaCantPre "
        sql = sql & " Into t1 "
        sql = sql & " From (GNCentroCosto gcc RIGHT JOIN GNComprobante gc ON gcc.IdCentro = gc.IdCentro)"
        sql = sql & " inner join pcprovcli pc on gc.IdClienteRef=pc.idprovcli"
        sql = sql & " INNER JOIN IVKardex ivk"
        sql = sql & " INNER JOIN IVInventario iv"
        sql = sql & " ON ivk.idinventario= iv.idinventario"
        sql = sql & " ON gc.TransID = ivk.TransID " & cond & condNum
        sql = sql & " AND (gc.CodTrans ='" & gobjCond.CodTrans & "')"
        sql = sql & " and (gc.FechaTrans Between " & FechaYMD(gobjCond.fecha1, gobjMain.EmpresaActual.TipoDB)
        sql = sql & " and  " & FechaYMD(gobjCond.fecha2, gobjMain.EmpresaActual.TipoDB) & ")"
        sql = sql & " GROUP BY gc.IdCentro, ivk.IdInventario, gcc.Descripcion, gc.codtrans, gc.Numtrans, gcc.codcentro, pc.nombre, gc.transid, gc.fechaTrans"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        VerificaExistenciaTablaTemporal 2
        '---------- Listado de suma de Cantidad y Costos por items en Consumos
        sql = "  SELECT gc.IdTransFuente,"
        sql = sql & "  ivk.IdInventario,"
        sql = sql & " Sum(ivk.Cantidad) AS SumaCant "
        sql = sql & " INTO t2"
        sql = sql & "  From (GNCentroCosto gcc RIGHT JOIN GNComprobante gc ON gcc.IdCentro = gc.IdCentro)"
        sql = sql & " inner join pcprovcli pc on gc.IdClienteRef=pc.idprovcli"
        sql = sql & " INNER JOIN IVKardex ivk"
        sql = sql & " INNER JOIN IVInventario iv"
        sql = sql & " ON ivk.idinventario= iv.idinventario"
        sql = sql & " ON gc.TransID = ivk.TransID " & cond
        sql = sql & " and (gc.CodTrans IN (SELECT CodTrans FROM GNTrans WHERE VerificaLimiteCon='" & gobjCond.CodTrans & "'))"
        sql = sql & " AND (gc.CodTrans <> '" & gobjCond.CodTrans & "M')"
        sql = sql & "  GROUP BY ivk.IdInventario, gc.IdTransFuente"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        VerificaExistenciaTablaTemporal 3
        '---------- Listado de suma de Cantidad  y Costos en Modificaciones de Presupuesto
        sql = "  SELECT  gc.IdTransFuente,"
        sql = sql & "  ivk.IdInventario,"
        sql = sql & "   sum(ivk.Cantidad) AS SumaCantPre "
        sql = sql & "  INTO t3"
        sql = sql & "  From (GNCentroCosto gcc RIGHT JOIN GNComprobante gc ON gcc.IdCentro = gc.IdCentro)"
        sql = sql & "  inner join pcprovcli pc on gc.IdClienteRef=pc.idprovcli"
        sql = sql & "  INNER JOIN IVKardex ivk"
        sql = sql & "  INNER JOIN IVInventario iv"
        sql = sql & "  ON ivk.idinventario= iv.idinventario"
        sql = sql & "  ON gc.TransID = ivk.TransID" & cond
        sql = sql & " AND (gc.CodTrans = '" & gobjCond.CodTrans & "M')"
        sql = sql & " GROUP BY ivk.IdInventario, gc.IdTransFuente"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        VerificaExistenciaTablaTemporal 4
        '--saldo de consumos
        sql = "  SELECT gc.IdTransFuente, ivk.IdInventario,gc.fechaTrans,"
        sql = sql & "   sum(ABS(ivk.Cantidad))*-1 AS TotalConsumo"
        sql = sql & "  INTO t4"
        sql = sql & "   From (GNCentroCosto gcc RIGHT JOIN GNComprobante gc ON gcc.IdCentro = gc.IdCentro)"
        sql = sql & "  inner join pcprovcli pc on gc.IdClienteRef=pc.idprovcli"
        sql = sql & "  INNER JOIN IVKardex ivk"
        sql = sql & "  INNER JOIN IVInventario iv"
        sql = sql & "  ON ivk.idinventario= iv.idinventario"
        sql = sql & "  ON gc.TransID = ivk.TransID" & cond
        sql = sql & "  and (gc.CodTrans IN (SELECT CodTrans FROM GNTrans WHERE VerificaLimiteCon='" & gobjCond.CodTrans & "'))"
        sql = sql & "   GROUP by gc.IdTransFuente, ivk.IdInventario,gc.fechaTrans"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        VerificaExistenciaTablaTemporal 5
        sql = " select   IdTransFuente,IdInventario, sum(abs(totalConsumo))* -1 as totalConsumido"
        'sql = sql & " case when sum(totalConsumo)>0 then sum(totalConsumo)*-1 else sum(totalConsumo) end as totalConsumido"
        sql = sql & "  INTO t5"
        sql = sql & "   From t4"
        sql = sql & "   group by IdTransFuente,IdInventario"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        '----------- une tabla 4 y 5
        VerificaExistenciaTablaTemporal 6
        sql = "  SELECT t4.IdTransFuente, t4.IdInventario,t4.fechaTrans,"
        sql = sql & "   t4. TotalConsumo, t5.totalConsumido"
        sql = sql & "  INTO t6"
        sql = sql & "   From t4 inner join t5"
        sql = sql & "   on t4.IdTransFuente=t5.IdTransFuente and t4.IdInventario=t5.IdInventario"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        '---------- Combina las tres tablas temporales para comparar
        'VerificaExistenciaTablaTemporal 6
        sql = " SELECT distinct t1.codcentro, t1.DescCentro, isnull(t1.nombre,0) as PCNombre,"
        sql = sql & "    t1.TransPresup, t1.fechaTrans, iv.CodInventario, iv.Descripcion,"
        sql = sql & "   isnull(t1.SumaCantPre, 0) * -1 As Presupuesto,"
        sql = sql & "   isnull(t3.SumaCantPre, 0) * -1 AS PreMod,"
        sql = sql & "    isnull(t2.SumaCant, 0) As Consumo,"
        sql = sql & "   (isnull(t1.SumaCantPre, 0) * -1) AS TotalPresup "
        sql = sql & "  ,isnull(t6.totalConsumido,0) as TotalConsum, "
        sql = sql & "    (isnull(t1.SumaCantPre, 0) * -1)+ isnull(t6.totalConsumido,0) as saldo "
        sql = sql & "   From IVInventario iv"
        sql = sql & "   INNER JOIN t3"
        sql = sql & "   right join  ( t1 left join t6 on t1.transid=t6.IdTransFuente and t6.IdInventario= t1.IdInventario)"
        sql = sql & "   LEFT join t2"
        sql = sql & "   on t1.transid=t2.IdTransFuente and t1.IdInventario= t2.IdInventario"
        sql = sql & "   on t1.transid=t3.IdTransFuente and t1.IdInventario= t3.IdInventario"
        sql = sql & "   ON (iv.IdInventario=t1.IdInventario )"
        sql = sql & " where iv.bandservicio=0 "
        If Not gobjCond.IncluirCero Then
            sql = sql & " and (isnull(t1.SumaCantPre, 0) * -1)+ isnull(t6.totalConsumido,0)  <> 0"
        End If
        sql = sql & "   ORDER BY pc.PCNombre,t1.codcentro,t1.DescCentro,t1.fechaTrans, iv.CodInventario"
    Set rs = Me.OpenRecordset(sql)
   Set ConsIVMovCCRes = rs
    Set rs = Nothing
    VerificaExistenciaTablaTemporal 1
    VerificaExistenciaTablaTemporal 2
    VerificaExistenciaTablaTemporal 3
    VerificaExistenciaTablaTemporal 4
    VerificaExistenciaTablaTemporal 5
    VerificaExistenciaTablaTemporal 6
End Function

'AUC 21/10/2005 para verificar que las formas de cobro que grabo pertenecen al cliente seleccionado
Public Function VerificaPcGrupo(ByRef CodForma, CodGrupo As String, NumGrupo As Integer) As Boolean
    Dim sql As String, s As String
    Dim rs As Recordset
        sql = "SELECT CodForma"
          sql = sql & " From TSFormaCobroPago, vwPCProvCli, PCGrupo" & NumGrupo & _
          " Where vwPCProvCli.codGrupo" & NumGrupo & "= PCGrupo" & NumGrupo & ".codGrupo" & NumGrupo & _
          " AND tsformacobropago.codforma =  '" & CodForma & "'" & _
          " AND  tsformacobropago.NotaCredito like  '" & "%" & CodGrupo & "%" & "'" & _
          " GROUP BY tsformacobropago.codforma "
    Set rs = Me.OpenRecordset(sql)
        If rs.RecordCount = 0 Then
           VerificaPcGrupo = False
        Else
           VerificaPcGrupo = True
        End If
  rs.Close
    Set rs = Nothing
End Function


Public Function ConsPCSaldoFormaCobroFiltro(ByVal BandProveedor As Boolean, _
                            ByVal BandCliente As Boolean, LogAccion As Boolean, formas As String) As Variant
        Dim sql As String, rs As Recordset, numReg As Long
        
        sql = "SELECT"
        sql = sql & " pck.IdProvCli,"
        sql = sql & " nullif(Sum(pck.Debe/gc.Cotizacion" & gobjCond.numMoneda + 1 & "),0) AS Debe,"
        sql = sql & " nullif(Sum(pck.Haber/gc.Cotizacion" & gobjCond.numMoneda + 1 & "),0) AS Haber,"
        sql = sql & "  nullif(Sum(pck.Debe/gc.Cotizacion" & gobjCond.numMoneda + 1 & ") - "
        sql = sql & " Sum(pck.Haber/gc.Cotizacion" & gobjCond.numMoneda + 1 & "),0) As Saldo"
        sql = sql & " INTO t1"
        sql = sql & " From"
        sql = sql & " GNTrans gt  INNER JOIN"
        sql = sql & " (TSFormaCobroPago TSCP INNER JOIN"
        sql = sql & " (GNComprobante gc INNER JOIN PCKardex pck"
        sql = sql & " ON gc.TransID = pck.TransID)"
        sql = sql & " ON    TSCP.IdForma = pck.IdForma)"
        sql = sql & " ON gt.CodTrans = gc.CodTrans"
        sql = sql & " Where"
        sql = sql & " (gt.AfectaSaldoPC = 1)"
        sql = sql & " AND (gc.Estado <> 3)"
        sql = sql & " AND (gc.FechaTrans <='" & gobjCond.FechaCorte & "')"
        'sql = sql & " AND (TSCP.ConsiderarComoEfectivo = " & gobjCond.TipoSaldo & ")"
        sql = sql & " and CodForma in(" & formas & ")"
        sql = sql & " GROUP BY pck.IdProvCli"

        VerificaExistenciaTablaTemporal 1
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        
            '/*---------------- Incluir todos los Proveedores/Clientes y combinar con PCGrupo ----------------*/
        sql = "SELECT"
        sql = sql & " pc.CodProvCli,"
        sql = sql & " pc.Nombre,"
        sql = sql & " t1.Debe,"
        sql = sql & " t1.Haber,"
        sql = sql & " t1.Saldo,"
        sql = sql & " g1.CodGrupo1,"
        sql = sql & " g2.CodGrupo2,"
        sql = sql & " g3.CodGrupo3"
        sql = sql & " From"
        sql = sql & " PCGrupo3 g3 RIGHT JOIN"
        sql = sql & "( PCGrupo2 g2 RIGHT JOIN"
        sql = sql & " (PCGrupo1 g1 RIGHT JOIN"
        sql = sql & " (PCProvCli pc LEFT JOIN t1"
        sql = sql & " ON pc.IdProvCli = t1.IdProvCli)"
        sql = sql & " ON g1.IdGrupo1 = pc.IdGrupo1)"
        sql = sql & " ON g2.IdGrupo2 = pc.IdGrupo2)"
        sql = sql & " ON g3.IdGrupo3 = pc.IdGrupo3"
        sql = sql & " Where"
        sql = sql & " ( (pc.BandProveedor = " & CadenaBool(BandProveedor, TipoDB) & ") "
        sql = sql & " OR (pc.BandCliente = " & CadenaBool(BandCliente, TipoDB) & ")  )"
        sql = sql & " AND ((pc.CodProvCli BETWEEN '" & gobjCond.CodPC1 & "' AND '" & gobjCond.CodPC2 & "') OR " & gobjCond.NumPCGrupo & "<>0)"
        
'        sql = sql & " AND (   CASE " & gobjCond.NumPCGrupo
'        sql = sql & " WHEN 1 THEN g1.CodGrupo1"
'        sql = sql & " WHEN 2 THEN g2.CodGrupo2"
'        sql = sql & " WHEN 3 THEN g3.CodGrupo3"
'        sql = sql & " ELSE null"
'        sql = sql & " END = " & gobjCond.CodPCGrupo & " OR " & gobjCond.CodPCGrupo & " ='' OR " & gobjCond.NumPCGrupo & " = 0)"
'        sql = sql & " AND ( (CASE WHEN " & CadenaBool(gobjCond.IncluirCero, TipoDB) & " = 1  THEN 1 ELSE  t1.Saldo END) <>0)"
        sql = sql & " ORDER BY pc.CodProvCli"
        
            
    Set rs = Me.OpenRecordset(sql)
    UltimoRecordset rs

    Set ConsPCSaldoFormaCobroFiltro = rs
    Set rs = Nothing
    If LogAccion Then
        Me.GrabaGNLogAccion "CONSULTA", "Consulta Saldos ProvCli con FormaCobro filtros" & gobjCond.FechaCorte, "PC"
    End If
    
End Function

'jeaa 10/08/2006 para que se carge de CAURDO AL SUSTENTO Y AL TIPO DE SECUENCIAL
Public Function ListaAnexoTipoComprobanteValidado(BandSoloValida As Boolean, BandRS As Boolean, CodSustento As String, codSecuencial As String) As Variant
    
    Dim sql As String, rs As Recordset
    sql = "SELECT CodComprobante,  Descripcion, SecuencialValidos,Sustentos FROM Anexo_Comprobantes"
    sql = sql & " where sustentos like ('%" & CodSustento & "%')"
    sql = sql & " AND SecuencialValidos like ('%" & codSecuencial & "%')"
    sql = sql & " ORDER BY CodComprobante"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaAnexoTipoComprobanteValidado = rs
    Else
        ListaAnexoTipoComprobanteValidado = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ConsSoloComprasAnexos() As Variant
    Dim pck As PCKardex, pcd As PCDocAsignado
    Dim objGnComp As GNComprobante, objGnCompDocOriginal As GNComprobante
    Dim sql As String, cond As String, CadenaValores As String
    Dim Recargo As String 'CadenaAgrupa  As String
    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
    Dim from As String, numReg As Long
    Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
    Dim Servicios As String, Bienes As String, RowRet As Long
    Const COL_BASESER = 15
    'segunda parte de la consulta: carga los valores de  Detalles de Anexos
    Const COL_FECHA = 2
    Const COL_CODCREDTRIB = 7
    Const COL_TRANSID = 1
    Const COL_TRANSRET = 5
    Dim condServ As String
    Dim condBien As String
    
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   
    With gobjCond
        
            cond = " AND (GNC.FechaTrans  BETWEEN " & _
                    FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                    FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            
            
            VerificaExistenciaTabla 0
            
            sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as TotalDescuento Into tmp0 " & _
                    "From IvRecargo ivR inner join " & _
                        "IvKardexRecargo ivkR Inner join " & _
                            "GnComprobante gNc  " & _
                        "On ivkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = IvkR.IdRecargo "
            sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.CodForma) & ") " & cond & _
                    " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")" & _
                  "Group by IvkR.TransID"
                  
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            VerificaExistenciaTabla 1
            
            sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as montoIva Into tmp1 " & _
                    "From IvRecargo ivR inner join " & _
                        "IvKardexRecargo ivkR Inner join " & _
                            "GnComprobante gNc  " & _
                        "On ivkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = IvkR.IdRecargo "
            sql = sql & " WHERE gNc.Estado <> 3 "
            sql = sql & " AND ivr.CodRecargo = ('" & gobjMain.EmpresaActual.GNOpcion.ObtenerValor("RecDescParaIVA") & "') " & cond & _
                    " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")" & _
                  "Group by IvkR.TransID"
            
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            '--datos de la compra
            sql = " Select  distinct GNC.TransID, "
            sql = sql & " Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as Trans,"
            sql = sql & " Ane.FechaAnexos , gnc.FechaTrans, "
            sql = sql & " atd.CodTipoDocumento,  pcprovcli.ruc,  "
            sql = sql & " ane.NumSerieEstablecimiento ,ane.NumSeriePunto, Ane.NumSecuencial, "
            sql = sql & " Ane.NumAutSRI, ane.FechaCaducidad, "
            sql = sql & " Ane.CodCredTrib, Ane.CodTipoComp, "
            sql = sql & " Case Ane.BandDevolucion WHEN 0 THEN 'N' ELSE 'S' END AS BandDev, "
            sql = sql & " Case vw.CostoTotalBase0 When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBase0 + (vw.CostoTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))) ) end As Valor0, "
            sql = sql & " Case vw.CostoTotalBaseIVA When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseIVA + (vw.CostoTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) end AS Valor12, "
            sql = sql & " montoIva"
            sql = sql & " from    (( tmp0 Right join gncomprobante Gnc "
            sql = sql & " inner join gntrans gnt"
            sql = sql & " inner join GNTransRecargo gntr"
            sql = sql & " inner join ivrecargo ivr"
            sql = sql & " on ivr.idrecargo=gntr.idrecargo"
            sql = sql & " on gnt.codtrans= gntr.codtrans"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " inner join vwConsSUMIVKardexIVA vw ON Gnc.TransID = vw.transid "
            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " left join tmp1 on tmp1.TransID = Gnc.TransID"
            sql = sql & " inner join Anexos Ane on Gnc.TransID = Ane.Transid)"
            sql = sql & " right join pcprovcli  "
            sql = sql & " RIGhT JOIN Anexo_TipoDocumento ATD on  pcprovcli.IdTipoDocumento=atd.Id "
            sql = sql & " on gnc.IdProveedorRef=pcprovcli.idprovcli"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " and GNC.Estado<>3 " & cond
            sql = sql & " order by GNC.FechaTrans"
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsSoloComprasAnexos = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Solo Compras para Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
End Function




'Para Kardex de items
Public Function ConsIVKardexCli(ByVal CodCli As String, ByVal codItem As String, ByVal CodTrans As String) As Variant
    Dim sql As String, cond As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsIVKardexPorFecha")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("prmCodBodega") = gobjCond.CodBodega1
    qdef.Parameters("CodItem1") = IIf(Len(gobjCond.CodItem1) = 0, "!", gobjCond.CodItem1)
    qdef.Parameters("CodItem2") = IIf(Len(gobjCond.CodItem2) = 0, String$(20, "z"), gobjCond.CodItem2)
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient

   
        sql = " SELECT  top " & gobjCond.Nivel
        sql = sql & " gc.FechaTrans,gc.CodTrans + CONVERT(varchar,gc.NumTrans) AS Trans, "
        sql = sql & " CASE WHEN ivk.Cantidad>0 THEN null ELSE ivk.Cantidad*-1 END AS Egreso, "
        sql = sql & " precioRealTotal/Cantidad/Cotizacion" & gobjCond.numMoneda & " AS PUR, "
        sql = sql & " ivk.NumeroPrecio ,ivk.descuento*100"
        sql = sql & " FROM IVInventario iv INNER JOIN (GNComprobante gc inner join pcprovcli pc "
        sql = sql & " on gc.IdClienteRef=pc.idprovcli"
        sql = sql & " INNER JOIN (IVKardex ivk"
        sql = sql & " INNER JOIN IVBodega ivb"
        sql = sql & " ON ivk.IdBodega=ivb.IdBodega)"
        sql = sql & " ON gc.TransID = ivk.TransID)"
        sql = sql & " ON iv.IdInventario = ivk.IdInventario"
        sql = sql & " WHERE  (iv.CodInventario = '" & codItem & " ' )"
        sql = sql & " AND (pc.CodProvcli = '" & CodCli & "' )"
        If Len(CodTrans) > 0 Then
            sql = sql & " AND gc.CodTrans  in (" & CodTrans & ") "
        End If
        
        sql = sql & " AND (gc.Estado<>3) "
        
        sql = sql & " order by gc.transid desc"
        
        rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    
    
    UltimoRecordset rs
#End If
    
    Set ConsIVKardexCli = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Kardex inv. x Cliente" & gobjCond.fecha1 & "-" & gobjCond.fecha2, "IV"
End Function

'AUC 31/08/06 elimina las relaciones de la tabla ivmateria
Public Sub EliminaRelaciones(ByVal sql As String)
        mcnEmpresa.Execute sql
End Sub

Public Function RecuperaMEMTransID(ByVal CodCentro As String, ByRef CodT As String, ByRef NumT As Long) As Long
    Dim sql As String, rs As Recordset, VerificaTrans As String
    sql = "SELECT TRANSID,CODTRANS,NUMTRANS FROM GNCOMPROBANTE gnc"
    sql = sql & " inner join gncentrocosto gncc on gnc.idcentro=gncc.idcentro"
    sql = sql & " WHERE estado <>3 and CODTRANS in ('FC','FCCON','OTRF')  "
    sql = sql & " and codcentro='" & CodCentro & "'"
    Set rs = Me.OpenRecordset(sql)
    'If Not IsNull(rs!sumaCant) Then cantGrabada = rs!sumaCant
    If rs.RecordCount > 0 Then
        CodT = rs!CodTrans
        NumT = rs!NumTrans
        RecuperaMEMTransID = rs!transid
    End If
    rs.Close
    Set rs = Nothing
End Function

'Agregado Alex Sept/2002
Public Function ListaCiudad() As Variant
    Dim v(1, 3) As Variant
    v(0, 0) = "1"
    v(1, 0) = "QUITO"
    v(0, 1) = "2"
    v(1, 1) = "GUAYAQUIL"
    v(0, 2) = "3"
    v(1, 2) = "CUENCA"
    v(0, 3) = "4"
    v(1, 3) = "OTROS"
    ListaCiudad = v
End Function

'jeaa 07/01/2008

Public Function CreaGNGasto() As gnGasto
    Dim obj As gnGasto
    Set obj = New gnGasto
    Set obj.Empresa = Me
    Set CreaGNGasto = obj
    Set obj = Nothing
End Function


Public Function RecuperaGNGasto(key As Variant) As gnGasto
    Dim obj As gnGasto
    Set obj = New gnGasto
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaGNGasto = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function


Public Function ListaGNGasto(BandRS As Boolean, bandResumido As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodGasto,Nombre FROM GNGasto "
    If bandResumido Then
        sql = "SELECT CodGasto,Nombre FROM GNGasto "
    Else
        sql = "SELECT idGasto,CodGasto,Nombre FROM GNGasto "
    End If
    sql = sql & " ORDER BY CodGasto"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaGNGasto = rs
    Else
        ListaGNGasto = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


'jeaa 29/11/2007
Public Function ListaGNGastoParaFlexGrid() As String
    Dim sql As String, cad As String, rs As Recordset
    
    sql = "SELECT CodGasto, Nombre FROM GNGasto WHERE bandvalida=1 "
    sql = sql & " ORDER BY CodGasto"
    Set rs = Me.OpenRecordset(sql)

    'Pero por ahora uso lo siguiente para controlar cuentas de total y de movimiento
#If DAOLIB Then
    cad = "|" & GetStringDAO(rs, 21 + (20 + 80 + 2))        'Código+'*'=21, Space+NombreCuenta+'[]'=20+80+2
#Else
    If Not rs.EOF Then cad = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    
    rs.Close
    Set rs = Nothing
    
    ListaGNGastoParaFlexGrid = cad
End Function


Public Function ConsTSSaldo1() As Variant
    Dim sql As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsTSSaldo")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodBanco1") = IIf(Len(gobjCond.CodBanco1) = 0, "!", gobjCond.CodBanco1)
    qdef.Parameters("CodBanco2") = IIf(Len(gobjCond.CodBanco2) = 0, String$(20, "z"), gobjCond.CodBanco2)
    qdef.Parameters("FechaCorte") = gobjCond.FechaCorte
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    sql = "spConsTSSaldo1 " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodBanco1 & "','" & _
                gobjCond.CodBanco2 & "'," & _
                FechaYMD(gobjCond.FechaCorte, TipoDB)
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    Set ConsTSSaldo1 = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons. Saldo Bancos ", "TS"
End Function

Friend Sub VerificaAnulacionGNComp( _
                ByVal tid As Long, _
                ByVal bandAnulacion As Boolean)
    Dim sql As String, rs As Recordset, s As String
    
    sql = "SELECT gc.CodTrans,gc.NumTrans, gc.Estado " & _
          "FROM  GNComprobante gc " & _
          "WHERE  gc.idtransfuente = " & tid
    If bandAnulacion Then       'Cuando está eliminando no debe ir ésta condición
        sql = sql & " AND (gc.Estado <> " & ESTADO_ANULADO & ") "
    End If
    
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        Do Until rs.EOF
            s = s & "        " & rs.Fields("CodTrans") & " " & _
                                 rs.Fields("NumTrans")
            If rs.Fields("Estado") = ESTADO_ANULADO Then s = s & " (Anulado)"
            s = s & vbCr
            rs.MoveNext
        Loop
        If Len(s) > 0 Then
            s = Left$(s, Len(s) - 1)
            If bandAnulacion Then           '*** MAKOTO 11/dic/00 Modificado
                Err.Raise ERR_INVALIDO, "Empresa.CambiaEstadoGNComp", _
                    "No se puede anular la transacción porque tiene transacciones asignadas." & vbCr & _
                    "Primero tendrá que anular ó modificar las siguientes transacciones: " & vbCr & vbCr & s
            Else
                Err.Raise ERR_INVALIDO, "GNComprobante.Eliminar", _
                    "No se puede eliminar la transacción porque tiene transacciones asignadas." & vbCr & _
                    "Primero tendrá que eliminar las siguientes transacciones: " & vbCr & vbCr & s
            End If
        End If
    End If
    rs.Close
    Set rs = Nothing
End Sub


'*** JEAA 13/02/2008 Agregado
Private Sub VerificaRecuperacionGnComp(ByVal tid As Long)
    Dim sql As String, rs As Recordset, s As String
    Dim rs1 As Recordset
    
sql = "SELECT idtransfuente"
sql = sql & " FROM  GNComprobante gc"
sql = sql & " Where   gc.TransID = " & tid
Set rs1 = Me.OpenRecordset(sql)
    
    
    sql = "SELECT gc.CodTrans,gc.NumTrans, gc.Estado " & _
          "FROM  GNComprobante gc " & _
            "Where gc.estado <> 3 and gc.TransId = " & rs1.Fields("idtransfuente") & " "
    sql = sql & " AND (gc.Estado = " & ESTADO_ANULADO & ") "
    
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        Do Until rs.EOF
            s = s & "        " & rs.Fields("CodTrans") & " " & _
                                 rs.Fields("NumTrans")
            If rs.Fields("Estado") = ESTADO_ANULADO Then s = s & " (Anulado)"
            s = s & vbCr
            rs.MoveNext
        Loop
        If Len(s) > 0 Then
            s = Left$(s, Len(s) - 1)
            Err.Raise ERR_INVALIDO, "Empresa.CambiaEstadoGNComp", _
                "No se puede recuperar la transacción porque uno o más de " & _
                "los Transacciones asignados están anuladas." & vbCr & _
                "Primero tendrá que recuperar las siguientes transacciones: " & vbCr & vbCr & s
        End If
    End If
    rs.Close
    Set rs = Nothing
End Sub


Public Function ListaFCVendedorJefe(BandSoloValida As Boolean, BandRS As Boolean) As Variant
'BandRS : True  --> Devuelve Recordset de ADO
'      False --> Devuelve en Array de Variant

    Dim sql As String, rs As Recordset
    
    sql = "SELECT CodVendedor,Nombre FROM FCVendedor "
    sql = sql & "WHERE BandVendedor=1 and BandCobrador=1 "
    If BandSoloValida Then sql = sql & " AND BandValida=" & CadenaBool(True, TipoDB)
    sql = sql & " ORDER BY CodVendedor"

    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaFCVendedorJefe = rs
    Else
        ListaFCVendedorJefe = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ConsANCompras2008() As Variant
    Dim pck As PCKardex, pcd As PCDocAsignado
    Dim objGnComp As GNComprobante, objGnCompDocOriginal As GNComprobante
    Dim sql As String, cond As String, CadenaValores As String
    Dim Recargo As String 'CadenaAgrupa  As String
    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
    Dim from As String, numReg As Long
    Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
    Dim Servicios As String, Bienes As String, RowRet As Long
    Const COL_BASESER = 15
    'segunda parte de la consulta: carga los valores de  Detalles de Anexos
    Const COL_FECHA = 2
    Const COL_CODCREDTRIB = 7
    Const COL_TRANSID = 1
    Const COL_TRANSRET = 5
    Dim condServ As String
    Dim condBien As String
    
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   
    With gobjCond
        
            cond = " AND (GNC.FechaTrans  BETWEEN " & _
                    FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                    FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            
'            If Len(.Usuario1) > 0 Or Len(.Usuario2) > 0 Then
'                   cond = cond & " AND pcprovcli.CodProvCli  BETWEEN  '" & .Usuario1 & "' AND '" & .Usuario2 & "' "
'            End If
            
            VerificaExistenciaTabla 0
            VerificaExistenciaTabla 1
            VerificaExistenciaTabla 2
            VerificaExistenciaTabla 3
            VerificaExistenciaTabla 4
            VerificaExistenciaTabla 5
            VerificaExistenciaTabla 6
            
            sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as TotalDescuento Into tmp0 " & _
                    "From IvRecargo ivR inner join " & _
                        "IvKardexRecargo ivkR Inner join " & _
                            "GnComprobante gNc  " & _
                        "On ivkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = IvkR.IdRecargo "
            sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.CodForma) & ") " & cond & _
                    " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")" & _
                  "Group by IvkR.TransID"
                  
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
                        VerificaExistenciaTablaTemp "t0"
            sql = "Select AfkR.TransID, SUM(AfkR.Valor) as TotalDescuento Into t0 " & _
                    "From IvRecargo ivR inner join " & _
                        "AFKardexRecargo AfkR Inner join " & _
                            "GnComprobante gNc  " & _
                        "On afkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = AfkR.IdRecargo "
            sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.CodForma) & ") " & cond & _
                    " AND GNC.CodTrans IN (" & PreparaCadena(.Usuario1) & ")" & _
                  "Group by afkR.TransID"
            
                  
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg

            
            'jeaa 09/01/2007
            'datos ICE
            sql = " Select Ivkr.TransID, "
            sql = sql & " max(IVK.CostoRealTotal) AS BASEice,"
            sql = sql & " MAX(IVC.CodICE) AS CodICE, max(ivkr.Valor) As ValorICE"
            sql = sql & " Into tmp6"
            sql = sql & " From IvRecargo ivR"
            sql = sql & " inner join IvKardexRecargo ivkR"
            sql = sql & " INNER JOIN IVKARDEX IVK"
            sql = sql & " INNER JOIN IVINVENTARIO IV"
            sql = sql & " INNER JOIN IVRECARGOICE IVC"
            sql = sql & " ON IV.IDICE=IVC.IDICE"
            sql = sql & " ON IVK.IDINVENTARIO=IV.IDINVENTARIO"
            sql = sql & " ON IVKR.TRANSID=IVK.TRANSID"
            sql = sql & " Inner join GnComprobante gNc"
            sql = sql & " On ivkr.TransID = gNc.TransID"
            sql = sql & " On Ivr.IdRecargo = IvkR.IdRecargo"
            sql = sql & " Where gnc.Estado <> 3"
            sql = sql & " AND ivr.CodRecargo IN ('" & gobjMain.EmpresaActual.GNOpcion.ObtenerValor("RecDescParaICE") & "')" & cond
            sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")"
            sql = sql & " Group by IvkR.TransID"
            
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
'--datos de indices
            VerificaExistenciaTabla 3
            sql = " Select  DISTINCT GNC.TransID AS cp_id, GNC_b.TransID AS rtp_id"
            sql = sql & " Into tmp3"
            sql = sql & " From    (gncomprobante GNC Inner join pckardex pck_a ON GNC.TransID = pck_a.TransID ) INNER JOIN"
            sql = sql & "  (gncomprobante GNC_b Inner join pckardex pck_B ON GNC_b.TransID = pck_B.TransID )"
            sql = sql & " ON  PCK_A.ID = PCK_B.IDASIGNADO"
'            sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            If Len(gobjMain.objCondicion.Usuario1) > 0 Then
                sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(gobjMain.objCondicion.CodTrans) + "," + PreparaCadena(gobjMain.objCondicion.Usuario1) & ")"
            Else
                sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(gobjMain.objCondicion.CodTrans) + "," + PreparaCadena(gobjMain.objCondicion.Usuario1) & ")"
            End If

            sql = sql & " AND GNC_b.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion1) & ")"
            sql = sql & " AND (GNC.FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = sql & " and GNC.Estado<>3 and GNC_b.estado<>3 "
            
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            '--datos de la compra
            sql = " Select  GNC.TransID, Ane.FechaAnexos, GNC.FechaTrans, pcprovcli.ruc,"
            sql = sql & " GNC.Nombre, Ane.CodCredTrib, Ane.CodTipoComp, Ane.NumAutSRI,"
            sql = sql & " case when SUBSTRING(gnt.OPCION,31,1)='N'THEN gnt.NumSerieEstablecimiento else Ane.NumSerie end as NumSerie, Ane.NumSecuencial, GNC.Descripcion,"
            sql = sql & " Case Ane.BandDevolucion WHEN 0 THEN 'N' ELSE 'S' END AS BandDev,"
            sql = sql & " Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as Trans,"
            sql = sql & " Gnc.CodTrans as Transa, Gnc.NumTrans as NumTransa,"
            sql = sql & " Case vw.CostoTotalBase0 When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBase0 + (vw.CostoTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))) ) end As Valor0, "
            sql = sql & " Case vw.CostoTotalBaseIVA When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseIVA + (vw.CostoTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) end AS Valor12, "
            sql = sql & " Case vw.CostoTotal When 0 then 0 else "
            sql = sql & " vw.SignoCompra  * (vw.CostoTotal + (vw.CostoTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))))  End AS CostoTotal,  "
            sql = sql & " ane.NumSerieEstablecimiento ,case when SUBSTRING(gnt.OPCION,31,1)='N'THEN gnt.NumSeriePunto else ane.NumSeriePunto end as NumSeriePunto,ane.FechaCaducidad, "
            sql = sql & " tmp6.BASEice, tmp6.CodICE ,tmp6.ValorICE"
            sql = sql & " Into tmp1"
            sql = sql & " from    (( tmp0 Right join gncomprobante Gnc "
            sql = sql & " inner join gntrans gnt"
            sql = sql & " inner join GNTransRecargo gntr"
            sql = sql & " inner join ivrecargo ivr"
            sql = sql & " on ivr.idrecargo=gntr.idrecargo"
            sql = sql & " on gnt.codtrans= gntr.codtrans"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " left join tmp6 on gnc.transid=tmp6.transid"
            sql = sql & " inner join vwConsSUMIVKardexIVA vw ON Gnc.TransID = vw.transid "
            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " left join Anexos Ane on Gnc.TransID = Ane.Transid)"
            sql = sql & " right join pcprovcli  on gnc.IdProveedorRef=pcprovcli.idprovcli"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " and GNC.Estado<>3 " & cond
            
            sql = sql & " union all "
            
            sql = sql & " Select  GNC.TransID, Ane.FechaAnexos, GNC.FechaTrans, pcprovcli.ruc,"
            sql = sql & " GNC.Nombre, Ane.CodCredTrib, Ane.CodTipoComp, Ane.NumAutSRI,"
            sql = sql & " case when SUBSTRING(gnt.OPCION,31,1)='N'THEN gnt.NumSerieEstablecimiento else Ane.NumSerie end as NumSerie, Ane.NumSecuencial, GNC.Descripcion,"
            sql = sql & " Case Ane.BandDevolucion WHEN 0 THEN 'N' ELSE 'S' END AS BandDev,"
            sql = sql & " Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as Trans,"
            sql = sql & " Gnc.CodTrans as Transa, Gnc.NumTrans as NumTransa,"
            sql = sql & " Case vw.CostoTotalBase0 When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBase0 + (vw.CostoTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))) ) end As Valor0, "
            sql = sql & " Case vw.CostoTotalBaseIVA When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseIVA + (vw.CostoTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) end AS Valor12, "
            sql = sql & " Case vw.CostoTotal When 0 then 0 else "
            sql = sql & " vw.SignoCompra  * (vw.CostoTotal + (vw.CostoTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))))  End AS CostoTotal,  "
            sql = sql & " ane.NumSerieEstablecimiento ,case when SUBSTRING(gnt.OPCION,31,1)='N'THEN gnt.NumSeriePunto else ane.NumSeriePunto end as NumSeriePunto,ane.FechaCaducidad, "
            sql = sql & " 0 as BASEice, '' as CodICE , 0 as ValorICE"
            sql = sql & " from    (( t0 Right join gncomprobante Gnc "
            sql = sql & " inner join gntrans gnt"
            sql = sql & " inner join GNTransRecargo gntr"
            sql = sql & " inner join ivrecargo ivr"
            sql = sql & " on ivr.idrecargo=gntr.idrecargo"
            sql = sql & " on gnt.codtrans= gntr.codtrans"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " left join tmp6 on gnc.transid=tmp6.transid"
            sql = sql & " inner join vwConsSUMAFKardexIVA vw ON Gnc.TransID = vw.transid "
            sql = sql & " ON t0.TransID = Gnc.TransID))"
            sql = sql & " left join Anexos Ane on Gnc.TransID = Ane.Transid"
            sql = sql & " right join pcprovcli  on gnc.IdProveedorRef=pcprovcli.idprovcli"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.Usuario1) & ")"
            sql = sql & " and GNC.Estado<>3 " & cond
            
            
            
            
            VerificaExistenciaTabla 1
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            '-- datos de las retenciones
            
            
            
            ' union de las tres tablas
            ' union de las tres tablas
            sql = " select  DISTINCT  a.Transid,a.FechaAnexos, a.FechaTrans, a.Transa,  a.NumTransa, "
            sql = sql & "a.RUC, a.Nombre, "
            sql = sql & " a.NumSerieEstablecimiento , a.NumSeriePunto, "
            sql = sql & " a.NumSecuencial, a.NumAutSRI, a.FechaCaducidad, "
            sql = sql & "a.CodCredTrib, a.CodTipoComp, "
            sql = sql & " a.Descripcion, a.Valor0, a.Valor12, 0,  a.ValorICE "
                sql = sql & " From tmp1 a  "
            sql = sql & " order by a.CodTipoComp"

            
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANCompras2008 = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Compraspara Anexos 2008" & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 4
End Function

Public Function ConsANRetencionCompras2008() As Variant
    Dim pck As PCKardex, pcd As PCDocAsignado
    Dim objGnComp As GNComprobante, objGnCompDocOriginal As GNComprobante
    Dim sql As String, cond As String, CadenaValores As String
    Dim Recargo As String 'CadenaAgrupa  As String
    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
    Dim from As String, numReg As Long
    Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
    Dim Servicios As String, Bienes As String, RowRet As Long, rsaux As Recordset
    Const COL_BASESER = 15
    'segunda parte de la consulta: carga los valores de  Detalles de Anexos
    Const COL_FECHA = 2
    Const COL_CODCREDTRIB = 7
    Const COL_TRANSID = 1
    Const COL_TRANSRET = 5
    Dim condServ As String
    Dim condBien As String
    
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   
    With gobjCond
        
            cond = " AND (GNC.FechaTrans  BETWEEN " & _
                    FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                    FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            
'            If Len(.Usuario1) > 0 Or Len(.Usuario2) > 0 Then
'                   cond = cond & " AND pcprovcli.CodProvCli  BETWEEN  '" & .Usuario1 & "' AND '" & .Usuario2 & "' "
'            End If
            
            VerificaExistenciaTabla 0
            VerificaExistenciaTabla 1
            VerificaExistenciaTabla 2
            VerificaExistenciaTabla 3
            VerificaExistenciaTabla 4
            VerificaExistenciaTabla 5
            VerificaExistenciaTabla 6
            
            VerificaExistenciaTablaTemp "t0"
            
            sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as TotalDescuento Into tmp0 " & _
                    "From IvRecargo ivR inner join " & _
                        "IvKardexRecargo ivkR Inner join " & _
                            "GnComprobante gNc  " & _
                        "On ivkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = IvkR.IdRecargo "
            sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.CodForma) & ") " & cond & _
                    " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")" & _
                  "Group by IvkR.TransID"
                  
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            VerificaExistenciaTablaTemp "t0"
            sql = "Select AfkR.TransID, SUM(AfkR.Valor) as TotalDescuento Into t0 " & _
                    "From IvRecargo ivR inner join " & _
                        "AFKardexRecargo AfkR Inner join " & _
                            "GnComprobante gNc  " & _
                        "On afkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = AfkR.IdRecargo "
            sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.CodForma) & ") " & cond & _
                    " AND GNC.CodTrans IN (" & PreparaCadena(.Usuario1) & ")" & _
                  "Group by afkR.TransID"
            
                  
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            
            'VerificaExistenciaTablaTemp "t0"
            
            'jeaa 09/01/2007
            'datos ICE
            sql = " Select Ivkr.TransID, "
            sql = sql & " SUM(IVK.CostoRealTotal) AS BASEice,"
            sql = sql & " MAX(IVC.CodICE) AS CodICE, SUM(ivkr.Valor) As ValorICE"
            sql = sql & " Into tmp6"
            sql = sql & " From IvRecargo ivR"
            sql = sql & " inner join IvKardexRecargo ivkR"
            sql = sql & " INNER JOIN IVKARDEX IVK"
            sql = sql & " INNER JOIN IVINVENTARIO IV"
            sql = sql & " INNER JOIN IVRECARGOICE IVC"
            sql = sql & " ON IV.IDICE=IVC.IDICE"
            sql = sql & " ON IVK.IDINVENTARIO=IV.IDINVENTARIO"
            sql = sql & " ON IVKR.TRANSID=IVK.TRANSID"
            sql = sql & " Inner join GnComprobante gNc"
            sql = sql & " On ivkr.TransID = gNc.TransID"
            sql = sql & " On Ivr.IdRecargo = IvkR.IdRecargo"
            sql = sql & " Where gnc.Estado <> 3"
            sql = sql & " AND ivr.CodRecargo IN ('" & gobjMain.EmpresaActual.GNOpcion.ObtenerValor("RecDescParaICE") & "')" & cond
            sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")"
            sql = sql & " Group by IvkR.TransID"
            
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
'--datos de indices
            VerificaExistenciaTabla 3
            sql = " Select  DISTINCT GNC.TransID AS cp_id, GNC_b.TransID AS rtp_id"
            sql = sql & " Into tmp3"
            sql = sql & " From    (gncomprobante GNC Inner join pckardex pck_a ON GNC.TransID = pck_a.TransID ) INNER JOIN"
            sql = sql & "  (gncomprobante GNC_b Inner join pckardex pck_B ON GNC_b.TransID = pck_B.TransID )"
            sql = sql & " ON  PCK_A.ID = PCK_B.IDASIGNADO"
            'sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            If Len(gobjMain.objCondicion.Usuario1) > 0 Then
                sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(gobjMain.objCondicion.CodTrans) + "," + PreparaCadena(gobjMain.objCondicion.Usuario1) & ")"
            Else
                sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(gobjMain.objCondicion.CodTrans) + "," + PreparaCadena(gobjMain.objCondicion.Usuario1) & ")"
            End If
            
            sql = sql & " AND GNC_b.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion1) & ")"
            
            sql = sql & " AND (GNC.FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = sql & " and GNC.Estado<>3 and GNC_b.estado<>3 "
            
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            '--datos de la compra
            sql = " Select  GNC.TransID, GNC.FechaTrans, pcprovcli.ruc,"
            sql = sql & " GNC.Nombre, "
            sql = sql & " GNC.Descripcion,"
            sql = sql & " Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as Trans,"
            sql = sql & " Gnc.CodTrans as Transa, Gnc.NumTrans as NumTransa,"
            sql = sql & " Case vw.CostoTotalBase0 When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBase0 + (vw.CostoTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))) ) end As Valor0, "
            sql = sql & " Case vw.CostoTotalBaseIVA When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseIVA + (vw.CostoTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) end AS Valor12, "
            sql = sql & " Case vw.CostoTotal When 0 then 0 else "
            sql = sql & " vw.SignoCompra  * (vw.CostoTotal + (vw.CostoTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))))  End AS CostoTotal,  "
            sql = sql & " Case vw.CostoTotalBaseNOIVA When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseNOIVA + (vw.CostoTotalBaseNOIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) end AS ValorNOIVA, "
            
            
            sql = sql & " tmp6.BASEice, tmp6.CodICE ,tmp6.ValorICE"
            sql = sql & " Into tmp1"
            sql = sql & " from    (( tmp0 Right join gncomprobante Gnc "
            sql = sql & " inner join gntrans gnt"
            sql = sql & " inner join GNTransRecargo gntr"
            sql = sql & " inner join ivrecargo ivr"
            sql = sql & " on ivr.idrecargo=gntr.idrecargo"
            sql = sql & " on gnt.codtrans= gntr.codtrans"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " left join tmp6 on gnc.transid=tmp6.transid"
            sql = sql & " inner join vwConsSUMIVKardexIVA vw ON Gnc.TransID = vw.transid "
            sql = sql & " ON tmp0.TransID = Gnc.TransID))"
            sql = sql & " right join pcprovcli  on gnc.IdProveedorRef=pcprovcli.idprovcli"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " and GNC.Estado<>3 " & cond
            
            sql = sql & " union all "
            
            sql = sql & " Select  GNC.TransID, GNC.FechaTrans, pcprovcli.ruc,"
            sql = sql & " GNC.Nombre, "
            sql = sql & " GNC.Descripcion,"
            sql = sql & " Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as Trans,"
            sql = sql & " Gnc.CodTrans as Transa, Gnc.NumTrans as NumTransa,"
            sql = sql & " Case vw.CostoTotalBase0 When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBase0 + (vw.CostoTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))) ) end As Valor0, "
            sql = sql & " Case vw.CostoTotalBaseIVA When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseIVA + (vw.CostoTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) end AS Valor12, "
            sql = sql & " Case vw.CostoTotal When 0 then 0 else "
            sql = sql & " vw.SignoCompra  * (vw.CostoTotal + (vw.CostoTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))))  End AS CostoTotal,  0 AS ValorNOIVA, "
            sql = sql & " 0 as BASEice, '0' as CodICE , 0 as ValorICE"
            sql = sql & " from    (( t0 Right join gncomprobante Gnc "
            sql = sql & " inner join gntrans gnt"
            sql = sql & " inner join GNTransRecargo gntr"
            sql = sql & " inner join ivrecargo ivr"
            sql = sql & " on ivr.idrecargo=gntr.idrecargo"
            sql = sql & " on gnt.codtrans= gntr.codtrans"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " left join tmp6 on gnc.transid=tmp6.transid"
            sql = sql & " inner join vwConsSUMAFKardexIVA vw ON Gnc.TransID = vw.transid "
            sql = sql & " ON t0.TransID = Gnc.TransID))"
            sql = sql & " right join pcprovcli  on gnc.IdProveedorRef=pcprovcli.idprovcli"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.Usuario1) & ")"
            sql = sql & " and GNC.Estado<>3 " & cond
            
            
            

        
            
            
            VerificaExistenciaTabla 1
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            
            
            
            '-- datos de las retenciones
            
            
            
            sql = " "
            
            
             'For i = 1 To 3
            For i = 1 To rsaux.RecordCount
             
                sql = sql & " select GNC.TransID, Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as TransRet,"
                sql = sql & " sum(ts_ret.base) as Base, "
                sql = sql & " CASE WHEN BANDIVA=1 THEN  "
                Select Case i
                Case 1
                    sql = sql & " 'IVA_BIE' "
                Case 2
                    sql = sql & "  'IVA_SER'  "
                Case 3
                    sql = sql & "  'IVA_100'  "
                End Select
                
                sql = sql & " ELSE MAX(tsr.CodRetencion) END as Cod,"
                sql = sql & " sum(ts_ret.Debe+ts_ret.Haber) as Valor ,"
                sql = sql & " NumSerieEstablecimiento, NumSeriePunto ,"
                If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosRetencion")) > 0 Then
                    If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosRetencion") > 0 Then
                        sql = sql & " gnc.NumDocRef as NumeroTrans , "
                    Else
                        sql = sql & " gnc.NumTrans as NumeroTrans, "
                    End If
                Else
                    sql = sql & " gnc.NumTrans as NumeroTrans, "
                End If

                If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion")) > 0 Then
                    If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion") > 0 Then
                        sql = sql & " gnc.AutorizacionSRI as NumAutorizacion , "
                    Else
                        sql = sql & " gnt.NumAutorizacion as NumAutorizacion, "
                    End If
                Else
                    sql = sql & " gnt.NumAutorizacion as NumAutorizacion, "
                End If
                sql = sql & " gnc.FechaTRans, BANDIVA, "
                sql = sql & " CASE WHEN BANDIVA=1 THEN  "
                Select Case i
                Case 1
                    sql = sql & " 'IVA_030' "
                Case 2
                    sql = sql & "  'IVA_070'  "
                Case 3
                    sql = sql & "  'IVA_100'  "
                End Select
                sql = sql & " ELSE  ar.codretencion end as CODSRI  "
                

                
                If i = 1 Then
                sql = sql & " into tmp2 "
                End If
                
                
                sql = sql & " from    gntrans gnt"
                sql = sql & " inner join gncomprobante Gnc"
                sql = sql & " inner join (tskardexret ts_ret"
                sql = sql & " inner join tsretencion tsr left join anexos_retencion_ir ar on tsr.idanexo=ar.id on ts_ret.IdRetencion = tsr.IdRetencion )"
                sql = sql & " on GNC.TransID=ts_ret.TransID"
                sql = sql & " on gnc.codtrans=gnt.codtrans"
                sql = sql & " WHERE GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion1) & ")"
                sql = sql & " and GNC.Estado<>3"
                Select Case i
                Case 1
                    sql = sql & " and tsr.CodRetencion in "
                    sql = sql & " (" & PreparaCadena(gobjCond.Bienes) & ")"
                    sql = sql & " and tsr.Porcentaje<>1"
                Case 2
                    sql = sql & " and tsr.CodRetencion in "
                    sql = sql & " (" & PreparaCadena(gobjCond.Servicios) & ")"
                    sql = sql & " and tsr.Porcentaje<>1"
                Case 3
                    sql = sql & " and (tsr.CodRetencion in "
                    sql = sql & " (" & PreparaCadena(gobjCond.Bienes) & ")"
                    sql = sql & " OR tsr.CodRetencion in"
                    sql = sql & " (" & PreparaCadena(gobjCond.Servicios) & "))"
                    sql = sql & " and tsr.Porcentaje=1"
                End Select
                
                sql = sql & " Group By ts_ret.TransID, GNC.TransId, GNC.CodTrans,"
                sql = sql & " GnC.NumTrans, NumSerieEstablecimiento, NumSeriePunto,"
                sql = sql & " gnc.NumDocRef ,  gnc.FechaTrans, ar.codretencion, "
                If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion")) > 0 Then
                    If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion") > 0 Then
                        sql = sql & " gnc.AutorizacionSRI   "
                    Else
                        sql = sql & " gnt.NumAutorizacion  "
                    End If
                Else
                    sql = sql & " gnt.NumAutorizacion  "
                End If
                
                sql = sql & " ,tsr.Porcentaje, BANDIVA"
                sql = sql & " union all "
                
            Next i

            sql = sql & " select  GNC.TransID, Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as TransRet,"
            sql = sql & " (ts_ret.base) as Base,"
            sql = sql & " CASE WHEN BANDIVA=1 THEN  'BIENES'  ELSE (tsr.CodRetencion) END as Cod,"
            sql = sql & " (ts_ret.Debe+ts_ret.Haber) as Valor ,"
            sql = sql & " NumSerieEstablecimiento, NumSeriePunto ,"
                If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosRetencion")) > 0 Then
                    If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosRetencion") > 0 Then
                        sql = sql & " gnc.NumDocRef as NumeroTrans , "
                    Else
                        sql = sql & " gnc.NumTrans as NumeroTrans, "
                    End If
                Else
                    sql = sql & " gnc.NumTrans as NumeroTrans, "
                End If

                If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion")) > 0 Then
                    If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion") > 0 Then
                        sql = sql & " gnc.AutorizacionSRI as NumAutorizacion , "
                    Else
                        sql = sql & " gnt.NumAutorizacion as NumAutorizacion, "
                    End If
                Else
                    sql = sql & " gnt.NumAutorizacion as NumAutorizacion, "
                End If
           
            sql = sql & "  gnc.FechaTRans, BANDIVA , ar.codretencion as CODSRI " '
            sql = sql & " from    gntrans gnt"
            sql = sql & " inner join gncomprobante Gnc"
            sql = sql & " inner join (tskardexret ts_ret"
            sql = sql & " inner join tsretencion tsr   left join anexos_retencion_ir ar on tsr.idanexo=ar.id on ts_ret.IdRetencion = tsr.IdRetencion )" '
            sql = sql & " on GNC.TransID=ts_ret.TransID"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " WHERE GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion1) & ")"
            sql = sql & " and GNC.Estado<>3"
            sql = sql & " and (tsr.CodRetencion NOT in "
            sql = sql & " (" & PreparaCadena(gobjCond.Bienes) & ")"
            sql = sql & " AND tsr.CodRetencion NOT in"
            sql = sql & " (" & PreparaCadena(gobjCond.Servicios) & "))"





            VerificaExistenciaTabla 2
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg

            
            
            
            
            
            
            ' union de las tres tablas
            ' union de las tres tablas
            sql = " select  DISTINCT  "
            sql = sql & " CASE When BandIVA=1 then 'IVA' else 'RENTA' end as IVA, b.CODSRI, b.Cod, "
            sql = sql & "  a.TransID, a.FechaTrans, a.Transa, a.NumTransa, "
            sql = sql & "  a.RUC, a.Nombre, "
            sql = sql & "  b.TransRet as TransRet,"
            sql = sql & "  b.FechaTrans As FechaTrans, "
            sql = sql & "  b.NumSerieEstablecimiento as NumSerieEstablecimiento,"
            sql = sql & "  b.NumSeriePunto NumSeriePunto ,"
            sql = sql & "  b.NumeroTrans as NumTrans,"
            sql = sql & "  b.NumAutorizacion as NumAutorizacion,"
            sql = sql & " b.Base ,  b.valor "
            sql = sql & " From tmp1 a  inner join tmp2 b right join tmp3 c  on b.Transid=c.rtp_id on a.Transid=c.cp_id"
            'sql = sql & " order by  CASE When BandIVA=1 then 'IVA' else 'RENTA' end, b.Cod, a.Transa,  a.NumTransa "

            '--datos de la compra sin retencion
            sql = sql & " union all "
            
            sql = sql & " Select  DISTINCT 'RENTA' as IVA, ane.CodTipoRetencion, ane.CodTipoRetencion, GNC.TransID, "
            sql = sql & " GNC.FechaTrans,  gnc.codtrans, gnc.numtrans, pcprovcli.ruc, GNC.Nombre, "
            sql = sql & " '' as transret, GNC.FechaTrans, "
            sql = sql & " '' as NumSerieEstablecimiento, '' as NumSeriePunto , '' as NumTrans, '' NumAutorizacion, "
            sql = sql & " Case vw.CostoTotal When 0 then 0 else "
            sql = sql & " vw.SignoCompra  * (vw.CostoTotal + (vw.CostoTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) End AS CostoTotal,  "
            sql = sql & " 0  as valorRetenido "
            sql = sql & " from    (( tmp0 Right join gncomprobante Gnc "
            sql = sql & " inner join gntrans gnt"
            sql = sql & " inner join GNTransRecargo gntr"
            sql = sql & " inner join ivrecargo ivr"
            sql = sql & " on ivr.idrecargo=gntr.idrecargo"
            sql = sql & " on gnt.codtrans= gntr.codtrans"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " left join tmp6 on gnc.transid=tmp6.transid"
            sql = sql & " inner join vwConsSUMIVKardexIVA vw ON Gnc.TransID = vw.transid "
            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " inner join Anexos Ane on Gnc.TransID = Ane.Transid)"
            sql = sql & " right join pcprovcli  on gnc.IdProveedorRef=pcprovcli.idprovcli"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " and GNC.Estado<>3 and BandCompraSinRetencion=1 " & cond
'            sql = sql & " order by  CASE When BandIVA=1 then 'IVA' else 'RENTA' end, b.Codsri,  NumTrans "
            
'41
            
            sql = sql & " union all "
            
            
            sql = sql & " Select  DISTINCT 'RENTA' as IVA, '332_41', ane.CodTipoRetencion, GNC.TransID, "
            sql = sql & " GNC.FechaTrans,  gnc.codtrans, gnc.numtrans, pcprovcli.ruc, GNC.Nombre, "
            sql = sql & " '' as transret, GNC.FechaTrans, "
            sql = sql & " '' as NumSerieEstablecimiento, '' as NumSeriePunto , '' as NumTrans, 'Comp. 41' NumAutorizacion, "
            sql = sql & " Case vw.CostoTotal When 0 then 0 else "
            sql = sql & " vw.SignoCompra  * (vw.CostoTotal + (vw.CostoTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) End AS CostoTotal,  "
            sql = sql & " 0  as valorRetenido "
            sql = sql & " from    (( tmp0 Right join gncomprobante Gnc "
            sql = sql & " inner join gntrans gnt"
            sql = sql & " inner join GNTransRecargo gntr"
            sql = sql & " inner join ivrecargo ivr"
            sql = sql & " on ivr.idrecargo=gntr.idrecargo"
            sql = sql & " on gnt.codtrans= gntr.codtrans"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " left join tmp6 on gnc.transid=tmp6.transid"
            sql = sql & " inner join vwConsSUMIVKardexIVA vw ON Gnc.TransID = vw.transid "
            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " inner join Anexos Ane on Gnc.TransID = Ane.Transid)"
            sql = sql & " right join pcprovcli  on gnc.IdProveedorRef=pcprovcli.idprovcli"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " and GNC.Estado<>3 and CodTipoComp= 41 " & cond
            sql = sql & " order by  CASE When BandIVA=1 then 'IVA' else 'RENTA' end, b.Codsri,  NumTrans "
            
            
'            sql = sql & " where  Ane.CodTipoComp= 41 and  GNC.CodTrans IN (" & PreparaCadena(gobjCond.Usuario1) & ")"
 '           sql = sql & " and GNC.Estado<>3 " & Cond
            
            
            
            
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANRetencionCompras2008 = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Retencion Compras para Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 4
End Function


Public Function ConsANVentas2008() As Variant
    Dim pck As PCKardex, pcd As PCDocAsignado
    Dim objGnComp As GNComprobante, objGnCompDocOriginal As GNComprobante
    Dim sql As String, cond As String, CadenaValores As String
    Dim Recargo As String 'CadenaAgrupa  As String
    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
    Dim from As String, numReg As Long, f1 As String
    Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
    Dim Servicios As String, Bienes As String, RowRet As Long
    Const COL_BASESER = 15
    'segunda parte de la consulta: carga los valores de  Detalles de Anexos
    Const COL_FECHA = 2
    Const COL_CODCREDTRIB = 7
    Const COL_TRANSID = 1
    Const COL_TRANSRET = 5
    Dim condServ As String
    Dim condBien As String
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    With gobjCond
        'Reporte de un mes a la vez
        f1 = DateSerial(Year(.fecha1), Month(.fecha1), 1)
        cond = " AND GNC.FechaTrans BETWEEN " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & _
               " AND " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB)
            VerificaExistenciaTabla 0
            VerificaExistenciaTabla 1
            VerificaExistenciaTabla 2
            VerificaExistenciaTabla 3
            sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as TotalDescuento Into tmp0 " & _
                    "From IvRecargo ivR inner join " & _
                        "IvKardexRecargo ivkR Inner join " & _
                            "GnComprobante gNc  " & _
                        "On ivkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = IvkR.IdRecargo "
            sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.Sucursal) & ") " & cond & _
                    " AND GNC.CodTrans IN (" & PreparaCadena(.CodGrupo) & ")" & _
                  "Group by IvkR.TransID"
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
'--datos de indices
            VerificaExistenciaTabla 3
            sql = " Select  DISTINCT GNC.IdClienteRef AS FC_id, GNC_b.IdClienteRef AS rtp_id1, "
            sql = sql & " CASE WHEN GNC_b.IdClienteRef=0 THEN PCK_b.IdProvcli WHEN GNC_b.IdClienteRef<>0 THEN GNC_b.IdClienteRef end as rtp_id "
            sql = sql & " Into tmp3"
            sql = sql & " From    (gncomprobante GNC Inner join pckardex pck_a ON GNC.TransID = pck_a.TransID ) INNER JOIN"
            sql = sql & "  (gncomprobante GNC_b Inner join pckardex pck_B ON GNC_b.TransID = pck_B.TransID )"
            sql = sql & " ON  PCK_A.ID = PCK_B.IDASIGNADO"
            sql = sql & " where GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
            sql = sql & " AND GNC_b.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion2) & ")"
            sql = sql & " AND (GNC.FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = sql & " and GNC.Estado<>3 and GNC.IdClienteRef<>0 and GNC_b.IdClienteRef<>0 "
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            '--datos de la Venta
            sql = " Select max(gnc.IdClienteRef) as IdClienteRef, pc.ruc, max(pc.Nombre) as Nombre , CodTipoDocumento, "
            sql = sql & " AnexoCodTipoComp , count(Gnc.NumTrans) as cantTrans,  "
            sql = sql & " sum( (vw.PrecioTotalBase0 + (vw.PrecioTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float))) ))*-1  As Valor0,"
            sql = sql & " sum( (vw.PrecioTotalBaseIVA + (vw.PrecioTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1 AS Valor12,"
            sql = sql & " 0 AS ValorNO12,"
            sql = sql & " sum( (vw.PrecioTotal + (vw.PrecioTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1   AS PrecioTotal"
            sql = sql & " Into tmp1"
            sql = sql & " from    ("
            sql = sql & " tmp0"
            sql = sql & " Right join gncomprobante Gnc inner join gntrans gnt on gnc.codtrans= gnt.codtrans "
            sql = sql & " INNER JOIN PCPROVClI pc"
            sql = sql & " left join anexo_TipoDocumento atd on pc.IdTipoDocumento=atd.Id"
            sql = sql & " ON GNC.IdClienteRef=pc.idprovcli "
            If Me.GNOpcion.IVKTipoDatoDouble Then
                sql = sql & " inner join vwConsSUMIVKardexIVADou vw"
            Else
                sql = sql & " inner join vwConsSUMIVKardexIVA vw"
            End If

            sql = sql & " ON Gnc.TransID = vw.transid"
            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
            sql = sql & " and pc.bandempresapublica=0 AND BANDCIERRE<>9"
            sql = sql & " and GNC.Estado<>3 " & cond
            sql = sql & " group by   pc.ruc, AnexoCodTipoComp, CodTipoDocumento "
            sql = sql & " union all "
            sql = sql & " Select max(gnc.IdClienteRef) as IdClienteRef, pc.ruc, max(pc.Nombre) as Nombre, CodTipoDocumento, "
            sql = sql & " AnexoCodTipoComp , count(Gnc.NumTrans) as cantTrans,  "
            sql = sql & " sum( (vw.PrecioTotalBase0 + (vw.PrecioTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float))) ))*-1  As Valor0,"
            sql = sql & " 0 AS Valor12,"
            sql = sql & " sum( (vw.PrecioTotalBaseIVA + (vw.PrecioTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1 AS ValorNO12,"
            sql = sql & " sum( (vw.PrecioTotal + (vw.PrecioTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1   AS PrecioTotal"
            sql = sql & " from    ("
            sql = sql & " tmp0"
            sql = sql & " Right join gncomprobante Gnc inner join gntrans gnt on gnc.codtrans= gnt.codtrans "
            sql = sql & " INNER JOIN PCPROVClI pc"
            sql = sql & " left join anexo_TipoDocumento atd on pc.IdTipoDocumento=atd.Id"
            sql = sql & " ON GNC.IdClienteRef=pc.idprovcli "
            If Me.GNOpcion.IVKTipoDatoDouble Then
                sql = sql & " inner join vwConsSUMIVKardexIVADou vw"
            Else
                sql = sql & " inner join vwConsSUMIVKardexIVA vw"
            End If

            sql = sql & " ON Gnc.TransID = vw.transid"
            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
            sql = sql & " and pc.bandempresapublica=1 AND BANDCIERRE<>9 "
            sql = sql & " and GNC.Estado<>3 " & cond
            sql = sql & " group by   pc.ruc, AnexoCodTipoComp, CodTipoDocumento "
            VerificaExistenciaTabla 1
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            ' union de las tres tablas
            sql = "SELECT  " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB) & " as Fecha, "
            sql = sql & " (a.RUC)as ruc, CodTipoDocumento, (a.Nombre) as nombre, AnexoCodTipoComp, isnull(a.cantTrans,0),"
            sql = sql & " case when AnexoCodTipoComp = 4 then isnull(a.Valor0,0) else isnull(a.Valor0*-1,0) end , "
            sql = sql & " case when AnexoCodTipoComp = 4 then isnull(a.Valor12,0) else isnull(a.Valor12*-1,0) end , "
            sql = sql & " case when AnexoCodTipoComp = 4 then isnull(a.ValorNO12,0) else isnull(a.ValorNO12*-1,0) end , "
            sql = sql & " case when AnexoCodTipoComp = 4 then isnull(a.Valor0,0) else isnull(a.Valor0*-1,0) end + "
            sql = sql & " case when AnexoCodTipoComp = 4 then isnull(a.Valor12,0) else isnull(a.Valor12*-1,0) end + "
            sql = sql & " case when AnexoCodTipoComp = 4 then isnull(a.ValorNO12,0) else isnull(a.ValorNO12*-1,0) end  as total "
            'sql = sql & " 0 "
            sql = sql & " From tmp1 a  "
            sql = sql & " order by AnexoCodTipoComp, CodTipoDocumento, a.ruc"
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANVentas2008 = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Compraspara Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 4
End Function


Public Function ConsANRetencionVentas2008() As Variant
    Dim pck As PCKardex, pcd As PCDocAsignado
    Dim objGnComp As GNComprobante, objGnCompDocOriginal As GNComprobante
    Dim sql As String, cond As String, CadenaValores As String
    Dim Recargo As String 'CadenaAgrupa  As String
    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
    Dim from As String, numReg As Long, f1 As String
    Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
    Dim Servicios As String, Bienes As String, RowRet As Long
    Const COL_BASESER = 15
    'segunda parte de la consulta: carga los valores de  Detalles de Anexos
    Const COL_FECHA = 2
    Const COL_CODCREDTRIB = 7
    Const COL_TRANSID = 1
    Const COL_TRANSRET = 5
    Dim condServ As String
    Dim condBien As String
    
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   
    With gobjCond
        'Reporte de un mes a la vez
        f1 = DateSerial(Year(.fecha1), Month(.fecha1), 1)
        cond = " AND GNC.FechaTrans BETWEEN " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & _
               " AND " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB)
        
           
            VerificaExistenciaTabla 0
            
            
            '-- datos de las retenciones
            
            sql = " "
            
            
             For i = 1 To 3
             
                sql = sql & " select GNC.idclienteref, Gnc.CodTrans as TransRet, BANDIVA, "
                sql = sql & " sum(ts_ret.base) as Base, "
                sql = sql & " CASE WHEN BANDIVA=1 THEN  "
                Select Case i
                Case 1
                    sql = sql & " 'IVA_BIE' "
                Case 2
                    sql = sql & "  'IVA_SER'  "
                Case 3
                    sql = sql & "  'IVA_100'  "
                End Select
                
                sql = sql & " ELSE MAX(tsr.CodRetencion) END as Cod,"
                sql = sql & " sum(ts_ret.Debe+ts_ret.Haber) as Valor"
                If i = 1 Then
                sql = sql & " into tmp0 "
                End If
                
                
                sql = sql & " from    gntrans gnt"
                sql = sql & " inner join gncomprobante Gnc"
                sql = sql & " inner join (tskardexret ts_ret"
                sql = sql & " inner join tsretencion tsr on ts_ret.IdRetencion = tsr.IdRetencion )"
                sql = sql & " on GNC.TransID=ts_ret.TransID"
                sql = sql & " on gnc.codtrans=gnt.codtrans"
                sql = sql & " WHERE GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion2) & ")"
                sql = sql & " and GNC.Estado<>3 " & cond
                Select Case i
                Case 1
                    sql = sql & " and tsr.CodRetencion in "
                    sql = sql & " (" & PreparaCadena(gobjCond.Bienes) & ")"
                    sql = sql & " and tsr.Porcentaje<>1"
                Case 2
                    sql = sql & " and tsr.CodRetencion in "
                    sql = sql & " (" & PreparaCadena(gobjCond.Servicios) & ")"
                    sql = sql & " and tsr.Porcentaje<>1"
                Case 3
                    sql = sql & " and (tsr.CodRetencion in "
                    sql = sql & " (" & PreparaCadena(gobjCond.Bienes) & ")"
                    sql = sql & " OR tsr.CodRetencion in"
                    sql = sql & " (" & PreparaCadena(gobjCond.Servicios) & "))"
                    sql = sql & " and tsr.Porcentaje=1"
                End Select
                 sql = sql
                sql = sql & " Group By GNC.idclienteref, GNC.CodTrans,  tsr.CodRetencion, BANDIVA"
                sql = sql & " union all "
                
            Next i

            sql = sql & " select  GNC.idclienteref, Gnc.CodTrans as TransRet, BANDIVA,"
            sql = sql & " sum(ts_ret.base) as Base,"
            sql = sql & " CASE WHEN BANDIVA=1 THEN  'BIENES'  ELSE max(tsr.CodRetencion) END as Cod,"
            sql = sql & " sum(ts_ret.Debe+ts_ret.Haber) as Valor "
            sql = sql & " from    gntrans gnt"
            sql = sql & " inner join gncomprobante Gnc"
            sql = sql & " inner join (tskardexret ts_ret"
            sql = sql & " inner join tsretencion tsr on ts_ret.IdRetencion = tsr.IdRetencion )"
            sql = sql & " on GNC.TransID=ts_ret.TransID"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " WHERE GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion2) & ")"
            sql = sql & " and GNC.Estado<>3" & cond
            sql = sql & " and (tsr.CodRetencion NOT in "
            sql = sql & " (" & PreparaCadena(gobjCond.Bienes) & ")"
            sql = sql & " AND tsr.CodRetencion NOT in"
            sql = sql & " (" & PreparaCadena(gobjCond.Servicios) & "))"
            sql = sql & " Group By GNC.idclienteref, GNC.CodTrans,  tsr.CodRetencion, BANDIVA"

            VerificaExistenciaTabla 0
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            
            ' union de las tres tablas
            sql = "SELECT DISTINCT "
            sql = sql & " CASE When BandIVA=1 then 'IVA' else 'RENTA' end as IVA, b.Cod, "
            sql = sql & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB) & " as Fecha, "
            sql = sql & " a.RUC as ruc, a.Nombre as nombre,  "
            sql = sql & " b.Base, b.Valor "
            sql = sql & " From tmp0 b inner join PcProvcli a"
            sql = sql & " on b.IdClienteRef=a.IdProvcli "
            sql = sql & " order by CASE When BandIVA=1 then 'IVA' else 'RENTA' end, b.Cod "
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANRetencionVentas2008 = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Compraspara Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 4

End Function


Public Function ConsANCreditoDebito2008() As Variant
    Dim pck As PCKardex, pcd As PCDocAsignado
    Dim objGnComp As GNComprobante, objGnCompDocOriginal As GNComprobante
    Dim sql As String, cond As String, CadenaValores As String
    Dim CadenaAgrupa  As String, Recargo As String
    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
    Dim from As String, numReg As Long
    Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
  
        Set rs = New ADODB.Recordset
        rs.CursorLocation = adUseClient
    
    With gobjCond
        VerificaExistenciaTabla 0
        cond = " "
        '******* procedimiento almacenado no funciona si se selcciona mas de una transacciones
     '   If Len(.CodTrans) > 0 Then
     '      cond = PreparaCadena(.CodTrans)
     '   End If
     '   sql = "spConsANDebitosCreditos " & cond & "," & FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB)
     '   sql = sql & "," & FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB)
    '******* procedimiento almacenado no funciona si se selcciona mas de una transacciones
                
        If Len(.CodPC1) > 0 Then
           cond = cond & " WHERE GNComprobante.CodTrans IN (" & PreparaCadena(.CodPC1) & ")"
        End If
        
        ' primero sacamos y prorrateamos el descuento
        'JEAA 26/08/04
        sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as TotalDescuento Into tmp0 " & _
                    "From IvRecargo ivR inner join " & _
                        "IvKardexRecargo ivkR Inner join " & _
                            "GnComprobante  " & _
                        "On ivkr.TransID = GnComprobante.TransID " & _
                    "On Ivr.IdRecargo = IvkR.IdRecargo "
            sql = sql & cond & " AND GnComprobante.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.CodPCGrupo) & ") " & _
                  " Group by IvkR.TransID"
        
        gobjMain.EmpresaActual.EjecutarSQL sql, 0
        
        'PRIMERA PARTE: Ubicar las transacciones de compra afectadas por las NC/ND
        VerificaExistenciaTabla 1
                sql = "SELECT ANEXOS.TRANSID, " & _
                    "GNCOMPROBANTE.CodTrans+' '+CONVERT(varchar,NumTrans) as Trans, " & _
                    " a1.NumSerieEstablecimiento, a1.NumSeriePunto, a1.NumSecuencial, a1.NumAutSRI, a1.CodTipoComp " & _
                    "INTO TMP1 FROM GNCOMPROBANTE INNER JOIN ANEXOS " & _
                    "ON GNCOMPROBANTE.TRANSID = ANEXOS.TRANSIDAFECTADA " & _
                    " INNER JOIN ANEXOS a1 ON GNCOMPROBANTE.TRANSID = A1.TRANSID " & _
                    "WHERE ANEXOS.TRANSIDAFECTADA IN (SELECT Anexos.TransidAfectada " & _
                    "FROM GNCOMPROBANTE INNER JOIN ANEXOS  " & _
                    " ON GNCOMPROBANTE.TRANSID = ANEXOS.TRANSID "

        sql = sql & cond & ")"
                
                
        gobjMain.EmpresaActual.EjecutarSQL sql, 0
        
    'Otras condiciones necesarias para el caso de devoluciones
        If Len(.Usuario1) > 0 Or Len(.Usuario2) > 0 Then
               cond = cond & " AND pcprovcli.CodProvCli BETWEEN  '" & .Usuario1 & "' AND '" & .Usuario2 & "' "
        End If
        
'        sql = "SELECT TransId, CostoRealTotal, Case IVA WHEN 0 THEN CostoRealTotal " & _
'                "ELSE 0 END AS Costo0, Case IVA WHEN 0 THEN 0 Else: CostoRealTotal " & _
'                "END As Costo12 Into Tmp2 From IVKardex"
                
            sql = " Select  gncomprobante.TransID,"
            sql = sql & " Case vw.CostoTotal When 0 then 0 else "
            sql = sql & " vw.CostoTotal + (vw.CostoTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))  End AS CostoRealTotal, "
            sql = sql & " Case vw.CostoTotalBase0 When 0 then 0 else "
            sql = sql & " vw.CostoTotalBase0 + (vw.CostoTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))  end As Costo0, "
            sql = sql & " Case vw.CostoTotalBaseIVA When 0 then 0 else "
            sql = sql & "  vw.CostoTotalBaseIVA + (vw.CostoTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))) end AS Costo12 "
            sql = sql & " Into tmp2"
            sql = sql & " from    ( tmp0 Right join gncomprobante inner join vwConsSUMIVKardexIVA vw ON gncomprobante.TransID = vw.transid ON tmp0.TransID = gncomprobante.TransID)" & cond
                
                
            
                
                
                
        VerificaExistenciaTabla 2
        gobjMain.EmpresaActual.EjecutarSQL sql, 0
        
        cond = cond & " and (GnComprobante.FechaTrans  BETWEEN " & _
        FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
        FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "

        
        VerificaExistenciaTabla 3
        CadenaValores = "abs(Sum(IVK.Costo0" & _
              IIf(.numMoneda > 0, "/Cotizacion" & .numMoneda + 1, "") & ")) As Valor0, "

        CadenaValores = CadenaValores & "abs(Sum(IVK.Costo12" & _
              IIf(.numMoneda > 0, "/Cotizacion" & .numMoneda + 1, "") & ")) As Valor12 "
              
         CadenaValores = " IVK.Costo0, "
        CadenaValores = CadenaValores & "case when PCProvCli.bandempresapublica=0 then IVK.Costo12 else 0 end as Costo12, "
        CadenaValores = CadenaValores & "case when PCProvCli.bandempresapublica=1 then IVK.Costo12 else 0 end as CostoNo12 "
              
        sql = "Select GNCOMPROBANTE.TRANSID, GNComprobante.FechaTrans, GNComprobante.FechaTrans,  " & _
                "GNCOMPROBANTE.CodTrans, GNCOMPROBANTE.NumTrans,   "
        sql = sql & "  PCProvCli.RUC, GNComprobante.Nombre, ANEXOS.CodCredTrib, Anexos.CodTipocomp, " & _
                " Anexos.NumSerieEstablecimiento, Anexos.NumSeriePunto, "
             If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosNotaCredito")) > 0 Then
                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosNotaCredito") = 0 Then
                    sql = sql & " Anexos.NumSecuencial as NumSecuencial, "
                Else
                    sql = sql & " NumDocRef as NumSecuencial, "
                End If
            Else
                sql = sql & " Anexos.NumSecuencial as NumSecuencial, "
            End If
                
        sql = sql & " Anexos.NumAutSRI, Anexos.FechaCaducidad, " & _
                " GNComprobante.Descripcion , " & CadenaValores
        sql = sql & "  ,Tmp1.Trans, Tmp1.NumSerieEstablecimiento , Tmp1.NumSeriePunto, Tmp1.NumSecuencial, Tmp1.NumAutSRI, Tmp1.CodTipoComp "
        
        sql = sql & "FROM (((GnComprobante  LEFT JOIN PCProvCli ON GnComprobante.IdProveedorRef = PCProvCli.IdProvCli) " & _
                "INNER JOIN Tmp2 IVK ON GNComprobante.TransID = IVK.TransID) " & _
                "LEFT JOIN ANEXOS ON GNCOMPROBANTE.TRANSID = ANEXOS.TRANSID) " & _
                 "LEFT JOIN TMP1 ON  ANEXOS.TRANSID = TMP1.TRANSID "
                
        sql = sql & cond & " and GNCOMPROBANTE.estado<>3 "
              
        sql = sql & " GROUP BY GNCOMPROBANTE.TRANSID, " & _
                "GNComprobante.CodTrans+' '+CONVERT(varchar,GNComprobante.NumTrans),  " & _
                "GNComprobante.FechaTrans, GNComprobante.Nombre, GNComprobante.Descripcion, " & _
                "Anexos.CodCredTrib, Anexos.CodTipoComp,  GNCOMPROBANTE.NumTrans, " & _
                "Anexos.NumSerieEstablecimiento,Anexos.NumSeriePunto,Anexos.FechaCaducidad, ANEXOS.NumAutSRI, " & _
                "Anexos.NumSecuencial, Anexos.TransIDAfectada,  Tmp1.Trans, PCProvCli.RUC, IVK.Costo0, IVK.Costo12,GNComprobante.CodTrans , NUMDOCREF, PCProvCli.bandempresapublica, Tmp1.NumSerieEstablecimiento , Tmp1.NumSeriePunto, Tmp1.NumSecuencial, Tmp1.NumAutSRI, Tmp1.CodTipoComp " & _
                "ORDER BY ANEXOS.TRANSIDAFECTADA"
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANCreditoDebito2008 = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Notas de Credito y Notas de Debito para Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    VerificaExistenciaTabla 3

End Function


Public Function ConsPCSaldoconF_CorteClientes(ByVal BandProveedor As Boolean, _
                            ByVal BandCliente As Boolean) As Variant
    Dim sql As String, cond As String, rs As Recordset
   Dim aux As String, Condicion As String
   Dim numReg As Long, Trans As String, i As Integer
        VerificaExistenciaTabla 1
        'Prepara reporte utilizando Tablas Temporales
    '1) Prepara los  documentos  Asignados  menores a la fecha
        aux = IIf(gobjCond.numMoneda > 0, "/Cotizacion" & gobjCond.numMoneda + 1, "")
        sql = "SELECT " & _
            "pck.IdAsignado, " & _
            "(pck.Debe + pck.Haber) " & aux & " AS Valor " & _
            "INTO tmp1 " & _
            "From " & _
            "GNtrans gt INNER JOIN " & _
                "(GNComprobante gc INNER JOIN PCKardex pck "
           If gobjMain.GrupoActual.PermisoActual.ConsRepVen Then
                sql = sql & "INNER JOIN PCProvCli pc INNER JOIN FCVendedor v on v.idvendedor = pc.idvendedor"
                sql = sql & " ON pc.idprovcli = pck.idprovcli "
           End If
             sql = sql & "ON gc.transID = pck.transID) " & _
                          "ON gt.Codtrans = gc.Codtrans " & _
            "Where (pck.IdAsignado <> 0) " & _
            "AND (gc.Estado <> 3) " & _
            "AND (gt.AfectaSaldoPC=1) " & _
            "AND (gc.Fechatrans<= " & FechaYMD(gobjCond.FechaCorte, gobjMain.EmpresaActual.TipoDB) & ")"
           If gobjMain.GrupoActual.PermisoActual.ConsRepVen Then
                sql = sql & " AND v.codvendedor = '" & gobjMain.UsuarioActual.codUsuario & "'"
           End If
            
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        VerificaExistenciaTabla 2
    '2)Agrupa  estos  documentos por IdAsignado
        sql = "SELECT " & _
              "IdAsignado," & _
              "isnull(Sum(Valor),0) AS VCancelado " & _
              "INTO tmp2 " & _
              "FROM tmp1 " & _
              "GROUP BY IdAsignado"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
    '3) Finalmente une  con el documento  Padre
        VerificaExistenciaTabla 3
        sql = "SELECT  gc.transId, gc.Codtrans, gc.Numtrans, gc.NumDocRef, pc.IdProvCli, " & _
            "pc.CodProvCli, pc.Nombre, " & _
            "(pck.Debe ) " & aux & " AS Debe, " & _
            "( pck.Haber) " & aux & " AS Haber, " & _
            "(pck.Debe + pck.Haber) " & aux & " AS Valor, " & _
            "isnull(vw.VCancelado,0) AS VCancelado, "
            sql = sql & " (pck.Debe + pck.Haber) " & aux & " - isnull(vw.VCancelado,0) AS Saldo, "
            sql = sql & " case "
            sql = sql & " when pck.Debe = 0 then 0"
            sql = sql & " when(pck.Debe + pck.Haber) / Cotizacion3 <= isnull(vw.VCancelado,0)  then (pck.Debe + pck.Haber) /Cotizacion3 - isnull(vw.VCancelado,0)"
            sql = sql & " when vw.VCancelado is null  then debe"
            sql = sql & " when vw.VCancelado <>0  then (pck.Debe + pck.Haber) /Cotizacion3 - isnull(vw.VCancelado,0)"
            sql = sql & " else 0"
            sql = sql & " end  AS SaldoDEBE,"
            
            sql = sql & " case"
            sql = sql & " when pck.Haber = 0 then 0"
            sql = sql & " when pck.debe=0 then (haber-isnull(vw.VCancelado,0))*-1"
            sql = sql & " when pck.haber=0 then (debe-isnull(vw.VCancelado,0))*-1"
            sql = sql & " when(pck.Debe + pck.Haber) / Cotizacion3 > vw.VCancelado  then ((pck.Debe + pck.Haber) /Cotizacion3 - vw.VCancelado )*-1"
            sql = sql & " else 0"
            sql = sql & " end AS Saldohaber,"
            
            sql = sql & "  pck.IdForma, pck.NumLetra, " & _
            "pck.FechaEmision, pck.FechaVenci, " & _
            "pck.Observacion " & _
            "INTO tmp3 " & _
            "From GNComprobante gc INNER JOIN " & _
                    "(PCProvCli pc  INNER JOIN "
            If gobjMain.GrupoActual.PermisoActual.ConsRepVen Then
                sql = sql & "FCVendedor  v on v.idvendedor = pc.idvendedor INNER JOIN "
            End If
            sql = sql & " (PCKardex pck  LEFT JOIN " & _
                    "      tmp2 vw  ON vw.IdAsignado = pck.Id) " & _
                    " ON pc.IdProvCli = pck.IdProvCli) " & _
                "ON gc.transID = pck.transID " & _
            "Where (pck.IdAsignado = 0) And (gc.Estado <> 3) and pck.idelemento=0 " & _
            "AND (gc.Fechatrans<=" & FechaYMD(gobjCond.FechaCorte, gobjMain.EmpresaActual.TipoDB) & ")"
                If gobjCond.TipoSaldo = 1 Then
                    sql = sql & "AND (pck.Haber > 0) "
                ElseIf gobjCond.TipoSaldo = 2 Then
                    sql = sql & "AND (pck.Debe > 0) "
                End If
            sql = sql & "and bandcliente=1"
            If gobjMain.GrupoActual.PermisoActual.ConsRepVen Then
                sql = sql & "AND v.codvendedor = '" & gobjMain.UsuarioActual.codUsuario & "'"
            End If
      
      gobjMain.EmpresaActual.EjecutarSQL sql, numReg
    '---------------------------------------------------------------------------------
    '4  Consulta  final
        If gobjCond.TipoSaldo = 1 Then
            Condicion = Condicion & " AND vw.FechaVenci <= " & FechaYMD(gobjCond.FechaCorte, gobjMain.EmpresaActual.TipoDB)
        End If
        If Len(gobjCond.CodPCGrupo) > 0 Then
            Condicion = Condicion & " AND PCGrupo" & gobjCond.NumPCGrupo & ".CodGrupo" & gobjCond.NumPCGrupo & " = '" & _
                        gobjCond.CodPCGrupo & " '"
        End If
#If DAOLIB Then
    Trans = "vw.Codtrans & ' ' & CSTR(vw.Numtrans)"
#Else
    Trans = "vw.Codtrans + ' ' + CONVERT(varchar,vw.Numtrans)"
#End If
       sql = "SELECT " & _
             "vw.CodProvCli, vw.Nombre,  "
            If gobjCond.TipoSaldo = 0 Then
                sql = sql & " (sum(vw.saldodebe)) as debe, "
                sql = sql & "  (sum(vw.saldohaber)) as haber, "
                sql = sql & " sum(vw.saldodebe)+sum(saldoHaber) as saldo,"
           ElseIf gobjCond.TipoSaldo = 1 Then
                sql = sql & " abs(sum(vw.VALOR)) as debe, " & _
                "abs(sum(vw.VCANCELADO)) as haber, " & _
                " (abs(sum(vw.VALOR)) - abs(sum(vw.VCANCELADO)) )*-1 as Saldo, "
           Else
                sql = sql & " abs(sum(vw.VALOR)) as debe, " & _
                "abs(sum(vw.VCANCELADO)) as haber, " & _
                " (abs(sum(vw.VALOR)) - abs(sum(vw.VCANCELADO)) ) as Saldo, "
                
           End If
            sql = sql & " PCGrupo1.CODGRUPO1, PCGrupo1.DESCRIPCION,    PCGrupo2.CODGRUPO2, PCGrupo2.DESCRIPCION,  PCGrupo3.CODGRUPO3,   PCGrupo3.Descripcion,  PCGrupo4.CODGRUPO4, PCGrupo4.Descripcion, codcuenta, nombrecuenta"
             sql = sql & " FROM Gntrans INNER JOIN ((tmp3 vw INNER JOIN " & _
               "((PCProvCli  left join ctcuenta on ctcuenta.idcuenta= PCProvCli.idcuentacontable LEFT JOIN PCGrupo1 ON " & _
                    " (PCProvCli.IdGrupo1 =  PCGrupo1.IDGrupo1 )" & _
                    " LEFT JOIN PCGrupo2 ON PCProvCli.IdGrupo2 =  PCGrupo2.IDGrupo2) " & _
                    " LEFT JOIN PCGrupo3 ON PCProvCli.IdGrupo3 =  PCGrupo3.IDGrupo3) " & _
                    " LEFT JOIN PCGrupo4 ON PCProvCli.IdGrupo4 =  PCGrupo4.IDGrupo4 " & _
               " ON PCProvCli.IdProvCli = vw.IdProvCli) LEFT JOIN TSFormaCobroPago tsforma on vw.idforma = tsforma.idforma) ON Gntrans.Codtrans = vw.Codtrans  "
               If gobjCond.TipoSaldo = 0 Then
                    sql = sql & "Where  (Gntrans.AfectaSaldoPC=1)  " & Condicion
                Else
                    sql = sql & "Where  Saldo <> 0 " & Condicion & "  AND  (Gntrans.AfectaSaldoPC=1)"
                End If
        sql = sql & " group by vw.CodProvCli, vw.Nombre,PCGrupo1.DESCRIPCION,    PCGrupo2.DESCRIPCION,    PCGrupo3.Descripcion, PCGrupo4.Descripcion, "
        sql = sql & " PCGrupo1.CODGRUPO1 , PCGrupo2.CODGRUPO2, PCGrupo3.CODGRUPO3, PCGrupo4.CODGRUPO4, codcuenta, nombrecuenta "
        If gobjCond.TipoSaldo = 1 Then
'            sql = sql & " having  sum(vw.VALOR) >0 "
            sql = sql & "  having (Sum(saldoHaber)) < 0"
        ElseIf gobjCond.TipoSaldo = 0 Then
            sql = sql & "  having (Sum(vw.saldodebe) + Sum(saldoHaber)) <> 0"
        End If
        Set rs = Me.OpenRecordset(sql)
    Set ConsPCSaldoconF_CorteClientes = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Saldos ProvCli con fecha de corte" & gobjCond.FechaCorte, "PC"
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
End Function


Public Function ConsPCSaldoconF_CorteProveedores(ByVal BandProveedor As Boolean, _
                            ByVal BandCliente As Boolean) As Variant
    Dim sql As String, cond As String, rs As Recordset
   Dim aux As String, Condicion As String
   Dim numReg As Long, Trans As String, i As Integer
        VerificaExistenciaTabla 1
        'Prepara reporte utilizando Tablas Temporales
    '1) Prepara los  documentos  Asignados  menores a la fecha
        aux = IIf(gobjCond.numMoneda > 0, "/Cotizacion" & gobjCond.numMoneda + 1, "")
        sql = "SELECT " & _
            "pck.IdAsignado, " & _
            "(pck.Debe + pck.Haber) " & aux & " AS Valor " & _
            "INTO tmp1 " & _
            "From " & _
            "GNtrans gt INNER JOIN " & _
                "(GNComprobante gc INNER JOIN PCKardex pck " & _
                "ON gc.transID = pck.transID) " & _
                          "ON gt.Codtrans = gc.Codtrans " & _
            "Where (pck.IdAsignado <> 0) " & _
            "AND (gc.Estado <> 3) " & _
            "AND (gt.AfectaSaldoPC=1) " & _
            "AND (gc.Fechatrans<= " & FechaYMD(gobjCond.FechaCorte, gobjMain.EmpresaActual.TipoDB) & ")" & _
            " AND pck.idelemento = 0 "

        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        VerificaExistenciaTabla 2
    '2)Agrupa  estos  documentos por IdAsignado
        sql = "SELECT " & _
              "IdAsignado," & _
              "isnull(Sum(Valor),0) AS VCancelado " & _
              "INTO tmp2 " & _
              "FROM tmp1 " & _
              "GROUP BY IdAsignado"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
    '3) Finalmente une  con el documento  Padre
        VerificaExistenciaTabla 3
        sql = "SELECT  gc.transId, gc.Codtrans, gc.Numtrans, gc.NumDocRef, pc.IdProvCli, " & _
            "pc.CodProvCli, pc.Nombre, " & _
            "(pck.Debe ) " & aux & " AS Debe, " & _
            "( pck.Haber) " & aux & " AS Haber, " & _
            "(pck.Debe + pck.Haber) " & aux & " AS Valor, " & _
            "isnull(vw.VCancelado,0) AS VCancelado, " & _
            "(pck.Debe + pck.Haber) " & aux & " - isnull(vw.VCancelado,0) AS Saldo, "
            sql = sql & " case "
            sql = sql & " when pck.Debe = 0 then 0"
            sql = sql & " when(pck.Debe + pck.Haber) / Cotizacion3 <= isnull(vw.VCancelado,0)  then (pck.Debe + pck.Haber) /Cotizacion3 - isnull(vw.VCancelado,0)"
            sql = sql & " when vw.VCancelado is null  then debe"
            sql = sql & " when vw.VCancelado <>0  then (pck.Debe + pck.Haber) /Cotizacion3 - isnull(vw.VCancelado,0)"
            sql = sql & " else 0"
            sql = sql & " end  AS SaldoDEBE,"
            sql = sql & " case"
            sql = sql & " when pck.Haber = 0 then 0"
            sql = sql & " when pck.debe=0 then (haber-isnull(vw.VCancelado,0))*-1"
            sql = sql & " when pck.haber=0 then (debe-isnull(vw.VCancelado,0))*-1"
            sql = sql & " when(pck.Debe + pck.Haber) / Cotizacion3 > vw.VCancelado  then ((pck.Debe + pck.Haber) /Cotizacion3 - vw.VCancelado )*-1"
            sql = sql & " else 0"
            sql = sql & " end AS Saldohaber,"
            sql = sql & " pck.IdForma, pck.NumLetra, " & _
            "pck.FechaEmision, pck.FechaVenci, " & _
            "pck.Observacion " & _
            "INTO tmp3 " & _
            "From GNComprobante gc INNER JOIN " & _
                    "(PCProvCli pc  INNER JOIN " & _
                    "    (PCKardex pck  LEFT JOIN " & _
                    "      tmp2 vw  ON vw.IdAsignado = pck.Id) " & _
                    " ON pc.IdProvCli = pck.IdProvCli) " & _
                "ON gc.transID = pck.transID " & _
            "Where (pck.IdAsignado = 0) And (gc.Estado <> 3) " & _
            "AND (gc.Fechatrans<=" & FechaYMD(gobjCond.FechaCorte, gobjMain.EmpresaActual.TipoDB) & ")"
                If gobjCond.TipoSaldo = 1 Then
                    sql = sql & "AND (pck.DEBE > 0) "
                ElseIf gobjCond.TipoSaldo = 2 Then
                    sql = sql & "AND (pck.HABER > 0) "
                End If
                    sql = sql & "and bandproveedor=1 "
                    sql = sql & "and pck.idelemento = 0"
      gobjMain.EmpresaActual.EjecutarSQL sql, numReg
    '---------------------------------------------------------------------------------
    '4  Consulta  final
        If gobjCond.TipoSaldo = 1 Then
            Condicion = Condicion & " AND vw.FechaVenci <= " & FechaYMD(gobjCond.FechaCorte, gobjMain.EmpresaActual.TipoDB)
        End If
        If Len(gobjCond.CodPCGrupo) > 0 Then
            Condicion = Condicion & " AND PCGrupo" & gobjCond.NumPCGrupo & ".CodGrupo" & gobjCond.NumPCGrupo & " = '" & _
                        gobjCond.CodPCGrupo & " '"
        End If
#If DAOLIB Then
    Trans = "vw.Codtrans & ' ' & CSTR(vw.Numtrans)"
#Else
    Trans = "vw.Codtrans + ' ' + CONVERT(varchar,vw.Numtrans)"
#End If
       sql = "SELECT " & _
             "vw.CodProvCli, vw.Nombre,  "
            If gobjCond.TipoSaldo = 0 Then
                'sql = sql & " sum(vw.debe) as debe, " & _
               "sum(vw.haber) as haber, " & _
                " (sum(vw.debe) - sum(vw.haber) ) as Saldo, "
                '" (sum(vw.debe) - sum(vw.haber) ) as Saldo, "
                '" as Saldo, "
                'sql = sql & " (sum(vw.debe)) +(sum(vw.VCANCELADO))  as debe, "
                'sql = sql & "  (sum(vw.haber)) as haber, "
                'sql = sql & "((sum(vw.debe) -sum(vw.VCANCELADO)) - sum(vw.haber) ) as Saldo,  "
                'sql = sql & " (((sum(vw.debe)) -(sum(vw.VCANCELADO)))+ ((sum(vw.haber)))) *- 1 as saldo,"
                sql = sql & " (sum(vw.saldodebe)) as debe, "
                sql = sql & "  (sum(vw.saldohaber)) as haber, "
                sql = sql & " sum(vw.saldodebe)+sum(saldoHaber) as saldo,"
           Else
                sql = sql & " abs(sum(vw.VALOR)) as debe, " & _
                "abs(sum(vw.VCANCELADO)) as haber, " & _
                " ( (abs(sum(vw.VALOR)) - abs(sum(vw.VCANCELADO)) ))*-1 as Saldo, "
                '" (sum(vw.debe) - sum(vw.haber) ) as Saldo, "
                '"sum(saldo) as Saldo, "
           End If
            sql = sql & " PCGrupo1.CODGRUPO1, PCGrupo1.DESCRIPCION,    PCGrupo2.CODGRUPO2, PCGrupo2.DESCRIPCION,  PCGrupo3.CODGRUPO3,   PCGrupo3.Descripcion,  PCGrupo4.CODGRUPO4, PCGrupo4.Descripcion, codcuenta, nombrecuenta"
             sql = sql & " FROM Gntrans INNER JOIN ((tmp3 vw INNER JOIN " & _
               "((PCProvCli  left join ctcuenta on ctcuenta.idcuenta= PCProvCli.idcuentacontable LEFT JOIN PCGrupo1 ON " & _
                    " (PCProvCli.IdGrupo1 =  PCGrupo1.IDGrupo1 )" & _
                    " LEFT JOIN PCGrupo2 ON PCProvCli.IdGrupo2 =  PCGrupo2.IDGrupo2) " & _
                    " LEFT JOIN PCGrupo3 ON PCProvCli.IdGrupo3 =  PCGrupo3.IDGrupo3) " & _
                    " LEFT JOIN PCGrupo4 ON PCProvCli.IdGrupo4 =  PCGrupo4.IDGrupo4 " & _
               " ON PCProvCli.IdProvCli = vw.IdProvCli) LEFT JOIN TSFormaCobroPago tsforma on vw.idforma = tsforma.idforma) ON Gntrans.Codtrans = vw.Codtrans  "
                If gobjCond.TipoSaldo = 0 Then
                    sql = sql & "Where  (Gntrans.AfectaSaldoPC=1)  " & Condicion
                Else
                    sql = sql & "Where  Saldo > 0 " & Condicion & "  AND  (Gntrans.AfectaSaldoPC=1)"
                End If
        sql = sql & " group by vw.CodProvCli, vw.Nombre,PCGrupo1.DESCRIPCION,    PCGrupo2.DESCRIPCION,    PCGrupo3.Descripcion, PCGrupo4.Descripcion, "
        sql = sql & " PCGrupo1.CODGRUPO1 , PCGrupo2.CODGRUPO2, PCGrupo3.CODGRUPO3, PCGrupo4.CODGRUPO4, codcuenta, nombrecuenta"
        If gobjCond.TipoSaldo = 1 Then
            sql = sql & " having sum(vw.VALOR) >0 "
        ElseIf gobjCond.TipoSaldo = 0 Then
            sql = sql & "  having (Sum(vw.saldodebe) + Sum(saldoHaber)) <> 0"
        End If
        Set rs = Me.OpenRecordset(sql)
    Set ConsPCSaldoconF_CorteProveedores = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Saldos ProvCli con fecha de corte" & gobjCond.FechaCorte, "PC"
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
End Function


'jeaa 15/07/2007
Public Function ListaAnexoRegimen(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT Codregimen,  Descripcion FROM Anexo_Regimen"
    sql = sql & " ORDER BY CodRegimen"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaAnexoRegimen = rs
    Else
        ListaAnexoRegimen = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

'jeaa 15/07/2007
Public Function ListaAnexoDistrito(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodDistrito,  Descripcion FROM Anexo_Distrito"
    sql = sql & " ORDER BY CodDistrito"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaAnexoDistrito = rs
    Else
        ListaAnexoDistrito = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

'jeaa 15/07/2007
Public Function ListaAnexoTipoExportacion(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodTipoExportacion,  Descripcion FROM Anexo_TipoExportacion"
    sql = sql & " ORDER BY CodTipoExportacion"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaAnexoTipoExportacion = rs
    Else
        ListaAnexoTipoExportacion = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function RecuperaAnexosDistrito(key As Variant) As Anexos
Dim obj As Anexos
    Set obj = New Anexos
    Set obj.Empresa = Me
    On Error Resume Next
    obj.RecuperarAnexosDistrito key
    If Err.Number = 0 Then Set RecuperaAnexosDistrito = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function RecuperaAnexosRegimen(key As Variant) As Anexos
Dim obj As Anexos
    Set obj = New Anexos
    Set obj.Empresa = Me
    On Error Resume Next
    obj.RecuperarAnexosRegimen key
    If Err.Number = 0 Then Set RecuperaAnexosRegimen = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function RecuperaAnexosTipoExp(key As Variant) As Anexos
Dim obj As Anexos
    Set obj = New Anexos
    Set obj.Empresa = Me
    On Error Resume Next
    obj.RecuperarAnexosTipoExp key
    If Err.Number = 0 Then Set RecuperaAnexosTipoExp = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function


Function ConsTSPorCobrarPagarIngresoAuto(ByVal Id As Long, Valor As Currency, CodForma As String) As Variant
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim objCond As Condicion
    
    Set objCond = gobjMain.objCondicion
    
    'Si no está especificada la moneda, coge la Moneda predeterminada
    If Len(objCond.CodMoneda) = 0 Then objCond.CodMoneda = MONEDA_PRE
    numMoneda = Me.GNOpcion.IndiceMoneda(objCond.CodMoneda)
    
    
    sql = " select Id, CodProvCli, Nombre, TransID,"
    sql = sql & " Trans, CodForma, Valor" & numMoneda & " AS Valor, VCancelado" & numMoneda & " AS VCancelado,"
    sql = sql & " Valor" & numMoneda & " - VCancelado" & numMoneda & " AS Saldo, "
    sql = sql & " CodMoneda,"
    sql = sql & " Valor" & numMoneda & " - VCancelado" & numMoneda & " as Cancela, "
    If numMoneda = 1 Then
        sql = sql & " 1 AS Cotizacion, "
    Else
        sql = sql & " Cotizacion" & numMoneda & " AS Cotizacion, "
    End If
    sql = sql & " Valor" & numMoneda & " - VCancelado" & numMoneda & "  as cot , "
    If numMoneda = 1 Then
        sql = sql & " Valor" & numMoneda & " - VCancelado" & numMoneda & "  *1   as cot1 ,"
    Else
        sql = sql & " Valor" & numMoneda & " - VCancelado" & numMoneda & "  *1/Cotizacion" & numMoneda & " as cot1 ,"
    End If

    sql = sql & " Valor" & numMoneda & " - VCancelado" & numMoneda & "-" & " Valor" & numMoneda & " - VCancelado" & numMoneda & " as saldo ,FechaEmision,"
    sql = sql & " Plazo, FechaVenci from vwConsPCPorCobrarPagar"
    sql = sql & " Where transId = " & Id
    sql = sql & " and CodForma in( " & PreparaCadena(CodForma) & ")"
    Set rs = Me.OpenRecordset(sql)
    Set ConsTSPorCobrarPagarIngresoAuto = rs
    Set rs = Nothing
    Set objCond = Nothing
End Function


Public Function ConsGNTransIngresoAuto( _
                    Optional ByVal OrdenAscendente As Boolean) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
End Function


Public Function RevisaPrinicialPreparacion(ByVal codItem As String, codItemPadre As String) As Boolean
    Dim rs As Recordset, sql As String
    RevisaPrinicialPreparacion = False
    sql = "select ivi.codinventario, Iv.CodInventario, ivm.bandModificar"
    sql = sql & "  From VWIvinventarioRECUPERAR Iv "
    sql = sql & "  INNER JOIN IVMateria Ivm "
    sql = sql & "  inner join ivinventario ivi on ivm.idinventario=ivi.idinventario"
    sql = sql & "  ON IV.IdInventario = Ivm.Idmateria"
    sql = sql & " Where ivi.codinventario = '" & codItemPadre & "'"
    sql = sql & " AND iv.codinventario = '" & codItem & "'"
    Set rs = Me.OpenRecordset(sql)
    'error angel 07/07/2010
    If rs.RecordCount > 0 Then
        With rs
            If .Fields("bandModificar") Then
                RevisaPrinicialPreparacion = True
            Else
                RevisaPrinicialPreparacion = False
            End If
        End With
    End If
    Set rs = Nothing
End Function

Public Function ListaTSRetencionParaFlexCompraVenta(bandCompra As Boolean, bandVenta As Boolean) As String
    Dim sql As String, s As String
    Dim rs As Recordset
    
    sql = "SELECT CodRetencion, Descripcion, CodSRI FROM TSRetencion WHERE "
    sql = sql & "BandValida=" & CadenaBool(True, TipoDB)
    
    If Not (bandCompra And bandVenta) Then
        If bandCompra Then
            sql = sql & " and BandCompras=" & CadenaBool(True, TipoDB)
        Else
            sql = sql & " and Bandventas=" & CadenaBool(True, TipoDB)
        End If
    End If
    
    
    sql = sql & " ORDER BY CodRetencion"

    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = GetStringDAO(rs, 10 + 40)
#Else
    If Not rs.EOF Then
        s = rs.GetString(adClipString, , vbTab, "|")
    End If
#End If
    
    ListaTSRetencionParaFlexCompraVenta = s
    rs.Close
    Set rs = Nothing
End Function


Public Function ListaGNTransTipoTRans( _
                    Modulo As String, _
                    BandInvisibles As Boolean, _
                    BandRS As Boolean, _
                    TipoTrans As String) As Variant
    Dim sql As String, cond As String, rs As Recordset
    
    sql = "SELECT g.CodTrans, NombreTrans FROM GNTrans g  "
    sql = sql & " inner join Anexos_Transacciones a on a.codtrans=G.AnexoCodTipoTrans "
    
    'If Len(Modulo) > 0 Then cond = cond & "Modulo='" & Modulo & "' "
    If Not BandInvisibles Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "BandVisible=" & CadenaBool(True, TipoDB)
    End If
    
    If Len(cond) > 0 Then sql = sql & "WHERE " & cond
    
    sql = sql & " and a.CodTrans in (" & TipoTrans & ")"
    sql = sql & " ORDER BY g.CodTrans"
    Set rs = Me.OpenRecordset(sql)
    
    If BandRS Then
        Set ListaGNTransTipoTRans = rs
    Else
        ListaGNTransTipoTRans = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


Public Function ConsANCompras2008ParaXML() As Variant
    Dim pck As PCKardex, pcd As PCDocAsignado
    Dim objGnComp As GNComprobante, objGnCompDocOriginal As GNComprobante
    Dim sql As String, cond As String, CadenaValores As String
    Dim Recargo As String 'CadenaAgrupa  As String
    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
    Dim from As String, numReg As Long
    Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
    Dim Servicios As String, Bienes As String, RowRet As Long
    Const COL_BASESER = 15
    'segunda parte de la consulta: carga los valores de  Detalles de Anexos
    Const COL_FECHA = 2
    Const COL_CODCREDTRIB = 7
    Const COL_TRANSID = 1
    Const COL_TRANSRET = 5
    Dim condServ As String
    Dim condBien As String
    
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   
    With gobjCond
        
            cond = " AND (GNC.FechaTrans  BETWEEN " & _
                    FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                    FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            
'            If Len(.Usuario1) > 0 Or Len(.Usuario2) > 0 Then
'                   cond = cond & " AND pcprovcli.CodProvCli  BETWEEN  '" & .Usuario1 & "' AND '" & .Usuario2 & "' "
'            End If
            
            VerificaExistenciaTabla 0
            VerificaExistenciaTabla 1
            VerificaExistenciaTabla 2
            VerificaExistenciaTabla 3
            VerificaExistenciaTabla 4
            VerificaExistenciaTabla 5
            VerificaExistenciaTabla 6
            
            
            VerificaExistenciaTabla 10
            VerificaExistenciaTabla 11
            VerificaExistenciaTabla 12
            VerificaExistenciaTabla 13
            VerificaExistenciaTabla 14
            VerificaExistenciaTabla 15
            VerificaExistenciaTabla 16
            
            
            sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as TotalDescuento Into tmp0 " & _
                    "From IvRecargo ivR inner join " & _
                        "IvKardexRecargo ivkR Inner join " & _
                            "GnComprobante gNc  " & _
                        "On ivkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = IvkR.IdRecargo "
            sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.Servicios) & ") " & cond & _
                    " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")" & _
                  "Group by IvkR.TransID"
                  
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as TotalDescuento Into tmp10 " & _
                    "From IvRecargo ivR inner join " & _
                        "AFKardexRecargo ivkR Inner join " & _
                            "GnComprobante gNc  " & _
                        "On ivkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = IvkR.IdRecargo "
            sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.Servicios) & ") " & cond & _
                    " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")" & _
                  "Group by IvkR.TransID"
                  
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            'jeaa 09/01/2007
            'datos ICE
            sql = " Select Ivkr.TransID, "
            sql = sql & " SUM(IVK.CostoRealTotal) AS BASEice,"
            sql = sql & " MAX(IVC.CodICE) AS CodICE, SUM(ivkr.Valor) As ValorICE"
            sql = sql & " Into tmp6"
            sql = sql & " From IvRecargo ivR"
            sql = sql & " inner join IvKardexRecargo ivkR"
            sql = sql & " INNER JOIN IVKARDEX IVK"
            sql = sql & " INNER JOIN IVINVENTARIO IV"
            sql = sql & " INNER JOIN IVRECARGOICE IVC"
            sql = sql & " ON IV.IDICE=IVC.IDICE"
            sql = sql & " ON IVK.IDINVENTARIO=IV.IDINVENTARIO"
            sql = sql & " ON IVKR.TRANSID=IVK.TRANSID"
            sql = sql & " Inner join GnComprobante gNc"
            sql = sql & " On ivkr.TransID = gNc.TransID"
            sql = sql & " On Ivr.IdRecargo = IvkR.IdRecargo"
            sql = sql & " Where gnc.Estado <> 3"
            sql = sql & " AND ivr.CodRecargo IN ('" & gobjMain.EmpresaActual.GNOpcion.ObtenerValor("RecDescParaICE") & "')" & cond
            sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")"
            sql = sql & " Group by IvkR.TransID"
            
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            
'--datos de indices
            VerificaExistenciaTabla 3
            sql = " Select  DISTINCT GNC.TransID AS cp_id, GNC_b.TransID AS rtp_id"
            sql = sql & " Into tmp3"
            sql = sql & " From    (gncomprobante GNC Inner join pckardex pck_a ON GNC.TransID = pck_a.TransID ) INNER JOIN"
            sql = sql & "  (gncomprobante GNC_b Inner join pckardex pck_B ON GNC_b.TransID = pck_B.TransID )"
            sql = sql & " ON  PCK_A.ID = PCK_B.IDASIGNADO"
            sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " AND GNC_b.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion1) & ")"
            sql = sql & " AND (GNC.FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = sql & " and GNC.Estado<>3 and GNC_b.estado<>3 "
            
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            sql = " Select  DISTINCT GNC.TransID AS cp_id, GNC_b.TransID AS rtp_id"
            sql = sql & " Into tmp13"
            sql = sql & " From    (gncomprobante GNC Inner join pckardex pck_a ON GNC.TransID = pck_a.TransID ) INNER JOIN"
            sql = sql & "  (gncomprobante GNC_b Inner join pckardex pck_B ON GNC_b.TransID = pck_B.TransID )"
            sql = sql & " ON  PCK_A.ID = PCK_B.IDASIGNADO"
            sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " AND GNC_b.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion1) & ")"
            sql = sql & " AND (GNC.FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = sql & " and GNC.Estado<>3 and GNC_b.estado<>3 "
            
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            '--datos de la compra
            sql = " Select  GNC.TransID, Ane.FechaAnexos, GNC.FechaTrans, CodTipoDocumento, pcprovcli.ruc,"
            sql = sql & " GNC.Nombre, Ane.CodCredTrib, Ane.CodTipoComp, Ane.NumAutSRI,"
            sql = sql & " Ane.NumSerie, Ane.NumSecuencial, GNC.Descripcion,"
            sql = sql & " Case Ane.BandDevolucion WHEN 0 THEN 'N' ELSE 'S' END AS BandDev,"
            sql = sql & " Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as Trans,"
            sql = sql & " Gnc.CodTrans as Transa, Gnc.NumTrans as NumTransa,"
            sql = sql & " Case vw.CostoTotalBase0 When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBase0 + (vw.CostoTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))) ) end As Valor0, "
            sql = sql & " Case vw.CostoTotalBaseIVA When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseIVA + (vw.CostoTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) end AS Valor12, "
            sql = sql & " Case vw.CostoTotal When 0 then 0 else "
            sql = sql & " vw.SignoCompra  * (vw.CostoTotal + (vw.CostoTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))))  End AS CostoTotal,  "
            sql = sql & " ane.NumSerieEstablecimiento ,ane.NumSeriePunto ,ane.FechaCaducidad, "
            sql = sql & " tmp6.BASEice, tmp6.CodICE ,tmp6.ValorICE,BANDREToTRO"
            sql = sql & " Into tmp1"
            sql = sql & " from    (( tmp0 Right join gncomprobante Gnc "
            sql = sql & " inner join gntrans gnt"
            sql = sql & " inner join GNTransRecargo gntr"
            sql = sql & " inner join ivrecargo ivr"
            sql = sql & " on ivr.idrecargo=gntr.idrecargo"
            sql = sql & " on gnt.codtrans= gntr.codtrans"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " left join tmp6 on gnc.transid=tmp6.transid"
            sql = sql & " inner join vwConsSUMIVKardexIVA vw ON Gnc.TransID = vw.transid "
            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " inner join Anexos Ane on Gnc.TransID = Ane.Transid)"
            sql = sql & " right join pcprovcli  "
            sql = sql & " left join anexo_TipoDocumento atd on pcprovcli.IdTipoDocumento=atd.Id"
            sql = sql & " on gnc.IdProveedorRef=pcprovcli.idprovcli"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " and GNC.Estado<>3 " & cond
            
            sql = sql & " union all"
            
            
            '--datos de la compra activos
            sql = sql & " Select  GNC.TransID, Ane.FechaAnexos, GNC.FechaTrans, CodTipoDocumento, pcprovcli.ruc,"
            sql = sql & " GNC.Nombre, Ane.CodCredTrib, Ane.CodTipoComp, Ane.NumAutSRI,"
            sql = sql & " Ane.NumSerie, Ane.NumSecuencial, GNC.Descripcion,"
            sql = sql & " Case Ane.BandDevolucion WHEN 0 THEN 'N' ELSE 'S' END AS BandDev,"
            sql = sql & " Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as Trans,"
            sql = sql & " Gnc.CodTrans as Transa, Gnc.NumTrans as NumTransa,"
            sql = sql & " Case vw.CostoTotalBase0 When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBase0 + (vw.CostoTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))) ) end As Valor0, "
            sql = sql & " Case vw.CostoTotalBaseIVA When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseIVA + (vw.CostoTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) end AS Valor12, "
            sql = sql & " Case vw.CostoTotal When 0 then 0 else "
            sql = sql & " vw.SignoCompra  * (vw.CostoTotal + (vw.CostoTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))))  End AS CostoTotal,  "
            sql = sql & " ane.NumSerieEstablecimiento ,ane.NumSeriePunto ,ane.FechaCaducidad, "
            sql = sql & " 0 as BASEice, '0' as CodICE , 0 as ValorICE,BANDREToTRO"
            sql = sql & " from    (( tmp10 Right join gncomprobante Gnc "
            sql = sql & " inner join gntrans gnt"
            sql = sql & " inner join GNTransRecargo gntr"
            sql = sql & " inner join ivrecargo ivr"
            sql = sql & " on ivr.idrecargo=gntr.idrecargo"
            sql = sql & " on gnt.codtrans= gntr.codtrans"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            ''sql = sql & " left join tmp6 on gnc.transid=tmp6.transid"
            sql = sql & " inner join vwConsSUMAFKardexIVA vw ON Gnc.TransID = vw.transid "
            sql = sql & " ON tmp10.TransID = Gnc.TransID)"
            sql = sql & " inner join Anexos Ane on Gnc.TransID = Ane.Transid)"
            sql = sql & " right join pcprovcli  "
            sql = sql & " left join anexo_TipoDocumento atd on pcprovcli.IdTipoDocumento=atd.Id"
            sql = sql & " on gnc.IdProveedorRef=pcprovcli.idprovcli"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " and GNC.Estado<>3 " & cond
            
            VerificaExistenciaTabla 1
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            '-- datos de las retenciones
            
            
            
            ' union de las tres tablas
            ' union de las tres tablas
            sql = " select  DISTINCT  a.Transid,a.FechaAnexos, a.FechaTrans, a.Transa,  a.NumTransa, "
            sql = sql & "a.CodTipoDocumento, a.RUC, a.Nombre, "
            sql = sql & " a.NumSerieEstablecimiento , a.NumSeriePunto, "
            sql = sql & " case when len(a.NumSecuencial)>9 then right(a.NumSecuencial,9) else a.NumSecuencial end as NumSecuencial ,  "
            sql = sql & " a.NumAutSRI, a.FechaCaducidad, "
            sql = sql & "a.CodCredTrib, a.CodTipoComp, "
            sql = sql & " a.Valor0, a.Valor12,0, CodICE, ISNULL(ValorICE,0) AS ValorICE, BANDREToTRO "
                sql = sql & " From tmp1 a  "
            sql = sql & " order by a.CodTipoComp"

            
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANCompras2008ParaXML = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Compraspara Anexos 2008 XML" & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 4
End Function



Public Function ConsANRetencionCompras2008ParaXML(ByVal transid As Long) As Recordset
    Dim sql As String, rs As Recordset
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    
    With gobjCond
        sql = " Select ts.bandiva, ts.codretencion, CASE WHEN ts.bandiva = 1 then iva.codRetencion else ir.CodRetencion end as codretencion,  "
        'sql = sql & " CASE WHEN tsk.Base<>0 THEN round((tsk.Debe + tsk.Haber) * 100 / tsk.Base,0)   ELSE 0    END AS porcent," '
        'AUC cambiado 02/08/2012 para tomar el valor exacto del porcentaje
        sql = sql & "  round(ts.porcentaje*100,2) as porcentaje,"
        sql = sql & " gncCP.codtrans, gncCP.numtrans, pc.ruc,"
        sql = sql & " gnc.codtrans, gnc.numtrans,"
        sql = sql & " gnc.FechaTrans , gnt.NumSerieEstablecimiento, gnt.NumSeriePunto, "
        
        
        
        If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosRetencion")) > 0 Then
            If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosRetencion") > 0 Then
                sql = sql & " gnc.NumDocRef as NumeroTrans , "
            Else
                sql = sql & " gnc.NumTrans as NumTrans, "
            End If
        Else
            sql = sql & " gnc.NumTrans as NumTrans, "
        End If
        
        
'            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion")) > 0 Then
'                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion") > 0 Then
'                    sql = sql & " gnc.AutorizacionSRI as NumAutorizacion , "
'                Else
'                    sql = sql & " gnt.NumAutorizacion as NumAutorizacion, "
'                End If
'            Else
'                sql = sql & " gnt.NumAutorizacion as NumAutorizacion, "
'            End If
        
        sql = sql & " case when substring(Opcion2, 122, 1)='S' and tipoemision='1' and TipoAmbiente = '2' then NumeroAutorizacion else gnc.AutorizacionSRI end as NumAutorizacion,"
        sql = sql & " tsk.base, tsk.haber "
        sql = sql & " from Gncomprobante gnc "
        sql = sql & " left join infocomprobantes inf on gnc.transid=inf.transid "
        sql = sql & " inner join gntrans gnt on gnc.codtrans=gnt.codtrans"
        sql = sql & " inner join tskardexret tsk"
        sql = sql & " inner join tsretencion ts"
        sql = sql & " LEFT join Anexos_Retencion_IR IR on ts.IdAnexo= IR.id"
        sql = sql & " LEFT join Anexos_Retencion_IVA IVA on ts.IdAnexo= IVA.id"
        sql = sql & " on tsk.idretencion=ts.idretencion"
        sql = sql & " on gnc.transid=tsk.transid"
        sql = sql & " inner join pckardex pck"
        sql = sql & " inner join pcprovcli pc"
        sql = sql & " on pck.idprovcli= pc.idprovcli"
        sql = sql & " on gnc.transid=pck.transid"
        sql = sql & " inner join pckardex pckCP"
        sql = sql & " inner join Gncomprobante gncCP"
        sql = sql & " on gncCP.transid=pckCP.transid"
        sql = sql & " on pck.idasignado=pckCP.id"
        sql = sql & " Where gnc.Estado <> 3"
        sql = sql & " and gnc.codtrans in (" & PreparaCadena(gobjCond.CodRetencion1) & ")"
'        sql = sql & " and TipoAmbiente = 2 "
        sql = sql & " and gnccp.transid=" & transid
        
        rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
        
        
        
    End With
    UltimoRecordset rs
    Set ConsANRetencionCompras2008ParaXML = rs
    Set rs = Nothing

End Function

Public Function ConsANNCCompras2008ParaXML(ByVal transid As Long) As Recordset

    Dim sql As String, rsaux As Recordset
    Dim rs As Recordset
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    
    Set rsaux = New ADODB.Recordset
    rsaux.CursorLocation = adUseClient
    
    sql = " select transidafectada "
    sql = sql & " from gncomprobante gnc"
    sql = sql & " inner join anexos a on gnc.transid=a.transid"
    sql = sql & " Where gnc.estado <>3 and gnc.TransID = " & transid
    
    rsaux.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rsaux
    
    
    If rsaux.RecordCount > 0 Then
        sql = " select CodTipoComp, NumSerieEstablecimiento,"
        sql = sql & " NumSeriePunto, numsecuencial,"
        sql = sql & " NumAutSRI from gncomprobante gnc"
        sql = sql & " inner join anexos a on gnc.transid=a.transid"
        sql = sql & " Where gnc.TransID = " & rsaux("transidafectada")
        
        rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
        UltimoRecordset rs
        Set ConsANNCCompras2008ParaXML = rs
        Set rs = Nothing
    End If
    Set rsaux = Nothing
End Function

'Public Function ConsANVentas2008ParaXML() As Variant
'    Dim pck As PCKardex, pcd As PCDocAsignado
'    Dim objGnComp As gnComprobante, objGnCompDocOriginal As gnComprobante
'    Dim sql As String, cond As String, CadenaValores As String
'    Dim Recargo As String 'CadenaAgrupa  As String
'    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
'    Dim From As String, numReg As Long, f1 As String
'    Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
'    Dim Servicios As String, Bienes As String, RowRet As Long
'    Const COL_BASESER = 15
'    'segunda parte de la consulta: carga los valores de  Detalles de Anexos
'    Const COL_FECHA = 2
'    Const COL_CODCREDTRIB = 7
'    Const COL_TRANSID = 1
'    Const COL_TRANSRET = 5
'    Dim condServ As String
'    Dim condBien As String
'
'    Set rs = New ADODB.Recordset
'    rs.CursorLocation = adUseClient
'
'    With gobjCond
'        'Reporte de un mes a la vez
'        f1 = DateSerial(Year(.fecha1), Month(.fecha1), 1)
'        cond = " AND GNC.FechaTrans BETWEEN " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & _
'               " AND " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB)
'
'
'            VerificaExistenciaTabla 0
'            VerificaExistenciaTabla 1
'            VerificaExistenciaTabla 2
'            VerificaExistenciaTabla 3
'
'            sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as TotalDescuento Into tmp0 " & _
'                    "From IvRecargo ivR inner join " & _
'                        "IvKardexRecargo ivkR Inner join " & _
'                            "GnComprobante gNc  " & _
'                        "On ivkr.TransID = gNc.TransID " & _
'                    "On Ivr.IdRecargo = IvkR.IdRecargo "
'            sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.Sucursal) & ") " & cond & _
'                    " AND GNC.CodTrans IN (" & PreparaCadena(.CodGrupo) & ")" & _
'                  "Group by IvkR.TransID"
'
'            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
'
''--datos de indices
'            VerificaExistenciaTabla 3
'            sql = " Select  DISTINCT GNC.IdClienteRef AS FC_id, GNC_b.IdClienteRef AS rtp_id1, "
'            sql = sql & " CASE WHEN GNC_b.IdClienteRef=0 THEN PCK_b.IdProvcli WHEN GNC_b.IdClienteRef<>0 THEN GNC_b.IdClienteRef end as rtp_id "
'            sql = sql & " Into tmp3"
'            sql = sql & " From    (gncomprobante GNC Inner join pckardex pck_a ON GNC.TransID = pck_a.TransID ) INNER JOIN"
'            sql = sql & "  (gncomprobante GNC_b Inner join pckardex pck_B ON GNC_b.TransID = pck_B.TransID )"
'            sql = sql & " ON  PCK_A.ID = PCK_B.IDASIGNADO"
'            sql = sql & " where GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
'            sql = sql & " AND GNC_b.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion2) & ")"
'            sql = sql & " AND (GNC_b.FechaTrans  BETWEEN " & _
'                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
'                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
'            sql = sql & " and GNC.Estado<>3 and GNC.IdClienteRef<>0 and GNC_b.IdClienteRef<>0 "
'
'            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
'
'
'
'            '--datos de la Venta
'
'
'            sql = " Select pc.ruc, ' ' as Nombre, ' ' as CodTipoDocumento, "
'            sql = sql & " AnexoCodTipoComp, count(Gnc.NumTrans) as cantTrans,  "
'            sql = sql & " sum( (vw.PrecioTotalBase0 + (vw.PrecioTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float))) ))*-1  As Valor0,"
'            sql = sql & " sum( (vw.PrecioTotalBaseIVA + (vw.PrecioTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1 AS Valor12,"
'            sql = sql & " 0 AS ValorNO12,"
'            sql = sql & " sum( (vw.PrecioTotal + (vw.PrecioTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1   AS PrecioTotal"
'            sql = sql & " Into tmp1"
'            sql = sql & " from    ("
'            sql = sql & " tmp0"
'            sql = sql & " Right join gncomprobante Gnc "
'            sql = sql & " inner join GnTrans gnt on gnc.codtrans=GnT.codtrans"
'            sql = sql & " INNER JOIN PCPROVClI pc "
'            sql = sql & " left join anexo_TipoDocumento atd on pc.IdTipoDocumento=atd.Id"
'            sql = sql & " ON GNC.IdClienteRef=pc.idprovcli "
'            sql = sql & " inner join vwConsSUMIVKardexIVA vw"
'            sql = sql & " ON Gnc.TransID = vw.transid"
'            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
'            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
'            sql = sql & " and pc.bandempresapublica=0"
'            sql = sql & " and GNC.Estado<>3 " & cond
'            sql = sql & " and pc.ruc<>'9999999999999'"
'            sql = sql & " and  atd.CodTipoDocumento in ( 'R','C')"
'            sql = sql & " group by  pc.ruc,   AnexoCodTipoComp" 'CodTipoDocumento ,
'
'            sql = sql & " union all "
'
'            sql = sql & " Select  pc.ruc, ' ' as Nombre, ' ' as CodTipoDocumento , "
'            sql = sql & " AnexoCodTipoComp, count(Gnc.NumTrans) as cantTrans,  "
'            sql = sql & " sum( (vw.PrecioTotalBase0 + (vw.PrecioTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float))) ))*-1  As Valor0,"
'            sql = sql & " 0 AS Valor12,"
'            sql = sql & " sum( (vw.PrecioTotalBaseIVA + (vw.PrecioTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1 AS ValorNO12,"
'            sql = sql & " sum( (vw.PrecioTotal + (vw.PrecioTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1   AS PrecioTotal"
'            sql = sql & " from    ("
'            sql = sql & " tmp0"
'            sql = sql & " Right join gncomprobante Gnc "
'            sql = sql & " inner join GnTrans gnt on gnc.codtrans=GnT.codtrans"
'            'sql = sql & " INNER JOIN PCPROVClI pc ON GNC.IdClienteRef=pc.idprovcli "
'            sql = sql & " INNER JOIN PCPROVClI pc "
'            sql = sql & " left join anexo_TipoDocumento atd on pc.IdTipoDocumento=atd.Id"
'            sql = sql & " ON GNC.IdClienteRef=pc.idprovcli "
'
'            sql = sql & " inner join vwConsSUMIVKardexIVA vw"
'            sql = sql & " ON Gnc.TransID = vw.transid"
'            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
'            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
'            sql = sql & " and pc.bandempresapublica=1"
'            sql = sql & " and GNC.Estado<>3 " & cond
'            sql = sql & " and pc.ruc<>'9999999999999'"
'            sql = sql & " and  atd.CodTipoDocumento in ( 'R','C')"
'            sql = sql & " group by  pc.ruc ,AnexoCodTipoComp " ', CodTipoDocumento
'
'            sql = sql & " union all "
'
'            sql = sql & " Select '9999999999999' AS ruc, ' ' as Nombre, 'F' as CodTipoDocumento, "
'            sql = sql & " AnexoCodTipoComp, count(Gnc.NumTrans) as cantTrans,  "
'            sql = sql & " sum( (vw.PrecioTotalBase0 + (vw.PrecioTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float))) ))*-1  As Valor0,"
'            sql = sql & " sum( (vw.PrecioTotalBaseIVA + (vw.PrecioTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1 AS Valor12,"
'            sql = sql & " 0 AS ValorNO12,"
'            sql = sql & " sum( (vw.PrecioTotal + (vw.PrecioTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1   AS PrecioTotal"
'            sql = sql & " from    ("
'            sql = sql & " tmp0"
'            sql = sql & " Right join gncomprobante Gnc "
'            sql = sql & " inner join GnTrans gnt on gnc.codtrans=GnT.codtrans"
'            sql = sql & " INNER JOIN PCPROVClI pc "
'            sql = sql & " left join anexo_TipoDocumento atd on pc.IdTipoDocumento=atd.Id"
'            sql = sql & " ON GNC.IdClienteRef=pc.idprovcli "
'            sql = sql & " inner join vwConsSUMIVKardexIVA vw"
'            sql = sql & " ON Gnc.TransID = vw.transid"
'            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
'            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
'            sql = sql & " and pc.bandempresapublica=0"
'            sql = sql & " and GNC.Estado<>3 " & cond
'            'sql = sql & " and pc.ruc='0160043670001'"
'            sql = sql & " and  (atd.CodTipoDocumento not in ( 'R','C')"
'            sql = sql & " OR pc.ruc='9999999999999')"
'            sql = sql & " group by  AnexoCodTipoComp" 'CodTipoDocumento ,
'
'            sql = sql & " union all "
'
'            sql = sql & " Select  '9999999999999' AS ruc, ' ' as Nombre, 'F' as CodTipoDocumento , "
'            sql = sql & " AnexoCodTipoComp, count(Gnc.NumTrans) as cantTrans,  "
'            sql = sql & " sum( (vw.PrecioTotalBase0 + (vw.PrecioTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float))) ))*-1  As Valor0,"
'            sql = sql & " 0 AS Valor12,"
'            sql = sql & " sum( (vw.PrecioTotalBaseIVA + (vw.PrecioTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1 AS ValorNO12,"
'            sql = sql & " sum( (vw.PrecioTotal + (vw.PrecioTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1   AS PrecioTotal"
'            sql = sql & " from    ("
'            sql = sql & " tmp0"
'            sql = sql & " Right join gncomprobante Gnc "
'            sql = sql & " inner join GnTrans gnt on gnc.codtrans=GnT.codtrans"
'            'sql = sql & " INNER JOIN PCPROVClI pc ON GNC.IdClienteRef=pc.idprovcli "
'            sql = sql & " INNER JOIN PCPROVClI pc "
'            sql = sql & " left join anexo_TipoDocumento atd on pc.IdTipoDocumento=atd.Id"
'            sql = sql & " ON GNC.IdClienteRef=pc.idprovcli "
'
'            sql = sql & " inner join vwConsSUMIVKardexIVA vw"
'            sql = sql & " ON Gnc.TransID = vw.transid"
'            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
'            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
'            sql = sql & " and pc.bandempresapublica=1"
'            sql = sql & " and GNC.Estado<>3 " & cond
'            sql = sql & " and (pc.ruc='9999999999999'"
'            sql = sql & " OR  atd.CodTipoDocumento not in ( 'R','C'))"
'            sql = sql & " group by  AnexoCodTipoComp " ', CodTipoDocumento
'
'
'
'            VerificaExistenciaTabla 1
'            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
'
'
'            sql = " select ruc  into tmp4 from tmp1 where anexocodtipocomp=18"
'
'            VerificaExistenciaTabla 4
'            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
'
'
'
'
'
'            ' union de las tres tablas
'            sql = "SELECT DISTINCT " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB) & " as Fecha, "
'            sql = sql & " ' ' CodTipoDocumento,  '' as i,  (a.RUC)as ruc, '' as nombre, a.AnexoCodTipoComp, isnull(a.cantTrans,0),"
''            sql = sql & " isnull(a.Valor0*-1,0) , isnull(a.Valor12*-1,0), isnull(a.ValorNO12*-1,0) "
'            sql = sql & " case when a.AnexoCodTipoComp=18 then isnull(a.Valor0*-1,0) else isnull(a.Valor0,0) end as Valor0,"
'            sql = sql & " case when a.AnexoCodTipoComp=18 then isnull(a.Valor12*-1,0) else isnull(a.Valor12,0) end as Valor12,"
'            sql = sql & " case when a.AnexoCodTipoComp=18 then  isnull(a.ValorNO12*-1,0) else isnull(a.ValorNO12,0) end as ValorNO12"
'            sql = sql & "  "
'            sql = sql & " From tmp1 a  "
'            sql = sql & " union all "
'            'saca retenciones de este periodo afectadas a facturas de otro periodo
'            sql = sql & " Select  " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB) & " as Fecha, "
'            sql = sql & " ' ' as CodTipoDocumento, '' as i, (pc.RUC)as ruc, '' as nombre, '18' as AnexoCodTipoComp, 0 as cantTrans,"
'            sql = sql & "0 as Valor0, 0 as Valor12 , 0 as ValorNO12"
'            sql = sql & " From    (gncomprobante GNC_b INNER JOIN PCPROVClI pc"
'            sql = sql & " left join anexo_TipoDocumento atd on pc.IdTipoDocumento=atd.Id"
'            sql = sql & " ON GNC_b.IdClienteRef=pc.idprovcli   )"
'            sql = sql & " inner join tskardexret ivr on gnc_b.transid = ivr.transid"
'            sql = sql & " where GNC_b.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion2) & ")"
'            sql = sql & " AND (GNC_b.FechaTrans  BETWEEN " & _
'                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
'                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
'
'            sql = sql & " and GNC_B .Estado<>3 and GNC_b.IdClienteRef<>0 "
'            sql = sql & " and pc.ruc not in (select  ruc from tmp4) "
'
'
'            'sql = sql & " group by atd.CodTipoDocumento"
'
'            sql = sql & " order by a.AnexoCodTipoComp " ', a.Nombre
'
'    End With
'    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
'    UltimoRecordset rs
'    Set ConsANVentas2008ParaXML = rs
'    Set rs = Nothing
'    Me.GrabaGNLogAccion "CONSULTA", "Cons Compraspara Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
'    VerificaExistenciaTabla 0
'    VerificaExistenciaTabla 1
'    VerificaExistenciaTabla 2
'    VerificaExistenciaTabla 3
'    VerificaExistenciaTabla 4
'
'End Function
Public Function ConsANVentas2008ParaXML() As Variant
    Dim pck As PCKardex, pcd As PCDocAsignado
    Dim objGnComp As GNComprobante, objGnCompDocOriginal As GNComprobante
    Dim sql As String, cond As String, CadenaValores As String
    Dim Recargo As String 'CadenaAgrupa  As String
    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
    Dim from As String, numReg As Long, f1 As String
    Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
    Dim Servicios As String, Bienes As String, RowRet As Long
    Const COL_BASESER = 15
    'segunda parte de la consulta: carga los valores de  Detalles de Anexos
    Const COL_FECHA = 2
    Const COL_CODCREDTRIB = 7
    Const COL_TRANSID = 1
    Const COL_TRANSRET = 5
    Dim condServ As String
    Dim condBien As String
    Dim Vista As String
    Dim pos As Integer
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   With gobjCond
        'Reporte de un mes a la vez
        f1 = DateSerial(Year(.fecha1), Month(.fecha1), 1)
        cond = " AND GNC.FechaTrans BETWEEN " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & _
               " AND " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB)
            VerificaExistenciaTabla 0
            VerificaExistenciaTabla 1
            VerificaExistenciaTabla 2
            VerificaExistenciaTabla 3
            pos = InStr(1, UCase(Me.GNOpcion.NombreEmpresa), "DISFRA")
            If pos > 0 Then
                Vista = "vwConsSUMIVKardexIVA2B"
            Else
                Vista = "vwConsSUMIVKardexIVA"
            End If
               sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as TotalDescuento Into tmp0 " & _
                    "From IvRecargo ivR inner join " & _
                        "IvKardexRecargo ivkR Inner join " & _
                            "GnComprobante gNc  " & _
                        "On ivkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = IvkR.IdRecargo "
                sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.Sucursal) & ") " & cond & _
                    " AND GNC.CodTrans IN (" & PreparaCadena(.CodGrupo) & ")" & _
                  "Group by IvkR.TransID"
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
'--datos de indices
            VerificaExistenciaTabla 3
            sql = " Select  DISTINCT GNC.IdClienteRef AS FC_id, GNC_b.IdClienteRef AS rtp_id1, "
            sql = sql & " CASE WHEN GNC_b.IdClienteRef=0 THEN PCK_b.IdProvcli WHEN GNC_b.IdClienteRef<>0 THEN GNC_b.IdClienteRef end as rtp_id "
            sql = sql & " Into tmp3"
            sql = sql & " From    (gncomprobante GNC Inner join pckardex pck_a ON GNC.TransID = pck_a.TransID ) INNER JOIN"
            sql = sql & "  (gncomprobante GNC_b Inner join pckardex pck_B ON GNC_b.TransID = pck_B.TransID )"
            sql = sql & " ON  PCK_A.ID = PCK_B.IDASIGNADO"
            sql = sql & " where GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
            sql = sql & " AND GNC_b.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion2) & ")"
            sql = sql & " AND (GNC_b.FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = sql & " and GNC.Estado<>3 and GNC.IdClienteRef<>0 and GNC_b.IdClienteRef<>0 "
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            '--datos de la Venta
            sql = " Select pc.ruc, ' ' as Nombre, ' ' as CodTipoDocumento, "
            sql = sql & " AnexoCodTipoComp, count(Gnc.NumTrans) as cantTrans,  "
            sql = sql & "  CASE WHEN SUM(vw.PrecioTotal)<>0 THEN sum( (vw.PrecioTotalBase0 + (vw.PrecioTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float))) ))*-1 END As Valor0,"
            sql = sql & "  CASE WHEN SUM(vw.PrecioTotal)<>0 THEN sum( (vw.PrecioTotalBaseIVA + (vw.PrecioTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1 END AS Valor12,"
            sql = sql & " 0 AS ValorNO12,"
            sql = sql & "  CASE WHEN SUM(vw.PrecioTotal)<>0 THEN sum( (vw.PrecioTotal + (vw.PrecioTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1 END  AS PrecioTotal"




            sql = sql & " Into tmp1"
            sql = sql & " from    ("
            sql = sql & " tmp0"
            sql = sql & " Right join gncomprobante Gnc "
            sql = sql & " inner join GnTrans gnt on gnc.codtrans=GnT.codtrans"
            sql = sql & " INNER JOIN PCPROVClI pc "
            sql = sql & " left join anexo_TipoDocumento atd on pc.IdTipoDocumento=atd.Id"
            sql = sql & " ON GNC.IdClienteRef=pc.idprovcli "
            sql = sql & " inner join " & Vista & " vw"

            sql = sql & " ON Gnc.TransID = vw.transid"
            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
            sql = sql & " and pc.bandempresapublica=0"
            sql = sql & " and GNC.Estado<>3 " & cond
            sql = sql & " and pc.ruc<>'9999999999999'"
            sql = sql & " and  atd.CodTipoDocumento in ( 'R','C')"
            sql = sql & " group by  pc.ruc,   AnexoCodTipoComp  " 'CodTipoDocumento ,"
           sql = sql & " union all "
            sql = sql & " Select  pc.ruc, ' ' as Nombre, ' ' as CodTipoDocumento , "
            sql = sql & " AnexoCodTipoComp, count(Gnc.NumTrans) as cantTrans,  "
            sql = sql & " CASE WHEN SUM(vw.PrecioTotal)<>0 THEN sum( (vw.PrecioTotalBase0 + (vw.PrecioTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float))) ))*-1 END As Valor0,"
            sql = sql & " 0 AS Valor12,"
            sql = sql & " CASE WHEN SUM(vw.PrecioTotal)<>0 THEN sum( (vw.PrecioTotalBaseIVA + (vw.PrecioTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1 END AS ValorNO12,"
            sql = sql & " CASE WHEN SUM(vw.PrecioTotal)<>0 THEN sum( (vw.PrecioTotal + (vw.PrecioTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1 END  AS PrecioTotal"
            sql = sql & " from    ("
            sql = sql & " tmp0"
            sql = sql & " Right join gncomprobante Gnc "
            sql = sql & " inner join GnTrans gnt on gnc.codtrans=GnT.codtrans"
            'sql = sql & " INNER JOIN PCPROVClI pc ON GNC.IdClienteRef=pc.idprovcli "
            sql = sql & " INNER JOIN PCPROVClI pc "
            sql = sql & " left join anexo_TipoDocumento atd on pc.IdTipoDocumento=atd.Id"
            sql = sql & " ON GNC.IdClienteRef=pc.idprovcli "
            sql = sql & " inner join " & Vista & " vw"

            sql = sql & " ON Gnc.TransID = vw.transid"
            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
            sql = sql & " and pc.bandempresapublica=1"
            sql = sql & " and GNC.Estado<>3 " & cond
            sql = sql & " and pc.ruc<>'9999999999999'"
            sql = sql & " and  atd.CodTipoDocumento in ( 'R','C')"
            sql = sql & " group by  pc.ruc ,AnexoCodTipoComp " ', CodTipoDocumento
           sql = sql & " union all "
            sql = sql & " Select '9999999999999' AS ruc, ' ' as Nombre, 'F' as CodTipoDocumento, "
            sql = sql & " AnexoCodTipoComp, count(Gnc.NumTrans) as cantTrans,  "
            sql = sql & " CASE WHEN SUM(vw.PrecioTotal)<>0 THEN sum( (vw.PrecioTotalBase0 + (vw.PrecioTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float))) ))*-1 END  As Valor0,"
            sql = sql & " CASE WHEN SUM(vw.PrecioTotal)<>0 THEN sum( (vw.PrecioTotalBaseIVA + (vw.PrecioTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1 END AS Valor12,"
            sql = sql & " 0 AS ValorNO12,"
            sql = sql & " CASE WHEN SUM(vw.PrecioTotal)<>0 THEN sum( (vw.PrecioTotal + (vw.PrecioTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1 END  AS PrecioTotal"




            sql = sql & " from    ("
            sql = sql & " tmp0"
            sql = sql & " Right join gncomprobante Gnc "
            sql = sql & " inner join GnTrans gnt on gnc.codtrans=GnT.codtrans"
            sql = sql & " INNER JOIN PCPROVClI pc "
            sql = sql & " left join anexo_TipoDocumento atd on pc.IdTipoDocumento=atd.Id"
            sql = sql & " ON GNC.IdClienteRef=pc.idprovcli "
            sql = sql & " inner join " & Vista & " vw"

            sql = sql & " ON Gnc.TransID = vw.transid"
            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
            sql = sql & " and pc.bandempresapublica=0"
            sql = sql & " and GNC.Estado<>3 " & cond
            'sql = sql & " and pc.ruc='0160043670001'"
            sql = sql & " and  (atd.CodTipoDocumento not in ( 'R','C')"
            sql = sql & " OR pc.ruc='9999999999999')"
            sql = sql & " group by  AnexoCodTipoComp " 'CodTipoDocumento ,
           sql = sql & " union all "
            sql = sql & " Select  '9999999999999' AS ruc, ' ' as Nombre, 'F' as CodTipoDocumento , "
            sql = sql & " AnexoCodTipoComp, count(Gnc.NumTrans) as cantTrans,  "
            sql = sql & " CASE WHEN SUM(vw.PrecioTotal)<>0 THEN sum( (vw.PrecioTotalBase0 + (vw.PrecioTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float))) ))*-1 END As Valor0,"
            sql = sql & " 0 AS Valor12,"
            sql = sql & " CASE WHEN SUM(vw.PrecioTotal)<>0 THEN sum( (vw.PrecioTotalBaseIVA + (vw.PrecioTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1 END AS ValorNO12,"
            sql = sql & " CASE WHEN SUM(vw.PrecioTotal)<>0 THEN sum( (vw.PrecioTotal + (vw.PrecioTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1  END AS PrecioTotal"
            sql = sql & " from    ("
            sql = sql & " tmp0"
            sql = sql & " Right join gncomprobante Gnc "
            sql = sql & " inner join GnTrans gnt on gnc.codtrans=GnT.codtrans"
            'sql = sql & " INNER JOIN PCPROVClI pc ON GNC.IdClienteRef=pc.idprovcli "
            sql = sql & " INNER JOIN PCPROVClI pc "
            sql = sql & " left join anexo_TipoDocumento atd on pc.IdTipoDocumento=atd.Id"
            sql = sql & " ON GNC.IdClienteRef=pc.idprovcli "
            sql = sql & " inner join " & Vista & " vw"

            sql = sql & " ON Gnc.TransID = vw.transid"
            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
            sql = sql & " and pc.bandempresapublica=1"
            sql = sql & " and GNC.Estado<>3 " & cond
            sql = sql & " and (pc.ruc='9999999999999'"
            sql = sql & " OR  atd.CodTipoDocumento not in ( 'R','C'))"
            sql = sql & " group by  AnexoCodTipoComp " ', CodTipoDocumento
           VerificaExistenciaTabla 1
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            sql = " select ruc  into tmp4 from tmp1 where anexocodtipocomp=18"
            VerificaExistenciaTabla 4
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            ' union de las tres tablas
            sql = "SELECT DISTINCT " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB) & " as Fecha, "
            sql = sql & " ' ' CodTipoDocumento,  '' as i,  (a.RUC)as ruc, '' as nombre, a.AnexoCodTipoComp, isnull(a.cantTrans,0),"
'            sql = sql & " isnull(a.Valor0*-1,0) , isnull(a.Valor12*-1,0), isnull(a.ValorNO12*-1,0) "
            sql = sql & " case when a.AnexoCodTipoComp=18 then isnull(a.Valor0*-1,0) else isnull(a.Valor0,0) end as Valor0,"
            sql = sql & " case when a.AnexoCodTipoComp=18 then isnull(a.Valor12*-1,0) else isnull(a.Valor12,0) end as Valor12,"
            sql = sql & " case when a.AnexoCodTipoComp=18 then  isnull(a.ValorNO12*-1,0) else isnull(a.ValorNO12,0) end as ValorNO12"
            sql = sql & "  "
            sql = sql & " From tmp1 a  "
            sql = sql & " union all "
            'saca retenciones de este periodo afectadas a facturas de otro periodo
            sql = sql & " Select  DISTINCT " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB) & " as Fecha, "
            sql = sql & " ' ' as CodTipoDocumento, '' as i, (pc.RUC)as ruc, '' as nombre, '18' as AnexoCodTipoComp, 0 as cantTrans,"
            sql = sql & "0 as Valor0, 0 as Valor12 , 0 as ValorNO12"
            sql = sql & " From    (gncomprobante GNC_b INNER JOIN PCPROVClI pc"
            sql = sql & " left join anexo_TipoDocumento atd on pc.IdTipoDocumento=atd.Id"
            sql = sql & " ON GNC_b.IdClienteRef=pc.idprovcli   )"
            sql = sql & " inner join tskardexret ivr on gnc_b.transid = ivr.transid"
            sql = sql & " where GNC_b.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion2) & ")"
            sql = sql & " AND (GNC_b.FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = sql & " and GNC_B .Estado<>3 and GNC_b.IdClienteRef<>0 "
            sql = sql & " and pc.ruc not in (select  ruc from tmp4) "
            'sql = sql & " group by atd.CodTipoDocumento"
            sql = sql & " order by a.AnexoCodTipoComp " ', a.Nombre
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANVentas2008ParaXML = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Compraspara Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 4
End Function



Public Function ConsANRetencionVentas2008ParaXML(ByVal RUC As String) As Recordset
    Dim sql As String, rs As Recordset
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    
    With gobjCond
        sql = " Select distinct ts.bandiva, "
        'ts.codretencion, ir.CodRetencion, pc.ruc,"
        'sql = sql & " CASE WHEN tsk.Base<>0 THEN round((tsk.Debe + tsk.Haber) * 100 / tsk.Base,0)   ELSE 0    END AS porcent,"
        sql = sql & " pc.ruc,"
        'sql = sql & " gnc.FechaTrans , gnt.NumSerieEstablecimiento, gnt.NumSeriePunto, gnc.NumTrans, gnt.NumAutorizacion, "
        sql = sql & " sum(tsk.base) as base, sum (tsk.debe) as debe "
        sql = sql & " from Gncomprobante gnc inner join pcprovcli pc on gnc.idclienteref= pc.idprovcli"
        sql = sql & " inner join tskardexret tsk"
        sql = sql & " inner join tsretencion ts"
        sql = sql & " on tsk.idretencion=ts.idretencion"
        sql = sql & " on gnc.transid=tsk.transid"
        sql = sql & " Where gnc.Estado <> 3"
            sql = sql & " AND (GNC.FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
    '       sql = sql & " and gnc.codtrans in (" & PreparaCadena(gobjCond.CodRetencion2) & ")"
        sql = sql & " and pc.ruc='" & RUC & "'"
        sql = sql & " AND CODF104<>'COM'"
        sql = sql & "  group by ts.BandIVA , pc.ruc"
        
        rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    End With
    UltimoRecordset rs
    Set ConsANRetencionVentas2008ParaXML = rs
    Set rs = Nothing

End Function

Public Function ConsANComprobantesAnulado2008ParaXML() As Recordset
    Dim sql As String, cond As String, CadenaValores As String
    Dim rs As Recordset
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    With gobjCond
            cond = " AND (GNC.FechaTrans  BETWEEN " & _
                    FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                    FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = " select  FechaTrans, gnc.CodTrans, AnexoCodTipoComp,  "
            sql = sql & " gnc.NumSerieEstaSRI, gnc.NumSeriePuntoSRI, "
'            'jeaa 07/07/2006
            sql = sql & " case left(gnc.CodTrans,2)"
            sql = sql & " when 'FC' then "
            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura")) > 0 Then
                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura") > 0 Then
                    sql = sql & " NumDocRef  "
                Else
                     sql = sql & " NumTrans  "
                 End If
            Else
                sql = sql & " NumTrans  "
            End If
            sql = sql & " when 'FD' then "
            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura")) > 0 Then
                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura") > 0 Then
                    sql = sql & " NumDocRef  "
                Else
                     sql = sql & " NumTrans  "
                 End If
            Else
                sql = sql & " NumTrans  "
            End If
            sql = sql & " when 'FA' then "
            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura")) > 0 Then
                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura") > 0 Then
                    sql = sql & " NumDocRef  "
                Else
                     sql = sql & " NumTrans  "
                 End If
            Else
                sql = sql & " NumTrans  "
            End If
            sql = sql & " when 'NV' then "
            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura")) > 0 Then
                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura") > 0 Then
                    sql = sql & " NumDocRef  "
                Else
                     sql = sql & " NumTrans  "
                 End If
            Else
                sql = sql & " NumTrans  "
            End If
            sql = sql & " when 'VT' then "
            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura")) > 0 Then
                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura") > 0 Then
                    sql = sql & " NumDocRef  "
                Else
                     sql = sql & " NumTrans  "
                 End If
            Else
                sql = sql & " NumTrans  "
            End If
            sql = sql & " when 'RT' then "
            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosRetencion")) > 0 Then
                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosRetencion") > 0 Then
                    sql = sql & " NumDocRef "
                Else
                     sql = sql & " NumTrans  "
                End If
            Else
                sql = sql & " NumTrans  "
            End If
            sql = sql & " Else "
            sql = sql & " NumTrans "
            sql = sql & " end as numtrans, "
            'sql = sql & " numtrans, "
            'jeaa 12/09/2007
            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion")) > 0 Then
                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion") > 0 Then
                    'sql = sql & " gnc.AutorizacionSRI as NumAutorizacion , "
                    sql = sql & " case when substring(Opcion2, 122, 1)='S' and tipoemision='1' and TipoAmbiente = '2'  then NumeroAutorizacion else  gnc.AutorizacionSRI end as AutorizacionSRI,"

                Else
                    sql = sql & " gnc.AutorizacionSRI as NumAutorizacion, "
                End If
            Else
                sql = sql & " gnc.AutorizacionSRI as NumAutorizacion, "
            End If
            sql = sql & " GNC.FechaTrans"
            sql = sql & " from gncomprobante gnc inner join gntrans gnt on gnc.codtrans=gnt.codtrans "
            sql = sql & " left join InfoComprobantes Inf  on gnc.transid=inf.transID"
           sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodPC2) & ")"
            sql = sql & " and Estado = 3 " & cond
            sql = sql & " order by AnexoCodTipoComp "
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANComprobantesAnulado2008ParaXML = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons CompAnuladas para Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
End Function


Public Function ConsGNTransAnexos( _
                    Optional ByVal OrdenAscendente As Boolean) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    
    '*** MAKOTO 03/oct/00
    sql = "SELECT"
    If gobjCond.TopN > 0 Then
        sql = sql & " TOP " & gobjCond.TopN
    End If
    
    '*** MAKOTO 05/feb/01 Mod. Aumentado 'NumDocRef' y 'Nombre'
    sql = sql & " TransID, FechaTrans, CodAsiento, CodTrans, NumTrans, " & _
            " Nombre, descripcion, NumSerieEstablecimiento, NumSeriePunto, NumSecuencial,NumAutSRI, CodCredTrib, CodTipoComp, Estado  FROM vwConsGNTransAnexos "
    
    'Condición de FechaTrans
    cond = "FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB)
    
    'Condición de CodTrans
    If Len(cond) > 0 Then cond = cond & " AND "
    If Len(gobjCond.CodTrans) > 0 Then      'Si está especificado transaccion
        'Si es una sola transaccion
        If InStr(gobjCond.CodTrans, ",") = 0 Then
            cond = cond & "(CodTrans='" & gobjCond.CodTrans & "')"
        'Si está seleccionado varias trans.
        Else
            cond = cond & "(CodTrans IN (" & gobjCond.CodTrans & "))"
        End If
    Else
        'Si no hay condicion de cod.trans, selecciona todas las trans.
        ' que tenga permiso
        s = gobjMain.GrupoActual.PermisoActual.ListaTrans(True)
        If Len(s) > 0 Then
            cond = cond & "(CodTrans " & s & ")"
        Else
            cond = cond & "(CodTrans = '-------')"    'Para que NO devuelva nada si no tiene ningún permiso  '*** MAKOTO 26/dic/00
        End If
    End If
    
    'Condición de NumTrans
    If (gobjCond.NumTrans1 > 0) And (gobjCond.NumTrans2 > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans BETWEEN " & gobjCond.NumTrans1 & " AND " & gobjCond.NumTrans2 & ")"
    ElseIf gobjCond.NumTrans1 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans>=" & gobjCond.NumTrans1 & ")"
    ElseIf gobjCond.NumTrans2 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans<=" & gobjCond.NumTrans2 & ")"
    End If
    ' establecimiento
    If Len(gobjCond.NumEsta) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumSerieEstablecimiento='" & gobjCond.NumEsta & "')"
    End If
    
' punto
    If Len(gobjCond.NumPunto) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumSeriePunto='" & gobjCond.NumPunto & "')"
    End If
    
' secuencial
    If Len(gobjCond.Numsec) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumSecuencial like '%" & gobjCond.Numsec & "%')"
    End If
    
' Autorizacion
    If Len(gobjCond.NumAuto) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumAutSRI like '%" & gobjCond.NumAuto & "%')"
    End If
    
' sustento
    If Len(gobjCond.CodSust) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodCredTrib = '" & gobjCond.CodSust & "')"
    End If
    
' Comprobante
    If Len(gobjCond.CodComp) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodTipoComp = '" & gobjCond.CodComp & "')"
    End If
    
    
    
    'Condición de Estado
    If gobjCond.EstadoBool(ESTADO_NOAPROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_NOAPROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_APROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_APROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_DESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_DESPACHADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_ANULADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_ANULADO & ")"
    End If
    '----------------------------------------
    '----- CAO 13/06/2006
    '-----------------------------------------
    If gobjCond.EstadoBool(ESTADO_SEMDESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_SEMDESPACHADO & ")"
    End If
    
    If Len(gobjCond.CodCentro1) > 0 And Len(gobjCond.CodCentro2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " codCentro between '" & gobjCond.CodCentro1 & "' and '" & gobjCond.CodCentro2 & "'"
    End If
    
    
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond

    
    'Ordern de filas
    If OrdenAscendente Then
        sql = sql & " ORDER BY FechaTrans, HoraTrans, TransID"         '*** MAKOTO 07/dic/00 Modificado para HoraTrans
    Else
        sql = sql & " ORDER BY FechaTrans DESC, HoraTrans DESC, TransID DESC"       '*** MAKOTO 07/dic/00 HoraTrans agregado
    End If
    
    Set rs = Me.OpenRecordset(sql)
    Set ConsGNTransAnexos = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta General Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function


Public Function ConsANLiquidacionCompras2008() As Variant
    Dim pck As PCKardex, pcd As PCDocAsignado
    Dim objGnComp As GNComprobante, objGnCompDocOriginal As GNComprobante
    Dim sql As String, cond As String, CadenaValores As String
    Dim Recargo As String 'CadenaAgrupa  As String
    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
    Dim from As String, numReg As Long
    Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
    Dim Servicios As String, Bienes As String, RowRet As Long
    Const COL_BASESER = 15
    'segunda parte de la consulta: carga los valores de  Detalles de Anexos
    Const COL_FECHA = 2
    Const COL_CODCREDTRIB = 7
    Const COL_TRANSID = 1
    Const COL_TRANSRET = 5
    Dim condServ As String
    Dim condBien As String
    
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   
    With gobjCond
        
            cond = " AND (GNC.FechaTrans  BETWEEN " & _
                    FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                    FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            
'            If Len(.Usuario1) > 0 Or Len(.Usuario2) > 0 Then
'                   cond = cond & " AND pcprovcli.CodProvCli  BETWEEN  '" & .Usuario1 & "' AND '" & .Usuario2 & "' "
'            End If
            
            VerificaExistenciaTabla 0
            VerificaExistenciaTabla 1
            VerificaExistenciaTabla 2
            VerificaExistenciaTabla 3
            VerificaExistenciaTabla 4
            VerificaExistenciaTabla 5
            VerificaExistenciaTabla 6
            
            sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as TotalDescuento Into tmp0 " & _
                    "From IvRecargo ivR inner join " & _
                        "IvKardexRecargo ivkR Inner join " & _
                            "GnComprobante gNc  " & _
                        "On ivkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = IvkR.IdRecargo "
            sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.CodForma) & ") " & cond & _
                    " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")" & _
                  "Group by IvkR.TransID"
                  
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            'jeaa 09/01/2007
            'datos ICE
            sql = " Select Ivkr.TransID, "
            sql = sql & " SUM(IVK.CostoRealTotal) AS BASEice,"
            sql = sql & " MAX(IVC.CodICE) AS CodICE, SUM(ivkr.Valor) As ValorICE"
            sql = sql & " Into tmp6"
            sql = sql & " From IvRecargo ivR"
            sql = sql & " inner join IvKardexRecargo ivkR"
            sql = sql & " INNER JOIN IVKARDEX IVK"
            sql = sql & " INNER JOIN IVINVENTARIO IV"
            sql = sql & " INNER JOIN IVRECARGOICE IVC"
            sql = sql & " ON IV.IDICE=IVC.IDICE"
            sql = sql & " ON IVK.IDINVENTARIO=IV.IDINVENTARIO"
            sql = sql & " ON IVKR.TRANSID=IVK.TRANSID"
            sql = sql & " Inner join GnComprobante gNc"
            sql = sql & " On ivkr.TransID = gNc.TransID"
            sql = sql & " On Ivr.IdRecargo = IvkR.IdRecargo"
            sql = sql & " Where gnc.Estado <> 3"
            sql = sql & " AND ivr.CodRecargo IN ('" & gobjMain.EmpresaActual.GNOpcion.ObtenerValor("RecDescParaICE") & "')" & cond
            sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")"
            sql = sql & " Group by IvkR.TransID"
            
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
'--datos de indices
            VerificaExistenciaTabla 3
            sql = " Select  DISTINCT GNC.TransID AS cp_id, GNC_b.TransID AS rtp_id"
            sql = sql & " Into tmp3"
            sql = sql & " From    (gncomprobante GNC Inner join pckardex pck_a ON GNC.TransID = pck_a.TransID ) INNER JOIN"
            sql = sql & "  (gncomprobante GNC_b Inner join pckardex pck_B ON GNC_b.TransID = pck_B.TransID )"
            sql = sql & " ON  PCK_A.ID = PCK_B.IDASIGNADO"
            sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " AND GNC_b.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion1) & ")"
            sql = sql & " AND (GNC.FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = sql & " and GNC.Estado<>3 and GNC_b.estado<>3 "
            
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            '--datos de la compra
            sql = " Select  GNC.TransID, GNC.FechaTrans, GNC.FechaTrans as fechaanexos, pcprovcli.ruc,"
            sql = sql & " GNC.Nombre, '06' as CodCredTrib, anc.CodComprobante as CodTipoComp, gnt.NumAutorizacion as numautsri,"
            sql = sql & " gnt.NumSerieEstablecimiento, "
            sql = sql & " gnc.numtrans as numsecuencial, gnc.Descripcion, "
            sql = sql & " 'S' AS BandDev,"
            sql = sql & " Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as Trans,"
            sql = sql & " Gnc.CodTrans as Transa, Gnc.NumTrans as NumTransa,"
            sql = sql & " Case vw.CostoTotalBase0 When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBase0 + (vw.CostoTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))) ) end As Valor0, "
            sql = sql & " Case vw.CostoTotalBaseIVA When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseIVA + (vw.CostoTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) end AS Valor12, "
            sql = sql & " Case vw.CostoTotal When 0 then 0 else "
            sql = sql & " vw.SignoCompra  * (vw.CostoTotal + (vw.CostoTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))))  End AS CostoTotal,  "
'            sql = sql & " gnt.NumSerieEstablecimiento ,"
            sql = sql & " gnt.NumSeriePunto, gnt.FechaCaducidad, "
            sql = sql & " tmp6.BASEice, tmp6.CodICE ,tmp6.ValorICE"
            sql = sql & " Into tmp1"
            sql = sql & " from    (( tmp0 Right join gncomprobante Gnc "
            sql = sql & " inner join gntrans gnt left join Anexo_Comprobantes anc on anc.id=gnt.AnexoCodTipoComp "
            sql = sql & " inner join GNTransRecargo gntr"
            sql = sql & " inner join ivrecargo ivr"
            sql = sql & " on ivr.idrecargo=gntr.idrecargo"
            sql = sql & " on gnt.codtrans= gntr.codtrans"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " left join tmp6 on gnc.transid=tmp6.transid"
            sql = sql & " inner join vwConsSUMIVKardexIVA vw ON Gnc.TransID = vw.transid "
            sql = sql & " ON tmp0.TransID = Gnc.TransID))"
            'sql = sql & " left join Anexos Ane on Gnc.TransID = Ane.Transid)"
            sql = sql & " right join pcprovcli  on gnc.IdProveedorRef=pcprovcli.idprovcli"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " and GNC.Estado<>3 " & cond
            
            VerificaExistenciaTabla 1
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            '-- datos de las retenciones
            
            
            
            ' union de las tres tablas
            ' union de las tres tablas
            sql = " select  DISTINCT  a.Transid,a.FechaAnexos, a.FechaTrans, a.Transa,  a.NumTransa, "
            sql = sql & "a.RUC, a.Nombre, "
            sql = sql & " a.NumSerieEstablecimiento , a.NumSeriePunto, "
            sql = sql & " a.NumSecuencial, a.NumAutSRI, a.FechaCaducidad, "
            sql = sql & "a.CodCredTrib, a.CodTipoComp, "
            sql = sql & " a.Descripcion, a.Valor0, a.Valor12,0 "
                sql = sql & " From tmp1 a  "
            sql = sql & " order by a.CodTipoComp"

            
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANLiquidacionCompras2008 = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Compraspara Anexos 2008" & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 4
End Function


Public Function ConsGNTransEgresoAuto(BandNomcli As Boolean, _
                    Optional ByVal OrdenAscendente As Boolean) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    
    sql = "SELECT transid, FechaTrans, IDPago , Codtrans   ,Numtrans,  NumLetra ,  Nombre ,FechaVenci, CodForma , "
    sql = sql & " Case  " & gobjCond.numMoneda & _
               " WHEN 1 THEN Saldo1 " & _
            "WHEN 2 THEN Saldo2 " & _
            "WHEN 3 THEN Saldo3 " & _
            "WHEN 4 THEN Saldo4  END as Valor,  "
    sql = sql & " 0 AS Auto, 0 As ValorPago"
    'aquí asignar la condición de búsqueda por proveedor  en cond
    sql = sql & " From vwConsPCProyCobroPago "
    sql = sql & " WHERE  "
    sql = sql & " FechaVenci <= " & FechaYMD(gobjCond.fecha2, gobjMain.EmpresaActual.TipoDB)
    'sql = sql & " and " & FechaYMD(gobjCond.fecha2, gobjMain.EmpresaActual.TipoDB) & " And (PorCobrar =  0 )"
    sql = sql & "  And (PorCobrar =  0 )"
    sql = sql & " AND (CASE " & gobjCond.numMoneda & " WHEN 1 THEN Saldo1 WHEN 2 THEN Saldo2  "
    sql = sql & " WHEN 3 THEN Saldo3 WHEN 4 THEN Saldo4 END >0) "
    sql = sql & " and  CodTrans IN (" & (gobjCond.CodTrans) & ")"
    sql = sql & " and  CodForma IN (" & (gobjCond.CodForma) & ")"
    If BandNomcli Then
            sql = sql & " order by Nombre  "
    Else
        sql = sql & " order by FechaVenci "
    End If
    Set rs = Me.OpenRecordset(sql)
    Set ConsGNTransEgresoAuto = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta General " & gobjCond.fecha1 + gobjCond.Hora1 & "-" & gobjCond.fecha2 + gobjCond.Hora2, "GN"
End Function

Public Function ConsGNTransEgresoAutoRoles(BandNomcli As Boolean, _
                    Optional ByVal OrdenAscendente As Boolean) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    sql = "SELECT vw.transid, vw.FechaTrans, vw.IDPago , vw.Codtrans,vw.Numtrans,  vw.NumLetra,vw.codprovcli,vw.Nombre ,vw.FechaVenci, vw.CodForma , "
    sql = sql & " Case  " & gobjCond.numMoneda & _
            " WHEN 1 THEN vw.Saldo1 " & _
            "WHEN 2 THEN vw.Saldo2 " & _
            "WHEN 3 THEN vw.Saldo3 " & _
            "WHEN 4 THEN vw.Saldo4  END as Valor,  "
    sql = sql & " 0 AS Auto, 0 As ValorPago"
    'aquí asignar la condición de búsqueda por proveedor  en cond
    sql = sql & " From vwConsPCProyCobroPago vw  "
    sql = sql & " INNER JOIN Elemento ele  ON Ele.idelemento = vw.idelemento  "
    sql = sql & " WHERE  "
    sql = sql & " vw.FechaVenci <= " & FechaYMD(gobjCond.fecha1, gobjMain.EmpresaActual.TipoDB)
    'sql = sql & " and " & FechaYMD(gobjCond.fecha2, gobjMain.EmpresaActual.TipoDB) & " And (PorCobrar =  0 )"
    sql = sql & "  And (vw.PorCobrar =  0 )"
    sql = sql & " AND (CASE " & gobjCond.numMoneda & " WHEN 1 THEN vw.Saldo1 WHEN 2 THEN vw.Saldo2  "
    sql = sql & " WHEN 3 THEN vw.Saldo3 WHEN 4 THEN vw.Saldo4 END >0) "
    sql = sql & " and  vw.CodTrans IN (" & (gobjCond.CodTrans) & ")"
    sql = sql & " and  vw.CodForma IN (" & (gobjCond.CodForma) & ")"
    If Len(gobjCond.Codelemento) > 0 Then
    sql = sql & " and  Ele.codelemento = '" & gobjCond.Codelemento & "'"
    End If
    If BandNomcli Then
            sql = sql & " order by vw.Nombre  "
    Else
        sql = sql & " order by vw.FechaVenci "
    End If
    Set rs = Me.OpenRecordset(sql)
    Set ConsGNTransEgresoAutoRoles = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta General " & gobjCond.fecha1 + gobjCond.Hora1 & "-" & gobjCond.fecha2 + gobjCond.Hora2, "GN"
End Function

Public Function ConsTSSaldoActualBanco(ByVal CodBanco As String, FechaCorte As Date) As Currency
    Dim sql As String, cond As String, s As String, rs As Recordset
    
    sql = " SELECT "
    sql = sql & " Sum((Debe0 - Haber0) / Cotizacion2) As saldo"
    sql = sql & " From vwConsTSKardex"
    sql = sql & " WHERE FechaVenci <= " & FechaYMD(DateAdd("d", 1, FechaCorte), gobjMain.EmpresaActual.TipoDB)
    sql = sql & " and codbanco = '" & CodBanco & "' "
    sql = sql & " GROUP BY CodBanco"
    
    Set rs = Me.OpenRecordset(sql)
    ConsTSSaldoActualBanco = rs.Fields("saldo")
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Saldo Banco " & gobjCond.FechaCorte, "GN"
End Function


Public Function ConsGNTransIngresoAutoNew(BandForma As Boolean, _
                    Optional ByVal OrdenAscendente As Boolean) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    
    '*** MAKOTO 03/oct/00
    sql = "SELECT"
    
    '*** MAKOTO 05/feb/01 Mod. Aumentado 'NumDocRef' y 'Nombre'
    sql = sql & " TransID, FechaTrans , CodAsiento, CodTrans, NumTrans, " & _
            "NumDocRef, Nombre, Descripcion,  nombreforma, codforma, Estado, '0' as ValorPagado FROM vwConsGNTransForma "
    
    'Condición de FechaTrans
    cond = "FechaTrans  BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB, True) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB, True)
    
    'Condición de CodTrans
    If Len(cond) > 0 Then cond = cond & " AND "
    If Len(gobjCond.CodTrans) > 0 Then      'Si está especificado transaccion
        'Si es una sola transaccion
        If InStr(gobjCond.CodTrans, ",") = 0 Then
            cond = cond & "(CodTrans=" & gobjCond.CodTrans & ")"
        'Si está seleccionado varias trans.
        Else
            cond = cond & "(CodTrans IN (" & gobjCond.CodTrans & "))"
        End If
    Else
        'Si no hay condicion de cod.trans, selecciona todas las trans.
        ' que tenga permiso
'        s = gobjMain.GrupoActual.PermisoActual.ListaTrans(True)
'        If Len(s) > 0 Then
'            cond = cond & "(CodTrans " & s & ")"
'        Else
            cond = cond & "(CodTrans = '-------')"    'Para que NO devuelva nada si no tiene ningún permiso  '*** MAKOTO 26/dic/00
'        End If
    End If
    
    If Len(gobjCond.CodForma) > 0 Then      'Si está especificado Forma
        'Si es una sola transaccion
        If InStr(gobjCond.CodForma, ",") = 0 Then
            cond = cond & "and (Codforma=" & gobjCond.CodForma & ")"
        'Si está seleccionado varias trans.
        Else
            cond = cond & " and (CodForma IN (" & gobjCond.CodForma & "))"
        End If
    End If
    
    
    
    If Len(cond) > 0 Then sql = sql & " WHERE estado <>3 and " & cond
    
    'Ordern de filas
    If BandForma Then
            sql = sql & " order by nombreforma,FechaTrans, HoraTrans, TransID  "
    Else
        sql = sql & " ORDER BY FechaTrans, HoraTrans, TransID"
    End If

    Set rs = Me.OpenRecordset(sql)
    Set ConsGNTransIngresoAutoNew = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta General " & gobjCond.fecha1 + gobjCond.Hora1 & "-" & gobjCond.fecha2 + gobjCond.Hora2, "GN"
End Function


'jeaa 02/09/2008
Public Function CreaDesctNumPagosxIV() As DesctoNumPagosxIVGrupo
    Dim obj As DesctoNumPagosxIVGrupo
    Set obj = New DesctoNumPagosxIVGrupo
    Set obj.Empresa = Me
    Set CreaDesctNumPagosxIV = obj
    Set obj = Nothing
End Function

Public Function RecuperaDesctNumPAgosxIV(key As Variant) As DesctoNumPagosxIVGrupo
    Dim obj As DesctoNumPagosxIVGrupo
    Set obj = New DesctoNumPagosxIVGrupo
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaDesctNumPAgosxIV = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function
Public Function ListaDesctoNumPagosxIV2(NumPagos As Integer, _
                                  CodIVGrupo As String, _
                                  BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset, i As Integer
    Dim NumIVGrupo As Integer, NumPCGrupo As Integer
    NumIVGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumIVGrupo")) + 1
    'NumPCGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumPCGrupo")) + 1
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If
    sql = " Select NumPagos, desct.CodIvGRupo, ivg.descripcion, desct.valor"
    sql = sql & " from "
    sql = sql & " DescIVGPCG desct"
    sql = sql & " inner join ivgrupo" & NumIVGrupo & " ivg"
    sql = sql & " on ivg.idgrupo" & NumIVGrupo & "=desct.idivgrupo"
    
    If Len(NumPagos) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(NumPagos= '" & NumPagos & " ') "
    End If
    If Len(CodIVGrupo) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(desct.CodIVgrupo= '" & CodIVGrupo & " ') "
    End If
        If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaDesctoNumPagosxIV2 = rs
    Else
        ListaDesctoNumPagosxIV2 = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function DesctoNumPagosxIV(ByVal CodIVGrupo As String, ByVal NumPagos As Integer) As Double
Dim sql As String, rs As Recordset, NumIVGrupo As Integer, NumPCGrupo As Integer
    NumIVGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumIVGrupo")) + 1
'    NumPCGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumPCGrupo")) + 1
    sql = "Select valor from ivgrupo" & NumIVGrupo
    sql = sql & " inner join  DescIVGPCG desct"
    sql = sql & " on ivgrupo" & NumIVGrupo & ".idgrupo" & NumIVGrupo & " = Desct.idivgrupo"
    sql = sql & " WHERE ivgrupo" & NumIVGrupo & ".CodGrupo" & NumIVGrupo & " = '" & CodIVGrupo & "'"
    sql = sql & " and Numpagos =" & NumPagos
'    Set rs = mobjGNComp.Empresa.OpenRecordset(sql)
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        DesctoNumPagosxIV = rs!Valor
    End If
    Set rs = Nothing
End Function


Public Function ListaDesctoNumPAgosxIV(BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset, NumIVGrupo As Integer
    NumIVGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumIVGrupo")) + 1
    sql = " Select NumPagos, desct.CodIvGRupo,ivg.descripcion, desct.valor"
    sql = sql & " from "
    sql = sql & " DescIVGPCG desct"
    sql = sql & " inner join ivgrupo" & NumIVGrupo & " ivg"
    sql = sql & " on ivg.idgrupo" & NumIVGrupo & "=desct.idivgrupo"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaDesctoNumPAgosxIV = rs
    Else
        ListaDesctoNumPAgosxIV = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ConsIVMovCCRes() As Variant
    Dim sql As String, cond As String, rs As Recordset, rsaux As Recordset
    Dim numReg As Long, condNum As String, Signo As Integer
    cond = " WHERE   (gc.Estado IN (1,2,4))"
    condNum = ""
    'para filtrado por cliente
    If Len(gobjCond.CodPC1) > 0 Or Len(gobjCond.CodPC2) > 0 Then
        If Len(gobjCond.CodPC1) > 0 And Len(gobjCond.CodPC2) = 0 Then
            cond = cond & " AND (pc.codprovcli BETWEEN '" & gobjCond.CodPC1 & " 'AND '" & gobjCond.CodPC1 & "')"
        ElseIf Len(gobjCond.CodPC1) = 0 And Len(gobjCond.CodPC2) > 0 Then
            cond = cond & " AND (pc.codprovcli BETWEEN '" & gobjCond.CodPC2 & " 'AND '" & gobjCond.CodPC2 & "')"
        ElseIf Len(gobjCond.CodPC1) > 0 And Len(gobjCond.CodPC2) > 0 Then
            cond = cond & " AND (pc.codprovcli BETWEEN '" & gobjCond.CodPC1 & " 'AND '" & gobjCond.CodPC2 & "')"
        End If
    End If
    'para filtrado por centro de costo
    If Len(gobjCond.CodCentro1) > 0 Or Len(gobjCond.CodCentro2) > 0 Then
        If Len(gobjCond.CodCentro1) > 0 And Len(gobjCond.CodCentro2) = 0 Then
            cond = cond & " AND (CodCentro BETWEEN '" & gobjCond.CodCentro1 & "'AND '" & gobjCond.CodCentro1 & "')"
        ElseIf Len(gobjCond.CodCentro1) = 0 And Len(gobjCond.CodCentro2) > 0 Then
            cond = cond & " AND (CodCentro BETWEEN '" & gobjCond.CodCentro2 & "'AND '" & gobjCond.CodCentro2 & "')"
        ElseIf Len(gobjCond.CodCentro1) > 0 And Len(gobjCond.CodCentro2) > 0 Then
            cond = cond & " AND (CodCentro BETWEEN '" & gobjCond.CodCentro1 & "'AND '" & gobjCond.CodCentro2 & "')"
        End If
    End If
    'para filtrado por item
    If Len(gobjCond.CodItem1) > 0 Or Len(gobjCond.CodItem2) > 0 Then
        If Len(gobjCond.CodItem1) > 0 And Len(gobjCond.CodItem2) = 0 Then
            cond = cond & " AND (Codinventario BETWEEN '" & gobjCond.CodItem1 & "'AND '" & gobjCond.CodItem1 & "')"
        ElseIf Len(gobjCond.CodItem1) = 0 And Len(gobjCond.CodItem2) > 0 Then
            cond = cond & " AND (Codinventario BETWEEN '" & gobjCond.CodItem2 & "'AND '" & gobjCond.CodItem2 & "')"
        ElseIf Len(gobjCond.CodItem1) > 0 And Len(gobjCond.CodItem2) > 0 Then
            cond = cond & " AND (Codinventario BETWEEN '" & gobjCond.CodItem1 & "'AND '" & gobjCond.CodItem2 & "')"
        End If
    End If
'    cond = cond & " and (gc.FechaTrans >" & FechaYMD(gobjCond.fecha1, gobjMain.EmpresaActual.TipoDB) & ")"
    'para filtrado por numero de transaccion
        If gobjCond.NumTrans1 <> 0 Or gobjCond.NumTrans2 <> 0 Then
        If gobjCond.NumTrans1 <> 0 And gobjCond.NumTrans2 = 0 Then
            condNum = condNum & " AND (gc.Numtrans BETWEEN '" & gobjCond.NumTrans1 & "'AND '" & gobjCond.NumTrans1 & "')"
        ElseIf gobjCond.NumTrans1 = 0 And gobjCond.NumTrans2 <> 0 Then
            condNum = condNum & " AND (gc.Numtrans BETWEEN '" & gobjCond.NumTrans2 & "'AND '" & gobjCond.NumTrans2 & "')"
        ElseIf gobjCond.NumTrans1 > 0 And gobjCond.NumTrans2 > 0 Then
            condNum = condNum & " AND (gc.Numtrans BETWEEN '" & gobjCond.NumTrans1 & "'AND '" & gobjCond.NumTrans2 & "')"
        End If
    End If
        Signo = 1
        If Len(gobjCond.CodTrans) > 0 Then
            sql = "select LEFT(OPCION,1) AS Signo  from GNTRANS WHERE codtrans='" & gobjCond.CodTrans & "'"
            Set rsaux = Me.OpenRecordset(sql)
            
            If rsaux.Fields("signo") = "I" Then
                Signo = -1
            End If
            Set rsaux = Nothing
        End If
        
        
        VerificaExistenciaTablaTemporal 0
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg

'---------- Listado de suma de Cantidad y Costo por items en Entregados
        VerificaExistenciaTablaTemporal 1
        'sql = " SELECT gc.transid, gc.fechaTrans, gc.Codtrans+' '+CONVERT(varchar, gc.Numtrans) as TransPresup,"
        sql = " SELECT "
        sql = sql & " pc.nombre, gcc.codcentro, gcc.Descripcion AS DescCentro, ivk.IdInventario,"
        sql = sql & " Sum(ivk.Cantidad)*" & Signo & "  AS SumaCantPre "
        sql = sql & " Into t1 "
        sql = sql & " From (GNCentroCosto gcc RIGHT JOIN GNComprobante gc ON gcc.IdCentro = gc.IdCentro)"
        If Signo = 1 Then
            sql = sql & " inner join pcprovcli pc on gc.IdClienteRef=pc.idprovcli "
        Else
            sql = sql & " LEFT join pcprovcli pc on  gc.IdProveedorRef=pc.idprovcli"
        End If
        sql = sql & " INNER JOIN IVKardex ivk"
        sql = sql & " INNER JOIN IVInventario iv"
        sql = sql & " ON ivk.idinventario= iv.idinventario"
        sql = sql & " ON gc.TransID = ivk.TransID " & cond & condNum
        sql = sql & " AND (gc.CodTrans ='" & gobjCond.CodTrans & "')"
        sql = sql & " and (gc.FechaTrans Between " & FechaYMD(gobjCond.fecha1, gobjMain.EmpresaActual.TipoDB)
        sql = sql & " and  " & FechaYMD(gobjCond.fecha2, gobjMain.EmpresaActual.TipoDB) & ")"
        sql = sql & " GROUP BY gc.IdCentro, ivk.IdInventario, gcc.Descripcion,  gcc.codcentro, pc.nombre"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        VerificaExistenciaTablaTemporal 2
        '---------- Listado de suma de Cantidad Facturados
        ''sql = " SELECT gc.fechaTrans, gc.Codtrans+' '+CONVERT(varchar, gc.Numtrans) as TransFact,"
        sql = "  SELECT pc.nombre, gcc.codcentro, gcc.Descripcion AS DescCentro, "
        sql = sql & "  ivk.IdInventario,"
        sql = sql & " Sum(ivk.Cantidad) *" & Signo & "  AS SumaCant "
        sql = sql & " INTO t2"
        sql = sql & "  From (GNCentroCosto gcc RIGHT JOIN GNComprobante gc ON gcc.IdCentro = gc.IdCentro)"
'        sql = sql & " inner join pcprovcli pc on gc.IdClienteRef=pc.idprovcli or gc.IdProveedorRef=pc.idprovcli"
        If Signo = 1 Then
            sql = sql & " inner join pcprovcli pc on gc.IdClienteRef=pc.idprovcli "
        Else
            sql = sql & " inner join pcprovcli pc on  gc.IdProveedorRef=pc.idprovcli"
        End If
        sql = sql & " INNER JOIN IVKardex ivk"
        sql = sql & " INNER JOIN IVInventario iv"
        sql = sql & " ON ivk.idinventario= iv.idinventario"
        sql = sql & " ON gc.TransID = ivk.TransID " & cond
        sql = sql & " and (gc.CodTrans IN (SELECT CodTrans FROM GNTrans WHERE VerificaLimiteCon='" & gobjCond.CodTrans & "'))"
        sql = sql & " AND (gc.CodTrans <> '" & gobjCond.CodTrans & "M')"
        sql = sql & "  GROUP BY pc.nombre,ivk.IdInventario, gcc.codcentro, gcc.Descripcion "
        'sql = sql & "  , gc.FechaTrans , gc.CodTrans, gc.NumTrans"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        VerificaExistenciaTablaTemporal 3
        '---------- Listado de suma de Cantidad  devueltos
        sql = "  SELECT  pc.nombre, gcc.codcentro, gcc.Descripcion AS DescCentro, "
        sql = sql & "  ivk.IdInventario,"
        sql = sql & "   sum(ivk.Cantidad) *" & Signo & "  AS SumaCantPre "
        sql = sql & "  INTO t3"
        sql = sql & "  From (GNCentroCosto gcc RIGHT JOIN GNComprobante gc ON gcc.IdCentro = gc.IdCentro)"
'        sql = sql & "  inner join pcprovcli pc on gc.IdClienteRef=pc.idprovcli or gc.IdProveedorRef=pc.idprovcli"
        If Signo = 1 Then
            sql = sql & " inner join pcprovcli pc on gc.IdClienteRef=pc.idprovcli "
        Else
            sql = sql & " inner join pcprovcli pc on  gc.IdProveedorRef=pc.idprovcli"
        End If
        sql = sql & "  INNER JOIN IVKardex ivk"
        sql = sql & "  INNER JOIN IVInventario iv"
        sql = sql & "  ON ivk.idinventario= iv.idinventario"
        sql = sql & "  ON gc.TransID = ivk.TransID" & cond
        sql = sql & " AND (gc.CodTrans = '" & gobjCond.CodTrans & "M')"
        sql = sql & " GROUP BY pc.nombre, ivk.IdInventario, gcc.codcentro, gcc.Descripcion "
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        VerificaExistenciaTablaTemporal 4
        '--saldo de consumos
        '---------- Combina las tres tablas temporales para comparar
        'VerificaExistenciaTablaTemporal 6
        sql = " SELECT distinct isnull(t1.codcentro,isnull(t2.codcentro,t3.codcentro)) as codcentro, "
        sql = sql & " isnull(t1.DescCentro,isnull(t2.DescCentro,t3.DescCentro)) as descCentro, "
        sql = sql & " isnull(t1.nombre,isnull(t2.nombre,t3.nombre)) as PCNombre,"
        'sql = sql & " TransFact, fechaTrans, "
        sql = sql & "     iv.CodInventario, iv.Descripcion,"
        sql = sql & "   isnull(t1.SumaCantPre, 0) * -1 As Presupuesto,"
        sql = sql & "   isnull(t3.SumaCantPre, 0)  AS PreMod,"
        sql = sql & "    isnull(t2.SumaCant, 0) *-1 As Consumo,"
        sql = sql & "    (isnull(t1.SumaCantPre, 0) * -1)- (isnull(t3.SumaCantPre, 0)  ) -(isnull(t2.SumaCant, 0) *-1) as saldo "
        sql = sql & "   From IVInventario iv"
        sql = sql & "   INNER JOIN t3"
        sql = sql & "   full join t1"
        sql = sql & "   full  join t2"
        sql = sql & "   on t1.codcentro=t2.codcentro and t1.IdInventario= t2.IdInventario"
        sql = sql & "   on t1.codcentro=t3.codcentro and t1.IdInventario= t3.IdInventario "
        sql = sql & "   ON (iv.IdInventario=t1.IdInventario or iv.IdInventario=t2.IdInventario  or iv.IdInventario=t3.IdInventario)"
        sql = sql & " where iv.bandservicio=0 "
        If Not gobjCond.IncluirCero Then
            sql = sql & " and (isnull(t1.SumaCantPre, 0) * -1)- (isnull(t3.SumaCantPre, 0)  ) -(isnull(t2.SumaCant, 0) *-1)  <> 0"
        End If
        sql = sql & "   ORDER BY pc.PCNombre,t1.codcentro,t1.DescCentro, iv.CodInventario"

    Set rs = Me.OpenRecordset(sql)
   Set ConsIVMovCCRes = rs
   
  
    Set rs = Nothing
    VerificaExistenciaTablaTemporal 1
    VerificaExistenciaTablaTemporal 2
    VerificaExistenciaTablaTemporal 3
    VerificaExistenciaTablaTemporal 4
    VerificaExistenciaTablaTemporal 5
    VerificaExistenciaTablaTemporal 6
End Function


'Para que salga nombre y descripción juntos para Visualizar en FlexCombo solo de cliente especificado
Public Function ListaGNCentroCosto3(BandSoloValida As Boolean, BandRS As Boolean, ByVal CodProvcli As String) As Variant
    Dim sql As String, rs As Recordset
    
#If DAOLIB Then
    sql = "SELECT CodCentro, " & _
                "IIF((Nombre Is NULL) OR (Len(Nombre)=0), Descripcion, " & _
                "Nombre + ' ' + Descripcion) AS Descripcion " & _
          "FROM GNCentroCosto "
#Else
    sql = "SELECT CodCentro, " & _
                "CASE WHEN (GNC.Nombre Is NULL) OR Len(GNC.Nombre)=0 THEN Descripcion " & _
                "  ELSE GNC.Nombre + ' ' + Descripcion " & _
                "END AS Descripcion " & _
          "FROM GNCentroCosto gnc "
          sql = sql & " LEFT join pcprovcli PC on GNC.IdCliente=pc.IdPROVCLI"
          
#End If
    If BandSoloValida Then sql = sql & "WHERE FechaFinal Is Null "
    sql = sql & " whERE CODPROVCLI='" & CodProvcli & "'"
    sql = sql & " ORDER BY CodCentro"

    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaGNCentroCosto3 = rs
    Else
        ListaGNCentroCosto3 = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


'Para Presupuesto general corpac 27/10/200/8
Public Function ConsCTPresupuesto(bandBalance As Boolean) As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim v As Variant, v2() As Variant, i As Long, j As Long
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsCTBalance")
    qdef.Parameters("FechaDesde") = IIf(bandBalance, Me.GNOpcion.FechaInicio, gobjCond.fecha1)
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodCuenta1") = "0"
    qdef.Parameters("CodCuenta2") = String(20, "9")
    qdef.Parameters("CodSucursal") = gobjCond.Sucursal ' ********* jeaa
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
    If Not rs.EOF Then
        rs.MoveLast
        rs.MoveFirst
        v = rs.GetRows(rs.RecordCount)
    End If
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
'    '**************************
'    gobjCond.Sucursal = "'S2'"
'    '**************************
    sql = "spConsCTPresupuesto "
    sql = sql & gobjCond.numMoneda & ",'0','" & _
                        String(20, "9") & "'," & _
                        FechaYMD(IIf(bandBalance, Me.GNOpcion.FechaInicio, gobjCond.fecha1), TipoDB) & "," & _
                        FechaYMD(gobjCond.fecha2, TipoDB) & ",'" & gobjCond.Sucursal & "'"    ' jeaa 17-01-04 para filtrado por sucursal
                        
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    If Not rs.EOF Then v = rs.GetRows()
#End If
    
    'Mayoriza los valores
    Mayoriza v
    
    'Pasa los valores de v a v2 cambiando formato
    ' y filtrando registros por TipoCuenta, Nivel y Valor
    j = 0
    For i = 0 To UBound(v, 2)
        If Not IsNull(v(BAL_VALOR, i)) Then
            'Solo los que tengan valor diferente de 0
            If v(BAL_VALOR, i) <> 0 Then
                'Si es para balance, solo tipo 1,2 y 3, sino solo tipo 4 y 5
                If (bandBalance And (v(BAL_TIPO, i) <= 3)) Or _
                   ((Not bandBalance) And (v(BAL_TIPO, i) >= 4)) Then
                   
                   'Solo hasta el nivel indicado
                   If v(BAL_NIVEL, i) <= gobjCond.Nivel Then
                        ReDim Preserve v2(6, j)
                        v2(0, j) = v(BAL_TIPO, i)           'TipoCuenta
                        v2(1, j) = v(BAL_CODCUENTA, i)      'CodCuenta
                        v2(2, j) = v(BAL_NOMBRECUENTA, i)   'Cuenta
                        v2(3, j) = v(BAL_CODSUCURSAL, i)          'CODSUCURSAL   JEAA 16/01/04
                        v2(4, j) = v(BAL_VALOR, i)          'Valor
                        If Not bandBalance Then v2(4, j) = v2(4, j) * -1    'Invierta el signo cuando es EstadoPG
                        v2(5, j) = v(BAL_NIVEL, i)          'Nivel
                        j = j + 1
                    End If
                End If
            End If
        End If
    Next i
        
    If j Then ConsCTPresupuesto = v2
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Presupuesto ", "CT"
End Function


Public Sub GrabarAutorizacionesSRI(ByRef cod As String)
    Dim sql As String, i As Integer
    Dim rs As Recordset
    Dim rsaux As Recordset
    Dim rs1 As Recordset
    Dim UltimoNumSec As String
    sql = "SELECT  NumAutorizacion, FechaCaducidad, NumTransSiguiente FROM gntrans WHERE codtrans='" & cod & "'"
    Set rs = Me.OpenRecordset(sql)
    sql = "Update gntrans set  NumAutorizacionOld ='" & rs.Fields("NumAutorizacion") & "',"
    sql = sql & " FechaCaducidadold ='" & rs.Fields("FechaCaducidad") & "'"
    sql = sql & " WHERE codtrans='" & cod & "'"
    Set rsaux = Me.OpenRecordset(sql)
    
    sql = "Update gntrans set  NumAutorizacion ='" & Me.GNOpcion.NumAutorizacion_AutoImp & "',"
    sql = sql & " FechaCaducidad ='" & Me.GNOpcion.FechaCaducidad_AutoImp & "'"
    sql = sql & " WHERE codtrans='" & cod & "'"
    Set rsaux = Me.OpenRecordset(sql)
    
    sql = "Update gntrans set  NumTransInicio = " & rs.Fields("NumTransSiguiente")
    sql = sql & " WHERE codtrans='" & cod & "'"
    Set rsaux = Me.OpenRecordset(sql)
    Set rs = Nothing
    
    sql = "Update Anexo_Comprobantes  set  BandAutorizaActiva  =1"
    sql = sql & " WHERE BandAutoImpresor =1"
    Set rsaux = Me.OpenRecordset(sql)
    
    
    Set rsaux = Nothing
  Exit Sub
ErrTrap:
End Sub

Public Function ConsTSTransImpresionCheques() As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
      
        sql = " select gnc.Transid,fechatrans,gnc.Codtrans+' '+CONVERT(varchar, gnc.Numtrans) as Trans, gnc.Descripcion,  "
        sql = sql & " Tsk.Nombre , Tsb.Descripcion, NumDoc, Haber, Gnc.estado "
        sql = sql & " from gncomprobante gnc"
        sql = sql & " inner join tskardex tsk"
        sql = sql & " inner join tsbanco tsb"
        sql = sql & " on tsk.idbanco=tsb.idbanco"
        sql = sql & " inner join TSTipoDocBanco tst"
        sql = sql & " on tsk.idtipodoc=tst.idtipodoc"
        sql = sql & " on gnc.transid=tsk.transid"
        sql = sql & " Where Estado <> 3"
        sql = sql & " and (gnc.FechaTrans Between " & FechaYMD(gobjCond.fecha1, gobjMain.EmpresaActual.TipoDB)
        sql = sql & " and  " & FechaYMD(gobjCond.fecha2, gobjMain.EmpresaActual.TipoDB) & ")"
        sql = sql & " and tsb.Descripcion='" & gobjCond.CodTrans & "' "
        sql = sql & " and CodTipoDoc='CH-E'"
        If gobjCond.NumTrans1 <> 0 And gobjCond.NumTrans2 <> 0 Then
            sql = sql & " and NumDoc between '" & gobjCond.NumTrans1 & "' and '" & gobjCond.NumTrans2 & "'"
        End If
        sql = sql & " order by NumDoc "
       Set rs = Me.OpenRecordset(sql)
        Set ConsTSTransImpresionCheques = rs
        Set rs = Nothing
        Me.GrabaGNLogAccion "CONSULTA", "Consulta Impresion Cheque x Lote " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function

Public Function ListaMotivoCliente(BandSoloValida As Boolean, BandRS As Boolean, ByVal CodProvcli As String, BandArribo As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
    sql = "SELECT CodMotivo,Descripcion FROM Motivo"
    sql = sql & " LEFT join pcprovcli PC on Motivo.IdCliente=pc.IdPROVCLI"
    If BandSoloValida Then
        sql = sql & " WHERE BandValida=" & CadenaBool(True, TipoDB)
        sql = sql & " AND CODPROVCLI='" & CodProvcli & "'"
        sql = sql & " AND BandArribo=" & IIf(BandArribo, 1, 0)
    Else
        sql = sql & " whERE CODPROVCLI='" & CodProvcli & "'"
        sql = sql & " AND BandArribo=" & IIf(BandArribo, 1, 0)
    End If
    
          
    
    sql = sql & " ORDER BY CodMotivo"

    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaMotivoCliente = rs
    Else
        ListaMotivoCliente = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaTransaccionArribo(BandSoloValida As Boolean, BandRS As Boolean, ByVal CodProvcli As String, CodTrans As String) As Variant
    Dim sql As String, rs As Recordset
    
    sql = "SELECT gnc.Codtrans+'-'+CONVERT(varchar, gnc.Numtrans) as Trans  ,'Vuelo ' + mt.descripcion + ' ' +  gnc.Descripcion  FROM GnComprobante gnc"
    sql = sql & " LEFT join pcprovcli PC on GnC.IdClienteRef=pc.IdPROVCLI"
    sql = sql & " inner join motivo mt on gnc.idmotivo=mt.idmotivo"
    sql = sql & " WHERE gnc.Estado=1 and codtrans= '" & CodTrans & "'"
    If BandSoloValida Then
        sql = sql & " AND BandValida=" & CadenaBool(True, TipoDB)
        sql = sql & " AND CODPROVCLI='" & CodProvcli & "'"
    Else
        sql = sql & " AND CODPROVCLI='" & CodProvcli & "'"
    End If
    
          
    
    sql = sql & " ORDER BY Trans"

    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaTransaccionArribo = rs
    Else
        ListaTransaccionArribo = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


Public Function ConsAereoGNTrans(ByVal NumGrupo As Integer, ByVal CodGrupo As String) As Variant
    'Llama a la nueva función por orden descendente     '*** MAKOTO 20/oct/00
    Set ConsAereoGNTrans = ConsAereoGNTrans2(NumGrupo, CodGrupo, False)
End Function

    
Public Function ConsAereoGNTrans2(ByVal NumGrupo As Integer, ByVal CodGrupo As String, _
                    Optional ByVal OrdenAscendente As Boolean) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset, i As Integer, rsItem As Recordset
    Dim numReg As Long, CantItem As Integer
    
    'Condición de FechaTrans
    cond = "FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB)
    
    'Condición de CodTrans
    If Len(cond) > 0 Then cond = cond & " AND "
    If Len(gobjCond.CodTrans) > 0 Then      'Si está especificado transaccion
        'Si es una sola transaccion
        If InStr(gobjCond.CodTrans, ",") = 0 Then
            cond = cond & "(CodTrans='" & gobjCond.CodTrans & "')"
        'Si está seleccionado varias trans.
        Else
            cond = cond & "(CodTrans IN (" & gobjCond.CodTrans & "))"
        End If
    Else
        'Si no hay condicion de cod.trans, selecciona todas las trans.
        ' que tenga permiso
        s = gobjMain.GrupoActual.PermisoActual.ListaTrans(True)
        If Len(s) > 0 Then
            cond = cond & "(CodTrans " & s & ")"
        Else
            cond = cond & "(CodTrans = '-------')"    'Para que NO devuelva nada si no tiene ningún permiso  '*** MAKOTO 26/dic/00
        End If
    End If
    
    'Condición de NumTrans
    If (gobjCond.NumTrans1 > 0) And (gobjCond.NumTrans2 > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans BETWEEN " & gobjCond.NumTrans1 & " AND " & gobjCond.NumTrans2 & ")"
    ElseIf gobjCond.NumTrans1 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans>=" & gobjCond.NumTrans1 & ")"
    ElseIf gobjCond.NumTrans2 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans<=" & gobjCond.NumTrans2 & ")"
    End If
    
    'Condición de Estado
    If gobjCond.EstadoBool(ESTADO_NOAPROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(gnc.gnc.Estado <>" & ESTADO_NOAPROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_APROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(gnc.Estado <>" & ESTADO_APROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_DESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(gnc.Estado <>" & ESTADO_DESPACHADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_ANULADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(gnc.Estado <>" & ESTADO_ANULADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_SEMDESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(gnc.Estado <>" & ESTADO_SEMDESPACHADO & ")"
    End If
    
    If Len(gobjCond.CodPC1) > 0 And Len(gobjCond.CodPC2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " codProvcli between '" & gobjCond.CodPC1 & "' and '" & gobjCond.CodPC2 & "'"
    End If
    
    
    
    If Len(gobjCond.CodCentro1) > 0 And Len(gobjCond.CodCentro2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " codCentro between '" & gobjCond.CodCentro1 & "' and '" & gobjCond.CodCentro2 & "'"
    End If
    
    sql = " select Codinventario from ivinventario ivi"
    sql = sql & " inner join ivgrupo" & NumGrupo & " ivg on ivg.idgrupo" & NumGrupo & "=ivi.idgrupo" & NumGrupo
    sql = sql & " where codgrupo" & NumGrupo & "='" & CodGrupo & "'"
    Set rsItem = Me.OpenRecordset(sql)
    
    CantItem = rsItem.RecordCount
    rsItem.MoveFirst
    
    For i = 1 To CantItem
    
        sql = " Select gnc.transid, iv.codinventario, (cantidad)*-1 as cant"
        sql = sql & " Into T" & i
        sql = sql & " from gncomprobante gnc"
        sql = sql & " inner join pcprovcli pc"
        sql = sql & " on gnc.idclienteRef=pc.idprovcli"
        sql = sql & " inner join gncentrocosto gcc"
        sql = sql & " on gnc.idcentro=gcc.idcentro"
        
        sql = sql & " inner join IvKardex ivk"
        sql = sql & " inner join ivinventario iv on iv.idinventario=ivk.idinventario"
        sql = sql & " on gnc.transid=ivk.transid"
        sql = sql & " and Codinventario='" & rsItem.Fields("CodInventario") & "'"
        If Len(cond) > 0 Then sql = sql & " WHERE " & cond
        VerificaExistenciaTablaTemporal i
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        rsItem.MoveNext
    
    Next i
    
    
    
    
    
    
    sql = "SELECT"
    sql = sql & " gnc.transid, fechatrans, "
    sql = sql & " right(CONVERT(char(20), horatrans),9),"
    'horatrans,
    sql = sql & " codtrans,  "
    sql = sql & " numtrans, coddestino, pc.nombre, gnc.descripcion,CodCentro, CodMotivo, "
    sql = sql & " gnc.estado,"
    '--gnc.estado1,"
    sql = sql & " case when gnc.estado1=1 then 'OK FACT' ELSE 'NO FACT' END ,"
    For i = 1 To CantItem
        sql = sql & " ISNULL(t" & i & ".cant,0) AS Cant, "
    Next i
    sql = Mid$(sql, 1, Len(sql) - 2)
    sql = sql & " from gncomprobante gnc"
    sql = sql & " inner join pcprovcli pc"
    sql = sql & " on gnc.idclienteRef=pc.idprovcli"
    sql = sql & " inner join gncentrocosto gcc"
    sql = sql & " on gnc.idcentro=gcc.idcentro"
    sql = sql & "  INNER JOIN motivo "
    sql = sql & "  left JOIN GnDestino gnd "
    sql = sql & "  on motivo.idDestino=gnd.idDestino"
    sql = sql & "  on gnc.idmotivo=motivo.idmotivo"
    For i = 1 To CantItem
        sql = sql & " left join t" & i & " on t" & i & ".transid=gnc.transid"
    Next i

    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    
    If Len(gobjCond.CodBanco1) > 0 And Len(gobjCond.CodBanco2) > 0 Then
        sql = sql & " AND coddestino between '" & gobjCond.CodBanco1 & "' and '" & gobjCond.CodBanco2 & "'"
    End If
    
    
    'Ordern de filas
    If OrdenAscendente Then
        sql = sql & " ORDER BY pc.nombre, codtrans, FechaTrans DESC, HoraTrans DESC, gnc.TransID"         '*** MAKOTO 07/dic/00 Modificado para HoraTrans
    Else
        sql = sql & " ORDER BY pc.nombre, codtrans, FechaTrans DESC, HoraTrans DESC, gnc.TransID DESC"       '*** MAKOTO 07/dic/00 HoraTrans agregado
    End If
    
    Set rs = Me.OpenRecordset(sql)
    Set ConsAereoGNTrans2 = rs
    Set rs = Nothing
    For i = 1 To CantItem
        VerificaExistenciaTablaTemporal i
    Next i
    
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Aereo General " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function


Public Function ListaPCProvCliPorGrupo(BandProveedor As Boolean, _
                                       BandCliente As Boolean, _
                                       BandRS As Boolean, _
                                        NumGrupo As Integer, CodGrupo As String) As Variant
    Dim sql As String, rs As Recordset
             sql = "SELECT pc.CodProvCli, pc.Nombre  "
             sql = sql & " FROM PCGrupo" & NumGrupo & " g INNER JOIN PCProvCli pc "
             sql = sql & "  ON g.IdGrupo" & NumGrupo & " = pc.IdGrupo" & NumGrupo

    If Not (BandProveedor And BandCliente) Then
        If BandProveedor Then
            sql = sql & " WHERE BandProveedor=" & CadenaBool(True, TipoDB)
        Else
            sql = sql & " WHERE BandCliente=" & CadenaBool(True, TipoDB)
        End If
        sql = sql & "and Estado <> 2 "
        sql = sql & " and CODGRUPO" & NumGrupo & "='" & CodGrupo & "'"
    End If
    sql = sql & " ORDER BY Nombre"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCProvCliPorGrupo = rs
    Else
        ListaPCProvCliPorGrupo = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing

End Function


Public Function ConsPCSaldoconF_CortexProvcli(ByVal BandProveedor As Boolean, _
                            ByVal BandCliente As Boolean, CodProvcli As String, _
                            TipoSaldo As Integer, FechaCorte As Date) As Variant
    Dim sql As String, cond As String, rs As Recordset
   Dim aux As String, Condicion As String
   Dim numReg As Long, Trans As String, i As Integer
        VerificaExistenciaTabla 1
        'Prepara reporte utilizando Tablas Temporales
    '1) Prepara los  documentos  Asignados  menores a la fecha
        aux = IIf(gobjCond.numMoneda > 0, "/Cotizacion" & gobjCond.numMoneda + 1, "")
        sql = "SELECT " & _
            "pck.IdAsignado, " & _
            "(pck.Debe + pck.Haber) " & aux & " AS Valor " & _
            "INTO tmp1 " & _
            "From " & _
            "GNtrans gt INNER JOIN " & _
                "(GNComprobante gc INNER JOIN PCKardex pck " & _
                "INNER JOIN PCProvcli pc " & _
                "ON PC.idprovcli = pck.IdProvcli " & _
                "ON gc.transID = pck.transID) " & _
                          "ON gt.Codtrans = gc.Codtrans " & _
            "Where (pck.IdAsignado <> 0) " & _
            "AND (gc.Estado <> 3) " & _
            "AND (gt.AfectaSaldoPC=1) " & _
            "AND (gc.Fechatrans<= " & FechaYMD(FechaCorte, gobjMain.EmpresaActual.TipoDB) & ")" & _
            " AND pc.codprovcli='" & CodProvcli & "'"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        VerificaExistenciaTabla 2
    '2)Agrupa  estos  documentos por IdAsignado
        sql = "SELECT " & _
              "IdAsignado," & _
              "isnull(Sum(Valor),0) AS VCancelado " & _
              "INTO tmp2 " & _
              "FROM tmp1 " & _
              "GROUP BY IdAsignado"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
    '3) Finalmente une  con el documento  Padre
        VerificaExistenciaTabla 3
        sql = "SELECT  gc.transId, gc.Codtrans, gc.Numtrans, gc.NumDocRef, pc.IdProvCli, " & _
            "pc.CodProvCli, pc.Nombre, " & _
            "(pck.Debe ) " & aux & " AS Debe, " & _
            "( pck.Haber) " & aux & " AS Haber, " & _
            "(pck.Debe + pck.Haber) " & aux & " AS Valor, " & _
            "isnull(vw.VCancelado,0) AS VCancelado, " & _
            "(pck.Debe + pck.Haber) " & aux & " - isnull(vw.VCancelado,0) AS Saldo, " & _
            "pck.IdForma, pck.NumLetra, " & _
            "pck.FechaEmision, pck.FechaVenci, " & _
            "pck.Observacion " & _
            "INTO tmp3 " & _
            "From GNComprobante gc INNER JOIN " & _
                    "(PCProvCli pc  INNER JOIN " & _
                    "    (PCKardex pck  LEFT JOIN " & _
                    "      tmp2 vw  ON vw.IdAsignado = pck.Id) " & _
                    " ON pc.IdProvCli = pck.IdProvCli) " & _
                "ON gc.transID = pck.transID " & _
            "Where (pck.IdAsignado = 0) And (gc.Estado <> 3) " & _
            "AND (gc.Fechatrans<=" & FechaYMD(FechaCorte, gobjMain.EmpresaActual.TipoDB) & ")" & _
            " AND pc.codprovcli='" & CodProvcli & "'"
            If BandProveedor = False And BandCliente = True Then
                If TipoSaldo = 1 Then
                    sql = sql & "AND (pck.Haber > 0) "
                ElseIf TipoSaldo = 2 Then
                    sql = sql & "AND (pck.Debe > 0) "
                End If
            Else
                If TipoSaldo = 1 Then
                    sql = sql & "AND (pck.DEBE > 0) "
                ElseIf TipoSaldo = 2 Then
                    sql = sql & "AND (pck.HABER > 0) "
                End If
            End If
            If BandCliente = True And BandProveedor = False Then
                    sql = sql & "and bandcliente=1"
            ElseIf BandCliente = False And BandProveedor = True Then
                    sql = sql & "and bandproveedor=1"
            End If
      gobjMain.EmpresaActual.EjecutarSQL sql, numReg
    '---------------------------------------------------------------------------------
    '4  Consulta  final
        If TipoSaldo = 1 Then
'            Condicion = Condicion & " AND vw.FechaVenci <= " & FechaYMD(gobjCond.FechaCorte, gobjMain.EmpresaActual.TipoDB)
        End If
        If Len(gobjCond.CodPCGrupo) > 0 Then
            Condicion = Condicion & " AND PCGrupo" & gobjCond.NumPCGrupo & ".CodGrupo" & gobjCond.NumPCGrupo & " = '" & _
                        gobjCond.CodPCGrupo & " '"
        End If
#If DAOLIB Then
    Trans = "vw.Codtrans & ' ' & CSTR(vw.Numtrans)"
#Else
    Trans = "vw.Codtrans + ' ' + CONVERT(varchar,vw.Numtrans)"
#End If
       sql = "SELECT "
            If TipoSaldo = 0 Then
                sql = sql & " abs(sum(vw.debe)) +abs(sum(vw.VCANCELADO))  as debe, "
                sql = sql & "  abs(sum(vw.haber)) as haber, "
                sql = sql & " (abs(sum(vw.debe)) -abs(sum(vw.VCANCELADO)))+ (abs(sum(vw.haber))) as saldo "
           Else
                sql = sql & " abs(sum(vw.VALOR)) as debe, " & _
                "abs(sum(vw.VCANCELADO)) as haber, " & _
                " (abs(sum(vw.VALOR)) - abs(sum(vw.VCANCELADO)) ) as Saldo "
           End If
             sql = sql & " FROM Gntrans INNER JOIN tmp3 vw INNER JOIN " & _
               "PCProvCli   pc " & _
               " ON PC.IdProvCli = vw.IdProvCli LEFT JOIN TSFormaCobroPago tsforma on vw.idforma = tsforma.idforma ON Gntrans.Codtrans = vw.Codtrans  "
        sql = sql & "Where  Saldo > 0 " & Condicion & "  AND  (Gntrans.AfectaSaldoPC=1)"
        sql = sql & " AND pc.codprovcli='" & CodProvcli & "'"
        If TipoSaldo = 1 Then
            sql = sql & " having sum(vw.VALOR) >0 "
        End If
        Set rs = Me.OpenRecordset(sql)
    Set ConsPCSaldoconF_CortexProvcli = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Saldos ProvCli con fecha de corte" & gobjCond.FechaCorte, "PC"
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
End Function


Public Function ConsPCKardexPorTrans3(ByVal BandProveedor As Boolean, _
                                     ByVal BandCliente As Boolean) As Variant
End Function


Public Function ListaTSFormaCobroPagoIngresoAuto(BandCobro As Boolean, BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodForma,NombreForma FROM TSFormaCobroPago WHERE "
    sql = sql & " BandCobro=" & CadenaBool(BandCobro, TipoDB)
    If BandSoloValida Then sql = sql & " AND BandValida=" & CadenaBool(True, TipoDB)
    sql = sql & " AND IngresoAutomatico = " & CadenaBool(True, TipoDB)
    sql = sql & " ORDER BY CodForma "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaTSFormaCobroPagoIngresoAuto = rs
    Else
        ListaTSFormaCobroPagoIngresoAuto = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function RecuperaAFGrupo(NumGrupo As Byte, key As Variant) As AFGrupo
    Dim obj As AFGrupo
    
    Set obj = New AFGrupo
    Set obj.Empresa = Me
    obj.NumGrupo = NumGrupo
    
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaAFGrupo = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CreaAFGrupo(NumGrupo As Byte) As AFGrupo
    Dim obj As AFGrupo
    
    Set obj = New AFGrupo
    Set obj.Empresa = Me
    obj.NumGrupo = NumGrupo
    Set CreaAFGrupo = obj
    Set obj = Nothing
End Function

Public Function ListaAFGrupo(NumGrupo As Integer, BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
    sql = "SELECT CodGrupo" & NumGrupo & ",Descripcion FROM AFGrupo" & NumGrupo
    If BandSoloValida Then
        sql = sql & " WHERE BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY CodGrupo" & NumGrupo

    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaAFGrupo = rs
    Else
        ListaAFGrupo = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function
    
Public Function ListaAFGrupoParaFlexGrid(NumGrupo As Integer) As String
Dim sql As String, s As String
    Dim rs As Recordset
    
    sql = "SELECT CodGrupo" & NumGrupo & ",Descripcion FROM AFGrupo" & NumGrupo
    sql = sql & " WHERE BandValida=" & CadenaBool(True, TipoDB)
    sql = sql & " ORDER BY CodGrupo" & NumGrupo
    
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
'    s = "|" & GetStringDAO(rs)         '*** MAKOTO 07/ago/2000 Modificado
    If Not rs.EOF Then s = "|" & GetStringDAO(rs, 20 + 50)      '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|", "(nulo)")
#End If
    ListaAFGrupoParaFlexGrid = s
    rs.Close
    Set rs = Nothing
End Function

Public Function ListaAFGrupoParaFlexGrid2(NumGrupo As Integer, _
                                          CodGrupo1 As String, _
                                          CodGrupo2 As String, _
                                          CodGrupo3 As String, _
                                          CodGrupo4 As String, _
                                          CodGrupo5 As String) As String
    Dim sql As String, s As String, cond As String
    Dim rs As Recordset
    
    sql = "SELECT DISTINCT CodGrupo" & NumGrupo & ",G" & NumGrupo & " FROM vwAFGrupo"
    
    If Len(CodGrupo1) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodGrupo1='" & CodGrupo1 & "') "
    End If
    If Len(CodGrupo2) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodGrupo2='" & CodGrupo2 & "') "
    End If
    If Len(CodGrupo3) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodGrupo3='" & CodGrupo3 & "') "
    End If
    If Len(CodGrupo4) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodGrupo4='" & CodGrupo4 & "') "
    End If
    If Len(CodGrupo5) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodGrupo5='" & CodGrupo5 & "') "
    End If

    If Len(cond) > 0 Then sql = sql & " WHERE ( " & cond & " AND (CodGrupo" & NumGrupo & "<>NULL)  ) "
    sql = sql & " ORDER BY CodGrupo" & NumGrupo

    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 20 + 50)         '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|", "(nulo)")
#End If
    ListaAFGrupoParaFlexGrid2 = s
    rs.Close
    Set rs = Nothing
End Function


Public Function ListaAFInventario2(CodInventario As String, _
                                  CodAlterno As String, _
                                  Descripcion As String, _
                                  CodGrupo() As String, _
                                  BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset, i As Integer
    
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If

    sql = "SELECT CodInventario, CodAlterno1, Descripcion, CodBodega, Exist, " & _
            " CodGrupo1, CodGrupo2, CodGrupo3," & _
            " CodGrupo4, CodGrupo5, Observacion  FROM vwAFInventario "
    
    If BandSoloValida Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(BandValida=" & CadenaBool(True, TipoDB) & ")"
    End If
    
    If Len(CodInventario) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodInventario LIKE '" & CodInventario & comodin & "') "
    End If
    
    If Len(CodAlterno) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "((CodAlterno1 LIKE '" & CodAlterno & comodin & "') " & _
                      "OR (CodAlterno2 LIKE '" & CodAlterno & comodin & "')) "
    End If
    
    If Len(Descripcion) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(Descripcion LIKE '" & Descripcion & comodin & "') "
    End If
    
   
    For i = LBound(CodGrupo) To UBound(CodGrupo)
        If Len(CodGrupo(i)) > 0 Then
            If Len(cond) > 0 Then cond = cond & "AND "
            cond = cond & "(CodGrupo" & i & " = '" & CodGrupo(i) & "') "
        End If
    Next i
    
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " ORDER BY CodInventario"
    
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaAFInventario2 = rs
    Else
        ListaAFInventario2 = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


Public Function RecuperaAFInventario(key As Variant) As AFInventario
    Dim obj As AFInventario
    
    Set obj = New AFInventario
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaAFInventario = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function RecuperaAFInventarioQuick(key As Variant) As AFInventario
    Dim obj As AFInventario
    
    Set obj = New AFInventario
    Set obj.Empresa = Me
    On Error Resume Next
    obj.RecuperarQuick key
    If Err.Number = 0 Then Set RecuperaAFInventarioQuick = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function



Public Function CreaAFInventario() As AFInventario
    Dim obj As AFInventario
    
    Set obj = New AFInventario
    Set obj.Empresa = Me
    Set CreaAFInventario = obj
    Set obj = Nothing
End Function


Public Function RecuperaAFBodega(key As Variant) As AFBodega
    Dim obj As AFBodega
    
    Set obj = New AFBodega
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaAFBodega = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CreaAFBodega() As AFBodega
    Dim obj As AFBodega
    
    Set obj = New AFBodega
    Set obj.Empresa = Me
    Set CreaAFBodega = obj
    Set obj = Nothing
End Function


Public Function ListaAFBodega(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
    sql = "SELECT CodBodega,Descripcion FROM AFBodega "
    If BandSoloValida Then
        sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY CodBodega"
    
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaAFBodega = rs
    Else
        ListaAFBodega = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function RecuperaAFTipoSeguro(key As Variant) As AFTipoSeguro
    Dim obj As AFTipoSeguro
    
    Set obj = New AFTipoSeguro
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaAFTipoSeguro = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CreaAFTipoSeguro() As AFTipoSeguro
    Dim obj As AFTipoSeguro
    
    Set obj = New AFTipoSeguro
    Set obj.Empresa = Me
    Set CreaAFTipoSeguro = obj
    Set obj = Nothing
End Function


Public Function ListaAFTipoSeguro(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
    sql = "SELECT CodTipoSeguro,Descripcion FROM AFTipoSeguro "
    If BandSoloValida Then
        sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY CodTipoSeguro"
    
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaAFTipoSeguro = rs
    Else
        ListaAFTipoSeguro = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaAFTipoSeguroParaFlex2() As String
    Dim sql As String, rs As Recordset, s As String
    
    sql = "SELECT Descripcion + ' [' + CodTipoSeguro + ']'  FROM AFTipoSeguro "
    sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    sql = sql & " ORDER BY CodTipoSeguro"
    
    Set rs = Me.OpenRecordset(sql)
    
#If DAOLIB Then
    If Not rs.EOF Then s = "|" & GetStringDAO(rs, 20 + 50)
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|", "(nulo)")
#End If
    ListaAFTipoSeguroParaFlex2 = s
    
    Set rs = Nothing
End Function


Public Function ListaAFTipoSeguroParaFlex() As String
    Dim sql As String, rs As Recordset, s As String
    
    sql = "SELECT CodTipoSeguro , Descripcion  FROM AFTipoSeguro "
    sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    sql = sql & " ORDER BY CodTipoSeguro"
    
    Set rs = Me.OpenRecordset(sql)
    
#If DAOLIB Then

    If Not rs.EOF Then s = "|" & GetStringDAO(rs, 20 + 50)
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|", "(nulo)")
#End If
    ListaAFTipoSeguroParaFlex = s
    
    Set rs = Nothing
End Function



Public Function ListaAFBodegaParaFlexGrid() As String
    Dim sql As String, s As String
    Dim rs As Recordset
    
    sql = "SELECT CodBodega,Descripcion FROM AFBodega "
    sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    sql = sql & " ORDER BY CodBodega"

    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 10 + 40)
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|", "(nulo)")
#End If
    ListaAFBodegaParaFlexGrid = s
    rs.Close
    Set rs = Nothing
End Function

Public Sub GrabarCostoAFUltIngreso(ByRef IdInventario As Long, ByRef Costo As Currency, _
                                                            ByRef IdProv As Currency, ByRef FechaCompra As Date, _
                                                            ByRef NumeroComprobanteCompra)
    Dim sql As String
    Dim rs As Recordset
        sql = "SELECT FechaCompra,FechaCompra,NumeroComprobanteCompra, FechaIniDepre, "
        sql = sql & " IdProveedor, CostoUltimoIngreso  FROM AFInventario "
        sql = sql & " Where IdInventario = " & IdInventario
        Set rs = Me.OpenRecordsetParaEdit(sql)
    With rs
        !FechaCompra = FechaCompra
        !NumeroComprobanteCompra = NumeroComprobanteCompra
        !idProveedor = IdProv
        !CostoUltimoIngreso = Costo
        !FechaIniDepre = FechaCompra
      .Update
    End With
    Set rs = Nothing
  Exit Sub
ErrTrap:
End Sub

Public Function ListaAFItemParaFlex(CodBodega As String, _
                                    CodGrupo1 As String, _
                                    CodGrupo2 As String, _
                                    CodGrupo3 As String, _
                                    CodGrupo4 As String, _
                                    CodGrupo5 As String) As String
    Dim sql As String, cond As String, s As String
    Dim rs As Recordset
    
    sql = "SELECT CodInventario,Descripcion FROM vwAFInventarioRecuperar"
    
    If CodGrupo1 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo1='" & CodGrupo1 & "' "
    End If
    If CodGrupo2 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo2='" & CodGrupo2 & "' "
    End If
    If CodGrupo3 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo3='" & CodGrupo3 & "' "
    End If
    If CodGrupo4 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo4='" & CodGrupo4 & "' "
    End If
    If CodGrupo5 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo5='" & CodGrupo5 & "' "
    End If
        sql = sql & " WHERE  BandValida= 1  and BandVenta= 1  "
    If Len(cond) > 0 Then sql = sql & " and " & cond
    sql = sql & " ORDER BY CodInventario"

    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 20 + 80)
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    
    ListaAFItemParaFlex = s
    rs.Close
    Set rs = Nothing
End Function


Public Function ListaAFCodAlternoParaFlexPorGrupo(CodGrupo1 As String, _
                                          CodGrupo2 As String, _
                                          CodGrupo3 As String, _
                                          CodGrupo4 As String, _
                                          CodGrupo5 As String) As String
    Dim sql As String, cond As String, s As String
    Dim rs As Recordset
    
    sql = "SELECT CodAlterno1,Descripcion FROM vwAFInventarioRecuperar"
    cond = "((CodAlterno1 Is Not Null) And (CodAlterno1<>'')) "
    
    If CodGrupo1 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo1='" & CodGrupo1 & "' "
    End If
    If CodGrupo2 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo2='" & CodGrupo2 & "' "
    End If
    If CodGrupo3 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo3='" & CodGrupo3 & "' "
    End If
    If CodGrupo4 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo4='" & CodGrupo4 & "' "
    End If
    If CodGrupo5 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo5='" & CodGrupo5 & "' "
    End If

    sql = sql & " where bandvalida=1"
    If Len(cond) > 0 Then sql = sql & " and " & cond
    sql = sql & " ORDER BY CodAlterno1, CodInventario"
    
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 20 + 80)
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If

    ListaAFCodAlternoParaFlexPorGrupo = s
    rs.Close
    Set rs = Nothing
End Function

Public Function VerificarCobroPago(Id As Long, ByRef Trans As String, ByRef num As Long) As Boolean
    Dim sql  As String, rs As Recordset
    sql = " select codtrans,numtrans from pckardex p inner join gncomprobante g"
    sql = sql & " on p.transid=g.transid"
    sql = sql & " where idasignado=" & Id
    sql = sql & " and estado <>3"
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        Trans = rs.Fields("codtrans")
        num = rs.Fields("numtrans")
        VerificarCobroPago = True
    Else
        VerificarCobroPago = False
    End If
End Function


Public Function ConsAFInvetario( _
                    Optional ByVal NumGrupo As Integer, _
                    Optional ByVal CodGrupo As String, _
                    Optional ByVal codItem As String) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    
    '*** MAKOTO 03/oct/00
    sql = "SELECT IdCuentaDepreAcumulada, "
    
    
    sql = sql & " CodGrupo" & NumGrupo & ", afg.descripcion, IdInventario,  CodInventario, af.Descripcion, TipoDepre,"
    sql = sql & " numVidaUtil, FechaCompra, fechaIniDepre, CostoUltimoIngreso, CostoResidual,"
    sql = sql & " (DepAnterior+NumeroDepre) as DepAnterior , IdCuentaDepreGasto, IdCuentaDepreAcumulada"
    
        sql = sql & " from afinventario af inner join afgrupo" & NumGrupo
        sql = sql & " afg on af.idgrupo" & NumGrupo & "=afg.idgrupo" & NumGrupo
        sql = sql & " where af.BandValida=1"
        sql = sql & " and fechaIniDepre <= " & FechaYMD(gobjMain.objCondicion.FechaCorte, gobjMain.EmpresaActual.TipoDB)
        sql = sql & " and fechaIniDepre > " & FechaYMD("30/12/1899", gobjMain.EmpresaActual.TipoDB)
        sql = sql & " and numVidaUtil>0 "
        sql = sql & " and numVidaUtil>(DepAnterior+NumeroDepre) "
        sql = sql & " and Bandservicio=0  "
        sql = sql & " and isnull(NumeroDepre,0) <  numVidaUtil "
        If Len(CodGrupo) > 0 Then
            sql = sql & " and codGrupo" & NumGrupo & " ='" & CodGrupo & "'"
        End If

        If Len(codItem) > 0 Then
            sql = sql & " AND codInventario ='" & codItem & "'"
        End If

    sql = sql & " ORDER BY  CodInventario "
    Set rs = Me.OpenRecordset(sql)
    Set ConsAFInvetario = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta AFInventario " & gobjCond.fecha1 + gobjCond.Hora1 & "-" & gobjCond.fecha2 + gobjCond.Hora2, "GN"
End Function


Public Function DevuelveMes(ByVal NumMes As Integer, BandCorta As Boolean) As String
    If BandCorta Then
        Select Case NumMes
            Case 1: DevuelveMes = "Ene"
            Case 2: DevuelveMes = "Feb"
            Case 3: DevuelveMes = "Mar"
            Case 4: DevuelveMes = "Abr"
            Case 5: DevuelveMes = "May"
            Case 6: DevuelveMes = "Jun"
            Case 7: DevuelveMes = "Jul"
            Case 8: DevuelveMes = "Agt"
            Case 9: DevuelveMes = "Sep"
            Case 10: DevuelveMes = "Oct"
            Case 11: DevuelveMes = "Nov"
            Case 12: DevuelveMes = "Dic"
        End Select
    Else
        Select Case NumMes
            Case 1: DevuelveMes = "Enero"
            Case 2: DevuelveMes = "Febrero"
            Case 3: DevuelveMes = "Marzo"
            Case 4: DevuelveMes = "Abril"
            Case 5: DevuelveMes = "Mayo"
            Case 6: DevuelveMes = "Junio"
            Case 7: DevuelveMes = "Julio"
            Case 8: DevuelveMes = "Agosto"
            Case 9: DevuelveMes = "Septiembre"
            Case 10: DevuelveMes = "Octubre"
            Case 11: DevuelveMes = "Noviembre"
            Case 12: DevuelveMes = "Diciembre"
        End Select
    End If
End Function

'Para Kardex de Activos Fijos
Public Function ConsAFKardex() As Variant
    Dim sql As String, cond As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsIVKardexPorFecha")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("prmCodBodega") = gobjCond.CodBodega1
    qdef.Parameters("CodItem1") = IIf(Len(gobjCond.CodItem1) = 0, "!", gobjCond.CodItem1)
    qdef.Parameters("CodItem2") = IIf(Len(gobjCond.CodItem2) = 0, String$(20, "z"), gobjCond.CodItem2)
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient

    sql = "spConsAFKardexPorFecha " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodBodega1 & "','" & _
                gobjCond.CodItem1 & "','" & _
                gobjCond.CodItem2 & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB)
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    Set ConsAFKardex = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Kardex AF " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AF"
End Function


Public Function ObtieneNumeroDepreciacion(ByVal tipodepre As Integer, Codigo As String, ByRef CostoDepTotal As Currency) As Integer
    Dim sql As String, rs As Recordset, num As Integer, ct As Currency
    
    num = 1
    sql = " select"
    sql = sql & " count(Id) As numDep, "
    sql = sql & " sum(CostoTotal)*-1 As CT"
    sql = sql & " from gncomprobante g"
    sql = sql & " inner join afkardex afk"
    sql = sql & " inner join afinventario af"
    sql = sql & " on af.idinventario=afk.idinventario"
    sql = sql & " on g.transid=afk.transid"
    sql = sql & " Where g.Estado <> 3 And Cantidad < 0 And tipodepre = " & tipodepre
    sql = sql & " and codinventario='" & Codigo & "'"
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        If Not IsNull(rs!numDep) Then num = val(rs!numDep)
        If Not IsNull(rs!ct) Then CostoDepTotal = val(rs!ct)
    End If
    rs.Close
'    CostoDepTotal = ct
    ObtieneNumeroDepreciacion = num
End Function

Public Function ListaAFInventarioSimple() As Variant
    Dim sql As String, rs As Recordset
    
    sql = "SELECT CodInventario, Descripcion FROM AFInventario ORDER BY CodInventario"
    
    Set rs = Me.OpenRecordset(sql)
    ListaAFInventarioSimple = MiGetRows(rs)
    rs.Close
    Set rs = Nothing
End Function


Public Function ConsCTBalancePresupuesto(bandBalance As Boolean) As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim v As Variant, v2() As Variant, i As Long, j As Long
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsCTBalance")
    qdef.Parameters("FechaDesde") = IIf(bandBalance, Me.GNOpcion.FechaInicio, gobjCond.fecha1)
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodCuenta1") = "0"
    qdef.Parameters("CodCuenta2") = String(20, "9")
    qdef.Parameters("CodSucursal") = gobjCond.Sucursal ' ********* jeaa
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
    If Not rs.EOF Then
        rs.MoveLast
        rs.MoveFirst
        v = rs.GetRows(rs.RecordCount)
    End If
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
'    '**************************
'    gobjCond.Sucursal = "'S2'"
'    '**************************
    If Me.GNOpcion.ObtenerValor("PermitirDistribucionGastos") = "1" Then
        If Not gobjCond.IncluirCero Or Len(gobjCond.Sucursal) > 0 Then
            sql = "spConsCTBalancexGasto "
        Else
            sql = "spConsCTBalancePresupuesto "
        End If
    Else
        sql = "spConsCTBalancePresupuesto "
    End If
    sql = sql & gobjCond.numMoneda & ",'0','" & _
                        String(20, "9") & "'," & _
                        FechaYMD(IIf(bandBalance, Me.GNOpcion.FechaInicio, gobjCond.fecha1), TipoDB) & "," & _
                        FechaYMD(gobjCond.fecha2, TipoDB) & ",'" & gobjCond.Sucursal & "'"    ' jeaa 17-01-04 para filtrado por sucursal
                        
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    If Not rs.EOF Then v = rs.GetRows()
#End If
    
    'Mayoriza los valores
'    Mayoriza v
    MayorizaPresupuesto v
    
    'Pasa los valores de v a v2 cambiando formato
    ' y filtrando registros por TipoCuenta, Nivel y Valor
    j = 0
    For i = 0 To UBound(v, 2)
        If Not IsNull(v(BAL_VALOR, i)) Then
            'Solo los que tengan valor diferente de 0
            If v(BAL_VALOR, i) <> 0 Then
                'Si es para balance, solo tipo 1,2 y 3, sino solo tipo 4 y 5
                If (bandBalance And (v(BAL_TIPO, i) <= 3)) Or _
                   ((Not bandBalance) And (v(BAL_TIPO, i) >= 4)) Then
                   
                   'Solo hasta el nivel indicado
                   If v(BAL_NIVEL, i) <= gobjCond.Nivel Then
                        ReDim Preserve v2(7, j)
                        v2(0, j) = v(BAL_TIPO, i)           'TipoCuenta
                        v2(1, j) = v(BAL_CODCUENTA, i)      'CodCuenta
                        v2(2, j) = v(BAL_NOMBRECUENTA, i)   'Cuenta
                        v2(3, j) = v(BAL_CODSUCURSAL, i)          'CODSUCURSAL   JEAA 16/01/04
                        v2(4, j) = v(BAL_VALOR, i)          'Valor
                        If Not bandBalance Then v2(4, j) = v2(4, j) * -1    'Invierta el signo cuando es EstadoPG
                        v2(5, j) = v(BAL_NIVEL, i)          'Nivel
                        v2(6, j) = v(BAL_VALPRESUPUESTO, i)          'Presupuesto
                        v2(7, j) = v(BAL_VALPRESUP_EJEC, i)          'Presupuesto
'                        v2(8, j) = v(BAL_SALDOLPRESUP, i)          'Presupuesto
'                        v2(9, j) = v(BAL_SALDOLPRESUP_EJEC, i)          'Presupuesto
                        j = j + 1
                    End If
                End If
            End If
        End If
    Next i
        
    If j Then ConsCTBalancePresupuesto = v2
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Balance Presupuesto", "CT"
End Function


Private Sub MayorizaPresupuesto(ByRef v As Variant)
    Dim i As Integer, nmax As Integer, j As Long
    
#If DAOLIB Then
    nmax = ObtieneMax(mdbEmpresa, "CTCuenta", "Nivel")
#Else
    nmax = ObtieneMax(mcnEmpresa, "CTCuenta", "Nivel")
#End If
    
For i = nmax To 0 Step -1
        For j = 0 To UBound(v, 2)
            If (v(BAL_NIVEL, j) = i) And (v(BAL_BANDTOTAL, j) = True) Then
                v(BAL_VALOR, j) = SumaHijos(v, j)
            End If
        Next j
    Next i
    
    'Desde el nivel inferior hacia el nivel superior
    For i = nmax To 0 Step -1
        For j = 0 To UBound(v, 2)
            If (v(BAL_NIVEL, j) = i) And (v(BAL_BANDTOTAL, j) = True) Then
                v(BAL_VALPRESUPUESTO, j) = SumaHijosPresupuesto(v, j)
                v(BAL_VALMODPRESUPUESTO, j) = SumaHijosPresupuestoNew(v, j, BAL_VALMODPRESUPUESTO)
                v(BAL_VALREFORMA1, j) = SumaHijosPresupuestoNew(v, j, BAL_VALREFORMA1)
                v(BAL_VALREFORMA2, j) = SumaHijosPresupuestoNew(v, j, BAL_VALREFORMA2)
                v(BAL_VALREFORMA3, j) = SumaHijosPresupuestoNew(v, j, BAL_VALREFORMA3)
                v(BAL_VALREFORMA4, j) = SumaHijosPresupuestoNew(v, j, BAL_VALREFORMA4)
                v(BAL_VALSALDO, j) = SumaHijosPresupuestoNew(v, j, BAL_VALSALDO)
                v(BAL_VALPRESUP_COMP, j) = SumaHijosPresupuestoNew(v, j, BAL_VALPRESUP_COMP)
                v(BAL_VALPRESUP_EJEC, j) = SumaHijosPresupuesto_Ejec(v, j)
                v(BAL_SALDOLPRESUP, j) = SumaHijosPresupuesto_saldo(v, j)
                v(BAL_SALDOLPRESUP_EJEC, j) = SumaHijosPresupuesto_saldoEjec(v, j)
            End If
        Next j
    Next i
    
End Sub

Private Function SumaHijosPresupuesto(ByRef v As Variant, ByVal j As Long) As Currency
    Dim i As Long, t As Currency
    
    'Busca todos los hijos de la cuenta indicada por j
    ' saca la suma total de los hijos en t
    For i = 0 To UBound(v, 2)
        'Si IdCuentaSuma es igual a IdCuenta de j, es hijo de la cuenta j
        If v(BAL_IDPADRE, i) = v(BAL_IDCUENTA, j) Then
            If Not IsNull(v(BAL_VALPRESUPUESTO, i)) Then t = t + v(BAL_VALPRESUPUESTO, i)
        End If
    Next i
    SumaHijosPresupuesto = t
End Function

Public Function ConsCTBalanceCompPresupuesto() As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim cta1 As String, cta2 As String
    
    'Si no hay condición, coge todas las cuentas
    cta1 = "0"
    cta2 = String(20, "9")
    If Len(gobjCond.CodCuenta1) > 0 Then cta1 = gobjCond.CodCuenta1
    If Len(gobjCond.CodCuenta2) > 0 Then cta2 = gobjCond.CodCuenta2

#If DAOLIB Then
    Dim qdef As QueryDef
    
    Set qdef = mdbEmpresa.QueryDefs("spConsCTBalanceComp")
    With qdef
        .Parameters("FechaDesde") = gobjCond.fecha1
        .Parameters("FechaHasta") = gobjCond.fecha2
        .Parameters("CodCuenta1") = cta1
        .Parameters("CodCuenta2") = cta2
        .Parameters("NumMoneda") = gobjCond.numMoneda
        .Parameters("CodSucursal") = gobjCond.Sucursal 'jeaa
        Set rs = .OpenRecordset(dbOpenSnapshot, dbReadOnly)
    End With
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
'    '**************************
'    gobjCond.Sucursal = "'S1'"
'    '**************************
    If Me.GNOpcion.ObtenerValor("PermitirDistribucionGastos") = "1" Then
        If Len(gobjCond.Sucursal) > 0 Then
            sql = "spConsCTBalanceCompxGasto "
        Else
            sql = "spConsCTBalanceCompPresupuesto "
        End If
    Else
        sql = "spConsCTBalanceCompPresupuesto "
    End If
    sql = sql & gobjCond.numMoneda & ",'" & cta1 & "','" & cta2 & "'," & _
            FechaYMD(gobjCond.fecha1, TipoDB) & "," & FechaYMD(gobjCond.fecha2, TipoDB) & ",'" & gobjCond.Sucursal & "'"    ' jeaa 17-01-04 para filtrado por sucursal
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    Set ConsCTBalanceCompPresupuesto = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Balance Comprobacion + Presupuesto" & gobjCond.fecha1 & "-" & gobjCond.fecha2, "CT"
End Function


Public Function ConsTSPorCobrarPagarAutoPrimera(ByVal Id As Long, Valor As Currency) As Variant
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim objCond As Condicion
    
    Set objCond = gobjMain.objCondicion
    
    'Si no está especificada la moneda, coge la Moneda predeterminada
    If Len(objCond.CodMoneda) = 0 Then objCond.CodMoneda = MONEDA_PRE
    numMoneda = Me.GNOpcion.IndiceMoneda(objCond.CodMoneda)
    
    
    sql = " select Top 1 Id, CodProvCli, Nombre, TransID,"
    sql = sql & " Trans, CodForma, Valor" & numMoneda & " AS Valor, VCancelado" & numMoneda & " AS VCancelado,"
    sql = sql & " Valor" & numMoneda & " - VCancelado" & numMoneda & " AS Saldo, "
    sql = sql & " CodMoneda," & Valor & " as Cancela, "
    If numMoneda = 1 Then
        sql = sql & " 0"
    Else
        sql = sql & " Cotizacion" & numMoneda
    End If
    sql = sql & " AS Cotizacion, " & Valor & "*1 as cot,"
    If numMoneda = 1 Then
        sql = sql & Valor & " *1 as cot1 ,"
    Else
        sql = sql & Valor & " *1/Cotizacion" & numMoneda & " as cot1 ,"
    End If
    sql = sql & " Valor" & numMoneda & " - VCancelado" & numMoneda & "-" & Valor & " as saldo ,FechaEmision,"
    sql = sql & " Plazo, FechaVenci from vwConsPCPorCobrarPagar"
    sql = sql & " Where transId = " & Id
    
    Set rs = Me.OpenRecordset(sql)
    Set ConsTSPorCobrarPagarAutoPrimera = rs
    Set rs = Nothing
    Set objCond = Nothing
End Function

Public Function ConsTSConciliacion1() As Variant
    Dim sql As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsTSConciliacion")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodBanco") = gobjCond.CodBanco1
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient

    sql = "spConsTSConciliacion1 " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodBanco1 & "', " & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB)
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    ConsTSConciliacion1 = MiGetRows(rs)
    Set rs = Nothing
End Function


Public Function VerificarCambioCobroPago(Id As Long, ByRef Trans As String, ByRef num As Long, Optional ByRef Valor As Currency) As Boolean
    Dim sql  As String, rs As Recordset
    sql = " select codtrans,numtrans,Haber from pckardex p inner join gncomprobante g"
    sql = sql & " on p.transid=g.transid"
    sql = sql & " where idasignado=" & Id
    sql = sql & " and estado <>3"
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        Trans = rs.Fields("codtrans")
        num = rs.Fields("numtrans")
        Valor = rs.Fields("Haber")
        VerificarCambioCobroPago = True
    Else
        VerificarCambioCobroPago = False
    End If
End Function

'*** Agregado por Oliver, Usa la condicion de busqueda por hora
'*** 03/12/2002
Public Function ConsGNTransAerolineas(ByVal NumGrupo As Integer, ByVal CodGrupo As String, _
                    Optional ByVal OrdenAscendente As Boolean) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset, i As Integer, rsItem As Recordset
    Dim numReg As Long, CantItem As Integer
    
    'Condición de FechaTrans
    cond = "FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB)
    
    'Condición de CodTrans
    If Len(cond) > 0 Then cond = cond & " AND "
    If Len(gobjCond.CodTrans) > 0 Then      'Si está especificado transaccion
        'Si es una sola transaccion
        If InStr(gobjCond.CodTrans, ",") = 0 Then
            cond = cond & "(CodTrans='" & gobjCond.CodTrans & "')"
        'Si está seleccionado varias trans.
        Else
            cond = cond & "(CodTrans IN (" & gobjCond.CodTrans & "))"
        End If
    Else
        'Si no hay condicion de cod.trans, selecciona todas las trans.
        ' que tenga permiso
        s = gobjMain.GrupoActual.PermisoActual.ListaTrans(True)
        If Len(s) > 0 Then
            cond = cond & "(CodTrans " & s & ")"
        Else
            cond = cond & "(CodTrans = '-------')"    'Para que NO devuelva nada si no tiene ningún permiso  '*** MAKOTO 26/dic/00
        End If
    End If
    
    'Condición de NumTrans
    If (gobjCond.NumTrans1 > 0) And (gobjCond.NumTrans2 > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans BETWEEN " & gobjCond.NumTrans1 & " AND " & gobjCond.NumTrans2 & ")"
    ElseIf gobjCond.NumTrans1 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans>=" & gobjCond.NumTrans1 & ")"
    ElseIf gobjCond.NumTrans2 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans<=" & gobjCond.NumTrans2 & ")"
    End If
    
    'Condición de Estado
    If gobjCond.EstadoBool(ESTADO_NOAPROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(gnc.gnc.Estado <>" & ESTADO_NOAPROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_APROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(gnc.Estado <>" & ESTADO_APROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_DESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(gnc.Estado <>" & ESTADO_DESPACHADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_ANULADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(gnc.Estado <>" & ESTADO_ANULADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_SEMDESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(gnc.Estado <>" & ESTADO_SEMDESPACHADO & ")"
    End If
    
    If Len(gobjCond.CodPC1) > 0 And Len(gobjCond.CodPC2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " codProvcli between '" & gobjCond.CodPC1 & "' and '" & gobjCond.CodPC2 & "'"
    End If
    
    
    
    If Len(gobjCond.CodCentro1) > 0 And Len(gobjCond.CodCentro2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " codCentro between '" & gobjCond.CodCentro1 & "' and '" & gobjCond.CodCentro2 & "'"
    End If
    
    
        sql = " select Codinventario from ivinventario ivi"
        sql = sql & " inner join ivgrupo" & NumGrupo & " ivg on ivg.idgrupo" & NumGrupo & "=ivi.idgrupo" & NumGrupo
        sql = sql & " where codgrupo" & NumGrupo & "='" & CodGrupo & "'"
        Set rsItem = Me.OpenRecordset(sql)
        
        CantItem = rsItem.RecordCount
        If rsItem.RecordCount > 0 Then
            rsItem.MoveFirst
        End If
    
    For i = 1 To CantItem
    
        sql = " Select gnc.transid, iv.codinventario, (cantidad)*-1 as cant"
        sql = sql & " Into T" & i
        sql = sql & " from gncomprobante gnc"
        sql = sql & " inner join pcprovcli pc"
        sql = sql & " on gnc.idclienteRef=pc.idprovcli"
        sql = sql & " inner join gncentrocosto gcc"
        sql = sql & " on gnc.idcentro=gcc.idcentro"
        
        sql = sql & " inner join IvKardex ivk"
        sql = sql & " inner join ivinventario iv on iv.idinventario=ivk.idinventario"
        sql = sql & " on gnc.transid=ivk.transid"
        sql = sql & " and Codinventario='" & rsItem.Fields("CodInventario") & "'"
        If Len(cond) > 0 Then sql = sql & " WHERE " & cond
        VerificaExistenciaTablaTemporal i
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        rsItem.MoveNext
    
    Next i
    
   
    
    
    sql = "SELECT"
    sql = sql & " pc.nombre, fechatrans,"
    sql = sql & " HoraTrans , CodTrans, "
    sql = sql & " numtrans,gnc.transid , gnc.descripcion,CodCentro,   "
    
    sql = sql & " case when t" & CantItem - 1 & ".cant >0 then valor1 else 0 end valor1 , valor2, "
    sql = sql & " case when t" & CantItem - 2 & ".cant >0 then valor3 else 0 end valor3 , "
    sql = sql & " gnc.estado1,"
    For i = 1 To CantItem
        sql = sql & " ISNULL(t" & i & ".cant,0) AS Cant, "
    Next i
    sql = Mid$(sql, 1, Len(sql) - 2)
    sql = sql & " from gncomprobante gnc"
    sql = sql & " inner join pcprovcli pc"
    sql = sql & " on gnc.idclienteRef=pc.idprovcli"
    sql = sql & " inner join gncentrocosto gcc"
    sql = sql & " on gnc.idcentro=gcc.idcentro"
    sql = sql & " INNER JOIN motivo on gnc.idmotivo=motivo.idmotivo"
    For i = 1 To CantItem
        sql = sql & " left join t" & i & " on t" & i & ".transid=gnc.transid"
    Next i

    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " and gnc.estado1=0"
    'Ordern de filas
    If OrdenAscendente Then
        sql = sql & " ORDER BY FechaTrans, HoraTrans, gnc.TransID"         '*** MAKOTO 07/dic/00 Modificado para HoraTrans
    Else
        sql = sql & " ORDER BY pc.nombre, codtrans, FechaTrans DESC, HoraTrans DESC, gnc.TransID DESC"       '*** MAKOTO 07/dic/00 HoraTrans agregado
    End If
    
    Set rs = Me.OpenRecordset(sql)
    Set ConsGNTransAerolineas = rs
    Set rs = Nothing
    For i = 1 To CantItem
        VerificaExistenciaTablaTemporal i
    Next i
    
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Aereo General " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function

Public Function CreaGNSucursal() As GNSucursal
    Dim obj As GNSucursal
    Set obj = New GNSucursal
    Set obj.Empresa = Me
    Set CreaGNSucursal = obj
    Set obj = Nothing
End Function

Public Function RecuperaGNSucursal(key As Variant) As GNSucursal
    Dim obj As GNSucursal
    Set obj = New GNSucursal
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaGNSucursal = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function ListaGNSucursales(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    

    sql = "SELECT CodSucursal, Nombre, NumEstablecimiento, Numpuntos FROM GNSucursal "

    If BandSoloValida Then
        sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY NumEstablecimiento "

    Set rs = Me.OpenRecordset(sql)
    
    If BandRS Then
        Set ListaGNSucursales = rs
    Else
        ListaGNSucursales = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaGNTransconSucursales( _
                    Modulo As String, _
                    BandInvisibles As Boolean, _
                    BandRS As Boolean, Optional codsuc As String) As Variant
    Dim sql As String, cond As String, rs As Recordset
    
    sql = "SELECT CodTrans, NombreTrans, GNSucursal.Nombre, "
    sql = sql & " NumSerieEstablecimiento, NumSeriePunto, NumAutorizacion, fechaCaducidad, case when substring(Opcion, 152, 1)='S' then 1 else 0 end  "
    sql = sql & " FROM GNTrans left Join GNSucursal on GNTrans.idsucursal=GNSucursal.idsucursal "
    sql = sql & " "
    If Len(Modulo) > 0 Then cond = cond & "Modulo='" & Modulo & "' "
    If Len(codsuc) > 0 Then cond = cond & "CodSucursal='" & codsuc & "' "
    
    If Not BandInvisibles Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "BandVisible=" & CadenaBool(True, TipoDB)
    End If
    
    If Len(cond) > 0 Then sql = sql & "WHERE " & cond
    sql = sql & " ORDER BY CodTrans"
    Set rs = Me.OpenRecordset(sql)
    
    If BandRS Then
        Set ListaGNTransconSucursales = rs
    Else
        ListaGNTransconSucursales = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function



Public Sub GrabaGNLogAnulacion(ByVal CodAccion As String, _
                            ByVal Descripcion As String, _
                            ByVal Modulo, ByVal Trans As String, _
                            ByVal Solicitante As String, ByVal num As String, _
                            ByVal AutoSRI As String, ByVal FechaCadu As String)
   
End Sub


Public Function ConsGNAuditoriaAnulados() As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    '.FormatString = "^#|<Fecha|<Usuario|<Acción|<Transaccion|<Descripción|<Solicitante"
    sql = "SELECT FechaHora, CodUsuario, CodAccion, trans, Descripcion, CodUsuarioSolicita " & _
          "FROM GNLOGAnulacion "
    
    
    'Condición de FechaTrans
    cond = "FechaHora BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & _
            " AND " & FechaYMD(gobjCond.fecha2 + 1, mProps.TipoDB)
    
    
    
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " ORDER BY FechaHora DESC"
    
    Set rs = Me.OpenRecordset(sql)
    Set ConsGNAuditoriaAnulados = rs
    Set rs = Nothing
End Function


Public Function ConsANRetencionComprasACT2008() As Variant
    Dim pck As PCKardex, pcd As PCDocAsignado
    Dim objGnComp As GNComprobante, objGnCompDocOriginal As GNComprobante
    Dim sql As String, cond As String, CadenaValores As String
    Dim Recargo As String 'CadenaAgrupa  As String
    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
    Dim from As String, numReg As Long
    Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
    Dim Servicios As String, Bienes As String, RowRet As Long
    Const COL_BASESER = 15
    'segunda parte de la consulta: carga los valores de  Detalles de Anexos
    Const COL_FECHA = 2
    Const COL_CODCREDTRIB = 7
    Const COL_TRANSID = 1
    Const COL_TRANSRET = 5
    Dim condServ As String
    Dim condBien As String
    
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   
    With gobjCond
        
            cond = " AND (GNC.FechaTrans  BETWEEN " & _
                    FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                    FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            
'            If Len(.Usuario1) > 0 Or Len(.Usuario2) > 0 Then
'                   cond = cond & " AND pcprovcli.CodProvCli  BETWEEN  '" & .Usuario1 & "' AND '" & .Usuario2 & "' "
'            End If
            
            VerificaExistenciaTabla 0
            VerificaExistenciaTabla 1
            VerificaExistenciaTabla 2
            VerificaExistenciaTabla 3
            VerificaExistenciaTabla 4
            VerificaExistenciaTabla 5
            VerificaExistenciaTabla 6
            
            sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as TotalDescuento Into tmp0 " & _
                    "From IvRecargo ivR inner join " & _
                        "AFKardexRecargo ivkR Inner join " & _
                            "GnComprobante gNc  " & _
                        "On ivkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = IvkR.IdRecargo "
            sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.CodForma) & ") " & cond & _
                    " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")" & _
                  "Group by IvkR.TransID"
                  
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            'jeaa 09/01/2007
            'datos ICE
            sql = " Select Ivkr.TransID, "
            sql = sql & " SUM(IVK.CostoRealTotal) AS BASEice,"
            sql = sql & " MAX(IVC.CodICE) AS CodICE, SUM(ivkr.Valor) As ValorICE"
            sql = sql & " Into tmp6"
            sql = sql & " From IvRecargo ivR"
            sql = sql & " inner join AFKardexRecargo ivkR"
            sql = sql & " INNER JOIN AFKARDEX IVK"
            sql = sql & " INNER JOIN AFINVENTARIO IV"
            sql = sql & " INNER JOIN IVRECARGOICE IVC"
            sql = sql & " ON IV.IDICE=IVC.IDICE"
            sql = sql & " ON IVK.IDINVENTARIO=IV.IDINVENTARIO"
            sql = sql & " ON IVKR.TRANSID=IVK.TRANSID"
            sql = sql & " Inner join GnComprobante gNc"
            sql = sql & " On ivkr.TransID = gNc.TransID"
            sql = sql & " On Ivr.IdRecargo = IvkR.IdRecargo"
            sql = sql & " Where gnc.Estado <> 3"
            sql = sql & " AND ivr.CodRecargo IN ('" & gobjMain.EmpresaActual.GNOpcion.ObtenerValor("RecDescParaICE") & "')" & cond
            sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")"
            sql = sql & " Group by IvkR.TransID"
            
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
'--datos de indices
            VerificaExistenciaTabla 3
            sql = " Select  DISTINCT GNC.TransID AS cp_id, GNC_b.TransID AS rtp_id"
            sql = sql & " Into tmp3"
            sql = sql & " From    (gncomprobante GNC Inner join pckardex pck_a ON GNC.TransID = pck_a.TransID ) INNER JOIN"
            sql = sql & "  (gncomprobante GNC_b Inner join pckardex pck_B ON GNC_b.TransID = pck_B.TransID )"
            sql = sql & " ON  PCK_A.ID = PCK_B.IDASIGNADO"
            sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " AND GNC_b.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion1) & ")"
            sql = sql & " AND (GNC.FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = sql & " and GNC.Estado<>3 and GNC_b.estado<>3 "
            
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            '--datos de la compra
            sql = " Select  GNC.TransID, GNC.FechaTrans, pcprovcli.ruc,"
            sql = sql & " GNC.Nombre, "
            sql = sql & " GNC.Descripcion,"
            sql = sql & " Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as Trans,"
            sql = sql & " Gnc.CodTrans as Transa, Gnc.NumTrans as NumTransa,"
            sql = sql & " Case vw.CostoTotalBase0 When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBase0 + (vw.CostoTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))) ) end As Valor0, "
            sql = sql & " Case vw.CostoTotalBaseIVA When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseIVA + (vw.CostoTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) end AS Valor12, "
            sql = sql & " Case vw.CostoTotal When 0 then 0 else "
            sql = sql & " vw.SignoCompra  * (vw.CostoTotal + (vw.CostoTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))))  End AS CostoTotal,  "
            sql = sql & " tmp6.BASEice, tmp6.CodICE ,tmp6.ValorICE"
            sql = sql & " Into tmp1"
            sql = sql & " from    (( tmp0 Right join gncomprobante Gnc "
            sql = sql & " inner join gntrans gnt"
            sql = sql & " inner join GNTransRecargo gntr"
            sql = sql & " inner join ivrecargo ivr"
            sql = sql & " on ivr.idrecargo=gntr.idrecargo"
            sql = sql & " on gnt.codtrans= gntr.codtrans"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " left join tmp6 on gnc.transid=tmp6.transid"
            sql = sql & " inner join vwConsSUMAFKardexIVA vw ON Gnc.TransID = vw.transid "
            sql = sql & " ON tmp0.TransID = Gnc.TransID))"
            sql = sql & " right join pcprovcli  on gnc.IdProveedorRef=pcprovcli.idprovcli"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " and GNC.Estado<>3 " & cond
            
            
            VerificaExistenciaTabla 1
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            '-- datos de las retenciones
            
            sql = " "
            
            
             For i = 1 To 3
             
                sql = sql & " select GNC.TransID, Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as TransRet,"
                sql = sql & " sum(ts_ret.base) as Base, "
                sql = sql & " CASE WHEN BANDIVA=1 THEN  "
                Select Case i
                Case 1
                    sql = sql & " 'IVA_BIE' "
                Case 2
                    sql = sql & "  'IVA_SER'  "
                Case 3
                    sql = sql & "  'IVA_100'  "
                End Select
                
                sql = sql & " ELSE MAX(tsr.CodRetencion) END as Cod,"
                sql = sql & " sum(ts_ret.Debe+ts_ret.Haber) as Valor ,"
                sql = sql & " NumSerieEstablecimiento, NumSeriePunto ,"
                If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosRetencion")) > 0 Then
                    If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosRetencion") > 0 Then
                        sql = sql & " gnc.NumDocRef as NumeroTrans , "
                    Else
                        sql = sql & " gnc.NumTrans as NumeroTrans, "
                    End If
                Else
                    sql = sql & " gnc.NumTrans as NumeroTrans, "
                End If

                If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion")) > 0 Then
                    If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion") > 0 Then
                        sql = sql & " gnc.AutorizacionSRI as NumAutorizacion , "
                    Else
                        sql = sql & " gnt.NumAutorizacion as NumAutorizacion, "
                    End If
                Else
                    sql = sql & " gnt.NumAutorizacion as NumAutorizacion, "
                End If
                sql = sql & " gnc.FechaTRans, BANDIVA"
                If i = 1 Then
                sql = sql & " into tmp2 "
                End If
                
                
                sql = sql & " from    gntrans gnt"
                sql = sql & " inner join gncomprobante Gnc"
                sql = sql & " inner join (tskardexret ts_ret"
                sql = sql & " inner join tsretencion tsr on ts_ret.IdRetencion = tsr.IdRetencion )"
                sql = sql & " on GNC.TransID=ts_ret.TransID"
                sql = sql & " on gnc.codtrans=gnt.codtrans"
                sql = sql & " WHERE GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion1) & ")"
                sql = sql & " and GNC.Estado<>3"
                Select Case i
                Case 1
                    sql = sql & " and tsr.CodRetencion in "
                    sql = sql & " (" & PreparaCadena(gobjCond.Bienes) & ")"
                    sql = sql & " and tsr.Porcentaje<>1"
                Case 2
                    sql = sql & " and tsr.CodRetencion in "
                    sql = sql & " (" & PreparaCadena(gobjCond.Servicios) & ")"
                    sql = sql & " and tsr.Porcentaje<>1"
                Case 3
                    sql = sql & " and (tsr.CodRetencion in "
                    sql = sql & " (" & PreparaCadena(gobjCond.Bienes) & ")"
                    sql = sql & " OR tsr.CodRetencion in"
                    sql = sql & " (" & PreparaCadena(gobjCond.Servicios) & "))"
                    sql = sql & " and tsr.Porcentaje=1"
                End Select
                
                sql = sql & " Group By ts_ret.TransID, GNC.TransId, GNC.CodTrans,"
                sql = sql & " GnC.NumTrans, NumSerieEstablecimiento, NumSeriePunto,"
                sql = sql & " gnc.NumDocRef ,  gnc.FechaTrans, "
                If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion")) > 0 Then
                    If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion") > 0 Then
                        sql = sql & " gnc.AutorizacionSRI   "
                    Else
                        sql = sql & " gnt.NumAutorizacion  "
                    End If
                Else
                    sql = sql & " gnt.NumAutorizacion  "
                End If
                
                sql = sql & " ,tsr.Porcentaje, BANDIVA"
                sql = sql & " union all "
                
            Next i

            sql = sql & " select  GNC.TransID, Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as TransRet,"
            sql = sql & " (ts_ret.base) as Base,"
            sql = sql & " CASE WHEN BANDIVA=1 THEN  'BIENES'  ELSE (tsr.CodRetencion) END as Cod,"
            sql = sql & " (ts_ret.Debe+ts_ret.Haber) as Valor ,"
            sql = sql & " NumSerieEstablecimiento, NumSeriePunto ,"
                If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosRetencion")) > 0 Then
                    If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosRetencion") > 0 Then
                        sql = sql & " gnc.NumDocRef as NumeroTrans , "
                    Else
                        sql = sql & " gnc.NumTrans as NumeroTrans, "
                    End If
                Else
                    sql = sql & " gnc.NumTrans as NumeroTrans, "
                End If

                If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion")) > 0 Then
                    If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion") > 0 Then
                        sql = sql & " gnc.AutorizacionSRI as NumAutorizacion , "
                    Else
                        sql = sql & " gnt.NumAutorizacion as NumAutorizacion, "
                    End If
                Else
                    sql = sql & " gnt.NumAutorizacion as NumAutorizacion, "
                End If
           
            sql = sql & "  gnc.FechaTRans, BANDIVA"
            sql = sql & " from    gntrans gnt"
            sql = sql & " inner join gncomprobante Gnc"
            sql = sql & " inner join (tskardexret ts_ret"
            sql = sql & " inner join tsretencion tsr on ts_ret.IdRetencion = tsr.IdRetencion )"
            sql = sql & " on GNC.TransID=ts_ret.TransID"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " WHERE GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion1) & ")"
            sql = sql & " and GNC.Estado<>3"
            sql = sql & " and (tsr.CodRetencion NOT in "
            sql = sql & " (" & PreparaCadena(gobjCond.Bienes) & ")"
            sql = sql & " AND tsr.CodRetencion NOT in"
            sql = sql & " (" & PreparaCadena(gobjCond.Servicios) & "))"





            VerificaExistenciaTabla 2
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg

            
            
            
            
            
            
            ' union de las tres tablas
            ' union de las tres tablas
            sql = " select  DISTINCT  "
            sql = sql & " CASE When BandIVA=1 then 'IVA' else 'RENTA' end as IVA, b.Cod, "
            sql = sql & "  a.TransID, a.FechaTrans, a.Transa, a.NumTransa, "
            sql = sql & "  a.RUC, a.Nombre, "
            sql = sql & "  b.TransRet as TransRet,"
            sql = sql & "  b.FechaTrans As FechaTrans, "
            sql = sql & "  b.NumSerieEstablecimiento as NumSerieEstablecimiento,"
            sql = sql & "  b.NumSeriePunto NumSeriePunto ,"
            sql = sql & "  b.NumeroTrans as NumTrans,"
            sql = sql & "  b.NumAutorizacion as NumAutorizacion,"
            sql = sql & " b.Base ,  b.valor "
            sql = sql & " From tmp1 a  inner join tmp2 b right join tmp3 c  on b.Transid=c.rtp_id on a.Transid=c.cp_id"
            'sql = sql & " order by  CASE When BandIVA=1 then 'IVA' else 'RENTA' end, b.Cod, a.Transa,  a.NumTransa "

            '--datos de la compra sin retencion
            sql = sql & " union all "
            sql = sql & " Select  DISTINCT 'RENTA' as IVA, ane.CodTipoRetencion, GNC.TransID, "
            sql = sql & " GNC.FechaTrans,  gnc.codtrans, gnc.numtrans, pcprovcli.ruc, GNC.Nombre, "
            'sql = sql & " Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as transret, GNC.FechaTrans, "
            sql = sql & " '' as transret, GNC.FechaTrans, "
            sql = sql & " '' as NumSerieEstablecimiento, '' as NumSeriePunto , '' as NumTrans, '' NumAutorizacion, "
            sql = sql & " Case vw.CostoTotal When 0 then 0 else "
            sql = sql & " vw.SignoCompra  * (vw.CostoTotal + (vw.CostoTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))))  End AS CostoTotal,  "
            sql = sql & " 0  as valorRetenido "
            sql = sql & " from    (( tmp0 Right join gncomprobante Gnc "
            sql = sql & " inner join gntrans gnt"
            sql = sql & " inner join GNTransRecargo gntr"
            sql = sql & " inner join ivrecargo ivr"
            sql = sql & " on ivr.idrecargo=gntr.idrecargo"
            sql = sql & " on gnt.codtrans= gntr.codtrans"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " left join tmp6 on gnc.transid=tmp6.transid"
            sql = sql & " inner join vwConsSUMIVKardexIVA vw ON Gnc.TransID = vw.transid "
            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " inner join Anexos Ane on Gnc.TransID = Ane.Transid)"
            sql = sql & " right join pcprovcli  on gnc.IdProveedorRef=pcprovcli.idprovcli"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " and GNC.Estado<>3 and BandCompraSinRetencion=1 " & cond
            sql = sql & " order by  CASE When BandIVA=1 then 'IVA' else 'RENTA' end, b.Cod, a.Transa,  a.NumTransa "
            
'            VerificaExistenciaTabla 1
'            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANRetencionCompras2008 = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Retencion Compras para Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 4
End Function


Public Function ListaIVInventario2Prep(CodInventario As String, _
                                  CodAlterno As String, _
                                  Descripcion As String, _
                                  CodBodega As String, _
                                  CodGrupo() As String, _
                                  BandSoloValida As Boolean, BandRS As Boolean, IdGrupo As Long) As Variant

    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset, i As Integer
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If
    sql = "SELECT vwI.CodInventario, vwI.CodAlterno1, vwI.Descripcion, vwI.Observacion, vwI.CodBodega, vwI.Exist, " & _
            "vwI.Precio1, vwI.Precio2, vwI.Precio3, vwI.CodGrupo1, vwI.CodGrupo2, vwI.CodGrupo3," & _
            " vwI.CodGrupo4, vwI.CodGrupo5 FROM vwIVInventario vwI inner join vwIVInventarioRecuperar vwR ON vwR.codinventario=vwI.codinventario"
  If BandSoloValida Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(vwI.BandValida=" & CadenaBool(True, TipoDB) & ")"
  End If
    If Len(CodInventario) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(vwI.CodInventario LIKE '" & CodInventario & comodin & "') "
  End If
    If Len(CodAlterno) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "((vwI.CodAlterno1 LIKE '" & CodAlterno & comodin & "') " & _
                      "OR (vwI.CodAlterno2 LIKE '" & CodAlterno & comodin & "')) "


    End If
    If Len(Descripcion) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(vwI.Descripcion LIKE '" & Descripcion & comodin & "') "
   End If
    If Len(CodBodega) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(vwI.CodBodega='" & CodBodega & "') "
   End If
    For i = LBound(CodGrupo) To UBound(CodGrupo)
        If Len(CodGrupo(i)) > 0 Then
            If Len(cond) > 0 Then cond = cond & "AND "
'            cond = cond & "(CodGrupo" & i & " LIKE '" & CodGrupo(i) & comodin & "') "
            cond = cond & "(vwI.CodGrupo" & i & " = '" & CodGrupo(i) & "') "
       End If
    Next i
    '---------- OJO REVISAR jeaa 15/03/2007 COMO FUNCIONA PARA EL RETRO
    'AUC 05/10/06  PARA LA CASA DEL DISFRAZ FUNCIONA BIEN
    If IdGrupo > 0 Then
        If Len(cond) = 0 Then
            cond = cond & "(vwR.Idgrupo" & IdGrupo & " > 0) "
        ElseIf Len(cond) > 0 Then
           cond = cond & " AND (vwR.Idgrupo" & IdGrupo & " > 0) "
        End If
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " ORDER BY vwI.CodInventario,vwI.CodBodega "
   Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVInventario2Prep = rs
    Else
        ListaIVInventario2Prep = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


'jeaa 31/08/04
'* LISTA DE CLIENTES CON FILTROS preparaciones alquileres
Public Function ListaPCProvCliFiltroPrep(BandProveedor As Boolean, _
                                    BandCliente As Boolean, _
                                    codPC As String, _
                                    Nombre As String, _
                                    Direccion As String, _
                                    RUC As String, _
                                    CodGrupoDesde As String, _
                                    CodGrupoHasta As String, _
                                    numG As Integer, _
                                    obs As String, _
                                   BandSoloValida As Boolean, _
                                    BandRS As Boolean) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset, i As Integer
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If
sql = "SELECT pc.CodProvCli, pc.Nombre, a.CodTipoDocumento, pc.RUC, TipoProvCli , g1.CodGrupo1, g2.CodGrupo2, g3.CodGrupo3, g4.CodGrupo4 ,pc.observacion  FROM " & _
          " PCGrupo4 g4 RIGHT JOIN (PCGrupo3 g3 RIGHT JOIN (PCGrupo2 g2 RIGHT JOIN (PCGrupo1 g1 RIGHT JOIN PCProvCli pc " & _
          " left join Anexo_TipoDocumento a on pc.IdTipoDocumento  = a.Id" & _
                          " ON g1.IdGrupo1 = pc.IdGrupo1) " & _
                    " ON g2.IdGrupo2 = pc.IdGrupo2) " & _
                " ON g3.IdGrupo3 = pc.IdGrupo3) " & _
                "ON g4.IdGrupo4 = pc.IdGrupo4 "
   If Not (BandProveedor And BandCliente) Then
        If BandProveedor Then
            sql = sql & " WHERE BandProveedor=" & CadenaBool(True, TipoDB)
        Else
            sql = sql & " WHERE BandCliente=" & CadenaBool(True, TipoDB)
        End If
    End If
    If Len(codPC) > 0 Then
        cond = cond & " and (CodProvCli LIKE '" & codPC & comodin & "') "
    End If
    If Len(Nombre) > 0 Then
        cond = cond & " and ((Nombre LIKE '" & Nombre & comodin & "') " & _
                      "OR (Nombre LIKE '" & Nombre & comodin & "')) "
    End If
    If Len(Direccion) > 0 Then
        cond = cond & " and (Direccion1 LIKE '" & Direccion & comodin & "') "
   End If
    If Len(RUC) > 0 Then
        cond = cond & " and (ruc LIKE '" & RUC & comodin & "') "
    End If
    If Not (Len(CodGrupoDesde) = 0 And Len(CodGrupoHasta) = 0) Then
        cond = cond & " AND (CodGrupo" & numG & " BETWEEN '" & CodGrupoDesde & _
            "' AND '" & CodGrupoHasta & "')"
    End If
    'AUC 19/10/07
    If Len(obs) > 0 Then
        cond = cond & " and (observacion LIKE '" & comodin & obs & comodin & "') "
    End If
    If Len(cond) > 0 Then sql = sql & cond
    sql = sql & " ORDER BY Nombre "
   Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCProvCliFiltroPrep = rs
    Else
        ListaPCProvCliFiltroPrep = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function RecuperaPCHistorial(ByVal Trans As String) As PCHistorial
    Dim obj As PCHistorial
    Set obj = New PCHistorial
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar Trans
    If Err.Number = 0 Then Set RecuperaPCHistorial = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

'AUC 31/08/06 agregado filtrar por descripcion para la pantalla de importacion
Public Function ListaItems() As Variant
    Dim sql As String, rs As Recordset
             sql = "SELECT iv.codinventario,iv.descripcion "
             sql = sql & " FROM ivgrupo5 iv5 RIGHT JOIN (ivGrupo4 iv4 RIGHT JOIN( ivGrupo3 iv3 RIGHT JOIN (ivGrupo2 iv2 RIGHT JOIN (ivGrupo1 iv1 RIGHT JOIN ivinventario iv " & _
                          " ON iv1.IdGrupo1 = iv.IdGrupo1) " & _
                    " ON iv2.IdGrupo2 = iv.IdGrupo2) " & _
                " ON iv3.IdGrupo3 = iv.IdGrupo3) " & _
               " ON iv4.idgrupo4 = iv.idgrupo4) " & _
            " ON iv5.idgrupo5 = iv.idgrupo5 "
          '------------------
    sql = sql & " ORDER BY iv.descripcion"
    Set rs = Me.OpenRecordset(sql)
        ListaItems = MiGetRows(rs)
        rs.Close
    Set rs = Nothing
End Function

'AUC lista todo de listaformcobropago para reservaciones ver si se puede omitir
Public Function ListaTSFormaCobroPagoIVRES(BandSoloValida As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodForma,NombreForma FROM TSFormaCobroPago WHERE "
    If BandSoloValida Then sql = sql & " BandValida=" & CadenaBool(True, TipoDB)
    sql = sql & " ORDER BY CodForma "
    Set rs = Me.OpenRecordset(sql)
        ListaTSFormaCobroPagoIVRES = MiGetRows(rs)
        rs.Close
    Set rs = Nothing
End Function

'AUC carga clientes/proveedores solo codigo y nobmre que sea mas rapido
Public Function ListaPCProvCliParaCombo( _
                    BandProveedor As Boolean, _
                    BandCliente As Boolean) As Variant
    Dim sql As String, s As String, cond As String
    Dim rs As Recordset
    sql = "SELECT CodProvCli, Nombre FROM PCProvCli "
    If BandProveedor And Not BandCliente Then
        cond = "BandProveedor=" & CadenaBool(True, Me.TipoDB)
    ElseIf Not BandProveedor And BandCliente Then
        cond = "BandCliente=" & CadenaBool(True, Me.TipoDB)
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " ORDER BY nombre"
    Set rs = Me.OpenRecordset(sql)
        ListaPCProvCliParaCombo = MiGetRows(rs)
        rs.Close
    Set rs = Nothing
End Function

Public Function ListaIVInventario3(CodInventario As String, _
                                  CodAlterno As String, _
                                  Descripcion As String, _
                                  CodBodega As String, _
                                  CodGrupo As Variant, _
                                  BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset, i As Integer
    Dim codBod As String
    Dim BodegaPre As Integer
   ' codbod = Me.GNOpcion.ObtenerValor("BodegaPredeterminada")
    BodegaPre = Me.RecuperarIDBodega(CodBodega)
    Dim numReg As Long
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If
    sql = "SELECT ivbodega.idbodega,CodInventario,iv.Descripcion,Observacion,ivbodega.codbodega,Exist," & _
            "Precio1, Precio2, Precio3,precio4,precio5," & _
            " ivm.idinventario,ivm.idmateria,ivm.bandprincipal,iv.tipo into tmp101 FROM iVInventario iv " & _
            " LEFT join ivgrupo1 iv1 on iv1.idgrupo1 = iv.idgrupo1 " & _
            " LEFT join ivgrupo2 iv2 on iv2.idgrupo2 = iv.idgrupo2 " & _
            " LEFT join ivgrupo3 iv3 on iv3.idgrupo3 = iv.idgrupo3 " & _
            " LEFT join ivgrupo4 iv4 on iv4.idgrupo4 = iv.idgrupo4 " & _
            " LEFT join ivgrupo5 iv5 on iv5.idgrupo5 = iv.idgrupo5 " & _
            " LEFT Join ivexist  INNER JOIN  ivbodega " & _
            " on ivexist.IdBodega = ivbodega.IDBODEGA ON Iv.IdInventario = ivexist.IdInventario " & _
            " left join ivmateria ivm on ivm.idinventario = iv.idinventario "
    If BandSoloValida Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(BandValida=" & CadenaBool(True, TipoDB) & ")"
    End If
    If Len(CodInventario) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodInventario LIKE '" & CodInventario & comodin & "') "
    End If
    If Len(CodAlterno) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "((CodAlterno1 LIKE '" & CodAlterno & comodin & "') " & _
                      "OR (CodAlterno2 LIKE '" & CodAlterno & comodin & "')) "
    End If
    If Len(Descripcion) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(IV.Descripcion LIKE '" & Descripcion & comodin & "') "
    End If
    If Len(CodBodega) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodBodega='" & CodBodega & "') "
    End If
        For i = 1 To UBound(CodGrupo)
           If Len(CodGrupo(i)) > 0 Then
             If Len(cond) > 0 Then cond = cond & "AND "
                cond = cond & "(iv" & i & ".CodGrupo" & i & " = '" & CodGrupo(i) & "') "
           End If
        Next
    If Len(cond) > 0 Then sql = sql & " WHERE ivm.bandprincipal = 1 AND " & cond
    sql = sql & " ORDER BY CodInventario,CodBodega "
    'para volver a ejecutar
            VerificaExistenciaTabla 101 'tmp102 sera utilizada para guardar la primer parte del sql
           gobjMain.EmpresaActual.EjecutarSQL sql, numReg
           sql = " Select t.CodInventario, t.Descripcion,t.Observacion, t.codbodega, ive.exist, " & _
                                  " t.precio1 ,t.precio2,t.precio3,t.precio4,t.precio5  into tmp102  " & _
                 " from tmp101 t inner join ivexist ive on ive.idinventario = t.idmateria and ive.idbodega = t.idbodega " & _
                 " WHERE t.bandPrincipal = 1 " & _
                 " Union " & _
                 " SELECT CodInventario,Iv.Descripcion,observacion,ivbodega.codbodega,Exist,  " & _
                 " precio1,precio2,precio3,precio4,precio5 FROM IvInventario iv " & _
                 " LEFT join ivgrupo1 iv1 on iv1.idgrupo1 = iv.idgrupo1 " & _
                 " LEFT join ivgrupo2 iv2 on iv2.idgrupo2 = iv.idgrupo2 " & _
                 " LEFT join ivgrupo3 iv3 on iv3.idgrupo3 = iv.idgrupo3 " & _
                 " LEFT join ivgrupo4 iv4 on iv4.idgrupo4 = iv.idgrupo4 " & _
                 " LEFT join ivgrupo5 iv5 on iv5.idgrupo5 = iv.idgrupo5 " & _
                 "  LEFT Join IVExist Ive INNER JOIN  ivbodega " & _
                 " on IvE.IdBodega = ivbodega.IDBODEGA ON Iv.IdInventario = IVE.IdInventario "
                 If Len(cond) > 0 Then
                  sql = sql + " WHERE IV.tipo <> 4 AND " + cond '+ " AND IV.TIPO = 4 "
                    If Len(CodBodega) > 0 Then
                        sql = sql + "AND ive.idbodega =" & BodegaPre
                    End If
                 ElseIf Len(CodBodega) > 0 Then
                    sql = sql + " WHERE  ivbodega.codbodega = '" & codBod & "'"
                 End If
                  VerificaExistenciaTabla 102
                  gobjMain.EmpresaActual.EjecutarSQL sql, numReg
                  sql = "select CodInventario,    Descripcion,observacion,codbodega,min(exist) as existe, " & _
                        "precio1,precio2,precio3,precio4,precio5 " & _
                        " from tmp102 group by CodInventario, Descripcion,observacion,codbodega, " & _
                        " precio1,precio2,precio3,precio4,precio5" & _
                        " Order by descripcion"
                    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVInventario3 = rs
    Else
        ListaIVInventario3 = MiGetRows(rs)
        rs.Close
    End If
    VerificaExistenciaTabla 101 'tmp99 sera utilizada para guardar la primer parte del sql
    VerificaExistenciaTabla 102
    Set rs = Nothing
End Function

Public Function ConsGNTrans_Recetas( _
                    Optional ByVal OrdenAscendente As Boolean) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    '*** MAKOTO 03/oct/00
    sql = "SELECT"
    If gobjCond.TopN > 0 Then
        sql = sql & " TOP " & gobjCond.TopN
    End If
    '*** MAKOTO 05/feb/01 Mod. Aumentado 'NumDocRef' y 'Nombre'
    sql = sql & " TransID, FechaTrans, CodAsiento, CodTrans, NumTrans, " & _
            "NumDocRef, Nombre, Descripcion, CodCentro,Estado FROM vwConsGNTrans "
    'Condición de FechaTrans
    cond = "FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB)
    'Condición de CodTrans
    If Len(cond) > 0 Then cond = cond & " AND "
    If Len(gobjCond.CodTrans) > 0 Then      'Si está especificado transaccion
        'Si es una sola transaccion
        If InStr(gobjCond.CodTrans, ",") = 0 Then
            cond = cond & "(CodTrans='" & gobjCond.CodTrans & "')"
        'Si está seleccionado varias trans.
        Else
            cond = cond & "(CodTrans IN (" & gobjCond.CodTrans & "))"
        End If
    Else
        'Si no hay condicion de cod.trans, selecciona todas las trans.
        ' que tenga permiso
        s = gobjMain.GrupoActual.PermisoActual.ListaTrans(True)
        If Len(s) > 0 Then
            cond = cond & "(CodTrans " & s & ")"
        Else
            cond = cond & "(CodTrans = '-------')"    'Para que NO devuelva nada si no tiene ningún permiso  '*** MAKOTO 26/dic/00
        End If
    End If
    'Condición de NumTrans
    If (gobjCond.NumTrans1 > 0) And (gobjCond.NumTrans2 > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans BETWEEN " & gobjCond.NumTrans1 & " AND " & gobjCond.NumTrans2 & ")"
    ElseIf gobjCond.NumTrans1 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans>=" & gobjCond.NumTrans1 & ")"
    ElseIf gobjCond.NumTrans2 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans<=" & gobjCond.NumTrans2 & ")"
    End If
    'Condición de Estado
    If gobjCond.EstadoBool(ESTADO_NOAPROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_NOAPROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_APROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_APROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_DESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_DESPACHADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_ANULADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_ANULADO & ")"
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    'Ordern de filas
    If OrdenAscendente Then
        sql = sql & " ORDER BY FechaTrans, HoraTrans, TransID"         '*** MAKOTO 07/dic/00 Modificado para HoraTrans
    Else
        sql = sql & " ORDER BY FechaTrans DESC, HoraTrans DESC, TransID DESC"       '*** MAKOTO 07/dic/00 HoraTrans agregado
    End If
    Set rs = Me.OpenRecordset(sql)
    Set ConsGNTrans_Recetas = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta General " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function

Public Function RecuperaReceta(ByVal Id As Long, transid As Long) As Variant
End Function

'Public Function RecuperaRecetaReproceso(ByVal id As Long, TransID As Long, BandIdPadre As Boolean) As Variant
Public Function RecuperaRecetaReproceso(ByVal Id As Long, transid As Long, BandIdPadre As Boolean) As Recordset
    Dim sql As String, rs As Recordset
    Dim v As Variant
    sql = " Select distinct 0, IV.IdInventario, Iv.CodInventario, Iv.Descripcion, "
    sql = sql & " Ivm.Cantidad, IV.TIPO, ivk.idpadre "
    sql = sql & " From IVMateria Ivm "
    sql = sql & " INNER JOIN VWIvinventarioRECUPERAR Iv "
    sql = sql & " INNER JOIN IVKARDEX Ivk "
    sql = sql & " ON IV.IdInventario = Ivk.Idinventario "
    sql = sql & " ON IV.IdInventario = Ivm.Idmateria"
    sql = sql & " Where Ivm.IdInventario = " & Id
    sql = sql & " and ivk.transid=" & transid
    If BandIdPadre Then
        sql = sql & " and idpadre=0"
    End If
    Set rs = Me.OpenRecordset(sql)
    Set RecuperaRecetaReproceso = rs
    Set rs = Nothing
End Function

Public Function RecuperaRecetaReproceso1(ByVal Id As Long, transid As Long, idpadre As Long) As Variant
    Dim sql As String, rs As Recordset
    Dim v As Variant
    sql = " Select distinct 0, IV.IdInventario, Iv.CodInventario, Iv.Descripcion, "
    sql = sql & " Ivm.Cantidad, IV.TIPO, ivk.idpadre "
    sql = sql & " From IVMateria Ivm "
    sql = sql & " INNER JOIN VWIvinventarioRECUPERAR Iv "
    sql = sql & " INNER JOIN IVKARDEX Ivk "
    sql = sql & " ON IV.IdInventario = Ivk.Idinventario "
    sql = sql & " ON IV.IdInventario = Ivm.Idmateria"
    sql = sql & " Where Ivm.IdInventario = " & Id
    sql = sql & " and ivk.transid=" & transid
    sql = sql & " and ivk.idpadre=" & idpadre
    Set rs = Me.OpenRecordset(sql)
    Set RecuperaRecetaReproceso1 = rs
    Set rs = Nothing
End Function
 
 Function ConsIVTrans1(Optional BandTipoItem As Boolean) As Variant
  Dim sql As String, cond As String, s As String, rs As Recordset
    sql = "SELECT TransID, FechaTrans, CodAsiento, CodTrans, NumTrans, NumDocRef, " & _
            "Nombre, Descripcion, CodInventario, DescItem, CodBodega, abs(Cantidad), "
   Select Case gobjCond.numMoneda
    Case 1: sql = sql & "CUR1 AS CUR, CTR1 AS CTR, PUR1 AS PUR,PTR1 AS PTR,1 AS Cotizacion, "
    Case 2: sql = sql & "CUR1/Cotizacion2 AS CUR, CTR1/Cotizacion2 AS CTR, PUR1/Cotizacion2 AS PUR,abs(PTR1)/Cotizacion2 AS PTR,Cotizacion2 AS Cotizacion, "
    Case 3: sql = sql & "CUR1/Cotizacion3 AS CUR, CTR1/Cotizacion3 AS CTR, PUR1/Cotizacion3 AS PUR,abs(PTR1)/Cotizacion3 AS PTR,Cotizacion3 AS Cotizacion, "
    Case 4: sql = sql & "CUR1/Cotizacion4 AS CUR, CTR1/Cotizacion4 AS CTR, PUR1/Cotizacion4 AS PUR,abs(PTR1)/Cotizacion4 AS PTR,Cotizacion4 AS Cotizacion, "
   End Select
    sql = sql & " CodCentro,Estado FROM vwConsIVTrans "
    'Condición de FechaTrans
    cond = "(FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB) & ")"
    'Condición de CodTrans
    If Len(gobjCond.CodTrans) > 0 Then
        'Si está especificada una transacción
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodTrans='" & gobjCond.CodTrans & "')"
    Else
        'Si no está especificada, selecciona SOLO a las que tiene acceso el usuario
        If Len(cond) > 0 Then cond = cond & " AND "
        s = gobjMain.GrupoActual.PermisoActual.ListaTrans(True)
        cond = cond & "(CodTrans " & s & ")"
    End If
    'Condición de NumTrans
    If gobjCond.NumTrans1 > 0 And gobjCond.NumTrans2 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans BETWEEN " & gobjCond.NumTrans1 & " AND " & gobjCond.NumTrans2 & ")"
    ElseIf gobjCond.NumTrans1 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans>=" & gobjCond.NumTrans1 & ")"
    ElseIf gobjCond.NumTrans2 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans<=" & gobjCond.NumTrans2 & ")"
    End If
    'Condición de C.Costo
    If (Len(gobjCond.CodCentro1) > 0) And (Len(gobjCond.CodCentro1) > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodCentro BETWEEN '" & gobjCond.CodCentro1 & "' AND '" & gobjCond.CodCentro2 & "')"
    ElseIf Len(gobjCond.CodCentro1) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodCentro>='" & gobjCond.CodCentro1 & "')"
    ElseIf Len(gobjCond.CodCentro2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodCentro<='" & gobjCond.CodCentro2 & "')"
    End If
    'Condición de Estado
    If gobjCond.EstadoBool(ESTADO_NOAPROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_NOAPROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_APROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_APROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_DESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_DESPACHADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_ANULADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_ANULADO & ")"
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE (" & cond & ") "
        sql = sql & "AND Tipo = 4"
    sql = sql & " ORDER BY FechaTrans, HoraTrans, TransID, Orden"     '*** MAKOTO 07/dic/00
    Set rs = Me.OpenRecordset(sql)
    Set ConsIVTrans1 = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons. Transacciones inventario " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "IV"
End Function

'AUC 18/12/06 recupera kardex de item con tipo
Public Function ConsIVKardexItemTipo() As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim cond1 As String
    'If Len(gobjCond.Fecha1) > 0 And Len(gobjCond.Fecha2) > 0 Then
        cond = " AND gc.FechaTrans Between " & FechaYMD(gobjCond.fecha1, TipoDB)
        cond = cond & " And " & FechaYMD(gobjCond.fecha2, TipoDB)
    'End If
    sql = "SELECT gc.TransID, iv.CodInventario, iv.Descripcion AS NombreItem, gc.FechaTrans,gc.CodTrans, gc.CodTrans + CONVERT(varchar,gc.NumTrans) AS Trans, " & _
          " gc.NumDocRef,gc.Nombre, gc.Descripcion,ivb.CodBodega, CASE   WHEN ivk.Cantidad<0 THEN null   Else: ivk.Cantidad " & _
          " END AS Ingreso,  CASE   WHEN ivk.Cantidad>0 THEN null    ELSE  ivk.Cantidad*-1  END AS Egreso,   0 AS Saldo, " & _
          " Case " & gobjCond.numMoneda & _
          " WHEN 1 THEN CostoRealTotal/Cantidad " & _
          " WHEN 2 THEN CostoRealTotal/Cantidad/Cotizacion2 " & _
          " WHEN 3 THEN CostoRealTotal/Cantidad/Cotizacion3 " & _
          " ELSE    CostoRealTotal/Cantidad/Cotizacion4 " & _
          " END AS CUR," & _
          " Case " & gobjCond.numMoneda & _
          " WHEN 1 THEN CostoRealTotal " & _
          " WHEN 2 THEN CostoRealTotal/Cotizacion2 " & _
          " WHEN 3 THEN CostoRealTotal/Cotizacion3 " & _
          " ELSE  CostoRealTotal/Cotizacion4 " & _
          " END AS CTR," & _
          " Case " & gobjCond.numMoneda & _
          " WHEN 1 THEN 1 " & _
          " WHEN 2 THEN Cotizacion2 " & _
          " WHEN 3 THEN Cotizacion3 " & _
          " Else: Cotizacion4 " & _
          " END AS Cotizacion, " & _
          " gc.Estado, ivk.Orden, gc.HoraTrans Into tmp103 " & _
          " FROM IVInventario iv INNER JOIN GNComprobante gc "
    sql = sql & " INNER JOIN IVKardex ivk  INNER JOIN IVBodega ivb   ON ivk.IdBodega=ivb.IdBodega ON gc.TransID = ivk.TransID ON iv.IdInventario = ivk.IdInventario WHERE gc.Estado<>3"
    If Len(gobjCond.CodItem1) > 0 And Len(gobjCond.CodItem2) > 0 Then
       cond = cond & "  AND  iv.CodInventario Between '" & gobjCond.CodItem1 & "' And  '" & gobjCond.CodItem2 & "'"
   End If
    If Len(gobjCond.CodBodega1) > 0 Then
        cond = cond & "  AND (('" & gobjCond.CodBodega1 & "'='') OR (ivb.CodBodega='" & gobjCond.CodBodega1 & "'))"
    End If
     sql = sql & cond
    If gobjCond.tipoItem1 Then sql = sql & " AND iv.tipo=0 AND iv.bandVenta = 1  "
    If gobjCond.tipoItem2 Then sql = sql & " AND iv.tipo = 4  "
    VerificaExistenciaTabla 103
    Set rs = gobjMain.EmpresaActual.OpenRecordset(sql)
    sql = "SELECT tmp103.* Into tmp104 FROM tmp103 INNER JOIN GNTrans  ON GNTrans.CodTrans = tmp103.CodTrans" & _
          " WHERE (SUBSTRING(GNTRANS.Opcion, 102, 1) = 'S')"
    VerificaExistenciaTabla 104
    Set rs = gobjMain.EmpresaActual.OpenRecordset(sql)
    sql = " SELECT iv.IdInventario, Sum( CASE WHEN ivk.Cantidad>0 THEN  ivk.Cantidad ELSE 0 END) AS SumaIngreso," & _
          " Sum( CASE WHEN ivk.Cantidad<0 THEN  ivk.Cantidad*-1 ELSE 0 END) AS SumaEgreso," & _
          " Sum( " & _
          " Case '" & gobjCond.numMoneda & "'" & _
          " WHEN 1 THEN CostoRealTotal " & _
          " WHEN 2 THEN CostoRealTotal/Cotizacion2 " & _
          " WHEN 3 THEN CostoRealTotal/Cotizacion3 " & _
          " ELSE CostoRealTotal/Cotizacion4 " & _
          " END)/ " & _
          " (CASE Sum(ivk.Cantidad) WHEN 0 THEN 1 ELSE Sum(ivk.Cantidad) END ) AS CUR, " & _
          " Sum(" & _
          " Case '" & gobjCond.numMoneda & "'" & _
          " WHEN 1 THEN CostoRealTotal " & _
          " WHEN 2 THEN CostoRealTotal/Cotizacion2 " & _
          " WHEN 3 THEN CostoRealTotal/Cotizacion3 " & _
          " ELSE CostoRealTotal/Cotizacion4 " & _
          " End ) AS CTR " & _
          " Into tmp105 " & _
          " FROM IVInventario iv INNER JOIN  GNTrans gnt INNER JOIN GNComprobante gc INNER JOIN IVKardex ivk " & _
          " INNER JOIN IVBodega ivb  ON ivb.IdBodega=ivk.IdBodega ON gc.TransID = ivk.TransID ON gnt.CodTrans=gc.CodTrans " & _
          " ON iv.IdInventario = ivk.IdInventario "
    sql = sql & " WHERE gc.Estado<>3  AND gc.FechaTrans < " & FechaYMD(gobjCond.fecha1, TipoDB)
    sql = sql & "  AND (SUBSTRING(gnt.Opcion, 102, 1) = 'S') "
    If Len(gobjCond.CodBodega1) > 0 Then
       sql = sql & " AND (('" & gobjCond.CodBodega1 & "'='') OR (ivb.CodBodega='" & gobjCond.CodBodega1 & "'))"
    End If
    If gobjCond.tipoItem1 Then sql = sql & " AND iv.tipo = 0  AND bandVenta = 1 "
    If gobjCond.tipoItem2 Then sql = sql & " AND iv.tipo = 4  "
    sql = sql & " GROUP BY iv.IdInventario"
    VerificaExistenciaTabla 105
    Set rs = gobjMain.EmpresaActual.OpenRecordset(sql)
    sql = " SELECT 0 AS TransID, iv.CodInventario, iv.Descripcion AS NombreItem,"
    sql = sql & " dateadd(dd,-1," & FechaYMD(gobjCond.fecha1, TipoDB) & ") AS FechaTrans,"
    sql = sql & " ' ' AS CodTrans, "
    sql = sql & " ' ' AS Trans,"
    sql = sql & " ' ' AS NumDocRef,"
    sql = sql & " ' ' AS Nombre,"
    sql = sql & " 'Saldo anterior' AS Descripcion,"
    If Len(gobjCond.CodBodega1) > 0 Then
       sql = sql & " '" & gobjCond.CodBodega1 & "' AS CodBodega,"
    Else
       sql = sql & " ' ' AS CodBodega,"
    End If
    sql = sql & " nullif(SumaIngreso,0) AS Ingreso, "
    sql = sql & " nullif(SumaEgreso,0) AS Egreso, "
    sql = sql & " SumaIngreso-SumaEgreso AS Saldo, "
    sql = sql & " isnull(tmp105.CUR,0) AS CUR, "
    sql = sql & " isnull(tmp105.CTR,0) AS CTR, "
    sql = sql & " Null AS Cotizacion, "
    sql = sql & " Null AS Estado, "
    sql = sql & " 0 AS Orden, "
    sql = sql & " 0 AS HoraTrans  Into tmp106 "
    sql = sql & " FROM IVInventario iv INNER JOIN tmp105 ON iv.IdInventario = tmp105.IdInventario"
    If Len(gobjCond.CodItem1) > 0 And Len(gobjCond.CodItem2) > 0 Then
        sql = sql & " WHERE iv.CodInventario Between '" & gobjCond.CodItem1 & "' And  '" & gobjCond.CodItem2 & "'"
    End If
    VerificaExistenciaTabla 106
    Set rs = gobjMain.EmpresaActual.OpenRecordset(sql)
     sql = "SELECT * FROM tmp106 "
     sql = sql & " Union"
     sql = sql & " SELECT * FROM tmp104"
     sql = sql & " ORDER BY CodInventario,  FechaTrans, HoraTrans, TransID, Orden"
     Set rs = gobjMain.EmpresaActual.OpenRecordset(sql)
     Set ConsIVKardexItemTipo = rs
     Set rs = Nothing
     Me.GrabaGNLogAccion "CONSULTA", "Consulta Kardex inv. tipo4 " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "IV"
End Function

'AUC lista items que tiene tipo 4 or o items que tiene señalado la band de venta
Public Function ListaIVInventarioTipo4SoloVenta() As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodInventario, Descripcion FROM IVInventario where tipo = 4 or bandventa = 1 ORDER BY CodInventario"
    Set rs = Me.OpenRecordset(sql)
    ListaIVInventarioTipo4SoloVenta = MiGetRows(rs)
    rs.Close
    Set rs = Nothing
End Function

'Consulta de comparación entre Presupuesto  y Consumos
Public Function ConsKardexTotalCC() As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    Dim numReg As Long, TransComp As String, rsaux As Recordset
    Dim v As Variant, i As Integer, cadena As String
        sql = " SELECT "
        sql = sql & " ivk.IdInventario, Sum(ivk.Cantidad) AS SumaCantPre,"
        sql = sql & " Sum(ivk.CostoRealTotal / gc.Cotizacion2) As SumaCostoPre "
        sql = sql & " Into tmp1"
        sql = sql & " From  IVKardex ivk "
        sql = sql & " INNER JOIN GNComprobante gc"
        sql = sql & " INNER JOIN GNCentroCosto gcc"
        sql = sql & " ON gc.IDCentro = gcc.IDcentro"
        sql = sql & " ON gc.TransID = ivk.TransID"
        sql = sql & " WHERE   (gcc.CodCentro ='" & gobjCond.CodCentro1 & "') AND"
        sql = sql & " (gc.Estado IN (1,2,4))"
        sql = sql & " AND (gc.CodTrans = '" & gobjCond.CodTrans & "')"
        sql = sql & " GROUP BY gcc.CodCentro, ivk.IdInventario"
        VerificaExistenciaTabla 1
        Me.EjecutarSQL sql, numReg
        '---------- Listado de suma de Cantidad  y Costos en Modificaciones de Presupuesto
        'sql = " SELECT gc.codtrans, gc.numtrans,"
        sql = " SELECT "
        sql = sql & " ivk.IdInventario, Sum(ivk.Cantidad) AS SumaCantPre,"
        sql = sql & " Sum(ivk.CostoRealTotal / gc.Cotizacion2) As SumaCostoPre"
        sql = sql & " Into tmp3"
        sql = sql & " From  IVKardex ivk "
        sql = sql & "  INNER JOIN GNComprobante gc"
        sql = sql & "  INNER JOIN GNCentroCosto gcc"
        sql = sql & " ON gc.IDCentro = gcc.IDcentro"
        sql = sql & " ON gc.TransID = ivk.TransID"
        sql = sql & " WHERE   (gcc.CodCentro ='" & gobjCond.CodCentro1 & "') AND"
        sql = sql & " (gc.Estado IN (1,2,4))"
        sql = sql & " AND (gc.CodTrans = '" & gobjCond.CodTrans & "' + 'M')"
        sql = sql & " GROUP BY gcc.CodCentro, ivk.IdInventario "
        VerificaExistenciaTabla 3
        Me.EjecutarSQL sql, numReg
        sql = "select  TransHistorial from gntrans where codtrans='" & gobjCond.CodTrans & "'"
        Set rsaux = Me.OpenRecordset(sql)
        If rsaux.RecordCount > 0 Then
            TransComp = rsaux.Fields("TransHistorial")
        End If
        cadena = ""
        v = Split(TransComp, ";")
        For i = 0 To UBound(v)
            cadena = cadena & "'" & Mid$(v(i), 2, Len(v(i)) - 2) & "',"
        Next i
        cadena = Mid$(cadena, 1, Len(cadena) - 1)
        '---------- Listado de suma de Cantidad y Costos por items en Consumos
        sql = " SELECT ivk.IdInventario,"
        sql = sql & " Sum(ivk.Cantidad) AS SumaCant,"
        sql = sql & " Sum(ivk.CostoRealTotal / gc.Cotizacion2) As SumaCosto"
        sql = sql & " Into tmp2"
        sql = sql & " From  IVKardex ivk "
        sql = sql & "  INNER JOIN GNComprobante gc"
        sql = sql & "  INNER JOIN GNCentroCosto gcc"
        sql = sql & " ON gc.IDCentro = gcc.IDcentro"
        sql = sql & " ON gc.TransID = ivk.TransID"
        sql = sql & " WHERE   (gcc.CodCentro ='" & gobjCond.CodCentro1 & "') AND"
        sql = sql & " (gc.Estado<>3)"
        sql = sql & " and (gc.CodTrans IN (SELECT CodTrans FROM GNTrans WHERE VerificaLimiteCon='" & gobjCond.CodTrans & "')) "
        sql = sql & " and IdInventario in (select IdInventario from tmp1 )"
        sql = sql & " GROUP BY gc.IdCentro, ivk.IdInventario"
        '---------- Listado de suma de Cantidad y Costos por items en Consumos que no son salidas de consumos
        sql = sql & " union SELECT ivk.IdInventario,"
        sql = sql & " (Sum(ivk.Cantidad)*-1) AS SumaCant,"
        sql = sql & " (Sum(ivk.CostoRealTotal / gc.Cotizacion2)*-1) As SumaCosto"
        sql = sql & " From  IVKardex ivk "
        sql = sql & "  INNER JOIN GNComprobante gc"
        sql = sql & "  INNER JOIN GNCentroCosto gcc"
        sql = sql & " ON gc.IDCentro = gcc.IDcentro"
        sql = sql & " ON gc.TransID = ivk.TransID"
        sql = sql & " WHERE   (gcc.CodCentro ='" & gobjCond.CodCentro1 & "') AND"
        sql = sql & " (gc.Estado<>3)"
        sql = sql & " and (gc.CodTrans in (" & cadena & ")) "
        sql = sql & " and (IdInventario  in (select IdInventario from tmp1 )"
        sql = sql & " or IdInventario  in (select IdInventario from tmp3 ))"
        sql = sql & " GROUP BY gc.IdCentro, ivk.IdInventario"
        VerificaExistenciaTabla 2
        Me.EjecutarSQL sql, numReg
        'AUC  PARA RECARGOS--------- HC Y HCM
        sql = "SELECT IVKR.TRANSID, r.codrecargo,r.descripcion,SUM(VALOR) AS VALOR "
        sql = sql & " INTO tmp4  FROM IVKARDEXRECARGO IVKR "
        sql = sql & " INNER JOIN ivrecargo r on r.idrecargo = ivkr.idrecargo"
        sql = sql & " INNER JOIN GNComprobante gc  INNER JOIN GNCentroCosto gcc"
        sql = sql & " ON gc.IDCentro = gcc.IDcentro ON GC.TRANSID = IVKR.TRANSID"
        sql = sql & " WHERE   (gcc.CodCentro ='" & gobjCond.CodCentro1 & "') AND"
        sql = sql & " (gc.Estado IN (1,2,4))"
        sql = sql & " AND gc.CodTrans IN (('" & gobjCond.CodTrans & "' + 'M'),'" & gobjCond.CodTrans & "')"
        sql = sql & " GROUP BY IVKR.TRANSID,r.codrecargo,r.descripcion order by ivkr.transid"
        VerificaExistenciaTabla 4
        Me.EjecutarSQL sql, numReg
        sql = "SELECT 'Recargos' as Tipo, tmp4.transid,   (tmp4.codrecargo) as codInventario, (tmp4.Descripcion)as descripcion, 0 As Presupuesto,"
        sql = sql & " 0 AS PreMod, 0 AS PreTotal, 0 AS CostoTotalPre, 0 CostoTotalPreMod, 0 AS Consumo, 0 As CostoUnit,  0   AS CostoTotal,"
        sql = sql & " 0 As SaldoCant, 0 As SaldoCosto,TMP4.valor as ValorRecargos into Tmp6 From GNComprobante gc"
        sql = sql & " INNER JOIN GNCentroCosto gcc ON gc.IDCentro = gcc.IDcentro INNER JOIN tmp4 on tmp4.transid = gc.transid"
        sql = sql & " INNER JOIN IVKardex ivk INNER JOIN IVInventario ivi ON ivk.Idinventario=ivi.IdInventario ON gc.TransID = ivk.TransID"
        sql = sql & " WHERE   (gcc.CodCentro ='" & gobjCond.CodCentro1 & "')  AND (gc.Estado IN (1,2,4)) AND gc.CodTrans IN (('" & gobjCond.CodTrans & "' + 'M'),'" & gobjCond.CodTrans & "')"
        sql = sql & " group by Tipo,tmp4.transid,tmp4.codrecargo,tmp4.descripcion,TMP4.VALOR order by tipo"
        VerificaExistenciaTabla 6
        Me.EjecutarSQL sql, numReg
        '---------- Combina las tres tablas temporales para comparar
        sql = " SELECT"
        sql = sql & " ' Presupuesto' as Tipo , "
        sql = sql & " iv.CodInventario,"
        sql = sql & " iv.Descripcion,"
        sql = sql & " isnull(tmp1.SumaCantPre, 0) * -1 As Presupuesto,"
        sql = sql & " isnull(tmp3.SumaCantPre, 0) * -1 AS PreMod,"
        sql = sql & " isnull(tmp1.SumaCantPre, 0) * -1 + isnull(tmp3.SumaCantPre, 0) * -1 AS PreTotal,"
        sql = sql & " isnull(tmp1.SumaCostoPre, 0) * -1 AS CostoTotalPre,"
        sql = sql & " isnull(tmp3.SumaCostoPre, 0) * -1 AS CostoTotalPreMod,"
        sql = sql & " isnull(tmp2.SumaCant, 0)*-1 As Consumo,"
        sql = sql & " CASE WHEN isnull(tmp2.SumaCant, 0) <>0 THEN isnull(tmp2.SumaCosto, 0) / tmp2.SumaCant Else 0 END  As CostoUnit,"
        sql = sql & " isnull(tmp2.SumaCosto, 0) * -1 As CostoTotal,"
        sql = sql & " (isnull(tmp1.SumaCantPre,0) * -1) + (isnull(tmp3.SumaCantPre, 0) * -1) - isnull(tmp2.SumaCant, 0) * -1 As SaldoCant,"
        sql = sql & " (isnull(tmp1.SumaCostoPre,0) * -1) + (isnull(tmp3.SumaCostoPre, 0) * -1) - isnull(tmp2.SumaCosto, 0) * -1 As SaldoCosto, 0 as Recargos"
        sql = sql & " From"
        sql = sql & " IVInventario iv INNER JOIN"
        sql = sql & " (tmp3 FULL JOIN "
        sql = sql & " (tmp1  FULL JOIN tmp2  ON tmp1.IdInventario = tmp2.IdInventario)"
        sql = sql & " ON tmp3.IdInventario = tmp1.IdInventario OR tmp3.IdInventario = tmp2.IdInventario)"
        sql = sql & " ON (iv.IdInventario=tmp1.IdInventario OR iv.IdInventario = tmp2.IdInventario OR iv.IdInventario = tmp3.IdInventario)"
        sql = sql & " Union All"
        sql = sql & " SELECT"
        sql = sql & " 'Otros Gastos' as Tipo, "
        sql = sql & " codInventario,"
        sql = sql & " ivi.Descripcion,"
        sql = sql & " 0 As Presupuesto,"
        sql = sql & " 0 AS PreMod,"
        sql = sql & " 0 AS PreTotal,"
        sql = sql & " 0 AS CostoTotalPre,"
        sql = sql & " 0 CostoTotalPreMod,"
        sql = sql & " abs(ivk.Cantidad) AS Consumo,"
        sql = sql & " abs(ivk.CostoRealTotal / gc.Cotizacion2)/   abs(ivk.Cantidad) As CostoUnit,"
        sql = sql & " abs(ivk.CostoRealTotal / gc.Cotizacion2)    AS CostoTotal,"
        sql = sql & " 0 As SaldoCant,"
        sql = sql & " 0 As SaldoCosto, 0 as Recargos"
        sql = sql & " From"
        sql = sql & " GNComprobante gc"
        sql = sql & "  INNER JOIN GNCentroCosto gcc"
        sql = sql & " ON gc.IDCentro = gcc.IDcentro"
        sql = sql & " INNER JOIN IVKardex ivk"
        sql = sql & " INNER JOIN IVInventario ivi"
        sql = sql & " ON ivk.Idinventario=ivi.IdInventario"
        sql = sql & " ON gc.TransID = ivk.TransID"
        sql = sql & " WHERE   (gcc.CodCentro ='" & gobjCond.CodCentro1 & "') AND"
        sql = sql & " (gc.Estado IN (1,2,4))"
        sql = sql & " and (gc.CodTrans <> '" & gobjCond.CodTrans & "') and (gc.CodTrans <> '" & gobjCond.CodTrans & "' + 'M') "
        sql = sql & " and (gc.CodTrans not in (select VerificaLimiteCon from gntrans where VerificaLimiteCon='" & gobjCond.CodTrans & "')) "
        sql = sql & " and codInventario not in (select codInventario from tmp2 inner join ivinventario iv on tmp2.idinventario=iv.idinventario)"
        'AUC Listado Final de Descuentos HC Y HCM------------
        sql = sql & " UNION ALL"
        sql = sql & " SELECT tmp6.Tipo, tmp6.codInventario, tmp6.Descripcion, 0 As Presupuesto, 0 AS PreMod, 0 AS PreTotal,"
        sql = sql & " SUM(TMP6.valorrecargos) as ValorRecargos, 0 CostoTotalPreMod, 0 AS Consumo, 0 As CostoUnit, 0 AS PreMod , 0 As SaldoCant,"
        sql = sql & " 0 As SaldoCosto, 0 as recargos "
        sql = sql & " From tmp6 "
        sql = sql & " group by tmp6.Tipo,tmp6.codInventario,tmp6.descripcion " '    "order by tmp6.tipo"
   Set rs = Me.OpenRecordset(sql)
   UltimoRecordset rs
   Set ConsKardexTotalCC = rs
   Set rs = Nothing
End Function

Public Function ListaIVGrupos(CodGrupo As String, _
                                          desc As String, _
                                          NumGrupo As Integer) As Variant
    Dim sql As String, s As String, cond As String
    Dim rs As Recordset
    sql = "SELECT DISTINCT CodGrupo" & NumGrupo & ",Descripcion  FROM IVGrupo" & NumGrupo
    If Len(CodGrupo) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & " CodGrupo" & NumGrupo & " LIKE  '%" & CodGrupo & "%'"
    End If
    If Len(desc) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & " descripcion  like '%" & desc & "%' "
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond '& " AND (CodGrupo" & NumGrupo & "<>NULL)  ) "
    sql = sql & " ORDER BY CodGrupo" & NumGrupo
    Set rs = Me.OpenRecordset(sql)
    Set ListaIVGrupos = rs
    Set rs = Nothing
End Function

Public Function ListaPCGrupos(CodGrupo As String, _
                                          desc As String, _
                                          NumGrupo As Integer) As Variant
    Dim sql As String, s As String, cond As String
    Dim rs As Recordset
    sql = "SELECT DISTINCT CodGrupo" & NumGrupo & ",Descripcion  FROM PCGrupo" & NumGrupo
    If Len(CodGrupo) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & " CodGrupo" & NumGrupo & " LIKE  '%" & CodGrupo & "%'"
    End If
    If Len(desc) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & " descripcion  like '%" & desc & "%' "
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond '& " AND (CodGrupo" & NumGrupo & "<>NULL)  ) "
    sql = sql & " ORDER BY CodGrupo" & NumGrupo
    Set rs = Me.OpenRecordset(sql)
    Set ListaPCGrupos = rs
    Set rs = Nothing
End Function

'Consulta de comparación entre Presupuesto  y Consumos
Public Function kardexCCRecargos() As Recordset
    Dim sql As String, cond As String, s As String, rs As Recordset
    Dim numReg As Long, TransComp As String, rsaux As Recordset
    Dim v As Variant, i As Integer, cadena As String
        'AUC  PARA RECARGOS--------- SIN HC Y HCM
        sql = "SELECT IVKR.TRANSID, r.codrecargo,r.descripcion,SUM(VALOR) AS VALOR "
        sql = sql & " INTO tmp7  FROM IVKARDEXRECARGO IVKR "
        sql = sql & " INNER JOIN ivrecargo r on r.idrecargo = ivkr.idrecargo"
        sql = sql & " INNER JOIN GNComprobante gc  INNER JOIN GNCentroCosto gcc"
        sql = sql & " ON gc.IDCentro = gcc.IDcentro ON GC.TRANSID = IVKR.TRANSID"
        sql = sql & " WHERE   (gcc.CodCentro ='" & gobjCond.CodCentro1 & "') AND"
        sql = sql & " (gc.Estado IN (1,2,4))"
        sql = sql & " AND gc.CodTrans <> ('" & gobjCond.CodTrans & "' + 'M') AND gc.CodTrans <> '" & gobjCond.CodTrans & "'"
        sql = sql & " GROUP BY IVKR.TRANSID,r.codrecargo,r.descripcion order by ivkr.transid"
        VerificaExistenciaTabla 7
        Me.EjecutarSQL sql, numReg
        sql = "SELECT 'Recargos' as Tipo, tmp7.transid,   (tmp7.codrecargo) as codInventario, (tmp7.Descripcion)as descripcion, 0 As Presupuesto,"
        sql = sql & " 0 AS PreMod, 0 AS PreTotal, 0 AS CostoTotalPre, 0 CostoTotalPreMod, 0 AS Consumo, 0 As CostoUnit,  0   AS CostoTotal,"
        sql = sql & " 0 As SaldoCant, 0 As SaldoCosto,TMP7.valor as ValorRecargos into Tmp8 From GNComprobante gc"
        sql = sql & " INNER JOIN GNCentroCosto gcc ON gc.IDCentro = gcc.IDcentro INNER JOIN tmp7 on tmp7.transid = gc.transid"
        sql = sql & " INNER JOIN IVKardex ivk INNER JOIN IVInventario ivi ON ivk.Idinventario=ivi.IdInventario ON gc.TransID = ivk.TransID"
        sql = sql & " WHERE (gcc.CodCentro ='" & gobjCond.CodCentro1 & "')  AND (gc.Estado IN (1,2,4)) AND gc.CodTrans <> ('" & gobjCond.CodTrans & "' + 'M') AND gc.CodTrans <> '" & gobjCond.CodTrans & "'"
        sql = sql & " group by Tipo,tmp7.transid,tmp7.codrecargo,tmp7.descripcion,TMP7.VALOR order by tipo"
        VerificaExistenciaTabla 8
        Me.EjecutarSQL sql, numReg
        'RECARGOS SIN HC Y SIN HCM
        sql = " SELECT tmp8.Tipo,   tmp8.codInventario, tmp8.Descripcion, 0 As Presupuesto, 0 AS PreMod, 0 AS PreTotal,"
        sql = sql & " 0 AS PreMod, 0 CostoTotalPreMod, 0 AS Consumo, 0 As CostoUnit,  SUM(TMP8.ValorRecargos) AS ValorRecargos, 0 As SaldoCant,"
        sql = sql & " 0 As SaldoCosto, 0 as recargos  "
        sql = sql & " From tmp8"
        sql = sql & " group by tmp8.Tipo,tmp8.codInventario,tmp8.descripcion order by tmp8.tipo"
   Set rs = Me.OpenRecordset(sql)
   Set kardexCCRecargos = rs
   Set rs = Nothing
End Function

'AUC 12/11/07
Public Sub GrabaHistorial(ByVal IdProvcli As Long, _
                            ByVal transid As Long, ByVal FechaTrans As Date, _
                            ByVal Estado As Integer, ByVal Trans As String, ByVal Des As String, ByVal Valor As Currency, ByVal EsNuevo As Boolean)
    Dim sql As String, codu As String, n As Long, rs As Recordset
    On Error Resume Next
    Des = Left(Des, 256)
    If EsNuevo Then 'si es nuevo
        sql = "INSERT INTO PCHistorial (IdProvCli,TransId,FechaTrans, Estado, Trans ,Descripcion,Valor,FechaGrabado) " & _
          " VALUES ('" & IdProvcli & "','" & _
                         transid & "','" & _
                         FechaTrans & "','" & _
                         Estado & "', '" & _
                         Trans & "', '" & _
                         Des & "', " & Valor & " , '" & Now & "'  )"
    Else
            sql = " update PCHistorial"
            sql = sql & " set fechatrans='" & FechaTrans & "', estado='" & Estado & "', trans='" & Trans & "',descripcion='" & Des & "',valor=" & Valor & ",fechagrabado='" & Now & "'"
            sql = sql & " where IdProvcli =" & IdProvcli & " AND  transid = " & transid
    End If
    Me.Execute sql, True
End Sub

Public Function ListaHistorial(ByVal IdProvcli As Long) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT Transid,FechaTrans,(case estado   " & _
                              " when 1 then 'NoDevuelto' " & _
                              " When 2 then 'Devuelto' END ) AS Estado, " & _
                              " Trans,Descripcion,Valor FROM PCHistorial " & _
          " WHERE IdProvCli=" & IdProvcli & " AND ESTADO <> 3 AND ESTADO <> 0 ORDER BY FechaTrans"
    Set rs = Me.OpenRecordset(sql)
    Set ListaHistorial = rs
    Set rs = Nothing
End Function

Public Function CreaPCHistorial() As PCHistorial
    Dim obj As PCHistorial
    Set obj = New PCHistorial
    Set obj.Empresa = Me
    Set CreaPCHistorial = obj
    Set obj = Nothing
End Function


'AUC 12/11/07
Public Function VerificaExisteHistorial(ByVal transid As Long) As Boolean
    Dim sql As String, s As String
    Dim rs As Recordset
        sql = "SELECT TransID from PCHistorial where TransID = " & transid
        Set rs = Me.OpenRecordset(sql)
        If rs.RecordCount = 0 Then
           VerificaExisteHistorial = False
        Else
           VerificaExisteHistorial = True
        End If
  rs.Close
    Set rs = Nothing
End Function


Public Function RecuperarIDBodega(Bodega As String) As Long
    Dim rs As Recordset, sql As String
    RecuperarIDBodega = 0
    sql = "Select IdBodega from IVBodega Where CodBodega = '" & Bodega & "'"
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        RecuperarIDBodega = rs!IdBodega
    End If
    Set rs = Nothing
End Function

Public Function ConsGNTransAprobacionOfertas(ByVal Estado As Integer, _
                    Optional ByVal OrdenAscendente As Boolean) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    '*** MAKOTO 03/oct/00
    sql = "SELECT"
    If gobjCond.TopN > 0 Then
        sql = sql & " TOP " & gobjCond.TopN
    End If
    '*** MAKOTO 05/feb/01 Mod. Aumentado 'NumDocRef' y 'Nombre'
    sql = sql & " TransID, FechaTrans, CodAsiento, CodTrans, NumTrans, " & _
            "NumDocRef, Nombre, Descripcion, CodCentro,Estado FROM vwConsGNTrans "
    'Condición de FechaTrans
    cond = "FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB)
    'Condición de CodTrans
    If Len(cond) > 0 Then cond = cond & " AND "
    If Len(gobjCond.CodTrans) > 0 Then      'Si está especificado transaccion
        'Si es una sola transaccion
        If InStr(gobjCond.CodTrans, ",") = 0 Then
            cond = cond & "(CodTrans='" & gobjCond.CodTrans & "')"
        'Si está seleccionado varias trans.
        Else
            cond = cond & "(CodTrans IN (" & gobjCond.CodTrans & "))"
        End If
    Else
        'Si no hay condicion de cod.trans, selecciona todas las trans.
        ' que tenga permiso
        s = gobjMain.GrupoActual.PermisoActual.ListaTrans(True)
        If Len(s) > 0 Then
            cond = cond & "(CodTrans " & s & ")"
       Else
            cond = cond & "(CodTrans = '-------')"    'Para que NO devuelva nada si no tiene ningún permiso  '*** MAKOTO 26/dic/00
       End If
    End If
    'Condición de NumTrans
    If (gobjCond.NumTrans1 > 0) And (gobjCond.NumTrans2 > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans BETWEEN " & gobjCond.NumTrans1 & " AND " & gobjCond.NumTrans2 & ")"
    ElseIf gobjCond.NumTrans1 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans>=" & gobjCond.NumTrans1 & ")"
    ElseIf gobjCond.NumTrans2 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans<=" & gobjCond.NumTrans2 & ")"
    End If
    If Len(cond) > 0 Then cond = cond & " AND "
    cond = cond & "(Estado = " & ESTADO_APROBADO & "  OR  Estado = " & ESTADO_NOAPROBADO & " )"
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    'Ordern de filas
    If OrdenAscendente Then
        sql = sql & " ORDER BY FechaTrans, HoraTrans, TransID"         '*** MAKOTO 07/dic/00 Modificado para HoraTrans
    Else
        sql = sql & " ORDER BY FechaTrans DESC, HoraTrans DESC, TransID DESC"       '*** MAKOTO 07/dic/00 HoraTrans agregado
    End If
    Set rs = Me.OpenRecordset(sql)
    Set ConsGNTransAprobacionOfertas = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta General para ofertas" & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function

Public Function ConsGNRutaProcesos(ByVal NumGrupo As Integer) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    Dim numReg As Long, rsaux As Recordset, numtabla As Integer, i As Integer, j As Integer
    '*** MAKOTO 03/oct/00
    'calcula cantidad de horas
    sql = sql & " select codinventario as cod, sum(Rendimiento)as  CantHora"
    sql = sql & " Into tmp100"
    sql = sql & " from ivinventario iv inner join ivmateria ivm on iv.idinventario=ivm.idinventario"
    sql = sql & " Where tipo = 5"
    sql = sql & " group by codinventario,tipo"
    VerificaExistenciaTabla 100
    Me.EjecutarSQL sql, numReg
    sql = "SELECT codInventario, iv.descripcion from ivinventario iv "
    sql = sql & " inner join ivgrupo" & NumGrupo & " ivg on iv.idgrupo" & NumGrupo & "=ivg.idgrupo" & NumGrupo
    sql = sql & " where ivg. bandvalida= 1"
    Set rsaux = Me.OpenRecordset(sql)
    numtabla = 0
    rsaux.MoveFirst
    While Not rsaux.EOF
        sql = " SELECT DISTINCT TRANSID,IdTransFuente, estado, "
        sql = sql & " GNComprobante.CodTrans + ' ' + CONVERT(varchar, NumTrans)    AS Trans, "
        sql = sql & " (select canthora from tmp100 where cod='" & rsaux.Fields("codinventario") & "' ) as CantHora"
        sql = sql & " INTO TMP" & numtabla
        sql = sql & " FROM  gncomprobante "
        sql = sql & " where codtrans='" & gobjCond.CodTrans & "' "
        sql = sql & " AND NumDocRef='" & rsaux.Fields("codinventario") & "' AND ESTADO <>3"
        VerificaExistenciaTabla numtabla
        Me.EjecutarSQL sql, numReg
        numtabla = numtabla + 1
        rsaux.MoveNext
    Wend
    sql = " SELECT DISTINCT"
'    numtabla = 0
'    rsAux.MoveFirst
    For i = 0 To (rsaux.RecordCount - 2)
        sql = sql & " ISNULL(G" & i & ".CodTrans, "
    Next i
    sql = sql & " G" & rsaux.RecordCount - 1 & ".CodTrans"
    For i = 0 To (rsaux.RecordCount - 2)
        sql = sql & ")"
    Next i
    sql = sql & " + ' ' + CONVERT(varchar, "
    For i = 0 To (rsaux.RecordCount - 2)
        sql = sql & " ISNULL(G" & i & ".NumTrans, "
    Next i
    sql = sql & " G" & rsaux.RecordCount - 1 & ".NumTrans)"
    For i = 0 To (rsaux.RecordCount - 2)
        sql = sql & ")"
    Next i
    sql = sql & " as Trans, "
    For i = 0 To (rsaux.RecordCount - 2)
        sql = sql & " ISNULL(G" & i & ".Nombre, "
    Next i
    sql = sql & " G" & rsaux.RecordCount - 1 & ".Nombre "
    For i = 0 To (rsaux.RecordCount - 2)
        sql = sql & ")"
    Next i
    sql = sql & " as Nombre, "
    numtabla = 0
    rsaux.MoveFirst
    While Not rsaux.EOF
        sql = sql & " ISNULL(TMP" & numtabla & ".TRANS,0) AS " & rsaux.Fields("codinventario") & ", "
        sql = sql & " ISNULL(TMP" & numtabla & ".estado,0) AS EST_" & rsaux.Fields("codinventario") & "  ,  "
        sql = sql & " TMP" & numtabla & ".TRANSID, "
        sql = sql & " TMP" & numtabla & ".CantHora, "
        numtabla = numtabla + 1
        rsaux.MoveNext
    Wend
    sql = Mid$(sql, 1, Len(sql) - 2)
    sql = sql & " From"
    numtabla = 0
    rsaux.MoveFirst
    While Not rsaux.EOF
        If numtabla = 0 Then
            sql = sql & " TMP" & numtabla & " INNER JOIN GNCOMPROBANTE G" & numtabla & " ON G" & numtabla & ".TRANSID=TMP" & numtabla & ".IdTransFuente "
        Else
            sql = sql & " full JOIN  TMP" & numtabla & " INNER JOIN GNCOMPROBANTE G" & numtabla & " ON G" & numtabla & ".TRANSID=TMP" & numtabla & ".IdTransFuente "
        End If
        numtabla = numtabla + 1
        rsaux.MoveNext
    Wend
    For i = (rsaux.RecordCount - 1) To 1 Step -1
         sql = sql & " ON TMP" & i - 1 & ".IdTransFuente=TMP" & i & ".IdTransFuente"
         If i <> rsaux.RecordCount Then
            For j = (i - 1) To (rsaux.RecordCount - 1)
                If j > i Then
                    sql = sql & " OR TMP" & i - 1 & ".IdTransFuente=TMP" & j & ".IdTransFuente"
                End If
            Next j
        End If
    Next i
    Set rs = Me.OpenRecordset(sql)
    Set ConsGNRutaProcesos = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta General para Rutaofertas" & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function

Public Function ConsGNRutaSoloProceso(ByVal Proceso As String) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    Dim numReg As Long, rsaux As Recordset
    sql = " SELECT DISTINCT TRANSID, IdTransFuente, estado, "
    sql = sql & " GNComprobante.CodTrans + ' ' + CONVERT(varchar, NumTrans)    AS Trans"
    sql = sql & " INTO TMP0 "
    sql = sql & " FROM  gncomprobante "
    sql = sql & " where codtrans='" & gobjCond.CodTrans & "' "
    sql = sql & " AND NumDocRef='" & Proceso & "' AND ESTADO <>3"
    VerificaExistenciaTabla 0
    Me.EjecutarSQL sql, numReg
    sql = " SELECT DISTINCT  "
    sql = sql & " (G0.CodTrans)+ ' '"
    sql = sql & " + CONVERT(varchar, (G0.NumTrans)"
    sql = sql & " )    AS Trans,"
    sql = sql & " (G0.nOMBRE) as NOMBRE, "
    sql = sql & " isnull(TMP0.TRANS,0) AS " & Proceso & " , ISNULL(TMP0.estado,0) AS EST_" & Proceso & ",  "
    sql = sql & " tmp0.TRANSID "
    sql = sql & " From"
    sql = sql & " TMP0 INNER JOIN GNCOMPROBANTE G0 ON G0.TRANSID=TMP0.IdTransFuente "
    Set rs = Me.OpenRecordset(sql)
    Set ConsGNRutaSoloProceso = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta General para Rutaofertas" & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function

Public Function ListaIVInventarioSoloIvGrupo(NumGrupo As Integer, BandSoloValida As Boolean, BandRS As Boolean, cod As String) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT codInventario, iv.descripcion from ivinventario iv "
    sql = sql & " inner join ivgrupo" & NumGrupo & " ivg on iv.idgrupo" & NumGrupo & "=ivg.idgrupo" & NumGrupo
    sql = sql & " where ivg.bandvalida= 1"
    If Len(cod) > 0 Then
        sql = sql & " and  codgrupo" & NumGrupo & "='" & cod & "'"
    End If
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVInventarioSoloIvGrupo = rs
    Else
        ListaIVInventarioSoloIvGrupo = MiGetRows(rs)
       rs.Close
    End If
    Set rs = Nothing
End Function

'DESDE AQUI PARA LAS REGLAS --------------------
'AUC 30/01/08 Lista reglas
Public Function ListaReglas(BandRS As Boolean) As Variant
              Dim sql As String, rs As Recordset
        sql = "SELECT regla,subregla,condicion,variable,operador,valor,idregla FROM reglas "
    sql = sql & " ORDER BY regla"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaReglas = rs
    Else
        ListaReglas = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

'AUC para listar items solamente que se vayan a utilizar en los valores de las reglas
Public Function ListaIVInventarioReglas() As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodInventario, Descripcion FROM IVInventario "
    sql = sql & "WHERE  idgrupo4 <> 0  ORDER BY CodInventario"
    Set rs = Me.OpenRecordset(sql)
    ListaIVInventarioReglas = MiGetRows(rs)
    rs.Close
    Set rs = Nothing
End Function

Public Function CreaRegla() As Reglas
    Dim obj As Reglas
    Set obj = New Reglas
    Set obj.Empresa = Me
    Set CreaRegla = obj
    Set obj = Nothing
End Function

'Recupera GNComprobante por TransID o por CodTrans y NumTrans (Cuando TransID=0)
Public Function RecuperarReglas(idregla As Long _
                                      ) As Reglas
    Dim obj As Reglas
    Set obj = New Reglas
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar idregla
    If Err.Number = 0 Then Set RecuperarReglas = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

'grupos para centros de costo 20/03/2009

Public Function RecuperaGNCGrupo(NumGrupo As Byte, key As Variant) As GnCGrupo
    Dim obj As GnCGrupo
    
    Set obj = New GnCGrupo
    Set obj.Empresa = Me
    obj.NumGrupo = NumGrupo
    
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaGNCGrupo = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CreaGNCGrupo(NumGrupo As Byte) As GnCGrupo
    Dim obj As GnCGrupo
    
    Set obj = New GnCGrupo
    Set obj.Empresa = Me
    obj.NumGrupo = NumGrupo
    Set CreaGNCGrupo = obj
    Set obj = Nothing
End Function

Public Function ListaGNCGrupo(NumGrupo As Integer, BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
    sql = "SELECT CodGrupo" & NumGrupo & ",Descripcion FROM GNCGrupo" & NumGrupo
    If BandSoloValida Then
        sql = sql & " WHERE BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY CodGrupo" & NumGrupo

    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaGNCGrupo = rs
    Else
        ListaGNCGrupo = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function
    
Public Function ListaGNCGrupoParGNClexGrid(NumGrupo As Integer) As String
Dim sql As String, s As String
    Dim rs As Recordset
    
    sql = "SELECT CodGrupo" & NumGrupo & ",Descripcion FROM GNCGrupo" & NumGrupo
    sql = sql & " WHERE BandValida=" & CadenaBool(True, TipoDB)
    sql = sql & " ORDER BY CodGrupo" & NumGrupo
    
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
'    s = "|" & GetStringDAO(rs)         '*** MAKOTO 07/ago/2000 Modificado
    If Not rs.EOF Then s = "|" & GetStringDAO(rs, 20 + 50)      '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|", "(nulo)")
#End If
    ListaGNCGrupoParGNClexGrid = s
    rs.Close
    Set rs = Nothing
End Function

Public Function ListaGNCGrupoParGNClexGrid2(NumGrupo As Integer, _
                                          CodGrupo1 As String, _
                                          CodGrupo2 As String, _
                                          CodGrupo3 As String, _
                                          CodGrupo4 As String, _
                                          CodGrupo5 As String) As String
    Dim sql As String, s As String, cond As String
    Dim rs As Recordset
    
    sql = "SELECT DISTINCT CodGrupo" & NumGrupo & ",G" & NumGrupo & " FROM vwGNCGrupo"
    
    If Len(CodGrupo1) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodGrupo1='" & CodGrupo1 & "') "
    End If
    If Len(CodGrupo2) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodGrupo2='" & CodGrupo2 & "') "
    End If
    If Len(CodGrupo3) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodGrupo3='" & CodGrupo3 & "') "
    End If
    If Len(CodGrupo4) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodGrupo4='" & CodGrupo4 & "') "
    End If
    If Len(CodGrupo5) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodGrupo5='" & CodGrupo5 & "') "
    End If

    If Len(cond) > 0 Then sql = sql & " WHERE ( " & cond & " AND (CodGrupo" & NumGrupo & "<>NULL)  ) "
    sql = sql & " ORDER BY CodGrupo" & NumGrupo

    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 20 + 50)         '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|", "(nulo)")
#End If
    ListaGNCGrupoParGNClexGrid2 = s
    rs.Close
    Set rs = Nothing
End Function


Public Function ConsTSPorCobrarPagarVendeMora( _
                    ByVal PorCobrar As Boolean, _
                    ByVal CodProvcli As String, _
                    ByVal FechaVenci As Date, _
                    ByVal CodForma As String, _
                    ByVal CodMoneda As String, _
                    ByVal CodGrupo1 As String, _
                    ByVal CodVendedor As String, _
                    ByVal TasaMensual As Currency, _
                    ByVal diasGracia As Integer) As Variant
    Dim aux_codpc As String, aux_f1 As Date, aux_f2 As Date
    Dim aux_PorCobrar As Boolean, aux_Cliente As Boolean, aux_Proveedor As Boolean
    Dim aux_CodForma As String, aux_CodMoneda As String, aux_codgrupo As String
    Dim aux_incluircero As Boolean, aux_codVendedor As String, aux_codSucursal As String
    
    With gobjMain.objCondicion
        'Conservar valores actuales para que no afecte a otras consultas
        aux_codpc = .CodPC1
        aux_f1 = .fecha1
        aux_f2 = .fecha2
        aux_PorCobrar = .PorCobrar
        aux_Cliente = .Cliente
        aux_Proveedor = .Proveedor
        aux_CodForma = .CodForma
        aux_CodMoneda = .CodMoneda
        aux_codgrupo = .CodGrupo
        aux_incluircero = .IncluirCero
        aux_codVendedor = .Usuario1
        .PorCobrar = PorCobrar
        .Cliente = True
        .Proveedor = True
        .CodPC1 = CodProvcli
        .fecha1 = Me.GNOpcion.FechaInicio
        .fecha2 = FechaVenci
        .CodForma = CodForma
        .CodMoneda = CodMoneda
        .CodGrupo = CodGrupo1
        .IncluirCero = False
        .Usuario1 = CodVendedor
        .NumDias1 = diasGracia
        .TasaMensual = TasaMensual
        .NumDias2 = IIf(Len(Me.GNOpcion.ObtenerValor("NumDecimales")) > 0, Me.GNOpcion.ObtenerValor("NumDecimales"), 2)
        Set ConsTSPorCobrarPagarVendeMora = ConsTSPorCobrarPagarVendedorMora()
        'Recuperar valores reservados
        .CodPC1 = aux_codpc
        .fecha1 = aux_f1
        .fecha2 = aux_f2
        .PorCobrar = aux_PorCobrar
        .Cliente = aux_Cliente
        .Proveedor = aux_Proveedor
        .CodForma = aux_CodForma
        .CodMoneda = aux_CodMoneda
        .CodGrupo = aux_codgrupo
        .IncluirCero = aux_incluircero
        .Usuario1 = aux_codVendedor

    End With
End Function


'Para selección de documentos por cobrar/pagar + Mora
Public Function ConsTSPorCobrarPagarVendedorMora() As Variant
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim objCond As Condicion
    
    Set objCond = gobjMain.objCondicion
    
    'Si no está especificada la moneda, coge la Moneda predeterminada
    If Len(objCond.CodMoneda) = 0 Then objCond.CodMoneda = MONEDA_PRE
    numMoneda = Me.GNOpcion.IndiceMoneda(objCond.CodMoneda)
    
    sql = "spConsTSPorCobrarPagarVendedorMora " & numMoneda & ", " & _
                objCond.CodMoneda & "," & _
                CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                CadenaBool(objCond.Cliente, TipoDB) & "," & _
                CadenaBool(objCond.Proveedor, TipoDB) & "," & _
                FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                objCond.CodPC1 & "','" & _
                objCond.CodPC1 & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodGrupo & "','" & _
                objCond.Usuario1 & "','" & _
                objCond.Usuario1 & "'," & _
                objCond.TasaMensual & "," & _
                objCond.NumDias1 & "," & _
                IIf(Me.GNOpcion.Los100DocCobroPago, 1, 0) & "," & _
                objCond.NumDias2
    Set rs = Me.OpenRecordset(sql)
    Set ConsTSPorCobrarPagarVendedorMora = rs
    Set rs = Nothing
    Set objCond = Nothing
End Function



Public Function ListaIVInventarioServicio(BandValida As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
    sql = "SELECT idInventario,CodInventario, Descripcion FROM IVInventario "
    sql = sql & " where bandSERVICIO= 1"
    If BandValida Then
        sql = sql & " and (BandValida=" & CadenaBool(True, TipoDB) & ")"
    End If
    sql = sql & " ORDER BY CodInventario"
    Set rs = Me.OpenRecordset(sql)
    ListaIVInventarioServicio = MiGetRows(rs)
    rs.Close
    Set rs = Nothing
End Function

Public Sub ObtieneFechaVencimientodeCobroPago(Id As Long, ByRef fecha As Date)
End Sub

Public Sub ObtieneDatosdelCobroPago(Id As Long, ByRef fecha As Date, ByRef Debe As Currency, ByRef Haber As Currency)
    Dim sql  As String, rs As Recordset, rs1 As Recordset

   
    sql = " select debe, haber, FechaVenci from pckardex p inner join gncomprobante g"
    sql = sql & " on p.transid=g.transid"
    sql = sql & " where id=" & Id
    sql = sql & " and estado <>3"
    
        sql = " select p.id,p.debe, p.haber,"
        sql = sql & " p.FechaVenci "
        sql = sql & " from gncomprobante g"
        sql = sql & " inner join  pckardex p"
        sql = sql & " on p.transid=g.transid"
        sql = sql & " where p.idasignado=" & Id
        sql = sql & " And g.Estado <> 3 " 'And g1.Estado <> 3"

    
    
    
    
    
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount = 1 Then
        fecha = rs.Fields("FechaVenci")
        Debe = rs.Fields("Debe")
        Haber = rs.Fields("Haber")
    ElseIf rs.RecordCount > 1 Then
        sql = " select  p.id,p.debe, p.haber,"
        sql = sql & " g1.Fechatrans  as FechaVenci"
        sql = sql & " from gncomprobante g"
        sql = sql & " inner join  pckardex p"
        sql = sql & " right join pckardex p1"
        sql = sql & " inner join gncomprobante g1"
        sql = sql & " on p1.transid=g1.transid"
        sql = sql & " on p.id=p1.idasignado"
        sql = sql & " on p.transid=g.transid"
        sql = sql & " where p.id=" & Id
        sql = sql & " And g.Estado <> 3 And g1.Estado <> 3"
        sql = sql & " order by g1.Fechatrans desc, g1.horatrans desc"
        Set rs1 = Me.OpenRecordset(sql)
        If rs1.RecordCount = 1 Then
            fecha = rs1.Fields("FechaVenci")
            Debe = rs1.Fields("Debe")
            Haber = rs1.Fields("Haber")
        ElseIf rs1.RecordCount > 1 Then
            'cogemos el segundo porque el primero es el pago actual
            rs1.MoveNext
            fecha = rs1.Fields("FechaVenci")
            Debe = rs1.Fields("Debe")
            Haber = rs1.Fields("Haber")
        
        End If
    End If
End Sub


'*********** Vehiculos
Public Function CreaGNVehiculo() As GnVehiculo
    Dim obj As GnVehiculo
    Set obj = New GnVehiculo
    Set obj.Empresa = Me
    Set CreaGNVehiculo = obj
    Set obj = Nothing
End Function

Public Function RecuperaGNVehiculo(key As Variant) As GnVehiculo
    Dim obj As GnVehiculo
    Set obj = New GnVehiculo
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaGNVehiculo = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function ListaGNVehiculo(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    

    sql = "SELECT CodVehiculo, Descripcion FROM GNVehiculo "

''    If BandSoloValida Then
''        sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
''    End If
    sql = sql & " ORDER BY CodVehiculo"

    Set rs = Me.OpenRecordset(sql)
    
    If BandRS Then
        Set ListaGNVehiculo = rs
    Else
        ListaGNVehiculo = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaGNVehiculoCliente(BandRS As Boolean, CodCliente As String) As Variant
    Dim sql As String, rs As Recordset
    

    sql = "SELECT CodVehiculo, Descripcion FROM GNVehiculo "
    If Len(CodCliente) > 0 Then
        sql = sql & " INNER "
    Else
        sql = sql & "LEFT "
    End If
    sql = sql & " JOIN PcProvcli On GNVehiculo.IdCliente=Pcprovcli.IdProvcli"
    
    If Len(CodCliente) > 0 Then
        sql = sql & " WHERE CodProvcli='" & CodCliente & "'"
    End If

    sql = sql & " ORDER BY CodVehiculo"

    Set rs = Me.OpenRecordset(sql)
    
    If BandRS Then
        Set ListaGNVehiculoCliente = rs
    Else
        ListaGNVehiculoCliente = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function



'grupos para Vehiculo20/03/2009

Public Function RecuperaGNVGrupo(NumGrupo As Byte, key As Variant) As GNVGrupo
    Dim obj As GNVGrupo
    
    Set obj = New GNVGrupo
    Set obj.Empresa = Me
    obj.NumGrupo = NumGrupo
    
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaGNVGrupo = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CreaGNVGrupo(NumGrupo As Byte) As GNVGrupo
    Dim obj As GNVGrupo
    
    Set obj = New GNVGrupo
    Set obj.Empresa = Me
    obj.NumGrupo = NumGrupo
    Set CreaGNVGrupo = obj
    Set obj = Nothing
End Function

Public Function ListaGNVGrupo(NumGrupo As Integer, BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
    sql = "SELECT CodGrupo" & NumGrupo & ",Descripcion FROM GNVGrupo" & NumGrupo
    If BandSoloValida Then
        sql = sql & " WHERE BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY CodGrupo" & NumGrupo

    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaGNVGrupo = rs
    Else
        ListaGNVGrupo = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function
    
Public Function ListaGNVGrupoParGNClexGrid(NumGrupo As Integer) As String
Dim sql As String, s As String
    Dim rs As Recordset
    
    sql = "SELECT CodGrupo" & NumGrupo & ",Descripcion FROM GNVGrupo" & NumGrupo
    sql = sql & " WHERE BandValida=" & CadenaBool(True, TipoDB)
    sql = sql & " ORDER BY CodGrupo" & NumGrupo
    
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
'    s = "|" & GetStringDAO(rs)         '*** MAKOTO 07/ago/2000 Modificado
    If Not rs.EOF Then s = "|" & GetStringDAO(rs, 20 + 50)      '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|", "(nulo)")
#End If
    ListaGNVGrupoParGNClexGrid = s
    rs.Close
    Set rs = Nothing
End Function

Public Function ListaGNVGrupoParGNClexGrid2(NumGrupo As Integer, _
                                          CodGrupo1 As String, _
                                          CodGrupo2 As String, _
                                          CodGrupo3 As String, _
                                          CodGrupo4 As String, _
                                          CodGrupo5 As String) As String
    Dim sql As String, s As String, cond As String
    Dim rs As Recordset
    
    sql = "SELECT DISTINCT CodGrupo" & NumGrupo & ",G" & NumGrupo & " FROM vwGNVGrupo"
    
    If Len(CodGrupo1) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodGrupo1='" & CodGrupo1 & "') "
    End If
    If Len(CodGrupo2) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodGrupo2='" & CodGrupo2 & "') "
    End If
    If Len(CodGrupo3) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodGrupo3='" & CodGrupo3 & "') "
    End If
    If Len(CodGrupo4) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodGrupo4='" & CodGrupo4 & "') "
    End If
    If Len(CodGrupo5) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodGrupo5='" & CodGrupo5 & "') "
    End If

    If Len(cond) > 0 Then sql = sql & " WHERE ( " & cond & " AND (CodGrupo" & NumGrupo & "<>NULL)  ) "
    sql = sql & " ORDER BY CodGrupo" & NumGrupo

    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 20 + 50)         '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|", "(nulo)")
#End If
    ListaGNVGrupoParGNClexGrid2 = s
    rs.Close
    Set rs = Nothing
End Function


Public Function ConsGNTransRecetaxItem( _
                    Optional ByVal OrdenAscendente As Boolean) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    '*** MAKOTO 03/oct/00
    sql = "SELECT"
    If gobjCond.TopN > 0 Then
        sql = sql & " TOP " & gobjCond.TopN
    End If
    '*** MAKOTO 05/feb/01 Mod. Aumentado 'NumDocRef' y 'Nombre'
    sql = sql & " VW.TransID, FechaTrans, CodAsiento, CodTrans, NumTrans,  " & _
            " NumDocRef, Nombre, vw.Descripcion, ROUND((costoRealTotal/cantidad),4) as CUR, ROUND((costoTotal/cantidad),4) as CU, CodCentro,Estado,ivgrupo1.descripcion,ivinventario.codinventario,ivinventario.descripcion, cantidad*-1 FROM " & _
           " (IVGrupo1 RIGHT JOIN IVInventario ON IVGrupo1.IdGrupo1 = IVInventario.IdGrupo1) inner join " & _
            " vwConsGNTrans " & _
            " VW INNER JOIN IVKARDEX IVK ON IVK.TRANSID=VW.TRANSID " & _
            " ON IVInventario.IdInventario = IVK.IdInventario "
    'Condición de FechaTrans
    cond = "FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB)
    'Condición de CodTrans
    If Len(cond) > 0 Then cond = cond & " AND "
    If Len(gobjCond.CodTrans) > 0 Then      'Si está especificado transaccion
        'Si es una sola transaccion
        If InStr(gobjCond.CodTrans, ",") = 0 Then
            cond = cond & "(CodTrans='" & gobjCond.CodTrans & "')"
        'Si está seleccionado varias trans.
        Else
            cond = cond & "(CodTrans IN (" & gobjCond.CodTrans & "))"
        End If
    Else
        'Si no hay condicion de cod.trans, selecciona todas las trans.
        ' que tenga permiso
        s = gobjMain.GrupoActual.PermisoActual.ListaTrans(True)
        If Len(s) > 0 Then
            cond = cond & "(CodTrans " & s & ")"
        Else
            cond = cond & "(CodTrans = '-------')"    'Para que NO devuelva nada si no tiene ningún permiso  '*** MAKOTO 26/dic/00
        End If
    End If
    'Condición de NumTrans
    If (gobjCond.NumTrans1 > 0) And (gobjCond.NumTrans2 > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans BETWEEN " & gobjCond.NumTrans1 & " AND " & gobjCond.NumTrans2 & ")"
    ElseIf gobjCond.NumTrans1 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans>=" & gobjCond.NumTrans1 & ")"
    ElseIf gobjCond.NumTrans2 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans<=" & gobjCond.NumTrans2 & ")"
    End If
    'Condición de Estado
    If gobjCond.EstadoBool(ESTADO_NOAPROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_NOAPROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_APROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_APROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_DESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_DESPACHADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_ANULADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_ANULADO & ")"
    End If
    'jeaa 22/05/2006
    If Not (Len(gobjCond.Grupo1) = 0 And Len(gobjCond.Grupo2) = 0) Then
        cond = cond & " AND (codGrupo" & gobjCond.NumGrupo & " BETWEEN '" & _
                gobjCond.Grupo1 & "' AND '" & gobjCond.Grupo2 & "') "
    End If
    If Not Len(gobjCond.CodGrupo) = 0 Then
        cond = cond & "AND (ivgrupo1.codgrupo1 = '" & gobjCond.CodGrupo & "')"
    End If
   If Not (Len(gobjCond.CodItem1) = 0 And Len(gobjCond.CodItem2) = 0) Then
        cond = cond & "AND (CodInventario = '" & gobjCond.CodItem1 & "')"
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " AND IVINVENTARIO.TIPO = 4 GROUP BY VW.TransID,FechaTrans,CodAsiento,CodTrans,NumTrans,  NumDocRef, Nombre, vw.Descripcion,ivk.CostoRealTotal , ivk.Cantidad, ivk.CostoTotal, VW.CodCentro, VW.Estado, VW.HoraTrans,ivgrupo1.descripcion,ivinventario.codinventario,ivinventario.descripcion "
   'Ordern de filas
    If OrdenAscendente Then
'        sql = sql & " ORDER BY FechaTrans, TransID"         '*** MAKOTO 03/oct/00 Modificado para que salga más actual al primero
        sql = sql & " ORDER BY FechaTrans, HoraTrans, VW.TransID"         '*** MAKOTO 07/dic/00 Modificado para HoraTrans
    Else
'        sql = sql & " ORDER BY FechaTrans DESC, TransID DESC"
       sql = sql & " ORDER BY FechaTrans DESC, HoraTrans DESC, VW.TransID DESC"       '*** MAKOTO 07/dic/00 HoraTrans agregado
    End If
    Set rs = Me.OpenRecordset(sql)
    Set ConsGNTransRecetaxItem = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta General " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function

'AUC 27/03/09
Public Function rsReceta(ByVal codinve As String) As Recordset
Dim sql As String
sql = "Select iv1.codinventario,iv1.descripcion,iv1.tipo,ivm.* from ivmateria ivm inner join ivinventario iv "
sql = sql & " on iv.idinventario = ivm.idinventario inner join ivinventario iv1 on iv1.idinventario = ivm.idmateria "
sql = sql & " where iv.codinventario = '" & codinve & "' and ivm.bandmodificar = 1"
Set rsReceta = Me.OpenRecordset(sql)
End Function

'AUC BUSCAR VENTAS PARA enviar a disensa
Public Function ConsANVentasDisensa() As Variant
    Dim pck As PCKardex, pcd As PCDocAsignado
    Dim objGnComp As GNComprobante, objGnCompDocOriginal As GNComprobante
    Dim sql As String, cond As String, CadenaValores As String
    Dim Recargo As String 'CadenaAgrupa  As String
    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
    Dim from As String, numReg As Long, f1 As String, f2 As String
    Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
    Dim Servicios As String, Bienes As String, RowRet As Long
    Const COL_BASESER = 15
    'segunda parte de la consulta: carga los valores de  Detalles de Anexos
    Const COL_FECHA = 2
    Const COL_CODCREDTRIB = 7
    Const COL_TRANSID = 1
    Const COL_TRANSRET = 5
    Dim condServ As String
    Dim condBien As String
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    With gobjCond
        cond = " WHERE GNC.FechaTrans BETWEEN " & FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & _
              " AND " & FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB)
            VerificaExistenciaTabla 0
            VerificaExistenciaTabla 1
            VerificaExistenciaTabla 2
            VerificaExistenciaTabla 3
            sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as TotalDescuento Into tmp0 " & _
                    "From IvRecargo ivR inner join " & _
                        "IvKardexRecargo ivkR Inner join " & _
                            "GnComprobante gNc  " & _
                        "On ivkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = IvkR.IdRecargo "
            sql = sql & cond & _
                   " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")"
                    If .NumTrans1 > 0 And .NumTrans2 > 0 Then
                       sql = sql & "AND gnc.NumTrans >= " & .NumTrans1 & " AND gnc.Numtrans <= " & .NumTrans2
                    ElseIf .NumTrans1 > 0 Then
                        sql = sql & "AND gnc.NumTrans >= " & .NumTrans1
                    ElseIf .NumTrans2 > 0 Then
                        sql = sql & "AND gnc.NumTrans <= " & .NumTrans2
                   End If
            sql = sql & "Group by IvkR.TransID"
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
'--datos de indices
            VerificaExistenciaTabla 3
            sql = " Select  DISTINCT GNC.IdClienteRef AS FC_id, GNC_b.IdClienteRef AS rtp_id1, "
            sql = sql & " CASE WHEN GNC_b.IdClienteRef=0 THEN PCK_b.IdProvcli WHEN GNC_b.IdClienteRef<>0 THEN GNC_b.IdClienteRef end as rtp_id "
            sql = sql & " Into tmp3"
            sql = sql & " From    (gncomprobante GNC Inner join pckardex pck_a ON GNC.TransID = pck_a.TransID ) INNER JOIN"
            sql = sql & "  (gncomprobante GNC_b Inner join pckardex pck_B ON GNC_b.TransID = pck_B.TransID )"
            sql = sql & " ON  PCK_A.ID = PCK_B.IDASIGNADO"
            sql = sql & " where GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " AND GNC_b.CodTrans IN (" & PreparaCadena(gobjCond.Grupo1) & ")"
            sql = sql & " AND (GNC.FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = sql & " and GNC.IdClienteRef<>0 and GNC_b.IdClienteRef<>0 "
           gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            '--datos de la Venta
            sql = " Select gnc.Transid,(gnc.CodTrans+' '+CONVERT(VARCHAR,gnc.NumTrans)) AS Trans , '' as co_pedido,'' as co_factura,"
            sql = sql & " pc1.codgrupo1,pc2.codgrupo2,"
            sql = sql & " pc.codprovcli,(gnc.fechatrans+' '+gnc.horaTrans) as fechaTrans, DatePart(yyyy, gnc.FechaTrans) as año ,"
            sql = sql & " DatePart(mm, gnc.FechaTrans) as mes,  VEn.idvendedor,'', bod.idbodega,bod.descripcion,ts.codforma,'',bod.codbodega,"
            sql = sql & " vw.costototal,vw.preciototalbaseIVA,vw.preciototalbase0,0,0,sum(vw.preciototalbase0+preciototalbaseiva) as subtotal,'12',"
            If FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) > Me.GNOpcion.FechaIVA Then
                sql = sql & " (preciototalbaseiva* " & Me.GNOpcion.PorcentajeIVA & ") as IVA,"
            Else
                sql = sql & " (preciototalbaseiva* " & Me.GNOpcion.PorcentajeIVAAnt & ") as IVA,"
            End If
            sql = sql & " 0,0,0,"
            If FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) > Me.GNOpcion.FechaIVA Then
                sql = sql & " sum(vw.preciototalbase0+preciototalbaseiva+(preciototalbaseiva*" & Me.GNOpcion.PorcentajeIVA & "))AS vt,"
            Else
                sql = sql & " sum(vw.preciototalbase0+preciototalbaseiva+(preciototalbaseiva*" & Me.GNOpcion.PorcentajeIVAAnt & "))AS vt,"
            End If
            sql = sql & " 0,0,'','F',gnc.fechagrabado,bod.codbodega,'N','',ven.codvendedor"
           sql = sql & " from ("
            sql = sql & " tmp0"
            sql = sql & " Right join gncomprobante Gnc INNER JOIN PCPROVClI pc left join pcgrupo1 pc1 on pc1.idgrupo1 = pc.idgrupo1  left join pcgrupo2 pc2 on pc2.idgrupo2 = pc.idgrupo2  ON GNC.IdClienteRef=pc.idprovcli "
            sql = sql & " inner join gntrans gnt inner join ivbodega bod on bod.idbodega = gnt.idbodegapre on gnt.codtrans = gnc.codtrans LEFT JOIN FCVendedor ven on ven.idvendedor = gnc.idvendedor"
            sql = sql & " inner join vwConsSUMIVKardexIVA vw"
            sql = sql & " ON Gnc.TransID = vw.transid"
            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " inner join  pckardex pck inner join tsformacobropago ts on ts.idforma = pck.idforma on pck.transid = gnc.transid"
            sql = sql & cond
            sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
           If .NumTrans1 > 0 And .NumTrans2 > 0 Then
                       sql = sql & "AND gnc.NumTrans >= " & .NumTrans1 & " AND gnc.Numtrans <= " & .NumTrans2
            ElseIf .NumTrans1 > 0 Then
                        sql = sql & "AND gnc.NumTrans >= " & .NumTrans1
            ElseIf .NumTrans2 > 0 Then
                        sql = sql & "AND gnc.NumTrans <= " & .NumTrans2
            End If

            sql = sql & " group by  gnc.transid,gnc.codtrans,gnc.numtrans,pc.codprovcli, pc.ruc, pc.Nombre, pc1.codgrupo1,pc2.codgrupo2,gnc.codmoneda,gnc.fechatrans,gnc.horatrans,ven.idvendedor, bod.idbodega,bod.descripcion,ts.codforma,bod.codbodega,vw.costototal,vw.preciototalbase0,vw.preciototalbaseIVA,gnc.fechagrabado,ven.codvendedor"
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANVentasDisensa = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Compraspara Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 4
End Function


Public Function ListaIVKardexFerro(ByVal transid As Long) As Recordset
Dim sql As String
On Error GoTo CapturaError
    sql = "SELECT iv.codinventario,IV.DESCRIPCION,ivg1.codgrupo1,ivg2.codgrupo2,ivg3.codgrupo3,iv.codalterno1,iv.codalterno2,ivu.codunidad,ivk.* "
   sql = sql & "from IVKardex ivk inner join ivinventario iv "
    sql = sql & " left join ivgrupo1 ivg1 on ivg1.idgrupo1 = iv.idgrupo1"
    sql = sql & " left join ivgrupo2 ivg2 on ivg2.idgrupo2 = iv.idgrupo2"
    sql = sql & " left join ivgrupo3 ivg3 on ivg3.idgrupo3 = iv.idgrupo3"
    sql = sql & " left join ivgrupo4 ivg4 on ivg4.idgrupo4 = iv.idgrupo4"
    sql = sql & " left join ivunidad ivu on ivu.idunidad = iv.idunidad"
    sql = sql & " on iv.idinventario = ivk.idinventario where ivk.transid = " & transid
    Set ListaIVKardexFerro = Me.OpenRecordset(sql)
    Exit Function
CapturaError:
    MsgBox Err.Number & " " & Err.Description
    Exit Function
End Function

Public Function ConsInventario( _
                    ByVal NumGrupo As Integer, _
                    ByVal CodGrupo1 As String, ByVal CodGrupo2 As String, _
                    ByVal fecha1 As Date, ByVal fecha2 As Date, ByVal codItem As String) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    sql = "SELECT "
        sql = sql & " ivg1.codgrupo1,ivg2.codgrupo2,ivg3.codgrupo3,"
        If codItem = "Codigo" Then
            sql = sql & " iv.CodInventario, "
        ElseIf codItem = "CodigoAlterno1" Then
            sql = sql & " iv.CodAlterno1, "
        ElseIf codItem = "CodigoAlterno2" Then
            sql = sql & " iv.CodAlterno2, "
        End If
        'sql = sql & " iv.Descripcion ,left(iv.descripcion,30) as descr,left(iv.descripcion,6) as descabre,pv.codprovcli,pv.nombrealterno,'S' as bd_iva ,'S' as bd_prcman,1,iv.pesoneto,'S' as stock,'P' as tipprd,'A' as estado,'L' as bdprecio, "
        sql = sql & " iv.Descripcion ,left(iv.descripcion,30) as descr,left(iv.descripcion,6) as descabre,'9999999999001' as codprov,pv.nombrealterno,'S' as bd_iva ,'S' as bd_prcman,1,iv.pesoneto,'S' as stock,'P' as tipprd,'A' as estado,'L' as bdprecio, "
        
        sql = sql & "  0 as ivm_utilidad,iv.fechagrabado,ivu.codunidad,1,'M' as muldest"
        sql = sql & " from ivinventario iv left join ivgrupo1 ivg1 on ivg1.idgrupo1 = iv.idgrupo1"
        sql = sql & " left join ivgrupo2 ivg2 on ivg2.idgrupo2 = iv.idgrupo2"
        sql = sql & " left join ivgrupo3 ivg3 on ivg3.idgrupo3 = iv.idgrupo3"
        sql = sql & " left join ivunidad ivu on ivu.idunidad = iv.idunidad"
        sql = sql & " left join ivproveedordetalle ivp inner join pcprovcli pv on pv.idprovcli = ivp.idproveedor on ivp.idinventario = iv.idinventario"
        sql = sql & " where iv.BandValida=1"
        If Len(CodGrupo1) > 0 And Len(CodGrupo2) > 0 Then
            sql = sql & " and codGrupo" & NumGrupo & " ='" & CodGrupo1 & "'"
        End If
        If Len(fecha1) > 0 And Len(fecha2) > 0 Then
            sql = sql & " and iv.fechagrabado between '" & fecha1 & "'  AND '" & fecha2 + 1 & "'"
        End If
    sql = sql & " ORDER BY " & "ivg" & NumGrupo & ".CodGrupo" & NumGrupo
    Set rs = Me.OpenRecordset(sql)
    Set ConsInventario = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta AFInventario " & gobjCond.fecha1 + gobjCond.Hora1 & "-" & gobjCond.fecha2 + gobjCond.Hora2, "GN"
End Function

Public Function ListaPCProvCliParaFlexNombre( _
                    BandProveedor As Boolean, _
                    BandCliente As Boolean) As String
    Dim sql As String, s As String, cond As String
    Dim rs As Recordset
    sql = "SELECT  Nombre,CodProvCli FROM PCProvCli "
    If BandProveedor And Not BandCliente Then
        cond = "BandProveedor=" & CadenaBool(True, Me.TipoDB)
    ElseIf Not BandProveedor And BandCliente Then
        cond = "BandCliente=" & CadenaBool(True, Me.TipoDB)
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " ORDER BY Nombre"
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 20 + 40)         '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    ListaPCProvCliParaFlexNombre = s
    rs.Close
    Set rs = Nothing
End Function

Public Function ListaPCProvCliGarConGrupo(BandProveedor As Boolean, _
                                       BandCliente As Boolean, _
                                       BandGarante As Boolean, _
                                       BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    'Listado de Proveedores/Clientes con PCGrupo1,2,3
    sql = "SELECT pc.CodProvCli, pc.Nombre, a.CodTipoDocumento , pc.ruc ,  TipoProvCli, g1.CodGrupo1, g2.CodGrupo2, g3.CodGrupo3, g4.CodGrupo4,pc.observacion "
    
             sql = sql & "FROM PCGrupo4 g4 RIGHT JOIN (PCGrupo3 g3 RIGHT JOIN (PCGrupo2 g2 RIGHT JOIN (PCGrupo1 g1 RIGHT JOIN PCProvCli pc " & _
                        " left join Anexo_TipoDocumento a on pc.IdTipoDocumento  = a.Id" & _
                         " ON g1.IdGrupo1 = pc.IdGrupo1) " & _
                    " ON g2.IdGrupo2 = pc.IdGrupo2) " & _
                " ON g3.IdGrupo3 = pc.IdGrupo3) " & _
                " ON g4.idgrupo4 = pc.IdGrupo4 "

    If Not (BandProveedor And BandCliente And BandGarante) Then
        If BandProveedor Then
            sql = sql & " WHERE BandProveedor=" & CadenaBool(True, TipoDB)
        ElseIf BandCliente Then
            sql = sql & " WHERE BandCliente=" & CadenaBool(True, TipoDB)
        ElseIf BandGarante Then
            sql = sql & " WHERE BandGarante=" & CadenaBool(True, TipoDB)
        
        End If
    End If
    sql = sql & " ORDER BY Nombre"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCProvCliGarConGrupo = rs
    Else
        ListaPCProvCliGarConGrupo = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


'jeaa 16/04/2009
'* LISTA DE CLIENTES CON FILTROS + GARNTE

Public Function ListaPCProvCliGarFiltro(BandProveedor As Boolean, _
                                    BandCliente As Boolean, _
                                    BandGarante As Boolean, _
                                    codPC As String, _
                                    Nombre As String, _
                                    Direccion As String, _
                                    RUC As String, _
                                    CodGrupoDesde As String, _
                                    CodGrupoHasta As String, _
                                    numG As Integer, _
                                    BandSoloValida As Boolean, _
                                    BandRS As Boolean) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset, i As Integer
    
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If

     sql = "SELECT pc.CodProvCli, pc.Nombre, a.CodTipoDocumento, pc.RUC, TipoProvCli , g1.CodGrupo1, g2.CodGrupo2, g3.CodGrupo3, g4.CodGrupo4 ,pc.observacion, codvendedor, PC.ESTADO " & _
          "  FROM " & _
          " PCGrupo4 g4 RIGHT JOIN (PCGrupo3 g3 RIGHT JOIN (PCGrupo2 g2 RIGHT JOIN (PCGrupo1 g1 RIGHT JOIN PCProvCli pc " & _
            " left join Anexo_TipoDocumento a on pc.IdTipoDocumento  = a.Id" & _
                          " ON g1.IdGrupo1 = pc.IdGrupo1) " & _
                    " ON g2.IdGrupo2 = pc.IdGrupo2) " & _
                " ON g3.IdGrupo3 = pc.IdGrupo3) " & _
                " ON g4.IdGrupo4 = pc.IdGrupo4 "
    sql = sql & " left join fcvendedor fcv on pc.idvendedor=fcv.idvendedor "
    If Not (BandProveedor And BandCliente) Then
        If BandProveedor Then
            sql = sql & " WHERE BandProveedor=" & CadenaBool(True, TipoDB)
        ElseIf BandGarante Then
            sql = sql & " WHERE BandGarante=" & CadenaBool(True, TipoDB)
        Else
            sql = sql & " WHERE BandCliente=" & CadenaBool(True, TipoDB)
        End If
    End If
    
    If Len(codPC) > 0 Then
        cond = cond & " and (CodProvCli LIKE '" & codPC & comodin & "') "
    End If
    
    If Len(Nombre) > 0 Then
        cond = cond & " and ((pc.Nombre LIKE '" & Nombre & comodin & "') " & _
                      "OR (pc.Nombre LIKE '" & Nombre & comodin & "')) "
    End If
    
    If Len(Direccion) > 0 Then
        cond = cond & " and (Direccion1 LIKE '" & Descripcion & comodin & "') "
    End If
    
    If Len(RUC) > 0 Then
        cond = cond & " and (ruc LIKE '" & RUC & comodin & "') "
    End If
    
    
    If Not (Len(CodGrupoDesde) = 0 And Len(CodGrupoHasta) = 0) Then
        cond = cond & " AND (CodGrupo" & numG & " BETWEEN '" & CodGrupoDesde & _
            "' AND '" & CodGrupoHasta & "')"
    End If

    
    If Len(cond) > 0 Then sql = sql & cond
    sql = sql & " ORDER BY pc.Nombre "
    
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCProvCliGarFiltro = rs
    Else
        ListaPCProvCliGarFiltro = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ConsTSPorCobrarPagarVendeMoraSucursal( _
                    ByVal PorCobrar As Boolean, _
                    ByVal CodProvcli As String, _
                    ByVal FechaVenci As Date, _
                    ByVal CodForma As String, _
                    ByVal CodMoneda As String, _
                    ByVal CodGrupo1 As String, _
                    ByVal CodVendedor As String, _
                    ByVal TasaMensual As Currency, _
                    ByVal diasGracia As Integer, _
                    ByVal CodSucursal As String) As Variant
    Dim aux_codpc As String, aux_f1 As Date, aux_f2 As Date
    Dim aux_PorCobrar As Boolean, aux_Cliente As Boolean, aux_Proveedor As Boolean
    Dim aux_CodForma As String, aux_CodMoneda As String, aux_codgrupo As String
    Dim aux_incluircero As Boolean, aux_codVendedor As String, aux_codSucursal As String
    
    With gobjMain.objCondicion
        'Conservar valores actuales para que no afecte a otras consultas
        aux_codpc = .CodPC1
        aux_f1 = .fecha1
        aux_f2 = .fecha2
        aux_PorCobrar = .PorCobrar
        aux_Cliente = .Cliente
        aux_Proveedor = .Proveedor
        aux_CodForma = .CodForma
        aux_CodMoneda = .CodMoneda
        aux_codgrupo = .CodGrupo
        aux_incluircero = .IncluirCero
        aux_codVendedor = .Usuario1
        aux_codSucursal = .Sucursal
        .PorCobrar = PorCobrar
        .Cliente = True
        .Proveedor = True
        .CodPC1 = CodProvcli
        .fecha1 = Me.GNOpcion.FechaInicio
        .fecha2 = FechaVenci
        .CodForma = CodForma
        .CodMoneda = CodMoneda
        .CodGrupo = CodGrupo1
        .IncluirCero = False
        .Usuario1 = CodVendedor
        .NumDias1 = diasGracia
        .TasaMensual = TasaMensual
        .NumDias2 = IIf(Len(Me.GNOpcion.ObtenerValor("NumDecimales")) > 0, Me.GNOpcion.ObtenerValor("NumDecimales"), 2)
        .Sucursal = CodSucursal
        Set ConsTSPorCobrarPagarVendeMoraSucursal = ConsTSPorCobrarPagarVendedorMoraSucursal()
        
        'Recuperar valores reservados
        .CodPC1 = aux_codpc
        .fecha1 = aux_f1
        .fecha2 = aux_f2
        .PorCobrar = aux_PorCobrar
        .Cliente = aux_Cliente
        .Proveedor = aux_Proveedor
        .CodForma = aux_CodForma
        .CodMoneda = aux_CodMoneda
        .CodGrupo = aux_codgrupo
        .IncluirCero = aux_incluircero
        .Usuario1 = aux_codVendedor
        .Sucursal = aux_codSucursal
    End With
End Function



Public Function ConsTSPorCobrarPagarVendedorMoraSucursal() As Variant
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim objCond As Condicion
    
    Set objCond = gobjMain.objCondicion
    
    'Si no está especificada la moneda, coge la Moneda predeterminada
    If Len(objCond.CodMoneda) = 0 Then objCond.CodMoneda = MONEDA_PRE
    numMoneda = Me.GNOpcion.IndiceMoneda(objCond.CodMoneda)
    
    sql = "spConsTSPorCobrarPagarVendedorMoraSucursal " & numMoneda & ", " & _
                objCond.CodMoneda & "," & _
                CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                CadenaBool(objCond.Cliente, TipoDB) & "," & _
                CadenaBool(objCond.Proveedor, TipoDB) & "," & _
                FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                objCond.CodPC1 & "','" & _
                objCond.CodPC1 & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodGrupo & "','" & _
                objCond.Usuario1 & "','" & _
                objCond.Usuario1 & "'," & _
                objCond.TasaMensual & "," & _
                objCond.NumDias1 & "," & _
                IIf(Me.GNOpcion.Los100DocCobroPago, 1, 0) & "," & _
                objCond.NumDias2 & ",'" & _
                objCond.Sucursal & "','" & _
                objCond.Sucursal & "'"
     If Me.GNOpcion.ObtenerValor("AplicaCalculoMensual") = "1" Then
        sql = sql & " ,0 "
     Else
        sql = sql & " ,1 "
     End If
                
    Set rs = Me.OpenRecordset(sql)
    Set ConsTSPorCobrarPagarVendedorMoraSucursal = rs
    Set rs = Nothing
    Set objCond = Nothing
End Function

Public Sub ActualizaNumEstaBlecimientoDatosSucursal(ByVal codsuc As String, ByVal numest As String)
    Dim sql As String, rs As Recordset
    sql = "update gntrans set NumSerieEstablecimiento='" & numest & "'"
    sql = sql & " from gntrans inner join gnsucursal on gntrans.idsucursal=gnsucursal.idsucursal"
    sql = sql & " where codSucursal='" & codsuc & "'"
    Set rs = Me.OpenRecordset(sql)
End Sub

Public Function RecuperaNumeroTransaccionReporteRango(ByVal CodTrans As String, ByVal numaut As String, ByVal BandOrdenD As Boolean) As Long
    Dim sql As String, rs As Recordset
    sql = " select top 1 Numtrans from gncomprobante "
    sql = sql & " where AutorizacionSRI='" & numaut & "'"
    sql = sql & " and codtrans='" & CodTrans & "'"
    sql = sql & " order by numtrans "
    If BandOrdenD Then
        sql = sql & "  desc"
    End If
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount = 1 Then
        RecuperaNumeroTransaccionReporteRango = rs!NumTrans
    Else
        RecuperaNumeroTransaccionReporteRango = 0
    End If
End Function

Public Function ObtieneVehiculodeunMismoCC(ByVal cad As String) As Long
    Dim sql As String, rs As Recordset
    sql = " select distinct idvehiculo from gncentrocosto "
    sql = sql & " where idcentro in(" & cad & ")"
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount = 1 Then
        ObtieneVehiculodeunMismoCC = rs!IdVehiculo
    Else
        ObtieneVehiculodeunMismoCC = 0
    End If
End Function

Public Function ObtieneItemsPedidosAutomaticosxUltimaCompra() As Variant
    Dim sql As String, rs As Recordset, cond As String
    Dim numReg As Long

    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   
    With gobjCond
        cond = " AND (GC.FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
    
        sql = "select idinventario, sum(exist) as exist"
        sql = sql & " Into tmp0 "
        sql = sql & " From ivexist"
        sql = sql & " group by idinventario"
        
        VerificaExistenciaTabla 0
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
    
    
    
    
        sql = "select"
        sql = sql & " ivi.idinventario, CodInventario,"
        sql = sql & " case when CodInventario<>'-' then ivi.Descripcion else ivk.nota end as descripcion,"
        sql = sql & " sum(Cantidad) As cant"
        sql = sql & " Into tmp1"
        sql = sql & " from gncomprobante gc"
        sql = sql & " inner join ivkardex ivk"
        sql = sql & " inner join ivinventario ivi"
        sql = sql & " on ivk.idinventario=ivi.idinventario"
        sql = sql & " on gc.transid=ivk.transid"
        sql = sql & " Where gc.Estado <> 3"
        sql = sql & " AND GC.CodTrans IN (" & .CodTrans & ")"
        sql = sql & cond
        sql = sql & " group by ivi.idinventario, CodInventario, ivi.Descripcion, ivk.nota"
        
        VerificaExistenciaTabla 1
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
    
    
        sql = " select"
        sql = sql & " ivi.idinventario, CodInventario,"
        sql = sql & " case when CodInventario<>'-' then ivi.Descripcion else ivk.nota end as descripcion,"
        sql = sql & " sum(Cantidad) As cant"
        sql = sql & " Into tmp2"
        sql = sql & " from gncomprobante gc"
        sql = sql & " inner join ivkardex ivk"
        sql = sql & " inner join ivinventario ivi"
        sql = sql & " on ivk.idinventario=ivi.idinventario"
        sql = sql & " on gc.transid=ivk.transid"
        sql = sql & " Where gc.Estado <> 3"
        sql = sql & " AND GC.CodTrans IN (" & PreparaCadena(.CodBanco1) & ")"
        sql = sql & cond
        sql = sql & " group by ivi.idinventario, CodInventario, ivi.Descripcion, ivk.nota"
        
        VerificaExistenciaTabla 2
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        
        
        sql = " select distinct "
        sql = sql & " a.idinventario, a.CodInventario, "
        sql = sql & " a.descripcion,  e.exist, 0, (isnull(a.cant,0)- isnull(b.cant,0)) as saldo, 0 as BandPedido, "
        sql = sql & " pc.nombre, ISNULL(IP.Cantidad,0), ISNULL(CostoUnitario,0), ip.Fecha"
        sql = sql & " from tmp2 b "
        sql = sql & " right join tmp1 a inner join tmp0 e on a.idinventario = e.idinventario "
        Select Case .Nivel
        Case 0
            sql = sql & " left join IVProveedorDetalle ip"
            sql = sql & " inner join pcprovcli pc on ip.IdProveedor=pc.idprovcli and ip.bandprincipal=1"
            sql = sql & " on a.idinventario=ip.idinventario"
        Case 1
            sql = sql & " left join VWIVProveedorDetalle ip"
            sql = sql & " inner join pcprovcli pc on ip.IdProveedor=pc.idprovcli"
            sql = sql & " on a.idinventario=ip.idinventario"
        Case 2
            sql = " select distinct"
            sql = sql & " isnull(a.idinventario, ip.idinventario) as ivinventario,"
            sql = sql & " isnull(a.CodInventario, iv.CodInventario) as CodInventario,"
            sql = sql & " isnull(a.descripcion, iv.descripcion) as descripcion, isnull(e.exist,0),"
            sql = sql & " (isnull(a.cant,0)- isnull(b.cant,0)) as saldo, 0 as BandPedido,  pc.nombre, ISNULL(IP.Cantidad,0), ISNULL(CostoUnitario,0), ip.Fecha"
            sql = sql & " from tmp2 b right join tmp1 a "
            sql = sql & " right join (IVProveedorDetalle ip"
            sql = sql & " inner join ivinventario iv on ip.idinventario=iv.idinventario "
            sql = sql & " inner join tmp0 e on iv.idinventario = e.idinventario )"
            sql = sql & " inner join pcprovcli pc on ip.IdProveedor=pc.idprovcli"
            sql = sql & " on a.idinventario=ip.idinventario"
        End Select
        sql = sql & " on a.idinventario=b.idinventario and a.descripcion=b.descripcion "
        If .IncluirCero Then
            sql = sql & " where (isnull(a.cant,0)- isnull(b.cant,0))>0 "
        End If
        If Len(.CodPC1) > 0 Then
            If InStr(1, sql, "Where") > 0 Then
                sql = sql & "   and pc.CodProvCli = '" & .CodPC1 & "'"
            Else
                sql = sql & "   where pc.CodProvCli = '" & .CodPC1 & "'"
            End If
        End If
     End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    
    Set ObtieneItemsPedidosAutomaticosxUltimaCompra = rs
    Set rs = Nothing
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
End Function


Public Function VerificaElemntoYAConcilaido(ByVal Id As Long, ByRef Trans As String) As Boolean
    Dim sql As String, rs As Recordset, cond As String
    VerificaElemntoYAConcilaido = False
    Trans = ""
    sql = " select codtrans, numtrans from TSKardexConcilia t"
    sql = sql & " inner join gncomprobante g on t.transid=g.transid"
    sql = sql & " where IdTSKardex= " & Id
    sql = sql & " and BandConciliado=1"
    sql = sql & " and g.estado<>3 "
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        VerificaElemntoYAConcilaido = True
        Trans = rs.Fields("Codtrans") & "-" & rs.Fields("numtrans")
    End If
End Function

Public Function ConsTSConciliacioTransaccion() As Variant
    Dim sql As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsTSConciliacion")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodBanco") = gobjCond.CodBanco1
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient

    sql = "spConsTSConciliacionTransaccion " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodBanco1 & "', " & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB)
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    ConsTSConciliacioTransaccion = MiGetRows(rs)
    
    
    
    Set rs = Nothing
End Function


Public Function ConsSaldoSegunLibrosConciliacion(ByVal transid As Long, ByVal BandOrdenDesc As Boolean) As Currency
    Dim sql As String, rs As Recordset, cond As String
    ConsSaldoSegunLibrosConciliacion = 0

    sql = " select top 1 saldo from TSKardexConcilia"
    sql = sql & " where transId= " & transid
    sql = sql & " order by id  "
    If BandOrdenDesc Then
        sql = sql & "  desc "
    End If
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        ConsSaldoSegunLibrosConciliacion = rs.Fields("Saldo")
    End If
End Function


Public Function ConsSaldoConciliadoBancoaUnaFecha(ByVal CodBanco As String, ByVal FechaCorte As Date) As Currency
    Dim sql As String, rs As Recordset, cond As String
    ConsSaldoConciliadoBancoaUnaFecha = 0

    
    sql = " select"
    sql = sql & " Sum (Debe - Haber) as Saldo "
     sql = sql & " from VWTSKardexConciliacion vw inner join gncomprobante g on vw.transidPadre = g.transid"
    sql = sql & " Where BandConciliado = 1"
    sql = sql & " and substring(g.descripcion,CHARINDEX( '~', g.descripcion,1)+2,10)= " & FechaYMD(DateAdd("d", -1, FechaCorte), gobjMain.EmpresaActual.TipoDB)
    sql = sql & " and g.nombre = '" & CodBanco & "'"
    sql = sql & " group by vw.transidPadre, g.descripcion"
    
    
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        ConsSaldoConciliadoBancoaUnaFecha = rs.Fields("Saldo")
    End If
    
    
End Function


Public Sub RecuperaDatosConciliacion(ByVal cadena As String, ByRef fecha1 As Date, ByRef fecha2 As Date)
    Dim pos As Integer, v As Variant, cad As String
    If InStr(1, UCase(cadena), "FECHA") Then
        pos = InStr(1, UCase(cadena), "FECHA") + 7
        
        cad = Mid$(cadena, pos, Len(cadena) - pos + 1)
        v = Split(cad, "~")
        If UBound(v) > 0 Then
            fecha1 = Trim$(v(0))
        End If
       'If UBound(v) > 1 Then
        If UBound(v) = 1 Then
            fecha2 = Trim$(v(1))
        End If
    End If
End Sub


Public Function ConsIVMovCCNew() As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim numReg As Long, condNum As String
    cond = " WHERE   (gc.Estado IN (1,2,4))"
    condNum = ""
    'para filtrado por cliente
    If Len(gobjCond.CodPC1) > 0 Or Len(gobjCond.CodPC2) > 0 Then
        If Len(gobjCond.CodPC1) > 0 And Len(gobjCond.CodPC2) = 0 Then
            cond = cond & " AND (pc.codprovcli BETWEEN '" & gobjCond.CodPC1 & " 'AND '" & gobjCond.CodPC1 & "')"
        ElseIf Len(gobjCond.CodPC1) = 0 And Len(gobjCond.CodPC2) > 0 Then
            cond = cond & " AND (pc.codprovcli BETWEEN '" & gobjCond.CodPC2 & " 'AND '" & gobjCond.CodPC2 & "')"
        ElseIf Len(gobjCond.CodPC1) > 0 And Len(gobjCond.CodPC2) > 0 Then
            cond = cond & " AND (pc.codprovcli BETWEEN '" & gobjCond.CodPC1 & " 'AND '" & gobjCond.CodPC2 & "')"
        End If
    End If
    'para filtrado por centro de costo
    If Len(gobjCond.CodCentro1) > 0 Or Len(gobjCond.CodCentro2) > 0 Then
        If Len(gobjCond.CodCentro1) > 0 And Len(gobjCond.CodCentro2) = 0 Then
            cond = cond & " AND (CodCentro BETWEEN '" & gobjCond.CodCentro1 & "'AND '" & gobjCond.CodCentro1 & "')"
        ElseIf Len(gobjCond.CodCentro1) = 0 And Len(gobjCond.CodCentro2) > 0 Then
            cond = cond & " AND (CodCentro BETWEEN '" & gobjCond.CodCentro2 & "'AND '" & gobjCond.CodCentro2 & "')"
        ElseIf Len(gobjCond.CodCentro1) > 0 And Len(gobjCond.CodCentro2) > 0 Then
            cond = cond & " AND (CodCentro BETWEEN '" & gobjCond.CodCentro1 & "'AND '" & gobjCond.CodCentro2 & "')"
        End If
    End If
    'para filtrado por item
    If Len(gobjCond.CodItem1) > 0 Or Len(gobjCond.CodItem2) > 0 Then
        If Len(gobjCond.CodItem1) > 0 And Len(gobjCond.CodItem2) = 0 Then
            cond = cond & " AND (Codinventario BETWEEN '" & gobjCond.CodItem1 & "'AND '" & gobjCond.CodItem1 & "')"
        ElseIf Len(gobjCond.CodItem1) = 0 And Len(gobjCond.CodItem2) > 0 Then
            cond = cond & " AND (Codinventario BETWEEN '" & gobjCond.CodItem2 & "'AND '" & gobjCond.CodItem2 & "')"
        ElseIf Len(gobjCond.CodItem1) > 0 And Len(gobjCond.CodItem2) > 0 Then
            cond = cond & " AND (Codinventario BETWEEN '" & gobjCond.CodItem1 & "'AND '" & gobjCond.CodItem2 & "')"
        End If
    End If
'    cond = cond & " and (gc.FechaTrans >" & FechaYMD(gobjCond.fecha1, gobjMain.EmpresaActual.TipoDB) & ")"
    'para filtrado por numero de transaccion
        If gobjCond.NumTrans1 <> 0 Or gobjCond.NumTrans2 <> 0 Then
        If gobjCond.NumTrans1 <> 0 And gobjCond.NumTrans2 = 0 Then
            condNum = condNum & " AND (gc.Numtrans BETWEEN '" & gobjCond.NumTrans1 & "'AND '" & gobjCond.NumTrans1 & "')"
        ElseIf gobjCond.NumTrans1 = 0 And gobjCond.NumTrans2 <> 0 Then
            condNum = condNum & " AND (gc.Numtrans BETWEEN '" & gobjCond.NumTrans2 & "'AND '" & gobjCond.NumTrans2 & "')"
        ElseIf gobjCond.NumTrans1 > 0 And gobjCond.NumTrans2 > 0 Then
            condNum = condNum & " AND (gc.Numtrans BETWEEN '" & gobjCond.NumTrans1 & "'AND '" & gobjCond.NumTrans2 & "')"
        End If
    End If

'---------- Listado de suma de Cantidad y Costo por items en Presupuesto
        VerificaExistenciaTablaTemporal 1
        sql = " SELECT gc.transid, gc.fechaTrans, gc.Codtrans+' '+CONVERT(varchar, gc.Numtrans) as TransPresup,"
        sql = sql & " pc.nombre, gcc.codcentro, gcc.Descripcion AS DescCentro, ivk.IdInventario,"
        sql = sql & " Sum(ivk.Cantidad) AS SumaCantPre "
        sql = sql & " Into t1 "
        sql = sql & " From (GNCentroCosto gcc RIGHT JOIN GNComprobante gc ON gcc.IdCentro = gc.IdCentro)"
        sql = sql & " inner join pcprovcli pc on gc.IdClienteRef=pc.idprovcli"
        sql = sql & " INNER JOIN IVKardex ivk"
        sql = sql & " INNER JOIN IVInventario iv"
        sql = sql & " ON ivk.idinventario= iv.idinventario"
        sql = sql & " ON gc.TransID = ivk.TransID " & cond & condNum
        sql = sql & " AND (gc.CodTrans ='" & gobjCond.CodTrans & "')"
        sql = sql & " and (gc.FechaTrans Between " & FechaYMD(gobjCond.fecha1, gobjMain.EmpresaActual.TipoDB)
        sql = sql & " and  " & FechaYMD(gobjCond.fecha2, gobjMain.EmpresaActual.TipoDB) & ")"
        sql = sql & " GROUP BY gc.IdCentro, ivk.IdInventario, gcc.Descripcion, gc.codtrans, gc.Numtrans, gcc.codcentro, pc.nombre, gc.transid, gc.fechaTrans"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        VerificaExistenciaTablaTemporal 2
        '---------- Listado de suma de Cantidad y Costos por items en Consumos
        sql = "  SELECT gc.transid,gc.IdTransFuente,gc.fechaTrans,"
        sql = sql & " gc.Codtrans+' '+CONVERT(varchar, gc.Numtrans) as TransConsumos,"
        sql = sql & " pc.nombre , gcc.codcentro, gcc.Descripcion AS DescCentro, ivk.IdInventario,"
        sql = sql & " Sum(ivk.Cantidad) AS SumaCant "
        sql = sql & " INTO t2"
        sql = sql & "  From (GNCentroCosto gcc RIGHT JOIN GNComprobante gc ON gcc.IdCentro = gc.IdCentro)"
        sql = sql & " inner join pcprovcli pc on gc.IdClienteRef=pc.idprovcli"
        sql = sql & " INNER JOIN IVKardex ivk"
        sql = sql & " INNER JOIN IVInventario iv"
        sql = sql & " ON ivk.idinventario= iv.idinventario"
        sql = sql & " ON gc.TransID = ivk.TransID " & cond
        sql = sql & " and (gc.CodTrans IN (SELECT CodTrans FROM GNTrans WHERE VerificaLimiteCon='" & gobjCond.CodTrans & "'))"
        sql = sql & " AND (gc.CodTrans <> '" & gobjCond.CodTrans & "M')"
        sql = sql & "  GROUP BY gc.IdCentro, ivk.IdInventario, gcc.Descripcion, gc.codtrans, gc.Numtrans,pc.nombre, gc.transid,gc.IdTransFuente,gc.fechaTrans, gcc.codcentro"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        VerificaExistenciaTablaTemporal 3
        '---------- Listado de suma de Cantidad  y Costos en Modificaciones de Presupuesto
        sql = "  SELECT  gc.transid,gc.IdTransFuente,gc.fechaTrans,"
        sql = sql & "  gc.Codtrans+'  '+CONVERT(varchar, gc.Numtrans) as TransModif,"
        sql = sql & "  pc.nombre, gcc.codcentro , gcc.Descripcion AS DescCentro, ivk.IdInventario,"
        sql = sql & "   sum(ivk.Cantidad) AS SumaCantPre "
        sql = sql & "  INTO t3"
        sql = sql & "  From (GNCentroCosto gcc RIGHT JOIN GNComprobante gc ON gcc.IdCentro = gc.IdCentro)"
        sql = sql & "  inner join pcprovcli pc on gc.IdClienteRef=pc.idprovcli"
        sql = sql & "  INNER JOIN IVKardex ivk"
        sql = sql & "  INNER JOIN IVInventario iv"
        sql = sql & "  ON ivk.idinventario= iv.idinventario"
        sql = sql & "  ON gc.TransID = ivk.TransID" & cond
        sql = sql & " AND (gc.CodTrans = '" & gobjCond.CodTrans & "M')"
        sql = sql & " GROUP BY gc.IdCentro, ivk.IdInventario, gcc.Descripcion, gc.codtrans, gc.Numtrans,pc.nombre, gc.TransID , gc.IdTransFuente,gc.fechaTrans, gcc.codcentro"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        VerificaExistenciaTablaTemporal 4
        '--saldo de consumos
        sql = "  SELECT gc.IdTransFuente, ivk.IdInventario,gc.fechaTrans,  gcc.codcentro, "
        sql = sql & "   sum(ABS(ivk.Cantidad))*-1 AS TotalConsumo"
        sql = sql & "  INTO t4"
        sql = sql & "   From (GNCentroCosto gcc RIGHT JOIN GNComprobante gc ON gcc.IdCentro = gc.IdCentro)"
        sql = sql & "  inner join pcprovcli pc on gc.IdClienteRef=pc.idprovcli"
        sql = sql & "  INNER JOIN IVKardex ivk"
        sql = sql & "  INNER JOIN IVInventario iv"
        sql = sql & "  ON ivk.idinventario= iv.idinventario"
        sql = sql & "  ON gc.TransID = ivk.TransID" & cond
        sql = sql & "  and (gc.CodTrans IN (SELECT CodTrans FROM GNTrans WHERE VerificaLimiteCon='" & gobjCond.CodTrans & "'))"
        sql = sql & "   GROUP by gc.IdTransFuente, ivk.IdInventario,gc.fechaTrans,gcc.codcentro "
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        VerificaExistenciaTablaTemporal 5
        sql = " select   IdTransFuente,IdInventario, sum(abs(totalConsumo))* -1 as totalConsumido, codcentro"
        'sql = sql & " case when sum(totalConsumo)>0 then sum(totalConsumo)*-1 else sum(totalConsumo) end as totalConsumido"
        sql = sql & "  INTO t5"
        sql = sql & "   From t4"
        sql = sql & "   group by IdTransFuente,IdInventario, codcentro "
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        '----------- une tabla 4 y 5
        VerificaExistenciaTablaTemporal 6
        sql = "  SELECT distinct t4.IdTransFuente, t4.IdInventario,t4.fechaTrans, t4. codcentro , "
        sql = sql & "   t4. TotalConsumo, t5.totalConsumido"
        sql = sql & "  INTO t6"
        sql = sql & "   From t4 inner join t5"
        
        'sql = sql & "   on t4.codcentro=t5.codcentro and t4.IdInventario=t5.IdInventario"
        sql = sql & "   on t4.IdTransFuente=t5.IdTransFuente and t4.IdInventario=t5.IdInventario"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        '---------- Combina las tres tablas temporales para comparar
        'VerificaExistenciaTablaTemporal 6
        sql = " SELECT distinct t1.codcentro, t1.DescCentro, isnull(t1.nombre,(isnull(t2.nombre,(isnull(t3.nombre,0))))) as PCNombre,"
        sql = sql & "    t1.TransPresup, t1.fechaTrans, iv.CodInventario, iv.Descripcion,"
        sql = sql & "   isnull(t1.SumaCantPre, 0) * -1 As Presupuesto,"
        sql = sql & "   t3.TransModif as TransMod, t3.fechaTrans as FechaMod,"
        sql = sql & "   isnull(t3.SumaCantPre, 0) * -1 AS PreMod,"
        sql = sql & "   t2.TransConsumos, t2.fechaTrans as FechaCons, isnull(t2.SumaCant, 0) As Consumo,"
        sql = sql & "   (isnull(t1.SumaCantPre, 0) * -1) AS TotalPresup "
        sql = sql & "  ,isnull(t6.totalConsumido,0) as TotalConsum, "
        sql = sql & "    (isnull(t1.SumaCantPre, 0) * -1)+ isnull(t6.totalConsumido,0) as saldo "
        sql = sql & "   From IVInventario iv"
        sql = sql & "   INNER JOIN t3"
        sql = sql & "   right join  ( t1 left join t6 on t1.transid=t6.IdTransFuente and t6.IdInventario= t1.IdInventario)"
        sql = sql & "   LEFT join t2"
        
        
        sql = sql & "   on t1.transid=t2.IdTransFuente and t1.IdInventario= t2.IdInventario"
        sql = sql & "   on t1.transid=t3.IdTransFuente and t1.IdInventario= t3.IdInventario"
        
        sql = sql & "   ON (iv.IdInventario=t1.IdInventario )"
        sql = sql & " where iv.bandservicio=0 "
        If Not gobjCond.IncluirCero Then
            sql = sql & " and (isnull(t1.SumaCantPre, 0) * -1)+ isnull(t6.totalConsumido,0)  <> 0"
        End If
        sql = sql & "   ORDER BY pc.PCNombre,t1.codcentro,t1.DescCentro,t1.fechaTrans, iv.CodInventario"
        
    Set rs = Me.OpenRecordset(sql)
   Set ConsIVMovCCNew = rs
    Set rs = Nothing
    VerificaExistenciaTablaTemporal 1
    VerificaExistenciaTablaTemporal 2
    VerificaExistenciaTablaTemporal 3
    VerificaExistenciaTablaTemporal 4
    VerificaExistenciaTablaTemporal 5
    VerificaExistenciaTablaTemporal 6
End Function


Public Function VerificaElemntoYAConcilaidoenOtra(ByVal Id As Long, ByVal transid As Long, ByRef Trans As String) As Boolean
    Dim sql As String, rs As Recordset, cond As String
    VerificaElemntoYAConcilaidoenOtra = False
    Trans = ""
    sql = " select codtrans, numtrans from TSKardexConcilia t"
    sql = sql & " inner join gncomprobante g on t.transid=g.transid"
    sql = sql & " where IdTSKardex= " & Id
    sql = sql & " and IdTSKardex<> " & 0
    sql = sql & " and BandConciliado=1"
    sql = sql & " and g.estado<>3 "
    sql = sql & " and g.transid <>" & transid
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        VerificaElemntoYAConcilaidoenOtra = True
        Trans = rs.Fields("Codtrans") & "-" & rs.Fields("numtrans")
    End If
End Function

Public Function RecuperaReportes(num As Integer) As Recordset
    Dim nuevo As Empresa, sql As String
    Dim rs As Recordset
    
    'Debe estar hecho Login para recuperar una empresa
    If gobjMain.UsuarioActual Is Nothing Then
        Err.Raise ERR_NOUsuario, "SiiMain_RecuperaEmpresa", MSGERR_NOUsuario
    End If
    
    'Verifica si el Usuario actual tiene derecho o no
    sql = "SELECT 0 as selec, Titulo, Modulo, CodReporte, Orden  "
    sql = sql & " FROM GnReporte "
    sql = sql & " WHERE NumMenu=" & num
'    sql = sql & " and empresas like '%" & Mid$(Me.CodEmpresa, 1, 4) & "%'"
'    sql = sql & " or  len(empresas)=0 "
    sql = sql & " Order by Orden "
   
    Set rs = Me.OpenRecordset(sql)
    Set RecuperaReportes = rs
    Set rs = Nothing
    
End Function



Public Function ListaTSFormaCobroPagoParaFlexSoloContado(BandCobro As Boolean) As String
    Dim sql As String, s As String, i As Integer
    Dim rs As Recordset
    
        sql = "SELECT CodForma,NombreForma"
          sql = sql & " FROM TSFormaCobroPago WHERE "
           sql = sql & " BandCobro=" & CadenaBool(BandCobro, TipoDB)
           sql = sql & " AND BandValida=" & CadenaBool(True, TipoDB)
           sql = sql & " AND ConsiderarComoEfectivo=" & CadenaBool(True, TipoDB)
           sql = sql & " ORDER BY CodForma "
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 5 + 20)          '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    ListaTSFormaCobroPagoParaFlexSoloContado = s
    rs.Close
    Set rs = Nothing
End Function

Public Function RecuperarFinanciamientoExportar(ByVal cod As String, num As Long) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT * FROM gnFinanciamiento inner join gncomprobante on gnFinanciamiento.transid=gncomprobante.transid WHERE codtrans='" & cod & "' and numtrans=" & num
    Set rs = Me.OpenRecordset(sql)
    Set RecuperarFinanciamientoExportar = rs
    Set rs = Nothing
End Function

Public Function ListaIVGrupoParaFlexGridconFiltro(NumGrupo As Integer, numgrupoFiltro As Integer, IDGrupos As String) As String
    Dim sql As String, s As String
    Dim rs As Recordset
    
    sql = "SELECT CodGrupo" & NumGrupo & ",Descripcion FROM IVGrupo" & NumGrupo
    sql = sql & " WHERE BandValida=" & CadenaBool(True, TipoDB)
    If numgrupoFiltro > 0 And Len(IDGrupos) > 0 Then
        sql = sql & " and idgrupo" & numgrupoFiltro & " in(" & IDGrupos & ")"
    End If
    sql = sql & " ORDER BY CodGrupo" & NumGrupo
    
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
'    s = "|" & GetStringDAO(rs)         '*** MAKOTO 07/ago/2000 Modificado
    If Not rs.EOF Then s = "|" & GetStringDAO(rs, 20 + 50)      '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|", "(nulo)")
#End If
    ListaIVGrupoParaFlexGridconFiltro = s
    rs.Close
    Set rs = Nothing
End Function

Public Function ListaIVItemParaFlexconFiltro(CodBodega As String, _
                                    CodGrupo1 As String, _
                                    CodGrupo2 As String, _
                                    CodGrupo3 As String, _
                                    CodGrupo4 As String, _
                                    CodGrupo5 As String, _
                                    numgrupoFiltro As Integer, _
                                    IDGrupos As String) As String
    Dim sql As String, cond As String, s As String
    Dim rs As Recordset
    
    sql = "SELECT CodInventario,Descripcion FROM vwIVInventarioRecuperar"
    
'*** CodBodega No tiene efecto
'    If Len(CodBodega) > 0 Then
'        If Len(cond) > 0 Then cond = cond & "AND "
'        cond = cond & "CodBodega ='" & CodBodega & "' "
'    End If
    
    If CodGrupo1 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo1='" & CodGrupo1 & "' "
    End If
    If CodGrupo2 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo2='" & CodGrupo2 & "' "
    End If
    If CodGrupo3 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo3='" & CodGrupo3 & "' "
    End If
    If CodGrupo4 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo4='" & CodGrupo4 & "' "
    End If
    If CodGrupo5 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo5='" & CodGrupo5 & "' "
    End If
    'jeaa 01/12/2005
'    sql = sql & " WHERE  BandValida= 1  "
'    If Len(cond) > 0 Then sql = sql & " and " & cond
'    sql = sql & " ORDER BY CodInventario"
'    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
'    sql = sql & " ORDER BY CodInventario"
        sql = sql & " WHERE  BandValida= 1  and BandVenta= 1  "
    If Len(cond) > 0 Then sql = sql & " and " & cond
    
    If numgrupoFiltro > 0 And Len(IDGrupos) > 0 Then
        sql = sql & " and idgrupo" & numgrupoFiltro & " in(" & IDGrupos & ")"
    End If
    
    
    sql = sql & " ORDER BY CodInventario"

    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 20 + 80)     'Código=20, Descripcion=80      '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    
    ListaIVItemParaFlexconFiltro = s
    rs.Close
    Set rs = Nothing
End Function


Public Function CreaGNDestino() As GNDestino
    Dim obj As GNDestino
    Set obj = New GNDestino
    Set obj.Empresa = Me
    Set CreaGNDestino = obj
    Set obj = Nothing
End Function

Public Function RecuperaGNDestino(key As Variant) As GNDestino
    Dim obj As GNDestino
    Set obj = New GNDestino
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaGNDestino = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function


Public Function ListaGNDestino(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    

    sql = "SELECT CodDestino, Descripcion FROM GNDestino "

    If BandSoloValida Then
        sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY CodDestino"

    Set rs = Me.OpenRecordset(sql)
    
    If BandRS Then
        Set ListaGNDestino = rs
    Else
        ListaGNDestino = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function VerificaTransxNumDocRef(NumDocRef As String) As Boolean
    Dim sql As String, rs As Recordset
    
    VerificaTransxNumDocRef = False
    sql = "SELECT transid FROM GNcomprobante "
    sql = sql & "WHERE NumDocRef='" & NumDocRef & "'"

    Set rs = Me.OpenRecordset(sql)
    
    If rs.RecordCount > 0 Then VerificaTransxNumDocRef = True
    rs.Close
    Set rs = Nothing
End Function


Public Function ConsFerroClientesProv(BandCliente As Boolean) As Variant
    Dim sql As String, cond As String, rs As Recordset
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    cond = IIf(BandCliente, _
            "PCProvCli.BandCliente=" & CadenaBool(True, gobjMain.EmpresaActual.TipoDB), _
            "PCProvCli.BandProveedor=" & CadenaBool(True, gobjMain.EmpresaActual.TipoDB))
    'Agregado Alex: proveedores por fecha modificado
    cond = cond & " AND (PCProvCli.FechaGrabado BETWEEN " & _
                FechaYMD(gobjCond.fecha1, gobjMain.EmpresaActual.TipoDB, False) & " AND " & _
                FechaYMD(gobjCond.fecha2 + 1, gobjMain.EmpresaActual.TipoDB, False) & ")"
    If Not (Len(gobjCond.Grupo1) = 0 And Len(gobjCond.Grupo2) = 0) Then
        cond = cond & " AND (CodGrupo" & gobjCond.NumPCGrupo & " BETWEEN '" & gobjCond.Grupo1 & _
            "' AND '" & gobjCond.Grupo2 & "')"
    End If
    sql = "SELECT PCGrupo1.CodGrupo1, PCGrupo2.CodGrupo2, " & _
            "PCProvCli.CodProvCli,PCProvCli.RUC,PCProvCli.Nombre, " & _
            "PCProvCli.Direccion1,PCProvCli.Ciudad,PCProvCli.Provincia, PCProvCli.Telefono1, " & _
            "PCProvCli.NumAutSRI,PCProvCli.fechagrabado,PCProvCli.TipoComprobante, PCProvCli.TipoDocumento " & _
            " FROM PCGrupo1 RIGHT JOIN PCGrupo2 RIGHT JOIN PCProvCli ON PCGrupo2.IdGrupo2 = PCProvCli.IdGrupo2 ON PCGrupo1.IdGrupo1 = PCProvCli.IdGrupo1  WHERE "
    sql = sql & cond & " ORDER BY CodGrupo" & gobjCond.NumPCGrupo & ", PCProvCli.Nombre"
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsFerroClientesProv = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Clientes/Proveedores para ferro " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    End Function

Public Function ListaGNPantalla(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    

    sql = "SELECT CodDestino, Descripcion FROM GNPantalla "

    If BandSoloValida Then
        sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY CodDestino"

    Set rs = Me.OpenRecordset(sql)
    
    If BandRS Then
        Set ListaGNPantalla = rs
    Else
        ListaGNPantalla = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function CreaIVBanco() As IVBanco
    Dim obj As IVBanco
    Set obj = New IVBanco
    Set obj.Empresa = Me
    Set CreaIVBanco = obj
    Set obj = Nothing
End Function

Public Function RecuperaIVBanco(key As Variant) As IVBanco
    Dim obj As IVBanco
    Set obj = New IVBanco
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaIVBanco = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function


Public Function ListaIVBanco(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    

    sql = "SELECT CodBanco, Descripcion, BandValida FROM IVBanco "

    If BandSoloValida Then
        sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY CodBanco"

    Set rs = Me.OpenRecordset(sql)
    
    If BandRS Then
        Set ListaIVBanco = rs
    Else
        ListaIVBanco = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function CreaIVTarjeta() As IVTarjeta
    Dim obj As IVTarjeta
    Set obj = New IVTarjeta
    Set obj.Empresa = Me
    Set CreaIVTarjeta = obj
    Set obj = Nothing
End Function

Public Function RecuperaIVTarjeta(key As Variant) As IVTarjeta
    Dim obj As IVTarjeta
    Set obj = New IVTarjeta
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaIVTarjeta = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function


Public Function ListaIVTarjeta(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    

    sql = "SELECT CodTarjeta, Descripcion FROM IVTarjeta "

    If BandSoloValida Then
        sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY CodTarjeta"

    Set rs = Me.OpenRecordset(sql)
    
    If BandRS Then
        Set ListaIVTarjeta = rs
    Else
        ListaIVTarjeta = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


 Function CreaIVTipoDocCobro() As IVTipoDocCobro
 End Function

Public Function ListaIVTipoDocCobro(BandSoloValida As Boolean, BandRS As Boolean) As Variant
End Function

Public Function RecuperaIVTipoDocCobro(key As Variant) As IVTipoDocCobro

End Function

Public Function ConsGNTransCruceTarjeta(BandForma As Boolean, _
                    Optional ByVal OrdenAscendente As Boolean) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    
    '*** MAKOTO 03/oct/00
    sql = "SELECT"
    
    '*** MAKOTO 05/feb/01 Mod. Aumentado 'NumDocRef' y 'Nombre'
    sql = sql & " TransID, FechaTrans , ID, CodTrans, NumTrans, " & _
            "NumDocRef, Nombre, codtarjeta,  codprovcli, NomCliente,  '0' as ValorPagado FROM vwConsGNTransForma "
    
    'Condición de FechaTrans
    cond = "FechaTrans  BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB, True) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB, True)
    
    'Condición de CodTrans
    If Len(cond) > 0 Then cond = cond & " AND "
    If Len(gobjCond.CodTrans) > 0 Then      'Si está especificado transaccion
        'Si es una sola transaccion
        If InStr(gobjCond.CodTrans, ",") = 0 Then
            cond = cond & "(CodTrans=" & gobjCond.CodTrans & ")"
        'Si está seleccionado varias trans.
        Else
            cond = cond & "(CodTrans IN (" & gobjCond.CodTrans & "))"
        End If
    Else
        'Si no hay condicion de cod.trans, selecciona todas las trans.
        ' que tenga permiso
'        s = gobjMain.GrupoActual.PermisoActual.ListaTrans(True)
'        If Len(s) > 0 Then
'            cond = cond & "(CodTrans " & s & ")"
'        Else
            cond = cond & "(CodTrans = '-------')"    'Para que NO devuelva nada si no tiene ningún permiso  '*** MAKOTO 26/dic/00
'        End If
    End If
    
    If Len(gobjCond.CodForma) > 0 Then      'Si está especificado Forma
        'Si es una sola transaccion
        If InStr(gobjCond.CodForma, ",") = 0 Then
            cond = cond & "and (Codforma=" & gobjCond.CodForma & ")"
        'Si está seleccionado varias trans.
        Else
            cond = cond & " and (CodForma IN (" & gobjCond.CodForma & "))"
        End If
    End If
    
    
    
    If Len(cond) > 0 Then sql = sql & " WHERE estado <>3 and " & cond
    
    'Ordern de filas
    If BandForma Then
            sql = sql & " order by Codprovcli,FechaTrans, HoraTrans, TransID  "
    Else
        sql = sql & " ORDER BY FechaTrans, HoraTrans, TransID"
    End If
    

    Set rs = Me.OpenRecordset(sql)
    Set ConsGNTransCruceTarjeta = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta General " & gobjCond.fecha1 + gobjCond.Hora1 & "-" & gobjCond.fecha2 + gobjCond.Hora2, "GN"
End Function


Public Function VerificaAuditoriaUsuario(ByRef codUsuario) As Boolean
    Dim sql As String, s As String
    Dim rs As Recordset, rs1 As Recordset
        sql = "SELECT CodUsuario"
        sql = sql & " From Regauditoria "
        sql = sql & " Where CodUsuario='" & codUsuario & "'"
        Set rs = Me.OpenRecordset(sql)
        If rs.RecordCount = 0 Then
            sql = "SELECT CodUsuario"
            sql = sql & " From GnLogAccion "
            sql = sql & " Where CodUsuario='" & codUsuario & "'"
            Set rs1 = Me.OpenRecordset(sql)
            If rs1.RecordCount = 0 Then
                VerificaAuditoriaUsuario = False
            Else
               VerificaAuditoriaUsuario = True
            End If
        Else
           VerificaAuditoriaUsuario = True
        End If
  rs.Close
    Set rs = Nothing
    Set rs1 = Nothing

End Function



Public Function CargaConsolidadoBuffer() As Variant
    'jeaa 07-07-04
    ' PARA SIETE EMPRESAS COMO MAXIMO
    Dim sql As String, cond As String, CadenaPrecio As String, Trans As String
    Dim cadempresa As String, cadBodega As String, totalcero As Boolean, cond1 As String
    Dim v As Variant, max As Integer, TotalC As String, TotalP As String, i As Integer, rs As Recordset, TotalCMAx As String
    Dim CodInv As String, codBod As String, Orden As String, cadTrans As String
    Dim W As Variant, j As Integer, Grupo As String
    Dim vBod As Variant, vNomEmp As Variant, vTrans As Variant
    Dim Cadtitulo As String, k As Integer
    Dim condTrans As String, vaux As Variant
    Dim numReg As Long, numMoneda As String
    Dim cadETrans As Variant, cadEBodega As Variant, basePrincipal As String
    Dim TotalE As String, TotalProm As String, difDias As Integer, Intervalo As Double
    Dim TotalCUC As String, TotalUtil As String, TotalPUtil As String, Fijo As Integer, TotalTra As String
    Dim NumMeses As Long
    Dim TotalComp As String
    With gobjCond
        NumMeses = DateDiff("m", .fecha1, .fecha2)
        If NumMeses = 0 Then NumMeses = 1
       numMoneda = Trim(IIf(.numMoneda > 0, Str(.numMoneda + 1), ""))
        v = Split(.Sucursal, ";")
        vTrans = Split(.CodTrans, ";")
        For i = 0 To UBound(v)
            vNomEmp = Split(v(i), ",")
            Cadtitulo = Cadtitulo & vNomEmp(1) & " - "
        Next i
        'para quitar el ultimo "-"
        Cadtitulo = Mid$(Cadtitulo, 1, Len(Cadtitulo) - 3)
        cond = " "
        TotalC = ", ( "
        TotalCMAx = ", ( "
        TotalP = ", ( "
        TotalProm = ", ( "
        TotalE = ", ( "
        TotalCUC = ", ( "
        TotalUtil = ", ( "
        TotalPUtil = ", ( "
        TotalComp = ", ( "
        TotalTra = ", ( "
        max = UBound(v, 1)
        ReDim cadETrans(max, 2)
        ReDim cadEBodega(max, 2)
        cadETrans = llenaCadxEmpresa(vTrans, UBound(v))
        W = Split(v(0), ",")
        basePrincipal = W(1)
        difDias = DateDiff("d", .fecha1, .fecha2)
        For k = 0 To max
            sql = "SELECT   "
            sql = sql & "  vwVentasPorBodega.idinventario, CodInventario, Descripcion," & NumMeses & "  as TiempoPromVta, TiempoReposicion, "
            sql = sql & " CodGrupo" & .NumGrupo & " as CodGrupo,"
            sql = sql & "  DescGrupo" & .NumGrupo & "  as DescGrupo,"
            sql = sql & " isnull(sum(Cant),0) * -1  AS TCant,  "
'            sql = sql & " case when AnexoCodTipoComp='4' then 0 else isnull(MAX(abs(Cant)),0) END   AS CantMax  "
            sql = sql & "  0 AS CantMax "
            sql = sql & "  Into " & basePrincipal & ".dbo.T" & k
            W = Split(v(k), ",")
            sql = sql & " from "
            sql = sql & W(1) & ".dbo.vwVentasPorBodega vwVentasPorBodega "
            sql = sql & " Left Join "
            sql = sql & W(1) & ".dbo.VWIVProveedorDetalle ip "
            sql = sql & " Inner Join "
            sql = sql & W(1) & ".dbo.pcprovcli pc on ip.IdProveedor=pc.idprovcli "
            sql = sql & " on vwVentasPorBodega.idinventario=ip.idinventario "
            cond = " WHERE (FechaTrans BETWEEN " & _
                         FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & _
                        " AND " & FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            cond = cond & " AND  AnexoCodTipoComp in (" & PreparaCadena(.CodBanco2) & ") "
            cond = cond & " AND  AnexoCodTipoTrans in (" & PreparaCadena(.CodBanco1) & ") "
            
            If Len(.CodPC1) > 0 Then
                cond = cond & " and pc.codprovcli='" & .CodPC1 & "'"
            End If
            
            If Not (Len(.Grupo1) = 0 And Len(.Grupo2) = 0) Then
                cond = cond & " AND (codGrupo" & .NumGrupo & " BETWEEN '" & _
                .Grupo1 & "' AND '" & .Grupo2 & "') "
            End If
            If Not (Len(.CodItem1) = 0 And Len(.CodItem2) = 0) Then
                cond = cond & " AND (CodInventario BETWEEN '" & .CodItem1 & "' AND '" & .CodItem2 & "') "
            End If
            
            If Not (Len(.Bienes)) = 0 Then
                cond = cond & Mid$(.Bienes, 1, 6) & " vwVentasPorBodega" & Mid$(.Bienes, 19, 60)
            End If
            
            
            
            Grupo = " group by "
            Grupo = Grupo & "  vwVentasPorBodega.idinventario, CodInventario, Descripcion,   "
            Orden = " ORDER BY CodInventario"
            Grupo = Grupo & " CodGrupo" & .NumGrupo & " , DescGrupo" & .NumGrupo
            Grupo = Grupo & " , TiempoPromVta , TiempoReposicion"
            sql = sql & cond & cond1 & Grupo & Orden
            
            VerificaExistenciaTablaTemporal k
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
    
            sql = "  SELECT     vwVentasPorBodega.idinventario,"
            sql = sql & "  isnull(max(Abs(cant)), 0) As CantMax"
            sql = sql & "  Into " & basePrincipal & ".dbo.T" & k + 50
            sql = sql & "  from "
            sql = sql & W(1) & ".dbo.vwVentasPorBodega vwVentasPorBodega "
            sql = sql & " Left Join "
            sql = sql & W(1) & ".dbo.VWIVProveedorDetalle ip "
            sql = sql & " Inner Join "
            sql = sql & W(1) & ".dbo.pcprovcli pc on ip.IdProveedor=pc.idprovcli "
            sql = sql & " on vwVentasPorBodega.idinventario=ip.idinventario"
            
            
            sql = sql & " WHERE (FechaTrans BETWEEN " & _
                         FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & _
                        " AND " & FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            
            sql = sql & " AND  AnexoCodTipoComp in ('18') "
            sql = sql & " AND  AnexoCodTipoTrans in (" & PreparaCadena(.CodBanco1) & ") "
            
            If Len(.CodPC1) > 0 Then
                cond = cond & " and pc.codprovcli='" & .CodPC1 & "'"
            End If
            
            
            If Not (Len(.Grupo1) = 0 And Len(.Grupo2) = 0) Then
                sql = sql & " AND (codGrupo" & .NumGrupo & " BETWEEN '" & _
                .Grupo1 & "' AND '" & .Grupo2 & "') "
            End If
            If Not (Len(.CodItem1) = 0 And Len(.CodItem2) = 0) Then
                sql = sql & " AND (CodInventario BETWEEN '" & .CodItem1 & "' AND '" & .CodItem2 & "') "
            End If
        
            If Not (Len(.Bienes)) = 0 Then
                sql = sql & Mid$(.Bienes, 1, 6) & " vwVentasPorBodega" & Mid$(.Bienes, 19, 60)
            End If
        
        
                sql = sql & " group by   vwVentasPorBodega.idinventario"
            
            VerificaExistenciaTablaTemporal k + 50
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
                            
            
            sql = "select I.idinventario, sum(I.cantidad) as cantIngresada"
            sql = sql & "  Into " & basePrincipal & ".dbo.T" & k + 100
            'sql = sql & "  Into Tmp0"
            sql = sql & " from " & W(1) & ".dbo.gncomprobante g"
            sql = sql & " inner join " & W(1) & ".dbo.ivkardex i"
            sql = sql & " Left Join "
            sql = sql & W(1) & ".dbo.VWIVProveedorDetalle ip "
            sql = sql & " Inner Join "
            sql = sql & W(1) & ".dbo.pcprovcli pc on ip.IdProveedor=pc.idprovcli "
            sql = sql & " on I.idinventario=ip.idinventario"
            
            
            sql = sql & " inner join " & W(1) & ".dbo.ivinventario ivinventario on ivinventario.idinventario=i.idinventario"
            sql = sql & " on g.transid=i.transid"
            sql = sql & " Where G.Estado <> 3"
            sql = sql & " and codtrans in ('" & .CodForma & "')"
            '" & .CodComp & "M')"
            If Len(.CodPC1) > 0 Then
                cond = cond & " and pc.codprovcli='" & .CodPC1 & "'"
            End If
            
            
            If Not (Len(.Bienes)) = 0 Then
                sql = sql & .Bienes
            End If
            
            sql = sql & " group by I.idinventario"

            VerificaExistenciaTablaTemporal k + 100
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
    
    
            sql = "select I.idinventario, sum(I.cantidad) as cantPedido"
            sql = sql & "  Into " & basePrincipal & ".dbo.T" & k + 200
            sql = sql & " from " & W(1) & ".dbo.gncomprobante g"
            sql = sql & " inner join " & W(1) & ".dbo.ivkardex i"
            sql = sql & " Left Join "
            sql = sql & W(1) & ".dbo.VWIVProveedorDetalle ip "
            sql = sql & " Inner Join "
            sql = sql & W(1) & ".dbo.pcprovcli pc on ip.IdProveedor=pc.idprovcli "
            sql = sql & " on I.idinventario=ip.idinventario"
            
            sql = sql & " inner join " & W(1) & ".dbo.ivinventario ivinventario on ivinventario.idinventario=i.idinventario"
            sql = sql & " on g.transid=i.transid"
            sql = sql & " Where G.Estado <> 3"
            sql = sql & " and codtrans in('" & .CodComp & "','" & .CodComp & "M')"
            
            If Len(.CodPC1) > 0 Then
                cond = cond & " and pc.codprovcli='" & .CodPC1 & "'"
            End If
            
            If Not (Len(.Bienes)) = 0 Then
                sql = sql & .Bienes
            End If
            
            
            sql = sql & " group by I.idinventario"
    
            VerificaExistenciaTablaTemporal k + 200
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            sql = "select isnull(" & basePrincipal & ".dbo.T" & k + 100 & ".idinventario,  " & basePrincipal & ".dbo.T" & k + 200 & ".idinventario) as idinventario,  "
            sql = sql & "case when (cantPedido-isnull(cantIngresada,0))  <0 then 0 else cantPedido-isnull(cantIngresada,0) end as Transito "
            sql = sql & "  Into " & basePrincipal & ".dbo.T" & k + 300
            sql = sql & " from " & basePrincipal & ".dbo.T" & k + 100
            sql = sql & " full join " & basePrincipal & ".dbo.T" & k + 200
            sql = sql & " on " & basePrincipal & ".dbo.T" & k + 100 & ".idinventario "
            sql = sql & " = " & basePrincipal & ".dbo.T" & k + 200 & ".idinventario "
    
            VerificaExistenciaTablaTemporal k + 300
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            
            
            
            sql = "select "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".Codinventario, i.Codinventario) As Codinventario, "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".Descripcion, i.Descripcion) as Descripcion, "
            sql = sql & basePrincipal & ".dbo.T" & k & ".TiempoPromVta as TiempoPromVta, "
            sql = sql & basePrincipal & ".dbo.T" & k & ".TiempoReposicion as TiempoReposicion, "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".CodGrupo,i.CodGrupo" & .NumGrupo & ") as CodGrupo, "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".DescGrupo, i.DescGrupo" & .NumGrupo & ") as DescGrupo, "
            sql = sql & "  isnull(sum(" & basePrincipal & ".dbo.T" & k & ".TCant), 0) as TCant, "
            sql = sql & "  isnull(sum(" & basePrincipal & ".dbo.T" & k + 50 & ".CantMax), 0)  as TCAntMAx, "
            sql = sql & "  isnull(sum(" & basePrincipal & ".dbo.T" & k & ".TCant), 0)/" & NumMeses & "as Prom, "
            sql = sql & "  round(isnull(sum(" & basePrincipal & ".dbo.T" & k & ".TCant), 0)/( " & NumMeses & "   *20"
            sql = sql & "   ),1) as PromDiario, "
            sql = sql & "  isnull(sum(i.exist), 0) as Existencia,  "
            sql = sql & "  isnull(sum(" & basePrincipal & ".dbo.T" & k + 300 & ".Transito), 0) as Transito, "
            sql = sql & "  isnull(sum(ic.compr)*-1, 0) as Comprometido "
            sql = sql & "  Into " & basePrincipal & ".dbo.Tmp" & k
            sql = sql & " from "

            sql = sql & basePrincipal & ".dbo.T" & k & " left join " & basePrincipal & ".dbo.T" & k + 50 & " on " & basePrincipal & ".dbo.T" & k & ".idinventario = " & basePrincipal & ".dbo.T" & k + 50 & ".idinventario"
            sql = sql & "  full join " & W(1) & ".dbo.vwivexist i "
            sql = sql & "  inner join " & W(1) & ".dbo.IVinventario iv  "
            sql = sql & "  full join " & W(1) & ".dbo.VWivcompr ic on ic.idinventario=iv.idinventario "
            sql = sql & " on i.idinventario=iv.idinventario"
            sql = sql & " on " & basePrincipal & ".dbo.T" & k & ".idinventario=i.idinventario"
            sql = sql & "  left join " & basePrincipal & ".dbo.T" & k + 300
            sql = sql & " on " & basePrincipal & ".dbo.T" & k + 300 & ".idinventario=i.idinventario"
            
            'sql = sql & " left join " & basePrincipal & ".dbo.T" & k + 100 & " on " & basePrincipal & ".dbo.T" & k & ".idinventario = " & basePrincipal & ".dbo.T" & k + 50 & ".idinventario"
            
            
            
'            sql = sql & "  full join " & w(1) & ".dbo.vwivexist i "
'            sql = sql & " on " & basePrincipal & ".dbo.T" & k & ".idinventario=i.idinventario"
            sql = sql & " WHERE ((i.exist <> 0) OR (i.exist= 0))  "

            If Not (Len(.Grupo1) = 0 And Len(.Grupo2) = 0) Then
                sql = sql & "  AND (i.codGrupo" & .NumGrupo & " BETWEEN '" & _
                .Grupo1 & "' AND '" & .Grupo2 & "') "
            End If
            If Not (Len(.CodItem1) = 0 And Len(.CodItem2) = 0) Then
                sql = sql & "AND (i.CodInventario BETWEEN '" & .CodItem1 & "' AND '" & .CodItem2 & "') "
            End If
            
            If Not (Len(.Bienes)) = 0 Then
                sql = sql & Mid$(.Bienes, 1, 7) & "v" & Mid$(.Bienes, 19, 60)
            End If
            
            
            sql = sql & "  group by "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".Codinventario, i.Codinventario) , "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".Descripcion, i.Descripcion) , "
            sql = sql & basePrincipal & ".dbo.T" & k & ".TiempoPromVta, "
            sql = sql & basePrincipal & ".dbo.T" & k & ".TiempoReposicion, "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".CodGrupo,i.CodGrupo" & .NumGrupo & ") , "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".DescGrupo, i.DescGrupo" & .NumGrupo & ")  "
                
            VerificaExistenciaTabla k
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        Next k
        
        sql = " select "
        sql = sql & ArmaSQL("CodInventario", max)
        sql = sql & ArmaSQL("descripcion", max)
        sql = Mid$(sql, 1, Len(sql) - 2)
       For i = 0 To max
           TotalC = TotalC & " isnull(TMP" & i & ".TCant,0) +"
           TotalCMAx = TotalCMAx & " isnull(TMP" & i & ".TCantMax,0) +"
            TotalProm = TotalProm & " isnull(TMP" & i & ".prom,0) +"
            TotalP = TotalP & " isnull(TMP" & i & ".PromDiario,0) +"
            TotalE = TotalE & " isnull(TMP" & i & ".Existencia,0) +"
            TotalComp = TotalComp & " isnull(TMP" & i & ".Comprometido,0) +"
            TotalTra = TotalTra & " isnull(TMP" & i & ".Transito,0) +"
            
        Next i
        For i = max + 1 To 6
            sql = sql & "  , 0 as TiempoReposicion" & i
            sql = sql & " , 0 as Cant" & i
            sql = sql & " , 0 as CantMax" & i & ", 0 as PTot" & i
            sql = sql & " , 0 as Prom" & i & ", 0 as existencia" & i & ", 0 as comprometido" & i & ", 0 as Transito" & i
            sql = sql & " , 0 as ExistOptima" & i & " , 0 as Diferencia" & i & ""
        Next i

        TotalC = Mid(TotalC, 1, Len(TotalC) - 1)
        TotalCMAx = Mid(TotalCMAx, 1, Len(TotalCMAx) - 1)
        TotalP = Mid(TotalP, 1, Len(TotalP) - 1)
        TotalProm = Mid(TotalProm, 1, Len(TotalProm) - 1)
        TotalE = Mid(TotalE, 1, Len(TotalE) - 1)
        TotalComp = Mid(TotalComp, 1, Len(TotalComp) - 1)
        TotalTra = Mid(TotalTra, 1, Len(TotalTra) - 1)
        
        i = 0
        sql = sql & "  ,isnull(TMP" & i & ".TiempoReposicion,0) AS TiempoRep"
        sql = sql & ", Round(" & Mid$(TotalProm, 2, Len(TotalProm)) & "),0)  as TotalPromMen "
        sql = sql & ", Round(" & Mid$(TotalP, 2, Len(TotalP)) & "),0)  as TotalPromDia "
        sql = sql & ", Round(" & Mid$(TotalE, 2, Len(TotalE)) & "),0)  as TotalExist "
        sql = sql & ", Round(" & Mid$(TotalComp, 2, Len(TotalComp)) & "),0)  as Totalcomp "
        sql = sql & ", Round(" & Mid$(TotalCMAx, 2, Len(TotalCMAx)) & "),0)  as Totalcmax "
        sql = sql & ", Round(" & Mid(TotalP, 2, Len(TotalP) - 1) & ")  *  isnull(TMP" & i & ".TiempoReposicion,0),0) AS ExistenciaOptima "
        sql = sql & ", Round(" & Mid$(TotalTra, 2, Len(TotalTra)) & "),0)  as TotalTra "

        sql = sql & "  Into " & basePrincipal & ".dbo.Tmp" & k + 1

         For i = max To 0 Step -1
            If i = max Then
                sql = sql & " From "
            Else
                sql = sql & " FULL JOIN "
           End If
            sql = sql & " " & basePrincipal & ".dbo.TMP" & i & " "
        Next i
        If max > 0 Then
            For i = 0 To max - 1
                If i = 0 Then
                    CodInv = " ON " & basePrincipal & ".dbo.TMP" & i & ".CodInventario="
                    CodInv = CodInv & "" & basePrincipal & ".dbo.TMP" & i + 1 & ".CodInventario"
                    sql = sql & CodInv
                Else
                    Dim m As Integer
                    CodInv = ""
                    For m = 0 To i
                        If m = 0 Then
                            CodInv = CodInv & " ON " & basePrincipal & ".dbo.TMP" & i & ".CodInventario="
                            CodInv = CodInv & "" & basePrincipal & ".dbo.TMP" & i + 1 & ".CodInventario"
                        Else
                            CodInv = CodInv & " OR " & basePrincipal & ".dbo.TMP" & m - 1 & ".CodInventario="
                            CodInv = CodInv & "" & basePrincipal & ".dbo.TMP" & i + 1 & ".CodInventario"
                        End If
                    Next m
                    sql = sql & CodInv
                End If
            Next i
        End If
        
        VerificaExistenciaTabla k + 1
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
                
        sql = " select distinct "
        sql = sql & " i.idinventario, t.CodInventario, "
        sql = sql & " t.descripcion,  TotalExist , TotalComp, Totalcmax, TotalTra, "
        'sql = sql & " case when (ExistenciaOptima - TotalExist + totalcomp - TotalTra ) <0 then 0 else  abs( ExistenciaOptima - TotalExist + totalcomp - TotalTra ) end as saldo, "
        'sql = sql & " abs( ExistenciaOptima - TotalExist + totalcomp - TotalTra ) as saldo, "
        sql = sql & " case when ( ExistenciaOptima - TotalExist + totalcomp - TotalTra ) <0 then 0 else ( ExistenciaOptima - TotalExist + totalcomp - TotalTra ) end as saldo,"
        sql = sql & "  0 as BandPedido, "
        sql = sql & " pc.nombre, ISNULL(IP.Cantidad,0), ISNULL(CostoUnitario,0), ip.Fecha, ExistenciaOptima, TotalPromMen "
        sql = sql & " from tmp" & k + 1 & " t "
        sql = sql & " inner join ivinventario i on t.codinventario=i.codinventario "
        Select Case .Nivel
        Case 0
            sql = sql & " left join IVProveedorDetalle ip"
            sql = sql & " inner join pcprovcli pc on ip.IdProveedor=pc.idprovcli and ip.bandprincipal=1"
            sql = sql & " on i.idinventario=ip.idinventario"
        Case 1
            sql = sql & " left join VWIVProveedorDetalle ip"
            sql = sql & " inner join pcprovcli pc on ip.IdProveedor=pc.idprovcli"
            sql = sql & " on i.idinventario=ip.idinventario"
'        Case 2
'            sql = " select distinct"
'            sql = sql & " isnull(t.idinventario, ip.idinventario) as ivinventario,"
'            sql = sql & " isnull(t.CodInventario, iv.CodInventario) as CodInventario,"
'            sql = sql & " isnull(t.descripcion, iv.descripcion) as descripcion, isnull(TotalExist ,0),"
'            sql = sql & "  abs( ExistenciaOptima - TotalExist) as saldo, "
'            sql = sql & "  0 as BandPedido,  pc.nombre, ISNULL(IP.Cantidad,0), ISNULL(CostoUnitario,0), ip.Fecha"
'            sql = sql & " from tmp" & k + 1 & " t "
'            sql = sql & " right join (IVProveedorDetalle ip"
'            sql = sql & " inner join ivinventario iv on ip.idinventario=iv.idinventario "
'            'sql = sql & " inner join tmp0 e on iv.idinventario = e.idinventario )"
'            sql = sql & " inner join pcprovcli pc on ip.IdProveedor=pc.idprovcli"
'            sql = sql & " on iv.idinventario=ip.idinventario"
        End Select
                
        sql = sql & " WHERE 1=1"
                
        If Len(.CodPC1) > 0 Then
            sql = sql & " and pc.codprovcli='" & .CodPC1 & "'"
        End If
                
                
        
        If .tipoItem1 Then
            sql = sql & " and (TotalExist  >= ( ExistenciaOptima+ (ExistenciaOptima *0.5))) and (TotalExist <= TotalPromMen)"
            If .IncluirCero Then
                sql = sql & " or  (TotalExist  <  ExistenciaOptima) "
            End If
        Else
            If .IncluirCero Then
                sql = sql & " and ((TotalExist + totalcomp - TotalTra)  <  ExistenciaOptima) "
'            Else
'                sql = sql & " WHERE (TotalExist  >= ( ExistenciaOptima+ (ExistenciaOptima *0.5))) and (TotalExist <= TotalPromMen)"
'                sql = sql & " or  (TotalExist  <  ExistenciaOptima) "
            End If
        End If
        
        i = 0
        
        
        
       sql = sql & " order by "
        sql = sql & "t.CodInventario"

       Set rs = gobjMain.EmpresaActual.OpenRecordset(sql)
    Set CargaConsolidadoBuffer = rs
    Set rs = Nothing
       
    End With
End Function


Private Function llenaCadxEmpresa(ByVal v As Variant, NumEmp As Integer) As Variant
    Dim i As Integer, W As Variant, aux As Variant, k As Integer
    Dim j As Integer
    ReDim W(NumEmp, 1)
    j = 0
    For i = 0 To UBound(v)
        aux = Split(v(i), ",")
       If i = 0 Then
            'ReDim w(j + 1, 2)
            W(j, 0) = aux(0)
            W(j, 1) = "'" & aux(1) & "',"
       Else
            For k = 0 To j
                If aux(0) = W(k, 0) Then
                    W(k, 1) = W(k, 1) & "'" & aux(1) & "',"
                Else
                    If k = j Then
                        j = j + 1
                        'ReDim Preserve w(j, 3)
                        W(j, 0) = aux(0)
                        W(j, 1) = "'" & aux(1) & "',"
                    End If
                End If
            Next k
       End If
    Next i
    For k = 0 To j
        If Len(W(k, 1)) > 0 Then
            W(k, 1) = Mid$(W(k, 1), 1, Len(W(k, 1)) - 1)
        End If
    Next k
    llenaCadxEmpresa = W
End Function



Private Function ArmaSQL(ByVal campo As String, max As Integer)
        Dim cad As String, j As Integer, k As Integer
        cad = ""
        If max = 0 Then cad = cad & "("
        For j = 0 To max
            If j = max Then
                cad = cad & "tmp" & j & "." & campo & ")"
                For k = 1 To max - 1
                     cad = cad & ")"
                Next k
                'If max > 1 Then cad = cad & ")"
                cad = cad & " as " & campo & ", "
            Else
                cad = cad & "isnull(tmp" & j & "." & campo & ", "
            End If
        Next j
        ArmaSQL = cad
End Function

Public Function ListaIVItemParaFlexVenta(CodBodega As String, _
                                    CodGrupo1 As String, _
                                    CodGrupo2 As String, _
                                    CodGrupo3 As String, _
                                    CodGrupo4 As String, _
                                    CodGrupo5 As String, _
                                    bandTipo As Boolean) As String
    Dim sql As String, cond As String, s As String
    Dim rs As Recordset
    
    sql = "SELECT CodInventario,Descripcion FROM vwIVInventarioRecuperar"
    
'*** CodBodega No tiene efecto
'    If Len(CodBodega) > 0 Then
'        If Len(cond) > 0 Then cond = cond & "AND "
'        cond = cond & "CodBodega ='" & CodBodega & "' "
'    End If
    
    If CodGrupo1 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo1='" & CodGrupo1 & "' "
    End If
    If CodGrupo2 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo2='" & CodGrupo2 & "' "
    End If
    If CodGrupo3 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo3='" & CodGrupo3 & "' "
    End If
    If CodGrupo4 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo4='" & CodGrupo4 & "' "
    End If
    If CodGrupo5 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo5='" & CodGrupo5 & "' "
    End If
    sql = sql & " WHERE  BandValida= 1  "
    If bandTipo Then
        sql = sql & "AND Tipo=2 "
    End If

    If Len(cond) > 0 Then sql = sql & " and " & cond
    sql = sql & " ORDER BY CodInventario"

    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 20 + 80)
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    
    ListaIVItemParaFlexVenta = s
    rs.Close
    Set rs = Nothing
End Function


Public Function RecuperaTiket(ByVal tiket As String, ByRef Id As Long, ByRef Orden As Long) As String
    Dim sql As String, s As String
    Dim rs As Recordset, rs1 As Recordset
    
    sql = "    select  codinventario, iviso.TransId, orden "
    sql = sql & " from IVInventarioDetalleISO iviso"
    sql = sql & " inner join ivkardex ivk"
    sql = sql & " on iviso.transid=ivk.transid and iviso.id=ivk.tiempoentrega"
    sql = sql & " inner join ivinventario ivi"
    sql = sql & " on iviso.IdTamanio=ivi.idinventario"
    sql = sql & " inner join gncomprobante gnc"
    sql = sql & " on iviso.transid=gnc.transid"
    sql = sql & " Where iviso.Id = " & tiket
    sql = sql & " and estado <> 3"
    
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount = 0 Then
        RecuperaTiket = "0"
        Id = 0
        Orden = 0
    Else
       RecuperaTiket = rs.Fields("codinventario")
       Id = rs.Fields("TransId")
       Orden = rs.Fields("Orden")
    End If
    rs.Close
    Set rs = Nothing
End Function


Public Function ListaIVItemHijosParaFlexVenta(ByVal codItemPadre As String) As String
    Dim sql As String, cond As String, s As String
    Dim rs As Recordset
    
    
    sql = sql & " SELECT IVH.codInventario, ivH.descripcion"
    sql = sql & " from ivinventario iv"
    sql = sql & " INNER JOIN IVMATERIA IVM"
    sql = sql & " INNER JOIN ivinventario ivh"
    sql = sql & " ON IVh.IDINVENTARIO=IVM.IDINVENTARIO"
    sql = sql & " ON IV.IDINVENTARIO=IVM.IDMATERIA"
    sql = sql & " Where ivh.BandValida = 1"
    If Len(codItemPadre) > 0 Then
        sql = sql & " and IV.codInventario = '" & codItemPadre & "'"
    End If
    

    
    sql = sql & " ORDER BY ivH.CodInventario "

    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 20 + 80)
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    
    ListaIVItemHijosParaFlexVenta = s
    rs.Close
    Set rs = Nothing
End Function


Public Function RecuperaBodegaTiket(ByVal tiket As String) As String
    Dim sql As String, s As String
    Dim rs As Recordset, rs1 As Recordset
        
    sql = " SELECT top 1 codbodega"
    sql = sql & " from IVInventarioDetalleISO iviso"
    sql = sql & " inner join ivinventario ivi on iviso.IdTamanio=ivi.idinventario"
    sql = sql & " inner join gncomprobante gnc"
    sql = sql & " inner join ivkardex ivk"
    sql = sql & " inner join IVBodega ivb on ivk.idbodega=ivb.idbodega"
    sql = sql & " on gnc.transid=ivk.transid"
    sql = sql & " on iviso.TransIDCalifica=gnc.transid"
    sql = sql & " Where Estado <> 3"
    sql = sql & " and cantidad>0"
    sql = sql & " and iviso.id=" & tiket
        
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount = 0 Then
        RecuperaBodegaTiket = "0"
    Else
       RecuperaBodegaTiket = rs.Fields("codbodega")
    End If
    rs.Close
    Set rs = Nothing
End Function

Public Function ListaEspecificacionProductoISO(BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset, NumIVGrupo As Integer, NumPCGrupo As Integer
    NumIVGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumIVGrupo")) + 1
    NumPCGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumPCGrupo")) + 1
    
    
    sql = " select ivtam.codinventario, "
    sql = sql & " ivtra.codinventario, "
    sql = sql & " ivdis.CodInventario, "
    sql = sql & " isnull(ValorPeso,0) as ValorPeso  "
    sql = sql & " from IVEspProdISO ive inner join ivinventario ivtam"
    sql = sql & " on ive.IdTamanio=ivtam.idinventario"
    sql = sql & " inner join ivinventario ivtra"
    sql = sql & " on ive.Idtrabajo=ivtra.idinventario"
    sql = sql & " inner join ivinventario ivdis"
    sql = sql & " on ive.Iddisenio=ivdis.idinventario"

    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaEspecificacionProductoISO = rs
    Else
        ListaEspecificacionProductoISO = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaIVInventarioSoloIvGrupoPadre(NumGrupo As Integer, BandSoloValida As Boolean, BandRS As Boolean, cod As String, Tipo As Integer) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT codInventario, iv.descripcion from ivinventario iv "
    sql = sql & " inner join ivgrupo" & NumGrupo & " ivg on iv.idgrupo" & NumGrupo & "=ivg.idgrupo" & NumGrupo
    sql = sql & " where ivg.bandvalida= 1 "
'    If Tipo > 0 Then
'        sql = sql & " and iv.tipo=" & Tipo
'    End If
    If Len(cod) > 0 Then
        sql = sql & " and  codgrupo" & NumGrupo & "='" & cod & "'"
    End If
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVInventarioSoloIvGrupoPadre = rs
    Else
        ListaIVInventarioSoloIvGrupoPadre = MiGetRows(rs)
       rs.Close
    End If
    Set rs = Nothing
End Function

'jeaa 05/01/05
Public Function CreaIVEspProdISO() As IVEspProdISO
    Dim obj As IVEspProdISO
    Set obj = New IVEspProdISO
    Set obj.Empresa = Me
    Set CreaIVEspProdISO = obj
    Set obj = Nothing
End Function

Public Function RecuperaIVEspProdISO(key As Variant) As IVEspProdISO
    Dim obj As IVEspProdISO
    Set obj = New IVEspProdISO
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaIVEspProdISO = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function ListaIVEspProdISO(CodTamanio As String, _
                                  CodTrabajo As String, _
                                  BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset, i As Integer
    Dim NumIVGrupo As Integer, NumPCGrupo As Integer
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If
    
    sql = " select ivtam.codinventario, "
    sql = sql & " ivtra.codinventario, "
    sql = sql & " ivdis.CodInventario, "
    sql = sql & " isnull(ValorPeso,0) as ValorPeso, Precio, Porcentaje "
    sql = sql & " from IVEspProdISO ive inner join ivinventario ivtam"
    sql = sql & " on ive.IdTamanio=ivtam.idinventario"
    sql = sql & " inner join ivinventario ivtra"
    sql = sql & " on ive.Idtrabajo=ivtra.idinventario"
    sql = sql & " inner join ivinventario ivdis"
    sql = sql & " on ive.Iddisenio=ivdis.idinventario"

    If Len(CodTamanio) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(ivtam.codinventario= '" & CodTamanio & " ') "
    End If
    If Len(CodTrabajo) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(ivtra.codinventario= '" & CodTrabajo & " ') "
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " order by ivdis.CodInventario, ivtam.codinventario "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVEspProdISO = rs
    Else
        ListaIVEspProdISO = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


Public Function ListaIVInventarioSoloIvGrupoHijo(BandSoloValida As Boolean, BandRS As Boolean, cod As String) As Variant
    Dim sql As String, rs As Recordset
    
    sql = sql & " SELECT IVH.codInventario, ivH.descripcion"
    sql = sql & " from ivinventario iv"
    sql = sql & " INNER JOIN IVMATERIA IVM"
    sql = sql & " INNER JOIN ivinventario ivh"
    sql = sql & " ON IVh.IDINVENTARIO=IVM.IDINVENTARIO"
    sql = sql & " ON IV.IDINVENTARIO=IVM.IDMATERIA"
    sql = sql & " inner join ivgrupo1 ivg"
    sql = sql & " on iv.idgrupo1=ivg.idgrupo1"
    sql = sql & " Where ivg.BandValida = 1"
    If Len(cod) > 0 Then
        sql = sql & " AND IV.codInventario='" & cod & "'"
    End If

    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVInventarioSoloIvGrupoHijo = rs
    Else
        ListaIVInventarioSoloIvGrupoHijo = MiGetRows(rs)
    End If
    rs.Close
       
    Set rs = Nothing
End Function

Public Function RecuperaPesoBanda(ByVal CodTamanio As String, ByVal codDisenio As String) As Currency
Dim sql As String, rs As Recordset
    sql = " SELECT ValorPeso"
    sql = sql & " from IVEspProdISO ive inner join ivinventario ivtam"
    sql = sql & " on ive.IdTamanio=ivtam.idinventario"
    sql = sql & " inner join ivinventario ivdis"
    sql = sql & " on ive.Iddisenio=ivdis.idinventario"
    sql = sql & " WHERE ivtam.codinventario ='" & CodTamanio & "'"
    sql = sql & " and ivDIS.codinventario='" & codDisenio & "'"

    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        RecuperaPesoBanda = rs.Fields("ValorPeso")
    Else
        RecuperaPesoBanda = 0
    End If
       rs.Close
    Set rs = Nothing
End Function


Public Function RecuperaRecetaISO(BandRS As Boolean, cod As String) As Recordset
    Dim sql As String, rs As Recordset
    sql = sql & " select ivi.codinventario as CodPadre, ivih.codinventario as CodHijo, Rendimiento/100 as Porcentaje"
    sql = sql & " from ivinventario ivi"
    sql = sql & " inner join ivmateria ivm"
    sql = sql & " inner join ivinventario iviH"
    sql = sql & " on ivih.idinventario=ivm.idmateria"
    sql = sql & " on ivi.idinventario=ivm.idinventario"
    sql = sql & " where ivi.codinventario='" & cod & "'"
    sql = sql & " and ivih.Tipo<>2"
    Set rs = Me.OpenRecordset(sql)

    Set RecuperaRecetaISO = rs
    Set rs = Nothing
End Function

Public Function RecuperarTransIDGncomprobante(CodTrans As String, NumTrans As Long) As Long
    Dim rs As Recordset, sql As String
    RecuperarTransIDGncomprobante = 0
    sql = "Select transid from GNComprobante Where Codtrans = '" & CodTrans & "' and numtrans=" & NumTrans
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        RecuperarTransIDGncomprobante = rs!transid
    End If
    Set rs = Nothing
End Function

Public Function ConsTiketGNTrans(ByVal NumGrupo As Integer, ByVal CodGrupo As String) As Variant
    'Llama a la nueva función por orden descendente     '*** MAKOTO 20/oct/00
    Set ConsTiketGNTrans = ConsTiketGNTrans2(NumGrupo, CodGrupo, False)
End Function

    
Public Function ConsTiketGNTrans2(ByVal NumGrupo As Integer, ByVal CodGrupo As String, _
                    Optional ByVal OrdenAscendente As Boolean) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset, i As Integer, rsItem As Recordset
    Dim numReg As Long, CantItem As Integer
    'Condición de FechaTrans
    cond = "gning.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB)
    'cond = ""
    'Condición de CodTrans
    'Condición de NumTrans
    If (gobjCond.NumTrans1 > 0) Then 'And (gobjCond.NumTrans2 > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(gning.numdocref = '" & gobjCond.NumTrans1 & "')" ' AND '" & gobjCond.NumTrans2 & "')"
    ElseIf gobjCond.NumTrans1 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(gning.numdocref='" & gobjCond.NumTrans1 & "')"
    End If
    If Len(gobjCond.CodPC1) > 0 And Len(gobjCond.CodPC2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " pc.codProvcli between '" & gobjCond.CodPC1 & "' and '" & gobjCond.CodPC2 & "'"
    End If
    If Len(gobjCond.CodItem1) > 0 And Len(gobjCond.CodItem2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " ivtam.codinventario between '" & gobjCond.CodItem1 & "' and '" & gobjCond.CodItem2 & "'"
    End If
    
    If Len(gobjCond.CodCentro1) > 0 And Len(gobjCond.CodCentro2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " ivg.CodGrupo2 between '" & gobjCond.CodCentro1 & "' and '" & gobjCond.CodCentro2 & "'"
    End If
    
    If Len(gobjCond.CodBanco1) > 0 And Len(gobjCond.CodBanco2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " ivmar.codinventario between '" & gobjCond.CodBanco1 & "' and '" & gobjCond.CodBanco2 & "'"
    End If

    
    If gobjCond.Tipo <> 4 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " motivo  = " & gobjCond.Tipo
    End If
    
       sql = "select "
        sql = sql & " gning.numdocref ,"
        sql = sql & " pc.CodProvcli,  pc.nombreALTERNO, "
        sql = sql & " case motivo "
        sql = sql & " when '0' then 'RENCA'"
        sql = sql & " when '1' then 'COMPR'"
        sql = sql & " when '2' then 'DEVOL'"
        sql = sql & " when '3' then 'REPARA'"
        sql = sql & " ELSE  'OTROS' end as motivo, gning.transid , "
        sql = sql & " gning.CodTrans, (gning.CodTrans+' '+CONVERT(VARCHAR,gning.NumTrans)) AS TransIng, gning.fechatrans,"
        sql = sql & " ivk.orden, iviso.id as tiket,"
        sql = sql & " ivmar.codinventario as marca,  ivtam.codinventario as tamanio, ivg.CodGrupo2 as Tipo, "
        sql = sql & " original, radial,"
        sql = sql & " iviso.NumSerie, DisenioOri,ivtra.codinventario as trabajo,"
        sql = sql & " BandVerifica,(gncal.CodTrans+' '+CONVERT(VARCHAR,gncal.NumTrans)) AS TransCal, gncal.fechatrans,"
        sql = sql & " IVMC.cODMOTIVO  as CODMOTIVO, "
        sql = sql & " BandProceso, (gnpro.CodTrans+' '+CONVERT(VARCHAR,gnpro.NumTrans)) AS TransPro, gnpro.fechatrans, ivpro.codinventario, "
        sql = sql & " IVMP.cODMOTIVO  as CODMOTIVO, gcc.codcentro, "
        sql = sql & " BandCarcasaUsada,  "
        sql = sql & " (gnfacCAR.CodTrans+' '+CONVERT(VARCHAR,gnfacCAR.NumTrans)) AS TransFacCAR, gnfacCAR.fechatrans, "
        sql = sql & " pcFacCAR.CodProvcli,  pcFacCAR.nombre, "
        sql = sql & " BandFactura, (gnfac.CodTrans+' '+CONVERT(VARCHAR,gnfac.NumTrans)) AS TransFac, gnfac.fechatrans, "
        sql = sql & " pcFac.CodProvcli,  pcFac.nombre, "
        sql = sql & " case when BandCarcasaISO=1 then 'ISO' else ' ' end as Bandiso , "
        sql = sql & " (gncp.CodTrans+' '+CONVERT(VARCHAR,gncp.NumTrans)) AS TransCP, gncp.fechatrans,  pccp.CodProvcli,  pccp.nombre, "
        sql = sql & " BandPagado,  "
        sql = sql & " gncp.transid AS TransPA, '' as fechatrans,   '' as CodProvcli,   '' as nombre,"
        sql = sql & " pcrec.CodProvcli,  pcrec.nombreALTERNO, "
        sql = sql & " fcv.codvendedor, fcv.nombre , iviso.idpadre , BandSinGarantia, Band2RenMas, gning.descripcion "
        sql = sql & " from IVInventarioDetalleISO iviso"
        sql = sql & " LEFT join mOTIVO IVMC ON iviso.IdMotivoCal = ivMC.IdMOTIVO"
        sql = sql & " LEFT join mOTIVO IVMp ON iviso.IdMotivoPro = ivMp.IdMOTIVO"
        sql = sql & " inner join ivkardex ivk"
        sql = sql & " inner join ivinventario ivtam "
        sql = sql & " inner join ivgrupo2 ivg "
        sql = sql & " on ivtam.idgrupo2=ivg.idgrupo2"
        sql = sql & " on ivk.Idinventario=ivtam.idinventario"
        sql = sql & " on iviso.idkardex=ivk.id"
        sql = sql & " inner join ivinventario ivmar on iviso.IdMarca=ivmar.idinventario"
        sql = sql & " left join ivinventario ivtra on iviso.IdTrabajo=ivtra.idinventario"
        sql = sql & " left join ivinventario ivpro on iviso.IdProcesado=ivpro.idinventario"
        sql = sql & " left join gncomprobante gning"
        sql = sql & " inner join pcprovcli pc on gning.idclienteref= pc.idprovcli"
        sql = sql & " left join pcprovcli pcrec on gning.idgaranteref= pcrec.idprovcli"
        sql = sql & " on iviso.transid = gning.transid"
        sql = sql & " left join gncomprobante gncal"
        sql = sql & " on iviso.TransIDCalifica = gncal.transid"
        sql = sql & " left join fcvendedor fcv on gning.idvendedor= fcv.idvendedor"
        sql = sql & " left join gncomprobante gnpro"
      '  sql = sql & " inner join gncentrocosto gcc"
        sql = sql & " Left join gncentrocosto gcc"
        sql = sql & " on gnpro.idcentro=gcc.idcentro"
        sql = sql & " on iviso.TransIDProceso = gnpro.transid"
        sql = sql & " left join gncomprobante gnfac"
        sql = sql & " inner join pcprovcli pcFac on gnfac.idclienteref= pcFac.idprovcli"
        sql = sql & " on iviso.TransIDFactura = gnfac.transid"
        sql = sql & " left join gncomprobante gnfacCAR"
        sql = sql & " inner join pcprovcli pcFacCAR on gnfacCAR.idclienteref= pcFacCAR.idprovcli"
        sql = sql & " on iviso.TransIDFacturaCarc = gnfacCAR.transid "
        sql = sql & " left join gncomprobante gncp"
        sql = sql & " inner join pcprovcli pccp  "
        sql = sql & " on gncp.idproveedorref= pccp.idprovcli on iviso.TransIDCompra = gncp.transid "
        If Len(cond) > 0 Then sql = sql & " WHERE " & cond
        'sql = sql & " and gnpro.codtrans='op' and gnpro.numtrans=1 "
        sql = sql & "  ORDER BY iviso.id"
   Set rs = Me.OpenRecordset(sql)
    Set ConsTiketGNTrans2 = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Tiket General " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function



Public Function RecuperaPrecioBanda(ByVal CodTamanio As String, ByVal codDisenio As String, ByRef Porcent As Currency) As Currency
Dim sql As String, rs As Recordset


    sql = " select isnull(ValorPeso,0) as ValorPeso "
    sql = sql & " from ivinventario ivi"
    sql = sql & " inner join ivespprodiso ivt"
    sql = sql & " inner join ivinventario iviD"
    sql = sql & " on ivid.idinventario=ivt.Iddisenio"
    sql = sql & " on ivi.idinventario=ivt.IdTamanio"
    sql = sql & " where ivid.codinventario='" & codDisenio & "'"
    sql = sql & " and ivi.codinventario ='" & CodTamanio & "'"
    
    Set rs = Me.OpenRecordset(sql)

    'RecuperaPesoBandaISO = rs.Fields("ValorPeso")

    sql = " SELECT isnull(Precio,0) as Precio , isnull(Porcentaje,0) as Porcentaje "
    ', isnull(Porcentajem,1) as Porcentaje"
    sql = sql & " from IVEspProdISO ive inner join ivinventario ivtam"
    sql = sql & " on ive.IdTamanio=ivtam.idinventario"
    sql = sql & " inner join ivinventario ivtra"
    sql = sql & " on ive.Iddisenio=ivtra.idinventario"
    sql = sql & " WHERE ivtam.codinventario ='" & CodTamanio & "'"
    sql = sql & " and ivtra.codinventario='" & codDisenio & "'"

    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        RecuperaPrecioBanda = rs.Fields("Precio")
        Porcent = rs.Fields("Porcentaje")
    Else
        RecuperaPrecioBanda = 0
        Porcent = 0
    End If
       rs.Close
    Set rs = Nothing
End Function


Public Function RecuperaBandISO(ByVal tiket As String, ByRef BandFactCarc As Boolean) As Boolean
    Dim sql As String, s As String
    Dim rs As Recordset, rs1 As Recordset
    
    sql = "    select  BandCarcasaISO, TransIDFacturaCarc "
    sql = sql & " from IVInventarioDetalleISO iviso"
    sql = sql & " Where iviso.Id = " & tiket
    
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        If rs.Fields("BandCarcasaISO") Then
            RecuperaBandISO = True
        Else
            RecuperaBandISO = False
        End If
        If rs.Fields("TransIDFacturaCarc") <> 0 Then
            BandFactCarc = True
        Else
            BandFactCarc = False
        End If
    Else
        RecuperaBandISO = False
        BandFactCarc = False
    End If
    rs.Close
    Set rs = Nothing
End Function

Public Function RecuperaUltimoTiket() As Long
    Dim sql As String, s As String
    Dim rs As Recordset, rs1 As Recordset
    
    sql = " select  top 1 id "
    sql = sql & " from IVInventarioDetalleISO "
    sql = sql & " order by Id desc "
    
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        RecuperaUltimoTiket = rs.Fields("id")
    Else
        RecuperaUltimoTiket = 0
    End If
    rs.Close
    Set rs = Nothing
End Function


Public Sub ActualizaNumeroTiket(ByVal num As Long)
    Dim sql As String, s As String
    Dim rs As Recordset, rs1 As Recordset
    
    sql = " DBCC CHECKIDENT (IVInventarioDetalleISO, RESEED," & num & ") "
    
    Set rs = Me.OpenRecordset(sql)
    Set rs = Nothing
End Sub



Public Function RecuperaMotivoIngresoCarcasa(ByVal tiket As String) As String
    Dim sql As String, s As String
    Dim rs As Recordset, rs1 As Recordset
    
    sql = "    select  Motivo "
    sql = sql & " from IVInventarioDetalleISO iviso"
    sql = sql & " Where iviso.Id = " & tiket
    
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        RecuperaMotivoIngresoCarcasa = rs.Fields("Motivo")
    Else
        RecuperaMotivoIngresoCarcasa = "99"
    End If
    rs.Close
    Set rs = Nothing
End Function

Public Function ConsIVKardexTiket() As Variant
    Dim sql As String, cond As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsIVKardexPorFecha")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("prmCodBodega") = gobjCond.CodBodega1
    qdef.Parameters("CodItem1") = IIf(Len(gobjCond.CodItem1) = 0, "!", gobjCond.CodItem1)
    qdef.Parameters("CodItem2") = IIf(Len(gobjCond.CodItem2) = 0, String$(20, "z"), gobjCond.CodItem2)
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient

    sql = "spConsIVKardexPorFechaISO " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodBodega1 & "','" & _
                gobjCond.CodItem1 & "','" & _
                gobjCond.CodItem2 & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB)
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    Set ConsIVKardexTiket = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Kardex Tiket inv. " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "IV"
End Function


Public Function ConsIVTransImpresionEtiquetas() As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset, i As Integer, rsItem As Recordset
    Dim numReg As Long, CantItem As Integer


    'Condición de FechaTrans
    cond = "gning.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB)

    'Condición de CodTrans
'    If Len(cond) > 0 Then cond = cond & " AND "

    'Condición de NumTrans
    If (gobjCond.NumTrans1 > 0) And (gobjCond.NumTrans2 > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(gning.numdocref BETWEEN " & gobjCond.NumTrans1 & " AND " & gobjCond.NumTrans2 & ")"
    ElseIf gobjCond.NumTrans1 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(gning.numdocref>=" & gobjCond.NumTrans1 & ")"
    ElseIf gobjCond.NumTrans2 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(gning.numdocref<=" & gobjCond.NumTrans2 & ")"
    End If

    If Len(gobjCond.CodTrans) > 0 Then
        cond = cond & " and gning.codtrans='" & gobjCond.CodTrans & "' "
    End If

        cond = cond & " and NumTransCierrePOS=" & gobjCond.Nivel


        sql = "select"
        sql = sql & " gning.numdocref ,"
        sql = sql & " ivk.orden, iviso.id as tiket,"
        sql = sql & " ivmar.codinventario as marca,  ivtam.codinventario as tamanio,"
        sql = sql & " iviso.NumSerie, DisenioOri,ivtra.codinventario as trabajo,"
        sql = sql & " (gning.CodTrans+' '+CONVERT(VARCHAR,gning.NumTrans)) AS TransIng, gning.fechatrans,"
        sql = sql & " pc.NombreAlterno, fc.codvendedor, pcg.NombreAlterno "
        sql = sql & " from IVInventarioDetalleISO iviso"
        sql = sql & " inner join ivkardex ivk"
        sql = sql & " inner join ivinventario ivtam on ivk.Idinventario=ivtam.idinventario"
        sql = sql & " on iviso.idkardex=ivk.id"
        sql = sql & " inner join ivinventario ivmar on iviso.IdMarca=ivmar.idinventario"
        sql = sql & " inner join ivinventario ivtra on iviso.IdTrabajo=ivtra.idinventario"
        sql = sql & " left join gncomprobante gning"
        sql = sql & " inner join pcprovcli pc on gning.idclienteref= pc.idprovcli"
        sql = sql & " inner join fcVendedor fc on gning.idvendedor= fc.idvendedor"
        sql = sql & " left join pcprovcli pcg on gning.idgaranteref= pcg.idprovcli"
        sql = sql & " on iviso.transid = gning.transid"

        sql = sql & " WHERE gning.estado <>3 and " & cond

        sql = sql & "  ORDER BY iviso.id"


   Set rs = Me.OpenRecordset(sql)
    Set ConsIVTransImpresionEtiquetas = rs
    Set rs = Nothing

        Me.GrabaGNLogAccion "CONSULTA", "Consulta Impresion Etiqueta x Lote " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function

Public Function ConsIVTransImpresionEtiquetasISO(ByVal NumDocRef As Long) As Recordset
    Dim sql As String, cond As String, s As String, rs As Recordset, i As Integer, rsItem As Recordset
    Dim numReg As Long, CantItem As Integer
    'Condición de CodTrans
    If Len(NumDocRef) > 0 Then
          cond = cond & "(gning.numdocref ='" & NumDocRef & "')"
    End If
    If Len(gobjCond.CodTrans) > 0 Then
        cond = cond & " and gning.codtrans='" & gobjCond.CodTrans & "' "
    End If
        sql = "select"
        sql = sql & " gning.numdocref ,"
        sql = sql & " ivk.orden, iviso.id as tiket,"
        sql = sql & " ivmar.codinventario as marca,  ivtam.codinventario as tamanio,"
        sql = sql & " iviso.NumSerie, DisenioOri,ivtra.codinventario as trabajo,"
        sql = sql & " (gning.CodTrans+' '+CONVERT(VARCHAR,gning.NumTrans)) AS TransIng, gning.fechatrans,"
        sql = sql & " pc.codprovcli, pc.NombreAlterno, fc.codvendedor, pcg.NombreAlterno "
       sql = sql & " from IVInventarioDetalleISO iviso"
        sql = sql & " inner join ivkardex ivk"
        sql = sql & " inner join ivinventario ivtam on ivk.Idinventario=ivtam.idinventario"
        sql = sql & " on iviso.idkardex=ivk.id"
        sql = sql & " left join ivinventario ivmar on iviso.IdMarca=ivmar.idinventario"
        sql = sql & " left join ivinventario ivtra on iviso.IdTrabajo=ivtra.idinventario"
       sql = sql & " left join gncomprobante gning"
        sql = sql & " inner join pcprovcli pc on gning.idclienteref= pc.idprovcli"
        sql = sql & " inner join fcVendedor fc on gning.idvendedor= fc.idvendedor"
        sql = sql & " left join pcprovcli pcg on gning.idgaranteref= pcg.idprovcli"
        sql = sql & " on iviso.transid = gning.transid"
        sql = sql & " WHERE gning.estado <>3 and " & cond
        sql = sql & "  ORDER BY iviso.id"
   Set rs = Me.OpenRecordset(sql)
    Set ConsIVTransImpresionEtiquetasISO = rs
    Set rs = Nothing
        Me.GrabaGNLogAccion "CONSULTA", "Consulta Impresion Etiqueta x Lote " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function

Public Function ListaPCGrupoxPrecio(NumGrupo As Integer, BandSoloValida As Boolean, BandRS As Boolean) As Variant
'BandRS : True  --> Devuelve Recordset
'          False --> Devuelve en Array de Variant

    Dim sql As String, rs As Recordset
    
    sql = "SELECT IdGrupo" & NumGrupo & ",Descripcion, "
    sql = sql & " substring(PreciosDisponibles,1,1) as p1,"
    sql = sql & " substring(PreciosDisponibles,2,1) as p2,"
    sql = sql & " substring(PreciosDisponibles,3,1) as p3,"
    sql = sql & " substring(PreciosDisponibles,4,1) as p4,"
    sql = sql & " substring(PreciosDisponibles, 5, 1) As p5,"
    sql = sql & " substring(PreciosDisponibles, 6, 1) As p6,"
    sql = sql & " substring(PreciosDisponibles, 7, 1) As p7,"
    sql = sql & " NumPrecioPre As NPP"
    sql = sql & " FROM PCGrupo" & NumGrupo
    sql = sql & " WHERE ORIGEN=2 "
    If BandSoloValida Then sql = sql & " AND BandValida=" & CadenaBool(True, TipoDB)
    sql = sql & " ORDER BY CodGrupo" & NumGrupo

    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCGrupoxPrecio = rs
    Else
        ListaPCGrupoxPrecio = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ConsGNErrorPagosCobros() As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
        
    sql = " select "
    sql = sql & " g.fechatrans, (g.CodTrans+' '+CONVERT(VARCHAR,g.NumTrans))As Trans,  pc.idprovcli, pc.nombre,"
    sql = sql & " gpago.fechatrans, (gpago.CodTrans+' '+CONVERT(VARCHAR,gpago.NumTrans))As TransPago, pcPago.idprovcli, pcpago.nombre, ppago.id "
    sql = sql & " from GNComprobante g"
    sql = sql & " inner join pckardex p inner join pcprovcli pc on p.idprovcli=pc.idprovcli"
    sql = sql & " inner join pckardex pPago inner join pcprovcli pcPago on ppago.idprovcli=pcPago.idprovcli"
    sql = sql & " inner join gncomprobante gpago"
    sql = sql & " on gpago.transid=ppago.transid"
    sql = sql & " on p.id=ppago.idasignado"
    sql = sql & " on g.transid=p.transid"
    sql = sql & " Where p.IdProvCli <> ppago.IdProvCli"
    sql = sql & " and g.estado<>3 and gpago.estado<>3"
    sql = sql & " and g.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB)
    sql = sql & " order by gpago.codtrans, gpago.numtrans"
        
       Set rs = Me.OpenRecordset(sql)
        Set ConsGNErrorPagosCobros = rs
        Set rs = Nothing
        Me.GrabaGNLogAccion "CONSULTA", "Consulta Trans Pagos/Cobros Erradas " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function

Public Function RecuperaIVInventarioAlt(key As Variant) As IVInventario
    Dim obj As IVInventario
    
    Set obj = New IVInventario
    Set obj.Empresa = Me
    On Error Resume Next
    obj.RecuperarALt key
    If Err.Number = 0 Then Set RecuperaIVInventarioAlt = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function ListaConsultaEspecialInventario(NumGrupo As Integer, _
    codigo1 As String, _
    codigo2 As String, _
    codigo3 As String, _
    codigo4 As String, _
    codigo5 As String, _
    BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    

    sql = "SELECT CodInventario , Descripcion, "
    sql = sql & " CodGrupo1,CodGrupo2,CodGrupo3,CodGrupo4,CodGrupo5"
    sql = sql & " from vwIVInventarioRecuperar"

    sql = sql & " where BandValida=1"
    If Len(codigo1) > 0 Then
        sql = sql & " AND CodGrupo1 = '" & codigo1 & "'"
    End If
    If Len(codigo2) > 0 Then
        sql = sql & " AND CodGrupo2 = '" & codigo2 & "'"
    End If
    If Len(codigo3) > 0 Then
        sql = sql & " AND CodGrupo3 = '" & codigo3 & "'"
    End If
    If Len(codigo4) > 0 Then
        sql = sql & " AND CodGrupo4 = '" & codigo4 & "'"
    End If
    If Len(codigo5) > 0 Then
        sql = sql & " AND CodGrupo5 = '" & codigo5 & "'"
    End If
    sql = sql & " ORDER BY Descripcion"

    Set rs = Me.OpenRecordset(sql)

    If BandRS Then
        Set ListaConsultaEspecialInventario = rs
    Else
        ListaConsultaEspecialInventario = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Sub GrabaGNLogAccionEnSucursal(ByVal bd As String, ByVal CodAccion As String, _
                            ByVal Descripcion As String, _
                            ByVal Modulo)
End Sub
Public Sub GrabaAccionModuloEnSucursal(ByVal bd As String, ByVal antes As String, ByVal despues As String, ByVal campo As String, ByVal Accion As String, ByVal Modulo As String)
End Sub

Public Function NombrePC() As String
   'Declara variables locales
   Dim sEquipo As String * 255
   Dim sName As String
   Dim p As Integer
   'Obtiene nombre pc
   GetComputerName sEquipo, 255
   p = InStr(1, sEquipo, Chr(0), vbTextCompare)
   If p > 0 Then
      sName = Left(sEquipo, p - 1)
   End If
   'Retorna resultado
   NombrePC = UCase(Mid$(Trim$(sName), 1, 20))
End Function

Public Function ListaConsultaEspecialInventarioNew( _
    codigo1 As String, _
    codigo2 As String, _
    codigo3 As String, _
    codigo4 As String, _
    codigo5 As String, _
    BandRS As Boolean, _
    Descripcion As String) As Variant
    Dim sql As String, rs As Recordset
    

    sql = "SELECT CodInventario , Descripcion, "
    sql = sql & " CodGrupo1,CodGrupo2,CodGrupo3,CodGrupo4,CodGrupo5"
    sql = sql & " from vwIVInventarioRecuperar"
    
    sql = sql & " where BandValida=1"
    If Len(codigo1) > 0 Then
        sql = sql & " AND CodGrupo1 = '" & codigo1 & "'"
    End If
    If Len(codigo2) > 0 Then
        sql = sql & " AND CodGrupo2 = '" & codigo2 & "'"
    End If
    If Len(codigo3) > 0 Then
        sql = sql & " AND CodGrupo3 = '" & codigo3 & "'"
    End If
    If Len(codigo4) > 0 Then
        sql = sql & " AND CodGrupo4 = '" & codigo4 & "'"
    End If
    If Len(codigo5) > 0 Then
        sql = sql & " AND CodGrupo5 = '" & codigo5 & "'"
    End If
    sql = sql & "  AND Descripcion LIKE '" & Descripcion & "%' "
    
    sql = sql & " ORDER BY Descripcion"

    Set rs = Me.OpenRecordset(sql)
    
    If BandRS Then
        Set ListaConsultaEspecialInventarioNew = rs
    Else
        ListaConsultaEspecialInventarioNew = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Property Get ConeccionSuc() As ADODB.Connection
    Set ConeccionSuc = mcnEmpresaSuc
End Property

Public Property Get ConeccionConfigRep() As ADODB.Connection
    Set ConeccionConfigRep = mcnEmpresaConfigRep
End Property


Public Sub GrabaGNLogAccionEnSucursales(ByVal bd As String, ByVal servidor As String, ByVal CodAccion As String, _
                           ByVal Descripcion As String, _
                            ByVal Modulo)
    Dim sql As String, codu As String, n As Long, rs As Recordset
    Dim ServidorSuc As String
   On Error Resume Next
    codu = "(Anonimo)"
    If Not (gobjUsuarioActual Is Nothing) Then
        codu = gobjUsuarioActual.codUsuario
    End If
    'jeaa 05/04/2005 antes 40
    Descripcion = Left(Descripcion, 200)
    sql = "INSERT INTO " & bd & ".dbo.GNLogAccion (CodUsuario,CodAccion,Descripcion,Modulo,Equipo,UsuarioRed) " & _
          " VALUES ('" & UCase(codu) & "','" & _
                         UCase(CodAccion) & "','" & _
                         Descripcion & "','" & _
                         UCase(Modulo) & "','" & NombrePC & "','" & NombreUsuarioPC & "')"
    Me.ExecuteSuc sql, bd, servidor, True
   'Elimina registros antiguos
    If CodAccion = "LOGOUT" Then
        If Not (gobjMain Is Nothing) Then
            '*** MAKOTO 09/feb/01 Mod. , 11/abr/02 Angel mod. de 2000 a 3000
            'Elimina registros más antiguos que 60 días
            'ó si existe más de 3000 registros, hasta que quede solo 3000
            sql = "SELECT Count(*) AS Cnt FROM " & bd & ".dbo.GNLogAccion"
            Set rs = Me.OpenRecordsetSUC(sql, bd, servidor)
           If Not rs.EOF Then n = rs.Fields("Cnt") - 3000
            rs.Close
            Set rs = Nothing
            If n > 0 Then
                    '5000 regs
                    '19-01-05 jeaa pasa a la tabla RegAuditoria
                    sql = "Insert " & bd & ".dbo.RegAuditoria select FechaHora, CodUsuario, CodAccion, Descripcion, " & _
                    " Modulo,Equipo  FROM " & bd & ".dbo.GNlogaccion WHERE GNLOGACCION.ID < (SELECT MAX (A.ID)  FROM " & bd & ".dbo." & _
                            "(SELECT TOP " & n & " ID FROM " & bd & ".dbo.GNLOGACCION ORDER BY FECHAHORA) AS A ) "
                    Me.OpenRecordsetSUC sql, bd, servidor
                   'JEAA 06/04/2005
                    'elimina todas las consultas
                    sql = " delete FROM " & bd & ".dbo.regauditoria where codaccion='consulta' "
                    Me.OpenRecordsetSUC sql, bd, servidor
                   sql = " delete FROM " & bd & ".dbo.regauditoria where codaccion='LOGOUT' "
                    Me.OpenRecordsetSUC sql, bd, servidor
                   sql = " delete FROM " & bd & ".dbo.regauditoria where codaccion='LOGIN' "
                    Me.OpenRecordsetSUC sql, bd, servidor
                  sql = "DELETE " & bd & ".dbo.GNLOGACCION " & _
                            " WHERE GNLOGACCION.ID < (SELECT MAX (A.ID)  FROM " & bd & ".dbo." & _
                            "(SELECT TOP " & n & " ID FROM " & bd & ".dbo.GNLOGACCION ORDER BY FECHAHORA) AS A) "
                Else
                    'Solo 185 días  6 meses
                    '19-01-05 jeaa pasa a la tabla RegAuditoria
                    sql = "Insert  " & bd & ".dbo.RegAuditoria select FechaHora, CodUsuario, CodAccion, Descripcion, " & _
                    " Modulo  FROM " & bd & ".dbo.GNlogaccion WHERE FechaHora<" & FechaYMD(Date - 185, mProps.TipoDB)
                    Me.OpenRecordsetSUC sql, bd, servidor
                   'borra logaccion de la base de datos
                   sql = "DELETE FROM " & bd & ".dbo.GNLogAccion " & _
                          "WHERE FechaHora<" & FechaYMD(Date - 185, mProps.TipoDB)
                End If
                Me.ExecuteSuc sql, bd, servidor, True
       End If
    End If
End Sub

Public Sub GrabaAccionModuloEnSucursales(ByVal bd As String, ByVal serever As String, ByVal antes As String, ByVal despues As String, ByVal campo As String, ByVal Accion As String, ByVal Modulo As String)
   'Graba en GNLogAccion para utilizarlo como historial
        Me.GrabaGNLogAccionEnSucursales bd, Server, Accion, "" & _
                                                        campo & " Valor Antes: " & antes & " Valor Desp: " & despues, Modulo
End Sub

Public Function OpenRecordsetSUC(ByVal sql As String, ByVal bd As String, ByVal Server As String) As Recordset
    Dim mcnMainSuc As ADODB.Connection, s As String
#If DAOLIB Then
    Set OpenRecordset = mdbEmpresa.OpenRecordset(sql, dbOpenSnapshot, dbReadOnly)
#Else
    Dim rs As Recordset
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    If Len(mcnEmpresaSuc) = 0 Then
        AbrirSoloConeccionSuc bd, Server
    End If
        mcnEmpresaSuc.CommandTimeout = GetSetting(APPNAME, SECTION, "TimeOut", 30)
        rs.Open sql, mcnEmpresaSuc, adOpenStatic, adLockReadOnly
     Set OpenRecordsetSUC = rs
    Set rs = Nothing
#End If
End Function

Friend Sub AbrirSoloConeccionSuc(ByVal bd As String, ByVal Server As String)
    Dim s As String
#If DAOLIB Then
    Set mdbEmpresa = DBEngine.Workspaces(0).OpenDatabase( _
                        mProps.Ruta & mProps.NombreDB & ".mdb", _
                        False, False, _
                        ";UID=" & mProps.UserName & _
                        ";pwd=" & mProps.Password)
#Else
    'Prepara la cadena de coneccion
    If mProps.TipoDB = TIPODB_JET Then
        s = CADENA_CONECCION_JET & mProps.Ruta & mProps.NombreDB & ".mdb"
    Else
        s = CADENA_CONECCION_SQL & _
            "Initial Catalog=" & bd & ";Data Source=" & Server
    End If
    'Establece la conección con la base de la empresa
    mcnEmpresaSuc.Open s, mProps.UserName, mProps.Password
#End If
End Sub

Public Function OpenRecordsetParaEditSuc(ByVal sql As String, ByVal bd As String, ByVal Server As String) As Recordset
#If DAOLIB Then
    Set OpenRecordsetParaEdit = mdbEmpresa.OpenRecordset(sql)
#Else
    Dim rs As ADODB.Recordset
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseServer
    If Len(mcnEmpresaSuc) = 0 Then
        AbrirSoloConeccionSuc bd, Server
    End If
    rs.Open sql, mcnEmpresaSuc, adOpenKeyset, adLockPessimistic
    Set OpenRecordsetParaEditSuc = rs
    Set rs = Nothing
#End If
End Function

Public Sub ExecuteSuc( _
                ByVal sql As String, _
                ByVal bd As String, ByVal Server As String, _
                Optional ByVal FailOnError As Boolean, _
                Optional ByRef numReg As Long) 'AUC cambiado public por friend
#If DAOLIB Then
    If FailOnError Then
        mdbEmpresaSuc.Execute sql, dbFailOnError
    Else
        mdbEmpresaSuc.Execute sql
    End If
#Else
    If Len(mcnEmpresaSuc) = 0 Then
        AbrirSoloConeccionSuc bd, Server
    End If
    mcnEmpresaSuc.Execute sql, numReg
#End If
End Sub

Public Sub EjecutarSQLSuc( _
                ByVal sql As String, _
                ByVal bd As String, ByVal servidor As String, _
                ByRef numReg As Long)
    Dim f As Integer, s As String
    Select Case UCase(Left$(sql, 5))
    'Caso A. Si comienza con 'FILE:'
    Case "FILE:"
        sql = Right$(sql, Len(sql) - 5)         'Quita 'FILE:' y saca nombre de archivo a abrir
        'Lee el contenido del archivo a la variable s
        f = FreeFile
        Open sql For Binary As #f
        s = Input(LOF(f), f)
        Close #f
    'Caso B. Si comienza con 'PROC:'
    Case "PROC:"
        sql = Right$(sql, Len(sql) - 5)         'Quita 'PROC:' y saca nombre de procedimiento para ejecutarlo
        'Ejecuta todos los SQLs
        EjecutarSiiEsquema sql, numReg
        s = ""
    'Caso C. Si envia directamente SQL
    Case Else
        s = sql
    End Select
    'En caso A. y C. aquí se ejecuta el SQL
    If Len(s) > 0 Then
        Me.ExecuteSuc s, bd, servidor, True, numReg
    End If
End Sub

'Auc carga clientes filtrado por grupo para facturar x lote
Public Function ListaPCProvCliXGrupo(NumGrupo As Integer, CodGrupo As String) As Variant
    Dim sql As String, rs As Recordset
    On Error GoTo CapturaError
    'Listado de Clientes con PCGrupo1,2,3
    sql = "SELECT pc.idprovcli, pc.CodProvCli, pc.Nombre "
             sql = sql & "FROM PCGrupo4 g4 RIGHT JOIN (PCGrupo3 g3 RIGHT JOIN (PCGrupo2 g2 RIGHT JOIN (PCGrupo1 g1 RIGHT JOIN PCProvCli pc " & _
                         " ON g1.IdGrupo1 = pc.IdGrupo1) " & _
                    " ON g2.IdGrupo2 = pc.IdGrupo2) " & _
                " ON g3.IdGrupo3 = pc.IdGrupo3) " & _
                " ON g4.idgrupo4 = pc.IdGrupo4 "
            sql = sql & " WHERE BandCliente=" & CadenaBool(True, TipoDB)
            sql = sql & " AND  g" & NumGrupo & ".codgrupo" & NumGrupo & " = '" & CodGrupo & "'"
    sql = sql & " ORDER BY Nombre"
        Set rs = Me.OpenRecordset(sql)
        Set ListaPCProvCliXGrupo = rs
     Set rs = Nothing
    Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function

Public Function CargarPCGrupoItems(ByVal CodGrupo As String, NumGrupo As Integer) As Recordset
Dim rs As Recordset
Dim sql As String
On Error GoTo CapturaError
    sql = "Select pcInv.idInventario,iv.codInventario,pcinv.cantidad,pcinv.pu from pcgrupoinventario pcInv inner join pcgrupo" & NumGrupo
    sql = sql & " on pcgrupo" & NumGrupo & ".idgrupo" & NumGrupo & "= pcInv.idpcgrupo" & NumGrupo
    sql = sql & " Inner join Ivinventario Iv ON iv.idinventario = pcInv.idinventario"
    sql = sql & " Where pcgrupo" & NumGrupo & ".codgrupo" & NumGrupo & "= '" & CodGrupo & "'"
    Set rs = Me.OpenRecordset(sql)
    Set CargarPCGrupoItems = rs
Exit Function
CapturaError:
    MsgBox Err.Description
    Exit Function
End Function


Friend Sub VerificaAnulacionConciliacion( _
                ByVal tid As Long, _
                ByVal bandAnulacion As Boolean)
    Dim sql As String, rs As Recordset, s As String
    
    sql = "select gc.codtrans, gc.numtrans from gncomprobante g"
    sql = sql & " inner join tskardex t"
    sql = sql & " inner join tskardexconcilia tsc "
    sql = sql & " inner join gncomprobante gc"
    sql = sql & " on tsc.transid= gc.transid"
    sql = sql & " on t.id=tsc.idtskardex"
    sql = sql & " on g.transid=t.transid"
    sql = sql & " Where g.TransID = " & tid
    
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        Do Until rs.EOF
            s = s & " " & rs.Fields("CodTrans") & " " & _
                                 rs.Fields("NumTrans")
            s = s & vbCr
            rs.MoveNext
        Loop
        If Len(s) > 0 Then
            s = Left$(s, Len(s) - 1)
            If bandAnulacion Then           '*** MAKOTO 11/dic/00 Modificado
                Err.Raise ERR_INVALIDO, "Empresa.CambiaEstadoGNComp", _
                    "No se puede anular la transacción porque ya esta conciliada." & vbCr & _
                    "Primero tendrá que eliminar las siguientes transacciones: " & vbCr & vbCr & s
            Else
                Err.Raise ERR_INVALIDO, "GNComprobante.Eliminar", _
                    "No se puede eliminar la transacción porque ya esta conciliada." & vbCr & _
                    "Primero tendrá que eliminar las siguientes transacciones: " & vbCr & vbCr & s
            End If
        End If
    End If
    rs.Close
    Set rs = Nothing
End Sub




Public Function VerificaAutoimpresor(gc As GNComprobante) As Boolean
    Dim obj As GNComprobante, gt As GNTrans
    VerificaAutoimpresor = False
    Set obj = gc
    Set gt = Me.RecuperaGNTrans(obj.CodTrans)
    If obj.EsNuevo Then
        If Not obj Is Nothing Then
            If gt.IVAutoImpresor Then
                    If gt.FechaCaducidad < obj.FechaTrans Then
                        MsgBox "No puede crear una Transacción " & obj.CodTrans & " que utiliza Autoimpresor " & Chr(13) & "Por que tiene la Fecha de Caducidad mayor a la autorizada por el SRI" & Chr(13) & "Fecha de Caducidad: " & Format(gt.FechaCaducidad, "mm/yyyy")
                        VerificaAutoimpresor = True
                            Set obj = Nothing
                    End If
            End If
        End If
    End If
    Set gt = Nothing
End Function

Public Function VerificaTransValida(gc As GNComprobante) As Boolean
    Dim obj As GNComprobante, gt As GNTrans
    VerificaTransValida = False
    Set obj = gc
    Set gt = Me.RecuperaGNTrans(obj.CodTrans)
    If obj.EsNuevo Then
        If Not obj Is Nothing Then
            If Not gt.BandValida Then
                MsgBox "No puede crear la Transacción " & obj.CodTrans & " porque está deshabilitada" & Chr(13) & "Actívela en la configuración de la transacción"
                VerificaTransValida = True
                Set obj = Nothing
            End If
        End If
    End If
    Set gt = Nothing
End Function

Public Function ConsANVentas2010() As Variant
    Dim pck As PCKardex, pcd As PCDocAsignado
    Dim objGnComp As GNComprobante, objGnCompDocOriginal As GNComprobante
    Dim sql As String, cond As String, CadenaValores As String
    Dim Recargo As String 'CadenaAgrupa  As String
    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
    Dim from As String, numReg As Long, f1 As String
    Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
    Dim Servicios As String, Bienes As String, RowRet As Long
    Const COL_BASESER = 15
    'segunda parte de la consulta: carga los valores de  Detalles de Anexos
    Const COL_FECHA = 2
    Const COL_CODCREDTRIB = 7
    Const COL_TRANSID = 1
    Const COL_TRANSRET = 5
    Dim condServ As String
    Dim condBien As String
    
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   
    With gobjCond
        'Reporte de un mes a la vez
        f1 = DateSerial(Year(.fecha1), Month(.fecha1), 1)
        cond = " AND GNC.FechaTrans BETWEEN " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & _
               " AND " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB)
        
           
            VerificaExistenciaTabla 0
            VerificaExistenciaTabla 1
            VerificaExistenciaTabla 2
            VerificaExistenciaTabla 3
            
            sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as TotalDescuento Into tmp0 " & _
                    "From IvRecargo ivR inner join " & _
                        "IvKardexRecargo ivkR Inner join " & _
                            "GnComprobante gNc  inner join gntrans gnt on gnc.codtrans=gnt.codtrans  " & _
                        "On ivkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = IvkR.IdRecargo "
            sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.Sucursal) & ") " & cond
            '" AND GNC.CodTrans IN (" & PreparaCadena(.CodGrupo) & ")"
            sql = sql & " AND  gnt.AnexoCodTipoComp in (" & PreparaCadena(.CodBanco2) & ") "
            sql = sql & " AND  AnexoCodTipoTrans in (" & PreparaCadena(.CodBanco1) & ") "
            sql = sql & " Group by IvkR.TransID"
                  
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg

'--datos de indices
            VerificaExistenciaTabla 3
            sql = " Select  DISTINCT GNC.IdClienteRef AS FC_id, GNC_b.IdClienteRef AS rtp_id1, "
            sql = sql & " CASE WHEN GNC_b.IdClienteRef=0 THEN PCK_b.IdProvcli WHEN GNC_b.IdClienteRef<>0 THEN GNC_b.IdClienteRef end as rtp_id "
            sql = sql & " Into tmp3"
            sql = sql & " From    (gncomprobante GNC Inner join pckardex pck_a ON GNC.TransID = pck_a.TransID ) INNER JOIN"
            sql = sql & "  (gncomprobante GNC_b Inner join pckardex pck_B ON GNC_b.TransID = pck_B.TransID )"
            sql = sql & " ON  PCK_A.ID = PCK_B.IDASIGNADO"
            sql = sql & " where GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
            sql = sql & " AND GNC_b.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion2) & ")"
            sql = sql & " AND (GNC.FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = sql & " and GNC.Estado<>3 and GNC.IdClienteRef<>0 and GNC_b.IdClienteRef<>0 "
            
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            '--datos de la Venta
            
            
            sql = " Select gnc.IdClienteRef, pc.ruc, pc.Nombre,"
            sql = sql & " case gnt.AnexoCodTipoComp WHEN  '18' THEN 'FC' WHEN '4' THEN 'FCV'  END as Codtrans, count(Gnc.NumTrans) as cantTrans,  "
            sql = sql & " sum( (vw.PrecioTotalBase0 + (vw.PrecioTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float))) ))*-1  As Valor0,"
            sql = sql & " sum( (vw.PrecioTotalBaseIVA + (vw.PrecioTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1 AS Valor12,"
            sql = sql & " 0 AS ValorNO12,"
            sql = sql & " sum( (vw.PrecioTotal + (vw.PrecioTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1   AS PrecioTotal"
            sql = sql & " Into tmp1"
            sql = sql & " from    ("
            sql = sql & " tmp0"
            sql = sql & " Right join gncomprobante Gnc "
            sql = sql & " inner join gntrans gnt on gnc.codtrans=gnt.codtrans"
            sql = sql & " INNER JOIN PCPROVClI pc ON GNC.IdClienteRef=pc.idprovcli "
            
            If InStr(1, mProps.CodEmpresa, "CADI") > 0 Or InStr(1, mProps.CodEmpresa, "ENCO") Or InStr(1, mProps.CodEmpresa, "MASKE") Then
                sql = sql & " inner join vwConsSUMIVKardexIVA2Bod vw"
            Else
                sql = sql & " inner join vwConsSUMIVKardexIVA vw"
            End If
            
            sql = sql & " ON Gnc.TransID = vw.transid"
            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " where  "
            'GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
            sql = sql & " pc.bandempresapublica=0"
            sql = sql & " AND  gnt.AnexoCodTipoComp in (" & PreparaCadena(.CodBanco2) & ") "
            sql = sql & " AND  AnexoCodTipoTrans in (" & PreparaCadena(.CodBanco1) & ") "
            sql = sql & " AND  vw.preciototal <> 0 " 'AUC agregado solo manda los que tiene precio <> 0
            
            sql = sql & " and GNC.Estado<>3 " & cond
            sql = sql & " group by  gnc.IdClienteRef, pc.ruc, pc.Nombre, gnt.AnexoCodTipoComp "
            
            sql = sql & " union all "
            
            sql = sql & " Select gnc.IdClienteRef, pc.ruc, pc.Nombre,"
            sql = sql & " case gnt.AnexoCodTipoComp WHEN  '18' THEN 'FC' WHEN '4' THEN 'FCV'  END as Codtrans, count(Gnc.NumTrans) as cantTrans,  "
            sql = sql & " sum( (vw.PrecioTotalBase0 + (vw.PrecioTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float))) ))*-1  As Valor0,"
            sql = sql & " 0 AS Valor12,"
            sql = sql & " sum( (vw.PrecioTotalBaseIVA + (vw.PrecioTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1 AS ValorNO12,"
            sql = sql & " sum( (vw.PrecioTotal + (vw.PrecioTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1   AS PrecioTotal"
            sql = sql & " from    ("
            sql = sql & " tmp0"
            sql = sql & " Right join gncomprobante Gnc "
            sql = sql & " inner join gntrans gnt on gnc.codtrans=gnt.codtrans"
            sql = sql & " INNER JOIN PCPROVClI pc ON GNC.IdClienteRef=pc.idprovcli "
            
            If InStr(1, mProps.CodEmpresa, "CADI") > 0 Or InStr(1, mProps.CodEmpresa, "ENCO") Or InStr(1, mProps.CodEmpresa, "MASKE") Then
                sql = sql & " inner join vwConsSUMIVKardexIVA2bod vw"
            Else
                sql = sql & " inner join vwConsSUMIVKardexIVA vw"
            End If

            sql = sql & " ON Gnc.TransID = vw.transid"
            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " where  "
            'GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
            sql = sql & " pc.bandempresapublica=1"
            sql = sql & " AND  gnt.AnexoCodTipoComp in (" & PreparaCadena(.CodBanco2) & ") "
            sql = sql & " AND  AnexoCodTipoTrans in (" & PreparaCadena(.CodBanco1) & ") "
            sql = sql & " AND  vw.preciototal <> 0 "
            sql = sql & " and GNC.Estado<>3 " & cond
            sql = sql & " group by  gnc.IdClienteRef, pc.ruc, pc.Nombre, gnt.AnexoCodTipoComp "
            
            
            VerificaExistenciaTabla 1
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            ' union de las tres tablas
            sql = "SELECT DISTINCT " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB) & " as Fecha, "
            sql = sql & " (a.RUC)as ruc, (a.Nombre) as nombre, isnull(a.Codtrans,'FC'), isnull(a.cantTrans,0),"
            sql = sql & " isnull(a.Valor0*-1,0) , isnull(a.Valor12*-1,0), isnull(a.ValorNO12*-1,0), "
            sql = sql & " 0 "
            sql = sql & " From tmp1 a  "
            sql = sql & " order by a.Nombre"
    
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANVentas2010 = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Compraspara Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 4

End Function


Public Sub GrabaGNLogAnulacionN(ByVal CodAccion As String, _
                            ByVal Descripcion As String, _
                            ByVal Modulo, ByVal Trans As String, _
                            ByVal Solicitante As String, ByVal num As String, _
                            ByVal AutoSRI As String, ByVal FechaCadu As String, ByVal transid As Long)
    Dim sql As String, codu As String, n As Long, rs As Recordset
    
    On Error Resume Next
    
    codu = "(Anonimo)"
    
    If Not (gobjUsuarioActual Is Nothing) Then
        codu = gobjUsuarioActual.codUsuario
    End If
    'jeaa 05/04/2005 antes 40
    Descripcion = Left(Descripcion, 200)
    
    sql = "INSERT INTO GNLogAnulacion (trans, CodUsuario,codUsuarioSolicita, "
    sql = sql & " CodAccion,Descripcion,Modulo, Numero, Autorizacion, FechaCaducidad,Transid ) " & _
          " VALUES ('" & Trans & "', '" & codu & "','" & _
                        Solicitante & "','" & _
                         UCase(CodAccion) & "','" & _
                         Descripcion & "','" & _
                         UCase(Modulo) & "','" & _
                         num & "','" & _
                         AutoSRI & "','" & _
                         FechaCadu & "'," & transid & ")" & _
                          ""
    
    Me.Execute sql, True
   
End Sub


'/--------- OBRA
Public Function RecuperaGNObra(key As Variant) As GNObra
    Dim obj As GNObra
    
    Set obj = New GNObra
    Set obj.Empresa = Me
    
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaGNObra = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CreaGNObra() As GNObra
    Dim obj As GNObra
    
    Set obj = New GNObra
    Set obj.Empresa = Me
    Set CreaGNObra = obj
    Set obj = Nothing
End Function


Public Function ListaGNObra(BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    

    sql = "SELECT CodObra,Nombre FROM GNObra "

    sql = sql & " ORDER BY CodObra"

    Set rs = Me.OpenRecordset(sql)
    
    If BandRS Then
        Set ListaGNObra = rs
    Else
        ListaGNObra = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


'/--------------- ZONA
Public Function RecuperaGNZona(key As Variant) As GnZona
    Dim obj As GnZona
    
    Set obj = New GnZona
    Set obj.Empresa = Me
    
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaGNZona = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CreaGNZona() As GnZona
    Dim obj As GnZona
    
    Set obj = New GnZona
    Set obj.Empresa = Me
    Set CreaGNZona = obj
    Set obj = Nothing
End Function



Public Function ListaGNZona(BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    

    sql = "SELECT CodZona, Nombre FROM GNZona "
    sql = sql & " ORDER BY CodZona "

    Set rs = Me.OpenRecordset(sql)
    
    If BandRS Then
        Set ListaGNZona = rs
    Else
        ListaGNZona = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ExistenTrans(ByVal CodTrans As String, ByVal NumAutSRI As String) As Boolean
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    sql = "select CodTrans from gncomprobante "
    sql = sql & "where codTrans ='" & CodTrans
    sql = sql & "' and AutorizacionSRI='"
    sql = sql & NumAutSRI & "'"
    Set rs = Me.OpenRecordset(sql)
    
    If rs.RecordCount > 0 Then
        ExistenTrans = True
    Else
        ExistenTrans = False
    End If
    Set rs = Nothing
End Function

Public Function CantidadTrans(ByVal CodComprobante As String) As Integer
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    
    sql = "  select COUNT(CODTRANS) AS CANT "
    sql = sql & "from gntrans"
    sql = sql & " Where BandValida = 1"
    sql = sql & " AND substring(opcion,152,1)='S'"
    sql = sql & " and TipoTrans='" & CodComprobante & "'"
    
    Set rs = Me.OpenRecordset(sql)
    
    If rs.RecordCount > 0 Then
        CantidadTrans = rs.Fields("CANT")
    Else
        CantidadTrans = 0
    End If
    Set rs = Nothing
End Function


Public Function VerificaParaAnulacion(ByVal tid As Long, ByRef cad As String) As Boolean
    Dim sql As String, rs As Recordset, s As String
    VerificaParaAnulacion = True
    sql = "SELECT gc.CodTrans,gc.NumTrans, gc.Estado " & _
          "FROM PCKardex pck INNER JOIN GNComprobante gc " & _
                "ON pck.TransID=gc.TransID " & _
          "WHERE (IdAsignado IN " & _
             "(Select Id From PCKardex pck2 " & _
                "Inner Join GNComprobante gc2 On pck2.TransID=gc2.TransID " & _
                "Where gc2.TransID = " & tid & ")) "
    sql = sql & " AND (gc.Estado <> 3) "
    sql = sql & " AND (gc.TransID <>" & tid & ")"
    
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        Do Until rs.EOF
            s = s & "        " & rs.Fields("CodTrans") & " " & _
                                 rs.Fields("NumTrans")
            If rs.Fields("Estado") = ESTADO_ANULADO Then s = s & " (Anulado)"
            s = s & vbCr
            rs.MoveNext
        Loop
        If Len(s) > 0 Then
            s = Left$(s, Len(s) - 1)
            cad = "No se puede anular la transacción porque tiene cobros o pagos asignados." & vbCr & _
                    "Primero tendrá que anular ó modificar las siguientes transacciones: " & vbCr & vbCr & s

'                Err.Raise ERR_INVALIDO, "Empresa.CambiaEstadoGNComp", _
'                    "No se puede anular la transacción porque tiene cobros o pagos asignados." & vbCr & _
'                    "Primero tendrá que anular ó modificar las siguientes transacciones: " & vbCr & vbCr & s
            'cad = s
            VerificaParaAnulacion = False
        End If
    End If
    rs.Close
    Set rs = Nothing
End Function


Public Function RecuperarIDInventario(cod As String) As Long
    Dim rs As Recordset, sql As String
    RecuperarIDInventario = 0
    sql = "Select IdInventario from IVInventario Where Codinventario = '" & cod & "'"
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        RecuperarIDInventario = rs!IdInventario
    End If
    Set rs = Nothing
End Function

Public Sub ObtieneDatosdelCobroPagoNew(Id As Long, ByRef fecha As Date, ByRef Debe As Currency, ByRef Haber As Currency, ByVal transid As Long)
    Dim sql  As String, rs As Recordset, rs1 As Recordset

   
    
        sql = " select p.id,p.debe, p.haber,"
        sql = sql & " p.FechaVenci "
        sql = sql & " from gncomprobante g"
        sql = sql & " inner join  pckardex p"
        sql = sql & " on p.transid=g.transid"
        sql = sql & " where p.idasignado=" & Id
        sql = sql & " And g.Estado <> 3 " 'And g1.Estado <> 3"
        sql = sql & " AND g.transid<>" & transid
    
    
    
    
    
    Set rs = Me.OpenRecordset(sql)
    
    If rs.RecordCount = 0 Then
    
        sql = " select p.id,p.debe, p.haber,"
        sql = sql & " p.FechaVenci "
        sql = sql & " from gncomprobante g"
        sql = sql & " inner join  pckardex p"
        sql = sql & " on p.transid=g.transid"
        sql = sql & " where p.id=" & Id
        sql = sql & " And g.Estado <> 3 " 'And g1.Estado <> 3"
        sql = sql & " AND g.transid<>" & transid
        Set rs1 = Me.OpenRecordset(sql)
        
        If rs1.RecordCount = 1 Then
            fecha = rs1.Fields("FechaVenci")
            Debe = rs1.Fields("Debe")
            Haber = rs1.Fields("Haber")
        End If
    
    
    ElseIf rs.RecordCount = 1 Then
        fecha = rs.Fields("FechaVenci")
        Debe = rs.Fields("Debe")
        Haber = rs.Fields("Haber")
    ElseIf rs.RecordCount > 1 Then
        sql = " select  top1 p.id,p.debe, p.haber,"
        sql = sql & " g1.Fechatrans  as FechaVenci"
        sql = sql & " from gncomprobante g"
        sql = sql & " inner join  pckardex p"
        sql = sql & " right join pckardex p1"
        sql = sql & " inner join gncomprobante g1"
        sql = sql & " on p1.transid=g1.transid"
        sql = sql & " on p.id=p1.idasignado"
        sql = sql & " on p.transid=g.transid"
        sql = sql & " where p.id=" & Id
        sql = sql & " And g.Estado <> 3 And g1.Estado <> 3"
        sql = sql & " order by g1.Fechatrans desc, g1.horatrans desc"
        Set rs1 = Me.OpenRecordset(sql)
        If rs1.RecordCount = 1 Then
            fecha = rs1.Fields("FechaVenci")
            Debe = rs1.Fields("Debe")
            Haber = rs1.Fields("Haber")
        End If
    End If
End Sub

Public Function CantidadTransxSucursal(ByVal CodComprobante As String, ByVal codsuc As String) As Integer
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    
    sql = "  select COUNT(CODTRANS) AS CANT "
    sql = sql & "from gntrans gt left join gnsucursal gs on gt.idsucursal=gs.idsucursal"
    sql = sql & " Where gt.BandValida = 1"
    sql = sql & " AND substring(opcion,152,1)='S'"
    sql = sql & " AND codsucursal='" & codsuc & "'"
    sql = sql & " and TipoTrans='" & CodComprobante & "'"
    
    Set rs = Me.OpenRecordset(sql)
    
    If rs.RecordCount > 0 Then
        CantidadTransxSucursal = rs.Fields("CANT")
    Else
        CantidadTransxSucursal = 0
    End If
    Set rs = Nothing
End Function

Public Function RecuperaParaAnulacion(ByVal cad As String) As Long
    Dim sql As String, rs As Recordset, s As String
    RecuperaParaAnulacion = 0
    sql = "SELECT gc.Transid "
    sql = sql & " FROM GNComprobante gc "
    sql = sql & " inner join gntrans gn on gc.codtrans=gn.codtrans"
    sql = sql & " WHERE numdocref='" & cad & "'"
    sql = sql & " AND (gc.Estado <> 3) "
    sql = sql & " and AnexoCodTipoComp='18'"
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
            RecuperaParaAnulacion = rs.Fields("TransID")
    End If
    rs.Close
    Set rs = Nothing
End Function

Public Function RecuperaTransAfectadas(ByVal Id As Long) As String
    Dim sql As String, rs As Recordset, s As String, i As Integer, cad As String, num As String
    cad = ""
    
    sql = " Select  NumSerieEstablecimiento + '-' +  NumSeriePunto +'-' as punser, CONVERT(VARCHAR,GAfec.numtrans) as trans "
    sql = sql & " from Gncomprobante G"
    sql = sql & " INNER JOIN pckardex p"
    sql = sql & " INNER JOIN pckardex pAfec"
    sql = sql & " INNER JOIN Gncomprobante GAfec"
    sql = sql & " INNER JOIN GNTRANS gn"
    sql = sql & " ON GAfec.codtrans=gn.codtrans"
    sql = sql & " ON gAfec.transid=pAfec.transid"
    sql = sql & " ON p.idasignado=pafec.id"
    sql = sql & " ON g.transid=p.transid"
    sql = sql & " Where g.TransID =" & Id
    
    Set rs = Me.OpenRecordset(sql)
    
    If Not rs.EOF Then
        For i = 1 To rs.RecordCount
                    num = CStr(rs.Fields("Trans"))
                    While Len(num) < 9
                        num = "0" & num
                    Wend

            cad = cad & rs.Fields("punser") & num & "/"
            rs.MoveNext
        Next i
        cad = Mid$(cad, 1, Len(cad) - 1)
    End If
    RecuperaTransAfectadas = cad
    rs.Close
    Set rs = Nothing
End Function



Public Sub GrabarBandAutorizaActiva_SRI()
    Dim sql As String, i As Integer
    Dim rs As Recordset
    Dim rsaux As Recordset
    Dim rs1 As Recordset
    Dim UltimoNumSec As String
    
    sql = "Update Anexo_Comprobantes  set  BandAutorizaActiva  =1"
'    sql = sql & " WHERE BandAutoImpresor =1"
    Set rsaux = Me.OpenRecordset(sql)
    
    
    Set rsaux = Nothing
  Exit Sub
ErrTrap:
End Sub

Public Function ConsTSPorCobrarPagarVendeMoraSucursalAnti( _
                    ByVal PorCobrar As Boolean, _
                    ByVal CodProvcli As String, _
                    ByVal FechaVenci As Date, _
                    ByVal CodForma As String, _
                    ByVal CodMoneda As String, _
                    ByVal CodGrupo1 As String, _
                    ByVal CodVendedor As String, _
                    ByVal TasaMensual As Currency, _
                    ByVal diasGracia As Integer, _
                    ByVal CodSucursal As String) As Variant
                    
    Dim aux_codpc As String, aux_f1 As Date, aux_f2 As Date
    Dim aux_PorCobrar As Boolean, aux_Cliente As Boolean, aux_Proveedor As Boolean
    Dim aux_CodForma As String, aux_CodMoneda As String, aux_codgrupo As String
    Dim aux_incluircero As Boolean, aux_codVendedor As String, aux_codSucursal As String
    
    
    With gobjMain.objCondicion
        'Conservar valores actuales para que no afecte a otras consultas
        aux_codpc = .CodPC1
        aux_f1 = .fecha1
        aux_f2 = .fecha2
        aux_PorCobrar = .PorCobrar
        aux_Cliente = .Cliente
        aux_Proveedor = .Proveedor
        aux_CodForma = .CodForma
        aux_CodMoneda = .CodMoneda
        aux_codgrupo = .CodGrupo
        aux_incluircero = .IncluirCero
        aux_codVendedor = .Usuario1
        aux_codSucursal = .Sucursal
        .PorCobrar = PorCobrar
        .Cliente = True
        .Proveedor = True
        .CodPC1 = CodProvcli
        .fecha1 = Me.GNOpcion.FechaInicio
        .fecha2 = FechaVenci
        .CodForma = CodForma
        .CodMoneda = CodMoneda
        .CodGrupo = CodGrupo1
        .IncluirCero = False
        .Usuario1 = CodVendedor
        .NumDias1 = diasGracia
        .TasaMensual = TasaMensual
        .NumDias2 = IIf(Len(Me.GNOpcion.ObtenerValor("NumDecimales")) > 0, Me.GNOpcion.ObtenerValor("NumDecimales"), 2)
        .Sucursal = CodSucursal
        
        Set ConsTSPorCobrarPagarVendeMoraSucursalAnti = ConsTSPorCobrarPagarVendedorMoraSucursalAnti()
        
        'Recuperar valores reservados
        .CodPC1 = aux_codpc
        .fecha1 = aux_f1
        .fecha2 = aux_f2
        .PorCobrar = aux_PorCobrar
        .Cliente = aux_Cliente
        .Proveedor = aux_Proveedor
        .CodForma = aux_CodForma
        .CodMoneda = aux_CodMoneda
        .CodGrupo = aux_codgrupo
        .IncluirCero = aux_incluircero
        .Usuario1 = aux_codVendedor
        .Sucursal = aux_codSucursal
        
    End With
End Function


Public Function ConsTSPorCobrarPagarVendedorMoraSucursalAnti() As Variant
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim objCond As Condicion
    
    Set objCond = gobjMain.objCondicion
    
    'Si no está especificada la moneda, coge la Moneda predeterminada
    If Len(objCond.CodMoneda) = 0 Then objCond.CodMoneda = MONEDA_PRE
    numMoneda = Me.GNOpcion.IndiceMoneda(objCond.CodMoneda)
    
    sql = "spConsTSPorCobrarPagarVendedorMoraSucursalAnti " & numMoneda & ", " & _
                objCond.CodMoneda & "," & _
                CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                CadenaBool(objCond.Cliente, TipoDB) & "," & _
                CadenaBool(objCond.Proveedor, TipoDB) & "," & _
                FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                objCond.CodPC1 & "','" & _
                objCond.CodPC1 & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodGrupo & "','" & _
                objCond.Usuario1 & "','" & _
                objCond.Usuario1 & "'," & _
                objCond.TasaMensual & "," & _
                objCond.NumDias1 & "," & _
                IIf(Me.GNOpcion.Los100DocCobroPago, 1, 0) & "," & _
                objCond.NumDias2 & ",'" & _
                objCond.Sucursal & "','" & _
                objCond.Sucursal & "'"
     If Me.GNOpcion.ObtenerValor("AplicaCalculoMensual") = "1" Then
        sql = sql & " ,0 "
     Else
        sql = sql & " ,1 "
     End If
                
    Set rs = Me.OpenRecordset(sql)
    Set ConsTSPorCobrarPagarVendedorMoraSucursalAnti = rs
    Set rs = Nothing
    Set objCond = Nothing
End Function

'AUC 06/04/2010
Public Function ConsTSPorCobrarPagarVendeSucursal( _
                    ByVal PorCobrar As Boolean, _
                    ByVal CodProvcli As String, _
                    ByVal FechaVenci As Date, _
                    ByVal CodForma As String, _
                    ByVal CodMoneda As String, _
                    ByVal CodGrupo1 As String, _
                    ByVal CodVendedor As String, _
                    ByVal CodSucursal As String, _
                    ByVal Codelemento As String) As Variant
    Dim aux_codpc As String, aux_f1 As Date, aux_f2 As Date
    Dim aux_PorCobrar As Boolean, aux_Cliente As Boolean, aux_Proveedor As Boolean
    Dim aux_CodForma As String, aux_CodMoneda As String, aux_codgrupo As String
    Dim aux_incluircero As Boolean, aux_codVendedor As String, aux_Empleado As Boolean
    Dim aux_codElemento As String

   With gobjMain.objCondicion
        'Conservar valores actuales para que no afecte a otras consultas
        aux_codpc = .CodPC1
        aux_f1 = .fecha1
        aux_f2 = .fecha2
        aux_PorCobrar = .PorCobrar
        aux_Cliente = .Cliente
        aux_Proveedor = .Proveedor
        aux_Empleado = .Empleado
        aux_CodForma = .CodForma
        aux_CodMoneda = .CodMoneda
        aux_codgrupo = .CodGrupo
        aux_incluircero = .IncluirCero
        aux_codVendedor = .Usuario1
        aux_codElemento = .Codelemento

        .PorCobrar = PorCobrar
        .Cliente = True
        .Proveedor = True
        '.Empleado = True
        
        .CodPC1 = CodProvcli
        .fecha1 = Me.GNOpcion.FechaInicio
        .fecha2 = FechaVenci
        .CodForma = CodForma
        .CodMoneda = CodMoneda
        .CodGrupo = CodGrupo1
        .IncluirCero = False
        .Usuario1 = CodVendedor
        .Sucursal = CodSucursal
        .Codelemento = Codelemento

        Set ConsTSPorCobrarPagarVendeSucursal = ConsTSPorCobrarPagarVendedor()
        
        'Recuperar valores reservados
        .CodPC1 = aux_codpc
        .fecha1 = aux_f1
        .fecha2 = aux_f2
        .PorCobrar = aux_PorCobrar
        .Cliente = aux_Cliente
        .Proveedor = aux_Proveedor
        .Empleado = aux_Empleado
        .CodForma = aux_CodForma
        .CodMoneda = aux_CodMoneda
        .CodGrupo = aux_codgrupo
        .IncluirCero = aux_incluircero
        .Usuario1 = aux_codVendedor
        .Sucursal = CodSucursal
        .Codelemento = Codelemento

   End With
End Function

Public Function VerificaSiPagoIntereses(ByVal Id As Long, numPer As Integer, ByRef transid As Long) As Boolean
Dim rs As Recordset, sql As String
    VerificaSiPagoIntereses = False
    transid = 0
    sql = "select transid "
    sql = sql & " from PCKardexND"
    sql = sql & " where bandvalida=1 and IdFuente=" & Id
    sql = sql & " and periodos=" & numPer

    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        transid = rs.Fields("transid")
        VerificaSiPagoIntereses = True
    End If
    Set rs = Nothing
End Function

Public Function GrabarReferenciaND(ByVal Id As Long, numPer As Integer, transid As Long)
    Dim rs As Recordset, sql As String
        
   sql = "INSERT INTO PCKardexND"
   sql = sql & " (Idfuente,periodos,transid,BandValida)"
    sql = sql & " VALUES (" & Id & "," & numPer & "," & transid & ",1)"
                    
    Me.Execute sql, True
    
    Set rs = Nothing

End Function

Public Function ConsGNTrans2SoloVentas( _
                    Optional ByVal OrdenAscendente As Boolean) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    
    '*** MAKOTO 03/oct/00
    sql = "SELECT"
    If gobjCond.TopN > 0 Then
        sql = sql & " TOP " & gobjCond.TopN
    End If
    
    '*** MAKOTO 05/feb/01 Mod. Aumentado 'NumDocRef' y 'Nombre'
    sql = sql & " TransID, FechaTrans, CodAsiento, vw.CodTrans, NumTrans, " & _
            "NumDocRef, Nombre, vw.Descripcion, CodCentro,Estado FROM vwConsGNTransPrep vw inner join gntrans gnt on vw.codtrans=gnt.codtrans"
    
    'Condición de FechaTrans
    cond = "FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB)
    
    'Condición de CodTrans
    If Len(cond) > 0 Then cond = cond & " AND "
      
    If Len(gobjCond.CodTrans) > 0 Then      'Si está especificado transaccion
        'Si es una sola transaccion
        If InStr(gobjCond.CodTrans, ",") = 0 Then
            cond = cond & "(vw.CodTrans='" & gobjCond.CodTrans & "')"
        'Si está seleccionado varias trans.
        Else
            cond = cond & "(vw.CodTrans IN (" & gobjCond.CodTrans & "))"
        End If
    Else
        'Si no hay condicion de cod.trans, selecciona todas las trans.
        ' que tenga permiso
'        s = gobjMain.GrupoActual.PermisoActual.ListaTrans(True)
'        If Len(s) > 0 Then
'            cond = cond & "(CodTrans " & s & ")"
'        Else
'            cond = cond & "(CodTrans = '-------')"    'Para que NO devuelva nada si no tiene ningún permiso  '*** MAKOTO 26/dic/00
'        End If
        cond = cond & " AnexoCodTipoComp = 18 "
    End If
    
    'Condición de NumTrans
    If (gobjCond.NumTrans1 > 0) And (gobjCond.NumTrans2 > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans BETWEEN " & gobjCond.NumTrans1 & " AND " & gobjCond.NumTrans2 & ")"
    ElseIf gobjCond.NumTrans1 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans>=" & gobjCond.NumTrans1 & ")"
    ElseIf gobjCond.NumTrans2 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans<=" & gobjCond.NumTrans2 & ")"
    End If
    
    'Condición de Estado
    If gobjCond.EstadoBool(ESTADO_NOAPROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_NOAPROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_APROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_APROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_DESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_DESPACHADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_ANULADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_ANULADO & ")"
    End If
    '----------------------------------------
    '----- CAO 13/06/2006
    '-----------------------------------------
    If gobjCond.EstadoBool(ESTADO_SEMDESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_SEMDESPACHADO & ")"
    End If
    
    If Len(gobjCond.CodCentro1) > 0 And Len(gobjCond.CodCentro2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " codCentro between '" & gobjCond.CodCentro1 & "' and '" & gobjCond.CodCentro2 & "'"
    End If
    
    
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond

    
    'Ordern de filas
    If OrdenAscendente Then
'        sql = sql & " ORDER BY FechaTrans, TransID"         '*** MAKOTO 03/oct/00 Modificado para que salga más actual al primero
        sql = sql & " ORDER BY FechaTrans, HoraTrans, TransID"         '*** MAKOTO 07/dic/00 Modificado para HoraTrans
    Else
'        sql = sql & " ORDER BY FechaTrans DESC, TransID DESC"
        sql = sql & " ORDER BY FechaTrans DESC, HoraTrans DESC, TransID DESC"       '*** MAKOTO 07/dic/00 HoraTrans agregado
    End If
    
    Set rs = Me.OpenRecordset(sql)
    Set ConsGNTrans2SoloVentas = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta General " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function


Public Function ConsCTBalancePyGComparativo() As Variant
End Function

Public Function ConsCTBalanceComparativo(Optional ByVal bandBalance As Boolean) As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim v As Variant, v2() As Variant, i As Long, j As Long, numReg As Long
    Dim mes As Long, MesFin As Integer
    Dim MesB As Long, MesBFin As Integer
    
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    
'/*-------------------------------------------------
 '* Filtrar solo los asientos que est n dentro del rango fecha 1
 '--------------------------------------------------*/
    
sql = " SELECT"
sql = sql & " CT.CodCuenta,"
sql = sql & " Debe/Cotizacion2 as Debe0,"
sql = sql & " Haber/Cotizacion2 AS Haber0,"
sql = sql & " 0 AS Saldo"
sql = sql & " Into tmp" & 1
sql = sql & " FROM " & gobjCond.NomCliente & ".dbo.CTCuenta CT INNER JOIN (" & gobjCond.NomCliente & ".dbo.GNComprobante GNC"
sql = sql & " INNER JOIN " & gobjCond.NomCliente & ".dbo.CTLibroDetalle CTL"
sql = sql & " ON GNC.CodAsiento = CTL.CodAsiento)"
sql = sql & " ON CT.IdCuenta = CTL.IdCuenta"
sql = sql & " WHERE "
sql = sql & " GNC.FechaTrans Between " & FechaYMD(gobjCond.fecha1, TipoDB) & " And " & FechaYMD(gobjCond.fecha2, TipoDB)
sql = sql & " AND GNC.Estado  <>3 And GNC.Estado <>0"
If Len(gobjCond.Sucursal) > 0 Then
    sql = sql & "   and idLocal like " & gobjCond.Sucursal
End If
If Len(gobjCond.CodCuenta1) > 0 And Len(gobjCond.CodCuenta2) > 0 Then
    sql = sql & "   CT.CodCuenta Between '" & gobjCond.CodCuenta1 & "' AND '" & gobjCond.CodCuenta2 & "'"
End If
VerificaExistenciaTabla 1
gobjMain.EmpresaActual.EjecutarSQL sql, numReg
    
'/*-------------------------------------------------
 '* Filtrar solo los asientos que est n dentro del rango fecha 2
 '--------------------------------------------------*/
    
    
sql = " SELECT"
sql = sql & " CTCuenta.CodCuenta,"
sql = sql & " Debe/Cotizacion2 as Debe0,"
sql = sql & " Haber/Cotizacion2 AS Haber0,"
sql = sql & " 0 AS Saldo"
sql = sql & " Into tmp" & 2
sql = sql & " FROM CTCuenta INNER JOIN (GNComprobante"
sql = sql & " INNER JOIN CTLibroDetalle"
sql = sql & " ON GNComprobante.CodAsiento = CTLibroDetalle.CodAsiento)"
sql = sql & " ON CTCuenta.IdCuenta = CTLibroDetalle.IdCuenta"
sql = sql & " WHERE "
sql = sql & " GNComprobante.FechaTrans Between " & FechaYMD(gobjCond.Hora1, TipoDB) & " And " & FechaYMD(gobjCond.Hora2, TipoDB)
sql = sql & " AND GNComprobante.Estado  <>3 And GNComprobante.Estado <>0"
If Len(gobjCond.Sucursal) > 0 Then
    sql = sql & "   and idLocal like " & gobjCond.Sucursal
End If
If Len(gobjCond.CodCuenta1) > 0 And Len(gobjCond.CodCuenta2) > 0 Then
    sql = sql & "   CTCuenta.CodCuenta Between '" & gobjCond.CodCuenta1 & "' AND '" & gobjCond.CodCuenta2 & "'"
End If


VerificaExistenciaTabla 2
gobjMain.EmpresaActual.EjecutarSQL sql, numReg
    
'/*-------------------------------------------------
' * Calcular la suma por cuenta rango fecha 1
' --------------------------------------------------*/
    
sql = " SELECT"
sql = sql & " tmp1.CodCuenta,"
sql = sql & " Sum(tmp1.Debe0) AS Debe, Sum(tmp1.Haber0) AS Haber"
sql = sql & " INTO tmp" & 11
sql = sql & " FROM tmp1"
sql = sql & " GROUP BY tmp1.CodCuenta"
    
VerificaExistenciaTabla 11
gobjMain.EmpresaActual.EjecutarSQL sql, numReg

'/*-------------------------------------------------
' * Calcular la suma por cuenta rango fecha 2
' --------------------------------------------------*/
    
sql = " SELECT"
sql = sql & " tmp2.CodCuenta,"
sql = sql & " Sum(tmp2.Debe0) AS Debe, Sum(tmp2.Haber0) AS Haber"
sql = sql & " INTO tmp" & 22
sql = sql & " FROM tmp2"
sql = sql & " GROUP BY tmp2.CodCuenta"
    
VerificaExistenciaTabla 22
gobjMain.EmpresaActual.EjecutarSQL sql, numReg


 '/*-------------------------------------------------
' * Devolver en formato de Balance/Estado P.G.
' --------------------------------------------------*/
 sql = " SELECT"
sql = sql & " ct.IdCuenta,"
sql = sql & " ct.CodCuenta,"
sql = sql & " ct.NombreCuenta, "
sql = sql & " CTL.Nombre, ct.BandTotal, "
sql = sql & " isnull(cs.Debe,0) - isnull(cs.Haber,0) AS Valor,"
sql = sql & " isnull(cs2.Debe,0) - isnull(cs2.Haber,0) AS Valor2,"
sql = sql & " abs(isnull(cs.Debe,0) - isnull(cs.Haber,0) ) - abs(isnull(cs2.Debe,0) - isnull(cs2.Haber,0)) AS Diferencia ,"
sql = sql & " case when (isnull(cs.Debe,0) - isnull(cs.Haber,0))<>0 then ((abs(isnull(cs.Debe,0) - isnull(cs.Haber,0) ) - abs(isnull(cs2.Debe,0) - isnull(cs2.Haber,0)))/ (isnull(cs.Debe,0) - isnull(cs.Haber,0))) else 0 end AS PorDiferencia ,"
sql = sql & " ct.Nivel,"
sql = sql & " ct.IdCuentaSuma,"
sql = sql & " ct.TipoCuenta,"
sql = sql & " ct.BandTotal,"
sql = sql & " isnull(ct.ValPresupuesto,0) as Presupuesto, "
sql = sql & " isnull(isnull(ct.ValPresupuesto,0)-abs( isnull(cs2.Debe,0) - isnull(cs2.Haber,0)) ,0)   as Saldo,"
sql = sql & " case when isnull(isnull(ct.ValPresupuesto,0)-abs( isnull(cs2.Debe,0) - isnull(cs2.Haber,0)) ,0)>0 then"
sql = sql & " case when  ct.ValPresupuesto <>  0 then abs(isnull(isnull(ct.ValPresupuesto,0)-abs( isnull(cs2.Debe,0) - isnull(cs2.Haber,0)) ,0))  / isnull(ct.ValPresupuesto,0) end else 0 end as PorSaldo"
sql = sql & " FROM CTLocal ctl"
sql = sql & " right join CTcuenta ct"
sql = sql & " left JOIN tmp11 cs "
sql = sql & " full JOIN tmp22 cs2 "
sql = sql & " ON cs.CodCuenta = cs2.CodCuenta"
sql = sql & " ON ct.CodCuenta = cs.CodCuenta or ct.CodCuenta = cs2.CodCuenta"
sql = sql & " on ct.idlocal=ctl.IDLocal"
'sql = sql & " where ((isnull(cs.Debe,0) - isnull(cs.Haber,0) )<> 0) or ((isnull(cs2.Debe,0) - isnull(cs2.Haber,0))<>0) or ct.BandTotal=1"
If Not gobjCond.IncluirCero Then
    sql = sql & " where ct.BandTotal=" & 0
End If



sql = sql & " ORDER BY ct.CodCuenta"

rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
UltimoRecordset rs
If Not rs.EOF Then v = rs.GetRows()
    
    'Mayoriza los valores
    MayorizaComparativo v, 7

    'Pasa los valores de v a v2 cambiando formato
    ' y filtrando registros por TipoCuenta, Nivel y Valor
    j = 0
    For i = 0 To UBound(v, 2)
'        If Not IsNull(v(BAL_VALOR + 1, i)) Or Not IsNull(v(BAL_VALOR + 2, i)) Then
            'Solo los que tengan valor diferente de 0
'            If v(BAL_VALOR + 1, i) <> 0 Or v(BAL_VALOR + 2, i) <> 0 Then
                'Si es para balance, solo tipo 1,2 y 3, sino solo tipo 4 y 5
                If (bandBalance And (v(BAL_TIPO + 4, i) <= 3)) Or _
                   ((Not bandBalance) And (v(BAL_TIPO + 4, i) >= 4)) Then
                   
                   'Solo hasta el nivel indicado
                   If v(BAL_NIVEL + 4, i) <= gobjCond.Nivel Then
                        ReDim Preserve v2(13, j)
                        v2(0, j) = v(BAL_TIPO + 4, i)         'TipoCuenta
                        v2(1, j) = v(BAL_CODCUENTA, i)      'CodCuenta
                        v2(2, j) = v(BAL_NOMBRECUENTA, i)   'Cuenta
                        v2(3, j) = v(BAL_CODSUCURSAL, i)          'CODSUCURSAL   JEAA 16/01/04
                        v2(4, j) = IIf(v(4, i), 1, 0)  'Cuenta de total
                        v2(5, j) = v(BAL_VALOR + 1, i)        'Valor
                        If Not bandBalance Then v2(5, j) = v2(5, j) * -1    'Invierta el signo cuando es EstadoPG
                        v2(6, j) = v(BAL_VALOR + 2, i)        'Valor
                        If Not bandBalance Then v2(6, j) = v2(6, j) * -1    'Invierta el signo cuando es EstadoPG
                        v2(7, j) = v(BAL_VALOR + 3, i)        'diferencia
                        If Not bandBalance Then v2(7, j) = v2(7, j) * -1    'Invierta el signo cuando es EstadoPG
                        v2(8, j) = v(BAL_VALOR + 4, i)      ' % diferencia
                        v2(9, j) = v(BAL_VALOR + 9, i)          'Presupuesto
                        v2(10, j) = v(BAL_VALOR + 10, i)          'Presupuesto
                        v2(11, j) = v(BAL_VALOR + 11, i)          'Presupuesto
                        v2(12, j) = v(BAL_NIVEL + 4, i)          'Presupuesto
                        j = j + 1
                    End If
                End If
'            End If
'        End If
    Next i

    If j Then ConsCTBalanceComparativo = v2
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Balance Comparativo", "CT"
End Function

Private Sub MayorizaComparativo(ByRef v As Variant, Nivel As Integer)
    Dim i As Integer, nmax As Integer, j As Long
    Dim num As Integer
    Const INTER = 6
#If DAOLIB Then
    nmax = ObtieneMax(mdbEmpresa, "CTCuenta", "Nivel")
#Else
    nmax = ObtieneMaxconNivel(mcnEmpresa, "CTCuenta", "Nivel", Nivel)
#End If
    'Desde el nivel inferior hacia el nivel superior
    For num = 0 To Nivel
       For i = nmax To 0 Step -1
            For j = 0 To UBound(v, 2)
                If (v(BAL_NIVEL + 3, j) = i) And (v(BAL_BANDTOTAL + 4, j) = True) Then
                    v(BAL_VALOR + 1, j) = SumaHijosComparativo(v, j, 1)
                    v(BAL_VALOR + 2, j) = SumaHijosComparativo(v, j, 2)
                    v(BAL_VALOR + 9, j) = SumaHijosComparativo(v, j, 9)
                End If
            
            Next j
        Next i
  Next num
End Sub

Private Function SumaHijosComparativo(ByRef v As Variant, ByVal j As Long, ByVal mes As Integer) As Currency
    Dim i As Long, t As Currency
    Dim col_val As Integer
    col_val = 4 + (mes)
    'Busca todos los hijos de la cuenta indicada por j
    ' saca la suma total de los hijos en t
    
    For i = 0 To UBound(v, 2)
'        If v(1, i) = "411" Then MsgBox "hola"
        'Si IdCuentaSuma es igual a IdCuenta de j, es hijo de la cuenta j
        If v(10, i) = v(BAL_IDCUENTA, j) Then
            If Not IsNull(v(col_val, i)) Then t = t + v(col_val, i)
        End If
    Next i
    SumaHijosComparativo = t
End Function

Public Function ListaGNEmpresas(ByVal Main As String, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
    sql = "SELECT NombreDB ,CodEmpresa, Descripcion"
    
    sql = sql & " FROM " & Main & ".dbo.vwMain "
    If Len(gobjUsuarioActual.codUsuario) > 0 Then
        sql = sql & "WHERE CodUsuario='" & gobjUsuarioActual.codUsuario & "' "
    Else
        sql = sql & "CodUsuario"
    End If
    sql = sql & " ORDER BY  CodEmpresa"
    
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaGNEmpresas = rs
    Else
        ListaGNEmpresas = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ConsCTKardexxTrans() As Variant
    Dim sql As String, cond As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsCTLibroMayor")
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    qdef.Parameters("CodCuenta1") = IIf(Len(gobjCond.CodCuenta1) = 0, "0", gobjCond.CodCuenta1)
    qdef.Parameters("CodCuenta2") = IIf(Len(gobjCond.CodCuenta2) = 0, "99999999999999999999", gobjCond.CodCuenta2)
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    'jeaa 07/04/2005
    qdef.Parameters("CodTrans") = gobjCond.CodTrans
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient

    If Me.GNOpcion.ObtenerValor("PermitirDistribucionGastos") = "1" Then
        If Len(gobjCond.Sucursal) > 0 Then
            sql = "spConsCTLibroMayorxGasto "
        Else
            sql = "spConsCTLibroMayorxtrans "
        End If
    Else
        sql = "spConsCTLibroMayorxtrans "
    End If
    sql = sql & gobjCond.numMoneda & ",'" & _
                gobjCond.CodCuenta1 & "','" & _
                gobjCond.CodCuenta2 & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB) & ",'" & gobjCond.Sucursal & "','" & _
                gobjCond.CodTrans & "'" ' jeaa 17-01-04 para filtrado por sucursal y por trans

    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    Set ConsCTKardexxTrans = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Libro Mayor xTrans" & gobjCond.fecha1 & "-" & gobjCond.fecha2, "CT"
End Function


'AUC kardex por cliente
Public Function ConsIVKardexPorCliente() As Variant
    Dim sql As String, cond As String, rs As Recordset
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsIVKardexPorClient") 'spConsIVKardexPorCliente
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("prmCodBodega") = gobjCond.CodBodega1
    qdef.Parameters("CodItem1") = IIf(Len(gobjCond.CodItem1) = 0, "!", gobjCond.CodItem1)
    qdef.Parameters("CodItem2") = IIf(Len(gobjCond.CodItem2) = 0, String$(20, "z"), gobjCond.CodItem2)
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    sql = "spConsIVKardexPorCliente " & gobjCond.numMoneda & ",'" & gobjCond.CodBodega1 & "','" & gobjCond.CodItem1 & "','" & gobjCond.CodItem2 & "'," & FechaYMD(gobjCond.fecha1, TipoDB) & "," & FechaYMD(gobjCond.fecha2, TipoDB) & ",'" & gobjCond.Usuario1 & "'" & ",'" & gobjCond.Usuario2 & "'"
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    Set ConsIVKardexPorCliente = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Kardex inv. por cliente " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "IV"
End Function

'AUC PARA EL HISTORIAL
Public Function PendienteItemDevolver(ByVal IdProvcli As Long, ByVal gn As GNComprobante) As Variant
    Dim sql As String
    Dim rs As Recordset
    Dim v As Variant, i As Long, s As String, CodT As String
    Dim cond As String
    If IdProvcli > 0 Then
    If Len(gn.GNTrans.TransHistorial) > 0 Then
        'Puede tener varios codigos de transaccion de fuente    ejm. (FC);(OF)
        v = Split(gn.GNTrans.TransHistorial, ";")
        For i = 0 To UBound(v)
            If Len(s) > 0 Then s = s & ","
            CodT = v(i)
            CodT = Left$(CodT, Len(CodT) - 1)       'Quita el signo ')'
            CodT = Right$(CodT, Len(CodT) - 1)      'Quita el signo '('
            s = s & "'" & CodT & "'"
        Next i
    Else
        Err.Raise ERR_INVALIDO, "Empresa.TransHistorial", _
                    "No está definida ningúna transacción de fuente. "
    End If
        sql = " SELECT Gn.transid,ivk.orden,Gn.codtrans,Gn.numTrans,pc.CodProvCli,pc.Nombre, iv.CodInventario," & _
              " IV.Descripcion,IVBodega.CodBodega, ivk.cantidad " & _
              " FROM (IVGrupo1 INNER JOIN (IVInventario iv " & _
              " INNER JOIN (GNComprobante Gn " & _
              " INNER JOIN IVKardex ivk  " & _
              " ON GN.TransID = IVK.TransID " & _
              " inner join pcprovcli pc  on pc.idprovcli = gn.idclienteref) " & _
              " ON IV.IdInventario = IVK.IdInventario) " & _
              " ON IVGrupo1.IdGrupo1= IV.IdGrupo1)" & _
              " LEFT JOIN FCVendedor ON Gn.IdVendedor =FCVendedor.IdVendedor " & _
              " inner join IVBodega on IvK.Idbodega = IvBodega.Idbodega "
        sql = sql & " WHERE  GN.Estado<>3 AND GN.Estado <> 2 AND ivk.cantidad<0 AND GN.codtrans in (" & s & " )"
        sql = sql & " AND pc.idprovcli = " & IdProvcli
    Set rs = Me.OpenRecordset(sql)
    Set PendienteItemDevolver = rs
    Set rs = Nothing
    End If
End Function

Public Function transid(ByVal CodTrans As String, ByVal NumTrans As Long) As Long
Dim sql As String, rs As Recordset
On Error GoTo CapturaError
        sql = "Select transid from gncomprobante where codtrans =  '" & CodTrans & "'  and numtrans = " & NumTrans
        Set rs = Me.OpenRecordset(sql)
        If Not IsNull(rs!transid) Then transid = rs!transid
        Set rs = Nothing
Exit Function
CapturaError:
Set rs = Nothing
Exit Function
End Function

Public Function VerificaAlquilado(ByVal transid As Long, ByVal IdBodega As Long) As Boolean
Dim sql As String
Dim rs As Recordset
On Error GoTo CapturaError
    sql = "Select * from ivkardex where transid =" & transid & " And idbodega = " & IdBodega
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount <> 0 Then
        VerificaAlquilado = True
    End If
    Exit Function
CapturaError:
    MsgBox Err.Description
    Exit Function
End Function

Public Sub CambiaEstadoGNCompAlq(transid As Long, value As Byte)
    Dim sql As String, pt As PermisoTrans, CodT As String, gc As GNComprobante
    Dim est As Byte, rs As Recordset, idCentro As Long
    If transid = 0 Then Exit Sub
    'Obtiene CodTrans de la transacción
    sql = "SELECT CodTrans, Estado, IdCentro FROM GNComprobante WHERE TransID=" & transid
    Set rs = Me.OpenRecordset(sql)
    If rs.EOF Then
        Err.Raise ERR_NOHAYCODIGO, "Empresa.CambiaEstadoGNComp", "No se enencuentra la transacción."
    End If
    CodT = rs!CodTrans
    est = rs!Estado                 'Estado actual de la trans.
    idCentro = rs!idCentro
    rs.Close
    'Si no está cambiando no hace nada
    If est = value Then Exit Sub
    'Recupera el permiso para la transacción
    Set pt = gobjMain.GrupoActual.PermisoActual.Trans(CodT)
    If Not pt Is Nothing Then
        Select Case value
        Case ESTADO_APROBADO
            If Not pt.Aprobar Then _
                    Err.Raise ERR_NODERECHO, "Empresa.CambiaEstadoGNComp", MSGERR_NODERECHO
            If est = ESTADO_ANULADO Then
                    Err.Raise ERR_NODERECHO, "Empresa.CambiaEstadoGNComp", _
                        "No se puede aprobar porque el comprobante está anulado." & vbCr & _
                        "Primero recupérelo y luego intente de nuevo."
            End If
            Set gc = RecuperaGNComprobante(transid)
            'Verifica si está cuadrado el asiento
            If Not gc.Cuadrado Then
                Set gc = Nothing
                Err.Raise ERR_INVALIDO, "Empresa.CambiaEstadoGNComp", _
                        "No se puede aprobar mientras el asiento está descuadrado." & vbCr & _
                        "Primero debería modificarlo para que esté cuadrado el asiento."
            End If
        Case ESTADO_NOAPROBADO
            If Not pt.Desaprobar Then Err.Raise ERR_NODERECHO, "Empresa.CambiaEstadoGNComp", MSGERR_NODERECHO
            If est = ESTADO_ANULADO Then
'                    Err.Raise ERR_NODERECHO, "Empresa.CambiaEstadoGNComp", _
'                        "No se puede desaprobar porque el comprobante está anulado." & vbCr & _
'                        "Primero recupérelo y luego intente de nuevo."
            End If
        Case ESTADO_DESPACHADO
            If Not pt.Despachar Then Err.Raise ERR_NODERECHO, "Empresa.CambiaEstadoGNComp", MSGERR_NODERECHO
            If est = ESTADO_ANULADO Then
                    Err.Raise ERR_NODERECHO, "Empresa_CambiaEstadoGNComp", _
                        "No se puede despachar porque el comprobante está anulado." & vbCr & _
                        "Primero recupérelo y luego intente de nuevo."
            End If
        Case ESTADO_ANULADO
            If Not pt.Anular Then Err.Raise ERR_NODERECHO, "Empresa.CambiaEstadoGNComp", MSGERR_NODERECHO
            If est <> ESTADO_NOAPROBADO Then
                    Err.Raise ERR_NODERECHO, "Empresa.CambiaEstadoGNComp", _
                        "No se puede anular porque el comprobante ya está aprobado o despachado." & vbCr & _
                        "Primero desapruébelo y luego intente de nuevo."
            End If
        End Select
    Else
        Err.Raise ERR_NODERECHO, "Empresa.CambiaEstadoGNComp", MSGERR_NODERECHO
    End If
    '*** MAKOTO 24/nov/00 Agregado
    'Verifica si la trans. tiene cobros/pagos asignados y quiere anular
    If value = ESTADO_ANULADO Then
        VerificaAnulacion transid, True
    End If
    If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("PermiteControlAspectosAnexos") = "1" Then
        'Verifica si la trans. tiene anexos
        If value = ESTADO_ANULADO Then
            VerificaAnulacionAnexos transid, True
        End If
    End If
    '*** MAKOTO 11/dic/00 Agregado
    'Verifica si existe trans. asignado que están anulada, si es que sí no permite recuperar
    If value = ESTADO_NOAPROBADO Then
        VerificaRecuperacion transid
    End If
#If DAOLIB Then
    gobjWS.BeginTrans           '================= Comienza la transacción
#Else
    mcnEmpresa.BeginTrans       '================= Comienza la transacción
#End If
    On Error GoTo ErrTrap
    '*** MAKOTO 13/oct/00 Agregado
    If value = ESTADO_APROBADO Then
        'Desaprueba otras transacciones del mismo C.Costo
        'si es que está configurado 'Aprobación única'
        ProcAprobacionUnica CodT, idCentro
    End If
    'Si cambia a anulado y antes no estaba anulado
    If value = ESTADO_ANULADO Then
        If gc Is Nothing Then Set gc = RecuperaGNComprobante(transid)
        'Actualiza la existencia de inventario (Devuelve)
        'gc.ActualizaCantidad "-"
        'auc 12/06/2006
        If gc.GNTrans.IVTipoTrans <> "A" Then 'pregunto que si esta anulando una reservacion no hace nada
            gc.ActualizaCantidad "-"
        End If
         'AUC borra la reservacion dela tabla ivresrevacion
         If gc Is Nothing Then Set gc = RecuperaGNComprobante(transid)
           If gc.GNTrans.IVTipoTrans = "A" Or gc.GNTrans.IVTipoTrans = "E" Then
             sql = "DELETE FROM ivreservacion WHERE TransID=" & gc.transid
             Me.Execute sql, True
           End If
    'Si cambia a diferente de anulado y antes estaba anulado
    ElseIf est = ESTADO_ANULADO Then
        If gc Is Nothing Then Set gc = RecuperaGNComprobante(transid)
        'Actualiza a existencia de inventario (Suma)
        gc.ActualizaCantidad "+"
    End If
    'Si no hay problema en permisos, cambia el estado
    sql = "UPDATE GNComprobante SET Estado=" & value & _
          " WHERE TransID=" & transid
    Me.Execute sql, True
    'AUC 14/11/007 Cambia el estado del Historial de clientes
    If VerificaExisteHistorial(transid) Then
        sql = "UPDATE PCHistorial SET Estado =" & value & _
              " WHERE TransID=" & transid
        Me.Execute sql, True
    End If
    'Graba en GNLogAccion para utilizarlo como historial
    If value = ESTADO_ANULADO Then           '*** ANGEL 23/mar/02
        Me.GrabaGNLogAccion "ANU_TRANS", "Transacción Anulada " & _
                                                         gc.CodTrans & gc.NumTrans, "GN"
    End If
'*** MAKOTO 15/dic/00   Eliminado por que no debería cambiar el codusuario
'                       Sólo por que cambió el estado. Sobre todo cuando despacha(importa)
'    'Modifica Codigo de usuario del comprobante
'    sql = "UPDATE GNComprobante SET CodUsuario='" & _
'                gobjMain.UsuarioActual.CodUsuario & "' " & _
'          " WHERE TransID=" & TransID
'    Me.Execute sql, True
#If DAOLIB Then
    gobjWS.CommitTrans          '============ Completa la transacción
#Else
    mcnEmpresa.CommitTrans      '============ Completa la transacción
#End If
    Exit Sub
ErrTrap:
#If DAOLIB Then
    gobjWS.Rollback             '============ Anula la transacción
#Else
    mcnEmpresa.RollbackTrans    '============ Anula la transacción
#End If
    Err.Raise Err.Number, Err.Source, Err.Description
    Exit Sub
End Sub

'AUC agregado 2010 enero
Private Sub VerificaRecuperacionAlq(ByVal tid As Long)
    Dim sql As String, rs As Recordset, s As String
    sql = "SELECT gc.CodTrans,gc.NumTrans, gc.Estado " & _
          "FROM IVKardex ivk INNER JOIN GNComprobante gc " & _
                "ON ivk.TransID=gc.TransID " & _
          "WHERE (ivk.IdPadre IN " & _
             "(Select ivk2.Idpadre From ivKardex ivk2 " & _
                "Inner Join GNComprobante gc2 On ivk2.TransID=gc2.TransID " & _
                 "Where ivk2.IDPadre = " & tid & " And GC2.estado <> 3 )) AND ivk.cantidad > 0 "

   Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        Do Until rs.EOF
            s = s & "        " & rs.Fields("CodTrans") & " " & _
                                 rs.Fields("NumTrans")
            If rs.Fields("Estado") = ESTADO_ANULADO Then s = s & " (Anulado)"
            s = s & vbCr
            rs.MoveNext
        Loop
        If Len(s) > 0 Then
            s = Left$(s, Len(s) - 1)
            Err.Raise ERR_INVALIDO, "Empresa.CambiaEstadoGNComp", _
                "No se puede Anular la transacción porque uno o más de " & _
                "los documentos asignados No están anulados." & vbCr & _
                "Primero tendrá que Anular las siguientes transacciones: " & vbCr & vbCr & s
        End If
   End If
    rs.Close
    Set rs = Nothing
End Sub

Public Function VerificaDevueltos(ByVal transid As Long, ByVal IdPadreSub As Integer, ByVal CodInventario As String, ByVal FechaCorte As Date) As Currency
Dim sql As String
Dim rs As Recordset
Dim IdTrans As Long
Dim Cantidad As Currency
On Error GoTo CapturaError
    sql = "Select ivk.* from ivkardex ivk inner join ivinventario iv on iv.idinventario = ivk.idinventario" & _
          " inner join gncomprobante gn inner join gntrans gnt on gnt.codtrans = gn.codtrans on gn.transid = ivk.transid " & _
       " WHERE gn.estado <> 3 AND idpadre = " & transid & " AND cantidad < 0 AND iv.codinventario = '" & CodInventario & "' AND idpadresub= " & IdPadreSub
    sql = sql & " AND gnt.afectacantidad = 1"
 Set rs = Me.OpenRecordset(sql)
    Do While Not rs.EOF
        IdTrans = rs!transid
        IdPadreSub = rs!IdPadreSub
        Cantidad = Cantidad + CantidadDevuelta(transid, IdTrans, CodInventario, FechaCorte, IdPadreSub)
        rs.MoveNext
    Loop
    VerificaDevueltos = Cantidad
    Exit Function
CapturaError:
    MsgBox Err.Description
    Exit Function
End Function

Private Function CantidadDevuelta(ByVal TransIdFuente As Long, ByVal transid As Long, ByVal CodInventario As String, ByVal FechaCorte As Date, ByVal IdPadreSub As Integer) As Currency
Dim sql As String
Dim cant As Currency
Dim rs As Recordset
On Error GoTo CapturaError
        sql = "Select ivk.cantidad from ivkardex ivk INNER JOIN GNCOMPROBANTE GN ON GN.TRANSID = IVK.TRANSID inner join ivinventario iv on iv.idinventario = ivk.idinventario "
        sql = sql & "RIGHT join gnfuente gnf on gn.transid = gnf.transid "
        sql = sql & "WHERE ivk.cantidad < 0 AND IVK.TRANSID = " & transid & " AND IV.Codinventario = '" & CodInventario & "'"
        sql = sql & " AND gn.estado <> 3 AND ivk.idpadre = " & TransIdFuente
        sql = sql & " AND ivk.idpadresub = " & IdPadreSub
        sql = sql & " OR (gn.idTransFuente = " & TransIdFuente & " AND gnf.idfuentes = '%" & TransIdFuente & "')"
        sql = sql & "AND GN.FECHATRANS < = '" & FechaCorte & "'"
        Set rs = Me.OpenRecordset(sql)
        Do While Not rs.EOF
            cant = cant + rs!Cantidad
        rs.MoveNext
        Loop
        CantidadDevuelta = cant
   Exit Function
CapturaError:
    MsgBox Err.Description
    Exit Function
End Function
'AUC
Public Function ObtenerCostoMasAlto( _
                    ByVal cod As String, _
                    ByVal numMoneda As Integer, _
                    ByVal BandSoloIngreso As Boolean) As Currency
    Dim sql As String, rs As Recordset, cot As String
    cot = "1"
    If numMoneda <> 1 Then cot = "Cotizacion" & numMoneda
    sql = "SELECT max(ivk.CostoRealTotal/ivk.Cantidad/" & cot & ") AS CU " & _
          "FROM IVInventario iv INNER JOIN " & _
                    "(GNTrans gt INNER JOIN " & _
                        "(GNComprobante gc INNER JOIN IVKardex ivk " & _
                        "ON gc.TransID = ivk.TransID) " & _
                    "ON gt.CodTrans = gc.CodTrans) " & _
                "ON iv.IdInventario = ivk.IdInventario "
    sql = sql & "WHERE (iv.CodInventario='" & cod & "') " & _
            " AND (gc.FechaTrans<=" & FechaYMD(Date, gobjMain.EmpresaActual.TipoDB) & ") " & _
            " AND (gc.Estado<>" & ESTADO_ANULADO & ") " & _
            " AND (gt.AfectaCantidad=" & CadenaBool(True, gobjMain.EmpresaActual.TipoDB) & ") "
    '*** MAKOTO 09/feb/01 Mod. para que saque ultimo costo promedio en caso de que llama desde CostoProm
    If BandSoloIngreso Then sql = sql & " AND (ivk.Cantidad>0) "
    'sql = sql & " ORDER BY gc.FechaTrans DESC, gc.HoraTrans DESC, gc.TransID DESC "
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        If Not IsNull(rs.Fields("CU")) Then ObtenerCostoMasAlto = rs.Fields("CU")
    End If
    rs.Close
    Set rs = Nothing
End Function


Public Sub AbrirSinAuditoria()
    Dim s As String
    
    '*** MAKOTO 22/dic/00
    AbrirSoloConeccion

    'Asigna a la variable global
    Set gobjEmpresaActual = Me
    
End Sub

Public Sub CerrarSinAuditoria()
    Dim bandCompact As Boolean
#If DAOLIB Then
    If Not mdbEmpresa Is Nothing Then
    
#Else
    If mcnEmpresa.State <> adStateClosed Then
#End If
        'Graba un registro en GNLogAccion
        
        mbooCompact = NecesarioCompactar        'Para compactar en Class_Terminate
        
        'Cierra la conección con la empresa
#If DAOLIB Then
        On Error Resume Next
        mdbEmpresa.Close
        Set mdbEmpresa = Nothing
        Err.Clear
        On Error GoTo 0
        
#Else
        mcnEmpresa.Close
#End If
        
        If gobjEmpresaActual Is Me Then
            'Asigna a Nothing la variable global
            Set gobjEmpresaActual = Nothing
        End If
        
    End If
    Set mProps.objSiiMain = Nothing
End Sub

'
Public Function CalculaValorDetalleEfectivo(ByVal transid As Long) As Currency
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    
    sql = "  select ISNULL(Sum(Cantidad * Valor),0) AS Valor "
    sql = sql & "from TSDetalleEfectivo"
    sql = sql & " Where Transid = " & transid
    
    Set rs = Me.OpenRecordset(sql)
    
    If rs.RecordCount > 0 Then
        CalculaValorDetalleEfectivo = rs.Fields("Valor")
    Else
        CalculaValorDetalleEfectivo = 0
    End If
    Set rs = Nothing
End Function

Public Function ListaIVBancoParaFlexGrid(ByVal BandValida As Boolean) As String
    Dim sql As String, s As String
    Dim rs As Recordset
    
    sql = "SELECT CodBanco,Descripcion FROM IVBanco "
    If BandValida Then
        sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY CodBanco"

    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 10 + 40)         '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|", "(nulo)")
#End If
    ListaIVBancoParaFlexGrid = s
    rs.Close
    Set rs = Nothing
End Function

Public Function ListaIvBancoFlexDescripcion( _
                    BandValida As Boolean) As String
    Dim sql As String, s As String, cond As String
    Dim rs As Recordset
    sql = "SELECT Descripcion , CodBanco FROM IVBanco"
    If BandValida Then
        cond = "BandValida=" & CadenaBool(True, Me.TipoDB)
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " ORDER BY Descripcion"
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 20 + 40)         '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    ListaIvBancoFlexDescripcion = s
    rs.Close
    Set rs = Nothing
End Function



Public Function ListaIVTarjetaParaFlexGrid(ByVal BandValida As Boolean) As String
    Dim sql As String, s As String
    Dim rs As Recordset
    
    sql = "SELECT CodTarjeta,Descripcion FROM IVTarjeta "
    If BandValida Then
        sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY CodTarjeta"

    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 10 + 40)         '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|", "(nulo)")
#End If
    ListaIVTarjetaParaFlexGrid = s
    rs.Close
    Set rs = Nothing
End Function


Public Function ListaIvTarjetaFlexDescripcion( _
                    BandValida As Boolean) As String
    Dim sql As String, s As String, cond As String
    Dim rs As Recordset
    sql = "SELECT Descripcion , CodTarjeta FROM IVTarjeta "
    If BandValida Then
        cond = "BandValida=" & CadenaBool(True, Me.TipoDB)
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " ORDER BY Descripcion"
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 20 + 40)         '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    ListaIvTarjetaFlexDescripcion = s
    rs.Close
    Set rs = Nothing
End Function


Public Function CalculaValorDetalleCheque(ByVal transid As Long) As Currency
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    
    sql = "  select ISNULL(Sum(Cantidad * Valor),0) AS Valor "
    sql = sql & "from TSDetalleCheque"
    sql = sql & " Where Transid = " & transid
    
    Set rs = Me.OpenRecordset(sql)
    
    If rs.RecordCount > 0 Then
        CalculaValorDetalleCheque = rs.Fields("Valor")
    Else
        CalculaValorDetalleCheque = 0
    End If
    Set rs = Nothing
End Function

Public Function CalculaValorDetalleTarjeta(ByVal transid As Long) As Currency
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    
    sql = "  select ISNULL(Sum(Cantidad * Valor),0) AS Valor "
    sql = sql & "from TSDetalleTarjeta"
    sql = sql & " Where Transid = " & transid
    
    Set rs = Me.OpenRecordset(sql)
    
    If rs.RecordCount > 0 Then
        CalculaValorDetalleTarjeta = rs.Fields("Valor")
    Else
        CalculaValorDetalleTarjeta = 0
    End If
    Set rs = Nothing
End Function

'AUC FILTRO DE CLIENTES FILTRO X VENDEDOR
Public Function ListaPCProvCliFiltroVen(BandProveedor As Boolean, _
                                    BandCliente As Boolean, _
                                    codPC As String, _
                                    Nombre As String, _
                                    Direccion As String, _
                                    RUC As String, _
                                    CodGrupoDesde As String, _
                                    CodGrupoHasta As String, _
                                    numG As Integer, _
                                    BandSoloValida As Boolean, _
                                    BandRS As Boolean) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset, i As Integer
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If
    sql = "SELECT pc.CodProvCli, pc.Nombre, a.CodTipoDocumento, pc.RUC, TipoProvCli , g1.CodGrupo1, g2.CodGrupo2, g3.CodGrupo3, g4.CodGrupo4 ,pc.observacion  FROM " & _
          " PCGrupo4 g4 RIGHT JOIN (PCGrupo3 g3 RIGHT JOIN (PCGrupo2 g2 RIGHT JOIN (PCGrupo1 g1 RIGHT JOIN PCProvCli pc " & _
            " left join Anexo_TipoDocumento a on pc.IdTipoDocumento  = a.Id" & _
                          " ON g1.IdGrupo1 = pc.IdGrupo1) " & _
                    " ON g2.IdGrupo2 = pc.IdGrupo2) " & _
                " ON g3.IdGrupo3 = pc.IdGrupo3) " & _
                " ON g4.IdGrupo4 = pc.IdGrupo4 " & _
                " inner join fcvendedor v on v.idvendedor = pc.idvendedor "
    If Not (BandProveedor And BandCliente) Then
        If BandProveedor Then
            sql = sql & " WHERE BandProveedor=" & CadenaBool(True, TipoDB)
        Else
            sql = sql & " WHERE v.codvendedor = '" & gobjMain.UsuarioActual.codUsuario & "' AND  BandCliente=" & CadenaBool(True, TipoDB)
        End If
    End If
    If Len(codPC) > 0 Then
        cond = cond & " and (pc.CodProvCli LIKE '" & codPC & comodin & "') "
    End If
    If Len(Nombre) > 0 Then
        cond = cond & " and ((pc.Nombre LIKE '" & Nombre & comodin & "') " & _
                      "OR (pc.Nombre LIKE '" & Nombre & comodin & "')) "
    End If
    If Len(Direccion) > 0 Then
        cond = cond & " and (pc.Direccion1 LIKE '" & Descripcion & comodin & "') "
    End If
    If Len(RUC) > 0 Then
        cond = cond & " and (pc.ruc LIKE '" & RUC & comodin & "') "
    End If
    If Not (Len(CodGrupoDesde) = 0 And Len(CodGrupoHasta) = 0) Then
        cond = cond & " AND (CodGrupo" & numG & " BETWEEN '" & CodGrupoDesde & _
            "' AND '" & CodGrupoHasta & "')"
    End If
    If Len(cond) > 0 Then sql = sql & cond
    sql = sql & " ORDER BY pc.Nombre "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCProvCliFiltroVen = rs
    Else
        ListaPCProvCliFiltroVen = MiGetRows(rs)
        rs.Close
   End If
    Set rs = Nothing
End Function

'AUC kardex pcprovlci por vendedor
Public Function ConsPCKardexVen(ByVal BandProveedor As Boolean, _
                             ByVal BandCliente As Boolean) As Variant
    Dim sql As String, rs As Recordset
    Dim baseMain As String
    baseMain = GetSetting(APPNAME, SECTION, "NombreDBSQL", "")
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsPCKardexPorFechaVen")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodProvCli1") = IIf(Len(gobjCond.CodPC1) = 0, "!", gobjCond.CodPC1)
    qdef.Parameters("CodProvCli2") = IIf(Len(gobjCond.CodPC2) = 0, String$(20, "z"), gobjCond.CodPC2)
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    qdef.Parameters("prmBandProveedor") = BandProveedor
    qdef.Parameters("prmBandCliente") = BandCliente
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    sql = "spConsPCKardexPorFechaVen " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodPC1 & "','" & _
                gobjCond.CodPC2 & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB) & "," & _
                CadenaBool(BandProveedor, TipoDB) & "," & _
                CadenaBool(BandCliente, TipoDB) & ",'" & _
                gobjMain.UsuarioActual.codUsuario & "'"
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    Set ConsPCKardexVen = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Kardex Prov-Cli ", "PC"
End Function

'AUC lista Clientes filtrado por vendedor
Public Function ListaPCProvCliPorCodigoVen(BandProveedor As Boolean, _
                               BandCliente As Boolean, _
                               BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT pc.CodProvCli,pc.Nombre FROM PCProvCli pc "
    sql = sql & "inner join fcvendedor v on v.idvendedor = pc.idvendedor"
    If Not (BandProveedor And BandCliente) Then
        If BandProveedor Then
            sql = sql & " WHERE pc.BandProveedor=" & CadenaBool(True, TipoDB)
        Else
            sql = sql & " WHERE pc.BandCliente=" & CadenaBool(True, TipoDB)
        End If
    End If
    sql = sql & " AND v.codvendedor = '" & gobjMain.UsuarioActual.codUsuario & "' "
    sql = sql & " ORDER BY pc.CodProvCli"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCProvCliPorCodigoVen = rs
    Else
        ListaPCProvCliPorCodigoVen = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ConsPCKardexPorTransVen(ByVal BandProveedor As Boolean, _
                                     ByVal BandCliente As Boolean) As Variant
    Dim sql As String, rs As Recordset
    Dim baseMain As String
    baseMain = GetSetting(APPNAME, SECTION, "NombreDBSQL", "")
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsPCKardexPorTransVen")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodProvCli1") = IIf(Len(gobjCond.CodPC1) = 0, "!", gobjCond.CodPC1)
    qdef.Parameters("CodProvCli2") = IIf(Len(gobjCond.CodPC2) = 0, String$(20, "z"), gobjCond.CodPC2)
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    qdef.Parameters("prmBandProveedor") = BandProveedor
    qdef.Parameters("prmBandCliente") = BandCliente
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    sql = "spConsPCKardexPorTransVen " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodPC1 & "','" & _
                gobjCond.CodPC2 & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB) & "," & _
                CadenaBool(BandProveedor, TipoDB) & "," & _
                CadenaBool(BandCliente, TipoDB) & ",'" & _
                gobjMain.UsuarioActual.codUsuario & "'"
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    Set ConsPCKardexPorTransVen = rs
    Set rs = Nothing
End Function

'AUC 19/07/2010 Saldos x vendedor
Public Function ConsPCSaldoconF_CorteVen(ByVal BandProveedor As Boolean, _
                            ByVal BandCliente As Boolean) As Variant
    Dim sql As String, cond As String, rs As Recordset
   Dim aux As String, Condicion As String
   Dim numReg As Long, Trans As String, i As Integer
        VerificaExistenciaTabla 1
        'Prepara reporte utilizando Tablas Temporales
    '1) Prepara los  documentos  Asignados  menores a la fecha
        aux = IIf(gobjCond.numMoneda > 0, "/Cotizacion" & gobjCond.numMoneda + 1, "")
        sql = "SELECT " & _
            "pck.IdAsignado, " & _
            "(pck.Debe + pck.Haber) " & aux & " AS Valor " & _
            "INTO tmp1 " & _
            "From " & _
            "GNtrans gt INNER JOIN " & _
                "(GNComprobante gc INNER JOIN PCKardex pck " & _
                "ON gc.transID = pck.transID) " & _
                          "ON gt.Codtrans = gc.Codtrans " & _
            "Where (pck.IdAsignado <> 0) " & _
            "AND (gc.Estado <> 3) " & _
            "AND (gt.AfectaSaldoPC=1) " & _
            "AND (gc.Fechatrans<= " & FechaYMD(gobjCond.FechaCorte, gobjMain.EmpresaActual.TipoDB) & ")"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        VerificaExistenciaTabla 2
    '2)Agrupa  estos  documentos por IdAsignado
        sql = "SELECT " & _
              "IdAsignado," & _
              "isnull(Sum(Valor),0) AS VCancelado " & _
              "INTO tmp2 " & _
              "FROM tmp1 " & _
              "GROUP BY IdAsignado"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
    '3) Finalmente une  con el documento  Padre
        VerificaExistenciaTabla 3
        sql = "SELECT  gc.transId, gc.Codtrans, gc.Numtrans, gc.NumDocRef, pc.IdProvCli, " & _
            "pc.CodProvCli, pc.Nombre, " & _
            "(pck.Debe ) " & aux & " AS Debe, " & _
            "( pck.Haber) " & aux & " AS Haber, " & _
            "(pck.Debe + pck.Haber) " & aux & " AS Valor, " & _
            "isnull(vw.VCancelado,0) AS VCancelado, " & _
            "(pck.Debe + pck.Haber) " & aux & " - isnull(vw.VCancelado,0) AS Saldo, " & _
            "pck.IdForma, pck.NumLetra, " & _
            "pck.FechaEmision, pck.FechaVenci, " & _
            "pck.Observacion " & _
            "INTO tmp3 " & _
            "From GNComprobante gc INNER JOIN " & _
                    "(PCProvCli pc  INNER JOIN " & _
                    "    (PCKardex pck  LEFT JOIN " & _
                    "      tmp2 vw  ON vw.IdAsignado = pck.Id) " & _
                    " ON pc.IdProvCli = pck.IdProvCli) " & _
                "ON gc.transID = pck.transID " & _
                " INNER JOIN FCVendedor v  ON V.IdVendedor = pc.IdVendedor " & _
            "Where (pck.IdAsignado = 0) And (gc.Estado <> 3) AND V.CodVendedor = '" & gobjMain.UsuarioActual.codUsuario & "'" & _
            "AND (gc.Fechatrans<=" & FechaYMD(gobjCond.FechaCorte, gobjMain.EmpresaActual.TipoDB) & ")"
            If BandProveedor = False And BandCliente = True Then
                If gobjCond.TipoSaldo = 1 Then
                    sql = sql & "AND (pck.Haber > 0) "
                ElseIf gobjCond.TipoSaldo = 2 Then
                    sql = sql & "AND (pck.Debe > 0) "
                End If
            Else
                If gobjCond.TipoSaldo = 1 Then
                    sql = sql & "AND (pck.DEBE > 0) "
                ElseIf gobjCond.TipoSaldo = 2 Then
                    sql = sql & "AND (pck.HABER > 0) "
                End If
            End If
            If BandCliente = True And BandProveedor = False Then
                    sql = sql & "and bandcliente=1"
            ElseIf BandCliente = False And BandProveedor = True Then
                    sql = sql & "and bandproveedor=1"
            End If
      gobjMain.EmpresaActual.EjecutarSQL sql, numReg
    '---------------------------------------------------------------------------------
    '4  Consulta  final
        If gobjCond.TipoSaldo = 1 Then
            Condicion = Condicion & " AND vw.FechaVenci <= " & FechaYMD(gobjCond.FechaCorte, gobjMain.EmpresaActual.TipoDB)
        End If
        If Len(gobjCond.CodPCGrupo) > 0 Then
            Condicion = Condicion & " AND PCGrupo" & gobjCond.NumPCGrupo & ".CodGrupo" & gobjCond.NumPCGrupo & " = '" & _
                        gobjCond.CodPCGrupo & " '"
        End If
#If DAOLIB Then
    Trans = "vw.Codtrans & ' ' & CSTR(vw.Numtrans)"
#Else
    Trans = "vw.Codtrans + ' ' + CONVERT(varchar,vw.Numtrans)"
#End If
       sql = "SELECT " & _
             "vw.CodProvCli, vw.Nombre,  "
            If gobjCond.TipoSaldo = 0 Then
                sql = sql & " abs(sum(vw.debe)) +abs(sum(vw.VCANCELADO))  as debe, "
                sql = sql & "  abs(sum(vw.haber)) as haber, "
                sql = sql & " (abs(sum(vw.debe)) -abs(sum(vw.VCANCELADO)))+ (abs(sum(vw.haber))) as saldo,"
           Else
                sql = sql & " abs(sum(vw.VALOR)) as debe, " & _
                "abs(sum(vw.VCANCELADO)) as haber, " & _
                " (abs(sum(vw.VALOR)) - abs(sum(vw.VCANCELADO)) ) as Saldo, "
           End If
            sql = sql & " PCGrupo1.CODGRUPO1, PCGrupo1.DESCRIPCION,    PCGrupo2.CODGRUPO2, PCGrupo2.DESCRIPCION,  PCGrupo3.CODGRUPO3,   PCGrupo3.Descripcion,  PCGrupo4.CODGRUPO4, PCGrupo4.Descripcion"
             sql = sql & " FROM Gntrans INNER JOIN ((tmp3 vw INNER JOIN " & _
               "((PCProvCli  LEFT JOIN PCGrupo1 ON " & _
                    " (PCProvCli.IdGrupo1 =  PCGrupo1.IDGrupo1 )" & _
                    " LEFT JOIN PCGrupo2 ON PCProvCli.IdGrupo2 =  PCGrupo2.IDGrupo2) " & _
                    " LEFT JOIN PCGrupo3 ON PCProvCli.IdGrupo3 =  PCGrupo3.IDGrupo3) " & _
                    " LEFT JOIN PCGrupo4 ON PCProvCli.IdGrupo4 =  PCGrupo4.IDGrupo4 " & _
               " ON PCProvCli.IdProvCli = vw.IdProvCli) LEFT JOIN TSFormaCobroPago tsforma on vw.idforma = tsforma.idforma) ON Gntrans.Codtrans = vw.Codtrans  "
        sql = sql & "Where  Saldo > 0 " & Condicion & "  AND  (Gntrans.AfectaSaldoPC=1)"
        sql = sql & " group by vw.CodProvCli, vw.Nombre,PCGrupo1.DESCRIPCION,    PCGrupo2.DESCRIPCION,    PCGrupo3.Descripcion, PCGrupo4.Descripcion, "
        sql = sql & " PCGrupo1.CODGRUPO1 , PCGrupo2.CODGRUPO2, PCGrupo3.CODGRUPO3, PCGrupo4.CODGRUPO4"
        If gobjCond.TipoSaldo = 1 Then
            sql = sql & " having sum(vw.VALOR) >0 "
        End If
        Set rs = Me.OpenRecordset(sql)
    Set ConsPCSaldoconF_CorteVen = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Saldos ProvCli con fecha de corte" & gobjCond.FechaCorte, "PC"
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
End Function

Public Function ListaPCProvCliVen(BandProveedor As Boolean, _
                               BandCliente As Boolean, _
                               BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
         '------------------- cambiado AUC  02/09/20005
             sql = "SELECT pc.CodProvCli, pc.Nombre, g1.CodGrupo1, g2.CodGrupo2, g3.CodGrupo3,g4.codgrupo4,pc.observacion "
             sql = sql & " FROM PCGrupo4 g4 RIGHT JOIN( PCGrupo3 g3 RIGHT JOIN (PCGrupo2 g2 RIGHT JOIN (PCGrupo1 g1 RIGHT JOIN PCProvCli pc " & _
                          " ON g1.IdGrupo1 = pc.IdGrupo1) " & _
                    " ON g2.IdGrupo2 = pc.IdGrupo2) " & _
                " ON g3.IdGrupo3 = pc.IdGrupo3) " & _
               " ON g4.idgrupo4 = pc.idgrupo4 " & _
               " INNER JOIN FCVendedor v on v.idvendedor = pc.idvendedor "
          '------------------
    If Not (BandProveedor And BandCliente) Then
        If BandProveedor Then
            sql = sql & " WHERE BandProveedor=" & CadenaBool(True, TipoDB)
        Else
            sql = sql & " WHERE BandCliente=" & CadenaBool(True, TipoDB)
            sql = sql & "  AND V.codvendedor='" & gobjMain.UsuarioActual.codUsuario & " '"
        End If
        sql = sql & "and Estado <> 2 "
    End If
    sql = sql & " ORDER BY pc.Nombre"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCProvCliVen = rs
    Else
        ListaPCProvCliVen = MiGetRows(rs)
        rs.Close
   End If
    Set rs = Nothing
End Function

Public Function ConsGNTransMulti( _
                    Optional ByVal OrdenAscendente As Boolean) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    '*** MAKOTO 03/oct/00
    sql = "SELECT"
    If gobjCond.TopN > 0 Then
        sql = sql & " TOP " & gobjCond.TopN
    End If
    '*** MAKOTO 05/feb/01 Mod. Aumentado 'NumDocRef' y 'Nombre'
    sql = sql & " VW.TransID, FechaTrans, abs(DateDiff(dd, " & FechaYMD(Date, TipoDB) & ",fechatrans))  As DiasVencidos, CodAsiento, CodTrans, NumTrans, " & _
            " NumDocRef, Nombre, vw.Descripcion, CodCentro,Estado FROM " & _
            " vwConsGNTrans vw"
    'Condición de FechaTrans
    cond = "FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB)
    'Condición de CodTrans
    If Len(cond) > 0 Then cond = cond & " AND "
    If Len(gobjCond.CodTrans) > 0 Then      'Si está especificado transaccion
        'Si es una sola transaccion
        If InStr(gobjCond.CodTrans, ",") = 0 Then
            cond = cond & "(CodTrans='" & gobjCond.CodTrans & "')"
        'Si está seleccionado varias trans.
        Else
            cond = cond & "(CodTrans IN (" & gobjCond.CodTrans & "))"
        End If
    Else
        'Si no hay condicion de cod.trans, selecciona todas las trans.
        ' que tenga permiso
        s = gobjMain.GrupoActual.PermisoActual.ListaTrans(True)
        If Len(s) > 0 Then
            cond = cond & "(CodTrans " & s & ")"
        Else
            cond = cond & "(CodTrans = '-------')"    'Para que NO devuelva nada si no tiene ningún permiso  '*** MAKOTO 26/dic/00
        End If
    End If
    'Condición de NumTrans
    If (gobjCond.NumTrans1 > 0) And (gobjCond.NumTrans2 > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans BETWEEN " & gobjCond.NumTrans1 & " AND " & gobjCond.NumTrans2 & ")"
    ElseIf gobjCond.NumTrans1 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans>=" & gobjCond.NumTrans1 & ")"
    ElseIf gobjCond.NumTrans2 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans<=" & gobjCond.NumTrans2 & ")"
    End If
    'Condición de Estado
    If gobjCond.EstadoBool(ESTADO_NOAPROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_NOAPROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_APROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_APROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_DESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_DESPACHADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_ANULADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_ANULADO & ")"
    End If
    'jeaa 22/05/2006
    If Not (Len(gobjCond.Grupo1) = 0 And Len(gobjCond.Grupo2) = 0) Then
        cond = cond & " AND (codGrupo" & gobjCond.NumGrupo & " BETWEEN '" & _
                gobjCond.Grupo1 & "' AND '" & gobjCond.Grupo2 & "') "
    End If
    If Not (Len(gobjCond.CodItem1) = 0 And Len(gobjCond.CodItem2) = 0) Then
        cond = cond & "AND (CodInventario BETWEEN '" & gobjCond.CodItem1 & "' AND '" & gobjCond.CodItem2 & "') "
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE estado <> 2 AND " & cond
    If OrdenAscendente Then
        sql = sql & " ORDER BY FechaTrans, HoraTrans, VW.TransID"         '*** MAKOTO 07/dic/00 Modificado para HoraTrans
    Else

        sql = sql & " ORDER BY FechaTrans DESC, HoraTrans DESC, VW.TransID DESC"       '*** MAKOTO 07/dic/00 HoraTrans agregado
    End If
    Set rs = Me.OpenRecordset(sql)
    Set ConsGNTransMulti = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta General  " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function

'AUC
Public Function CargaConsolidadoExisMin() As Variant
    Dim sql As String, cond As String, CadenaPrecio As String, Trans As String
    Dim cadempresa As String, cadBodega As String, totalcero As Boolean, cond1 As String
    Dim v As Variant, max As Integer, TotalC As String, TotalP As String, i As Integer, rs As Recordset, TotalCMAx As String
    Dim CodInv As String, codBod As String, Orden As String, cadTrans As String
    Dim W As Variant, j As Integer, Grupo As String
    Dim vBod As Variant, vNomEmp As Variant, vTrans As Variant
    Dim Cadtitulo As String, k As Integer
    Dim condTrans As String, vaux As Variant
    Dim numReg As Long, numMoneda As String
    Dim cadETrans As Variant, cadEBodega As Variant, basePrincipal As String
    Dim TotalE As String, TotalProm As String, difDias As Integer, Intervalo As Double
    Dim TotalCUC As String, TotalUtil As String, TotalPUtil As String, Fijo As Integer
    Dim NumMeses As Long
    With gobjCond
'        nummeses = DateDiff("m", .fecha1, .fecha2)
 '       If nummeses = 0 Then nummeses = 1
       numMoneda = Trim(IIf(.numMoneda > 0, Str(.numMoneda + 1), ""))
'        v = Split(.Sucursal, ";")
 '       vTrans = Split(.CodTrans, ";")
  '      For i = 0 To UBound(v)
   '         vNomEmp = Split(v(i), ",")
    '        Cadtitulo = Cadtitulo & vNomEmp(1) & " - "
     '   Next i
        'para quitar el ultimo "-"
      '  Cadtitulo = Mid$(Cadtitulo, 1, Len(Cadtitulo) - 3)
       ' cond = " "
        TotalC = ", ( "
        TotalCMAx = ", ( "
        TotalP = ", ( "
        TotalProm = ", ( "
        TotalE = ", ( "
        TotalCUC = ", ( "
        TotalUtil = ", ( "
        TotalPUtil = ", ( "
        ReDim cadETrans(max, 2)
        ReDim cadEBodega(max, 2)
        cadETrans = ""
            
           
    sql = "select idinventario, sum(cantidad) as cantIngresada, idbodega"
    sql = sql & "  Into Tmp0"
    sql = sql & " from gncomprobante g"
    sql = sql & " inner join ivkardex i"
    sql = sql & " on g.transid=i.transid"
    sql = sql & " Where Estado <> 3"
    sql = sql & " and codtrans in(" & .CodComp & ")"
    sql = sql & " group by idinventario, idbodega"

        VerificaExistenciaTabla 0
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg


    sql = "select idinventario, idbodega, sum(cantidad) as cantPedido"
    sql = sql & "  Into Tmp1"
    sql = sql & " from gncomprobante g"
    sql = sql & " inner join ivkardex i"
    sql = sql & " on g.transid=i.transid"
    sql = sql & " Where Estado <> 3"
    sql = sql & " and codtrans in ('" & .CodTrans & "','" & .CodTrans & "M')"

    sql = sql & " group by idinventario, idbodega"

        VerificaExistenciaTabla 1
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
    sql = "  select "
    sql = sql & "  ivb.idbodega, codbodega,"
    sql = sql & "  ive.IdInventario, CodInventario, ivi.Descripcion,"
    sql = sql & "  exist , ExistMin,  isnull(t1.cantPedido,0)-isnull(t0.cantIngresada,0), "
    sql = sql & "  case when (isnull(t1.cantPedido,0) - isnull(t0.cantIngresada,0)) >0 then"
    sql = sql & "   ExistMin - exist -( isnull(t1.cantPedido,0) - isnull(t0.cantIngresada,0)) "
    sql = sql & "   else "
    sql = sql & "   case when (ExistMin-exist)>0 then ExistMin-exist  else "
    sql = sql & "   case when ((isnull(t1.cantPedido,0) - isnull(t0.cantIngresada,0)))<0 "
    sql = sql & "   then isnull(t0.cantIngresada,0) else 0 end end  end  as CantPedir "
    sql = sql & "  From"
    sql = sql & "  IVBodega ivb"
    sql = sql & "  inner join ivexist ive"
    sql = sql & "  inner join  ivinventario ivi"
    sql = sql & "  left join ivgrupo1 ivg1"
    sql = sql & "  on ivi.idgrupo1 = ivg1.idgrupo1"
    sql = sql & "  left join ivgrupo2 ivg2"
    sql = sql & "  on ivi.idgrupo2 = ivg2.idgrupo2"
    sql = sql & "  left join ivgrupo3 ivg3"
    sql = sql & "  on ivi.idgrupo3 = ivg3.idgrupo3"
    sql = sql & "  left join ivgrupo4 ivg4"
    sql = sql & "  on ivi.idgrupo4 = ivg4.idgrupo4"
    sql = sql & "  left join ivgrupo5 ivg5"
    sql = sql & "  on ivi.idgrupo5 = ivg5.idgrupo5"
    sql = sql & "  on ivi.idinventario = ive.idinventario"
    sql = sql & "  on ive.idbodega = ivb.idbodega"
    
    sql = sql & "  left join tmp0 t0"
    sql = sql & "  on ivi.idinventario = t0.idinventario and ive.idbodega=t0.idbodega "
    
    sql = sql & "  left join tmp1 t1"
    sql = sql & "  on ivi.idinventario = t1.idinventario and ive.idbodega=t1.idbodega"
    
    
    sql = sql & "  Where ivi.bandservicio=0 "
    If .IncluirCero Then
        sql = sql & "  and case when (isnull(t1.cantPedido,0) - isnull(t0.cantIngresada,0)) >0 then"
        sql = sql & "   ExistMin - exist -( isnull(t1.cantPedido,0) - isnull(t0.cantIngresada,0)) "
        sql = sql & "   else "
        sql = sql & "   case when (ExistMin-exist)>0 then ExistMin-exist  else "
        sql = sql & "   case when ((isnull(t1.cantPedido,0) - isnull(t0.cantIngresada,0)))<0 "
        sql = sql & "   then isnull(t0.cantIngresada,0) else 0 end end  end  <> 0 "
    End If
    If Not (Len(.Grupo1) = 0 And Len(.Grupo2) = 0) Then
        sql = sql & "   AND (codGrupo" & .NumGrupo & " BETWEEN '" & _
        .Grupo1 & "' AND '" & .Grupo2 & "') "
    End If
    If Not (Len(.CodItem1) = 0 And Len(.CodItem2) = 0) Then
        sql = sql & "   AND (CodInventario BETWEEN '" & .CodItem1 & "' AND '" & .CodItem2 & "') "
    End If
    
    If Not (Len(.CodBodega1) = 0) Then
        sql = sql & "   AND (CodBodega = '" & .CodBodega1 & "') "
    End If
    
    sql = sql & "  order by codbodega, codinventario "
    
       Set rs = gobjMain.EmpresaActual.OpenRecordset(sql)
    Set CargaConsolidadoExisMin = rs
    Set rs = Nothing
       
    End With
End Function

Public Function ConsGNTrans4( _
                    Optional ByVal OrdenAscendente As Boolean) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    
    sql = "SELECT"
    If gobjCond.TopN > 0 Then
        sql = sql & " TOP " & gobjCond.TopN
    End If
    

    sql = sql & " g.transid, g.codtrans, g.numtrans,gnt.codpantalla, substring(gnt.opcion,1,1) as TipoTrans, "
    sql = sql & " g.fechatrans, g.horatrans, ivi.idinventario, "
    sql = sql & " ivi.codinventario, ivi.descripcion, "
    sql = sql & " ivk.id,  case when left(opcion,1)='I' then ivk.cantidad else ivk.cantidad * -1 end as Cant,"
    sql = sql & " case when left(opcion,1)='I' then ivk.CostoTotal else ivk.CostoTotal *-1 end as CostoTotal , "
    sql = sql & " case when left(opcion,1)='I' then ivk.CostoRealTotal else ivk.CostoRealTotal * -1 end as CostoRealTotal , g.estado "
    sql = sql & " from gncomprobante g"
    sql = sql & " inner join gntrans gnt"
    sql = sql & " on g.codtrans=gnt.codtrans"
    sql = sql & " inner join ivkardex ivk"
    sql = sql & " inner join ivinventario ivi"
    sql = sql & " on ivk.idinventario = ivi.idinventario"
    sql = sql & " on g.transid = ivk.transid"
    'Condición de FechaTrans
    cond = "FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB)
    
    'Condición de CodTrans
    If Len(cond) > 0 Then cond = cond & " AND "
    If Len(gobjCond.CodTrans) > 0 Then      'Si está especificado transaccion
        'Si es una sola transaccion
        If InStr(gobjCond.CodTrans, ",") = 0 Then
            cond = cond & "(g.CodTrans='" & gobjCond.CodTrans & "')"
        'Si está seleccionado varias trans.
        Else
            cond = cond & "(g.CodTrans IN (" & gobjCond.CodTrans & "))"
        End If
    Else
        'Si no hay condicion de cod.trans, selecciona todas las trans.
        ' que tenga permiso
        s = gobjMain.GrupoActual.PermisoActual.ListaTrans(True)
        If Len(s) > 0 Then
            cond = cond & "(g.CodTrans " & s & ")"
        Else
            cond = cond & "(g.CodTrans = '-------')"    'Para que NO devuelva nada si no tiene ningún permiso  '*** MAKOTO 26/dic/00
        End If
    End If
    
    'Condición de NumTrans
    If (gobjCond.NumTrans1 > 0) And (gobjCond.NumTrans2 > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans BETWEEN " & gobjCond.NumTrans1 & " AND " & gobjCond.NumTrans2 & ")"
    ElseIf gobjCond.NumTrans1 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans>=" & gobjCond.NumTrans1 & ")"
    ElseIf gobjCond.NumTrans2 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans<=" & gobjCond.NumTrans2 & ")"
    End If
    
    'Condición de Estado
    If gobjCond.EstadoBool(ESTADO_NOAPROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(g.Estado<>" & ESTADO_NOAPROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_APROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(g.Estado<>" & ESTADO_APROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_DESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(g.Estado<>" & ESTADO_DESPACHADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_ANULADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(g.Estado<>" & ESTADO_ANULADO & ")"
    End If
    '----------------------------------------
    '----- CAO 13/06/2006
    '-----------------------------------------
    If gobjCond.EstadoBool(ESTADO_SEMDESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(g.Estado<>" & ESTADO_SEMDESPACHADO & ")"
    End If
    
    If Len(gobjCond.CodCentro1) > 0 And Len(gobjCond.CodCentro2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " codCentro between '" & gobjCond.CodCentro1 & "' and '" & gobjCond.CodCentro2 & "'"
    End If
    
    
    If Len(cond) > 0 Then sql = sql & " WHERE ivi.bandservicio=0 and " & cond

    
    'Ordern de filas
    If OrdenAscendente Then

        sql = sql & " ORDER BY FechaTrans, HoraTrans, ivk.orden"
    Else

        sql = sql & " ORDER BY FechaTrans DESC, HoraTrans DESC, ivk.orden"
    End If
    
    Set rs = Me.OpenRecordset(sql)
    Set ConsGNTrans4 = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta General " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function




Public Function CostoDouble2Item( _
                    ByVal fecha As Date, _
                    Optional ByVal cant As Currency, _
                    Optional ByVal tid As Long, _
                    Optional ByVal Hora As Date, _
                    Optional ByVal idInv As Long) As Double
    'Si la id de transaccion no está especificada, cambia la fecha limite
    '  para que incluya todas las trans. de la misma fecha
    If Hora = 0 Then Hora = TimeSerial(23, 59, 59)

    Select Case Me.GNOpcion.Costeo
    Case COSTO_PROM
        CostoDouble2Item = CostoPromItem(fecha, tid, Hora, idInv)
    End Select
    
    '*** MAKOTO 31/ene/01 Agregado para redondear al formato de costo
    CostoDouble2Item = MiCCur(Format$(CostoDouble2Item, Me.GNOpcion.ObtenerValor( _
                            "FormatoCosto" & Me.GNOpcion.IndiceMoneda("USD"))))
                            
                            
End Function


Private Function CostoPromItem( _
                    ByVal fecha As Date, _
                    ByVal tid As Long, _
                    ByVal Hora As Date, _
                    ByVal IdInventario As Long) As Double
    Dim sql As String, num As Integer, campo As String
    Dim rs As Recordset, Costo As Double        '*** MAKOTO 23/nov/00 Modificado a Double
    Dim idItem As Long
    num = Me.GNOpcion.IndiceMoneda("USD")
    campo = "CP" & num
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mProps.objEmpresa.Database.QueryDefs("spIVCostoProm")
        If Me.Tipo = Preparacion Then 'AUC agregado para sacar el costo de un item de preparacion
        qdef.Parameters("IdItem") = idInv
    Else
        qdef.Parameters("IdItem") = mProps.IdInventario
    End If
    'qdef.Parameters("IdItem") = mProps.IdInventario
    qdef.Parameters("FechaHasta") = fecha
    qdef.Parameters("tid") = tid
    qdef.Parameters("HoraHasta") = Hora         '*** MAKOTO 09/dic/00 Agregado
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
    If Not rs.EOF Then
        If Not IsNull(rs.Fields(campo)) Then Costo = rs.Fields(campo)
    End If
#Else
    '*** MAKOTO 08/dic/00 Modificado
    sql = "spIVCostoProm2 " & _
                IdInventario & ", " & _
                FechaYMD(fecha, Me.TipoDB) & ", " & _
                tid & ", " & _
                num & ", " & _
                HoraHMS(Hora, Me.TipoDB)
'                "'" & Format$(Hora, "Hh:Nn:Ss") & "'"  '*** MAKOTO 06/mar/01 Mod.
    Set rs = Me.OpenRecordset(sql)
    Costo = rs.Fields("CostoProm")
#End If
    
    rs.Close
    Set rs = Nothing

    'Si no hay costo promedio por que no hay existencia,
    '   devuelve el último costo en vez de promedio
    If Costo = 0 Then Costo = CostoUltimoItem(fecha, tid, Hora, False, IdInventario)
    
    CostoPromItem = Costo
End Function



Private Function CostoUltimoItem( _
                    ByVal fecha As Date, _
                    ByVal tid As Long, _
                    ByVal Hora As Date, _
                    ByVal BandSoloIngreso As Boolean, _
                    ByVal IdInventario As Long) As Double
    Dim sql As String, campo As String, num As Integer
    Dim rs As Recordset, cadena_hora As String
    
    num = Me.GNOpcion.IndiceMoneda("USD")
    campo = "1"
    If num > 1 Then campo = "gc.Cotizacion" & num
    
    'Obtiene IVKardex ordenado por la fecha descendiente para coger último ingreso
    ' Busca solo de FechaTrans<=Fecha, y solo de INGRESOS y no anulados
    sql = "SELECT ivk.CostoRealTotal/ivk.Cantidad/" & campo & " AS CU " & _
          "FROM GNTrans gt INNER JOIN " & _
                    "(GNComprobante gc INNER JOIN IVKardex ivk " & _
                    "ON gc.TransID = ivk.TransID) " & _
                "ON gt.CodTrans = gc.CodTrans "
    sql = sql & "WHERE (gc.Estado <> 3) AND " & _
                    "(gt.AfectaCantidad=" & CadenaBool(True, Me.TipoDB) & ") AND " & _
                    "(ivk.IdInventario=" & IdInventario & ") "
    If BandSoloIngreso Then sql = sql & " AND (ivk.Cantidad>0) "
          
    cadena_hora = HoraHMS(Hora, Me.TipoDB)        '*** MAKOTO 06/mar/01 Mod.
    
    sql = sql & " AND ( (gc.FechaTrans<" & FechaYMD(fecha, Me.TipoDB) & ") " & _
                    "OR (gc.FechaTrans=" & FechaYMD(fecha, Me.TipoDB) & _
                        " AND gc.HoraTrans<" & cadena_hora & ") " & _
                    "OR (gc.FechaTrans=" & FechaYMD(fecha, Me.TipoDB) & _
                        " AND gc.HoraTrans=" & cadena_hora & _
                        " AND gc.TransID < " & tid & ") )"
    
    sql = sql & " ORDER BY gc.FechaTrans DESC, gc.HoraTrans DESC, gc.TransID DESC"     '*** MAKOTO 08/dic/00 HoraTrans Agregado
    Set rs = Me.OpenRecordset(sql)
    
    'Coge el primer costo como el costo ultimo
    If Not rs.EOF Then
        If Not IsNull(rs.Fields("CU")) Then
            CostoUltimoItem = rs.Fields("CU")
        '*** Oliver 10 sep 2004
        'Aseguro de devolver 0 porque no encontro mov. de item
        Else
            CostoUltimoItem = 0
        End If
    Else
        CostoUltimoItem = 0
    End If
    rs.Close
    Set rs = Nothing
End Function


Public Function ConsTSPorCobrarPagarUsuario( _
                    ByVal PorCobrar As Boolean, _
                    ByVal FechaVenci As Date, _
                    ByVal CodForma As String, _
                    ByVal CodMoneda As String, _
                    ByVal codUsuario As String) As Variant
    Dim aux_codpc As String, aux_f1 As Date, aux_f2 As Date
    Dim aux_PorCobrar As Boolean, aux_Cliente As Boolean, aux_Proveedor As Boolean
    Dim aux_CodForma As String, aux_CodMoneda As String, aux_codgrupo As String
    Dim aux_incluircero As Boolean, aux_codUsuario As String
   With gobjMain.objCondicion
        'Conservar valores actuales para que no afecte a otras consultas
        aux_f1 = .fecha1
        aux_f2 = .fecha2
        aux_PorCobrar = .PorCobrar
        aux_CodForma = .CodForma
        aux_CodMoneda = .CodMoneda
        aux_codgrupo = .CodGrupo
        aux_codUsuario = .Usuario1

        .PorCobrar = PorCobrar
        .fecha1 = Me.GNOpcion.FechaInicio
        .fecha2 = FechaVenci
        .CodForma = CodForma
        .CodMoneda = CodMoneda
        .Usuario1 = codUsuario

        Set ConsTSPorCobrarPagarUsuario = ConsTSPorCobrarPagarUsuarios()
        
        'Recuperar valores reservados
        .fecha1 = aux_f1
        .fecha2 = aux_f2
        .PorCobrar = aux_PorCobrar
        .CodForma = aux_CodForma
        .CodMoneda = aux_CodMoneda
        .Usuario1 = aux_codUsuario
   End With
End Function


Public Function ConsTSPorCobrarPagarUsuarios() As Variant
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim objCond As Condicion
    
    Set objCond = gobjMain.objCondicion
    
    'Si no está especificada la moneda, coge la Moneda predeterminada
    If Len(objCond.CodMoneda) = 0 Then objCond.CodMoneda = MONEDA_PRE
    numMoneda = Me.GNOpcion.IndiceMoneda(objCond.CodMoneda)
    
    sql = "spConsTSPorCobrarpagarUsuario " & numMoneda & ", " & _
                objCond.CodMoneda & "," & _
                CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                FechaYMD(objCond.fecha2, TipoDB) & "," & _
                objCond.CodForma & ",'" & _
                objCond.Usuario1 & "'"



        sql = " SELECT   Id,"
        sql = sql & " CodProvCli,"
        sql = sql & " Nombre,"
        sql = sql & " TransID,"
        sql = sql & " CodTrans,"
        sql = sql & " Trans,"
        sql = sql & " CodForma,"
        sql = sql & " NumLetra,"
        sql = sql & " Doc,"
        sql = sql & " Valor" & numMoneda & " AS Valor,"
        sql = sql & " VCancelado" & numMoneda & " AS VCancelado,"
        sql = sql & " Valor" & numMoneda & " - VCancelado" & numMoneda & " AS Saldo,"
        sql = sql & " CodMoneda,"
        sql = sql & " Valor" & numMoneda & " - VCancelado" & numMoneda & " AS CANCELA,"
        If numMoneda = 1 Then
            sql = sql & "  1 AS Cotizacion,"
        Else
            sql = sql & "  Cotizacion" & numMoneda & " AS Cotizacion,"
        End If
        sql = sql & " FechaEmision,"
        sql = sql & " Plazo,"
        sql = sql & " FechaVenci,"
        sql = sql & " codvendedor,"
        sql = sql & " NomVendedor"
        sql = sql & " From vwConsPCPorCobrarPagar"
        sql = sql & " WHERE  (FechaEmision between  " & FechaYMD(objCond.fecha2, Me.TipoDB) & " and " & FechaYMD(objCond.fecha2, Me.TipoDB) & " ) AND"
        sql = sql & " (CodUsuario='" & objCond.Usuario1 & "') AND"
        sql = sql & " (CodMoneda='" & objCond.CodMoneda & "') AND"
        sql = sql & " (CodForma in (" & objCond.CodForma & ")) AND"
        
        sql = sql & " (PorCobrar = " & CadenaBool(objCond.PorCobrar, TipoDB) & ") AND"
        sql = sql & " (Valor" & numMoneda & " - VCancelado" & numMoneda & ") >0 "
        sql = sql & " AND   ( (BandProveedor = 0) OR (BandCliente = 1) )"
        sql = sql & " ORDER BY CodProvCli, FechaVenci"
        



    Set rs = Me.OpenRecordset(sql)
    Set ConsTSPorCobrarPagarUsuarios = rs
    Set rs = Nothing
    Set objCond = Nothing
End Function

'Para corregir existencias incorrectas ACTIVOS
Public Sub CorregirAFExistencia()
    Dim rs As Recordset, sql As String, rs2 As Recordset
    
    Set rs = Me.ConsAFCorrecExist
    If rs.EOF Then Exit Sub
    
#If DAOLIB = 0 Then
    Set rs2 = New ADODB.Recordset
    rs2.CursorLocation = adUseClient
#End If

    With rs
        Do Until .EOF
            'Verifica si existe el registro
            sql = "SELECT Exist FROM AFExist " & _
                  " WHERE IdInventario=" & !IdInventario & _
                  " AND IdBodega=" & !IdBodega
#If DAOLIB Then
            Set rs2 = mdbEmpresa.OpenRecordset(sql, dbOpenSnapshot, dbReadOnly)
#Else
            rs2.Open sql, mcnEmpresa, adOpenStatic, adLockReadOnly
#End If
            'Si no existe, lo inserta
            If rs2.EOF Then
                sql = "INSERT INTO AFExist (IdInventario,IdBodega,Exist) " & _
                      "VALUES (" & !IdInventario & "," & !IdBodega & "," & !SumaDeCantidad & ")"
            
            'Si existe, lo modifica
            Else
                sql = "UPDATE AFExist SET Exist=" & !SumaDeCantidad & _
                      " WHERE IdInventario=" & !IdInventario & _
                      " AND IdBodega=" & !IdBodega
            End If
            Me.Execute sql, True
            rs2.Close
            .MoveNext
        Loop
        .Close
    End With
    Set rs2 = Nothing
    Set rs = Nothing
End Sub

'Para corrección de existencias
'Devuelve los items que tienen existencia incorrecta comparando con
' la suma de AFKardex.
Public Function ConsAFCorrecExist() As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    Dim ex1 As String, ex2 As String, ex3 As String, ex4 As String
    Dim ex5 As String, ex6 As String
    
#If DAOLIB Then
    ex1 = "IIF(IsNull(ive.Exist),0,ive.Exist)"
    ex2 = "IIF(IsNull(iv.IdInventario), iv2.IdInventario, iv.IdInventario)"
    ex3 = "IIF(IsNull(iv.CodInventario), iv2.CodInventario, iv.CodInventario)"
    ex4 = "IIF(IsNull(vw.SumaDeCantidad),0, vw.SumaDeCantidad)"
    ex5 = "IIF(IsNull(ivb.IdBodega), ivb2.IdBodega, ivb.IdBodega)"
    ex6 = "IIF(IsNull(ivb.CodBodega), ivb2.CodBodega, ivb.CodBodega)"
#Else
    ex1 = "isnull(ive.Exist,0)"
    ex2 = "isnull(iv.IdInventario, iv2.IdInventario)"
    ex3 = "isnull(iv.CodInventario, iv2.CodInventario)"
    ex4 = "isnull(vw.SumaDeCantidad,0)"
    ex5 = "isnull(ivb.IdBodega, ivb2.IdBodega)"
    ex6 = "isnull(ivb.CodBodega, ivb2.CodBodega)"
#End If

    'Muestra la diferencia de existencia y suma de IVKardex si es que la hay
    sql = "SELECT " & ex2 & " AS IdInventario, " & ex3 & " AS CodInventario, " & _
                 ex5 & " AS IdBodega, " & ex6 & " AS CodBodega, " & ex1 & " AS Exist1, " & _
                 ex4 & " AS SumaDeCantidad, (" & ex1 & " - " & ex4 & ") AS Dif " & _
          "FROM AFInventario iv2 RIGHT JOIN " & _
                    "(AFInventario iv RIGHT JOIN " & _
                        "(AFBodega ivb2 RIGHT JOIN " & _
                            "(AFBodega ivb RIGHT JOIN "
#If DAOLIB Then                         '*** MAKOTO 25/ene/01 Mod. porque en DAO no sporta FULL JOIN
                    sql = sql & "(vwConsAFKardexCustodioSuma vw Right JOIN AFExist ive "
#Else
                    sql = sql & "(vwConsAFKardexSuma vw FULL JOIN AFExist ive "
#End If
                    sql = sql & "ON (vw.IdBodega = ive.IdBodega) AND (vw.IdInventario = ive.IdInventario) ) " & _
                            "ON ivb.IdBodega = vw.IdBodega) " & _
                        "ON ivb2.IdBodega = ive.IdBodega) " & _
                    "ON iv.IdInventario=vw.IdInventario) " & _
                "ON iv2.IdInventario = ive.IdInventario " & _
          "WHERE (" & ex1 & " - " & ex4 & ")<>0 " & _
                 "AND " & ex2 & " is not null " & _
          "ORDER BY " & ex3
    
    Set rs = Me.OpenRecordset(sql)
    Set ConsAFCorrecExist = rs
    Set rs = Nothing
End Function


Public Function RecuperaIVInventarioQuick(key As Variant) As IVInventario
    Dim obj As IVInventario
    
    Set obj = New IVInventario
    Set obj.Empresa = Me
    On Error Resume Next
    obj.RecuperarQuick key
    If Err.Number = 0 Then Set RecuperaIVInventarioQuick = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CalculaNumeroDepreciaciones(ByVal cod As String) As Currency
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    
    
    sql = "  select codinventario, count(numtrans) as numdepre"
    sql = sql & " from gncomprobante g inner join afkardex af"
    sql = sql & " inner join afinventario afi"
    sql = sql & " on afi.idinventario = af.idinventario"
    sql = sql & " on g.transid=af.transid"
    sql = sql & " where g.estado<>3 "
    sql = sql & " and codtrans='DEPAF'"
    sql = sql & " and CODINVENTARIO='" & cod & "'"
    sql = sql & " group by codinventario"
    
    Set rs = Me.OpenRecordset(sql)
    
    If rs.RecordCount > 0 Then
        CalculaNumeroDepreciaciones = rs.Fields("numdepre")
    Else
        CalculaNumeroDepreciaciones = 0
    End If
    Set rs = Nothing
End Function

Public Function CalculaValorDetalleVmanuales(ByVal transid As Long) As Currency
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    
    sql = "  select ISNULL(Sum(Valor),0) AS Valor "
    sql = sql & "from TSDetalleVmanuales"
    sql = sql & " Where Transid = " & transid
    
    Set rs = Me.OpenRecordset(sql)
    
    If rs.RecordCount > 0 Then
        CalculaValorDetalleVmanuales = rs.Fields("Valor")
    Else
        CalculaValorDetalleVmanuales = 0
    End If
    Set rs = Nothing
End Function

Public Function RecuperactCuentaUsuario(ByVal Nombre As String) As String
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    
    sql = "  select codcuenta "
    sql = sql & "from ctcuenta"
    sql = sql & " Where nombrecuenta='" & Nombre & "'"
    
    Set rs = Me.OpenRecordset(sql)
    
    If rs.RecordCount > 0 Then
        RecuperactCuentaUsuario = rs.Fields("CodCuenta")
    Else
        RecuperactCuentaUsuario = ""
    End If
    Set rs = Nothing
End Function


Public Function RecuperaNombreUsuario(ByVal cod As String) As String
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    
    sql = "  select NombreUsuario "
    sql = sql & "from " & mProps.objSiiMain.NombreDBSQL & ".dbo.usuario"
    sql = sql & " Where codusuario='" & cod & "'"
    
    Set rs = Me.OpenRecordset(sql)
    
    If rs.RecordCount > 0 Then
        RecuperaNombreUsuario = rs.Fields("NombreUsuario")
    Else
        RecuperaNombreUsuario = ""
    End If
    Set rs = Nothing
End Function

Public Function RecuperaDetalleTransIV(ByVal fecha As Date, ByVal cod As String) As Recordset
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    
    
    sql = " SELECT g.CODTRANS,"
    sql = sql & " COUNT(g.CODTRANS) as Cantidad,"
    sql = sql & " MIN(NUMTRANS)as Inicio,"
    sql = sql & " MAX(NumTrans) As Fin"
    sql = sql & " FROM GNCOMPROBANTE g"
    sql = sql & " inner join gntrans gnt"
    sql = sql & " on g.codtrans= gnt.codtrans"
    sql = sql & " WHERE FECHATRANS BETWEEN " & FechaYMD(fecha, TipoDB) & " AND " & FechaYMD(fecha, TipoDB)
    sql = sql & " AND CODUSUARIO='" & cod & "'"
    sql = sql & " and modulo='IV'"
    sql = sql & " GROUP BY g.CODTRANS"
    
    Set rs = Me.OpenRecordset(sql)
    
    Set RecuperaDetalleTransIV = rs
    
    Set rs = Nothing
End Function




Public Function CalculaValorDetalleVCredito(ByVal transid As Long) As Currency
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    
    sql = "  select ISNULL(Sum(Valor),0) AS Valor "
    sql = sql & "from TSDetalleVCredito"
    sql = sql & " Where Transid = " & transid
    sql = sql & " And bandret= 0"
    
    Set rs = Me.OpenRecordset(sql)
    
    If rs.RecordCount > 0 Then
        CalculaValorDetalleVCredito = rs.Fields("Valor")
    Else
        CalculaValorDetalleVCredito = 0
    End If
    Set rs = Nothing
End Function

Public Function ListaTSFormaCobroPagoContolFormas(ByVal BandCobro As Boolean, ByVal CodGrupo As String) As Variant
    Dim sql As String, s As String, i As Integer
    Dim rs As Recordset
        sql = "SELECT CodForma,NombreForma"
          sql = sql & " From  TSFormaCobroPago "
          sql = sql & " Where tsformacobropago.notacredito LIKE '" & "%" & CodGrupo & "%" & "'"
          sql = sql & " AND BandCobro=" & CadenaBool(BandCobro, TipoDB)
          sql = sql & " ORDER BY CodForma "
   Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount = 0 Then
         rs.Close
         Set rs = Nothing
         sql = "SELECT CodForma,NombreForma"
         sql = sql & " FROM TSFormaCobroPago WHERE "
         sql = sql & " BandCobro=" & CadenaBool(BandCobro, TipoDB)
         sql = sql & " AND BandValida=" & CadenaBool(True, TipoDB)
         sql = sql & " ORDER BY CodForma "
         Set rs = Me.OpenRecordset(sql)
    End If
    
    ListaTSFormaCobroPagoContolFormas = MiGetRows(rs)
   rs.Close
    Set rs = Nothing
End Function

Public Sub GrabarCostoReferencial(ByRef IdInventario As Long, ByRef CostoRef As Currency)
    Dim sql As String
    Dim rs As Recordset
        sql = "SELECT CostoReferencial FROM IVInventario WHERE idInventario= " & IdInventario
        Set rs = Me.OpenRecordsetParaEdit(sql)
    With rs
        !CostoReferencial = CostoRef
      .Update
    End With
    Set rs = Nothing
  Exit Sub
ErrTrap:
End Sub


Public Function RecuperaIVDescuento(key As Variant) As IVDescuento
    Dim obj As IVDescuento
    
    Set obj = New IVDescuento
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaIVDescuento = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CreaIVDescuento() As IVDescuento
    Dim obj As IVDescuento
    
    Set obj = New IVDescuento
    Set obj.Empresa = Me
    Set CreaIVDescuento = obj
    Set obj = Nothing
End Function

Public Function ListaIVDescuento(BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset, NumIVGrupo As Integer, ivgrupo As Integer
    
    ivgrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumPCGrupo")) + 1
    sql = " Select coddescuento, ivd.descripcion, ivd.bandvalida,  bandcaducidad,  Fechadesde, FechaHasta, bandxcliente,"
    sql = sql & " BandxItem , BandAcumula,  "
    sql = sql & " case when bandxcliente=1 then"
    sql = sql & " p.nombre else pg.descripcion end as cli"
    sql = sql & " from  IVDescuento ivd"
    sql = sql & " left join ivdescuentodetallepc idpc"
    sql = sql & " left join pcprovcli p on idpc.idprovcli=p.idprovcli"
    sql = sql & " left join pcgrupo" & ivgrupo & " pg on idpc.idPCgrupo=pg.idgrupo" & ivgrupo
    sql = sql & " on ivd.iddescuento  =idpc.iddescuento"
    sql = sql & " order by ivd.iddescuento"
   Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVDescuento = rs
    Else
        ListaIVDescuento = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function DesctoPCxIVxFecha(ByVal CodIVGrupo As String, ByVal codPC As String, ByVal codFC As String) As Double
Dim sql As String, rs As Recordset, NumIVGrupo As Integer, NumPCGrupo As Integer
    NumIVGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumIVGrupo")) + 1
    NumPCGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumPCGrupo")) + 1
    
    sql = " select top 1"
    sql = sql & " ivD.codDescuento,"
    sql = sql & " case when ivdiv.Descuento-Penal>0 then ivdiv.Descuento-Penal else 0 end as TotalDesc"
    sql = sql & " From"
    sql = sql & " ivdescuentodetallepc ivdpc "
    sql = sql & " left join pcprovcli pcc  on ivdpc.idprovcli=pcc.idprovcli"
    sql = sql & " left join pcgrupo" & NumPCGrupo & " pcg "
    sql = sql & " inner join pcprovcli pc "
    sql = sql & " on pcg.idgrupo" & NumPCGrupo & "=pc.idgrupo" & NumPCGrupo
    sql = sql & " on ivdpc.IdPCGrupo = pcg.idgrupo" & NumPCGrupo
    sql = sql & " inner join ivdescuentodetalleiv ivdiv "
    sql = sql & " inner join ivgrupo" & NumIVGrupo & " ivg "
    sql = sql & " on ivdiv.IdIVGrupo = ivg.idgrupo" & NumIVGrupo
    sql = sql & " inner join ivdescuentodetallefc ivdfc "
    sql = sql & " inner join TsFormaCobroPago tsf "
    sql = sql & " on ivdfc.idforma=tsf.idforma"
    sql = sql & " inner join ivdescuento ivd"
    sql = sql & " on ivd.iddescuento=ivdfc.iddescuento"
    sql = sql & " on ivd.iddescuento=ivdiv.iddescuento"
    sql = sql & " on ivd.iddescuento=ivdpc.iddescuento"
    sql = sql & " WHERE "
    sql = sql & " ivd.BandValida=1 and "
    sql = sql & " ivg.CodGrupo" & NumIVGrupo & " = '" & CodIVGrupo & "'"
    sql = sql & " and ( pc.CodProvCli ='" & codPC & "' or pcc.CodProvCli ='" & codPC & "')"
    If Len(codFC) > 0 Then
        sql = sql & " and tsf.codforma='" & codFC & "'"
    End If
    sql = sql & " order by ivd.fechagrabado"
    
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        DesctoPCxIVxFecha = rs!TotalDesc
    End If
    Set rs = Nothing
End Function

Public Sub AbrirModulo(ByVal Modulo As String)
    Dim s As String
    
    '*** MAKOTO 22/dic/00
    AbrirSoloConeccion

    'Asigna a la variable global
    Set gobjEmpresaActual = Me
'    Set gobjEmpresaActualNew = Me
    
    GrabaGNLogAccion "LOGIN", Modulo, "GN"
    
    SaveSetting APPNAME, SECTION, "Empresa_Anterior", mProps.CodEmpresa
End Sub

Public Sub CerrarModulo(ByVal Modulo As String)
    Dim bandCompact As Boolean
#If DAOLIB Then
    If Not mdbEmpresa Is Nothing Then
    
#Else
    If mcnEmpresa.State <> adStateClosed Then
#End If
        'Graba un registro en GNLogAccion
        

        'GrabaGNLogAccion "LOGOUT", "", "GN"
        GrabaGNLogAccion "LOGOUT", Modulo, "GN"
        mbooCompact = NecesarioCompactar        'Para compactar en Class_Terminate
        
        'Cierra la conección con la empresa
#If DAOLIB Then
        On Error Resume Next
        mdbEmpresa.Close
        Set mdbEmpresa = Nothing
        Err.Clear
        On Error GoTo 0
        
#Else
        mcnEmpresa.Close
#End If
        
        If gobjEmpresaActual Is Me Then
            'Asigna a Nothing la variable global
            Set gobjEmpresaActual = Nothing
        End If
        
    End If
    Set mProps.objSiiMain = Nothing
End Sub

Public Function NombreUsuarioPC() As String
   'Declara variables locales
   Dim sUsuario As String * 255
   Dim sName As String
   Dim p As Integer
   'Obtiene nombre pc
   'GetUserName(sName, 256)
   GetUserName sUsuario, 255
   p = InStr(1, sUsuario, Chr(0), vbTextCompare)
   If p > 0 Then
      sName = Left(sUsuario, p - 1)
   End If
   'Retorna resultado
   NombreUsuarioPC = UCase(Mid$(Trim$(sName), 1, 20))
End Function

Public Function RecuperaDetalleIvGrupo(ByVal fecha As Date, ByVal cod As String, NumGrupo As Integer, BandIVA As Boolean) As Recordset
   Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
        sql = " SELECT ivg.codgrupo" & NumGrupo & " AS CodGrupo, ivg.descripcion "
        sql = sql & " FROM ivgrupo" & NumGrupo & " ivg inner join ivinventario iv inner join ivkardex ivk  "
        sql = sql & " INNER JOIN  GNCOMPROBANTE g inner join gntrans gnt on g.codtrans= gnt.codtrans "
        sql = sql & " on g.transid = ivk.transid on ivk.idinventario = iv.idinventario on iv.idgrupo" & NumGrupo & "= ivg.idgrupo" & NumGrupo & " "
        sql = sql & " WHERE FECHATRANS BETWEEN " & FechaYMD(fecha, TipoDB) & " AND " & FechaYMD(fecha, TipoDB)
        sql = sql & " AND CODUSUARIO='" & cod & "'"
        sql = sql & " and modulo='IV'"
        sql = sql & " and TipoTrans='1'"
    sql = sql & " GROUP BY ivg.CodGrupo" & NumGrupo & ",ivg.descripcion "
    Set rs = Me.OpenRecordset(sql)
    Set RecuperaDetalleIvGrupo = rs
    Set rs = Nothing
End Function

'recupera ptotalconiva y ptotalsiniva
Public Function RecuperaDetalleIvGrupoPTIva(ByVal fecha As Date, ByVal cod As String, NumGrupo As Integer, CodGrupo As String, BandIVA As Boolean) As Recordset
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
        sql = " SELECT  SUM(ivk.preciototal) AS PTIva,SUM(ivk.preciorealtotal) AS  PTR, "
        sql = sql & "  (sum(ivk.preciototal)-sum(ivk.preciorealtotal)) as DescPro"
        sql = sql & " FROM ivgrupo" & NumGrupo & " ivg inner join ivinventario iv inner join ivkardex ivk  "
        sql = sql & " INNER JOIN  GNCOMPROBANTE g inner join gntrans gnt on g.codtrans= gnt.codtrans "
        sql = sql & " on g.transid = ivk.transid on ivk.idinventario = iv.idinventario on iv.idgrupo" & NumGrupo & "= ivg.idgrupo" & NumGrupo & " "
        sql = sql & " WHERE FECHATRANS BETWEEN " & FechaYMD(fecha, TipoDB) & " AND " & FechaYMD(fecha, TipoDB)
        sql = sql & " AND CODUSUARIO='" & cod & "'"
        sql = sql & " and modulo='IV'"
        If BandIVA Then
            sql = sql & " and ivk.IVA<>0"
        Else
            sql = sql & " and ivk.IVA=0"
        End If
        sql = sql & " and TipoTrans='1'"
        sql = sql & " and ivg.codGrupo" & NumGrupo & " = '" & CodGrupo & "'"
    sql = sql & " GROUP BY ivg.CodGrupo" & NumGrupo & ",ivg.descripcion "
    Set rs = Me.OpenRecordset(sql)
    Set RecuperaDetalleIvGrupoPTIva = rs
    Set rs = Nothing
End Function

'AUC 06/10/2010
Public Function RecuperaDetalleIvRecarDesc(ByVal fecha As Date, ByVal cod As String, NumGrupo As Integer, CodGrupo As String) As Recordset
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
        sql = "SELECT (sum(ivk.preciototal)-sum(ivk.preciorealtotal)) as descu, "
        sql = sql & " case when ivk.iva <>0 then (sum(round(ivk.preciorealtotal,2))* ivk.iva) else 0 end as valiva "
        sql = sql & " FROM ivgrupo" & NumGrupo & " ivg inner join ivinventario iv inner join ivkardex ivk "
        sql = sql & " INNER JOIN  GNCOMPROBANTE g inner join gntrans gnt on g.codtrans= gnt.codtrans  "
        sql = sql & " ON g.transid = ivk.transid ON ivk.idinventario = iv.idinventario on iv.idgrupo" & NumGrupo & "= ivg.idgrupo" & NumGrupo & ""
        sql = sql & " WHERE FECHATRANS BETWEEN " & FechaYMD(fecha, TipoDB) & " AND " & FechaYMD(fecha, TipoDB)
        sql = sql & " AND CODUSUARIO='" & cod & "'"
        sql = sql & " AND modulo='IV'"
        sql = sql & " and TipoTrans='1'"
        sql = sql & " AND ivg.codgrupo" & NumGrupo & "= '" & CodGrupo & "'"
        sql = sql & " GROUP BY ivk.iva,ivg.codgrupo" & NumGrupo & ""
    Set rs = Me.OpenRecordset(sql)
    Set RecuperaDetalleIvRecarDesc = rs
    Set rs = Nothing
End Function


Public Function RecuperaIVPromocion(key As Variant) As IVPromocion
    Dim obj As IVPromocion
    
    Set obj = New IVPromocion
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaIVPromocion = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CreaIVPromocion() As IVPromocion
    Dim obj As IVPromocion
    
    Set obj = New IVPromocion
    Set obj.Empresa = Me
    Set CreaIVPromocion = obj
    Set obj = Nothing
End Function



Public Function ListaIVPromocion(BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset, NumIVGrupo As Integer
    sql = " Select codPromocion,descripcion, bandvalida, "
    sql = sql & " bandcaducidad, "
    sql = sql & " bandxitem "
    sql = sql & " from "
    sql = sql & " IVPromocion"
    sql = sql & " order by idPromocion "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVPromocion = rs
    Else
        ListaIVPromocion = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


Public Function ListaIVGrupoParaFlexGridDescripcion(NumGrupo As Integer) As String
    Dim sql As String, s As String
    Dim rs As Recordset
    
    sql = "SELECT Descripcion, CodGrupo" & NumGrupo & " FROM IVGrupo" & NumGrupo
    sql = sql & " WHERE BandValida=" & CadenaBool(True, TipoDB)
    sql = sql & " ORDER BY Descripcion"
    
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
'    s = "|" & GetStringDAO(rs)         '*** MAKOTO 07/ago/2000 Modificado
    If Not rs.EOF Then s = "|" & GetStringDAO(rs, 20 + 50)      '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|", "(nulo)")
#End If
    ListaIVGrupoParaFlexGridDescripcion = s
    rs.Close
    Set rs = Nothing
End Function

Public Function BuscaPromocionesValidas(ByVal fecha As Date, ByVal Hora As Date) As String
    Dim sql As String, s As String
    Dim rs As Recordset
    sql = " select top 1 CodPromocion from ivpromocion"
    sql = sql & " Where BandValida = 1"
    sql = sql & " and ((bandcaducidad=0) or"
    sql = sql & " (bandcaducidad=1 )) "
   sql = sql & " and (" & FechaYMD(fecha, mProps.TipoDB) & " between fechadesde and fechahasta )"
'    sql = sql & " and (" & FechaYMD(Hora, mProps.TipoDB) & " between horadesde and horahasta)))"
   sql = sql & " order by fechagrabado desc "
    
    
    
    
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        BuscaPromocionesValidas = rs.Fields("CodPromocion")
    Else
        BuscaPromocionesValidas = ""
    End If
    rs.Close
    Set rs = Nothing
End Function



Public Function RecuperaCondicionesPromocion(ByVal codPromo As String) As Variant
    Dim sql As String, s As String
    Dim rs As Recordset

End Function


Public Function RecuperaDetalleSinConIva(ByVal fecha As Date, ByVal codUsuario As String, BandIVA As Boolean) As Currency
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim Valor As Currency
        sql = " SELECT  SUM(ivk.preciorealtotal) AS  PTR"
        sql = sql & " FROM ivkardex ivk  "
        sql = sql & " INNER JOIN  GNCOMPROBANTE g inner join gntrans gnt on g.codtrans= gnt.codtrans "
        sql = sql & " on g.transid = ivk.transid "
        sql = sql & " WHERE FECHATRANS BETWEEN " & FechaYMD(fecha, TipoDB) & " AND " & FechaYMD(fecha, TipoDB)
        sql = sql & " AND CODUSUARIO='" & codUsuario & "'"
        sql = sql & " and modulo='IV'"
        sql = sql & " and TipoTrans='1'"
        sql = sql & " AND g.estado<>3 "
        If BandIVA Then
            sql = sql & " and ivk.IVA<>0"
        Else
            sql = sql & " and ivk.IVA=0"
        End If
    Set rs = Me.OpenRecordset(sql)
    If Not IsNull(rs!ptr) Then
        Valor = rs!ptr
    Else
        Valor = 0
    End If
    RecuperaDetalleSinConIva = Valor
    Set rs = Nothing
End Function

Public Function RecuperaDetalleTotalDesc(ByVal fecha As Date, ByVal codUsuario As String) As Currency
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim Valor As Currency
        sql = " SELECT SUM(ivk.preciototal)- SUM(ivk.preciorealtotal) AS  TotDes"
        sql = sql & " FROM ivkardex ivk  "
        sql = sql & " INNER JOIN  GNCOMPROBANTE g inner join gntrans gnt on g.codtrans= gnt.codtrans "
        sql = sql & " on g.transid = ivk.transid "
        sql = sql & " WHERE FECHATRANS BETWEEN " & FechaYMD(fecha, TipoDB) & " AND " & FechaYMD(fecha, TipoDB)
        sql = sql & " AND CODUSUARIO='" & codUsuario & "'"
        sql = sql & " and modulo='IV'"
        sql = sql & " and TipoTrans='1'"
        sql = sql & " AND g.estado<>3 "
    Set rs = Me.OpenRecordset(sql)
    If Not IsNull(rs!totdes) Then
        Valor = rs!totdes
    Else
        Valor = 0
    End If
    RecuperaDetalleTotalDesc = Valor
    Set rs = Nothing
End Function

Public Function RecuperaDetalleTotalIVA(ByVal fecha As Date, ByVal codUsuario As String) As Currency
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim Valor As Currency
        sql = " SELECT SUM(ivk.preciorealtotal) * ivk.iva AS  TotDes"
        sql = sql & " FROM ivkardex ivk  "
        sql = sql & " INNER JOIN  GNCOMPROBANTE g inner join gntrans gnt on g.codtrans= gnt.codtrans "
        sql = sql & " on g.transid = ivk.transid "
        sql = sql & " WHERE FECHATRANS BETWEEN " & FechaYMD(fecha, TipoDB) & " AND " & FechaYMD(fecha, TipoDB)
        sql = sql & " AND CODUSUARIO='" & codUsuario & "'"
        sql = sql & " and modulo='IV'"
        sql = sql & " and TipoTrans='1'"
        sql = sql & " and ivk.iva <> 0"
        sql = sql & " AND g.estado<>3 "
        sql = sql & " Group by ivk.IVA"
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        Valor = rs!totdes
    Else
        Valor = 0
    End If
    RecuperaDetalleTotalIVA = Valor
    Set rs = Nothing
End Function
'AUC
Public Sub VerificaModificacionGNComp( _
                ByVal tid As Long, ByRef tidDestino As Long)
    Dim sql As String, rs As Recordset, s As String
    sql = "SELECT gc.transid, gc.CodTrans,gc.NumTrans, gc.Estado " & _
          "FROM  GNComprobante gc " & _
          "WHERE  gc.idtransfuente = " & tid & _
     " AND (gc.Estado <> " & ESTADO_ANULADO & ") "
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        Do Until rs.EOF
                tidDestino = rs!transid
            rs.MoveNext
        Loop
    End If
    rs.Close
    Set rs = Nothing
End Sub


Public Function RecuperaPCProvClixUsuario(key As String) As PCProvCli
    Dim obj As PCProvCli
    
    Set obj = New PCProvCli
    Set obj.Empresa = Me
    
    On Error Resume Next
    obj.RecuperarxUsusario key
    If Err.Number = 0 Then Set RecuperaPCProvClixUsuario = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function ConsGNTransCruceIVTarjeta(BandForma As Boolean, _
                    Optional ByVal OrdenAscendente As Boolean) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    
    '*** MAKOTO 03/oct/00
    sql = "SELECT"
    
    '*** MAKOTO 05/feb/01 Mod. Aumentado 'NumDocRef' y 'Nombre'
    sql = sql & " TransID, FechaTrans , ID, CodTrans, NumTrans, " & _
            "NumDocRef, Nombre, codtarjeta,  codprovclit, NomClientet,  '0' as ValorPagado FROM vwConsGNTransForma "
    
    'Condición de FechaTrans
    cond = "FechaTrans  BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB, True) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB, True)
    
    'Condición de CodTrans
    If Len(cond) > 0 Then cond = cond & " AND "
    If Len(gobjCond.CodTrans) > 0 Then      'Si está especificado transaccion
        'Si es una sola transaccion
        If InStr(gobjCond.CodTrans, ",") = 0 Then
            cond = cond & "(CodTrans=" & gobjCond.CodTrans & ")"
        'Si está seleccionado varias trans.
        Else
            cond = cond & "(CodTrans IN (" & gobjCond.CodTrans & "))"
        End If
    Else
        'Si no hay condicion de cod.trans, selecciona todas las trans.
        ' que tenga permiso
'        s = gobjMain.GrupoActual.PermisoActual.ListaTrans(True)
'        If Len(s) > 0 Then
'            cond = cond & "(CodTrans " & s & ")"
'        Else
            cond = cond & "(CodTrans = '-------')"    'Para que NO devuelva nada si no tiene ningún permiso  '*** MAKOTO 26/dic/00
'        End If
    End If
    
    If Len(gobjCond.CodForma) > 0 Then      'Si está especificado Forma
        'Si es una sola transaccion
        If InStr(gobjCond.CodForma, ",") = 0 Then
            cond = cond & "and (Codforma=" & gobjCond.CodForma & ")"
        'Si está seleccionado varias trans.
        Else
            cond = cond & " and (CodForma IN (" & gobjCond.CodForma & "))"
        End If
    End If
    
    
    
    If Len(cond) > 0 Then sql = sql & " WHERE estado <>3 and " & cond
    
    'Ordern de filas
    If BandForma Then
            sql = sql & " order by Codtarjeta,FechaTrans, HoraTrans, TransID  "
    Else
        sql = sql & " ORDER BY FechaTrans, HoraTrans, TransID"
    End If
    

    Set rs = Me.OpenRecordset(sql)
    Set ConsGNTransCruceIVTarjeta = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta General " & gobjCond.fecha1 + gobjCond.Hora1 & "-" & gobjCond.fecha2 + gobjCond.Hora2, "GN"
End Function


Public Function CalculaValorDetalleCobrosClientes(ByVal transid As Long) As Currency
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    
    sql = "  select ISNULL(Sum(Valor),0) AS Valor "
    sql = sql & "from TSDetalleIngreso"
    sql = sql & " Where Transid = " & transid
    
    Set rs = Me.OpenRecordset(sql)
    
    If rs.RecordCount > 0 Then
        CalculaValorDetalleCobrosClientes = rs.Fields("Valor")
    Else
        CalculaValorDetalleCobrosClientes = 0
    End If
    Set rs = Nothing
End Function

Public Function RecuperaUltimoNumDescto() As Long
    Dim sql As String, s As String
    Dim rs As Recordset, rs1 As Recordset
    
    sql = " select  top 1 coddescuento "
    sql = sql & " from IVDescuento "
    sql = sql & " order by Iddescuento desc "
    
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        RecuperaUltimoNumDescto = rs.Fields("coddescuento")
    Else
        RecuperaUltimoNumDescto = 0
    End If
    rs.Close
    Set rs = Nothing
End Function

Public Function ListaTSFormaCobroPagoControlFormas(ByVal BandCobro As Boolean, ByVal CodGrupo As String, SoloContado As Boolean) As Variant
    Dim sql As String, s As String, i As Integer
    Dim rs As Recordset
        sql = "SELECT CodForma,NombreForma"
          sql = sql & " From  TSFormaCobroPago "
          sql = sql & " Where tsformacobropago.notacredito LIKE '" & "%" & CodGrupo & "%" & "'"
          sql = sql & " AND BandCobro=" & CadenaBool(BandCobro, TipoDB)
          If SoloContado Then
            sql = sql & " AND ConsiderarComoEfectivo  = 1 "
          End If
          sql = sql & " ORDER BY CodForma "
   Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount = 0 Then
         rs.Close
         Set rs = Nothing
         sql = "SELECT CodForma,NombreForma"
         sql = sql & " FROM TSFormaCobroPago WHERE "
         sql = sql & " BandCobro=" & CadenaBool(BandCobro, TipoDB)
         sql = sql & " AND BandValida=" & CadenaBool(True, TipoDB)
         sql = sql & " ORDER BY CodForma "
         Set rs = Me.OpenRecordset(sql)
    End If
    
    ListaTSFormaCobroPagoControlFormas = MiGetRows(rs)
   rs.Close
    Set rs = Nothing
End Function

Public Function ListaTSFormaCobroPagoParaFlexContolFormasSoloEfectivo(ByVal BandCobro As Boolean, ByVal CodGrupo As String, SoloContado As Boolean) As String
    Dim sql As String, s As String, i As Integer
    Dim rs As Recordset
        sql = "SELECT CodForma,NombreForma"
          sql = sql & " From  TSFormaCobroPago "
          sql = sql & " Where tsformacobropago.notacredito LIKE '" & "%" & CodGrupo & "%" & "'"
          If SoloContado Then
            sql = sql & " AND ConsiderarComoEfectivo  = 1 "
          End If
          
          sql = sql & " AND BandCobro=" & CadenaBool(BandCobro, TipoDB)
'          sql = sql & " AND BandValida=" & CadenaBool(True, TipoDB)
          sql = sql & " ORDER BY CodForma "
   Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount = 0 Then
         rs.Close
         Set rs = Nothing
         sql = "SELECT CodForma,NombreForma"
         sql = sql & " FROM TSFormaCobroPago WHERE "
         sql = sql & " BandCobro=" & CadenaBool(BandCobro, TipoDB)
         sql = sql & " AND BandValida=" & CadenaBool(True, TipoDB)
         sql = sql & " ORDER BY CodForma "
         Set rs = Me.OpenRecordset(sql)
    End If
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 5 + 20)          '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    ListaTSFormaCobroPagoParaFlexContolFormasSoloEfectivo = s
   rs.Close
    Set rs = Nothing
End Function

Public Function VerificaDesctoPCxIVxFecha(ByVal codDesc As String, ByVal codFC As String) As Double
Dim sql As String, rs As Recordset, NumIVGrupo As Integer, NumPCGrupo As Integer
    NumIVGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumIVGrupo")) + 1
    NumPCGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumPCGrupo")) + 1
    
    
    
    sql = " select top 1 ivdiv.descuento-penal as descto "
    sql = sql & " from ivdescuento ivd"
    sql = sql & " inner join ivdescuentodetalleFC ivdfc"
    sql = sql & " inner join tsformacobropago tsf"
    sql = sql & " on tsf.idforma=ivdfc.idforma"
    sql = sql & " on ivd.iddescuento = ivdfc.iddescuento"
    sql = sql & " inner join ivdescuentodetalleiv ivdiv"
    sql = sql & " on ivd.iddescuento = ivdiv.iddescuento"

    sql = sql & " where coddescuento='" & codDesc & "'"
    sql = sql & " and codforma='" & codFC & "'"
    
    
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        VerificaDesctoPCxIVxFecha = rs!descto
    End If
    Set rs = Nothing
End Function

Public Function ObtieneDesctoPCxIVxFecha(ByVal CodIVGrupo As String, ByVal codPC As String, ByVal codFC As String, ByRef CodDescuento As String) As Double
Dim sql As String, rs As Recordset, NumIVGrupo As Integer, NumPCGrupo As Integer
    CodDescuento = ""
    NumIVGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumIVGrupo")) + 1
    NumPCGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumPCGrupo")) + 1
    
    sql = " select top 1"
    sql = sql & " ivD.codDescuento as codDesc,"
    sql = sql & " case when ivdiv.Descuento-Penal>0 then ivdiv.Descuento-Penal else 0 end as TotalDesc, "
    sql = sql & " ivd.IdDescuento , ivd.BandCaducidad, ivd.FechaDesde, ivd.FechaHasta "
    sql = sql & " From"
    sql = sql & " ivdescuentodetallepc ivdpc "
    sql = sql & " left join pcprovcli pcc  on ivdpc.idprovcli=pcc.idprovcli"
    sql = sql & " left join pcgrupo" & NumPCGrupo & " pcg "
    sql = sql & " inner join pcprovcli pc "
    sql = sql & " on pcg.idgrupo" & NumPCGrupo & "=pc.idgrupo" & NumPCGrupo
    sql = sql & " on ivdpc.IdPCGrupo = pcg.idgrupo" & NumPCGrupo
    sql = sql & " inner join ivdescuentodetalleiv ivdiv "
    sql = sql & " inner join ivgrupo" & NumIVGrupo & " ivg "
    sql = sql & " on ivdiv.IdIVGrupo = ivg.idgrupo" & NumIVGrupo
    sql = sql & " inner join ivdescuentodetallefc ivdfc "
    sql = sql & " inner join TsFormaCobroPago tsf "
    sql = sql & " on ivdfc.idforma=tsf.idforma"
    sql = sql & " inner join ivdescuento ivd"
    sql = sql & " on ivd.iddescuento=ivdfc.iddescuento"
    sql = sql & " on ivd.iddescuento=ivdiv.iddescuento"
    sql = sql & " on ivd.iddescuento=ivdpc.iddescuento"
    sql = sql & " WHERE "
    sql = sql & " ivd.BandValida=1 and "
    sql = sql & " ivg.CodGrupo" & NumIVGrupo & " = '" & CodIVGrupo & "'"
    sql = sql & " and ( pc.CodProvCli ='" & codPC & "' or pcc.CodProvCli ='" & codPC & "')"
    sql = sql & " and tsf.codforma='" & codFC & "'"
    sql = sql & " order by ivd.fechagrabado"
    
    Set rs = Me.OpenRecordset(sql)
    
    
    
    
    
    If Not rs.EOF Then
        ObtieneDesctoPCxIVxFecha = rs!TotalDesc
        CodDescuento = rs!codDesc
    End If
    Set rs = Nothing
End Function

Public Function RecuperaIdBodega(ByVal codBod As String) As Long
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    
    sql = "  select idBodega "
    sql = sql & "from IVBodega "
    sql = sql & " Where codbodega= '" & codBod & "'"
    
    Set rs = Me.OpenRecordset(sql)
    
    If rs.RecordCount > 0 Then
        RecuperaIdBodega = rs.Fields("IdBodega")
    End If
    Set rs = Nothing
End Function

Public Function CargaMermas(ByVal bandVenta As Boolean) As Variant
    Dim sql As String, cond As String, CadenaPrecio As String, Trans As String
    Dim cadempresa As String, cadBodega As String, totalcero As Boolean, cond1 As String
    Dim v As Variant, max As Integer, TotalC As String, TotalP As String, i As Integer, rs As Recordset, TotalCMAx As String
    Dim CodInv As String, codBod As String, Orden As String, cadTrans As String
    Dim W As Variant, j As Integer, Grupo As String
    Dim vBod As Variant, vNomEmp As Variant, vTrans As Variant
    Dim Cadtitulo As String, k As Integer
    Dim condTrans As String, vaux As Variant
    Dim numReg As Long, numMoneda As String
    Dim cadETrans As Variant, cadEBodega As Variant, basePrincipal As String
    Dim TotalE As String, TotalProm As String, difDias As Integer, Intervalo As Double
    Dim TotalCUC As String, TotalUtil As String, TotalPUtil As String, Fijo As Integer
    Dim NumMeses As Long
    With gobjCond
    sql = "select idinventario, sum(abs(cantidad)) as cantIngresada, ivb.idbodega"
    sql = sql & " Into Tmp0"
    sql = sql & " from gntrans gnt inner join gncomprobante g"
    sql = sql & " inner join ivkardex i inner join ivbodega ivb on ivb.idbodega = i.idbodega   "
    sql = sql & " on g.transid=i.transid on g.codtrans = gnt.codtrans"
    If bandVenta Then
        sql = sql & " inner join Anexo_Comprobantes a on a.codcomprobante= gnt.anexocodtipocomp"
    Else
        sql = sql & " inner join Anexos_Transacciones a on a.codtrans= gnt.AnexoCodTipoTrans"
    End If
    sql = sql & " inner join gnsucursal s on s.idsucursal= gnt.idsucursal"
   sql = sql & " Where Estado <> 3"
    If bandVenta Then
        sql = sql & " and A.codcomprobante IN (" & .CodComp & ")"
    Else
        sql = sql & " and A.codTrans IN (" & .CodComp & ")"
    End If
    sql = sql & " and g.fechatrans between '" & .fecha1 & "' and  '" & .fecha2 & "'"
    sql = sql & " and ivb.codbodega = '" & .CodBodega1 & "'"
    sql = sql & " and s.codsucursal in ('" & .Sucursal & "')"
    sql = sql & " group by idinventario, ivb.idbodega"
        VerificaExistenciaTabla 0
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
    'AQUI LA EXISTENCIA OTRA VEZ
    sql = "SELECT IVInventario.idinventario, IVBodega.idbodega, SUM(IVKardex.Cantidad) AS Existencia  "
    sql = sql & " INTO TMP1 From IVGrupo1 RIGHT JOIN (IVGrupo2 RIGHT JOIN (IVGrupo3 RIGHT JOIN (IVGrupo4 RIGHT JOIN  (IVInventario "
    sql = sql & " INNER JOIN (IVBodega INNER JOIN (IVKardex INNER JOIN (GNtrans "
    sql = sql & " LEFT JOIN gnsucursal g on g.idsucursal = gntrans.idsucursal "
    sql = sql & " INNER JOIN GNComprobante ON GNtrans.Codtrans = GNCOmprobante.Codtrans) ON IVKardex.transID = GNComprobante.transID) "
    sql = sql & " ON IVBodega.IdBodega = IVKArdex.IdBodega)ON IVInventario.IdInventario = IVKardex.IdInventario) "
    sql = sql & " ON  IVGrupo4.IdGrupo4 = IVInventario.IdGrupo4) ON IVGrupo3.Idgrupo3 = IvInventario.Idgrupo3)"
    sql = sql & " ON IVGrupo2.Idgrupo2 = IvInventario.Idgrupo2)  ON IVGrupo1.Idgrupo1 = IvInventario.Idgrupo1   "
    sql = sql & " WHERE ((GNtrans.AfectaCantidad) = 1)  AND GNComprobante.Estado <> 3 AND BandServicio = 0 "
    sql = sql & " AND GNComprobante.FechaTrans <= '" & .fecha2 & "'"
    sql = sql & " AND ivinventario.pordesperdicio <> 0 "
    'sql = sql & " AND G.codsucursal in ('" & .Sucursal & "')"
    If Not (Len(.Grupo1) = 0 And Len(.Grupo2) = 0) Then
        sql = sql & "   AND (codGrupo" & .NumGrupo & " BETWEEN '" & _
        .Grupo1 & "' AND '" & .Grupo2 & "') "
    End If
    If Not (Len(.CodItem1) = 0 And Len(.CodItem2) = 0) Then
        sql = sql & "   AND (CodInventario BETWEEN '" & .CodItem1 & "' AND '" & .CodItem2 & "') "
    End If
    If Not (Len(.CodBodega1) = 0) Then
        sql = sql & "   AND (CodBodega = '" & .CodBodega1 & "') "
    End If
    
    If Not (Len(.CodBodega1) = 0) Then
        sql = sql & "   AND (CodBodega = '" & .CodBodega1 & "') "
    End If
    
    
    sql = sql & "  GROUP BY IVInventario.idinventario,IVBodega.idbodega,IVInventario.Descripcion"
        VerificaExistenciaTabla 1
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
    sql = "  select "
    sql = sql & "  ivb.idbodega, codbodega,"
    sql = sql & "  ivI.IdInventario, CodInventario, ivi.Descripcion,T1.existencia,"
   sql = sql & "  isnull(t0.cantIngresada,0) as cc,ivi.pordesperdicio, t0.cantIngresada*ivi.pordesperdicio as CantDes   "
    sql = sql & "  From"
    sql = sql & "  IVBodega ivb"
   sql = sql & "  inner join  ivinventario ivi"
    sql = sql & "  left join ivgrupo1 ivg1"
    sql = sql & "  on ivi.idgrupo1 = ivg1.idgrupo1"
    sql = sql & "  left join ivgrupo2 ivg2"
    sql = sql & "  on ivi.idgrupo2 = ivg2.idgrupo2"
    sql = sql & "  left join ivgrupo3 ivg3"
    sql = sql & "  on ivi.idgrupo3 = ivg3.idgrupo3"
    sql = sql & "  left join ivgrupo4 ivg4"
    sql = sql & "  on ivi.idgrupo4 = ivg4.idgrupo4"
    sql = sql & "  left join ivgrupo5 ivg5"
    sql = sql & "  on ivi.idgrupo5 = ivg5.idgrupo5"
    sql = sql & "  inner join tmp1 t1  on ivi.idinventario = t1.idinventario on ivb.idbodega=t1.idbodega   "
    sql = sql & "  inner join tmp0 t0  on ivi.idinventario = t0.idinventario and ivb.idbodega=t0.idbodega     "
   sql = sql & "  Where ivi.bandservicio=0 "
    If Not (Len(.Grupo1) = 0 And Len(.Grupo2) = 0) Then
        sql = sql & "   AND (codGrupo" & .NumGrupo & " BETWEEN '" & _
        .Grupo1 & "' AND '" & .Grupo2 & "') "
    End If
    If Not (Len(.CodItem1) = 0 And Len(.CodItem2) = 0) Then
        sql = sql & "   AND (CodInventario BETWEEN '" & .CodItem1 & "' AND '" & .CodItem2 & "') "
    End If
    If Not (Len(.CodBodega1) = 0) Then
        sql = sql & "   AND (CodBodega = '" & .CodBodega1 & "') "
    End If
    sql = sql & "  order by codbodega, codinventario "
       Set rs = gobjMain.EmpresaActual.OpenRecordset(sql)
    Set CargaMermas = rs
    Set rs = Nothing
    End With
End Function

'AUC filtro de trans por sucursal y tipocomprobante
Public Function ListaGNTransTipoComprobante( _
                    BandInvisibles As Boolean, _
                    BandRS As Boolean, _
                    TipoComp As String, codsuc As String) As Variant
    Dim sql As String, cond As String, rs As Recordset
    sql = "SELECT g.CodTrans, NombreTrans FROM GNTrans g  "
    sql = sql & " inner join Anexo_comprobantes a on a.codcomprobante=G.anexocodtipocomp "
    sql = sql & " inner join gnsucursal s on s.idsucursal=G.idsucursal "
    If Not BandInvisibles Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "BandVisible=" & CadenaBool(True, TipoDB)
    End If
    If Len(cond) > 0 Then sql = sql & "WHERE " & cond
    sql = sql & " and a.codcomprobante in (" & TipoComp & ")"
    If Len(codsuc) > 0 Then sql = sql & " and s.codsucursal in (" & codsuc & ")"
    sql = sql & " ORDER BY g.CodTrans"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaGNTransTipoComprobante = rs
    Else
        ListaGNTransTipoComprobante = MiGetRows(rs)
        rs.Close
   End If
    Set rs = Nothing
End Function

Public Function AgregaItemsConExistencia(ByVal mobjGNComp As GNComprobante) As Recordset
    Dim sql As String, rs As Recordset
    sql = "SELECT IVI.CodInventario, IVI.Descripcion, " & _
          "IVBodega.CodBodega, SUM(IVKardex.Cantidad) AS Existencia " & _
          "FROM IVInventario ivi   "
    sql = sql & "  left join ivgrupo1 ivg1"
    sql = sql & "  on ivi.idgrupo1 = ivg1.idgrupo1"
    sql = sql & "  left join ivgrupo2 ivg2"
    sql = sql & "  on ivi.idgrupo2 = ivg2.idgrupo2"
    sql = sql & "  left join ivgrupo3 ivg3"
    sql = sql & "  on ivi.idgrupo3 = ivg3.idgrupo3"
    sql = sql & "  left join ivgrupo4 ivg4"
    sql = sql & "  on ivi.idgrupo4 = ivg4.idgrupo4"
    sql = sql & "  left join ivgrupo5 ivg5"
    sql = sql & "  on ivi.idgrupo5 = ivg5.idgrupo5"
    sql = sql & " INNER JOIN (IVBodega INNER JOIN " & _
                  "(IVKardex INNER JOIN " & _
                  "(GNtrans  INNER JOIN GNComprobante " & _
                  "ON GNtrans.Codtrans = GNCOmprobante.Codtrans) " & _
                  "ON IVKardex.transID = GNComprobante.transID) " & _
                  "ON IVBodega.IdBodega = IVKArdex.IdBodega) " & _
                  "ON IVI.IdInventario = IVKardex.IdInventario "
    sql = sql & "WHERE  (GNComprobante.FechaTrans <= '" & gobjCond.fecha2 & "')  AND " & _
                "(IVI.BandValida = 1) AND " & _
                "(GNtrans.AfectaCantidad = 1)  AND " & _
                "(GNComprobante.Estado <> 3) AND " & _
                "(IVI.BandServicio = 0) AND " & _
                "(IVI.CodInventario NOT IN (SELECT CodInventario FROM tmpIVFisico GROUP BY CodInventario)) "
    'If Len(mobjGNComp.GNTrans.CodBodegaPre) > 0 Then
        sql = sql & "AND (IVBodega.CodBodega='" & gobjCond.CodBodega1 & "') "
   ' End If
   If Not (Len(gobjCond.Grupo1) = 0 And Len(gobjCond.Grupo2) = 0) Then
        sql = sql & "   AND (codGrupo" & gobjCond.NumGrupo & " BETWEEN '" & _
        gobjCond.Grupo1 & "' AND '" & gobjCond.Grupo2 & "') "
    End If
    
    If mobjGNComp.GNTrans.IVAgregaFilaIVGrupo Then
    
    If Len(mobjGNComp.Descripcion) > 0 Then
        sql = sql & "   AND codGrupo1 IN (" & Mid$(mobjGNComp.Descripcion, 1, Len(mobjGNComp.Descripcion) - 1) & ")"
    End If
    End If
    
    sql = sql & "GROUP BY IVI.CodInventario, IVI.Descripcion, IVBodega.CodBodega " & _
                "Having Sum(IVKardex.Cantidad) <> 0 " & _
                "ORDER BY SUM(IVKardex.Cantidad)"
    Set rs = gobjMain.EmpresaActual.OpenRecordset(sql)
    Set AgregaItemsConExistencia = rs
    If Not (rs Is Nothing) Then Set rs = Nothing
End Function


Public Function ListaIVItemParaFlexPorcentaje(CodBodega As String, _
                                    CodGrupo1 As String, _
                                    CodGrupo2 As String, _
                                    CodGrupo3 As String, _
                                    CodGrupo4 As String, _
                                    CodGrupo5 As String) As String
    Dim sql As String, cond As String, s As String
    Dim rs As Recordset
    
    sql = "SELECT CodInventario,Descripcion FROM vwIVInventarioRecuperar"
    
'*** CodBodega No tiene efecto
'    If Len(CodBodega) > 0 Then
'        If Len(cond) > 0 Then cond = cond & "AND "
'        cond = cond & "CodBodega ='" & CodBodega & "' "
'    End If
    
    If CodGrupo1 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo1='" & CodGrupo1 & "' "
    End If
    If CodGrupo2 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo2='" & CodGrupo2 & "' "
    End If
    If CodGrupo3 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo3='" & CodGrupo3 & "' "
    End If
    If CodGrupo4 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo4='" & CodGrupo4 & "' "
    End If
    If CodGrupo5 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo5='" & CodGrupo5 & "' "
    End If
    'jeaa 01/12/2005
        sql = sql & " WHERE  BandValida= 1    "
    If Len(cond) > 0 Then sql = sql & " and " & cond
    sql = sql & " ORDER BY CodInventario"

    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 20 + 80)     'Código=20, Descripcion=80      '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    
    ListaIVItemParaFlexPorcentaje = s
    rs.Close
    Set rs = Nothing
End Function


Public Function BuscaVariasPromocionesValidas(ByVal fecha As Date, ByVal Hora As Date, ByRef rsP As Recordset) As Recordset
    Dim sql As String, s As String
    Dim rs As Recordset
    sql = " select CodPromocion from ivpromocion"
    sql = sql & " Where BandValida = 1"
    sql = sql & " and ((bandcaducidad=0) or"
    sql = sql & " (bandcaducidad=1 )) "
   sql = sql & " and (" & FechaYMD(fecha, mProps.TipoDB) & " between fechadesde and fechahasta )"
'    sql = sql & " and (" & FechaYMD(Hora, mProps.TipoDB) & " between horadesde and horahasta)))"
   sql = sql & " order by fechagrabado desc "
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        Set BuscaVariasPromocionesValidas = rs
        Set rsP = rs
    Else
        Set BuscaVariasPromocionesValidas = Null
    End If
    rs.Close
    Set rs = Nothing
End Function

Public Function RecuperaPesoBandaISO(BandRS As Boolean, codDisenio As String, CodTamanio As String) As Currency
    Dim sql As String, rs As Recordset
    
    sql = " select isnull(ValorPeso,0) as ValorPeso "
    sql = sql & " from ivinventario ivi"
    sql = sql & " inner join ivespprodiso ivt"
    sql = sql & " inner join ivinventario iviD"
    sql = sql & " on ivid.idinventario=ivt.Iddisenio"
    sql = sql & " on ivi.idinventario=ivt.IdTamanio"
    sql = sql & " where ivid.codinventario='" & codDisenio & "'"
    sql = sql & " and ivi.codinventario ='" & CodTamanio & "'"
    
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        RecuperaPesoBandaISO = rs.Fields("ValorPeso")
    Else
        RecuperaPesoBandaISO = 0
    End If
    Set rs = Nothing
End Function

Public Function RecuperaPrecioDisenio(ByVal CodTamanio As String, ByVal codDisenio As String) As Currency
Dim sql As String, rs As Recordset
    sql = " SELECT top 1 isnull(Precio,0) as Precio "
     sql = sql & " from IVEspProdISO ive inner join ivinventario ivtam"
    sql = sql & " on ive.IdTamanio=ivtam.idinventario"
    sql = sql & " inner join ivinventario ivtra"
    sql = sql & " on ive.Idtrabajo=ivtra.idinventario"
    sql = sql & " WHERE ivtam.codinventario ='" & CodTamanio & "'"
    sql = sql & " and ivtra.codinventario='" & codDisenio & "'"
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        RecuperaPrecioDisenio = rs.Fields("Precio")
    Else
        RecuperaPrecioDisenio = 0
    End If
       rs.Close
    Set rs = Nothing
End Function

Public Function RecuperaOrdenISO(ByVal Id As Long) As Long
Dim sql As String, rs As Recordset
   
    
    sql = " select orden from gncomprobante g"
    sql = sql & " inner join ivkardex i on g.transid=i.transid"
    sql = sql & " where codtrans='incar' and tiempoentrega = " & Id
    
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        RecuperaOrdenISO = rs.Fields("orden")
    Else
        RecuperaOrdenISO = 0
    End If
       rs.Close
    Set rs = Nothing
End Function


Public Function BuscaPromocionesValidasxSucursal(ByVal fecha As Date, ByVal Hora As Date, ByVal CodSucursal As String) As String
    Dim sql As String, s As String
    Dim rs As Recordset
   
    
    sql = " select CodPromocion from ivpromocion"
    sql = sql & " Where ivpromocion.BandValida = 1"
    sql = sql & " and ((bandcaducidad=0) or"
    sql = sql & " (bandcaducidad=1 )) "
   sql = sql & " and (" & FechaYMD(fecha, gobjMain.TipoDB) & " between fechadesde and fechahasta )"
   sql = sql & " and (" & HoraHMSNew(Hora, gobjMain.TipoDB, False, True) & " between HORAdesde and hORAhasta )"
   sql = sql & " and (codsucursales like '%" & CodSucursal & "%')"
   sql = sql & " order by ivpromocion.fechagrabado desc "
    
    
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        BuscaPromocionesValidasxSucursal = rs.Fields("CodPromocion")
    Else
        BuscaPromocionesValidasxSucursal = ""
    End If
    rs.Close
    Set rs = Nothing
End Function

Public Function BuscaDatosInventarioISO(ByVal Id As Long, campo As String) As String
    Dim sql As String, s As String
    Dim rs As Recordset
   
    
    sql = " select " & campo & " as campo from ivinventariodetalleISO"
    sql = sql & " Where id = " & Id
    
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        BuscaDatosInventarioISO = rs.Fields("campo")
    Else
        BuscaDatosInventarioISO = ""
    End If
    rs.Close
    Set rs = Nothing
End Function

Public Function CalculaCostoProceso(ByVal Ticket As Long) As Currency
    Dim sql As String, s As String
    Dim rs As Recordset
   
    
    sql = " select isnull(sum(costo),0) as TotalCosto from IVConsumoDetalle ivc inner join ivinventario i on ivc.idinventario=i.idinventario where bandservicio=0 and  ticket=" & Ticket
    
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        CalculaCostoProceso = rs.Fields("TotalCosto")
    Else
        CalculaCostoProceso = 0
    End If
    rs.Close
    Set rs = Nothing
End Function

Public Function ObtieneCampoDetalleTicket(ByVal Ticket As Long, campo As String) As String
    Dim sql As String, s As String
    Dim rs As Recordset
   
    
    sql = " select " & campo & " as campo from ivinventariodetalleiso i inner join gncomprobante g on i.transid=g.transid where id=" & Ticket
    
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        If campo = "TransIDFacturaCarc" Or campo = "secuencial" Then
            ObtieneCampoDetalleTicket = IIf(rs.Fields("campo") = 0, False, True)
        Else
            ObtieneCampoDetalleTicket = rs.Fields("campo")
        End If

    Else
        ObtieneCampoDetalleTicket = 0
    End If
    rs.Close
    Set rs = Nothing
End Function


Public Function ListaICEParaFlexGrid() As String
    Dim sql As String, s As String
    Dim rs As Recordset
    
    sql = "SELECT Codice,Descripcion FROM IVRecargoICE  "
    sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    sql = sql & " ORDER BY Codice"

    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 10 + 40)         '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|", "(nulo)")
#End If
    ListaICEParaFlexGrid = s
    rs.Close
    Set rs = Nothing
End Function

Public Function CalculaPrecioReparacion(ByVal Ticket As Long) As Currency
    Dim sql As String, s As String
    Dim rs As Recordset
   
    
    sql = " select isnull(sum(precio),0) as TotalPrecio from IVConsumoDetalle where ticket=" & Ticket
    
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        CalculaPrecioReparacion = rs.Fields("TotalPrecio")
    Else
        CalculaPrecioReparacion = 0
    End If
    rs.Close
    Set rs = Nothing
End Function

'Para Kardex de items ISO
Public Function ConsIVKardexISO() As Variant
    Dim sql As String, cond As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsIVKardexPorFecha")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("prmCodBodega") = gobjCond.CodBodega1
    qdef.Parameters("CodItem1") = IIf(Len(gobjCond.CodItem1) = 0, "!", gobjCond.CodItem1)
    qdef.Parameters("CodItem2") = IIf(Len(gobjCond.CodItem2) = 0, String$(20, "z"), gobjCond.CodItem2)
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient

    sql = "spConsIVKardexPorFecha " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodBodega1 & "','" & _
                 gobjCond.CodItem1 & "','" & _
                 gobjCond.CodItem2 & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB)
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    Set ConsIVKardexISO = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Kardex inv. ISO" & gobjCond.fecha1 & "-" & gobjCond.fecha2, "IV"
End Function

Public Function CreaPRCuenta() As PRCuenta
    Dim obj As PRCuenta
   Set obj = New PRCuenta
    Set obj.Empresa = Me
    Set CreaPRCuenta = obj
    Set obj = Nothing
End Function


Public Function RecuperaPRCuenta(key As Variant) As PRCuenta
    Dim obj As PRCuenta
    Set obj = New PRCuenta
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaPRCuenta = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function ListaPRCuenta(IncluyeTotal As Boolean, TipoCuenta As Integer, bandResumido As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, cond As String
    Dim rs As Recordset
    
    If bandResumido Then
        sql = "SELECT CodCuenta, NombreCuenta FROM PRCuenta "
    Else
        sql = "SELECT CodCuenta, NombreCuenta, Nivel, CodCuentaSuma, TipoCuenta, BandTotal FROM vwPRCuenta "
    End If
    
    If TipoCuenta <> 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "TipoCuenta=" & TipoCuenta & " "
    End If
    If Not IncluyeTotal Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "BandTotal=" & CadenaBool(False, TipoDB)
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    
    sql = sql & " ORDER BY CodCuenta"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPRCuenta = rs
    Else
        ListaPRCuenta = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

'Devuelve una cadena para asignar a ListCombo de vsFlexGrid
Public Function ListaPRCuentaParaFlexGrid(TipoCuenta As Integer) As String
    Dim sql As String, cad As String, rs As Recordset
    
    sql = "SELECT Codigo, Nombre FROM vwPRCuentaParaCombo WHERE bandvalida=1 "
    If TipoCuenta > 0 Then sql = sql & " and TipoCuenta=" & TipoCuenta
    sql = sql & " ORDER BY Codigo"
    Set rs = Me.OpenRecordset(sql)

    'Pero por ahora uso lo siguiente para controlar cuentas de total y de movimiento
#If DAOLIB Then
    cad = "|" & GetStringDAO(rs, 21 + (20 + 80 + 2))        'Código+'*'=21, Space+NombreCuenta+'[]'=20+80+2
#Else
    If Not rs.EOF Then cad = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    
    rs.Close
    Set rs = Nothing
    
    ListaPRCuentaParaFlexGrid = cad
End Function

Public Function ListaPRCuentaNombreParaFlexGrid(TipoCuenta As Integer) As String
    Dim sql As String, cad As String, rs As Recordset
    
    sql = "SELECT nombre + ' [' + Codigo + ']' FROM vwPRCuentaNombreParaCombo WHERE bandvalida=1"
    If TipoCuenta > 0 Then sql = sql & " and TipoCuenta=" & TipoCuenta
    
    'jeaa 01/12/2005
    sql = sql & " ORDER BY nombre"
    Set rs = Me.OpenRecordset(sql)

    'Pero por ahora uso lo siguiente para controlar cuentas de total y de movimiento
#If DAOLIB Then
    cad = "|" & GetStringDAO(rs, 21 + (20 + 80 + 2))        'Código+'*'=21, Space+NombreCuenta+'[]'=20+80+2
#Else
    If Not rs.EOF Then cad = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    rs.Close
    Set rs = Nothing
    ListaPRCuentaNombreParaFlexGrid = cad
End Function

Public Function VerificaAnulacionGNCompAutoImpresor( _
                ByVal tid As Long, _
                ByVal bandAnulacion As Boolean) As Boolean
    Dim sql As String, rs As Recordset, s As String
    
    sql = "SELECT gc.CodTrans,gc.NumTrans, gc.Estado " & _
          "FROM  GNComprobante gc " & _
          "WHERE  gc.idtransfuente = " & tid
    If bandAnulacion Then       'Cuando está eliminando no debe ir ésta condición
        sql = sql & " AND (gc.Estado <> " & ESTADO_ANULADO & ") "
    End If
    
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        VerificaAnulacionGNCompAutoImpresor = True
    Else
        VerificaAnulacionGNCompAutoImpresor = False
    End If
    rs.Close
    Set rs = Nothing
End Function


Private Function GrabarTransReversionAsiento(ByVal CodTrans As String, gc As GNComprobante, gcPadre As GNComprobante) As Boolean
    Dim Imprime As Boolean, i As Long, ix As Long, j As Integer
    Dim item As IVInventario, rsReceta As Recordset
    Dim cadena As String, aux_inc As Variant
    Dim mobjGNCompAux As GNComprobante
    Dim mobjGNComp As GNComprobante
    Dim comando As String, Nombre As String, TipoTrans As String
    On Error GoTo ErrTrap
    
    Set mobjGNComp = gc
    Set mobjGNCompAux = Me.CreaGNComprobante(CodTrans)
    
    If Not mobjGNCompAux Is Nothing Then
    
        
        If mobjGNComp.CountCTLibroDetalle > 0 Then
            For i = 1 To mobjGNComp.CountCTLibroDetalle
                ix = mobjGNCompAux.AddCTLibroDetalle
                mobjGNCompAux.CTLibroDetalle(ix).BandIntegridad = mobjGNComp.CTLibroDetalle(ix).BandIntegridad
                mobjGNCompAux.CTLibroDetalle(ix).CodCuenta = mobjGNComp.CTLibroDetalle(ix).CodCuenta
                mobjGNCompAux.CTLibroDetalle(ix).CodGasto = mobjGNComp.CTLibroDetalle(ix).CodGasto
                mobjGNCompAux.CTLibroDetalle(ix).Haber = mobjGNComp.CTLibroDetalle(ix).Debe
                mobjGNCompAux.CTLibroDetalle(ix).Descripcion = mobjGNComp.CTLibroDetalle(ix).Descripcion
                mobjGNCompAux.CTLibroDetalle(ix).Debe = mobjGNComp.CTLibroDetalle(ix).Haber
                mobjGNCompAux.CTLibroDetalle(ix).Orden = mobjGNComp.CTLibroDetalle(ix).Orden
                
            Next i
        End If
       
       mobjGNCompAux.Nombre = mobjGNComp.Nombre
       mobjGNCompAux.CodClienteRef = mobjGNComp.CodClienteRef
       mobjGNCompAux.CodProveedorRef = mobjGNComp.CodProveedorRef
        mobjGNCompAux.FechaTrans = mobjGNComp.FechaTrans
        mobjGNCompAux.HoraTrans = mobjGNComp.HoraTrans
        'cadena = "Por transaccion " & mobjGNComp.CodTrans & "-" & mobjGNComp.NumTrans
        If gcPadre.GNTrans.TipoTrans = "1" Then
        cadena = "Por reversión de transacción FACTURA " & mobjGNComp.CodTrans & "-" & mobjGNComp.NumTrans & " / " & gcPadre.NumSerieEstaSRI & "-" & gcPadre.NumSeriePuntoSRI & "-" & Right("000000000" + Trim(Str(gcPadre.NumTrans)), 9)
        ElseIf gcPadre.GNTrans.TipoTrans = "4" Then
        cadena = "Por reversión de transacción NOTA CREDITO " & mobjGNComp.CodTrans & "-" & mobjGNComp.NumTrans & " / " & gcPadre.NumSerieEstaSRI & "-" & gcPadre.NumSeriePuntoSRI & "-" & Right("000000000" + Trim(Str(gcPadre.NumTrans)), 9)
        ElseIf gcPadre.GNTrans.TipoTrans = "6" Then
        cadena = "Por reversión de transacción RETENCION " & mobjGNComp.CodTrans & "-" & mobjGNComp.NumTrans & " / " & gcPadre.NumSerieEstaSRI & "-" & gcPadre.NumSeriePuntoSRI & "-" & Right("000000000" + Trim(Str(gcPadre.NumTrans)), 9)
        End If
        If Len(cadena) > 120 Then
            mobjGNCompAux.Descripcion = Mid$(cadena, 1, 120)
        Else
            mobjGNCompAux.Descripcion = cadena
        End If
            
        mobjGNCompAux.codUsuario = mobjGNComp.codUsuario
        mobjGNCompAux.IdResponsable = mobjGNComp.IdResponsable
        'mobjGNCompAux.NumDocRef = gcPadre.NumSerieEstaSRI & "-" & gcPadre.NumSeriePuntoSRI & "-" & gcPadre.NumTrans
        mobjGNCompAux.NumDocRef = gcPadre.NumSerieEstaSRI & "-" & gcPadre.NumSeriePuntoSRI & "-" & Right("000000000" + Trim(Str(gcPadre.NumTrans)), 9)
        mobjGNCompAux.idCentro = gcPadre.idCentro
        mobjGNCompAux.IdTransFuente = mobjGNComp.Empresa.RecuperarTransIDGncomprobante(mobjGNComp.CodTrans, mobjGNComp.NumTrans)
        mobjGNCompAux.CodMoneda = mobjGNComp.CodMoneda
        mobjGNCompAux.CodVendedor = mobjGNComp.CodVendedor
    
    
   
    
    
        'Si es que algo está modificado
        'Verificación de datos
        mobjGNCompAux.VerificaDatos
    
'        PreparaAsientoAuto True
        'Verifica si está cuadrado el asiento
    

    
        'Manda a grabar
        '       Aquí ya no hacemos verificación de asiento por que ya está hecho en Control Asiento
        mobjGNCompAux.Grabar False, False

        '***  Oliver 26/12/2002
        'Agregado para el control ded Impresion Configurado en la Transaccion
        If gcPadre.GNTrans.TipoTrans = "1" Then
            TipoTrans = "01"
        ElseIf gcPadre.GNTrans.TipoTrans = "4" Then
            TipoTrans = "04"
        
        ElseIf gcPadre.GNTrans.TipoTrans = "6" Then
            TipoTrans = "07"
        End If
        Nombre = TipoTrans & "-" & gcPadre.NumSerieEstaSRI & "-" & gcPadre.NumSeriePuntoSRI & "-" & Right("000000000" + Trim(Str(gcPadre.NumTrans)), 9) & "-" & gcPadre.CodTrans & ".XML"
        comando = "MOVE """ & Me.GNOpcion.RutaXMLValido & "\" & Nombre & """ """ & Me.GNOpcion.RutaXMLAnulado & "\" & Nombre & """"
        Shell "cmd.exe /c  " & comando

'        comando = "DEL """ & Me.GNOpcion.RutaXMLValido & "\" & nombre & """ """
'        Shell "cmd.exe /c  " & comando

        
        GrabarTransReversionAsiento = True
    Else
        GrabarTransReversionAsiento = False
    End If
    Exit Function
ErrTrap:
    
    Select Case Err.Number
    Case ERR_DESCUADRADO, ERR_INTEGRIDAD
        'Si es que el usuario seleccionó 'No' en el cuadro de dialogo,
        'No hace nada
    Case Else
        DispErr
    End Select
    Exit Function

End Function

Public Function RecuperaTransid(ByVal transid As Long, CodTrans As String) As String
    Dim sql As String, cad As String, rs As Recordset
    
    sql = "SELECT transid from gncomprobante WHERE estado <> 3 and codtrans='" & CodTrans & "' and idtransfuente=" & transid
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        RecuperaTransid = rs.Fields("transid")
    Else
        RecuperaTransid = 0
    End If
    rs.Close
    Set rs = Nothing
End Function


Public Function ConsGNTransProduccionISO( _
                    Optional ByVal OrdenAscendente As Boolean) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    
    '*** MAKOTO 03/oct/00
    sql = "SELECT"
    If gobjCond.TopN > 0 Then
        sql = sql & " TOP " & gobjCond.TopN
    End If
    
    '*** MAKOTO 05/feb/01 Mod. Aumentado 'NumDocRef' y 'Nombre'
    sql = sql & " VW.TransID, FechaTrans, CodAsiento, CodTrans, NumTrans, " & _
            " NumDocRef, Nombre, vw.Descripcion, ROUND((costoRealTotal/cantidad),4) as CUR, ROUND((costoTotal/cantidad),4) as CU, CodCentro,Estado FROM " & _
            " (IVGrupo1 RIGHT JOIN IVInventario ON IVGrupo1.IdGrupo1 = IVInventario.IdGrupo1) inner join " & _
            " vwConsGNTrans " & _
            " VW INNER JOIN IVKARDEX IVK ON IVK.TRANSID=VW.TRANSID " & _
            " ON IVInventario.IdInventario = IVK.IdInventario "
    
            sql = " select g.transid, fechatrans, ivc.id, codtrans, numtrans, i.idinventario,  i.codinventario,  codinventario,cant*-1, costo*-1,  costo*-1/cant*-1 "
            sql = sql & " from gncomprobante g"
            sql = sql & " inner join ivkardex ivk"
            sql = sql & " inner join ivconsumodetalle ivc"
            sql = sql & " inner join ivinventario i"
            sql = sql & " on ivc.idinventario=i.idinventario"
            sql = sql & " on ivk.id = ivc.IdKardexRef"
            sql = sql & " on g.transid=ivk.transid"

    
            'Condición de FechaTrans
            cond = "FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB)
    
    'Condición de CodTrans
    If Len(cond) > 0 Then cond = cond & " AND "
    If Len(gobjCond.CodTrans) > 0 Then      'Si está especificado transaccion
        'Si es una sola transaccion
        If InStr(gobjCond.CodTrans, ",") = 0 Then
            cond = cond & "(CodTrans='" & gobjCond.CodTrans & "')"
        'Si está seleccionado varias trans.
        Else
            cond = cond & "(CodTrans IN (" & gobjCond.CodTrans & "))"
        End If
    Else
        'Si no hay condicion de cod.trans, selecciona todas las trans.
        ' que tenga permiso
        s = gobjMain.GrupoActual.PermisoActual.ListaTrans(True)
        If Len(s) > 0 Then
            cond = cond & "(CodTrans " & s & ")"
        Else
            cond = cond & "(CodTrans = '-------')"    'Para que NO devuelva nada si no tiene ningún permiso  '*** MAKOTO 26/dic/00
        End If
    End If
    
    'Condición de NumTrans
    If (gobjCond.NumTrans1 > 0) And (gobjCond.NumTrans2 > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans BETWEEN " & gobjCond.NumTrans1 & " AND " & gobjCond.NumTrans2 & ")"
    ElseIf gobjCond.NumTrans1 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans>=" & gobjCond.NumTrans1 & ")"
    ElseIf gobjCond.NumTrans2 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans<=" & gobjCond.NumTrans2 & ")"
    End If
    
    'Condición de Estado
    If gobjCond.EstadoBool(ESTADO_NOAPROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_NOAPROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_APROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_APROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_DESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_DESPACHADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_ANULADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_ANULADO & ")"
    End If
    'jeaa 22/05/2006
    If Not (Len(gobjCond.Grupo1) = 0 And Len(gobjCond.Grupo2) = 0) Then
        cond = cond & " AND (codGrupo" & gobjCond.NumGrupo & " BETWEEN '" & _
                gobjCond.Grupo1 & "' AND '" & gobjCond.Grupo2 & "') "
    End If
    If Not (Len(gobjCond.CodItem1) = 0 And Len(gobjCond.CodItem2) = 0) Then
        cond = cond & "AND (CodInventario BETWEEN '" & gobjCond.CodItem1 & "' AND '" & gobjCond.CodItem2 & "') "
    End If

    
    
    
    
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond & " and i.bandservicio=0"
    'sql = sql & "AND IVK.IDINVENTARIO=54277"
    'Ordern de filas
    If OrdenAscendente Then
'        sql = sql & " ORDER BY FechaTrans, TransID"         '*** MAKOTO 03/oct/00 Modificado para que salga más actual al primero
        sql = sql & " ORDER BY i.codinventario, FechaTrans, HoraTrans, g.TransID"         '*** MAKOTO 07/dic/00 Modificado para HoraTrans
    Else
'        sql = sql & " ORDER BY FechaTrans DESC, TransID DESC"
        sql = sql & " ORDER BY FechaTrans DESC, HoraTrans DESC, VW.TransID DESC"       '*** MAKOTO 07/dic/00 HoraTrans agregado
    End If
    
    Set rs = Me.OpenRecordset(sql)
    Set ConsGNTransProduccionISO = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta General " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function


Public Function ConsxTiketGNTrans(ByVal NumGrupo As Integer, ByVal CodGrupo As String) As Variant
    'Llama a la nueva función por orden descendente     '*** MAKOTO 20/oct/00
    Set ConsxTiketGNTrans = ConsxTiketGNTrans2(NumGrupo, CodGrupo, False)
End Function

    
Public Function ConsxTiketGNTrans2(ByVal NumGrupo As Integer, ByVal CodGrupo As String, _
                    Optional ByVal OrdenAscendente As Boolean) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset, i As Integer, rsItem As Recordset
    Dim numReg As Long, CantItem As Integer
    'Condición de FechaTrans
    cond = "gning.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB)
        cond = ""
    If (gobjCond.NumTrans1 > 0) And (gobjCond.NumTrans2 > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(iviso.id  between " & gobjCond.NumTrans1 & " and  " & gobjCond.NumTrans2 & " )"
    ElseIf gobjCond.NumTrans1 > 0 And (gobjCond.NumTrans2 = 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(iviso.id =" & gobjCond.NumTrans1 & ")"
    End If
    'Condición de Estado
    If Len(gobjCond.CodPC1) > 0 And Len(gobjCond.CodPC2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " pc.codProvcli between '" & gobjCond.CodPC1 & "' and '" & gobjCond.CodPC2 & "'"
    End If
    If Len(gobjCond.CodItem1) > 0 And Len(gobjCond.CodItem2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " ivtam.codinventario between '" & gobjCond.CodItem1 & "' and '" & gobjCond.CodItem2 & "'"
    End If
    
    If Len(gobjCond.CodCentro1) > 0 And Len(gobjCond.CodCentro2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " ivg.CodGrupo2 between '" & gobjCond.CodCentro1 & "' and '" & gobjCond.CodCentro2 & "'"
    End If
    
    If Len(gobjCond.CodBanco1) > 0 And Len(gobjCond.CodBanco2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " ivmar.codinventario between '" & gobjCond.CodBanco1 & "' and '" & gobjCond.CodBanco2 & "'"
    End If

    
    If gobjCond.Tipo <> 4 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " motivo  = " & gobjCond.Tipo
    End If
    
       sql = "select "
        sql = sql & " gning.numdocref ,"
        sql = sql & " pc.CodProvcli,  pc.nombreALTERNO, "
        sql = sql & " case motivo "
        sql = sql & " when '0' then 'RENCA'"
        sql = sql & " when '1' then 'COMPR'"
        sql = sql & " when '2' then 'DEVOL'"
        sql = sql & " when '3' then 'REPARA'"
        sql = sql & " ELSE  'OTROS' end as motivo, gning.transid , "
        sql = sql & " gning.CodTrans, (gning.CodTrans+' '+CONVERT(VARCHAR,gning.NumTrans)) AS TransIng, gning.fechatrans,"
        sql = sql & " ivk.orden, iviso.id as tiket,"
        sql = sql & " ivmar.codinventario as marca,  ivtam.codinventario as tamanio, ivg.CodGrupo2 as Tipo, "
        sql = sql & " original, radial,"
        sql = sql & " iviso.NumSerie, DisenioOri,ivtra.codinventario as trabajo,"
        sql = sql & " BandVerifica,(gncal.CodTrans+' '+CONVERT(VARCHAR,gncal.NumTrans)) AS TransCal, gncal.fechatrans,"
        sql = sql & " IVMC.cODMOTIVO  as CODMOTIVO, "
        sql = sql & " BandProceso, (gnpro.CodTrans+' '+CONVERT(VARCHAR,gnpro.NumTrans)) AS TransPro, gnpro.fechatrans, ivpro.codinventario, "
        sql = sql & " IVMP.cODMOTIVO  as CODMOTIVO, gcc.codcentro, "
        sql = sql & " BandCarcasaUsada,  "
        sql = sql & " (gnfacCAR.CodTrans+' '+CONVERT(VARCHAR,gnfacCAR.NumTrans)) AS TransFacCAR, gnfacCAR.fechatrans, "
        sql = sql & " pcFacCAR.CodProvcli,  pcFacCAR.nombre, "
        sql = sql & " BandFactura, (gnfac.CodTrans+' '+CONVERT(VARCHAR,gnfac.NumTrans)) AS TransFac, gnfac.fechatrans, "
        sql = sql & " pcFac.CodProvcli,  pcFac.nombre, "
        sql = sql & " case when BandCarcasaISO=1 then 'ISO' else ' ' end as Bandiso , "
        sql = sql & " (gncp.CodTrans+' '+CONVERT(VARCHAR,gncp.NumTrans)) AS TransCP, gncp.fechatrans,  pccp.CodProvcli,  pccp.nombre, "
        sql = sql & " BandPagado,  "
        sql = sql & " gncp.transid AS TransPA, '' as fechatrans,   '' as CodProvcli,   '' as nombre,"
        sql = sql & " pcrec.CodProvcli,  pcrec.nombreALTERNO, "
        sql = sql & " fcv.codvendedor, fcv.nombre, iviso.idpadre, BandSinGarantia, Band2RenMas, gning.descripcion "
        sql = sql & " from IVInventarioDetalleISO iviso"
        sql = sql & " LEFT join mOTIVO IVMC ON iviso.IdMotivoCal = ivMC.IdMOTIVO"
        sql = sql & " LEFT join mOTIVO IVMp ON iviso.IdMotivoPro = ivMp.IdMOTIVO"
        sql = sql & " inner join ivkardex ivk"
        sql = sql & " inner join ivinventario ivtam "
        sql = sql & " inner join ivgrupo2 ivg "
        sql = sql & " on ivtam.idgrupo2=ivg.idgrupo2"
        sql = sql & " on ivk.Idinventario=ivtam.idinventario"
        sql = sql & " on iviso.idkardex=ivk.id"
        sql = sql & " inner join ivinventario ivmar on iviso.IdMarca=ivmar.idinventario"
        sql = sql & " left join ivinventario ivtra on iviso.IdTrabajo=ivtra.idinventario"
        sql = sql & " left join ivinventario ivpro on iviso.IdProcesado=ivpro.idinventario"
        sql = sql & " left join gncomprobante gning"
        sql = sql & " inner join pcprovcli pc on gning.idclienteref= pc.idprovcli"
        sql = sql & " left join pcprovcli pcrec on gning.idgaranteref= pcrec.idprovcli"
        sql = sql & " on iviso.transid = gning.transid"
        sql = sql & " left join gncomprobante gncal"
        sql = sql & " on iviso.TransIDCalifica = gncal.transid"
        sql = sql & " left join fcvendedor fcv on gning.idvendedor= fcv.idvendedor"
        sql = sql & " left join gncomprobante gnpro"
        sql = sql & " inner join gncentrocosto gcc"
        sql = sql & " on gnpro.idcentro=gcc.idcentro"
        sql = sql & " on iviso.TransIDProceso = gnpro.transid"
        sql = sql & " left join gncomprobante gnfac"
        sql = sql & " inner join pcprovcli pcFac on gnfac.idclienteref= pcFac.idprovcli"
        sql = sql & " on iviso.TransIDFactura = gnfac.transid"
        sql = sql & " left join gncomprobante gnfacCAR"
        sql = sql & " inner join pcprovcli pcFacCAR on gnfacCAR.idclienteref= pcFacCAR.idprovcli"
        sql = sql & " on iviso.TransIDFacturaCarc = gnfacCAR.transid "
        sql = sql & " left join gncomprobante gncp"
        sql = sql & " inner join pcprovcli pccp  "
        sql = sql & " on gncp.idproveedorref= pccp.idprovcli on iviso.TransIDCompra = gncp.transid "
        If Len(cond) > 0 Then sql = sql & " WHERE " & cond
        sql = sql & "  ORDER BY iviso.id"
   Set rs = Me.OpenRecordset(sql)
    Set ConsxTiketGNTrans2 = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta x Tiket General " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function

'Para Libro Mayor Presupuesto
Public Function ConsPRKardex() As Variant
    Dim sql As String, cond As String, rs As Recordset
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsCTLibroMayor")
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    qdef.Parameters("CodCuenta1") = IIf(Len(gobjCond.CodCuenta1) = 0, "0", gobjCond.CodCuenta1)
    qdef.Parameters("CodCuenta2") = IIf(Len(gobjCond.CodCuenta2) = 0, "99999999999999999999", gobjCond.CodCuenta2)
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodTrans") = gobjCond.CodTrans
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
        sql = "spConsPRLibroMayor "
    sql = sql & gobjCond.numMoneda & ",'" & _
                gobjCond.CodCuenta1 & "','" & _
                gobjCond.CodCuenta2 & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB) & ",'" & gobjCond.Sucursal & "','" & _
                gobjCond.CodTrans & "'"
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    Set ConsPRKardex = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Libro Mayor Presupuesto" & gobjCond.fecha1 & "-" & gobjCond.fecha2, "PR"

End Function

Public Function ListaGNTransxSucursal( _
                    Modulo As String, _
                    BandInvisibles As Boolean, _
                    BandRS As Boolean, _
                    CodSucursal As String) As Variant
    Dim sql As String, cond As String, rs As Recordset
    
    sql = "SELECT CodTrans, NombreTrans FROM GNTrans gt"
    If Len(CodSucursal) > 0 Then
        sql = sql & " Inner join GnSucursal  gs on gt.idsucursal = gs.idsucursal"
    End If
    
    If Len(Modulo) > 0 Then cond = cond & "Modulo='" & Modulo & "' "
    If Not BandInvisibles Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "BandVisible=" & CadenaBool(True, TipoDB)
    End If
    If Len(CodSucursal) > 0 Then cond = cond & "and CodSucursal='" & CodSucursal & "' "
    
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " ORDER BY CodTrans"
    Set rs = Me.OpenRecordset(sql)
    
    If BandRS Then
        Set ListaGNTransxSucursal = rs
    Else
        ListaGNTransxSucursal = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function



Public Function ConsPRBalance(bandBalance As Boolean) As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim v As Variant, v2() As Variant, i As Long, j As Long
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsCTBalance")
    qdef.Parameters("FechaDesde") = IIf(bandBalance, Me.GNOpcion.FechaInicio, gobjCond.fecha1)
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodCuenta1") = "0"
    qdef.Parameters("CodCuenta2") = String(20, "9")
    qdef.Parameters("CodSucursal") = gobjCond.Sucursal ' ********* jeaa
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
    If Not rs.EOF Then
        rs.MoveLast
        rs.MoveFirst
        v = rs.GetRows(rs.RecordCount)
    End If
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    sql = "spConsPRBalance "
    sql = sql & gobjCond.numMoneda & ",'0','" & _
                        String(20, "9") & "'," & _
                        FechaYMD(IIf(bandBalance, Me.GNOpcion.FechaInicio, gobjCond.fecha1), TipoDB) & "," & _
                        FechaYMD(gobjCond.fecha2, TipoDB) & ",'" & gobjCond.Sucursal & "'"    ' jeaa 17-01-04 para filtrado por sucursal
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    If Not rs.EOF Then v = rs.GetRows()
#End If
    'Mayoriza los valores
    MayorizaPresupuesto v
    'Pasa los valores de v a v2 cambiando formato
    ' y filtrando registros por TipoCuenta, Nivel y Valor
    j = 0
    For i = 0 To UBound(v, 2)
        If Not IsNull(v(BAL_VALOR, i)) Then
            'Solo los que tengan valor diferente de 0
            'If v(BAL_VALOR, i) <> 0 Then
                'Si es para balance, solo tipo 1,2 y 3, sino solo tipo 4 y 5
                If (bandBalance And (v(BAL_TIPO, i) <= 3)) Or _
                   ((Not bandBalance)) Then 'And (v(BAL_TIPO, i) >= 4)
                   'Solo hasta el nivel indicado
                   If v(BAL_NIVEL, i) <= gobjCond.Nivel Then
                        ReDim Preserve v2(16, j)
                        v2(0, j) = v(BAL_TIPO, i)           'TipoCuenta
                        v2(1, j) = v(BAL_CODCUENTA, i)      'CodCuenta
                        v2(2, j) = v(BAL_NOMBRECUENTA, i)   'Cuenta
                        v2(3, j) = v(BAL_CODSUCURSAL, i)          'CODSUCURSAL   JEAA 16/01/04
                        v2(4, j) = v(BAL_VALOR, i)          'Valor
                        If Not bandBalance Then v2(4, j) = v2(4, j) * -1    'Invierta el signo cuando es EstadoPG
                        v2(5, j) = v(BAL_NIVEL, i)          'Nivel
                        v2(6, j) = v(BAL_VALMODPRESUPUESTO, i)          'Modificaciones
                        v2(7, j) = v(BAL_VALREFORMA1, i)          'REFORMA 1
                        v2(8, j) = v(BAL_VALREFORMA2, i)          'REFORMA 2
                        v2(9, j) = v(BAL_VALREFORMA3, i)          'REFORMA 3
                        v2(10, j) = v(BAL_VALREFORMA4, i)          'REFORMA 4
                        v2(11, j) = v(BAL_VALSALDO, i)          'SALDO
                        v2(12, j) = v(BAL_VALPRESUP_COMP, i)          'Comprometido
                        v2(13, j) = v(BAL_VALPRESUP_EJEC, i)          'Ejecutado
                        v2(14, j) = v(BAL_SALDOLPRESUP, i)          'Saldo Comprometido
                        v2(15, j) = v(BAL_SALDOLPRESUP_EJEC, i)           'Saldo Ejecutado
                        j = j + 1
                    End If
                End If
            'End If
        End If
    Next i
    If j Then ConsPRBalance = v2
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Balance Presupuesto ", "PR"
End Function

Public Function ConsPRDiario() As Variant
    Dim sql As String, cond As String
    Dim rs As Recordset
    sql = "SELECT TransID, FechaTrans, CodAsiento, CodTrans, NumTrans, " & _
            "CodCuenta, NombreCuenta, Descripcion, nombre ,"
    Select Case gobjCond.numMoneda
    Case 1: sql = sql & "Debe1 AS Debe, Haber1 AS Haber, 1 AS Cotizacion, "
    Case 2: sql = sql & "Debe1/Cotizacion2 AS Debe, Haber1/Cotizacion2 AS Haber, Cotizacion2 AS Cotizacion, "
    Case 3: sql = sql & "Debe1/Cotizacion3 AS Debe, Haber1/Cotizacion3 AS Haber, Cotizacion3 AS Cotizacion, "
    Case 4: sql = sql & "Debe1/Cotizacion4 AS Debe, Haber1/Cotizacion4 AS Haber, Cotizacion4 AS Cotizacion, "
    End Select
    sql = sql & "CodCentro, Estado, codprasiento FROM  "
        sql = sql & " vwConsPRDiario "
    'Condición de FechaTrans
    cond = "(FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB) & ")"
    'Condición de CodTrans
    If Len(gobjCond.CodTrans) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodTrans='" & gobjCond.CodTrans & "'" & ")"
    End If
    'Condición de NumTrans
    If gobjCond.NumTrans1 > 0 And gobjCond.NumTrans2 > 0 Then
       If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans BETWEEN " & gobjCond.NumTrans1 & " AND " & gobjCond.NumTrans2 & ")"
    ElseIf gobjCond.NumTrans1 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans>=" & gobjCond.NumTrans1 & ")"
    ElseIf gobjCond.NumTrans2 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans<=" & gobjCond.NumTrans2 & ")"
    End If
    'Condición de Estado
    If gobjCond.EstadoBool(ESTADO_NOAPROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_NOAPROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_APROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_APROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_DESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_DESPACHADO & ")"
    End If
    'AUC
    If gobjCond.EstadoBool(ESTADO_SEMDESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_SEMDESPACHADO & ")"
    End If
   If gobjCond.EstadoBool(ESTADO_ANULADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_ANULADO & ")"
    End If
    'Condición de Sucursal   '*********** jeaa 19-01-04  para filtrado de sucursales
    If Len(gobjCond.Sucursal) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        If Me.GNOpcion.ObtenerValor("PermitirDistribucionGastos") = "1" Then
            cond = cond & "(IdGasto=" & gobjCond.Sucursal & ")"
        Else
            cond = cond & "(IdLocal=" & gobjCond.Sucursal & ")"
       End If
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE (" & cond & ")"
    sql = sql & " ORDER BY FechaTrans, CodAsiento, "
    '*** MAKOTO 27/nov/00 Modificado para recuperar primero los Debes y luego Haber
    If Me.GNOpcion.ObtenerValor("OrdenarAsientoPorDebe") = "0" Then
        sql = sql & "Orden"
   Else
#If DAOLIB Then
        sql = sql & "Iif(Haber1>0, 1, 0), CodCuenta, Orden"
#Else
        sql = sql & "(CASE WHEN Haber1>0 THEN 1 ELSE 0 END), CodCuenta, Orden"
#End If
    End If
    Set rs = Me.OpenRecordset(sql)
    Set ConsPRDiario = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Asientos Presupuestarios" & gobjCond.fecha1 & "-" & gobjCond.fecha2, "PR"
End Function

Public Function ConsPRvsCT() As Variant
    Dim sql As String, cond As String, numReg As Long
    Dim rs As Recordset
    sql = " SELECT"
    sql = sql & " transid, GNComprobante.FechaTrans, (GNComprobante.CodTrans+' '+CONVERT(VARCHAR,GNComprobante.NumTrans)) AS Trans, GNComprobante.descripcion,"
    sql = sql & " PRCuenta.CodCuenta, PRCuenta.NombreCuenta, PRCuenta.idlocal, "
   Select Case gobjCond.numMoneda
        Case 1: sql = sql & " sum(Debe) AS Debe0, sum(Haber) AS Haber0, 1 AS Cotizacion, "
        Case 2: sql = sql & " sum(Debe/Cotizacion2) AS Debe0, sum(Haber/Cotizacion2) AS Haber0, "
        Case 3: sql = sql & " sum(Debe/Cotizacion3) AS Debe0, sum(Haber/Cotizacion3) AS Haber0, "
        Case 4: sql = sql & " sum(Debe/Cotizacion4) AS Debe0, sum(Haber/Cotizacion4) AS Haber0, "




    End Select
    sql = sql & " 0 AS Saldo0"
    sql = sql & " Into tmp0"
    sql = sql & " FROM PRCuenta INNER JOIN GNComprobante"
    sql = sql & " INNER JOIN PRLibroDetalle"
    sql = sql & " ON GNComprobante.CodPRAsiento = PRLibroDetalle.CodAsiento"
    sql = sql & " ON PRCuenta.IdCuenta = PRLibroDetalle.IdCuenta"
    sql = sql & " WHERE (GNComprobante.Estado<>3 And GNComprobante.Estado<>0)"
    sql = sql & " AND (GNComprobante.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB) & ")"
    sql = sql & " and codcuenta <> '9999.01'"
    sql = sql & " and codtrans not in (" & PreparaCadena(Me.GNOpcion.ObtenerValor("TransVerificaSaldoPresupuesto")) & ")"
    sql = sql & " group by"
    sql = sql & " transid, GNComprobante.FechaTrans, GNComprobante.CodTrans,GNComprobante.NumTrans , GNComprobante.descripcion,"
    sql = sql & " PRCuenta.CodCuenta, PRCuenta.NombreCuenta, PRCuenta.idlocal "
   VerificaExistenciaTabla 0
    Me.EjecutarSQL sql, numReg
    sql = " SELECT"
    sql = sql & " transid, CTCuenta.idcuenta, "
   sql = sql & " CTCuenta.CodCuenta, CTCuenta.NombreCuenta,"
    Select Case gobjCond.numMoneda
        Case 1: sql = sql & " sum(Debe) AS Debe1, sum(Haber) AS Haber1, 1 AS Cotizacion, "
        Case 2: sql = sql & " sum(Debe/Cotizacion2) AS Debe1, sum(Haber/Cotizacion2) AS Haber1, "
        Case 3: sql = sql & " sum(Debe/Cotizacion3) AS Debe1, sum(Haber/Cotizacion3) AS Haber11, "
        Case 4: sql = sql & " sum(Debe/Cotizacion4) AS Debe1, sum(Haber/Cotizacion4) AS Haber1, "




    End Select
    sql = sql & " 0 AS Saldo1"
    sql = sql & " Into tmp1"
    sql = sql & " FROM CTCuenta INNER JOIN GNComprobante"
    sql = sql & " INNER JOIN CTLibroDetalle"
    sql = sql & " ON GNComprobante.CodAsiento = CTLibroDetalle.CodAsiento"
    sql = sql & " ON CTCuenta.IdCuenta = CTLibroDetalle.IdCuenta"
    sql = sql & " WHERE (GNComprobante.Estado<>3 And GNComprobante.Estado<>0)"
    sql = sql & " and (GNComprobante.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB) & ")"
    sql = sql & " and ctcuenta.bandtotal=0 "
    sql = sql & " group by"
    sql = sql & " transid, CTCuenta.idcuenta,  CTCuenta.CodCuenta, CTCuenta.NombreCuenta"
    'sql = sql & " PRCuenta.CodCuenta, PRCuenta.NombreCuenta, PRCuenta.idlocal "
   VerificaExistenciaTabla 1
    Me.EjecutarSQL sql, numReg
    sql = " select "
    sql = sql & " t0.codcuenta , t0.NombreCuenta, t0.FechaTrans, "
    sql = sql & " t0.Trans, debe0, haber0, "
    sql = sql & " t1.codcuenta , t1.NombreCuenta, "
    sql = sql & " debe1, haber1 ,debe0-isnull(debe1,0) as difDebe , haber0-isnull(haber1,0) as difHaber "
   sql = sql & " from tmp0 t0 left join tmp1 t1"
    sql = sql & " on t0.transid=t1.transid "
    sql = sql & " and t0.idlocal=t1.idcuenta  "
    'and (debe0=debe1 and haber0=haber1)"
    If Len(gobjCond.CodCuenta1) > 0 Then
        sql = sql & " where t0.codcuenta between '" & gobjCond.CodCuenta1 & "' and '" & gobjCond.CodCuenta2 & "'"
    End If
    sql = sql & " order by t0.codcuenta, t0.FechaTrans "
   Set rs = Me.OpenRecordset(sql)
    Set ConsPRvsCT = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Asientos Presupuestarios vs CT" & gobjCond.fecha1 & "-" & gobjCond.fecha2, "PR"
End Function

Public Function RecuperaPCProvincia(key As Variant) As PCProvincia
    Dim obj As PCProvincia
    Set obj = New PCProvincia
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaPCProvincia = obj
   Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

'Para Balance de comprobación
Public Function ConsPRBalanceComp() As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim cta1 As String, cta2 As String
    'Si no hay condición, coge todas las cuentas
    cta1 = "0"
    cta2 = String(20, "9")
    If Len(gobjCond.CodCuenta1) > 0 Then cta1 = gobjCond.CodCuenta1
    If Len(gobjCond.CodCuenta2) > 0 Then cta2 = gobjCond.CodCuenta2
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsCTBalanceComp")
    With qdef
        .Parameters("FechaDesde") = gobjCond.fecha1
        .Parameters("FechaHasta") = gobjCond.fecha2
        .Parameters("CodCuenta1") = cta1
        .Parameters("CodCuenta2") = cta2
        .Parameters("NumMoneda") = gobjCond.numMoneda
        .Parameters("CodSucursal") = gobjCond.Sucursal 'jeaa
        Set rs = .OpenRecordset(dbOpenSnapshot, dbReadOnly)
    End With

#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
        sql = "spConsPRBalanceComp "
    sql = sql & gobjCond.numMoneda & ",'" & cta1 & "','" & cta2 & "'," & _
            FechaYMD(gobjCond.fecha1, TipoDB) & "," & FechaYMD(gobjCond.fecha2, TipoDB) & ",'" & gobjCond.Sucursal & "'"    ' jeaa 17-01-04 para filtrado por sucursal

    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    Set ConsPRBalanceComp = rs
   Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Balance Comprobacion Presupuestaria " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "PR"
End Function


Public Function ListaPRCuentaParaCombo(IncluyeTotal As Boolean, TipoCuenta As Integer) As Variant
    Dim sql As String, cond As String
    Dim rs As Recordset
    
    sql = "SELECT CodCuenta, CodCuenta+'  '+NombreCuenta AS Cuenta FROM prCuenta "
    If TipoCuenta <> 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "TipoCuenta=" & TipoCuenta & " "
    End If
    If Not IncluyeTotal Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "BandTotal=" & CadenaBool(False, TipoDB)
    End If
    sql = sql & " where bandvalida=1"
    If Len(cond) > 0 Then sql = sql & " and " & cond
    'ANULADO JEAA 01/12/2005 filtra solo las validas  If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    
    sql = sql & " ORDER BY CodCuenta"
    Set rs = Me.OpenRecordset(sql)
    ListaPRCuentaParaCombo = MiGetRows(rs)
    rs.Close
    Set rs = Nothing
End Function

Public Function DesctoPCxIVAdicional(ByVal CodIVGrupo As String, ByVal codPC As String) As Double
Dim sql As String, rs As Recordset, NumIVGrupo As Integer, NumPCGrupo As Integer
    NumIVGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumIVGrupo")) + 1
    NumPCGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumPCGrupo")) + 1
    sql = "Select valorAdicional from ivgrupo" & NumIVGrupo
    sql = sql & " inner join  DescIVGPCG desct"
    sql = sql & " inner join pcgrupo" & NumPCGrupo & " pcg "
    sql = sql & " inner join pcprovcli pc"
    sql = sql & " on pc.idGrupo" & NumPCGrupo & "=pcg.idGrupo" & NumPCGrupo & ""
    sql = sql & " on pc.idgrupo" & NumPCGrupo & " = desct.idpcgrupo "
    sql = sql & " on ivgrupo" & NumIVGrupo & ".idgrupo" & NumIVGrupo & " = Desct.idivgrupo"
    sql = sql & " WHERE ivgrupo" & NumIVGrupo & ".CodGrupo" & NumIVGrupo & " = '" & CodIVGrupo & "'"
    sql = sql & " and CodProvCli ='" & codPC & "'"
'    Set rs = mobjGNComp.Empresa.OpenRecordset(sql)
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        DesctoPCxIVAdicional = rs!ValorAdicional
    Else
        DesctoPCxIVAdicional = 0
    End If
    Set rs = Nothing
End Function

Public Function CreaGNComprobanteAutoImpresor(CodTrans As String) As GNComprobante
    Dim obj As GNComprobante, pt As PermisoTrans, gnt As GNTrans
    'jeaa 09/05/2005 para igualar la hora con el servidor
    If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("IgualarHora") = "1" Then
        AjustaHoraServidor
    End If
    
    
    If Len(CodTrans) = 0 Or Len(CodTrans) > 5 Then
        Err.Raise ERR_INVALIDO, "Empresa_CreaGNComprobante", MSGERR_INVALIDO
    End If
    
  
    'Verifica si la transaccion esta activa
    Set gnt = Me.RecuperaGNTrans(CodTrans)
    If Not gnt Is Nothing Then
        If Not gnt.BandValida Then
            Err.Raise ERR_TRANS_INVALIDO, "Empresa_CreaGNComprobante", MSGERR_TRANS_INVALIDO
        End If
    End If
    Set obj = New GNComprobante
    Set obj.Empresa = Me
    obj.CodTrans = CodTrans
    obj.FechaInicioTrans = Date
    obj.HoraInicioTrans = Time
    Set CreaGNComprobanteAutoImpresor = obj
    
    'jeaa 25/09/2007
    'alerta sobre transacciones con documentos preimpresos caducados o fuera
    'del rango de impresion
    If Not obj Is Nothing Then
        If obj.GNTrans.UtilizaPreImpreso Then
            If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("AlertaRangoFechaCaducidad") = "1" Then
                If obj.GNTrans.FechaCaducidad < obj.FechaTrans Then
                    MsgBox "Esta creando una Transacción " & obj.CodTrans & Chr(13) & "Que tiene el Formulario Preimpreso Caducado en la Configuracion " & Chr(13) & "Fecha de Caducidad: " & Format(obj.GNTrans.FechaCaducidad, "mm/yyyy")
                End If
                If (obj.GNTrans.AnexoCodTipoTrans = "2" Or obj.GNTrans.AnexoCodTipoComp = "7") And obj.Empresa.GNOpcion.ObtenerValor("ImportaDatosFactura") = "0" Then
                    If obj.GNTrans.NumTransUltimoPreimpreso < obj.GNTrans.NumTransSiguiente + 1 Then
                        MsgBox "Esta creando una Transacción " & obj.CodTrans & Chr(13) & "Que tiene el # de Formulario Preimpreso Fuera del Rango Configurado " & Chr(13) & "# Ultimo Preimpreso:" & obj.GNTrans.NumTransUltimoPreimpreso
                    End If
                End If
            End If
        ElseIf obj.GNTrans.IVAutoImpresor Then
                If obj.GNTrans.FechaCaducidad < obj.FechaTrans Then
                    MsgBox "No puede crear una Transacción " & obj.CodTrans & " que utiliza Autoimpresor " & Chr(13) & "Por que tiene la Fecha de Caducidad mayor a la autorizada por el SRI" & Chr(13) & "Fecha de Caducidad: " & Format(obj.GNTrans.FechaCaducidad, "dd/mm/yyyy")
                        Set CreaGNComprobanteAutoImpresor = Nothing
    '                Err.Raise ERR_INVALIDO, "Empresa_CreaGNComprobante", MSGERR_INVALIDO
                End If
        End If
    End If
    Set gnt = Nothing
    Set obj = Nothing
End Function

Private Function SumaHijosPresupuesto_Ejec(ByRef v As Variant, ByVal j As Long) As Currency
    Dim i As Long, t As Currency
    
    'Busca todos los hijos de la cuenta indicada por j
    ' saca la suma total de los hijos en t
    For i = 0 To UBound(v, 2)
        'Si IdCuentaSuma es igual a IdCuenta de j, es hijo de la cuenta j
        If v(BAL_IDPADRE, i) = v(BAL_IDCUENTA, j) Then
'            If Not IsNull(v(BAL_VALPRESUPUESTO, i)) Then t = t + v(BAL_VALPRESUPUESTO, i)
            If Not IsNull(v(BAL_VALPRESUP_EJEC, i)) Then t = t + v(BAL_VALPRESUP_EJEC, i)
'            If Not IsNull(v(BAL_SALDOLPRESUP, i)) Then t = t + v(BAL_SALDOLPRESUP, i)
'            If Not IsNull(v(BAL_SALDOLPRESUP_EJEC, i)) Then t = t + v(BAL_SALDOLPRESUP_EJEC, i)
        End If
    Next i
    SumaHijosPresupuesto_Ejec = t
End Function

Private Function SumaHijosPresupuesto_saldo(ByRef v As Variant, ByVal j As Long) As Currency
    Dim i As Long, t As Currency
    
    'Busca todos los hijos de la cuenta indicada por j
    ' saca la suma total de los hijos en t
    For i = 0 To UBound(v, 2)
        'Si IdCuentaSuma es igual a IdCuenta de j, es hijo de la cuenta j
        If v(BAL_IDPADRE, i) = v(BAL_IDCUENTA, j) Then
            If Not IsNull(v(BAL_SALDOLPRESUP, i)) Then t = t + v(BAL_SALDOLPRESUP, i)
        End If
    Next i
    SumaHijosPresupuesto_saldo = t
End Function

Private Function SumaHijosPresupuesto_saldoEjec(ByRef v As Variant, ByVal j As Long) As Currency
    Dim i As Long, t As Currency
    
    'Busca todos los hijos de la cuenta indicada por j
    ' saca la suma total de los hijos en t
    For i = 0 To UBound(v, 2)
        'Si IdCuentaSuma es igual a IdCuenta de j, es hijo de la cuenta j
        If v(BAL_IDPADRE, i) = v(BAL_IDCUENTA, j) Then
            If Not IsNull(v(BAL_SALDOLPRESUP_EJEC, i)) Then t = t + v(BAL_SALDOLPRESUP_EJEC, i)
        End If
    Next i
    SumaHijosPresupuesto_saldoEjec = t
End Function

Public Function ObtieneTransaccioPagada(ByVal Id As Long) As Long
Dim sql As String, rs As Recordset
    sql = " select p.transid as transid from gncomprobante g inner join pckardex p on g.transid=p.transid "
    sql = sql & " where estado <>3 and id=" & Id
    
    Set rs = Me.OpenRecordset(sql)
    
    If Not rs.EOF Then
        ObtieneTransaccioPagada = rs!transid
    Else
        ObtieneTransaccioPagada = 0
    End If
    Set rs = Nothing

End Function

Public Function RecuperaGNComprobantexCosto(transid As Long, _
                                      Optional CodTrans As String, _
                                      Optional NumTrans As Long) As GNComprobante
    Dim obj As GNComprobante
    
    Set obj = New GNComprobante
    Set obj.Empresa = Me
  
    On Error Resume Next
    obj.RecuperarxCosto transid
    If Err.Number = 0 Then Set RecuperaGNComprobantexCosto = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function


Public Function ListaGNTransPresupuesto( _
                    Modulo As String, _
                    BandInvisibles As Boolean, _
                    BandRS As Boolean) As Variant
    Dim sql As String, cond As String, rs As Recordset
    
    sql = "SELECT CodTrans, NombreTrans FROM GNTrans "
    
    If Len(Modulo) > 0 Then cond = cond & "Modulo='" & Modulo & "' "
    If Not BandInvisibles Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "BandVisible=" & CadenaBool(True, TipoDB)
    End If
    
    If Len(cond) > 0 Then sql = sql & "WHERE " & cond
    sql = sql & " and substring(opcion,238,1)='S'"
    sql = sql & " ORDER BY CodTrans"
    Set rs = Me.OpenRecordset(sql)
    
    If BandRS Then
        Set ListaGNTransPresupuesto = rs
    Else
        ListaGNTransPresupuesto = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function CreaPCProvincia() As PCProvincia
    Dim obj As PCProvincia
    Set obj = New PCProvincia
    Set obj.Empresa = Me
    Set CreaPCProvincia = obj
    Set obj = Nothing
End Function

    Public Function ListaPCProvincia(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT pcprov.CodProvincia,pcprov.CodProvinciaSC as CodigoINEC,pcprov.Descripcion,pcp.codPais as CodPais,pcp.Descripcion as Pais FROM PCProvincia pcprov  "
    sql = sql & "Left Join pcpais pcp on pcp.idpais = pcprov.idpais "
    If BandSoloValida Then
        sql = sql & "WHERE pcprov.BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY pcp.codpais,CodigoINEC "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCProvincia = rs
    Else
        ListaPCProvincia = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function CreaPCCanton() As PCCanton
    Dim obj As PCCanton
    Set obj = New PCCanton
    Set obj.Empresa = Me
    Set CreaPCCanton = obj
    Set obj = Nothing
End Function

Public Function RecuperaPCCanton(key As Variant) As PCCanton
    Dim obj As PCCanton
    Set obj = New PCCanton
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaPCCanton = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function ListaPCCanton(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodCanton, PCCAN.CODCANTONSC , pccan.Descripcion,  pcprov.codprovinciasc, pcprov.Descripcion FROM PCCanton pccan LEFT JOIN pcprovincia pcprov on pccan.idprovincia = pcprov.idprovincia "
    If BandSoloValida Then
        sql = sql & "WHERE pccan.BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY pcprov.CODPROVINCIASC, codcantonSC "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCCanton = rs
    Else
        ListaPCCanton = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function CreaPCParroquia() As PCParroquia
    Dim obj As PCParroquia
    Set obj = New PCParroquia
    Set obj.Empresa = Me
    Set CreaPCParroquia = obj
    Set obj = Nothing
End Function

Public Function RecuperaPCParroquia(key As Variant) As PCParroquia
    Dim obj As PCParroquia
    Set obj = New PCParroquia
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaPCParroquia = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function ListaPCParroquia(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodParroquia, pcp.Descripcion, pcc.codcantonsc, pcc.descripcion, pcprov.codprovinciasc, pcprov.descripcion "
    sql = sql & " FROM PCParroquia pcp "
    sql = sql & " LEFT join pccanton pcc "
    sql = sql & " LEFT JOIN pcprovincia pcprov "
    sql = sql & " on pcc.idprovincia = pcprov.idprovincia "
    sql = sql & " on pcp.idcanton=pcc.idcanton"
    If BandSoloValida Then
        sql = sql & " WHERE pcp.BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY pcprov.codprovinciasc, pcc.codcantonsc, CodParroquia, pcc.codcanton "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCParroquia = rs
    Else
        ListaPCParroquia = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaPCCantonxProvincia(BandSoloValida As Boolean, BandRS As Boolean, CodProv As String) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodCanton, codcantonsc,pccan.Descripcion , pcprov.Descripcion "
    sql = sql & "FROM PCCanton pccan left join pcprovincia pcprov on pccan.idprovincia = pcprov.idprovincia "
    sql = sql & " WHERE pcprov.codprovincia='" & CodProv & "'"
    
    If BandSoloValida Then
        sql = sql & "and pccan.BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY codcantonsc "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCCantonxProvincia = rs
    Else
        ListaPCCantonxProvincia = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaPCParroquiaxCanton(BandSoloValida As Boolean, BandRS As Boolean, CodCanton As String) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodParroquia, pccan.Descripcion , pcprov.Descripcion FROM PCParroquia pccan left join pcCanton pcprov on pccan.idCanton = pcprov.idCanton "
    sql = sql & " where pcprov.codCanton='" & CodCanton & " '"
    If BandSoloValida Then
        sql = sql & "and pccan.BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY pcprov.descripcion, codParroquia "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCParroquiaxCanton = rs
    Else
        ListaPCParroquiaxCanton = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaPCProvinciaParaFlex(BandSoloValida As Boolean) As String
    Dim sql As String, rs As Recordset, cad As String
    sql = "SELECT CodProvincia, Descripcion FROM PCProvincia "
    If BandSoloValida Then
        sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY Descripcion "
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then cad = "|" & rs.GetString(adClipString, , vbTab, "|")
    rs.Close
    Set rs = Nothing
    ListaPCProvinciaParaFlex = cad
End Function

Public Function ListaPCCantonxProvinciaFlex(BandSoloValida As Boolean, CodProv As String) As String
    Dim sql As String, rs As Recordset, cad As String
    sql = "SELECT CodCanton, pccan.Descripcion , pcprov.Descripcion FROM PCCanton pccan left join pcprovincia pcprov on pccan.idprovincia = pcprov.idprovincia "
        sql = sql & "WHERE pcprov.codprovincia='" & CodProv & "'"
    
    If BandSoloValida Then
        sql = sql & "and pccan.BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY  codcanton "
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then cad = "|" & rs.GetString(adClipString, , vbTab, "|")
    rs.Close
    Set rs = Nothing
    ListaPCCantonxProvinciaFlex = cad
End Function

Public Function ListaPCParroquiaxCantonFlex(BandSoloValida As Boolean, CodCanton As String) As String
    Dim sql As String, rs As Recordset, cad As String
    sql = "SELECT CodParroquia, pccan.Descripcion , pcparr.Descripcion "
    sql = sql & " FROM PCParroquia pcparr "
    sql = sql & " left join pcCanton pccan "
    sql = sql & " on pccan.idCanton = pcparr.idCanton "
    sql = sql & " WHERE pccan.codcanton='" & CodCanton & "'"
    
    If BandSoloValida Then
        sql = sql & " And pcparr.BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY codParroquia "
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then cad = "|" & rs.GetString(adClipString, , vbTab, "|")
    rs.Close
    Set rs = Nothing
    ListaPCParroquiaxCantonFlex = cad
End Function

Private Function SumaHijosPresupuestoNew(ByRef v As Variant, ByVal j As Long, ByVal col As Long) As Currency
    Dim i As Long, t As Currency
    
    'Busca todos los hijos de la cuenta indicada por j
    ' saca la suma total de los hijos en t
    For i = 0 To UBound(v, 2)
        'Si IdCuentaSuma es igual a IdCuenta de j, es hijo de la cuenta j
        If v(BAL_IDPADRE, i) = v(BAL_IDCUENTA, j) Then
            If Not IsNull(v(col, i)) Then t = t + v(col, i)
        End If
    Next i
    SumaHijosPresupuestoNew = t
End Function

Public Function ConsPRBalanceLineal(bandBalance As Boolean) As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim v As Variant, v2() As Variant, i As Long, j As Long
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsCTBalance")
    qdef.Parameters("FechaDesde") = IIf(bandBalance, Me.GNOpcion.FechaInicio, gobjCond.fecha1)
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodCuenta1") = "0"
    qdef.Parameters("CodCuenta2") = String(20, "9")
    qdef.Parameters("CodSucursal") = gobjCond.Sucursal ' ********* jeaa
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
    If Not rs.EOF Then
        rs.MoveLast
        rs.MoveFirst
        v = rs.GetRows(rs.RecordCount)
    End If
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    sql = "spConsPRBalanceLineal "
    sql = sql & gobjCond.numMoneda & ",'0','" & _
                        String(20, "9") & "'," & _
                        FechaYMD(IIf(bandBalance, Me.GNOpcion.FechaInicio, gobjCond.fecha1), TipoDB) & "," & _
                        FechaYMD(gobjCond.fecha2, TipoDB) & ",'" & gobjCond.Sucursal & "'," & _
                        FechaYMD(IIf(Len(Me.GNOpcion.ObtenerValor("FechaReforma1")) > 0, Me.GNOpcion.ObtenerValor("FechaReforma1"), Date), TipoDB) & "," & _
                        FechaYMD(IIf(Len(Me.GNOpcion.ObtenerValor("FechaReforma2")) > 0, Me.GNOpcion.ObtenerValor("FechaReforma2"), Date), TipoDB) & "," & _
                        FechaYMD(IIf(Len(Me.GNOpcion.ObtenerValor("FechaReforma3")) > 0, Me.GNOpcion.ObtenerValor("FechaReforma3"), Date), TipoDB) & "," & _
                        FechaYMD(IIf(Len(Me.GNOpcion.ObtenerValor("FechaReforma4")) > 0, Me.GNOpcion.ObtenerValor("FechaReforma4"), Date), TipoDB)
                        
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    If Not rs.EOF Then v = rs.GetRows()
#End If
    'Mayoriza los valores
    MayorizaPresupuesto v
    'Pasa los valores de v a v2 cambiando formato
    ' y filtrando registros por TipoCuenta, Nivel y Valor
    j = 0
    For i = 0 To UBound(v, 2)
        If Not IsNull(v(BAL_VALOR, i)) Then
            'Solo los que tengan valor diferente de 0
            'If v(BAL_VALOR, i) <> 0 Then
                'Si es para balance, solo tipo 1,2 y 3, sino solo tipo 4 y 5
                If (bandBalance And (v(BAL_TIPO, i) <= 3)) Or _
                   ((Not bandBalance)) Then 'And (v(BAL_TIPO, i) >= 4)
                   'Solo hasta el nivel indicado
                   If v(BAL_NIVEL, i) <= gobjCond.Nivel Then
                        ReDim Preserve v2(20, j)
                        v2(0, j) = v(BAL_TIPO, i)           'TipoCuenta
                        v2(1, j) = v(BAL_CODCUENTA, i)      'CodCuenta
                        v2(2, j) = v(BAL_NOMBRECUENTA, i)   'Cuenta
                        v2(3, j) = v(BAL_CODSUCURSAL, i)          'CODSUCURSAL   JEAA 16/01/04
                        v2(4, j) = v(BAL_VALOR, i)          'Valor
                        If Not bandBalance Then v2(4, j) = v2(4, j) * -1    'Invierta el signo cuando es EstadoPG
                        v2(5, j) = v(BAL_NIVEL, i)          'Nivel
                        v2(6, j) = v(BAL_VALMODPRESUPUESTO, i)          'Modificaciones
                        v2(7, j) = v(BAL_VALREFORMA1, i)          'REFORMA 1
                        v2(8, j) = v(BAL_VALREFORMA2, i)          'REFORMA 2
                        v2(9, j) = v(BAL_VALREFORMA3, i)          'REFORMA 3
                        v2(10, j) = v(BAL_VALREFORMA4, i)          'REFORMA 4
                        v2(11, j) = v(BAL_VALSALDO, i)          'SALDO
                        v2(12, j) = v(BAL_VALPRESUP_COMP, i)          'Comprometido
                        v2(13, j) = v(BAL_P_COMP, i)          ' % Comprometido
                        v2(14, j) = v(BAL_VALPRESUP_EJEC, i)          'Ejecutado
                        v2(15, j) = v(BAL_P_EJEC, i)          ' % Ejecutado
                        v2(16, j) = v(BAL_COMP_EJEC, i)          ' % comp-Ejecutado
                        v2(17, j) = v(BAL_SALDOLPRESUP, i)          'Saldo Comprometido
                        v2(18, j) = v(BAL_PSALDOLPRESUP, i)          'Saldo Comprometido
                        v2(19, j) = v(BAL_SALDOLPRESUP_EJEC, i)           'Saldo Ejecutado
                        v2(20, j) = v(BAL_PSALDOLPRESUP_EJEC, i)           'Saldo Ejecutado
                        j = j + 1
                    End If
                End If
            'End If
        End If
    Next i
    If j Then ConsPRBalanceLineal = v2
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Balance Presupuesto ", "PR"
End Function


Public Function ListaAnexoTipoComprobanteRISE(BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodComprobante,  Descripcion, SecuencialValidos, Sustentos FROM Anexo_Comprobantes"
    sql = sql & " where CodComprobante IN ('2','4')"
    sql = sql & " ORDER BY CodComprobante"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaAnexoTipoComprobanteRISE = rs
    Else
        ListaAnexoTipoComprobanteRISE = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

' aumenta columna RISE
Public Function ConsANCompras2011() As Variant
    Dim pck As PCKardex, pcd As PCDocAsignado
    Dim objGnComp As GNComprobante, objGnCompDocOriginal As GNComprobante
    Dim sql As String, cond As String, CadenaValores As String
    Dim Recargo As String 'CadenaAgrupa  As String
    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
    Dim from As String, numReg As Long
    Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
    Dim Servicios As String, Bienes As String, RowRet As Long
    Const COL_BASESER = 15
    'segunda parte de la consulta: carga los valores de  Detalles de Anexos
    Const COL_FECHA = 2
    Const COL_CODCREDTRIB = 7
    Const COL_TRANSID = 1
    Const COL_TRANSRET = 5
    Dim condServ As String
    Dim condBien As String
    
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   
    With gobjCond
        
            cond = " AND (GNC.FechaTrans  BETWEEN " & _
                    FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                    FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            
'            If Len(.Usuario1) > 0 Or Len(.Usuario2) > 0 Then
'                   cond = cond & " AND pcprovcli.CodProvCli  BETWEEN  '" & .Usuario1 & "' AND '" & .Usuario2 & "' "
'            End If
            
            VerificaExistenciaTabla 0
            VerificaExistenciaTabla 1
            VerificaExistenciaTabla 2
            VerificaExistenciaTabla 3
            VerificaExistenciaTabla 4
            VerificaExistenciaTabla 5
            VerificaExistenciaTabla 6
            
            sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as TotalDescuento Into tmp0 " & _
                    "From IvRecargo ivR inner join " & _
                        "IvKardexRecargo ivkR Inner join " & _
                            "GnComprobante gNc  " & _
                        "On ivkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = IvkR.IdRecargo "
            sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.CodForma) & ") " & cond & _
                    " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")" & _
                  "Group by IvkR.TransID"
                  
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
                        VerificaExistenciaTablaTemp "t0"
            sql = "Select AfkR.TransID, SUM(AfkR.Valor) as TotalDescuento Into t0 " & _
                    "From IvRecargo ivR inner join " & _
                        "AFKardexRecargo AfkR Inner join " & _
                            "GnComprobante gNc  " & _
                        "On afkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = AfkR.IdRecargo "
            sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.CodForma) & ") " & cond & _
                    " AND GNC.CodTrans IN (" & PreparaCadena(.Usuario1) & ")" & _
                  "Group by afkR.TransID"
            
                  
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg

            
            'jeaa 09/01/2007
            'datos ICE
            sql = " Select Ivkr.TransID, "
            sql = sql & " max(IVK.CostoRealTotal) AS BASEice,"
            sql = sql & " MAX(IVC.CodICE) AS CodICE, max(ivkr.Valor) As ValorICE"
            sql = sql & " Into tmp6"
            sql = sql & " From IvRecargo ivR"
            sql = sql & " inner join IvKardexRecargo ivkR"
            sql = sql & " INNER JOIN IVKARDEX IVK"
            sql = sql & " INNER JOIN IVINVENTARIO IV"
            sql = sql & " INNER JOIN IVRECARGOICE IVC"
            sql = sql & " ON IV.IDICE=IVC.IDICE"
            sql = sql & " ON IVK.IDINVENTARIO=IV.IDINVENTARIO"
            sql = sql & " ON IVKR.TRANSID=IVK.TRANSID"
            sql = sql & " Inner join GnComprobante gNc"
            sql = sql & " On ivkr.TransID = gNc.TransID"
            sql = sql & " On Ivr.IdRecargo = IvkR.IdRecargo"
            sql = sql & " Where gnc.Estado <> 3"
            sql = sql & " AND ivr.CodRecargo IN ('" & gobjMain.EmpresaActual.GNOpcion.ObtenerValor("RecDescParaICE") & "')" & cond
            sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")"
            sql = sql & " Group by IvkR.TransID"
            
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
'--datos de indices
            VerificaExistenciaTabla 3
            sql = " Select  DISTINCT GNC.TransID AS cp_id, GNC_b.TransID AS rtp_id"
            sql = sql & " Into tmp3"
            sql = sql & " From    (gncomprobante GNC Inner join pckardex pck_a ON GNC.TransID = pck_a.TransID ) INNER JOIN"
            sql = sql & "  (gncomprobante GNC_b Inner join pckardex pck_B ON GNC_b.TransID = pck_B.TransID )"
            sql = sql & " ON  PCK_A.ID = PCK_B.IDASIGNADO"
'            sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            If Len(gobjMain.objCondicion.Usuario1) > 0 Then
                sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(gobjMain.objCondicion.CodTrans) + "," + PreparaCadena(gobjMain.objCondicion.Usuario1) & ")"
            Else
                sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(gobjMain.objCondicion.CodTrans) + "," + PreparaCadena(gobjMain.objCondicion.Usuario1) & ")"
            End If

            sql = sql & " AND GNC_b.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion1) & ")"
            sql = sql & " AND (GNC.FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = sql & " and GNC.Estado<>3 and GNC_b.estado<>3 "
            
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            '--datos de la compra
            sql = " Select  GNC.TransID, Ane.FechaAnexos, GNC.FechaTrans, pcprovcli.ruc,"
            sql = sql & " GNC.Nombre, Ane.CodCredTrib, Ane.CodTipoComp, Ane.NumAutSRI,"
            sql = sql & " case when SUBSTRING(gnt.OPCION,31,1)='N'THEN gnt.NumSerieEstablecimiento else Ane.NumSerie end as NumSerie, Ane.NumSecuencial, GNC.Descripcion,"
            sql = sql & " Case Ane.BandDevolucion WHEN 0 THEN 'N' ELSE 'S' END AS BandDev,"
            sql = sql & " Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as Trans,"
            sql = sql & " Gnc.CodTrans as Transa, Gnc.NumTrans as NumTransa,"
            sql = sql & " Case vw.CostoTotalBase0 When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBase0 + (vw.CostoTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))) ) end As Valor0, "
            sql = sql & " Case vw.CostoTotalBaseIVA When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseIVA + (vw.CostoTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) end AS Valor12, "
            sql = sql & " Case vw.CostoTotal When 0 then 0 else "
            sql = sql & " vw.SignoCompra  * (vw.CostoTotal + (vw.CostoTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))))  End AS CostoTotal,  "
            sql = sql & " ane.NumSerieEstablecimiento ,case when SUBSTRING(gnt.OPCION,31,1)='N'THEN gnt.NumSeriePunto else ane.NumSeriePunto end as NumSeriePunto,ane.FechaCaducidad, "
            sql = sql & " tmp6.BASEice, tmp6.CodICE ,tmp6.ValorICE, pcprovcli.TipoProvcli"
            sql = sql & " Into tmp1"
            sql = sql & " from    (( tmp0 Right join gncomprobante Gnc "
            sql = sql & " inner join gntrans gnt"
            sql = sql & " inner join GNTransRecargo gntr"
            sql = sql & " inner join ivrecargo ivr"
            sql = sql & " on ivr.idrecargo=gntr.idrecargo"
            sql = sql & " on gnt.codtrans= gntr.codtrans"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " left join tmp6 on gnc.transid=tmp6.transid"
            sql = sql & " inner join vwConsSUMIVKardexIVA vw ON Gnc.TransID = vw.transid "
            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " left join Anexos Ane on Gnc.TransID = Ane.Transid)"
            sql = sql & " right join pcprovcli  on gnc.IdProveedorRef=pcprovcli.idprovcli"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " and GNC.Estado<>3 " & cond
            
            sql = sql & " union all "
            
            sql = sql & " Select  GNC.TransID, Ane.FechaAnexos, GNC.FechaTrans, pcprovcli.ruc,"
            sql = sql & " GNC.Nombre, Ane.CodCredTrib, Ane.CodTipoComp, Ane.NumAutSRI,"
            sql = sql & " case when SUBSTRING(gnt.OPCION,31,1)='N'THEN gnt.NumSerieEstablecimiento else Ane.NumSerie end as NumSerie, Ane.NumSecuencial, GNC.Descripcion,"
            sql = sql & " Case Ane.BandDevolucion WHEN 0 THEN 'N' ELSE 'S' END AS BandDev,"
            sql = sql & " Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as Trans,"
            sql = sql & " Gnc.CodTrans as Transa, Gnc.NumTrans as NumTransa,"
            sql = sql & " Case vw.CostoTotalBase0 When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBase0 + (vw.CostoTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))) ) end As Valor0, "
            sql = sql & " Case vw.CostoTotalBaseIVA When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseIVA + (vw.CostoTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) end AS Valor12, "
            sql = sql & " Case vw.CostoTotal When 0 then 0 else "
            sql = sql & " vw.SignoCompra  * (vw.CostoTotal + (vw.CostoTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))))  End AS CostoTotal,  "
            sql = sql & " ane.NumSerieEstablecimiento ,case when SUBSTRING(gnt.OPCION,31,1)='N'THEN gnt.NumSeriePunto else ane.NumSeriePunto end as NumSeriePunto,ane.FechaCaducidad, "
            sql = sql & " 0 as BASEice, '' as CodICE , 0 as ValorICE, pcprovcli.TipoProvcli"
            sql = sql & " from    (( t0 Right join gncomprobante Gnc "
            sql = sql & " inner join gntrans gnt"
            sql = sql & " inner join GNTransRecargo gntr"
            sql = sql & " inner join ivrecargo ivr"
            sql = sql & " on ivr.idrecargo=gntr.idrecargo"
            sql = sql & " on gnt.codtrans= gntr.codtrans"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " left join tmp6 on gnc.transid=tmp6.transid"
            sql = sql & " inner join vwConsSUMAFKardexIVA vw ON Gnc.TransID = vw.transid "
            sql = sql & " ON t0.TransID = Gnc.TransID))"
            sql = sql & " left join Anexos Ane on Gnc.TransID = Ane.Transid"
            sql = sql & " right join pcprovcli  on gnc.IdProveedorRef=pcprovcli.idprovcli"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.Usuario1) & ")"
            sql = sql & " and GNC.Estado<>3 " & cond
            
            
            
            
            VerificaExistenciaTabla 1
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            '-- datos de las retenciones
            
            
            
            ' union de las tres tablas
            ' union de las tres tablas
            sql = " select  DISTINCT  a.Transid,a.FechaAnexos, a.FechaTrans, a.Transa,  a.NumTransa, "
            sql = sql & "a.RUC, a.Nombre, "
            sql = sql & " a.NumSerieEstablecimiento , a.NumSeriePunto, "
            sql = sql & " a.NumSecuencial, a.NumAutSRI, a.FechaCaducidad, "
            sql = sql & "a.CodCredTrib, a.CodTipoComp, "
            sql = sql & " a.Descripcion, a.Valor0, a.Valor12, 0,  a.ValorICE, TipoProvCli "
                sql = sql & " From tmp1 a  "
            sql = sql & " order by a.CodTipoComp"

            
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANCompras2011 = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Compraspara Anexos 2011" & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 4
End Function


Public Function RecuperarIDGncomprobantexIdAsignado(ByVal Id As Long) As Long
    Dim rs As Recordset, sql As String
    RecuperarIDGncomprobantexIdAsignado = 0
    sql = "Select p.transid from GNComprobante g inner join pckardex p on g.transid=p.transid Where id = " & Id
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        RecuperarIDGncomprobantexIdAsignado = rs!transid
  End If
    Set rs = Nothing
End Function

'facturacion x lote x cliente
Public Function CargarPCProvCliItems(ByVal IdProvcli As Long) As Recordset
End Function

Public Function ListaPCProvCliXCliente(NumGrupo As Integer, CodGrupo As String, f As Date) As Variant
    Dim sql As String, rs As Recordset, numReg As Long
    On Error GoTo CapturaError
    VerificaExistenciaTabla 99 'tmp99 sera utilizada para guardar la primer parte del sql
    sql = "SELECT IdProvCli,COUNT(idprovcli) AS NumReg,FechaIni, FechaFin, i.codinventario, i.descripcion as descItem, (pu*cantidad) as pu , i.idInventario, Referencia,bandPublicidad, plazo Into TMP99 FROM PCProvCliInv inner join ivinventario i on  PCProvCliInv.idinventario= i.idinventario"
   sql = sql & " WHERE CHARINDEX('" & DatePart("m", f) & "', frecuencia)> 0 "
    sql = sql & " GROUP BY IDPROVCLI, FechaIni, FechaFin,i.codinventario, i.descripcion, pu, cantidad, i.idInventario, Referencia,bandPublicidad, plazo  "
   Me.EjecutarSQL sql, numReg
    'Listado de Clientes con PCGrupo1,2,3
        sql = "SELECT pc.idprovcli, pc.CodProvCli, pc.Nombre, Referencia , idinventario ,codinventario, descItem, pu, 0 as transid, plazo "
             sql = sql & "FROM PCGrupo4 g4 RIGHT JOIN (PCGrupo3 g3 RIGHT JOIN (PCGrupo2 g2 RIGHT JOIN (PCGrupo1 g1 RIGHT JOIN PCProvCli pc " & _
                         " ON g1.IdGrupo1 = pc.IdGrupo1) " & _
                    " ON g2.IdGrupo2 = pc.IdGrupo2) " & _
            " ON g3.IdGrupo3 = pc.IdGrupo3) " & _
            " ON g4.idgrupo4 = pc.IdGrupo4 " & _
            " INNER JOIN TMP99 T ON T.idprovcli = PC.idprovcli"
            sql = sql & " WHERE BandCliente=" & CadenaBool(True, TipoDB)
            sql = sql & " AND BandLote=" & CadenaBool(True, TipoDB)
            sql = sql & " and " & FechaYMD(f, TipoDB) & " between t.FechaIni AND t.FechaFin "
'            sql = sql & " and pc.CodProvCli= '0102070612'"
'            sql = sql & " AND t.FechaIni<=" & FechaYMD(f, TipoDB) & ""
 '           sql = sql & " AND t.FechaFin>=" & FechaYMD(f, TipoDB) & ""
'            sql = sql & " AND   PC.CODPROVCLI = '0102070612'"
           If NumGrupo <> 0 Then sql = sql & " AND  g" & NumGrupo & ".codgrupo" & NumGrupo & " = '" & CodGrupo & "'"
            sql = sql & " GROUP BY pc.idprovcli, pc.CodProvCli, pc.Nombre,pu, idinventario,codinventario, descItem , Referencia,bandPublicidad,plazo"
            sql = sql & " ORDER BY nombre,Referencia ,bandPublicidad desc"
       Set rs = Me.OpenRecordset(sql)
        Set ListaPCProvCliXCliente = rs
     Set rs = Nothing
    Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function


Public Function RecuperaIdInventario(ByRef cod As String) As Long
    Dim sql As String, rs As Recordset
        sql = "SELECT idinventario FROM ivinventario WHERE Codinventario='" & cod & "'"
    Set rs = Me.OpenRecordset(sql)
    With rs
     If rs.RecordCount = 0 Then
        RecuperaIdInventario = 0
      Else
        RecuperaIdInventario = !IdInventario
        Exit Function
        .Close
      End If
    End With
    Set rs = Nothing
End Function

Public Function ListaPCProvCliEmpGarConGrupo(BandProveedor As Boolean, _
                                       BandCliente As Boolean, _
                                       bandEmpleado As Boolean, _
                                       BandGarante As Boolean, _
                                       BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    'Listado de Proveedores/Clientes con PCGrupo1,2,3
    sql = "SELECT pc.CodProvCli, pc.Nombre, a.CodTipoDocumento , pc.ruc ,  TipoProvCli, g1.CodGrupo1, g2.CodGrupo2, g3.CodGrupo3, g4.CodGrupo4,pc.observacion "
             sql = sql & "FROM PCGrupo4 g4 RIGHT JOIN (PCGrupo3 g3 RIGHT JOIN (PCGrupo2 g2 RIGHT JOIN (PCGrupo1 g1 RIGHT JOIN PCProvCli pc " & _
                        " left join Anexo_TipoDocumento a on pc.IdTipoDocumento  = a.Id" & _
                         " ON g1.IdGrupo1 = pc.IdGrupo1) " & _
                    " ON g2.IdGrupo2 = pc.IdGrupo2) " & _
                " ON g3.IdGrupo3 = pc.IdGrupo3) " & _
                " ON g4.idgrupo4 = pc.IdGrupo4 "
    If Not (BandProveedor And BandCliente And BandGarante And bandEmpleado) Then
        If BandProveedor Then
            sql = sql & " WHERE pc.BandProveedor=" & CadenaBool(True, TipoDB)
        ElseIf BandCliente Then
            sql = sql & " WHERE pc.BandCliente=" & CadenaBool(True, TipoDB)
        ElseIf bandEmpleado Then
            sql = sql & " WHERE pc.BandEmpleado=" & CadenaBool(True, TipoDB)
        ElseIf BandGarante Then
            sql = sql & " WHERE pc.BandGarante=" & CadenaBool(True, TipoDB)
        End If
    End If
    sql = sql & " ORDER BY Nombre"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCProvCliEmpGarConGrupo = rs
    Else
        ListaPCProvCliEmpGarConGrupo = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaPCProvCliEmpGarFiltro(bandEmpleado As Boolean, _
                                    codPC As String, _
                                    Nombre As String, _
                                    Direccion As String, _
                                    RUC As String, _
                                    CodGrupoDesde As String, _
                                    CodGrupoHasta As String, _
                                    numG As Integer, _
                                    BandSoloValida As Boolean, _
                                    BandRS As Boolean) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset, i As Integer
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If
    sql = "SELECT pc.CodProvCli, pc.Nombre, a.CodTipoDocumento, pc.RUC, TipoProvCli , g1.CodGrupo1, g2.CodGrupo2, g3.CodGrupo3, g4.CodGrupo4 ,pc.observacion   " & _
          " ,case when p.bandactivo = 1 then 'ACTIVO' else 'INACTIVO' end as estado FROM PCGrupo4 g4 RIGHT JOIN (PCGrupo3 g3 RIGHT JOIN (PCGrupo2 g2 RIGHT JOIN (PCGrupo1 g1 RIGHT JOIN PCProvCli pc " & _
            " left join personal p on p.idempleado = pc.idprovcli" & _
            " left join Anexo_TipoDocumento a on pc.IdTipoDocumento  = a.Id" & _
                          " ON g1.IdGrupo1 = pc.IdGrupo1) " & _
                    " ON g2.IdGrupo2 = pc.IdGrupo2) " & _
                " ON g3.IdGrupo3 = pc.IdGrupo3) " & _
                " ON g4.IdGrupo4 = pc.IdGrupo4 "
            sql = sql & " WHERE BandEmpleado=" & CadenaBool(True, TipoDB)
    If Len(codPC) > 0 Then
        cond = cond & " and (CodProvCli LIKE '" & codPC & comodin & "') "
    End If
    If Len(Nombre) > 0 Then
        cond = cond & " and ((Nombre LIKE '" & Nombre & comodin & "') " & _
                      "OR (Nombre LIKE '" & Nombre & comodin & "')) "
    End If
    If Len(Direccion) > 0 Then
        cond = cond & " and (Direccion1 LIKE '" & Descripcion & comodin & "') "
    End If
    If Len(RUC) > 0 Then
        cond = cond & " and (ruc LIKE '" & RUC & comodin & "') "
    End If
    If Not (Len(CodGrupoDesde) = 0 And Len(CodGrupoHasta) = 0) Then
        cond = cond & " AND (CodGrupo" & numG & " BETWEEN '" & CodGrupoDesde & _
            "' AND '" & CodGrupoHasta & "')"
    End If
    If Len(cond) > 0 Then sql = sql & cond
    sql = sql & " ORDER BY Nombre "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCProvCliEmpGarFiltro = rs
    Else
        ListaPCProvCliEmpGarFiltro = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaPCProvCliEmp(BandProveedor As Boolean, _
                               BandCliente As Boolean, _
                               bandEmpleado As Boolean, _
                               BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
         '------------------- cambiado AUC  02/09/20005
             sql = "SELECT pc.CodProvCli, pc.Nombre, g1.CodGrupo1, g2.CodGrupo2, g3.CodGrupo3,g4.codgrupo4,pc.observacion "
             sql = sql & " FROM PCGrupo4 g4 RIGHT JOIN( PCGrupo3 g3 RIGHT JOIN (PCGrupo2 g2 RIGHT JOIN (PCGrupo1 g1 RIGHT JOIN Empleado pc " & _
                          " ON g1.IdGrupo1 = pc.IdGrupo1) " & _
                    " ON g2.IdGrupo2 = pc.IdGrupo2) " & _
                " ON g3.IdGrupo3 = pc.IdGrupo3) " & _
               " ON g4.idgrupo4 = pc.idgrupo4 "
          '------------------
    If Not (BandProveedor And BandCliente And bandEmpleado) Then
        If BandProveedor Then
            sql = sql & " WHERE BandProveedor=" & CadenaBool(True, TipoDB)
        ElseIf bandEmpleado Then
            sql = sql & " WHERE BandEmpleado=" & CadenaBool(True, TipoDB)
        Else
            sql = sql & " WHERE BandCliente=" & CadenaBool(True, TipoDB)
        End If
        sql = sql & "and Estado <> 2 "
    End If
    sql = sql & " ORDER BY Nombre"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCProvCliEmp = rs
    Else
        ListaPCProvCliEmp = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaPCGrupoOrigen(NumGrupo As Integer, BandSoloValida As Boolean, BandRS As Boolean, Origen As Integer) As Variant
'BandRS : True  --> Devuelve Recordset
'          False --> Devuelve en Array de Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodGrupo" & NumGrupo & ",Descripcion FROM PCGrupo" & NumGrupo
    sql = sql & " WHERE Origen=" & Origen
    If BandSoloValida Then sql = sql & " AND BandValida=" & CadenaBool(True, TipoDB)
    sql = sql & " ORDER BY CodGrupo" & NumGrupo
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCGrupoOrigen = rs
    Else
        ListaPCGrupoOrigen = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function RecuperaPCGrupoOrigen(NumGrupo As Byte, key As Variant, Origen As Integer) As PcGrupo
    Dim obj As PcGrupo
    Set obj = New PcGrupo
    Set obj.Empresa = Me
    obj.NumGrupo = NumGrupo
    obj.Origen = Origen
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaPCGrupoOrigen = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CreaPCGrupoOrigen(NumGrupo As Byte, Origen As Integer) As PcGrupo
    Dim obj As PcGrupo
    Set obj = New PcGrupo
    Set obj.Empresa = Me
    obj.NumGrupo = NumGrupo
    obj.Origen = Origen
    Set CreaPCGrupoOrigen = obj
    Set obj = Nothing
End Function

Public Function ListaPCProvCliEmpParaFlex(bandEmpleado As Boolean) As String
    '*** MAKOTO 23/oct/00 Dejo para la compatibilidad
    ListaPCProvCliEmpParaFlex = ListaPCProvCliEmpParaFlexEx(False, False, bandEmpleado)
End Function

Public Function ListaPCProvCliEmpParaFlexEx( _
                    BandProveedor As Boolean, _
                    BandCliente As Boolean, _
                    bandEmpleado As Boolean) As String
    Dim sql As String, s As String, cond As String
    Dim rs As Recordset
    sql = "SELECT  CodProvCli, Nombre FROM PCProvCli "
    If Not BandProveedor And Not BandCliente And Not bandEmpleado Then
        cond = "BandProveedor=" & CadenaBool(True, Me.TipoDB)
    ElseIf Not BandProveedor And BandCliente And Not bandEmpleado Then
        cond = "BandCliente=" & CadenaBool(True, Me.TipoDB)
    ElseIf bandEmpleado And Not BandCliente And Not BandProveedor Then
        cond = "BandeMPLEADO=" & CadenaBool(True, Me.TipoDB)
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " ORDER BY CodProvCli"
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 20 + 40)         '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    ListaPCProvCliEmpParaFlexEx = s
    rs.Close
    Set rs = Nothing
End Function

Public Function ConsAFKardexCustodio() As Variant
    Dim sql As String, cond As String, rs As Recordset
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsIVKardexPorFecha")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("prmCodBodega") = gobjCond.CodBodega1
    qdef.Parameters("CodItem1") = IIf(Len(gobjCond.CodItem1) = 0, "!", gobjCond.CodItem1)
    qdef.Parameters("CodItem2") = IIf(Len(gobjCond.CodItem2) = 0, String$(20, "z"), gobjCond.CodItem2)
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    sql = "spConsAFKardexcustodioPorFecha " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodBodega1 & "','" & _
                gobjCond.CodItem1 & "','" & _
                gobjCond.CodItem2 & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB)
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    Set ConsAFKardexCustodio = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Kardex AF Custodio " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AF"
End Function

Public Function ListaAFInventario3(CodInventario As String, _
                                  CodAlterno As String, _
                                  Descripcion As String, _
                                  CodBodega As String, _
                                  CodGrupo() As String, _
                                  BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset, i As Integer
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If
    'sql = "SELECT CodInventario, CodAlterno1, Descripcion, NombreCustodio, Exist, "  'AUC cambiado es otro campo
        sql = "SELECT CodInventario, CodAlterno1, Descripcion, NombreCustodio, Exist, " & _
            " CodUbicacion , CodGrupo1, CodGrupo2, CodGrupo3," & _
            " CodGrupo4, CodGrupo5, Observacion,BandValida,BandServicio  FROM vwAFInventario "
    If BandSoloValida Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(BandValida=" & CadenaBool(True, TipoDB) & ")"
    End If
    If Len(CodInventario) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodInventario LIKE '" & CodInventario & comodin & "') "
    End If
    If Len(CodAlterno) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "((CodAlterno1 LIKE '" & CodAlterno & comodin & "') " & _
                      "OR (CodAlterno2 LIKE '" & CodAlterno & comodin & "')) "
    End If
    If Len(Descripcion) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(Descripcion LIKE '" & Descripcion & comodin & "') "
    End If
    If Len(CodBodega) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodigoCustodio='" & CodBodega & "') "
    End If
    For i = LBound(CodGrupo) To UBound(CodGrupo)
        If Len(CodGrupo(i)) > 0 Then
            If Len(cond) > 0 Then cond = cond & "AND "
            cond = cond & "(CodGrupo" & i & " = '" & CodGrupo(i) & "') "
        End If
    Next i
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " ORDER BY CodInventario"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaAFInventario3 = rs
    Else
        ListaAFInventario3 = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ConsAFInvetarioReval( _
                    Optional ByVal NumGrupo As Integer, _
                    Optional ByVal CodGrupo As String, _
                    Optional ByVal codItem As String, _
                    Optional ByVal bandAumento As String) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    '*** MAKOTO 03/oct/00
    sql = "SELECT IdCuentaDepreAcumulada, "
    sql = sql & " CodGrupo" & NumGrupo & ", afg.descripcion, af.IdInventario,  CodInventario, af.Descripcion, TipoDepre,"
    sql = sql & " numdeprereval, FechaTrans, fechaIniDepreval, CostoTotal, numeroprecio,"
    sql = sql & " DepAnterior , IdCuentaDepreGasto, IdCuentaDepRevaloriza  "
        sql = sql & " from "
        sql = sql & " gncomprobante g inner join afkardex afk inner join"
        sql = sql & " afinventario af inner join afgrupo" & NumGrupo
        sql = sql & " afg on af.idgrupo" & NumGrupo & "=afg.idgrupo" & NumGrupo
        sql = sql & " on afk.idinventario=af.idinventario on g.transid = afk.transid"
        sql = sql & " where af.BandValida=1"
        sql = sql & " and codtrans in ('ra','ram')"
        sql = sql & " and fechaIniDepre <= " & FechaYMD(gobjMain.objCondicion.FechaCorte, gobjMain.EmpresaActual.TipoDB)
        sql = sql & " and fechaIniDepre > " & FechaYMD("30/12/1899", gobjMain.EmpresaActual.TipoDB)
        If bandAumento Then
            sql = sql & " and numVidaUtil>DepAnterior and numdeprereval>0"
        Else
            sql = sql & " and numVidaUtil>DepAnterior and numdeprereval<0"
        End If
        sql = sql & " and Bandservicio=0  "
        sql = sql & " and isnull(NumeroDepre,0) <  numVidaUtil "
        sql = sql & " and bandRevalor=1"
        If Len(CodGrupo) > 0 Then
            sql = sql & " and codGrupo" & NumGrupo & " ='" & CodGrupo & "'"
        End If
        If Len(codItem) > 0 Then
            sql = sql & " AND codInventario ='" & codItem & "'"
        End If
    sql = sql & " ORDER BY  CodInventario "
    Set rs = Me.OpenRecordset(sql)
    Set ConsAFInvetarioReval = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta AFInventarioReval " & gobjCond.fecha1 + gobjCond.Hora1 & "-" & gobjCond.fecha2 + gobjCond.Hora2, "GN"
End Function

Public Function ObtieneNumeroDepreciacionReval(ByVal tipodepre As Integer, Codigo As String, _
    ByRef CostoDepTotal As Currency, codigoTrans As String, bandAumento As Boolean) As Integer
    Dim sql As String, rs As Recordset, num As Integer, ct As Currency
    num = 1
    sql = " select"
    sql = sql & " count(Id) As numDep, "
    sql = sql & " sum(CostoTotal)*-1 As CT"
    sql = sql & " from gncomprobante g"
    sql = sql & " inner join afkardex afk"
    sql = sql & " inner join afinventario af"
    sql = sql & " on af.idinventario=afk.idinventario"
    sql = sql & " on g.transid=afk.transid"
    sql = sql & " Where g.Estado <> 3 "
    If bandAumento Then
        sql = sql & " And Cantidad > 0 "
    Else
        sql = sql & " And Cantidad < 0 "
    End If
    sql = sql & " And tipodepre = " & tipodepre
    sql = sql & " and codinventario='" & Codigo & "'"
    sql = sql & " and codtrans='" & codigoTrans & "'"
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        If Not IsNull(rs!numDep) Then num = val(rs!numDep)
        If Not IsNull(rs!ct) Then CostoDepTotal = val(rs!ct)
    End If
    rs.Close
    ObtieneNumeroDepreciacionReval = num
End Function

Public Function ConsTSPorCobrarPagar5() As Variant
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim objCond As Condicion
    Set objCond = gobjMain.objCondicion
    'Si no está especificada la moneda, coge la Moneda predeterminada
    If Len(objCond.CodMoneda) = 0 Then objCond.CodMoneda = MONEDA_PRE
    numMoneda = Me.GNOpcion.IndiceMoneda(objCond.CodMoneda)
#If DAOLIB Then
    sql = "SELECT Id, CodProvCli, Nombre, TransID, CodTrans, Trans, CodForma,NumLetra, Doc, "
    Select Case numMoneda
    Case 1:  sql = sql & "Valor1 AS Valor, VCancelado1 AS VCancelado, " & _
                          "Valor1-VCancelado1 AS Saldo, CodMoneda, Cancela, 1 AS Cotizacion, "
    Case 2:  sql = sql & "Valor2 AS Valor, VCancelado2 AS VCancelado, " & _
                          "Valor2-VCancelado2 AS Saldo, CodMoneda, Cancela, Cotizacion2 AS Cotizacion, "
    Case 3:  sql = sql & "Valor3 AS Valor, VCancelado3 AS VCancelado, " & _
                          "Valor3-VCancelado3 AS Saldo, CodMoneda, Cancela, Cotizacion3 AS Cotizacion, "
    Case 4:  sql = sql & "Valor4 AS Valor, VCancelado4 AS VCancelado, " & _
                          "Valor4-VCancelado4 AS Saldo, CodMoneda, Cancela, Cotizacion4 AS Cotizacion, "
    End Select
    sql = sql & "FechaEmision, Plazo, FechaVenci "
    If objCond.PorCobrar Then
        sql = sql & " FROM vwConsPCPorCobrar "
    Else
        sql = sql & " FROM vwConsPCPorPagar "
    End If
    'Solo los que tengan saldo >0   (Necesario)
    cond = "(Valor" & objCond.numMoneda & ">VCancelado" & objCond.numMoneda & ")"
    'Condición de FechaVenci    (Necesario)             '*** MAKOTO 10/dic/00 Modificado
    cond = cond & " AND (FechaVenci BETWEEN " & _
                    FechaYMD(objCond.fecha1, TipoDB) & " AND " & _
                    FechaYMD(objCond.fecha2, TipoDB) & ")"
    'Condición de CodMoneda     (Necesario)
    If Len(cond) > 0 Then cond = cond & " AND "
    cond = cond & "(CodMoneda='" & Me.GNOpcion.CodMoneda(numMoneda) & "')"
    'Condición de CodProvCli    (Opcional)
    If Len(objCond.CodPC1) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodProvCli='" & objCond.CodPC1 & "')"
    End If
    'Condición de CodForma    (Opcional)
    If Len(objCond.CodForma) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodForma='" & objCond.CodForma & "')"
    End If
    'Condición de Cod. Grupo1 de prov/cliente (Opcional)
    If Len(objCond.CodGrupo) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodGrupo1='" & objCond.CodGrupo & "')"
    End If
    'Condición de si incluir cliente/proveedor          '*** MAKOTO 10/dic/00
    If Len(cond) > 0 Then cond = cond & " AND "
    cond = cond & "(BandCliente=" & CadenaBool(objCond.Cliente, TipoDB) & _
                    " OR BandProveedor=" & CadenaBool(objCond.Proveedor, TipoDB) & ")"
    If Len(cond) > 0 Then sql = sql & " WHERE (" & cond & ")"
    sql = sql & " ORDER BY CodProvCli,FechaVenci"
#Else
       If Not objCond.BandAnticipo Then
            sql = "spConsTSTotalPorCobrarPagar " & numMoneda & ", " & _
                    objCond.CodMoneda & "," & _
                    CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                    CadenaBool(objCond.Cliente, TipoDB) & "," & _
                    CadenaBool(objCond.Proveedor, TipoDB) & "," & _
                    FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                    objCond.CodPC1 & "','" & _
                    objCond.CodPC1 & "','" & _
                    objCond.CodForma & "','" & _
                    objCond.CodForma & "','" & _
                    objCond.CodGrupo & "'," & IIf(Me.GNOpcion.Los100DocCobroPago, 1, 0)
    Else
        sql = "spConsTSTotalPorCobrarpagarxNombre " & numMoneda & ", " & _
                    objCond.CodMoneda & "," & _
                    CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                    CadenaBool(objCond.Cliente, TipoDB) & "," & _
                    CadenaBool(objCond.Proveedor, TipoDB) & "," & _
                    FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                    objCond.CodPC1 & "','" & _
                    objCond.CodPC1 & "','" & _
                    objCond.CodForma & "','" & _
                    objCond.CodForma & "','" & _
                    objCond.CodGrupo & "','" & _
                    objCond.NomCliente & "'," & _
                    IIf(Me.GNOpcion.Los100DocCobroPago, 1, 0)
    End If
                    

#End If
    Set rs = Me.OpenRecordset(sql)
    Set ConsTSPorCobrarPagar5 = rs
    Set rs = Nothing
    Set objCond = Nothing
End Function

Public Function ObtieneDesctoPCGxIVGxFecha(ByVal CodIVGrupo As String, ByVal codPC As String, ByVal codFC As String, ByRef CodDescuento As String) As Double
Dim sql As String, rs As Recordset, NumIVGrupo As Integer, NumPCGrupo As Integer
    CodDescuento = ""
    NumIVGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumIVGrupo")) + 1
    NumPCGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumPCGrupo")) + 1
    sql = " select top 1"
    sql = sql & " ivD.codDescuento as codDesc,"
    sql = sql & " case when ivdiv.Descuento-Penal>0 then ivdiv.Descuento-Penal else 0 end as TotalDesc"
    sql = sql & " From"
    sql = sql & " ivdescuentodetallepc ivdpc "
    sql = sql & " left join pcprovcli pcc  on ivdpc.idprovcli=pcc.idprovcli"
    sql = sql & " left join pcgrupo" & NumPCGrupo & " pcg "
    sql = sql & " inner join pcprovcli pc "
    sql = sql & " on pcg.idgrupo" & NumPCGrupo & "=pc.idgrupo" & NumPCGrupo
    sql = sql & " on ivdpc.IdPCGrupo = pcg.idgrupo" & NumPCGrupo
    sql = sql & " inner join ivdescuentodetalleiv ivdiv "
    sql = sql & " inner join ivgrupo" & NumIVGrupo & " ivg "
    sql = sql & " on ivdiv.IdIVGrupo = ivg.idgrupo" & NumIVGrupo
    sql = sql & " inner join ivdescuentodetallefc ivdfc "
    sql = sql & " inner join TsFormaCobroPago tsf "
    sql = sql & " on ivdfc.idforma=tsf.idforma"
    sql = sql & " inner join ivdescuento ivd"
    sql = sql & " on ivd.iddescuento=ivdfc.iddescuento"
    sql = sql & " on ivd.iddescuento=ivdiv.iddescuento"
    sql = sql & " on ivd.iddescuento=ivdpc.iddescuento"
    sql = sql & " WHERE "
    sql = sql & " ivd.BandValida=1 and "
    sql = sql & " ivg.CodGrupo" & NumIVGrupo & " = '" & CodIVGrupo & "'"
    sql = sql & " and ( pc.CodProvCli ='" & codPC & "' or pcc.CodProvCli ='" & codPC & "')"
    sql = sql & " and tsf.codforma='" & codFC & "'"
    sql = sql & " order by ivd.fechagrabado"
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        ObtieneDesctoPCGxIVGxFecha = rs!TotalDesc
        CodDescuento = rs!codDesc
    End If
    Set rs = Nothing
End Function

Public Function ConsIVKardexProveedor() As Variant
    Dim sql As String, cond As String, rs As Recordset
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsIVKardexPorFecha")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("prmCodBodega") = gobjCond.CodBodega1
    qdef.Parameters("CodItem1") = IIf(Len(gobjCond.CodItem1) = 0, "!", gobjCond.CodItem1)
    qdef.Parameters("CodItem2") = IIf(Len(gobjCond.CodItem2) = 0, String$(20, "z"), gobjCond.CodItem2)
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    sql = "spConsIVKardexPorFechaxProv " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodBodega1 & "','" & _
                gobjCond.CodItem1 & "','" & _
                gobjCond.CodItem1 & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB)
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    Set ConsIVKardexProveedor = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Kardex inv. x Provvedor " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "IV"
End Function

Public Function ListaIVInventario4(CodInventario As String, _
                                  CodAlterno As String, _
                                  Descripcion As String, _
                                  CodBodega As String, _
                                  CodGrupo() As String, _
                                  BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset, i As Integer
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If
    sql = "SELECT CodInventario, Descripcion, Descripcion2, CodUnidad, CodBodega, Exist, " & _
            "Precio1, Precio2, Precio3, DescIV1, DescIV2, DescIV3," & _
            " DescIV4, DescIV5,BandValida FROM vwIVInventario "
    If BandSoloValida Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(BandValida=" & CadenaBool(True, TipoDB) & ")"
    End If
    If Len(CodInventario) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodInventario LIKE '" & CodInventario & comodin & "') "
    End If
    If Len(CodAlterno) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "((CodAlterno1 LIKE '" & CodAlterno & comodin & "') " & _
                      "OR (CodAlterno2 LIKE '" & CodAlterno & comodin & "')) "
    End If
    If Len(Descripcion) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(Descripcion LIKE '" & Descripcion & comodin & "') "
    End If
    If Len(CodBodega) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodBodega='" & CodBodega & "') "
    End If
    For i = LBound(CodGrupo) To UBound(CodGrupo)
        If Len(CodGrupo(i)) > 0 Then
            If Len(cond) > 0 Then cond = cond & "AND "
'            cond = cond & "(CodGrupo" & i & " LIKE '" & CodGrupo(i) & comodin & "') "
            cond = cond & "(CodGrupo" & i & " = '" & CodGrupo(i) & "') "
        End If
    Next i
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " ORDER BY CodInventario,CodBodega "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVInventario4 = rs
    Else
        ListaIVInventario4 = MiGetRows(rs)
        rs.Close
   End If
    Set rs = Nothing
End Function

Public Function ListaPCDiasCredito(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodDiasCredito, Descripcion FROM PCDiasCredito "
    If BandSoloValida Then
        sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY Descripcion "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCDiasCredito = rs
    Else
        ListaPCDiasCredito = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function CreaPCDiasCredito() As PCDiasCredito
    Dim obj As PCDiasCredito
    Set obj = New PCDiasCredito
    Set obj.Empresa = Me
    Set CreaPCDiasCredito = obj
    Set obj = Nothing
End Function

Public Function RecuperaPCDiasCredito(key As Variant) As PCDiasCredito
    Dim obj As PCDiasCredito
    Set obj = New PCDiasCredito
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaPCDiasCredito = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function ConsGNTrans5( _
                    Optional ByVal OrdenAscendente As Boolean) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    '*** MAKOTO 03/oct/00
    sql = "SELECT"
    If gobjCond.TopN > 0 Then
        sql = sql & " TOP " & gobjCond.TopN
    End If
    '*** MAKOTO 05/feb/01 Mod. Aumentado 'NumDocRef' y 'Nombre'
    sql = sql & " vwConsGNTransATT.TransID, vwConsGNTransATT.FechaTrans, vwConsGNTransATT.CodAsiento, vwConsGNTransATT.CodTrans, vwConsGNTransATT.NumTrans, "
    sql = sql & " vwConsGNTransATT.NumDocRef, vwConsGNTransATT.Nombre, vwConsGNTransATT.Descripcion, vwConsGNTransATT.Atencion, "
    sql = sql & " vwConsGNTransATT.Estado, "
    sql = sql & " case vwConsGNTransATT.Estado when '0' THEN 'NO APROV' when '1' THEN 'APROV' when '2' THEN 'DESPA' when '3' THEN 'ANULA' when '4' THEN 'SEM DESP' END AS estado, "
    sql = sql & " vwConsGNTransATT.CodPRAsiento FROM vwConsGNTransATT "
    If gobjMain.GrupoActual.PermisoActual.ConsRepVen Then
        sql = sql & " INNER JOIN GNComprobante gn inner join PCProvCli pc INNER JOIN FCVendedor  v"
        sql = sql & " ON v.idvendedor = pc.idvendedor "
        sql = sql & " ON pc.IdProvcli = gn.idClienteRef "
        sql = sql & " ON gn.transid = vwConsGNTransATT.transid "
    End If
    'Condición de FechaTrans
    cond = "vwConsGNTransATT.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB)
   'Condición de CodTrans
    If Len(cond) > 0 Then cond = cond & " AND "
    If Len(gobjCond.CodTrans) > 0 Then      'Si está especificado transaccion
        'Si es una sola transaccion
        If InStr(gobjCond.CodTrans, ",") = 0 Then
            cond = cond & "(vwConsGNTransATT.CodTrans='" & gobjCond.CodTrans & "')"
        'Si está seleccionado varias trans.
        Else
            cond = cond & "(vwConsGNTransATT.CodTrans IN (" & gobjCond.CodTrans & "))"
        End If
    Else
        'Si no hay condicion de cod.trans, selecciona todas las trans.
        ' que tenga permiso
        s = gobjMain.GrupoActual.PermisoActual.ListaTrans(True)
        If Len(s) > 0 Then
            cond = cond & "(vwConsGNTransATT.CodTrans " & s & ")"
        Else
            cond = cond & "(vwConsGNTransATT.CodTrans = '-------')"    'Para que NO devuelva nada si no tiene ningún permiso  '*** MAKOTO 26/dic/00
        End If
    End If
    'Condición de NumTrans
    If (gobjCond.NumTrans1 > 0) And (gobjCond.NumTrans2 > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTransATT.NumTrans BETWEEN " & gobjCond.NumTrans1 & " AND " & gobjCond.NumTrans2 & ")"
    ElseIf gobjCond.NumTrans1 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTransATT.NumTrans>=" & gobjCond.NumTrans1 & ")"
    ElseIf gobjCond.NumTrans2 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTransATT.NumTrans<=" & gobjCond.NumTrans2 & ")"
    End If
    'Condición de Estado
    If gobjCond.EstadoBool(ESTADO_NOAPROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTransATT.Estado<>" & ESTADO_NOAPROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_APROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTransATT.Estado<>" & ESTADO_APROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_DESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTransATT.Estado<>" & ESTADO_DESPACHADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_ANULADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTransATT.Estado<>" & ESTADO_ANULADO & ")"
    End If
    '----------------------------------------
    '----- CAO 13/06/2006
    '-----------------------------------------
    If gobjCond.EstadoBool(ESTADO_SEMDESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTransATT.Estado<>" & ESTADO_SEMDESPACHADO & ")"
   End If
    If Len(gobjCond.CodCentro1) > 0 And Len(gobjCond.CodCentro2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " codCentro between '" & gobjCond.CodCentro1 & "' and '" & gobjCond.CodCentro2 & "'"
    End If
    If gobjMain.GrupoActual.PermisoActual.ConsRepVen Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " v.codvendedor = '" & gobjMain.UsuarioActual.codUsuario & "'  "
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
   'Ordern de filas
    If OrdenAscendente Then
'        sql = sql & " ORDER BY FechaTrans, TransID"         '*** MAKOTO 03/oct/00 Modificado para que salga más actual al primero
        sql = sql & " ORDER BY vwConsGNTransATT.FechaTrans, vwConsGNTransATT.HoraTrans, vwConsGNTransATT.TransID"         '*** MAKOTO 07/dic/00 Modificado para HoraTrans
    Else
'        sql = sql & " ORDER BY FechaTrans DESC, TransID DESC"
        sql = sql & " ORDER BY vwConsGNTransATT.FechaTrans DESC, vwConsGNTransATT.HoraTrans DESC, vwConsGNTransATT.TransID DESC"       '*** MAKOTO 07/dic/00 HoraTrans agregado
    End If
    Set rs = Me.OpenRecordset(sql)
    Set ConsGNTrans5 = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta General ATT" & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function

Public Function ListaPCProvCliFiltroDetalle(BandProveedor As Boolean, _
                                    BandCliente As Boolean, _
                                   codPC As String, _
                                    Nombre As String, _
                                    Direccion As String, _
                                    RUC As String, _
                                    CodGrupoDesde As String, _
                                    CodGrupoHasta As String, _
                                    numG As Integer, _
                                    BandSoloValida As Boolean, _
                                    BandRS As Boolean) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset, i As Integer
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If
    sql = "SELECT pc.CodProvCli, pc.Nombre, pc.NombreAlterno, pc.RUC, pc.direccion1, pc.Telefono1, "
    sql = sql & " pc.Telefono2, pc.Telefono3,pc.fax,pcprov.descripcion,pccan.descripcion, fc.nombre , "
    sql = sql & " g1.Descripcion, g2.Descripcion, g3.Descripcion, g4.Descripcion ,pc.observacion, PC.ESTADO, "
    sql = sql & " case  pc.estado  when 0 then 'BUENO' WHEN 1 THEN 'REGULAR' ELSE 'MALO' END AS ESTADO"
    sql = sql & "  FROM "
    sql = sql & "  PCGrupo4 g4 RIGHT JOIN (PCGrupo3 g3 RIGHT JOIN (PCGrupo2 g2"
    sql = sql & " RIGHT JOIN (PCGrupo1 g1 RIGHT JOIN PCProvCli pc "
    sql = sql & " ON g1.IdGrupo1 = pc.IdGrupo1) "
    sql = sql & " ON g2.IdGrupo2 = pc.IdGrupo2) "
    sql = sql & " ON g3.IdGrupo3 = pc.IdGrupo3) "
    sql = sql & " ON g4.IdGrupo4 = pc.IdGrupo4 "
    sql = sql & " LEFT JOIN pcprovincia pcprov on pc.idprovincia= pcprov.idprovincia"
    sql = sql & " LEFT JOIN pccanton pccan on pc.idcanton= pccan.idCanton"
    sql = sql & " LEFT JOIN fcvendedor fc on pc.idvendedor= fc.idvendedor"
    If Not (BandProveedor And BandCliente) Then
        If BandProveedor Then
            sql = sql & " WHERE BandProveedor=" & CadenaBool(True, TipoDB)
        Else
            sql = sql & " WHERE BandCliente=" & CadenaBool(True, TipoDB)
        End If
    End If
   If Len(codPC) > 0 Then
        cond = cond & " and (CodProvCli LIKE '" & codPC & comodin & "') "
    End If
    If Len(Nombre) > 0 Then
        cond = cond & " and ((pc.Nombre LIKE '" & Nombre & comodin & "') " & _
                      "OR (pc.Nombre LIKE '" & Nombre & comodin & "')) "
   End If
    If Len(Direccion) > 0 Then
        cond = cond & " and (Direccion1 LIKE '" & Descripcion & comodin & "') "
    End If
    If Len(RUC) > 0 Then
        cond = cond & " and (ruc LIKE '" & RUC & comodin & "') "
    End If
    
    
    
    If Not (Len(CodGrupoDesde) = 0 And Len(CodGrupoHasta) = 0) Then
        cond = cond & " AND (CodGrupo" & numG & " BETWEEN '" & CodGrupoDesde & _
            "' AND '" & CodGrupoHasta & "')"
    End If
    If Len(cond) > 0 Then sql = sql & cond
    sql = sql & " ORDER BY pc.Nombre "
   Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCProvCliFiltroDetalle = rs
   Else
        ListaPCProvCliFiltroDetalle = MiGetRows(rs)
       rs.Close
    End If
    Set rs = Nothing
End Function

Public Function CargaConsolidadoBuffer2() As Variant
    'jeaa 07-07-04
    ' PARA SIETE EMPRESAS COMO MAXIMO
    Dim sql As String, cond As String, CadenaPrecio As String, Trans As String
    Dim cadempresa As String, cadBodega As String, totalcero As Boolean, cond1 As String
    Dim v As Variant, max As Integer, TotalC As String, TotalP As String, i As Integer, rs As Recordset, TotalCMAx As String
    Dim CodInv As String, codBod As String, Orden As String, cadTrans As String
    Dim W As Variant, j As Integer, Grupo As String
    Dim vBod As Variant, vNomEmp As Variant, vTrans As Variant
    Dim Cadtitulo As String, k As Integer
    Dim condTrans As String, vaux As Variant
    Dim numReg As Long, numMoneda As String
    Dim cadETrans As Variant, cadEBodega As Variant, basePrincipal As String
    Dim TotalE As String, TotalProm As String, difDias As Integer, Intervalo As Double
    Dim TotalCUC As String, TotalUtil As String, TotalPUtil As String, Fijo As Integer
    Dim NumMeses As Long
    With gobjCond
        NumMeses = DateDiff("m", .fecha1, .fecha2)
        difDias = DateDiff("d", .fecha1, .fecha2)
        NumMeses = Round(difDias / 30, 0)
        If NumMeses = 0 Then NumMeses = 1
       numMoneda = Trim(IIf(.numMoneda > 0, Str(.numMoneda + 1), ""))
        v = Split(.Sucursal, ";")
        vTrans = Split(.CodTrans, ";")
        For i = 0 To UBound(v)
            vNomEmp = Split(v(i), ",")
            Cadtitulo = Cadtitulo & vNomEmp(1) & " - "
        Next i
        'para quitar el ultimo "-"
        Cadtitulo = Mid$(Cadtitulo, 1, Len(Cadtitulo) - 3)
        cond = " "
        TotalC = ", ( "
        TotalCMAx = ", ( "
        TotalP = ", ( "
        TotalProm = ", ( "
        TotalE = ", ( "
        TotalCUC = ", ( "
        TotalUtil = ", ( "
        TotalPUtil = ", ( "
        max = UBound(v, 1)
        ReDim cadETrans(max, 2)
        ReDim cadEBodega(max, 2)
        cadETrans = llenaCadxEmpresa(vTrans, UBound(v))
        W = Split(v(0), ",")
        basePrincipal = W(1)
        difDias = DateDiff("d", .fecha1, .fecha2)
'        max = 0
        For k = 0 To max
            sql = "SELECT   "
            sql = sql & "  idinventario, CodInventario, Descripcion," & NumMeses & "  as TiempoPromVta, TiempoReposicion, "
            sql = sql & " CodGrupo" & .NumGrupo & " as CodGrupo,"
            sql = sql & "  DescGrupo" & .NumGrupo & "  as DescGrupo,"
            sql = sql & " isnull(sum(Cant),0) * -1  AS TCant,  "
            sql = sql & "  0 AS CantMax "
            sql = sql & "  Into " & basePrincipal & ".dbo.T" & k
            W = Split(v(k), ",")
            sql = sql & " from "
            sql = sql & W(1) & ".dbo.vwVentasPorBodega "
            cond = " WHERE (FechaTrans BETWEEN " & _
                         FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & _
                        " AND " & FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            cond = cond & " AND  AnexoCodTipoComp in (" & PreparaCadena(.CodBanco2) & ") "
            cond = cond & " AND  AnexoCodTipoTrans in (" & PreparaCadena(.CodBanco1) & ") "
            If Not (Len(.Grupo1) = 0 And Len(.Grupo2) = 0) Then
                cond = cond & " AND (codGrupo" & .NumGrupo & " BETWEEN '" & _
                .Grupo1 & "' AND '" & .Grupo2 & "') "
            End If
            If Not (Len(.CodItem1) = 0 And Len(.CodItem2) = 0) Then
                cond = cond & " AND (CodInventario BETWEEN '" & .CodItem1 & "' AND '" & .CodItem2 & "') "
            End If
            Grupo = " group by "
            Grupo = Grupo & "  idinventario, CodInventario, Descripcion,   "
            Orden = " ORDER BY CodInventario"
            Grupo = Grupo & " CodGrupo" & .NumGrupo & " , DescGrupo" & .NumGrupo
            Grupo = Grupo & " , TiempoPromVta , TiempoReposicion"
            sql = sql & cond & cond1 & Grupo & Orden
            VerificaExistenciaTablaTemporal k
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            sql = "  SELECT     idinventario,"
            sql = sql & "  isnull(max(Abs(cant)), 0) As CantMax"
            sql = sql & "  Into " & basePrincipal & ".dbo.T" & k + 50
            sql = sql & "  from "
            sql = sql & W(1) & ".dbo.vwVentasPorBodega"
            sql = sql & " WHERE (FechaTrans BETWEEN " & _
                         FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & _
                        " AND " & FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = sql & " AND  AnexoCodTipoComp in ('18') "
            sql = sql & " AND  AnexoCodTipoTrans in (" & PreparaCadena(.CodBanco1) & ") "
            If Not (Len(.Grupo1) = 0 And Len(.Grupo2) = 0) Then
                sql = sql & " AND (codGrupo" & .NumGrupo & " BETWEEN '" & _
                .Grupo1 & "' AND '" & .Grupo2 & "') "
            End If
            If Not (Len(.CodItem1) = 0 And Len(.CodItem2) = 0) Then
                sql = sql & " AND (CodInventario BETWEEN '" & .CodItem1 & "' AND '" & .CodItem2 & "') "
            End If
                sql = sql & " group by   idinventario"
            VerificaExistenciaTablaTemporal k + 50
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            sql = "select "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".Codinventario, i.Codinventario) As Codinventario, "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".Descripcion, i.Descripcion) as Descripcion, "
            sql = sql & basePrincipal & ".dbo.T" & k & ".TiempoPromVta as TiempoPromVta, "
            sql = sql & basePrincipal & ".dbo.T" & k & ".TiempoReposicion as TiempoReposicion, "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".CodGrupo,i.CodGrupo" & .NumGrupo & ") as CodGrupo, "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".DescGrupo, i.DescGrupo" & .NumGrupo & ") as DescGrupo, "
            sql = sql & "  isnull(sum(" & basePrincipal & ".dbo.T" & k & ".TCant), 0) as TCant, "
            sql = sql & "  isnull(sum(" & basePrincipal & ".dbo.T" & k + 50 & ".CantMax), 0)  as TCAntMAx, "
            sql = sql & "  isnull(sum(" & basePrincipal & ".dbo.T" & k & ".TCant), 0)/" & NumMeses & "as Prom, "
            sql = sql & "  round(isnull(sum(" & basePrincipal & ".dbo.T" & k & ".TCant), 0)/( " & NumMeses & "   *20"
            sql = sql & "   ),1) as PromDiario, "
            sql = sql & "  isnull(sum(i.exist), 0) as Existencia "
            sql = sql & "  Into " & basePrincipal & ".dbo.Tmp" & k
            sql = sql & " from "
            sql = sql & basePrincipal & ".dbo.T" & k & " left join " & basePrincipal & ".dbo.T" & k + 50 & " on " & basePrincipal & ".dbo.T" & k & ".idinventario = " & basePrincipal & ".dbo.T" & k + 50 & ".idinventario"
            sql = sql & "  full join " & W(1) & ".dbo.vwivexist i "
            sql = sql & " on " & basePrincipal & ".dbo.T" & k & ".idinventario=i.idinventario"
            sql = sql & " WHERE ((i.exist <> 0) OR (i.exist= 0))  "
            If Not (Len(.Grupo1) = 0 And Len(.Grupo2) = 0) Then
                sql = sql & "  AND (codGrupo" & .NumGrupo & " BETWEEN '" & _
                .Grupo1 & "' AND '" & .Grupo2 & "') "
            End If
            If Not (Len(.CodItem1) = 0 And Len(.CodItem2) = 0) Then
                sql = sql & "AND (i.CodInventario BETWEEN '" & .CodItem1 & "' AND '" & .CodItem2 & "') "
            End If
            sql = sql & "  group by "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".Codinventario, i.Codinventario) , "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".Descripcion, i.Descripcion) , "
            sql = sql & basePrincipal & ".dbo.T" & k & ".TiempoPromVta, "
            sql = sql & basePrincipal & ".dbo.T" & k & ".TiempoReposicion, "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".CodGrupo,i.CodGrupo" & .NumGrupo & ") , "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".DescGrupo, i.DescGrupo" & .NumGrupo & ")  "
            VerificaExistenciaTabla k
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        Next k
        sql = " select "
        sql = sql & ArmaSQL("CodInventario", max)
        sql = sql & ArmaSQL("descripcion", max)
        sql = Mid$(sql, 1, Len(sql) - 2)
       For i = 0 To max
           TotalC = TotalC & " isnull(TMP" & i & ".TCant,0) +"
           TotalCMAx = TotalCMAx & " isnull(TMP" & i & ".TCantMax,0) +"
            TotalProm = TotalProm & " isnull(TMP" & i & ".prom,0) +"
            TotalP = TotalP & " isnull(TMP" & i & ".PromDiario,0) +"
            TotalE = TotalE & " isnull(TMP" & i & ".Existencia,0) +"
        Next i
        For i = max + 1 To 6
            sql = sql & "  , 0 as TiempoReposicion" & i
            'sql = sql & " , 0 as Cant" & i & ", 0 as PTot" & i
            sql = sql & " , 0 as Cant" & i
            sql = sql & " , 0 as CantMax" & i & ", 0 as PTot" & i
            sql = sql & " , 0 as Prom" & i & ", 0 as existencia" & i
            sql = sql & " , 0 as ExistOptima" & i & " , 0 as Diferencia" & i & ""
        Next i
        TotalC = Mid(TotalC, 1, Len(TotalC) - 1)
        TotalCMAx = Mid(TotalCMAx, 1, Len(TotalCMAx) - 1)
        TotalP = Mid(TotalP, 1, Len(TotalP) - 1)
        TotalProm = Mid(TotalProm, 1, Len(TotalProm) - 1)
        TotalE = Mid(TotalE, 1, Len(TotalE) - 1)
        i = 0
        sql = sql & "  ,isnull(TMP" & i & ".TiempoReposicion,0) AS TiempoRep"
        sql = sql & ", Round(" & Mid$(TotalProm, 2, Len(TotalProm)) & "),0)  as TotalPromMen "
        sql = sql & ", Round(" & Mid$(TotalP, 2, Len(TotalP)) & "),0)  as TotalPromDia "
        sql = sql & ", Round(" & Mid$(TotalE, 2, Len(TotalE)) & "),0)  as TotalExist "
        sql = sql & ", Round(" & Mid$(TotalCMAx, 2, Len(TotalCMAx)) & "),0)  as Totalcmax "
        sql = sql & ", Round(" & Mid(TotalP, 2, Len(TotalP) - 1) & ")  *  isnull(TMP" & i & ".TiempoReposicion,0),0) AS ExistenciaOptima "
        sql = sql & "  Into " & basePrincipal & ".dbo.Tmp" & k + 1
         For i = max To 0 Step -1
            If i = max Then
                sql = sql & " From "
            Else
                sql = sql & " FULL JOIN "
           End If
            sql = sql & " " & basePrincipal & ".dbo.TMP" & i & " "
        Next i
        If max > 0 Then
            For i = 0 To max - 1
                If i = 0 Then
                    CodInv = " ON " & basePrincipal & ".dbo.TMP" & i & ".CodInventario="
                    CodInv = CodInv & "" & basePrincipal & ".dbo.TMP" & i + 1 & ".CodInventario"
                    sql = sql & CodInv
                Else
                    Dim m As Integer
                    CodInv = ""
                    For m = 0 To i
                        If m = 0 Then
                            CodInv = CodInv & " ON " & basePrincipal & ".dbo.TMP" & i & ".CodInventario="
                            CodInv = CodInv & "" & basePrincipal & ".dbo.TMP" & i + 1 & ".CodInventario"
                        Else
                            CodInv = CodInv & " OR " & basePrincipal & ".dbo.TMP" & m - 1 & ".CodInventario="
                            CodInv = CodInv & "" & basePrincipal & ".dbo.TMP" & i + 1 & ".CodInventario"
                        End If
                    Next m
                    sql = sql & CodInv
                End If
            Next i
        End If
        VerificaExistenciaTabla k + 1
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        sql = " select distinct "
        sql = sql & " i.idinventario, t.CodInventario, "
        sql = sql & " t.descripcion,  TotalExist , Totalcmax, "
        sql = sql & "  abs( ExistenciaOptima - TotalExist) as saldo, "
        sql = sql & "  0 as BandPedido, i.tiemporeposicion, ISNULL(TotalPromMen,0), ISNULL(TotalPromDia,0), "
        sql = sql & " case when ISNULL(TotalPromDia,0)<>0 then TotalExist /ISNULL(TotalPromDia,0) else TotalExist end , "
        sql = sql & " pc.nombre, ISNULL(IP.Cantidad,0), ISNULL(CostoUnitario,0), ip.Fecha, ExistenciaOptima, TotalPromMen "
        sql = sql & " from tmp" & k + 1 & " t "
        sql = sql & " inner join ivinventario i on t.codinventario=i.codinventario "
        Select Case .Nivel
        Case 0
            sql = sql & " left join IVProveedorDetalle ip"
            sql = sql & " inner join pcprovcli pc on ip.IdProveedor=pc.idprovcli and ip.bandprincipal=1"
            sql = sql & " on i.idinventario=ip.idinventario"
        Case 1
            sql = sql & " left join VWIVProveedorDetalle ip"
            sql = sql & " inner join pcprovcli pc on ip.IdProveedor=pc.idprovcli"
            sql = sql & " on i.idinventario=ip.idinventario"
        End Select
        If .tipoItem1 Then
            sql = sql & " WHERE (TotalExist  >= ( ExistenciaOptima+ (ExistenciaOptima *0.5))) and (TotalExist <= TotalPromMen)"
            If .IncluirCero Then
                sql = sql & " or  (TotalExist  <  ExistenciaOptima) "
            End If
        Else
            If .IncluirCero Then
                sql = sql & " where (TotalExist  <  ExistenciaOptima) "
            End If
        End If
        i = 0
       sql = sql & " order by "
        sql = sql & "t.CodInventario"
       Set rs = gobjMain.EmpresaActual.OpenRecordset(sql)
    Set CargaConsolidadoBuffer2 = rs
    Set rs = Nothing
    End With
End Function



Public Function ObtieneDesctoPCxItemxFechaAcumula(ByVal CodInventario As String, ByVal codPC As String, ByVal codFC As String, ByRef CodDescuento As String, ByRef BandAcumula As Boolean) As Double
    Dim sql As String, rs As Recordset, NumIVGrupo As Integer, NumPCGrupo As Integer
    CodDescuento = ""
    NumIVGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumIVGrupo")) + 1
    NumPCGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumPCGrupo")) + 1
    sql = " select top 1"
    sql = sql & " ivD.codDescuento as codDesc, ivD.BandAcumula,"
    sql = sql & " case when ivdiv.Descuento-Penal>0 then ivdiv.Descuento-Penal else 0 end as TotalDesc"
    sql = sql & " From"
    sql = sql & " ivdescuentodetallepc ivdpc "
    sql = sql & " left join pcprovcli pcc  on ivdpc.idprovcli=pcc.idprovcli"
    sql = sql & " left join pcgrupo" & NumPCGrupo & " pcg "
    sql = sql & " inner join pcprovcli pc "
    sql = sql & " on pcg.idgrupo" & NumPCGrupo & "=pc.idgrupo" & NumPCGrupo
    sql = sql & " on ivdpc.IdPCGrupo = pcg.idgrupo" & NumPCGrupo
    sql = sql & " inner join ivdescuentodetalleiv ivdiv "
    sql = sql & " inner join ivinventario ivi on ivdiv.idinventario=ivi.idinventario"
    sql = sql & " inner join ivdescuentodetallefc ivdfc "
    sql = sql & " inner join TsFormaCobroPago tsf "
    sql = sql & " on ivdfc.idforma=tsf.idforma"
    sql = sql & " inner join ivdescuento ivd"
    sql = sql & " on ivd.iddescuento=ivdfc.iddescuento"
    sql = sql & " on ivd.iddescuento=ivdiv.iddescuento"
    sql = sql & " on ivd.iddescuento=ivdpc.iddescuento"
    sql = sql & " WHERE "
    sql = sql & " ivd.BandValida=1 "
    sql = sql & " and ( pc.CodProvCli ='" & codPC & "' or pcc.CodProvCli ='" & codPC & "')"
    sql = sql & " and tsf.codforma='" & codFC & "'"
    sql = sql & " and codinventario='" & CodInventario & "'"
    sql = sql & " order by ivd.fechagrabado"
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        ObtieneDesctoPCxItemxFechaAcumula = rs!TotalDesc
        CodDescuento = rs!codDesc
        BandAcumula = rs!BandAcumula
   End If
    Set rs = Nothing
End Function

'AUC 05/10/2011
Public Function ListaSucursal(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodSucursal, Nombre From GnSucursal "
    If BandSoloValida Then
        sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY codsucursal"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaSucursal = rs
    Else
        ListaSucursal = MiGetRows(rs)
      rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ConsGNTransComprometidoAuto(BandForma As Boolean, _
                    Optional ByVal OrdenAscendente As Boolean) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    
    '*** MAKOTO 03/oct/00
    sql = "SELECT"
    
    '*** MAKOTO 05/feb/01 Mod. Aumentado 'NumDocRef' y 'Nombre'
    sql = sql & " TransID, FechaTrans , CodAsiento, CodTrans, NumTrans, " & _
            "NumDocRef, Nombre, Descripcion,   codcuenta, nombrecuenta, debe, haber, Estado, '0' as ValorPagado FROM vwConsGNTransComprometido "
    
    'Condición de FechaTrans
    cond = "FechaTrans  BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB, False) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB, False)
    
    'Condición de CodTrans
    If Len(cond) > 0 Then cond = cond & " AND "
    If Len(gobjCond.CodTrans) > 0 Then      'Si está especificado transaccion
        'Si es una sola transaccion
        If InStr(gobjCond.CodTrans, ",") = 0 Then
            cond = cond & "(CodTrans=" & gobjCond.CodTrans & ")"
        'Si está seleccionado varias trans.
        Else
            cond = cond & "(CodTrans IN (" & gobjCond.CodTrans & "))"
        End If
    Else
            cond = cond & "(CodTrans = '-------')"    'Para que NO devuelva nada si no tiene ningún permiso  '*** MAKOTO 26/dic/00
    End If
    
    
    
    
    If Len(cond) > 0 Then sql = sql & " WHERE estado <>3 and " & cond
    
    'Ordern de filas
    If BandForma Then
            sql = sql & " order by nombreforma,FechaTrans, HoraTrans, TransID  "
    Else
        sql = sql & " ORDER BY FechaTrans, HoraTrans, TransID"
    End If
    

    Set rs = Me.OpenRecordset(sql)
    Set ConsGNTransComprometidoAuto = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta General " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function




Public Function RecuperarEmpleado(ByVal key As Variant) As Personal
    Dim obj As Personal
    Set obj = New Personal
    Set obj.Empresa = Me
    If Len(key) > 0 Then obj.Recuperar key
    Set RecuperarEmpleado = obj
    Set obj = Nothing
End Function
Public Function ListaElementos(Optional ByVal Codigos As String, _
                                Optional ByVal Activos As Boolean) As Variant 'Recordset
    Dim sql As String, rs As Recordset
    sql = "SELECT * FROM Elemento"
        If Codigos <> "" Then
            sql = sql & " WHERE CodElemento in (" & Codigos & ")"
            If Activos Then sql = sql & " and bandActivo=1"
        Else
            If Activos Then sql = sql & " WHERE bandActivo=1"
        End If
    sql = sql & " ORDER BY Orden"
        Set rs = Me.OpenRecordset(sql)
    Set ListaElementos = rs
    Set rs = Nothing
End Function
Public Function ListaElementosParaFlex(Optional Estado As Boolean) As Variant  '19/10/2000
    Dim sql As String, rs As Recordset, v As Variant
    sql = "SELECT CodElemento,Nombre FROM Elemento "
    If Estado Then
        sql = sql & "  WHERE afectaemp = 1"
    End If
        sql = sql & " ORDER BY Orden"
    #If DAOLIB Then
        Set rs = Me.Database.OpenRecordset(sql, dbOpenSnapshot, dbReadOnly)
    #Else
        Set rs = New ADODB.Recordset
        rs.CursorLocation = adUseClient
        rs.Open sql, mcnEmpresa, adOpenStatic, adLockReadOnly
    #End If
    If Not (rs.EOF) Then
        rs.MoveLast
        rs.MoveFirst
        ListaElementosParaFlex = rs.GetRows(rs.RecordCount)
    Else
        Set ListaElementosParaFlex = rs
   End If
    Set rs = Nothing
End Function
Public Function ListaRolTotal() As Recordset
    Dim sql As String, rs As Recordset
    Dim band As Boolean
    Dim cond As String
    sql = "SELECT * FROM Rol "
       sql = sql & " ORDER BY FechaInicio DESC"
        Set rs = Me.OpenRecordset(sql)
    Set ListaRolTotal = rs
    Set rs = Nothing
End Function
Public Function YaExisteRol(ByVal f1 As Date, ByVal f2 As Date) As Boolean
    Dim sql As String, rs As Recordset
        sql = "SELECT * FROM Rol WHERE (FechaInicio >= " & FechaYMD(f1, Me.TipoDB, True) & " and FechaFinal <= " & FechaYMD(f2, Me.TipoDB, True) & _
              ") or (FechaInicio <= " & FechaYMD(f2, Me.TipoDB, True) & " and FechaFinal >= " & FechaYMD(f1, Me.TipoDB, True) & ")"
        Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then GoTo EXISTE
    YaExisteRol = False
    Exit Function
EXISTE:
    YaExisteRol = True
    rs.Close
    Set rs = Nothing
    Exit Function
End Function
'
Public Function ValorCampo(ByVal campo As String, _
                            Optional ByVal CodEmpleado As String) As String
        Dim sql As String, rs As Recordset, i As Long
        sql = "SELECT PcEmp.* FROM personal pcEmp inner join Empleado pc on pc.idprovcli = pcemp.idempleado  WHERE pc.CodProvCli = '" & CodEmpleado & "'"
        Set rs = Me.OpenRecordset(sql)
    If rs.EOF Then Exit Function
    For i = 0 To rs.Fields.Count - 1
        If campo = rs.Fields(i).Name Then
            If rs.Fields(i).Type = adBoolean Then
                ValorCampo = Abs(CInt(rs.Fields(i).value))
            Else
                ValorCampo = rs.Fields(i).value
            End If
            Exit For
        End If
    Next i
    rs.Close
    Set rs = Nothing
End Function
Public Function RecuperarElemento(ByVal key As Variant) As Elementos
    Dim obj As Elementos
    Set obj = New Elementos
    Set obj.Empresa = Me
    If key <> 0 Then obj.Recuperar key
    Set RecuperarElemento = obj
    Set obj = Nothing
End Function
Public Function SumaContador(ByVal CodProvcli As String) As Currency
Dim sql As String
Dim rs As Recordset
On Error GoTo CapturaError
sql = "Select Contador from personal p inner join Empleado pc on pc.idprovcli = p.idempleado"
sql = sql & " Where pc.codProvcli =   '" & CodProvcli & "'"
Set rs = gobjMain.EmpresaActual.OpenRecordset(sql)
If Not IsNull(rs) Then
    SumaContador = rs!Contador
Else
    SumaContador = 0
End If
Exit Function
Set rs = Nothing
CapturaError:
    MsgBox Err.Description
    Exit Function
    Set rs = Nothing
End Function

Public Function RecuperarCurriculum(ByVal key As Variant) As EmpCurriculum
    Dim obj As EmpCurriculum
    Set obj = New EmpCurriculum
    Set obj.Empresa = Me
    If Len(key) > 0 Then obj.Recuperar key
    Set RecuperarCurriculum = obj
    Set obj = Nothing
End Function
Public Function ListaIR() As Variant 'Recordset
    Dim sql As String, rs As Recordset
    sql = "SELECT * FROM ImpuestoRenta"
    sql = sql & " ORDER BY idir"
        Set rs = Me.OpenRecordset(sql)
    Set ListaIR = rs
    Set rs = Nothing
End Function
Public Function RecuperarIR(ByVal key As Long) As ImpuestoRenta
    Dim obj As ImpuestoRenta
    Set obj = New ImpuestoRenta
    Set obj.objEmpresa = Me
    If key <> 0 Then obj.Recuperar key
    Set RecuperarIR = obj
    Set obj = Nothing
End Function

Public Function ListaIRxano(ByVal Ano As String) As Recordset
    Dim sql As String, rs As Recordset
    sql = "SELECT * FROM ImpuestoRenta "
    sql = sql & "WHERE fechaAplica like  '%" & Ano & "%'"
    sql = sql & " ORDER BY idir"
        Set rs = Me.OpenRecordset(sql)
    Set ListaIRxano = rs
    Set rs = Nothing
End Function

Public Function ListaAnexoTipoDocumentoV(BandRS As Boolean, Codigo As String) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodTipoDocumento,  Descripcion FROM Anexo_TipoDocumento"
    If Len(Codigo) > 0 Then
        sql = sql & " WHERE CodTipoDocumento in (" & PreparaCadena(Codigo) & ")"
    End If
    sql = sql & " ORDER BY CodTipoDocumento"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaAnexoTipoDocumentoV = rs
    Else
        ListaAnexoTipoDocumentoV = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function
Public Function ListaPCGrupoId(NumGrupo As Integer, BandSoloValida As Boolean, BandRS As Boolean) As Variant
'BandRS : True  --> Devuelve Recordset
'          False --> Devuelve en Array de Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT idgrupo" & NumGrupo & ", CodGrupo" & NumGrupo & ",Descripcion FROM PCGrupo" & NumGrupo
    If BandSoloValida Then sql = sql & " WHERE BandValida=" & CadenaBool(True, TipoDB)
    sql = sql & " ORDER BY CodGrupo" & NumGrupo
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCGrupoId = rs
    Else
        ListaPCGrupoId = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function
Public Function ListaPCProvCliEmpId(BandProveedor As Boolean, _
                              BandCliente As Boolean, _
                               bandEmpleado As Boolean, _
                               BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
         '------------------- cambiado AUC  02/09/20005
             sql = "SELECT pc.idprovcli,pc.CodProvCli, pc.Nombre, g1.CodGrupo1, g2.CodGrupo2, g3.CodGrupo3,g4.codgrupo4,pc.observacion "
            sql = sql & " FROM PCGrupo4 g4 RIGHT JOIN( PCGrupo3 g3 RIGHT JOIN (PCGrupo2 g2 RIGHT JOIN (PCGrupo1 g1 RIGHT JOIN PCProvCli pc " & _
                          " ON g1.IdGrupo1 = pc.IdGrupo1) " & _
                    " ON g2.IdGrupo2 = pc.IdGrupo2) " & _
                " ON g3.IdGrupo3 = pc.IdGrupo3) " & _
               " ON g4.idgrupo4 = pc.idgrupo4 "
          '------------------
    If Not (BandProveedor And BandCliente And bandEmpleado) Then
        If BandProveedor Then
            sql = sql & " WHERE pc.BandProveedor=" & CadenaBool(True, TipoDB)
       ElseIf bandEmpleado Then
            sql = sql & " WHERE pc.BandEmpleado=" & CadenaBool(True, TipoDB)
       Else
            sql = sql & " WHERE pc.BandCliente=" & CadenaBool(True, TipoDB)
       End If
        sql = sql & "and Estado <> 2 "
    End If
    sql = sql & " ORDER BY Nombre"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCProvCliEmpId = rs
   Else
        ListaPCProvCliEmpId = MiGetRows(rs)
       rs.Close
    End If
    Set rs = Nothing
End Function
Public Function idCTCuenta(ByVal IdCuenta As Long)
Dim sql As String
Dim rs As Recordset
On Error GoTo CapturaError
    sql = "Select idcuenta from ctcuenta where idcuenta = " & IdCuenta
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 1 Then
    Else
    End If
Exit Function
CapturaError:
    Exit Function
End Function



Public Function IdCuentaPersonal(ByVal idElemento As Long, ByVal codemp As String) As Long
Dim sql As String
Dim rs As Recordset
On Error GoTo CapturaError
    'sql = "Select idCuenta from CuentaPersonal INNER JOIN PCPROVCLI PC ON PC.IDPROVCLI = CUENTAPERSONAL.IDEMPLEADO "
    sql = "Select idCuenta from CuentaPersonal INNER JOIN Empleado PC ON PC.IDPROVCLI = CUENTAPERSONAL.IDEMPLEADO "
    sql = sql & "where idElemento = " & idElemento
    sql = sql & " AND PC.CODPROVCLI = '" & codemp & "'"
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        IdCuentaPersonal = rs!IdCuenta
    End If
    Set rs = Nothing
    Exit Function
CapturaError:
    Set rs = Nothing
    MsgBox Err.Description
    Exit Function
End Function

'jeaa 25/04/2005
Public Function ListaARANCEL(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodARANCEL,  Descripcion FROM IVRecargoARANCEL"
    If BandSoloValida Then
        sql = sql & " WHERE BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY CodARANCEL"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaARANCEL = rs
    Else
        ListaARANCEL = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function RecuperaARANCEL(key As Variant) As IVRecargoArancel
    Dim obj As IVRecargoArancel
    Set obj = New IVRecargoArancel
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaARANCEL = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CreaARANCEL() As IVRecargoArancel
    Dim obj As IVRecargoArancel
    Set obj = New IVRecargoArancel
    Set obj.Empresa = Me
    Set CreaARANCEL = obj
    Set obj = Nothing
End Function

Public Function ConsGNTrans2Ret( _
                    Optional ByVal OrdenAscendente As Boolean) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    '*** MAKOTO 03/oct/00
    sql = "SELECT"
    If gobjCond.TopN > 0 Then
        sql = sql & " TOP " & gobjCond.TopN
    End If
    '*** MAKOTO 05/feb/01 Mod. Aumentado 'NumDocRef' y 'Nombre'
    sql = sql & " vwConsGNTrans.TransID, vwConsGNTrans.FechaTrans, vwConsGNTrans.CodAsiento, vwConsGNTrans.CodTrans, "
    sql = sql & " vwConsGNTrans.NumTrans, "
    sql = sql & " vwConsGNTrans.NumDocRef, vwConsGNTrans.Nombre, vwConsGNTrans.Descripcion, vwConsGNTrans.CodCentro,"
    sql = sql & " vwConsGNTrans.Estado , "
    sql = sql & " case vwConsGNTrans.Estado when '0' THEN 'NO CONT' when '1' THEN 'APROV' when '2' THEN 'DESPA' when '3' THEN 'ANULA' when '4' THEN 'SEM DESP' END AS estadoL, "
    sql = sql & " vwConsGNTrans.CodPRAsiento, vwConsGNTrans.TransRet FROM vwConsGNTransRet vwConsGNTrans "
    If gobjMain.GrupoActual.PermisoActual.ConsRepVen Then
        sql = sql & " INNER JOIN GNComprobante gn inner join PCProvCli pc INNER JOIN FCVendedor  v"
        sql = sql & " ON v.idvendedor = pc.idvendedor "
        sql = sql & " ON pc.IdProvcli = gn.idClienteRef "
        sql = sql & " ON gn.transid = vwConsGNTrans.transid "
    End If
    'Condición de FechaTrans
    cond = "vwConsGNTrans.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB)
   'Condición de CodTrans
    If Len(cond) > 0 Then cond = cond & " AND "
    If Len(gobjCond.CodTrans) > 0 Then      'Si está especificado transaccion
        'Si es una sola transaccion
        If InStr(gobjCond.CodTrans, ",") = 0 Then
            cond = cond & "(vwConsGNTrans.CodTrans='" & gobjCond.CodTrans & "')"
        'Si está seleccionado varias trans.
        Else
            cond = cond & "(vwConsGNTrans.CodTrans IN (" & gobjCond.CodTrans & "))"
        End If
    Else
        'Si no hay condicion de cod.trans, selecciona todas las trans.
        ' que tenga permiso
        s = gobjMain.GrupoActual.PermisoActual.ListaTrans(True)
        If Len(s) > 0 Then
            cond = cond & "(vwConsGNTrans.CodTrans " & s & ")"
        Else
            cond = cond & "(vwConsGNTrans.CodTrans = '-------')"    'Para que NO devuelva nada si no tiene ningún permiso  '*** MAKOTO 26/dic/00
        End If
    End If
    'Condición de NumTrans
    If (gobjCond.NumTrans1 > 0) And (gobjCond.NumTrans2 > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.NumTrans BETWEEN " & gobjCond.NumTrans1 & " AND " & gobjCond.NumTrans2 & ")"
    ElseIf gobjCond.NumTrans1 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.NumTrans>=" & gobjCond.NumTrans1 & ")"
    ElseIf gobjCond.NumTrans2 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.NumTrans<=" & gobjCond.NumTrans2 & ")"
    End If
    'Condición de Estado
    If gobjCond.EstadoBool(ESTADO_NOAPROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.Estado<>" & ESTADO_NOAPROBADO & ")"

    End If
    If gobjCond.EstadoBool(ESTADO_APROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.Estado<>" & ESTADO_APROBADO & ")"

    End If
    If gobjCond.EstadoBool(ESTADO_DESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.Estado<>" & ESTADO_DESPACHADO & ")"

    End If
    If gobjCond.EstadoBool(ESTADO_ANULADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.Estado<>" & ESTADO_ANULADO & ")"

    End If
    '----------------------------------------
    '----- CAO 13/06/2006
    '-----------------------------------------
    If gobjCond.EstadoBool(ESTADO_SEMDESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.Estado<>" & ESTADO_SEMDESPACHADO & ")"
   End If
    If Len(gobjCond.CodCentro1) > 0 And Len(gobjCond.CodCentro2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " codCentro between '" & gobjCond.CodCentro1 & "' and '" & gobjCond.CodCentro2 & "'"
    End If
    If gobjMain.GrupoActual.PermisoActual.ConsRepVen Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " v.codvendedor = '" & gobjMain.UsuarioActual.codUsuario & "'  "
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
   'Ordern de filas
    If OrdenAscendente Then
'        sql = sql & " ORDER BY FechaTrans, TransID"         '*** MAKOTO 03/oct/00 Modificado para que salga más actual al primero
        sql = sql & " ORDER BY vwConsGNTrans.FechaTrans, vwConsGNTrans.HoraTrans, vwConsGNTrans.TransID"         '*** MAKOTO 07/dic/00 Modificado para HoraTrans
    Else
'        sql = sql & " ORDER BY FechaTrans DESC, TransID DESC"
        sql = sql & " ORDER BY vwConsGNTrans.FechaTrans DESC, vwConsGNTrans.HoraTrans DESC, vwConsGNTrans.TransID DESC"       '*** MAKOTO 07/dic/00 HoraTrans agregado
    End If
    Set rs = Me.OpenRecordset(sql)
    Set ConsGNTrans2Ret = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta General " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function


Public Function RecuperaIVInventarioAlt2(key As Variant) As IVInventario
    Dim obj As IVInventario
    
    Set obj = New IVInventario
    Set obj.Empresa = Me
    On Error Resume Next
    obj.RecuperarALt2 key
    If Err.Number = 0 Then Set RecuperaIVInventarioAlt2 = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function


Public Function ConsCTvsPR() As Variant
    Dim sql As String, cond As String, numReg As Long
    Dim rs As Recordset
    sql = " SELECT"
    sql = sql & " transid, GNComprobante.FechaTrans, (GNComprobante.CodTrans+' '+CONVERT(VARCHAR,GNComprobante.NumTrans)) AS Trans, GNComprobante.descripcion,"
    sql = sql & " PRCuenta.CodCuenta, PRCuenta.NombreCuenta, PRCuenta.idlocal, "
    Select Case gobjCond.numMoneda
        Case 1: sql = sql & " sum(Debe) AS Debe0, sum(Haber) AS Haber0, 1 AS Cotizacion, "
        Case 2: sql = sql & " sum(Debe/Cotizacion2) AS Debe0, sum(Haber/Cotizacion2) AS Haber0, "
        Case 3: sql = sql & " sum(Debe/Cotizacion3) AS Debe0, sum(Haber/Cotizacion3) AS Haber0, "
        Case 4: sql = sql & " sum(Debe/Cotizacion4) AS Debe0, sum(Haber/Cotizacion4) AS Haber0, "
    End Select
    sql = sql & " 0 AS Saldo0"
    sql = sql & " Into tmp0"
    sql = sql & " FROM PRCuenta INNER JOIN GNComprobante"
    sql = sql & " INNER JOIN PRLibroDetalle"
    sql = sql & " ON GNComprobante.CodPRAsiento = PRLibroDetalle.CodAsiento"
    sql = sql & " ON PRCuenta.IdCuenta = PRLibroDetalle.IdCuenta"
    sql = sql & " WHERE (GNComprobante.Estado<>3 And GNComprobante.Estado<>0)"
    sql = sql & " AND (GNComprobante.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB) & ")"
    sql = sql & " and codtrans not in (" & PreparaCadena(Me.GNOpcion.ObtenerValor("TransVerificaSaldoPresupuesto")) & ")"
    sql = sql & " group by"
    sql = sql & " transid, GNComprobante.FechaTrans, GNComprobante.CodTrans ,GNComprobante.NumTrans, GNComprobante.descripcion,"
    sql = sql & " PRCuenta.CodCuenta, PRCuenta.NombreCuenta, PRCuenta.idlocal "

    
    
    VerificaExistenciaTabla 0
    Me.EjecutarSQL sql, numReg
    sql = " SELECT"
    sql = sql & " transid, GNComprobante.FechaTrans, (GNComprobante.CodTrans+' '+CONVERT(VARCHAR,GNComprobante.NumTrans)) AS Trans, GNComprobante.descripcion,"
    sql = sql & " CTCuenta.idcuenta, "
    sql = sql & " CTCuenta.CodCuenta, CTCuenta.NombreCuenta,"
    Select Case gobjCond.numMoneda
        Case 1: sql = sql & " sum(Debe) AS Debe1, sum(Haber) AS Haber1, 1 AS Cotizacion, "
        Case 2: sql = sql & " sum(Debe/Cotizacion2) AS Debe1, sum(Haber/Cotizacion2) AS Haber1, "
        Case 3: sql = sql & " sum(Debe/Cotizacion3) AS Debe1, sum(Haber/Cotizacion3) AS Haber11, "
        Case 4: sql = sql & " sum(Debe/Cotizacion4) AS Debe1, sum(Haber/Cotizacion4) AS Haber1, "
    End Select
    sql = sql & " 0 AS Saldo1"
    sql = sql & " Into tmp1"
    sql = sql & " FROM CTCuenta INNER JOIN GNComprobante"
    sql = sql & " INNER JOIN CTLibroDetalle"
    sql = sql & " ON GNComprobante.CodAsiento = CTLibroDetalle.CodAsiento"
    sql = sql & " ON CTCuenta.IdCuenta = CTLibroDetalle.IdCuenta"
    sql = sql & " WHERE (GNComprobante.Estado<>3 And GNComprobante.Estado<>0)"
    sql = sql & " and (GNComprobante.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB) & ")"
    sql = sql & " and ctcuenta.bandtotal=0 "
    sql = sql & " group by"
    sql = sql & " transid, GNComprobante.FechaTrans, GNComprobante.CodTrans ,GNComprobante.NumTrans, GNComprobante.descripcion,"
    sql = sql & " CTCuenta.idcuenta, "
    sql = sql & " CTCuenta.CodCuenta, CTCuenta.NombreCuenta "

    
    VerificaExistenciaTabla 1
    Me.EjecutarSQL sql, numReg
    sql = " select "
    sql = sql & " t1.codcuenta , t1.NombreCuenta, t1.FechaTrans, "
    sql = sql & " t1.Trans, debe0, haber0, "
    sql = sql & " t0.codcuenta , t0.NombreCuenta, "
    sql = sql & " debe1, haber1 ,debe1-isnull(debe0,0) as difDebe , haber1-isnull(haber0,0) as difHaber "
    sql = sql & " from tmp1 t1 left join tmp0 t0"
    sql = sql & " on t0.transid=t1.transid "
    sql = sql & " and t0.idlocal=t1.idcuenta  "
    If Len(gobjCond.CodCuenta1) > 0 Then
        sql = sql & " where t1.codcuenta between '" & gobjCond.CodCuenta1 & "' and '" & gobjCond.CodCuenta2 & "'"
    End If
    sql = sql & " order by t1.codcuenta, t1.FechaTrans "
    Set rs = Me.OpenRecordset(sql)
    Set ConsCTvsPR = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Asientos CT vs Presupuestarios " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "PR"
End Function

Public Function ConsEMPKardex() As Variant
    Dim sql As String, rs As Recordset
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsPCKardexPorFecha")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodProvCli1") = IIf(Len(gobjCond.CodPC1) = 0, "!", gobjCond.CodPC1)
    qdef.Parameters("CodProvCli2") = IIf(Len(gobjCond.CodPC2) = 0, String$(20, "z"), gobjCond.CodPC2)
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    qdef.Parameters("prmBandProveedor") = BandProveedor
    qdef.Parameters("prmBandCliente") = BandCliente
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
        sql = "spConsEMPKardexPorFechaVen " & _
                    gobjCond.numMoneda & ",'" & _
                gobjCond.CodPC1 & "','" & _
                gobjCond.CodPC2 & "'," & _
                gobjCond.CodItem1 & "','" & _
                gobjCond.CodItem2 & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB)
   rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    Set ConsEMPKardex = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Kardex Emp ", "PC"
End Function


Public Function ConsEMPKardexPorTrans() As Variant
    Dim sql As String, rs As Recordset
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsPCKardexPorTrans")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodProvCli1") = IIf(Len(gobjCond.CodPC1) = 0, "!", gobjCond.CodPC1)
    qdef.Parameters("CodProvCli2") = IIf(Len(gobjCond.CodPC2) = 0, String$(20, "z"), gobjCond.CodPC2)
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    qdef.Parameters("prmBandProveedor") = BandProveedor
    qdef.Parameters("prmBandCliente") = BandCliente
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
        sql = "spConsEMPKardexPorTransVen " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodPC1 & "','" & _
                gobjCond.CodPC2 & "','" & _
                gobjCond.CodItem1 & "','" & _
                gobjCond.CodItem2 & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB)
   rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    Set ConsEMPKardexPorTrans = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Kardex x Trans Emp ", "PC"
End Function


Public Function ListaEmpProvCliPorCodigo(bandEmpleado As Boolean, _
                               BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
    sql = "SELECT CodProvCli,Nombre FROM Empleado "
        If bandEmpleado Then
            sql = sql & " WHERE BandEmpleado=" & CadenaBool(True, TipoDB)

        End If
    sql = sql & " ORDER BY CodProvCli"

    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaEmpProvCliPorCodigo = rs
    Else
        ListaEmpProvCliPorCodigo = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


Public Function DesctoPCGrupoxItemxFecha(ByVal CodPCGrupo As String, ByVal codItem As String, ByVal codFC As String) As Double
Dim sql As String, rs As Recordset, NumIVGrupo As Integer, NumPCGrupo As Integer
    NumIVGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumIVGrupo")) + 1
    NumPCGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumPCGrupo")) + 1
    
    sql = " select top 1"
    sql = sql & " ivD.codDescuento,"
    sql = sql & " case when ivdiv.Descuento-Penal>0 then ivdiv.Descuento-Penal else 0 end as TotalDesc"
    sql = sql & " From"
    sql = sql & " ivdescuentodetallepc ivdpc "
    sql = sql & " inner join pcgrupo" & NumPCGrupo & " pcg "
    sql = sql & " on ivdpc.IdPCGrupo = pcg.idgrupo" & NumPCGrupo
    sql = sql & " inner join ivdescuentodetalleiv ivdiv "
    sql = sql & " inner join ivinventario iv  on ivdiv.Idinventario = iv.idinventario"
    sql = sql & " inner join ivdescuentodetallefc ivdfc "
    sql = sql & " inner join TsFormaCobroPago tsf "
    sql = sql & " on ivdfc.idforma=tsf.idforma"
    sql = sql & " inner join ivdescuento ivd"
    sql = sql & " on ivd.iddescuento=ivdfc.iddescuento"
    sql = sql & " on ivd.iddescuento=ivdiv.iddescuento"
    sql = sql & " on ivd.iddescuento=ivdpc.iddescuento"
    sql = sql & " WHERE "
    sql = sql & " ivd.BandValida=1 and "
    sql = sql & " pcg.CodGrupo" & NumPCGrupo & " = '" & CodPCGrupo & "'"
    sql = sql & " and ( iv.Codinventario ='" & codItem & "')"
    'sql = sql & " and tsf.codforma='" & codFC & "'"
    sql = sql & " order by ivd.fechagrabado"
    
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        DesctoPCGrupoxItemxFecha = rs!TotalDesc
    End If
    Set rs = Nothing
End Function
Public Function ListaElementosTipoRol(Optional ByVal Codigos As String, _
                                Optional ByVal Activos As Boolean) As Variant 'Recordset
    Dim sql As String, rs As Recordset
        sql = "SELECT * FROM vwElemento"
       ' If Codigos <> "" Then
        '    sql = sql & " WHERE CodElemento in (" & Codigos & ")"
         '   If Activos Then sql = sql & " and bandActivo=1"
        'Else
            sql = sql & " WHERE bandActivo=1"
           ' If Activos Then
                sql = sql & " AND (CodTipoRol = '" & gobjMain.objCondicion.CodTipoRol & "'"
                sql = sql & " OR CodTipoRol1 = '" & gobjMain.objCondicion.CodTipoRol & "'"
                sql = sql & " OR CodTipoRol2 = '" & gobjMain.objCondicion.CodTipoRol & "'"
                sql = sql & " OR CodTipoRol3 = '" & gobjMain.objCondicion.CodTipoRol & "')"
          ' End If
        sql = sql & " ORDER BY Orden"
        Set rs = Me.OpenRecordset(sql)
    Set ListaElementosTipoRol = rs
    Set rs = Nothing
End Function
Public Function ListaTipoRol(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT idtipo,codigo, Descripcion FROM Tiporol "
   If BandSoloValida Then
        sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY Descripcion "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaTipoRol = rs
    Else
        ListaTipoRol = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function
Public Function CreaTipoRol() As TipoRol
    Dim obj As TipoRol
    Set obj = New TipoRol
   Set obj.Empresa = Me
    Set CreaTipoRol = obj
    Set obj = Nothing
End Function
Public Function RecuperaTiporol(key As Variant) As TipoRol
    Dim obj As TipoRol
    Set obj = New TipoRol
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaTiporol = obj
   Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function
Public Function ListaTipoRolParaFlex() As Variant
    Dim sql As String, rs As Recordset, v As Variant
    sql = "SELECT Codigo, descripcion FROM tiporol"
        sql = sql & " ORDER BY codigo"
        Set rs = Me.OpenRecordset(sql)
    If Not (rs.EOF) Then
        rs.MoveLast
        rs.MoveFirst
        ListaTipoRolParaFlex = rs.GetRows(rs.RecordCount)
    Else
        Set ListaTipoRolParaFlex = rs
  End If
    Set rs = Nothing
End Function
Public Function ConsEmpSaldoconF_CorteEmpleados() As Variant
    Dim sql As String, cond As String, rs As Recordset
   Dim aux As String, Condicion As String
   Dim numReg As Long, Trans As String, i As Integer
        VerificaExistenciaTabla 1
        'Prepara reporte utilizando Tablas Temporales
    '1) Prepara los  documentos  Asignados  menores a la fecha
        aux = IIf(gobjCond.numMoneda > 0, "/Cotizacion" & gobjCond.numMoneda + 1, "")
        sql = "SELECT " & _
            "pck.IdAsignado, " & _
            "(pck.Debe + pck.Haber) " & aux & " AS Valor " & _
            "INTO tmp1 " & _
            "From " & _
            "GNtrans gt INNER JOIN " & _
                "(GNComprobante gc INNER JOIN PCKardex pck  " & _
                "ON gc.transID = pck.transID) " & _
                          "ON gt.Codtrans = gc.Codtrans " & _
            "Where (pck.IdAsignado <> 0) " & _
            "AND (gc.Estado <> 3) " & _
            "AND (gt.AfectaSaldoPC=1) " & _
            "AND (gc.Fechatrans<= " & FechaYMD(gobjCond.FechaCorte, gobjMain.EmpresaActual.TipoDB) & ")"
        sql = sql & " And pck.idelemento <> 0"
       gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        VerificaExistenciaTabla 2
    '2)Agrupa  estos  documentos por IdAsignado
        sql = "SELECT " & _
              "IdAsignado," & _
              "isnull(Sum(Valor),0) AS VCancelado " & _
              "INTO tmp2 " & _
              "FROM tmp1 " & _
              "GROUP BY IdAsignado"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
    '3) Finalmente une  con el documento  Padre
        VerificaExistenciaTabla 3
        sql = "SELECT  gc.transId, gc.Codtrans, gc.Numtrans, gc.NumDocRef, pc.IdProvCli, " & _
            "pc.CodProvCli, pc.Nombre, " & _
            "(pck.Debe ) " & aux & " AS Debe, " & _
            "( pck.Haber) " & aux & " AS Haber, " & _
            "(pck.Debe + pck.Haber) " & aux & " AS Valor, " & _
            "isnull(vw.VCancelado,0) AS VCancelado, " & _
            "(pck.Debe + pck.Haber) " & aux & " - isnull(vw.VCancelado,0) AS Saldo, "
            sql = sql & " case "
            sql = sql & " when pck.Debe = 0 then 0"
            sql = sql & " when(pck.Debe + pck.Haber) / Cotizacion3 <= isnull(vw.VCancelado,0)  then (pck.Debe + pck.Haber) /Cotizacion3 - isnull(vw.VCancelado,0)"
            sql = sql & " when vw.VCancelado is null  then debe"
            sql = sql & " when vw.VCancelado <>0  then (pck.Debe + pck.Haber) /Cotizacion3 - isnull(vw.VCancelado,0)"
            sql = sql & " else 0"
            sql = sql & " end  AS SaldoDEBE,"
            sql = sql & " case"
            sql = sql & " when pck.Haber = 0 then 0"
            sql = sql & " when pck.debe=0 then (haber-isnull(vw.VCancelado,0))*-1"
            sql = sql & " when pck.haber=0 then (debe-isnull(vw.VCancelado,0))*-1"
            sql = sql & " when(pck.Debe + pck.Haber) / Cotizacion3 > vw.VCancelado  then ((pck.Debe + pck.Haber) /Cotizacion3 - vw.VCancelado )*-1"
            sql = sql & " else 0"
            sql = sql & " end AS Saldohaber,"
            sql = sql & " pck.IdForma, pck.NumLetra, " & _
            "pck.FechaEmision, pck.FechaVenci, " & _
            "pck.Observacion " & _
            "INTO tmp3 " & _
            "From GNComprobante gc INNER JOIN " & _
                    "(Empleado pc  INNER JOIN " & _
                    "    (PCKardex pck  LEFT JOIN " & _
                    "      tmp2 vw  ON vw.IdAsignado = pck.Id) " & _
                    " ON pc.IdProvCli = pck.IdProvCli) " & _
                "ON gc.transID = pck.transID " & _
            "Where (pck.IdAsignado = 0) And (gc.Estado <> 3) " & _
            "AND (gc.Fechatrans<=" & FechaYMD(gobjCond.FechaCorte, gobjMain.EmpresaActual.TipoDB) & ")"
                If gobjCond.TipoSaldo = 1 Then
                    sql = sql & "AND (pck.DEBE > 0) "
                ElseIf gobjCond.TipoSaldo = 2 Then
                    sql = sql & "AND (pck.HABER > 0) "
               End If
                    sql = sql & "and bandEmpleado=1"
                    sql = sql & "and pck.idelemento<>0"
      gobjMain.EmpresaActual.EjecutarSQL sql, numReg
    '---------------------------------------------------------------------------------
    '4  Consulta  final
        If gobjCond.TipoSaldo = 1 Then
            Condicion = Condicion & " AND vw.FechaVenci <= " & FechaYMD(gobjCond.FechaCorte, gobjMain.EmpresaActual.TipoDB)
        End If
        If Len(gobjCond.CodPCGrupo) > 0 Then
            Condicion = Condicion & " AND PCGrupo" & gobjCond.NumPCGrupo & ".CodGrupo" & gobjCond.NumPCGrupo & " = '" & _
                        gobjCond.CodPCGrupo & " '"
        End If
#If DAOLIB Then
    Trans = "vw.Codtrans & ' ' & CSTR(vw.Numtrans)"
#Else
    Trans = "vw.Codtrans + ' ' + CONVERT(varchar,vw.Numtrans)"
#End If
       sql = "SELECT " & _
             "vw.CodProvCli, vw.Nombre,  "
            If gobjCond.TipoSaldo = 0 Then
                sql = sql & " (sum(vw.saldodebe)) as debe, "
                sql = sql & "  (sum(vw.saldohaber)) as haber, "
                sql = sql & " sum(vw.saldodebe)+sum(saldoHaber) as saldo,"
           Else
                sql = sql & " abs(sum(vw.VALOR)) as debe, " & _
                "abs(sum(vw.VCANCELADO)) as haber, " & _
                " ( (abs(sum(vw.VALOR)) - abs(sum(vw.VCANCELADO)) ))*-1 as Saldo, "
           End If
            sql = sql & " PCGrupo1.CODGRUPO1, PCGrupo1.DESCRIPCION,    PCGrupo2.CODGRUPO2, PCGrupo2.DESCRIPCION,  PCGrupo3.CODGRUPO3,   PCGrupo3.Descripcion,  PCGrupo4.CODGRUPO4, PCGrupo4.Descripcion, codcuenta, nombrecuenta"
             sql = sql & " FROM Gntrans INNER JOIN ((tmp3 vw INNER JOIN " & _
               "((Empleado  left join ctcuenta on ctcuenta.idcuenta= Empleado.idcuentacontable LEFT JOIN PCGrupo1 ON " & _
                    " (Empleado.IdGrupo1 =  PCGrupo1.IDGrupo1 )" & _
                    " LEFT JOIN PCGrupo2 ON Empleado.IdGrupo2 =  PCGrupo2.IDGrupo2) " & _
                    " LEFT JOIN PCGrupo3 ON Empleado.IdGrupo3 =  PCGrupo3.IDGrupo3) " & _
                    " LEFT JOIN PCGrupo4 ON Empleado.IdGrupo4 =  PCGrupo4.IDGrupo4 " & _
               " ON Empleado.IdProvCli = vw.IdProvCli) LEFT JOIN TSFormaCobroPago tsforma on vw.idforma = tsforma.idforma) ON Gntrans.Codtrans = vw.Codtrans  "
               If gobjCond.TipoSaldo = 0 Then
                    sql = sql & "Where  (Gntrans.AfectaSaldoPC=1)  " & Condicion
                Else
                    sql = sql & "Where  Saldo > 0 " & Condicion & "  AND  (Gntrans.AfectaSaldoPC=1)"
                End If
        sql = sql & " group by vw.CodProvCli, vw.Nombre,PCGrupo1.DESCRIPCION,    PCGrupo2.DESCRIPCION,    PCGrupo3.Descripcion, PCGrupo4.Descripcion, "
        sql = sql & " PCGrupo1.CODGRUPO1 , PCGrupo2.CODGRUPO2, PCGrupo3.CODGRUPO3, PCGrupo4.CODGRUPO4, codcuenta, nombrecuenta"
        If gobjCond.TipoSaldo = 1 Then
            sql = sql & " having sum(vw.VALOR) >0 "
        ElseIf gobjCond.TipoSaldo = 0 Then
            sql = sql & "  having (Sum(vw.saldodebe) + Sum(saldoHaber)) <> 0"
        End If
        Set rs = Me.OpenRecordset(sql)
    Set ConsEmpSaldoconF_CorteEmpleados = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Saldos Empleados con fecha de corte" & gobjCond.FechaCorte, "PC"
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
End Function
Public Function ListaGNRoles(ByVal CodPantalla As String) As Recordset
    Dim sql As String, rs As Recordset
    sql = "SELECT GN.TRANSID,  (gn.CodTrans+' '+CONVERT(VARCHAR,gn.NumTrans)) AS Trans, GN.Descripcion, GN.fechaDevOL, '' AS SEL FROM GNComprobante gn inner join gntrans gnt on gnt.codtrans = gn.codtrans"
    sql = sql & " WHERE gn.estado <> 3 and gnt.modulo = 'RL' AND gnt.codpantalla = '" & CodPantalla & "' "
    sql = sql & " ORDER BY TRANSID desc"
    Set rs = Me.OpenRecordset(sql)
   Set ListaGNRoles = rs
End Function

'AUC PARA PRESUPUESTOS
Public Function IdCuentaPersonalPre(ByVal idElemento As Long, ByVal codemp As String) As Long
Dim sql As String
Dim rs As Recordset
On Error GoTo CapturaError
    'sql = "Select idCuenta from CuentaPersonalPre INNER JOIN PCPROVCLI PC ON PC.IDPROVCLI = CUENTAPERSONALpre.IDEMPLEADO "
    sql = "Select idCuenta from CuentaPersonalPre INNER JOIN Empleado PC ON PC.IDPROVCLI = CUENTAPERSONALpre.IDEMPLEADO "

    sql = sql & "where idElemento = " & idElemento
    sql = sql & " AND PC.CODPROVCLI = '" & codemp & "'"
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        IdCuentaPersonalPre = rs!IdCuenta
    End If
    Set rs = Nothing
    Exit Function
CapturaError:
    Set rs = Nothing
    MsgBox Err.Description
    Exit Function
End Function

Public Function RecuperarDatos107(codemp As String) As Recordset
Dim sql As String, rs As Recordset
On Error GoTo CapturaError
    sql = "SELECT p.tiposalario,pc.codprovcli,pc.nombre,pc.ruc,p.varios1 as gpvivienda,p.varios2 as gpsalud,p.varios3 as gpeducacion,p.varios4 as gpalimentacion,p.varios5 as gpvestimenta " & _
          "FROM Personal p INNER JOIN PCProvCli pc on pc.idprovcli = p.idempleado "
            sql = sql & "WHERE pc.codprovcli='" & codemp & "'"
    Set rs = Me.OpenRecordset(sql)
    Set RecuperarDatos107 = rs
    Exit Function
CapturaError:
    Set rs = Nothing
    MsgBox Err.Description
    Exit Function
End Function


Public Function ObtenerValorElemento(ByVal codemp As String, Elemento As String, fecha As String) As Currency
Dim sql As String, rs As Recordset, rsH As Recordset
On Error GoTo CapturaError
    VerificaExistenciaTabla 1
    sql = "SELECT Sum(Rd.valor) as valor INTO TMP1 " & _
          "FROM  RolDetalle Rd INNER JOIN Empleado pc on pc.idprovcli = rd.idempleado " & _
          "INNER JOIN Elemento E ON e.idelemento = rd.idelemento " & _
          "INNER JOIN GNComprobante gn ON gn.transid = rd.transid " & _
          "WHERE gn.estado <> 3 AND Pc.codprovcli='" & codemp & "' AND E.codelemento = '" & Elemento & "' AND datepart(yyyy,Gn.fechatrans) = '" & fecha & "'"
    sql = sql & " UNION " 'HISTORIAL
    sql = sql & "SELECT Sum(Rd.valor) as valor  " & _
            "FROM historialRol Rd INNER JOIN  Empleado pc on pc.idprovcli = rd.idempleado " & _
            "INNER JOIN Elemento E ON e.idelemento = rd.idelemento " & _
            "WHERE Pc.codprovcli='" & codemp & "' AND E.codelemento = '" & Elemento & "' AND datepart(yyyy,rd.fecharol) = '" & fecha & "'"
    Me.Execute sql
    sql = "select sum(valor) as valor from tmp1"
   Set rs = Me.OpenRecordset(sql)
        If Not IsNull(rs!Valor) Then
            ObtenerValorElemento = rs!Valor
        Else
            ObtenerValorElemento = 0
       End If
        Set rs = Nothing
        Set rsH = Nothing
    Exit Function
CapturaError:
    Set rs = Nothing
    Set rsH = Nothing
    MsgBox Err.Description
    Exit Function
End Function


Public Function ObtenerValorElementoCount(ByVal codemp As String, Elemento As String, fecha As String) As Currency
Dim sql As String, rs As Recordset, rsH As Recordset
Dim v As Integer
Dim i As Long
On Error GoTo CapturaError
    sql = "SELECT count(Rd.valor) as valor  " & _
          "FROM RolDetalle Rd INNER JOIN PCProvCli pc on pc.idprovcli = rd.idempleado " & _
          "INNER JOIN Elemento E ON e.idelemento = rd.idelemento " & _
          "INNER JOIN GNComprobante gn ON gn.transid = rd.transid " & _
          "WHERE Pc.codprovcli='" & codemp & "' AND E.codelemento = '" & Elemento & "' AND datepart(yyyy,Gn.fechatrans) = '" & fecha & "'"
    Set rs = Me.OpenRecordset(sql)
        If rs.RecordCount > 0 And rs!Valor > 0 Then
            ObtenerValorElementoCount = rs!Valor
        Else
            'BUSCAR EN HISTORIAL
            sql = "SELECT (Rd.valor/30) as valor  " & _
            "FROM historialRol Rd INNER JOIN PCProvCli pc on pc.idprovcli = rd.idempleado " & _
            "INNER JOIN Elemento E ON e.idelemento = rd.idelemento " & _
            "WHERE Pc.codprovcli='" & codemp & "' AND E.codelemento = '" & Elemento & "' AND datepart(yyyy,rd.fecharol) = '" & fecha & "'"
            Set rsH = Me.OpenRecordset(sql)
            If Not rsH.EOF Then
                
                    For i = 1 To Len(rsH!Valor)
                        If Mid(rsH!Valor, i, 1) = "." Then
                            v = v + 1
                            Exit For
                        Else
                            v = v & Mid(rsH!Valor, i, 1)
                            
                        End If
                    Next
               
                ObtenerValorElementoCount = v
            Else
                ObtenerValorElementoCount = 0
            End If
            
        End If
            Set rs = Nothing
            Set rsH = Nothing
    Exit Function
CapturaError:
    Set rs = Nothing
    MsgBox Err.Description
    Exit Function
End Function

Public Function RecuperarDatos107Todo(ByVal fecha As String) As Recordset
Dim sql As String, rs As Recordset, rsH As Recordset
On Error GoTo CapturaError
    sql = "SELECT  pc.codprovcli,pc.nombre,''as sys, ''as sobresueldos,''as utilidades,''as igoe,''AS DT,'' AS DC,'' AS FR, "
    sql = sql & "'' AS OIRD,'' as APEE,'' AS  APOE ,p.varios1 as gpvivienda,p.varios2 as gpsalud,p.varios3 as gpeducacion,"
    sql = sql & "p.varios4 as gpalimentacion,p.varios5 as gpvestimenta,"
    sql = sql & "'' as disc, '' as TerEdad,''as IREE,''as BIG,''as IRC,''as VIROE,''as VIREE,''as IRRET,''as IG"
    sql = sql & " FROM Personal p INNER JOIN Empleado pc on pc.idprovcli = p.idempleado "
    sql = sql & "LEFT JOIN roldetalle rd on rd.idempleado = pc.idprovcli "

    sql = sql & "INNER JOIN gncomprobante gn ON gn.transid = rd.transid "
    sql = sql & " WHERE datepart(yyyy,Gn.fechatrans) = '" & fecha & "' "
    sql = sql & " GROUP BY pc.codprovcli,pc.nombre ,p.Varios1,p.Varios2,p.Varios3,p.Varios4,p.Varios5  "
'    sql = sql & "ORDER BY PC.NOMBRE "
'    Set rs = Me.OpenRecordset(sql)
'    If rs.RecordCount > 0 Then
'        Set RecuperarDatos107Todo = rs
'        Exit Function
'    Else
    sql = sql & " UNION "
        'RECUPERA DEL HISTORIAL
            sql = sql & "SELECT  pc.codprovcli,pc.nombre,''as sys, ''as sobresueldos,''as utilidades,''as igoe,''AS DT,'' AS DC,'' AS FR, "
            sql = sql & "'' AS OIRD,'' as APEE,'' AS  APOE ,p.varios1 as gpvivienda,p.varios2 as gpsalud,p.varios3 as gpeducacion,"
            sql = sql & "p.varios4 as gpalimentacion,p.varios5 as gpvestimenta,"
            sql = sql & "'' as disc, '' as TerEdad,''as IREE,''as BIG,''as IRC,''as VIROE,''as VIREE,''as IRRET,''as IG "
            sql = sql & "FROM Personal p INNER JOIN Empleado pc on pc.idprovcli = p.idempleado "
            sql = sql & "INNER JOIN historialrol rd on rd.idempleado = pc.idprovcli "
            sql = sql & " WHERE datepart(yyyy,rd.fecharol) = '" & fecha & "' "
            sql = sql & " GROUP BY pc.codprovcli,pc.nombre ,p.Varios1,p.Varios2,p.Varios3,p.Varios4,p.Varios5  "
            sql = sql & "ORDER BY PC.NOMBRE "
            Set rsH = Me.OpenRecordset(sql)
            Set RecuperarDatos107Todo = rsH
'    End If

    Set rs = Nothing
    Set rsH = Nothing
    Exit Function
CapturaError:
    Set rs = Nothing
    MsgBox Err.Description
    Exit Function
End Function

Public Function ConsRelacionDep(ByVal CodTrans As String, ByVal NumTrans As Long) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
        sql = "select pc.idprovcli,pc.codprovcli,pc.nombre,'' as Imprimir  from irkardex irk"
        sql = sql & " inner join gncomprobante gnc on irk.transid=gnc.transid"
        sql = sql & " inner join pcprovcli pc on pc.idprovcli = irk.idempleado"
        sql = sql & " where gnc.estado<>3"
        sql = sql & " AND gnc.codtrans ='" & CodTrans & "'"
        sql = sql & " AND gnc.numtrans =" & NumTrans
        'sql = sql & " and FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mprops.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mprops.TipoDB)
        sql = sql & " order by pc.nombre"
       Set rs = Me.OpenRecordset(sql)
        Set ConsRelacionDep = rs
        Set rs = Nothing
        Me.GrabaGNLogAccion "Imprime", "Consulta RelDep" & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function

Public Function RecuperaIdProvCli(ByRef RUC As String) As Long
    Dim sql As String, rs As Recordset
        'sql = "SELECT idProvCli FROM pcprovcli WHERE ruc='" & RUC & "'"
        sql = "SELECT idProvCli FROM Empleado WHERE ruc='" & RUC & "'"
        sql = sql & " and bandempleado = 1 "
    Set rs = Me.OpenRecordset(sql)
    With rs
     If rs.RecordCount = 0 Then
        RecuperaIdProvCli = 0
      Else
        RecuperaIdProvCli = !IdProvcli
        Exit Function
        .Close
      End If
    End With
    Set rs = Nothing
End Function

Public Function ConsIVKxMes(CodInventario As String, _
                                  CodBodega As String) As Variant
    Dim sql As String, cond As String, rs As Recordset
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsIVKardexPorFecha")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("prmCodBodega") = gobjCond.CodBodega1
    qdef.Parameters("CodItem1") = IIf(Len(gobjCond.CodItem1) = 0, "!", gobjCond.CodItem1)
    qdef.Parameters("CodItem2") = IIf(Len(gobjCond.CodItem2) = 0, String$(20, "z"), gobjCond.CodItem2)
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    sql = "spConsIVKardexPorMes " & _
                FechaYMD("01/01/" & DatePart("yyyy", Date), TipoDB) & ",'" & _
                CodInventario & "','" & _
                CodBodega & "'"
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    Set ConsIVKxMes = rs
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Kardex xmes  " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "IV"
End Function

Public Function ListaIVInventarioSimple2(CodInventario As String, _
                                  CodAlterno As String, _
                                  Descripcion As String, _
                                  CodBodega As String, _
                                  CodGrupo() As String, _
                                  BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset, i As Integer
    sql = "SELECT CodInventario, CodAlterno1, Descripcion , CodBodega, bandvalida  FROM vwIVInventario "
    If Len(CodInventario) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodInventario LIKE '" & CodInventario & comodin & "') "
    End If
    If Len(CodAlterno) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "((CodAlterno1 LIKE '" & CodAlterno & comodin & "') " & _
                      "OR (CodAlterno2 LIKE '" & CodAlterno & comodin & "')) "
    End If
    If Len(Descripcion) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(Descripcion LIKE '" & Descripcion & comodin & "') "
    End If
    If Len(CodBodega) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodBodega='" & CodBodega & "') "
    End If
    For i = LBound(CodGrupo) To UBound(CodGrupo)
        If Len(CodGrupo(i)) > 0 Then
            If Len(cond) > 0 Then cond = cond & "AND "
            cond = cond & "(CodGrupo" & i & " = '" & CodGrupo(i) & "') "
       End If
    Next i
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " ORDER BY CodInventario,CodBodega "
    Set rs = Me.OpenRecordset(sql)
    ListaIVInventarioSimple2 = MiGetRows(rs)
    rs.Close
    Set rs = Nothing
End Function

Public Function ListaAnexoTipoSustentoSinCreditoTrib(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodSustento,  Descripcion FROM Anexo_Suntentos"
    sql = sql & " where descripcion not  like ('%crédito%')"
    sql = sql & " ORDER BY CodSustento"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaAnexoTipoSustentoSinCreditoTrib = rs
    Else
        ListaAnexoTipoSustentoSinCreditoTrib = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ConsIVKardexPorClienteBuscaError(ByVal CodBodega As String) As Recordset
Dim sql As String, cond As String, rs As Recordset
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    sql = "spConsIVKardexPorClienteBuscaError " & gobjCond.numMoneda & ",'" & CodBodega & "','" & gobjCond.CodItem1 & "','" & gobjCond.CodItem2 & "'," & FechaYMD(gobjCond.fecha1, TipoDB) & "," & FechaYMD(gobjCond.fecha2, TipoDB) & ",'" & gobjCond.Usuario1 & "'" & ",'" & gobjCond.Usuario2 & "'"
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsIVKardexPorClienteBuscaError = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Kardex inv. por cliente BuscaError " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "IV"
End Function

Public Function ConsGNTrans2Valores(tipoCosto As Integer) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    '*** MAKOTO 03/oct/00
    sql = "SELECT"
    '*** MAKOTO 05/feb/01 Mod. Aumentado 'NumDocRef' y 'Nombre'
    sql = sql & " vwConsGNTrans.TransID, vwConsGNTrans.FechaTrans,  vwConsGNTrans.CodTrans, "
    sql = sql & " vwConsGNTrans.NumTrans, "
    sql = sql & " vwConsGNTrans.Nombre,  "
    sql = sql & " vwConsGNTrans.PrecioTotal * signo,  "
    sql = sql & " (vwConsGNTrans.PrecioTotal * signo) -(vwConsGNTrans.PrecioRealTotal * signo),  "
    sql = sql & " (vwConsGNTrans.PrecioRealTotal * signo) , "
    sql = sql & " IVA, "
    sql = sql & " (vwConsGNTrans.PrecioRealTotal * signo) +IVA, "
    Select Case tipoCosto
    Case 0
        sql = sql & " (vwConsGNTrans.CostoTotal ) * SIGNO,  "
        sql = sql & " (vwConsGNTrans.PrecioRealTotal * signo) - (vwConsGNTrans.CostoTotal * signo) ,  "
        sql = sql & " case when vwConsGNTrans.CostoTotal <> 0 then  "
        sql = sql & "  ((vwConsGNTrans.PrecioRealTotal * signo) - (vwConsGNTrans.CostoTotal * signo)) / (vwConsGNTrans.CostoTotal * signo)  "
        sql = sql & " else ((vwConsGNTrans.PrecioRealTotal * signo) - (vwConsGNTrans.CostoTotal * signo))  end,  "
    Case 1
        sql = sql & " (vwConsGNTrans.CostoUltimoIngreso * signo) ,  "
        sql = sql & " (vwConsGNTrans.PrecioRealTotal * signo) - (vwConsGNTrans.CostoUltimoIngreso * signo) ,  "
        sql = sql & " case when vwConsGNTrans.CostoUltimoIngreso <> 0 then  "
        sql = sql & "  ((vwConsGNTrans.PrecioRealTotal * signo) - (vwConsGNTrans.CostoUltimoIngreso * signo)) / (vwConsGNTrans.CostoUltimoIngreso * signo)  "
        sql = sql & " else ((vwConsGNTrans.PrecioRealTotal * signo) - (vwConsGNTrans.CostoUltimoIngreso * signo))  end,  "
    Case 2
        sql = sql & " (vwConsGNTrans.CostoReferencial * signo) ,  "
        sql = sql & " (vwConsGNTrans.PrecioRealTotal * signo) - (vwConsGNTrans.CostoReferencial * signo) ,  "
        sql = sql & " case when vwConsGNTrans.CostoReferencial <> 0 then  "
        sql = sql & "  ((vwConsGNTrans.PrecioRealTotal * signo) - (vwConsGNTrans.CostoReferencial * signo)) / (vwConsGNTrans.CostoReferencial * signo)  "
        sql = sql & " else ((vwConsGNTrans.PrecioRealTotal * signo) - (vwConsGNTrans.CostoReferencial * signo))  end,  "
    End Select
    sql = sql & " codusuario, codVendedor, "
    sql = sql & " case vwConsGNTrans.Estado when '0' THEN 'NO CONT' when '1' THEN 'APROV' when '2' THEN 'DESPA' when '3' THEN 'ANULA' when '4' THEN 'SEM DESP' END AS estadoL "
    sql = sql & "  FROM vwConsGNTransPrecios as vwConsGNTrans "
    If gobjMain.GrupoActual.PermisoActual.ConsRepVen Then
        sql = sql & " INNER JOIN GNComprobante gn inner join PCProvCli pc INNER JOIN FCVendedor  v"
        sql = sql & " ON v.idvendedor = pc.idvendedor "
        sql = sql & " ON pc.IdProvcli = gn.idClienteRef "
        sql = sql & " ON gn.transid = vwConsGNTrans.transid "
    End If
    'Condición de FechaTrans
    cond = "vwConsGNTrans.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB)
   'Condición de CodTrans
    If Len(cond) > 0 Then cond = cond & " AND "
    If Len(gobjCond.CodTrans) > 0 Then      'Si está especificado transaccion
        'Si es una sola transaccion
        If InStr(gobjCond.CodTrans, ",") = 0 Then
            cond = cond & "(vwConsGNTrans.CodTrans='" & gobjCond.CodTrans & "')"
        'Si está seleccionado varias trans.
        Else
            cond = cond & "(vwConsGNTrans.CodTrans IN (" & gobjCond.CodTrans & "))"
        End If
    Else
        'Si no hay condicion de cod.trans, selecciona todas las trans.
        ' que tenga permiso
        s = gobjMain.GrupoActual.PermisoActual.ListaTrans(True)
        If Len(s) > 0 Then
            cond = cond & "(vwConsGNTrans.CodTrans " & s & ")"
        Else
            cond = cond & "(vwConsGNTrans.CodTrans = '-------')"    'Para que NO devuelva nada si no tiene ningún permiso  '*** MAKOTO 26/dic/00
        End If
    End If
    'Condición de NumTrans
    If (gobjCond.NumTrans1 > 0) And (gobjCond.NumTrans2 > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.NumTrans BETWEEN " & gobjCond.NumTrans1 & " AND " & gobjCond.NumTrans2 & ")"
    ElseIf gobjCond.NumTrans1 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.NumTrans>=" & gobjCond.NumTrans1 & ")"
    ElseIf gobjCond.NumTrans2 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.NumTrans<=" & gobjCond.NumTrans2 & ")"
    End If
    'Condición de Estado
    If gobjCond.EstadoBool(ESTADO_NOAPROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.Estado<>" & ESTADO_NOAPROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_APROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.Estado<>" & ESTADO_APROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_DESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.Estado<>" & ESTADO_DESPACHADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_ANULADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.Estado<>" & ESTADO_ANULADO & ")"
    End If
    '----------------------------------------
    '----- CAO 13/06/2006
    '-----------------------------------------
    If gobjCond.EstadoBool(ESTADO_SEMDESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.Estado<>" & ESTADO_SEMDESPACHADO & ")"
   End If
    If Len(gobjCond.CodCentro1) > 0 And Len(gobjCond.CodCentro2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " codCentro between '" & gobjCond.CodCentro1 & "' and '" & gobjCond.CodCentro2 & "'"
    End If
    If gobjMain.GrupoActual.PermisoActual.ConsRepVen Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " v.codvendedor = '" & gobjMain.UsuarioActual.codUsuario & "'  "
    End If
    If Len(gobjCond.CodPC1) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " codprovcli = '" & gobjCond.CodPC1 & "' "
    End If
    If Len(gobjCond.CodPC2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " codvendedor = '" & gobjCond.CodPC2 & "' "
    End If
    If Len(gobjCond.CodSust) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " codusuario = '" & gobjCond.CodSust & "' "
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
   'Ordern de filas
    sql = sql & " ORDER BY vwConsGNTrans.FechaTrans DESC, vwConsGNTrans.HoraTrans DESC, vwConsGNTrans.TransID DESC"       '*** MAKOTO 07/dic/00 HoraTrans agregado
    Set rs = Me.OpenRecordset(sql)
    Set ConsGNTrans2Valores = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta General " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function

'------------------  comision x item
Public Function RecuperaIVComision(key As Variant) As IVComision
    Dim obj As IVComision
    Set obj = New IVComision
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaIVComision = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CreaIVComision() As IVComision
    Dim obj As IVComision
    Set obj = New IVComision
    Set obj.Empresa = Me
    Set CreaIVComision = obj
    Set obj = Nothing
End Function

Public Function ListaIVComision(BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset, NumIVGrupo As Integer, ivgrupo As Integer
    sql = " Select codComision, ivd.descripcion, ivd.bandvalida,  bandcaducidad  "
    sql = sql & " from  IVComision ivd"
    sql = sql & " order by ivd.idComision"
   Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVComision = rs
    Else
        ListaIVComision = MiGetRows(rs)
        rs.Close
    End If
   Set rs = Nothing
End Function

Public Function RecuperaUltimaComision() As Long
    Dim sql As String, s As String
    Dim rs As Recordset, rs1 As Recordset
    sql = " select  top 1 codcomision "
    sql = sql & " from IVComision "
    sql = sql & " order by IdComision desc "
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        RecuperaUltimaComision = rs.Fields("codComision")
    Else
        RecuperaUltimaComision = 0
    End If
    rs.Close
    Set rs = Nothing
End Function

Public Function RecuperaComisionxVendedorxItem(ByVal IdVendedor As Long, ByVal IdInventario As Long) As Currency
    Dim sql As String, s As String
    Dim rs As Recordset, rs1 As Recordset
    sql = " select  top 1 comision "
    sql = sql & " from ivcomisiondetalle cd"
    sql = sql & " inner join ivcomision ivc on ivc.idcomision=cd.idcomision"
    sql = sql & " Where ivc.BandValida = 1"
    sql = sql & " and  idinventario = " & IdInventario
    sql = sql & " and idvendedor=" & IdVendedor
    sql = sql & " order by IdComisionDetalle desc "
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        RecuperaComisionxVendedorxItem = rs.Fields("Comision")
    Else
        RecuperaComisionxVendedorxItem = 0
    End If
    rs.Close
    Set rs = Nothing
End Function


'----------------------  proyectos

'jeaa 25/04/2005
Public Function ListaGnProyecto(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    Dim fv As FCVendedor, codVende As String, TipoTabla As Integer
    sql = "SELECT CodProyecto,  gnp.Descripcion, Propietario, pcp.descripcion , pcc.descripcion , "

    sql = sql & " FechaInicio , Nombre1, "
    sql = sql & " case when Estado=0 then 'PLANIFICACION'"
    sql = sql & " when Estado=1 then 'CONTRATACION'"
    sql = sql & " when Estado=2 then 'EJECUCION'"
    sql = sql & " when Estado=3 then 'ABORTADO' end as Estado,  "
    
    sql = sql & " case when EstadoNegociacion=0 then 'CREACION INICIAL'"
    sql = sql & " when EstadoNegociacion=1 then 'VISITADO'"
    sql = sql & " when EstadoNegociacion=2 then 'PROFORMADO'"
    sql = sql & " when EstadoNegociacion=3 then 'NEGOCIADO'"
    sql = sql & " when EstadoNegociacion=4 then 'FACTURADO'"
    sql = sql & " when EstadoNegociacion=5 then 'TERMINADO'  "
    sql = sql & " when EstadoNegociacion=6 then 'NO VENDIDO' end as "
    sql = sql & " EstadoNegociacion, "
    sql = sql & " Estado, EstadoNegociacion, "
    sql = sql & " ivi.descripcion, gnpd.cantidad"
    sql = sql & " FROM GnProyecto gnp"
    sql = sql & " inner join GNProyectoDetalle gnpd inner join ivinventario ivi on gnpd.idinventario = ivi.idinventario "
    sql = sql & "  on gnp.idproyecto =gnpd.idproyecto"
    sql = sql & " left join Pcprovincia pcp on gnp.idprovincia = pcp.idprovincia"
    sql = sql & " left join PcCanton pcc on gnp.idcanton = pcc.idCanton"
    sql = sql & " inner join Fcvendedor fc on gnp.idvendedor = fc.idvendedor"
    
    If Not gobjMain.UsuarioActual.BandSupervisor Then
        codVende = Me.RecuperaVendedorxUsuario(gobjMain.UsuarioActual.codUsuario)
        Set fv = Me.RecuperaFCVendedor(codVende)
        If Not fv Is Nothing Then
            If fv.BandCobrador And fv.BandCobrador Then
                TipoTabla = Me.RecuperaTipoTablaVendedor(fv.CodVendedor)
                sql = sql & " where fc.TipoTabla=" & TipoTabla
            Else
                TipoTabla = Me.RecuperaTipoTablaVendedor(fv.CodVendedor)
                sql = sql & " where fc.TipoTabla=" & TipoTabla
'                If Not gobjMain.UsuarioActual.BandSupervisor Then
'                    sql = sql & " where fc.codusuario='" & gobjMain.UsuarioActual.CodUsuario & "'"
'                End If
            End If
        End If
    End If
    
    sql = sql & " ORDER BY CodProyecto"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaGnProyecto = rs
    Else
        ListaGnProyecto = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function RecuperaGnProyecto(key As Variant) As GNProyecto
    Dim obj As GNProyecto
    Set obj = New GNProyecto
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaGnProyecto = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CreaGnProyecto() As GNProyecto
    Dim obj As GNProyecto
    Set obj = New GNProyecto
    Set obj.Empresa = Me
    Set CreaGnProyecto = obj
    Set obj = Nothing
End Function

Public Function ListaGNTransRol( _
                    ) As Variant
    Dim sql As String, cond As String, rs As Recordset
    sql = "SELECT (gn.CodTrans+' '+CONVERT(VARCHAR,gn.NumTrans)) AS Trans, gn.descripcion FROM GNTrans gt INNER JOIN GNComprobante gn on gn.codtrans = GT.codtrans "
            cond = " gt.codpantalla = 'GENROL' AND gn.estado IN( 0,1,2)"
    sql = sql & "WHERE " & cond
    sql = sql & " ORDER BY gn.transid desc"
    Set rs = Me.OpenRecordset(sql)
        ListaGNTransRol = MiGetRows(rs)
        rs.Close
    Set rs = Nothing
End Function

Public Function ListaPersonalGrid() As Variant
    Dim sql As String, rs As Recordset
    Dim idSec As Integer
    idSec = Me.GNOpcion.ObtenerValor("Seccion") + 1
'    sql = "SELECT pcg.codgrupo" & idSec & ",pc.Codprovcli, pc.Nombre, '' as sel from pcprovcli pc "
    sql = "SELECT pcg.codgrupo" & idSec & ",pc.Codprovcli, pc.Nombre, '' as sel from Empleado pc "
    sql = sql & " inner join personal p on p.idempleado = pc.idprovcli"
    sql = sql & " inner join pcgrupo" & idSec & " pcg on pcg.idgrupo" & idSec & "= pc.idgrupo" & idSec
    sql = sql & " where p.bandactivo = 1 And pc.bandEmpleado = 1"
    sql = sql & " ORDER BY pcg.codgrupo" & idSec & ", pc.Codprovcli"
     Set rs = Me.OpenRecordset(sql)
    Set ListaPersonalGrid = rs
    Set rs = Nothing
End Function


Public Function RecuperaCtaCuentasDepartamento(ByVal IdEmp As Long, ByVal idele As Long) As Long
    Dim sql As String, rs As Recordset
    sql = " select top 1 idcuenta from cuentaPCGrupo "
    sql = sql & " where idpcGrupo=" & IdEmp
    sql = sql & " and idelemento =" & idele
     Set rs = Me.OpenRecordset(sql)
     If rs.RecordCount > 0 Then
        RecuperaCtaCuentasDepartamento = rs.Fields(0)
    Else
        RecuperaCtaCuentasDepartamento = 0
    End If
    Set rs = Nothing
    End Function
Public Function RecuperaCtaCuentasDepartamentoPre(ByVal IdEmp As Long, ByVal idele As Long) As Long
    Dim sql As String, rs As Recordset
    sql = " select top 1 idcuenta from cuentapcGrupoPre "
    sql = sql & " where idpcGrupo=" & IdEmp
    sql = sql & " and idelemento =" & idele
     Set rs = Me.OpenRecordset(sql)
     If rs.RecordCount > 0 Then
        RecuperaCtaCuentasDepartamentoPre = rs.Fields(0)
    Else
        RecuperaCtaCuentasDepartamentoPre = 0
    End If
    Set rs = Nothing
    End Function

Public Function ConsPRBalanceLinealxMesComp(bandBalance As Boolean) As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim v As Variant, v2() As Variant, i As Long, j As Long
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    sql = "spConsPRBalanceLinealxMesComp "
    sql = sql & gobjCond.numMoneda & "," & _
                        FechaYMD(IIf(bandBalance, Me.GNOpcion.FechaInicio, gobjCond.fecha1), TipoDB) & "," & _
                        FechaYMD(gobjCond.fecha2, TipoDB)
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    If Not rs.EOF Then v = rs.GetRows()
    'Mayoriza los valores
    MayorizaPresupuestoxMes v
    'Pasa los valores de v a v2 cambiando formato
    ' y filtrando registros por TipoCuenta, Nivel y Valor
    j = 0
    For i = 0 To UBound(v, 2)
        If Not IsNull(v(BAL_VALOR, i)) Then
            'Solo los que tengan valor diferente de 0
            'If v(BAL_VALOR, i) <> 0 Then
                'Si es para balance, solo tipo 1,2 y 3, sino solo tipo 4 y 5
                If (bandBalance And (v(BAL_TIPO, i) <= 3)) Or _
                   ((Not bandBalance)) Then 'And (v(BAL_TIPO, i) >= 4)
                   'Solo hasta el nivel indicado
                   If v(BAL_NIVEL, i) <= gobjCond.Nivel Then
                        ReDim Preserve v2(20, j)
                        v2(0, j) = v(BAL_TIPO, i)           'TipoCuenta
                        v2(1, j) = v(BAL_CODCUENTA, i)      'CodCuenta
                        v2(2, j) = v(BAL_NOMBRECUENTA, i)   'Cuenta
                        v2(3, j) = v(BAL_CODSUCURSAL, i)          'CODSUCURSAL   JEAA 16/01/04
                        v2(4, j) = v(BAL_VALOR, i)          'Valor
                        v2(5, j) = v(BAL_NIVEL, i)          'Nivel
                        v2(6, j) = v(9, i)          'mes 1
                        v2(7, j) = v(10, i)          'mes 2
                        v2(8, j) = v(11, i)          'REFORMA 2
                        v2(9, j) = v(12, i)          'REFORMA 3
                        v2(10, j) = v(13, i)          'REFORMA 4
                        v2(11, j) = v(14, i)          'SALDO
                        v2(12, j) = v(15, i)          'Comprometido
                        v2(13, j) = v(16, i)          ' % Comprometido
                        v2(14, j) = v(17, i)          'Ejecutado
                        v2(15, j) = v(18, i)              ' % Ejecutado
                        v2(16, j) = v(19, i)          ' % comp-Ejecutado
                        v2(17, j) = v(20, i)          'Saldo Comprometido
                        v2(18, j) = v(21, i)          'Saldo Comprometido
                        j = j + 1
                    End If
                End If
            'End If
        End If
    Next i
    If j Then ConsPRBalanceLinealxMesComp = v2
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta ConsPRBalanceLinealxMesComp ", "PR"
End Function

Private Sub MayorizaPresupuestoxMes(ByRef v As Variant)
    Dim i As Integer, nmax As Integer, j As Long
#If DAOLIB Then
    nmax = ObtieneMax(mdbEmpresa, "CTCuenta", "Nivel")
#Else
    nmax = ObtieneMax(mcnEmpresa, "CTCuenta", "Nivel")
#End If
    'Desde el nivel inferior hacia el nivel superior
    For i = nmax To 0 Step -1
        For j = 0 To UBound(v, 2)
            If (v(BAL_NIVEL, j) = i) And (v(BAL_BANDTOTAL, j) = True) Then
                v(9, j) = SumaHijosPresupuestoNew(v, j, 9)
                v(10, j) = SumaHijosPresupuestoNew(v, j, 10)
                v(11, j) = SumaHijosPresupuestoNew(v, j, 11)
                v(12, j) = SumaHijosPresupuestoNew(v, j, 12)
                v(13, j) = SumaHijosPresupuestoNew(v, j, 13)
                v(14, j) = SumaHijosPresupuestoNew(v, j, 14)
                v(15, j) = SumaHijosPresupuestoNew(v, j, 15)
                v(16, j) = SumaHijosPresupuestoNew(v, j, 16)
                v(17, j) = SumaHijosPresupuestoNew(v, j, 17)
                v(18, j) = SumaHijosPresupuestoNew(v, j, 18)
                v(19, j) = SumaHijosPresupuestoNew(v, j, 19)
                v(20, j) = SumaHijosPresupuestoNew(v, j, 20)
                v(21, j) = SumaHijosPresupuestoNew(v, j, 21)
            End If
        Next j
    Next i
End Sub

Public Function ConsPRBalanceLinealxMesEjec(bandBalance As Boolean) As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim v As Variant, v2() As Variant, i As Long, j As Long
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    sql = "spConsPRBalanceLinealxMesEjec "
    sql = sql & gobjCond.numMoneda & "," & _
                        FechaYMD(IIf(bandBalance, Me.GNOpcion.FechaInicio, gobjCond.fecha1), TipoDB) & "," & _
                        FechaYMD(gobjCond.fecha2, TipoDB)
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    If Not rs.EOF Then v = rs.GetRows()
    'Mayoriza los valores
    MayorizaPresupuestoxMes v
    'Pasa los valores de v a v2 cambiando formato
    ' y filtrando registros por TipoCuenta, Nivel y Valor
    j = 0
    For i = 0 To UBound(v, 2)
        If Not IsNull(v(BAL_VALOR, i)) Then
            'Solo los que tengan valor diferente de 0
                'Si es para balance, solo tipo 1,2 y 3, sino solo tipo 4 y 5
                If (bandBalance And (v(BAL_TIPO, i) <= 3)) Or _
                   ((Not bandBalance)) Then 'And (v(BAL_TIPO, i) >= 4)
                   'Solo hasta el nivel indicado
                   If v(BAL_NIVEL, i) <= gobjCond.Nivel Then
                        ReDim Preserve v2(20, j)
                        v2(0, j) = v(BAL_TIPO, i)           'TipoCuenta
                        v2(1, j) = v(BAL_CODCUENTA, i)      'CodCuenta
                        v2(2, j) = v(BAL_NOMBRECUENTA, i)   'Cuenta
                        v2(3, j) = v(BAL_CODSUCURSAL, i)          'CODSUCURSAL   JEAA 16/01/04
                        v2(4, j) = v(BAL_VALOR, i)          'Valor
'                        If Not bandBalance Then v2(4, j) = v2(4, j) * -1    'Invierta el signo cuando es EstadoPG
                        v2(5, j) = v(BAL_NIVEL, i)          'Nivel
                        v2(6, j) = v(9, i)          'mes 1
                        v2(7, j) = v(10, i)          'mes 2
                        v2(8, j) = v(11, i)          'REFORMA 2
                        v2(9, j) = v(12, i)          'REFORMA 3
                        v2(10, j) = v(13, i)          'REFORMA 4
                        v2(11, j) = v(14, i)          'SALDO
                        v2(12, j) = v(15, i)          'Comprometido
                        v2(13, j) = v(16, i)          ' % Comprometido
                        v2(14, j) = v(17, i)          'Ejecutado
                        v2(15, j) = v(18, i)              ' % Ejecutado
                        v2(16, j) = v(19, i)          ' % comp-Ejecutado
                        v2(17, j) = v(20, i)          'Saldo Comprometido
                        v2(18, j) = v(21, i)          'Saldo Comprometido
                        j = j + 1
                    End If
                End If
        End If
    Next i
    If j Then ConsPRBalanceLinealxMesEjec = v2
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta ConsPRBalanceLinealxMesComp ", "PR"
End Function


Public Function ListaPCProvCliFiltroNew(BandProveedor As Boolean, _
                                    BandCliente As Boolean, _
                                    codPC As String, _
                                    Nombre As String, _
                                    Direccion As String, _
                                    RUC As String, _
                                    CodGrupoDesde As String, _
                                    CodGrupoHasta As String, _
                                    numG As Integer, _
                                    CodProvincia As String, _
                                    CodCanton As String, _
                                    CodVendedor As String, _
                                    BandSoloValida As Boolean, _
                                    BandRS As Boolean) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset, i As Integer
    
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If

    sql = "SELECT pc.CodProvCli, pc.Nombre, a.CodTipoDocumento, pc.RUC, TipoProvCli , pcp.descripcion, pcc.descripcion, pcparr.descripcion, g1.CodGrupo1, g2.CodGrupo2, g3.CodGrupo3, g4.CodGrupo4 ,pc.observacion, PC.ESTADO  FROM " & _
          " PCGrupo4 g4 RIGHT JOIN (PCGrupo3 g3 RIGHT JOIN (PCGrupo2 g2 RIGHT JOIN (PCGrupo1 g1 RIGHT JOIN PCProvCli pc " & _
            " left join Anexo_TipoDocumento a on pc.IdTipoDocumento  = a.Id" & _
                          " ON g1.IdGrupo1 = pc.IdGrupo1) " & _
                    " ON g2.IdGrupo2 = pc.IdGrupo2) " & _
                " ON g3.IdGrupo3 = pc.IdGrupo3) " & _
                " ON g4.IdGrupo4 = pc.IdGrupo4 "
                
                
sql = sql & " left join pcprovincia pcp on pcp.idprovincia=pc.idprovincia "
sql = sql & " left join pccanton pcc on pcc.idcanton=pc.idcanton "
sql = sql & " left join pcparroquia pcparr on pcparr.idparroquia=pc.idparroquia "
sql = sql & " left join fcvendedor fcv on fcv.idvendedor = pc.idvendedor "
                
    If Not (BandProveedor And BandCliente) Then
        If BandProveedor Then
            sql = sql & " WHERE pc.BandProveedor=" & CadenaBool(True, TipoDB)
        Else
            sql = sql & " WHERE pc.BandCliente=" & CadenaBool(True, TipoDB)
        End If
    End If
    
    If Len(codPC) > 0 Then
        cond = cond & " and (CodProvCli LIKE '" & codPC & comodin & "') "
    End If
    
    If Len(Nombre) > 0 Then
        cond = cond & " and ((pc.Nombre LIKE '" & Nombre & comodin & "') " & _
                      "OR (pc. Nombre LIKE '" & Nombre & comodin & "')) "
    End If
    
    If Len(Direccion) > 0 Then
        cond = cond & " and (Direccion1 LIKE '" & Direccion & comodin & "') "
    End If
    
    If Len(RUC) > 0 Then
        cond = cond & " and (ruc LIKE '" & RUC & comodin & "') "
    End If
    
    
    If Not (Len(CodGrupoDesde) = 0 And Len(CodGrupoHasta) = 0) Then
        cond = cond & " AND (CodGrupo" & numG & " BETWEEN '" & CodGrupoDesde & _
            "' AND '" & CodGrupoHasta & "')"
    End If

    If Len(CodProvincia) > 0 Then
        cond = cond & " and (pcp.codprovincia='" & CodProvincia & "') "
    End If

    If Len(CodCanton) > 0 Then
        cond = cond & " and (pcc.codcanton='" & CodCanton & "') "
    End If

    If Len(CodVendedor) > 0 Then
        cond = cond & " and (fcv.codvendedor='" & CodVendedor & "') "
    End If


    
    If Len(cond) > 0 Then sql = sql & cond
    sql = sql & " ORDER BY pc.Nombre "
    
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCProvCliFiltroNew = rs
    Else
        ListaPCProvCliFiltroNew = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


Public Function ListaPCProvCliFiltroDetalleNew(BandProveedor As Boolean, _
                                    BandCliente As Boolean, _
                                   codPC As String, _
                                    Nombre As String, _
                                    Direccion As String, _
                                    RUC As String, _
                                    CodGrupoDesde As String, _
                                    CodGrupoHasta As String, _
                                    numG As Integer, _
                                    CodProvincia As String, _
                                    CodCanton As String, _
                                    CodVendedor As String, _
                                    BandSoloValida As Boolean, _
                                    BandRS As Boolean) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset, i As Integer
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If
    sql = "SELECT pc.CodProvCli, pc.Nombre, pc.NombreAlterno, pc.RUC, pc.direccion1, pc.Telefono1, "
    sql = sql & " pc.Telefono2, pc.Telefono3,pc.fax,pcprov.descripcion,pccan.descripcion, fc.nombre , "
    sql = sql & " g1.Descripcion, g2.Descripcion, g3.Descripcion, g4.Descripcion ,pc.observacion, pc.diasplazo, pc.limitecredito , PC.ESTADO, "
    sql = sql & " case  pc.estado  when 0 then 'BUENO' WHEN 1 THEN 'REGULAR' ELSE 'MALO' END AS ESTADO"
    sql = sql & "  FROM "
    sql = sql & "  PCGrupo4 g4 RIGHT JOIN (PCGrupo3 g3 RIGHT JOIN (PCGrupo2 g2"
    sql = sql & " RIGHT JOIN (PCGrupo1 g1 RIGHT JOIN PCProvCli pc "
    sql = sql & " ON g1.IdGrupo1 = pc.IdGrupo1) "
    sql = sql & " ON g2.IdGrupo2 = pc.IdGrupo2) "
    sql = sql & " ON g3.IdGrupo3 = pc.IdGrupo3) "
    sql = sql & " ON g4.IdGrupo4 = pc.IdGrupo4 "
    sql = sql & " LEFT JOIN pcprovincia pcprov on pc.idprovincia= pcprov.idprovincia"
    sql = sql & " LEFT JOIN pccanton pccan on pc.idcanton= pccan.idCanton"
    sql = sql & " LEFT JOIN fcvendedor fc on pc.idvendedor= fc.idvendedor"
    If Not (BandProveedor And BandCliente) Then
        If BandProveedor Then
            sql = sql & " WHERE BandProveedor=" & CadenaBool(True, TipoDB)
        Else
            sql = sql & " WHERE BandCliente=" & CadenaBool(True, TipoDB)
        End If
    End If
   If Len(codPC) > 0 Then
        cond = cond & " and (CodProvCli LIKE '" & codPC & comodin & "') "
    End If
    If Len(Nombre) > 0 Then
        cond = cond & " and ((pc.Nombre LIKE '" & Nombre & comodin & "') " & _
                      "OR (pc.Nombre LIKE '" & Nombre & comodin & "')) "
   End If
    If Len(Direccion) > 0 Then
        cond = cond & " and (Direccion1 LIKE '" & Descripcion & comodin & "') "
    End If
    If Len(RUC) > 0 Then
        cond = cond & " and (ruc LIKE '" & RUC & comodin & "') "
    End If
    
    If Len(CodProvincia) > 0 Then
        cond = cond & " and (pcprov.codprovincia='" & CodProvincia & "') "
    End If

    If Len(CodCanton) > 0 Then
        cond = cond & " and (pccan.codcanton='" & CodCanton & "') "
    End If

    If Len(CodVendedor) > 0 Then
        cond = cond & " and (fc.codvendedor='" & CodVendedor & "') "
    End If
    
    
    If Not (Len(CodGrupoDesde) = 0 And Len(CodGrupoHasta) = 0) Then
        cond = cond & " AND (CodGrupo" & numG & " BETWEEN '" & CodGrupoDesde & _
            "' AND '" & CodGrupoHasta & "')"
    End If
    If Len(cond) > 0 Then sql = sql & cond
    sql = sql & " ORDER BY pc.Nombre "
   Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCProvCliFiltroDetalleNew = rs
   Else
        ListaPCProvCliFiltroDetalleNew = MiGetRows(rs)
       rs.Close
    End If
    Set rs = Nothing
End Function


Public Function ListaArancelParaFlexGrid() As String
    Dim sql As String, cad As String, rs As Recordset
    
    sql = "SELECT CodArancel, Descripcion FROM ivrecargoArancel WHERE bandvalida=1 "
    sql = sql & " ORDER BY CodArancel"
    Set rs = Me.OpenRecordset(sql)

    'Pero por ahora uso lo siguiente para controlar cuentas de total y de movimiento
#If DAOLIB Then
    cad = "|" & GetStringDAO(rs, 21 + (20 + 80 + 2))        'Código+'*'=21, Space+NombreCuenta+'[]'=20+80+2
#Else
    If Not rs.EOF Then cad = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    
    rs.Close
    Set rs = Nothing
    
    ListaArancelParaFlexGrid = cad
End Function


Public Function ListaGnProyectoxVendedor(BandSoloValida As Boolean, BandRS As Boolean, codVende As String) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodProyecto,  Descripcion FROM GnProyecto gnp inner join fcvendedor fc on gnp.idvendedor=fc.idvendedor "
    sql = sql & " where fechafinal is NULL "
    If Len(codVende) > 0 Then
        sql = sql & " and  codvendedor='" & codVende & "'"
    End If
    sql = sql & " ORDER BY CodProyecto"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaGnProyectoxVendedor = rs
    Else
        ListaGnProyectoxVendedor = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


Public Function ConsGnVisitaProyectos() As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim TipoTabla As String, CodVendedor As String
    Dim fcv As FCVendedor
    
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient

    gobjCond.fecha1 = Me.GNOpcion.FechaLimiteDesde

'    If Len(gobjCond.CodPC1) > 0 Then
'        sql = "spConsGNDetalleVisitasxProy " & _
'                    FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
'                    FechaYMD(gobjCond.fecha2, TipoDB) & ",'" & _
'                    gobjCond.CodBanco1 & "','" & _
'                    gobjCond.CodPC1 & "'"
'
'    Else

        CodVendedor = Me.RecuperaVendedorxUsuario(gobjMain.UsuarioActual.codUsuario)
        TipoTabla = Me.RecuperaTipoTablaVendedor(CodVendedor)
        gobjCond.CodBanco1 = CodVendedor
        Set fcv = Me.RecuperaFCVendedor(CodVendedor)
        If Not fcv Is Nothing Then
            If fcv.BandCobrador And fcv.BandVendedor Then
                
            Else
                TipoTabla = ""
            End If
        Else
            TipoTabla = ""
        End If
        
        sql = "spConsGNDetalleVisitas " & _
                    FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                    FechaYMD(gobjCond.fecha2, TipoDB) & ",'" & _
                    CodVendedor & "','" & _
                    gobjCond.CodPC1 & "','" & _
                    TipoTabla & "'"
'    End If
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    
    
    
    Set ConsGnVisitaProyectos = rs
    Set rs = Nothing
    Set fcv = Nothing

    Me.GrabaGNLogAccion "CONSULTA", "Consulta VisitaProyectos  " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "IV"
End Function


'Para corrección de existencias
'Devuelve los items que tienen existencia incorrecta comparando con
' la suma de IVKardex.
Public Function ConsAFCorrecExistCustodio() As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    Dim ex1 As String, ex2 As String, ex3 As String, ex4 As String
    Dim ex5 As String, ex6 As String
    
#If DAOLIB Then
    ex1 = "IIF(IsNull(ive.Exist),0,ive.Exist)"
    ex2 = "IIF(IsNull(iv.IdInventario), iv2.IdInventario, iv.IdInventario)"
    ex3 = "IIF(IsNull(iv.CodInventario), iv2.CodInventario, iv.CodInventario)"
    ex4 = "IIF(IsNull(vw.SumaDeCantidad),0, vw.SumaDeCantidad)"
    ex5 = "IIF(IsNull(ivb.IdBodega), ivb2.IdBodega, ivb.IdBodega)"
    ex6 = "IIF(IsNull(ivb.CodBodega), ivb2.CodBodega, ivb.CodBodega)"
#Else
    ex1 = "isnull(ive.Exist,0)"
    ex2 = "isnull(iv.IdInventario, iv2.IdInventario)"
    ex3 = "isnull(iv.CodInventario, iv2.CodInventario)"
    ex4 = "isnull(vw.SumaDeCantidad,0)"
    ex5 = "isnull(pc.Idprovcli, pc2.Idprovcli)"
    ex6 = "isnull(pc.Idprovcli, pc2.Idprovcli)"
#End If

    'Muestra la diferencia de existencia y suma de IVKardex si es que la hay
    sql = "SELECT " & ex2 & " AS IdInventario, " & ex3 & " AS CodInventario, " & _
                 ex5 & " AS IdProvcli, " & ex6 & " AS CodProvcli, " & ex1 & " AS Exist1, " & _
                 ex4 & " AS SumaDeCantidad, (" & ex1 & " - " & ex4 & ") AS Dif " & _
          "FROM AFInventario iv2 RIGHT JOIN " & _
                    "(AFInventario iv RIGHT JOIN " & _
                        "(empleado pc2 RIGHT JOIN " & _
                            "(Empleado pc RIGHT JOIN "
#If DAOLIB Then                         '*** MAKOTO 25/ene/01 Mod. porque en DAO no sporta FULL JOIN
                    sql = sql & "(vwConsAFKardexCustodioSuma vw Right JOIN afexistcustodio ive "
#Else
                    sql = sql & "(vwConsAFKardexCustodioSuma vw FULL JOIN afexistcustodio ive "
#End If
                    sql = sql & "ON (vw.IdProvcli = ive.IdProvcli) AND (vw.IdInventario = ive.IdInventario) ) " & _
                            "ON pc.IdProvcli = vw.IdProvcli) " & _
                        "ON pc2.IdProvcli = ive.IdProvcli) " & _
                    "ON iv.IdInventario=vw.IdInventario) " & _
                "ON iv2.IdInventario = ive.IdInventario " & _
          "WHERE (" & ex1 & " - " & ex4 & ")<>0 " & _
                 "AND " & ex2 & " is not null " & _
          "ORDER BY " & ex3
    
    Set rs = Me.OpenRecordset(sql)
    Set ConsAFCorrecExistCustodio = rs
    Set rs = Nothing
End Function

'Para corregir existencias incorrectas
Public Sub CorregirExistenciaAFCustodio()
    Dim rs As Recordset, sql As String, rs2 As Recordset
    
    Set rs = Me.ConsAFCorrecExistCustodio
    If rs.EOF Then Exit Sub
    
#If DAOLIB = 0 Then
    Set rs2 = New ADODB.Recordset
    rs2.CursorLocation = adUseClient
#End If

    With rs
        Do Until .EOF
            'Verifica si existe el registro
            sql = "SELECT Exist FROM AFExistCustodio  " & _
                  " WHERE IdInventario=" & !IdInventario & _
                  " AND IdProvcli=" & !IdProvcli
#If DAOLIB Then
            Set rs2 = mdbEmpresa.OpenRecordset(sql, dbOpenSnapshot, dbReadOnly)
#Else
            rs2.Open sql, mcnEmpresa, adOpenStatic, adLockReadOnly
#End If
            'Si no existe, lo inserta
            If rs2.EOF Then
                sql = "INSERT INTO AFExistCustodio (IdInventario,IdProvCli,Exist) " & _
                      "VALUES (" & !IdInventario & "," & !IdProvcli & "," & !SumaDeCantidad & ")"
            
            'Si existe, lo modifica
            Else
                sql = "UPDATE AFExistCustodio SET Exist=" & !SumaDeCantidad & _
                      " WHERE IdInventario=" & !IdInventario & _
                      " AND IdProvCli=" & !IdProvcli
            End If
            Me.Execute sql, True
            rs2.Close
            .MoveNext
        Loop
        .Close
    End With
    Set rs2 = Nothing
    Set rs = Nothing
End Sub

Public Function VerificarProntoPago(ByVal IdProvcli As Long, BandProntoPago) As Boolean
Dim rs As Recordset
Dim sql As String

On Error GoTo CapturaError
    sql = "Select pcInv.idInventario,iv.codInventario,pcinv.cantidad,pcinv.pu,pcinv.frecuencia from PCProvCliInv pcInv "
    sql = sql & " Inner join pcprovcli pc ON pc.idProvCli = pcInv.idProvCli"
    sql = sql & " Inner join Ivinventario Iv ON iv.idinventario = pcInv.idinventario"
    sql = sql & " Where pc.idprovcli = " & IdProvcli
    If BandProntoPago Then
        sql = sql & " AND pcInv.bandpublicidad = 1"
    Else
        sql = sql & " AND pcInv.bandpublicidad = 0"
    End If
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        VerificarProntoPago = True
    Else
        VerificarProntoPago = False
    End If
Exit Function
CapturaError:
    VerificarProntoPago = False
    MsgBox Err.Description
    Exit Function
End Function


Public Function CargarPCProvCliItemsNew(ByVal IdProvcli As Long, ByVal BandProntoPago As Boolean) As Recordset
Dim rs As Recordset
Dim sql As String
On Error GoTo CapturaError
    sql = "Select pcInv.idInventario,iv.codInventario,pcinv.cantidad,pcinv.pu,pcinv.frecuencia from PCProvCliInv pcInv "
    sql = sql & " Inner join pcprovcli pc ON pc.idProvCli = pcInv.idProvCli"
    sql = sql & " Inner join Ivinventario Iv ON iv.idinventario = pcInv.idinventario"
    sql = sql & " Where pc.idprovcli = " & IdProvcli
    If BandProntoPago Then
        sql = sql & " AND pcInv.bandpublicidad = 1"
    Else
        sql = sql & " AND pcInv.bandpublicidad = 0"
    End If
    Set rs = Me.OpenRecordset(sql)
    Set CargarPCProvCliItemsNew = rs
Exit Function
CapturaError:
    MsgBox Err.Description
    Exit Function
End Function


Public Function VerificaTipoPublicidad(ByVal IdProvcli As Long, ByVal IdInventario As Long) As Boolean
Dim rs As Recordset
Dim sql As String
On Error GoTo CapturaError
    sql = "Select pcInv.bandpublicidad from PCProvCliInv pcInv "
    sql = sql & " Where pcinv.idprovcli = " & IdProvcli
    sql = sql & " And pcinv.idinventario = " & IdInventario
    Set rs = Me.OpenRecordset(sql)
    If Not IsNull(rs!BandPublicidad) Then
        If CInt(rs!BandPublicidad) = -1 Then
            VerificaTipoPublicidad = True
        Else
            VerificaTipoPublicidad = False
        End If
    End If
Exit Function
CapturaError:
    VerificaTipoPublicidad = False
    MsgBox Err.Description
    Exit Function
End Function

Public Function RecuperaIVUltimoCaracter(ByVal key As String) As Long 'AUC recuperaItems Telas compra
    Dim sql As String
    Dim rs As Recordset
    Dim NumCaracter As Long
    On Error GoTo CapturaError
    NumCaracter = Len(key)
    VerificaExistenciaTabla 1
    sql = "Select cast(right(codinventario, 3 )  as integer)  as UltimoNumero into tmp1 FROM vwIVInventarioRecuperar WHERE CodInventario like '" & key & "%'"
    sql = sql & "AND Tipo = 0"
   Me.Execute sql
    'Toma el ultimo numero
    sql = "select  top 1 * from tmp1 order by Ultimonumero desc"
    'sql = "select max(secuencia) as num FROM ivsecuencia WHERE CodInventario = '" & key & "'"
   Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        RecuperaIVUltimoCaracter = rs!UltimoNumero
     '   RecuperaIVUltimoCaracter = rs!num
   Else
        RecuperaIVUltimoCaracter = 0
    End If
    Set rs = Nothing
    Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function

Public Function RecuperaVendedorxUsuario(ByVal cod As String) As String
    Dim sql As String, rs As Recordset
    Dim idSec As Integer

    sql = "SELECT top 1 codVendedor from fcvendedor"
    sql = sql & " where Codusuario='" & cod & "'"
    sql = sql & " and bandvalida=1"

     Set rs = Me.OpenRecordset(sql)
     If rs.RecordCount > 0 Then
        RecuperaVendedorxUsuario = rs.Fields(0)
    Else
        RecuperaVendedorxUsuario = ""
    End If
    Set rs = Nothing
End Function

Public Function CreaGNCompetencia() As GnCompetencia
    Dim obj As GnCompetencia
    Set obj = New GnCompetencia
    Set obj.Empresa = Me
    Set CreaGNCompetencia = obj
    Set obj = Nothing
End Function

Public Function RecuperaGNCompetencia(key As Variant) As GnCompetencia
    Dim obj As GnCompetencia
    Set obj = New GnCompetencia
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaGNCompetencia = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function


Public Function ListaGNCompetencia(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    

    If InStr(1, Me.GNOpcion.NombreEmpresa, "TEVE") <> 0 Then
        sql = "SELECT CodCompetencia, GNCompetencia.Nombre, codzona FROM GNCompetencia left join gnzona on GNCompetencia.idzona = gnzona.idzona "
    Else
        sql = "SELECT CodCompetencia, Nombre FROM GNCompetencia "
    End If

    If BandSoloValida Then
        sql = sql & "WHERE GNCompetencia.BandValida=" & CadenaBool(True, TipoDB)
    End If
    
    If InStr(1, Me.GNOpcion.NombreEmpresa, "TEVE") <> 0 Then
        sql = sql & " ORDER BY codzona, CodCompetencia"
    Else
        sql = sql & " ORDER BY CodCompetencia"
    End If

    Set rs = Me.OpenRecordset(sql)
    
    If BandRS Then
        Set ListaGNCompetencia = rs
    Else
        ListaGNCompetencia = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaGnProyectoxVendedorxProvxCAnt(BandSoloValida As Boolean, BandRS As Boolean, codVende As String, CodProv As String, CodCan As String) As Variant
End Function

Public Function ListaGnProyectoxVendrxProvxCant(BandSoloValida As Boolean, BandRS As Boolean, codVende As String, CodProv As String, CodCan As String, BandFin As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodProyecto,  gnp.Descripcion FROM GnProyecto gnp "
    sql = sql & " inner join fcvendedor fc on gnp.idvendedor=fc.idvendedor "
    sql = sql & " inner join pcProvincia pcp on gnp.idprovincia=pcp.idprovincia "
    sql = sql & " inner join pccanton pcc on gnp.idcanton=pcc.idcanton "
    sql = sql & " where 1=1 "
    If BandFin Then
        sql = sql & " and fechafinal is NULL"
    End If
    If Len(codVende) > 0 Then
        sql = sql & " and  codvendedor='" & codVende & "'"
    End If
    If Len(CodProv) > 0 Then
        sql = sql & " and  codProvincia='" & CodProv & "'"
    End If
    If Len(CodCan) > 0 Then
        sql = sql & " and  codCanton='" & CodCan & "'"
    End If
    
    sql = sql & " ORDER BY CodProyecto"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaGnProyectoxVendrxProvxCant = rs
    Else
        ListaGnProyectoxVendrxProvxCant = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function RecuperaTipoTablaVendedor(ByVal cod As String) As Integer
    Dim sql As String, rs As Recordset
    Dim idSec As Integer

    sql = "SELECT top 1 TipoTabla from fcvendedor"
    sql = sql & " where CodVendedor='" & cod & "'"
    sql = sql & " and bandvalida=1"

     Set rs = Me.OpenRecordset(sql)
     If rs.RecordCount > 0 Then
        RecuperaTipoTablaVendedor = rs.Fields(0)
    Else
        RecuperaTipoTablaVendedor = 0
    End If
    Set rs = Nothing
End Function

Public Function ConsTSPorCobrarPagar6() As Variant
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim objCond As Condicion
    Set objCond = gobjMain.objCondicion
    'Si no está especificada la moneda, coge la Moneda predeterminada
    If Len(objCond.CodMoneda) = 0 Then objCond.CodMoneda = MONEDA_PRE
    numMoneda = Me.GNOpcion.IndiceMoneda(objCond.CodMoneda)
#If DAOLIB Then
    sql = "SELECT Id, CodProvCli, Nombre, TransID, CodTrans, Trans, CodForma,NumLetra, Doc, "
    Select Case numMoneda
    Case 1:  sql = sql & "Valor1 AS Valor, VCancelado1 AS VCancelado, " & _
                          "Valor1-VCancelado1 AS Saldo, CodMoneda, Cancela, 1 AS Cotizacion, "
    Case 2:  sql = sql & "Valor2 AS Valor, VCancelado2 AS VCancelado, " & _
                          "Valor2-VCancelado2 AS Saldo, CodMoneda, Cancela, Cotizacion2 AS Cotizacion, "
    Case 3:  sql = sql & "Valor3 AS Valor, VCancelado3 AS VCancelado, " & _
                          "Valor3-VCancelado3 AS Saldo, CodMoneda, Cancela, Cotizacion3 AS Cotizacion, "
    Case 4:  sql = sql & "Valor4 AS Valor, VCancelado4 AS VCancelado, " & _
                          "Valor4-VCancelado4 AS Saldo, CodMoneda, Cancela, Cotizacion4 AS Cotizacion, "
    End Select
    sql = sql & "FechaEmision, Plazo, FechaVenci "
    If objCond.PorCobrar Then
        sql = sql & " FROM vwConsPCPorCobrar "
    Else
        sql = sql & " FROM vwConsPCPorPagar "
    End If
    'Solo los que tengan saldo >0   (Necesario)
    cond = "(Valor" & objCond.numMoneda & ">VCancelado" & objCond.numMoneda & ")"
    'Condición de FechaVenci    (Necesario)             '*** MAKOTO 10/dic/00 Modificado
    cond = cond & " AND (FechaVenci BETWEEN " & _
                    FechaYMD(objCond.fecha1, TipoDB) & " AND " & _
                    FechaYMD(objCond.fecha2, TipoDB) & ")"
    'Condición de CodMoneda     (Necesario)
    If Len(cond) > 0 Then cond = cond & " AND "
    cond = cond & "(CodMoneda='" & Me.GNOpcion.CodMoneda(numMoneda) & "')"
    'Condición de CodProvCli    (Opcional)
    If Len(objCond.CodPC1) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodProvCli='" & objCond.CodPC1 & "')"
    End If
    'Condición de CodForma    (Opcional)
    If Len(objCond.CodForma) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodForma='" & objCond.CodForma & "')"
    End If
    'Condición de Cod. Grupo1 de prov/cliente (Opcional)
    If Len(objCond.CodGrupo) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodGrupo1='" & objCond.CodGrupo & "')"
    End If
    'Condición de si incluir cliente/proveedor          '*** MAKOTO 10/dic/00
    If Len(cond) > 0 Then cond = cond & " AND "
    cond = cond & "(BandCliente=" & CadenaBool(objCond.Cliente, TipoDB) & _
                    " OR BandProveedor=" & CadenaBool(objCond.Proveedor, TipoDB) & ")"
    If Len(cond) > 0 Then sql = sql & " WHERE (" & cond & ")"
    sql = sql & " ORDER BY CodProvCli,FechaVenci"
#Else
        sql = "spConsTSTotalPorCobrarPagarAcumulado " & numMoneda & ", " & _
                objCond.CodMoneda & "," & _
                CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                CadenaBool(objCond.Cliente, TipoDB) & "," & _
                CadenaBool(objCond.Proveedor, TipoDB) & "," & _
                FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                objCond.CodPC1 & "','" & _
                objCond.CodPC1 & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodGrupo & "'," & objCond.NumDias1
    'End If
#End If
    Set rs = Me.OpenRecordset(sql)
    Set ConsTSPorCobrarPagar6 = rs
    Set rs = Nothing
    Set objCond = Nothing
End Function


Public Function ConsTSPorCobrarPagarVendeProntoPago( _
                    ByVal PorCobrar As Boolean, _
                    ByVal CodProvcli As String, _
                    ByVal FechaVenci As Date, _
                    ByVal CodForma As String, _
                    ByVal CodMoneda As String, _
                    ByVal CodGrupo1 As String, _
                    ByVal CodVendedor As String, _
                    ByVal CodSucursal As String) As Variant
'    Dim aux_codpc As String, aux_f1 As Date, aux_f2 As Date
'    Dim aux_PorCobrar As Boolean, aux_Cliente As Boolean, aux_Proveedor As Boolean
'    Dim aux_CodForma As String, aux_CodMoneda As String, aux_codgrupo As String
'    Dim aux_incluircero As Boolean, aux_codVendedor As String, aux_codSucursal As String
'    Dim aux_codElemento As String
'    Dim aux_Empleado As Boolean
'
'    With gobjMain.objCondicion
'        'Conservar valores actuales para que no afecte a otras consultas
'        aux_codpc = .CodPC1
'        aux_f1 = .fecha1
'        aux_f2 = .fecha2
'        aux_PorCobrar = .PorCobrar
'        aux_Cliente = .Cliente
'        aux_Proveedor = .Proveedor
'        aux_Empleado = .Empleado
'        aux_CodForma = .CodForma
'        aux_CodMoneda = .CodMoneda
'        aux_codgrupo = .CodGrupo
'        aux_incluircero = .IncluirCero
'        aux_codVendedor = .Usuario1
'        aux_codSucursal = .Sucursal
'        aux_codElemento = .Codelemento
'        .PorCobrar = PorCobrar
'        .Cliente = True
'        .Proveedor = True
'        .Empleado = True
'        .CodPC1 = CodProvCli
'        .fecha1 = Me.GNOpcion.FechaInicio
'        .fecha2 = FechaVenci
'        .CodForma = CodForma
'        .CodMoneda = CodMoneda
'        .CodGrupo = CodGrupo1
'        .IncluirCero = False
'        .Usuario1 = CodVendedor
'        .Sucursal = CodSucursal
''        .Codelemento = Codelemento
'        .NumDias2 = IIf(Len(Me.GNOpcion.ObtenerValor("NumDecimales")) > 0, Me.GNOpcion.ObtenerValor("NumDecimales"), 2)
'        Set ConsTSPorCobrarPagarVendeProntoPago = ConsTSPorCobrarPagarVendedorProntoPago()
'        'Recuperar valores reservados
'        .CodPC1 = aux_codpc
'        .fecha1 = aux_f1
'        .fecha2 = aux_f2
'        .PorCobrar = aux_PorCobrar
'        .Cliente = aux_Cliente
'        .Proveedor = aux_Proveedor
'        .Empleado = aux_Empleado
'        .CodForma = aux_CodForma
'        .CodMoneda = aux_CodMoneda
'        .CodGrupo = aux_codgrupo
'        .IncluirCero = aux_incluircero
'        .Usuario1 = aux_codVendedor
'        .Sucursal = aux_codSucursal
'         .Codelemento = aux_codElemento
'    End With
End Function
'AUC para lira
Public Function ConsTSPorCobrarPagarVendedorProntoPago() As Variant
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim objCond As Condicion
    Set objCond = gobjMain.objCondicion
    'Si no está especificada la moneda, coge la Moneda predeterminada
    If Len(objCond.CodMoneda) = 0 Then objCond.CodMoneda = MONEDA_PRE
    numMoneda = Me.GNOpcion.IndiceMoneda(objCond.CodMoneda)
    sql = "spConsTSPorCobrarPagarProntoPago " & numMoneda & ", " & _
                objCond.CodMoneda & "," & _
                CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                CadenaBool(objCond.Cliente, TipoDB) & "," & _
                CadenaBool(objCond.Proveedor, TipoDB) & "," & _
                CadenaBool(objCond.Empleado, TipoDB) & "," & _
                FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                objCond.CodPC1 & "','" & _
                objCond.CodPC1 & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodForma & "','" & _
                objCond.Codelemento & "','" & _
                objCond.CodGrupo & "','" & _
                objCond.Usuario1 & "','" & _
                objCond.Usuario1 & "','" & _
                objCond.Sucursal & "','" & _
                objCond.Sucursal & "'," & _
                objCond.NumDias2
    Set rs = Me.OpenRecordset(sql)
    Set ConsTSPorCobrarPagarVendedorProntoPago = rs
    Set rs = Nothing
    Set objCond = Nothing
End Function
'AUC lira
Public Function VerificaDescuento(ByVal Id As Long, numPer As Integer, ByRef transid As Long) As Boolean
Dim rs As Recordset, sql As String
    VerificaDescuento = False
    transid = 0
    sql = "select transid "
    sql = sql & " from PCKardexND"
    sql = sql & " where bandvalida=1 and IdFuente=" & Id
    'sql = sql & " and periodos=" & numPer
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        transid = rs.Fields("transid")
        VerificaDescuento = True
   End If
    Set rs = Nothing
End Function
Public Function ListaIVUnidadParaFlex(ByVal BandSoloValida As Boolean) As String
    Dim sql As String, s As String, i As Integer
    Dim rs As Recordset
    sql = "SELECT CodUnidad,Descripcion FROM IVUnidad "
    If BandSoloValida Then
        sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY CodUnidad"
   Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 5 + 20)          '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    ListaIVUnidadParaFlex = s
    rs.Close
    Set rs = Nothing
End Function
Public Function RecuperaCodGrupoPorDes(ByVal NumGrupo As Integer, key As String) As String
    Dim sql As String
    Dim rs As Recordset
    Dim NumCaracter As Long
    On Error GoTo CapturaError
    sql = "select  codgrupo" & NumGrupo & " as cogGrupo from ivgrupo" & NumGrupo & " Where descripcion = '" & key & "'"
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        If Not IsNull(rs!cogGrupo) Then RecuperaCodGrupoPorDes = rs!cogGrupo
    Else
        RecuperaCodGrupoPorDes = ""
    End If
    Set rs = Nothing
    Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function
'AUC SOLO ITEMS QUE SON Tipo MATRIZ PARA LIRA
Public Function ListaIVItemParaFlexMatriz(CodBodega As String, _
                                    CodGrupo1 As String, _
                                    CodGrupo2 As String, _
                                    CodGrupo3 As String, _
                                    CodGrupo4 As String, _
                                    CodGrupo5 As String) As String
    Dim sql As String, cond As String, s As String
    Dim rs As Recordset
    sql = "SELECT CodInventario,Descripcion FROM vwIVInventarioRecuperar"
    If CodGrupo1 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo1='" & CodGrupo1 & "' "
    End If
    If CodGrupo2 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo2='" & CodGrupo2 & "' "
    End If
    If CodGrupo3 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo3='" & CodGrupo3 & "' "
    End If
    If CodGrupo4 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo4='" & CodGrupo4 & "' "
    End If
    If CodGrupo5 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo5='" & CodGrupo5 & "' "
    End If
    sql = sql & " WHERE  BandValida= 1  and BandVenta= 1 and bandconversionUni = 1  "
    If Len(cond) > 0 Then sql = sql & " and " & cond
    sql = sql & " ORDER BY CodInventario"
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 20 + 80)     'Código=20, Descripcion=80      '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    ListaIVItemParaFlexMatriz = s
    rs.Close
    Set rs = Nothing
End Function

Public Function VerificaSiEfectivo(ByVal CodBanco As String) As Boolean
Dim sql As String
Dim rs As Recordset
On Error GoTo CapturaError
sql = "Select efectivo from TSTipoDocBanco where codtipodoc  = '" & CodBanco & "'"
Set rs = Me.OpenRecordset(sql)
If Not rs Is Nothing Then
    If rs!Efectivo Then
        VerificaSiEfectivo = True
    Else
        VerificaSiEfectivo = False
    End If
End If
Set rs = Nothing
Exit Function
CapturaError:
MsgBox Err.Description
Set rs = Nothing
Exit Function
End Function


Public Function ConsIVKxMesTotal(CodInventario As String) As Variant
    Dim sql As String, cond As String, rs As Recordset
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsIVKardexPorFecha")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("prmCodBodega") = gobjCond.CodBodega1
    qdef.Parameters("CodItem1") = IIf(Len(gobjCond.CodItem1) = 0, "!", gobjCond.CodItem1)
    qdef.Parameters("CodItem2") = IIf(Len(gobjCond.CodItem2) = 0, String$(20, "z"), gobjCond.CodItem2)
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    sql = "spConsIVKardexPorMesSinBodega " & _
                FechaYMD("01/01/" & DatePart("yyyy", Date), TipoDB) & ",'" & CodInventario & _
                "'"
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    Set ConsIVKxMesTotal = rs
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Kardex xmes  Total" & gobjCond.fecha1 & "-" & gobjCond.fecha2, "IV"
End Function


Public Function ListaIVInventarioSinBodega(CodInventario As String, _
                                  CodAlterno As String, _
                                  Descripcion As String, _
                                  CodGrupo() As String, _
                                  BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset, i As Integer
    
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If

    sql = "SELECT CodInventario, CodAlterno1 , "
    sql = sql & " Descripcion, sum(exist) as exist  FROM vwIVInventario "
    
    If BandSoloValida Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(BandValida=" & CadenaBool(True, TipoDB) & ")"
    End If
    
    If Len(CodInventario) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodInventario LIKE '" & CodInventario & comodin & "') "
    End If
    
    If Len(CodAlterno) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "((CodAlterno1 LIKE '" & CodAlterno & comodin & "') " & _
                      "OR (CodAlterno2 LIKE '" & CodAlterno & comodin & "')) "
    End If
    
    If Len(Descripcion) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(Descripcion LIKE '" & Descripcion & comodin & "') "
    End If
    
    
    For i = LBound(CodGrupo) To UBound(CodGrupo)
        If Len(CodGrupo(i)) > 0 Then
            If Len(cond) > 0 Then cond = cond & "AND "
'            cond = cond & "(CodGrupo" & i & " LIKE '" & CodGrupo(i) & comodin & "') "
            cond = cond & "(CodGrupo" & i & " = '" & CodGrupo(i) & "') "
        End If
    Next i
    
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    
    sql = sql & " group by CodInventario, CodAlterno1,  Descripcion"
    sql = sql & " ORDER BY CodInventario "
    
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVInventarioSinBodega = rs
    Else
        ListaIVInventarioSinBodega = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaIVDescuentoM(BandRS As Boolean) As Variant
Dim sql As String, rs As Recordset, NumIVGrupo As Integer, ivgrupo As Integer
ivgrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumPCGrupo")) + 1
sql = " Select coddescuento, ivd.descripcion, ivd.bandvalida,  bandcaducidad,  bandxcliente,"
sql = sql & " case when bandxcliente=1 then"
sql = sql & " p.nombre else pg.descripcion end as cli,"
sql = sql & " BandxItem"
sql = sql & " from  IVDescuento ivd"
sql = sql & " inner join ivdescuentodetallepc idpc"
sql = sql & " left join pcprovcli p on idpc.idprovcli=p.idprovcli"
sql = sql & " left join pcgrupo" & ivgrupo & " pg on idpc.idPCgrupo=pg.idgrupo" & ivgrupo
sql = sql & " on ivd.iddescuento  =idpc.iddescuento"
sql = sql & " order by ivd.iddescuento"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVDescuentoM = rs
    Else
        ListaIVDescuentoM = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

'AUC para megalimpio
Public Function ObtieneDesctoPCxIVxFechaM(ByVal codItem As String, ByVal codPC As String, ByVal codFC As String, ByRef CodDescuento As String) As Double
Dim sql As String, rs As Recordset, NumIVGrupo As Integer, NumPCGrupo As Integer
    CodDescuento = ""
    sql = " select top 1"
    sql = sql & " ivD.codDescuento as codDesc,"
    sql = sql & " case when ivdiv.Descuento-Penal>0 then ivdiv.Descuento-Penal else 0 end as TotalDesc"
    sql = sql & " From"
    sql = sql & " ivdescuentodetallepc ivdpc "
    sql = sql & " inner join pcprovcli pcc  on ivdpc.idprovcli=pcc.idprovcli"
    sql = sql & " inner join ivdescuentodetalleiv ivdiv "
    sql = sql & " inner join IvInventario iv "
    sql = sql & " on ivdiv.idinventario=iv.idinventario"
    sql = sql & " inner join ivdescuentodetallefc ivdfc "
    sql = sql & " inner join TsFormaCobroPago tsf "
    sql = sql & " on ivdfc.idforma=tsf.idforma"
    sql = sql & " inner join ivdescuento ivd"
    sql = sql & " on ivd.iddescuento=ivdfc.iddescuento"
    sql = sql & " on ivd.iddescuento=ivdiv.iddescuento"
    sql = sql & " on ivd.iddescuento=ivdpc.iddescuento"
    sql = sql & " WHERE "
    sql = sql & " ivd.BandValida=1 and "
    sql = sql & " iv.CodInventario= '" & codItem & "'"
    sql = sql & " and  pcc.CodProvCli ='" & codPC & "'"
    If Len(codFC) > 0 Then
        sql = sql & " and tsf.codforma='" & codFC & "'"
    End If
    sql = sql & " order by ivd.fechagrabado"
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        ObtieneDesctoPCxIVxFechaM = rs!TotalDesc
        CodDescuento = rs!codDesc
    End If
    Set rs = Nothing
End Function

Public Function OpenRecordsetConfigReporte(ByVal sql As String) As Recordset
    Dim rs As ADODB.Recordset
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseServer
'    AbrirSoloConeccionConfigReporte "ConfigReporte4SQL"
'    rs.Open sql, mcnEmpresaConfigRep, adOpenKeyset, adLockPessimistic
    rs.Open sql, mcnEmpresaConfigRep, adOpenStatic, adLockReadOnly
    Set OpenRecordsetConfigReporte = rs
    Set rs = Nothing
End Function


Public Sub AbrirSoloConeccionConfigReporte(ByVal bd As String)
    Dim s As String
    'Prepara la cadena de coneccion
        s = CADENA_CONECCION_SQL & _
            "Initial Catalog=ConfigReporte4SQL;Data Source=" & mProps.Server

    'mcnEmpresaConfigRep.Close s, mProps.UserName, mProps.Password
    'Establece la conección con la base de la empresa
'    If mcnEmpresaConfigRep.Open Then
'        mcnEmpresaConfigRep.Close
'    End If
    
    mcnEmpresaConfigRep.Open s, mProps.UserName, mProps.Password

End Sub


Public Function CargaConsolidadoBuffer4a() As Variant
End Function


Public Function CargaConsolidadoBuffer4() As Variant
    Dim sql As String, rs As Recordset, cond  As String, Grupo As String, Orden As String
    Dim cond1 As String, k As Integer, numReg As Long, i As Integer, v As Variant
    Dim NumDias As Integer, numsab As Integer, numdom As Integer, diaIni As Integer

    With gobjCond
            numdom = 0
            numsab = 0
            NumDias = DateDiff("d", .fecha1, .fecha2)
            

            
            
            For i = 0 To NumDias
                If (Weekday(DateAdd("d", i, .fecha1))) = 5 Then
                    numsab = numsab + 1
                ElseIf (Weekday(DateAdd("d", i, .fecha1))) = 6 Then
                    numdom = numdom + 1
                End If
            Next i
            
            If .tipoItem2 Then
                NumDias = NumDias - numsab
            End If
            
            If .PorCobrar Then
                NumDias = NumDias - numdom
            End If
            
            If NumDias = 0 Then NumDias = 1
            
            
            ' cantidad Comprada
            sql = "  SELECT     idinventario,"
            sql = sql & "  isnull(Sum(cant), 0)  As Compra"
            sql = sql & "  Into T11"
            sql = sql & "  From vwVentasPorBodega"
            sql = sql & " WHERE (FechaTrans BETWEEN " & _
                         FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & _
                        " AND " & FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "

            sql = sql & "  and vwVentasPorBodega.codtrans='" & .CodComp & "'"
            
            If Not (Len(.Bienes)) = 0 Then
            
                v = Split(.Bienes, "IVInventario.")
                For i = 0 To UBound(v)
                    If i = 0 Then
                        sql = sql & v(i)
                    Else
                        sql = sql & " vwVentasPorBodega." & v(i)
                    End If
                    
                Next i
            End If
            sql = sql & " group by  idinventario"

            
            VerificaExistenciaTablaTemporal 11
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            ' cantidad Pedida
            sql = "  SELECT     idinventario,"
            sql = sql & "  isnull(Sum(cant), 0)  As Pedido "
            sql = sql & "  Into T22"
            sql = sql & "  From vwVentasPorBodega"
            sql = sql & " WHERE (FechaTrans BETWEEN " & _
                         FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & _
                        " AND " & FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "

            sql = sql & "  and (vwVentasPorBodega.codtrans='" & .CodForma & "'"
            sql = sql & "  or vwVentasPorBodega.codtrans='" & .CodForma & "M')"
            
            If Not (Len(.Bienes)) = 0 Then
            
                v = Split(.Bienes, "IVInventario.")
                For i = 0 To UBound(v)
                    If i = 0 Then
                        sql = sql & v(i)
                    Else
                        sql = sql & " vwVentasPorBodega." & v(i)
                    End If
                    
                Next i
            End If
            sql = sql & " group by  idinventario"

            VerificaExistenciaTablaTemporal 22
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            sql = " select"
            sql = sql & " isnull(t11.idinventario, t22.idinventario) as idinventario,"
            sql = sql & " isnull(t22.pedido,0) as pedido, isnull(t11.compra,0)   as compra, "
            sql = sql & " isnull(t22.pedido,0)-isnull(t11.compra,0)   as transito"
            sql = sql & " into T33"
            sql = sql & " from t11 left join t22 on t11.idinventario=t22.idinventario"
            
            VerificaExistenciaTablaTemporal 33
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            sql = "SELECT   "
            sql = sql & "  vwVentasPorBodega.idinventario, idgrupo1, idgrupo2, idgrupo3, idgrupo4, idgrupo5, "
            sql = sql & " CodInventario, Descripcion,3 as TiempoPromVta, TiempoReposicion, "
            sql = sql & " CodGrupo" & .NumGrupo & " as CodGrupo,"
            sql = sql & "  DescGrupo" & .NumGrupo & "  as DescGrupo,"
            sql = sql & " isnull(sum(Cant),0) * -1  AS TCant,  "
            sql = sql & "  0 AS CantMax, max(t33.Pedido) as Pedido, max(t33.Compra) as compra, max(t33.transito) as transito "
            sql = sql & "  Into T0"
            sql = sql & " from vwVentasPorBodega left join t33 on vwVentasPorBodega.idinventario=t33.idinventario"
            cond = " WHERE (FechaTrans BETWEEN " & _
                         FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & _
                        " AND " & FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            cond = cond & " AND  AnexoCodTipoComp in (" & PreparaCadena(.CodBanco2) & ") "
            cond = cond & " AND  AnexoCodTipoTrans in (" & PreparaCadena(.CodBanco1) & ") "
            If Not (Len(.Grupo1) = 0 And Len(.Grupo2) = 0) Then
                cond = cond & " AND (codGrupo" & .NumGrupo & " BETWEEN '" & _
                .Grupo1 & "' AND '" & .Grupo2 & "') "
            End If
            If Not (Len(.CodItem1) = 0 And Len(.CodItem2) = 0) Then
                cond = cond & " AND (CodInventario BETWEEN '" & .CodItem1 & "' AND '" & .CodItem2 & "') "
            End If
    
'cond = cond & v(0) Mid$(.Bienes, 1, 6) & " vwVentasPorBodega" & Mid$(.Bienes, 19, 60)
            If Not (Len(.Bienes)) = 0 Then
            
                v = Split(.Bienes, "IVInventario.")
                For i = 0 To UBound(v)
                    If i = 0 Then
                        cond = cond & v(i)
                    Else
                        cond = cond & " vwVentasPorBodega." & v(i)
                    End If
                    
                Next i
            End If
            Grupo = " group by "
            Grupo = Grupo & "  vwVentasPorBodega.idinventario, CodInventario, Descripcion,   "
            Orden = " ORDER BY CodInventario"
            Grupo = Grupo & " CodGrupo" & .NumGrupo & " , DescGrupo" & .NumGrupo
            Grupo = Grupo & " , TiempoPromVta , TiempoReposicion, idgrupo1, idgrupo2, idgrupo3, idgrupo4, idgrupo5"
            sql = sql & cond & cond1 & Grupo & Orden

            VerificaExistenciaTablaTemporal k
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg


            sql = "  SELECT  idinventario, idgrupo1, idgrupo2, idgrupo3, idgrupo4, idgrupo5, "
            sql = sql & "  isnull(max(Abs(cant)), 0) As CantMax"
            sql = sql & "  Into T50"
            sql = sql & "  from vwVentasPorBodega "
            sql = sql & " WHERE (FechaTrans BETWEEN " & _
                         FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & _
                        " AND " & FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = sql & " AND  AnexoCodTipoTrans in (" & PreparaCadena(.CodBanco1) & ") "

            If Not (Len(.Grupo1) = 0 And Len(.Grupo2) = 0) Then
                sql = sql & " AND (codGrupo" & .NumGrupo & " BETWEEN '" & _
                .Grupo1 & "' AND '" & .Grupo2 & "') "
            End If
            If Not (Len(.CodItem1) = 0 And Len(.CodItem2) = 0) Then
                sql = sql & " AND (CodInventario BETWEEN '" & .CodItem1 & "' AND '" & .CodItem2 & "') "
            End If

            If Not (Len(.Bienes)) = 0 Then
                v = Split(.Bienes, "IVInventario.")
                For i = 0 To UBound(v)
                    If i = 0 Then
                        sql = sql & v(i)
                    Else
                        sql = sql & " vwVentasPorBodega." & v(i)
                    End If
                    
                Next i
            
            
'                sql = sql & Mid$(.Bienes, 1, 6) & "vwVentasPorBodega" & Mid$(.Bienes, 19, 60)
            End If

            sql = sql & " group by   idinventario, idgrupo1, idgrupo2, idgrupo3, idgrupo4, idgrupo5"

            VerificaExistenciaTablaTemporal 50
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg

            sql = "select "
            sql = sql & "  isnull(T0.Codinventario, i.Codinventario) As Codinventario, "
            sql = sql & "  isnull(T0.Descripcion, i.Descripcion) as Descripcion, "
            sql = sql & "  T0.TiempoPromVta as TiempoPromVta, "
            sql = sql & "  T0.TiempoReposicion as TiempoReposicion, "
            sql = sql & "  isnull(T0.CodGrupo,i.CodGrupo" & .NumGrupo & ") as CodGrupo, "
            sql = sql & "  isnull(T0.DescGrupo, i.DescGrupo" & .NumGrupo & ") as DescGrupo, "
            sql = sql & "  isnull(sum(T0.TCant), 0) as TCant, "
            sql = sql & "  isnull(sum(T50.CantMax), 0)  as TCAntMAx, "
            sql = sql & "  isnull(sum(T0.TCant), 0)/" & NumDias & "  as Prom, "
            sql = sql & "  round(isnull(sum(T0.TCant), 0)/( " & NumDias
            sql = sql & "   ),1) as PromDiario, "
            sql = sql & "  isnull(sum(t0.pedido), 0) as pedido, "
            sql = sql & "  isnull(sum(t0.compra), 0) as compra, "
            sql = sql & "  isnull(sum(t0.transito), 0) as transito, "
            sql = sql & "  isnull(sum(i.exist), 0) as Existencia "
            sql = sql & "  Into Tmp0"
            sql = sql & " from "
            sql = sql & "T0  left join T50  on T0.idinventario = T50.idinventario"
            sql = sql & "  full join vwivexist i "
            sql = sql & " on T0.idinventario=i.idinventario"
            sql = sql & " WHERE ((i.exist <> 0) OR (i.exist= 0))  "

            If Not (Len(.Grupo1) = 0 And Len(.Grupo2) = 0) Then
                sql = sql & "  AND (codGrupo" & .NumGrupo & " BETWEEN '" & _
                .Grupo1 & "' AND '" & .Grupo2 & "') "
            End If
            If Not (Len(.CodItem1) = 0 And Len(.CodItem2) = 0) Then
                sql = sql & "AND (i.CodInventario BETWEEN '" & .CodItem1 & "' AND '" & .CodItem2 & "') "
            End If

            If Not (Len(.Bienes)) = 0 Then
'                sql = sql & Mid$(.Bienes, 1, 6) & "t0" & Mid$(.Bienes, 19, 60)
               v = Split(.Bienes, "IVInventario.")
                For i = 0 To UBound(v)
                    If i = 0 Then
                        sql = sql & v(i)
                    Else
                        sql = sql & " t0." & v(i)
                    End If
                    
                Next i
            End If

            sql = sql & "  group by "
            sql = sql & "  isnull(T0.Codinventario, i.Codinventario) , "
            sql = sql & "  isnull(T0.Descripcion, i.Descripcion) , "
            sql = sql & "T0.TiempoPromVta, "
            sql = sql & "T0.TiempoReposicion, "
            sql = sql & "  isnull(T0.CodGrupo,i.CodGrupo" & .NumGrupo & ") , "
            sql = sql & "  isnull(T0.DescGrupo, i.DescGrupo" & .NumGrupo & ")  "

            VerificaExistenciaTabla k
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg

        sql = " select "
        sql = sql & "CodInventario,"
        sql = sql & "descripcion,"
        sql = sql & " isnull(TMP0.TCant,0) as Totalc ,  "
        sql = sql & " isnull(TMP0.TCantMax,0) as Totalcmax ,"
         sql = sql & " isnull(TMP0.prom,0) as TotalPromMen, "
         sql = sql & " isnull(TMP0.PromDiario,0) as TotalPromDia,"
         sql = sql & " isnull(TMP0.Existencia,0)  as TotalExist , "
         sql = sql & " isnull(TMP0.TiempoReposicion,0) AS TiempoRep, "
         sql = sql & " isnull(TMP0.Pedido,0) AS Pedido, "
         sql = sql & " isnull(TMP0.Compra,0) AS Compra, "
         sql = sql & " isnull(TMP0.Transito,0) AS Transito, "
            
         sql = sql & " Round(isnull(TMP0.PromDiario,0)  *  isnull(TMP0.TiempoReposicion,0) * 1.5*1.5,0) AS ExistenciaOptima "
         sql = sql & " Into Tmp1"
         sql = sql & " From tmp0 "

        VerificaExistenciaTabla 1
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg

        sql = " select distinct "
        sql = sql & " i.idinventario, t.CodInventario, "
        sql = sql & " t.descripcion,  isnull(TotalExist,0) as TotalExist , isnull(Totalcmax,0) as Totalcmax, isnull(Pedido,0) as Pedido, isnull(Compra,0) as Compra, isnull(transito,0) as Transito,"
        sql = sql & "  case when transito<0 then 0 else( ExistenciaOptima - TotalExist - transito ) end as saldo, "
        sql = sql & "  0 as BandPedido, "
        sql = sql & " pc.nombre, ISNULL(IP.Cantidad,0), ISNULL(CostoUnitario,0), ip.Fecha, ExistenciaOptima, Totalc, " & NumDias & ", TotalPromMen, TiempoReposicion  "
        sql = sql & " from tmp" & k + 1 & " t "
        sql = sql & " inner join ivinventario i on t.codinventario=i.codinventario "
        Select Case .Nivel
        Case 0
            sql = sql & " left join IVProveedorDetalle ip"
            sql = sql & " inner join pcprovcli pc on ip.IdProveedor=pc.idprovcli and ip.bandprincipal=1"
            sql = sql & " on i.idinventario=ip.idinventario"
        Case 1
            sql = sql & " left join VWIVProveedorDetalle ip"
            sql = sql & " inner join pcprovcli pc on ip.IdProveedor=pc.idprovcli"
            sql = sql & " on i.idinventario=ip.idinventario"
        End Select

        sql = sql & " WHERE 1=1 "
        
        If Len(.CodPC1) > 0 Then
            sql = sql & " and pc.codprovcli='" & .CodPC1 & "'"
        End If

        If .tipoItem1 Then
            sql = sql & " AND (TotalExist + transito  >= ( ExistenciaOptima)) "
            If .IncluirCero Then
                sql = sql & " or  (TotalExist+transito  <  ExistenciaOptima) "
                sql = sql & " AND not transito  <  0 "
            End If
        Else
            If .IncluirCero Then
                sql = sql & " AND (TotalExist+transito  <  ExistenciaOptima) "
                sql = sql & " AND not transito  <  0 "
            End If
        End If
        
        

        i = 0


       sql = sql & " order by "
        sql = sql & "t.descripcion "
    End With

    Set rs = gobjMain.EmpresaActual.OpenRecordset(sql)
    Set CargaConsolidadoBuffer4 = rs
    Set rs = Nothing
End Function


Public Function ConsCTDiarioNIIF() As Variant
    Dim sql As String, cond As String
    Dim rs As Recordset
    
    sql = "SELECT TransID, FechaTrans, CodAsiento, CodTrans, NumTrans, " & _
            "CodCuenta, NombreCuenta, Descripcion, nombre ,"
    Select Case gobjCond.numMoneda
    Case 1: sql = sql & "Debe1 AS Debe, Haber1 AS Haber, 1 AS Cotizacion, "
    Case 2: sql = sql & "Debe1/Cotizacion2 AS Debe, Haber1/Cotizacion2 AS Haber, Cotizacion2 AS Cotizacion, "
    Case 3: sql = sql & "Debe1/Cotizacion3 AS Debe, Haber1/Cotizacion3 AS Haber, Cotizacion3 AS Cotizacion, "
    Case 4: sql = sql & "Debe1/Cotizacion4 AS Debe, Haber1/Cotizacion4 AS Haber, Cotizacion4 AS Cotizacion, "
    End Select
    sql = sql & "CodCentro, Estado, BandNIIF FROM  "
    
    If Me.GNOpcion.ObtenerValor("PermitirDistribucionGastos") = "1" Then
        sql = sql & " vwConsCTDiarioxGasto "
    Else
        sql = sql & " vwConsCTDiario "
    End If
    
    'Condición de FechaTrans
    cond = " BANDNIIF=1 AND (FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB) & ")"
    
'    'Condición de CodAsiento
'    If coda1 > 0 And coda2 > 0 Then
'        If Len(cond)> 0 Then cond = cond & " AND "
'        cond = cond & "(CodAsiento BETWEEN " & coda1 & " AND " & coda2 & ")"
'    ElseIf coda1 > 0 Then
'        If Len(cond)> 0 Then cond = cond & " AND "
'        cond = cond & "(CodAsiento>=" & coda1 & ")"
'    ElseIf coda2 > 0 Then
'        If Len(cond)> 0 Then cond = cond & " AND "
'        cond = cond & "(CodAsiento<=" & coda2 & ")"
'    End If
    
    'Condición de CodTrans
    If Len(gobjCond.CodTrans) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodTrans='" & gobjCond.CodTrans & "'" & ")"
    End If
    
    'Condición de NumTrans
    If gobjCond.NumTrans1 > 0 And gobjCond.NumTrans2 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans BETWEEN " & gobjCond.NumTrans1 & " AND " & gobjCond.NumTrans2 & ")"
    ElseIf gobjCond.NumTrans1 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans>=" & gobjCond.NumTrans1 & ")"
    ElseIf gobjCond.NumTrans2 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans<=" & gobjCond.NumTrans2 & ")"
    End If
    
    'Condición de Estado
    If gobjCond.EstadoBool(ESTADO_NOAPROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_NOAPROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_APROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_APROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_DESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_DESPACHADO & ")"
    End If
    
    'AUC
    If gobjCond.EstadoBool(ESTADO_SEMDESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_SEMDESPACHADO & ")"
    End If
    
    
    If gobjCond.EstadoBool(ESTADO_ANULADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_ANULADO & ")"
    End If
    
    'Condición de Sucursal   '*********** jeaa 19-01-04  para filtrado de sucursales
    If Len(gobjCond.Sucursal) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        If Me.GNOpcion.ObtenerValor("PermitirDistribucionGastos") = "1" Then
            cond = cond & "(IdGasto=" & gobjCond.Sucursal & ")"
        Else
            cond = cond & "(IdLocal=" & gobjCond.Sucursal & ")"
        End If
    End If
    
    
    
    If Len(cond) > 0 Then sql = sql & " WHERE (" & cond & ")"
    
    sql = sql & " ORDER BY FechaTrans, CodAsiento, "
    
    
    '*** MAKOTO 27/nov/00 Modificado para recuperar primero los Debes y luego Haber
    If Me.GNOpcion.ObtenerValor("OrdenarAsientoPorDebe") = "0" Then
        sql = sql & "Orden"
    Else
#If DAOLIB Then
        sql = sql & "Iif(Haber1>0, 1, 0), CodCuenta, Orden"
#Else
        sql = sql & "(CASE WHEN Haber1>0 THEN 1 ELSE 0 END), CodCuenta, Orden"
#End If
    End If
    
    Set rs = Me.OpenRecordset(sql)
    Set ConsCTDiarioNIIF = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Asientos NIIF " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "CT"
End Function


'Para Libro Mayor
Public Function ConsCTKardexNIIF() As Variant
    Dim sql As String, cond As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsCTLibroMayor")
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    qdef.Parameters("CodCuenta1") = IIf(Len(gobjCond.CodCuenta1) = 0, "0", gobjCond.CodCuenta1)
    qdef.Parameters("CodCuenta2") = IIf(Len(gobjCond.CodCuenta2) = 0, "99999999999999999999", gobjCond.CodCuenta2)
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    'jeaa 07/04/2005
    qdef.Parameters("CodTrans") = gobjCond.CodTrans
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient

    If Me.GNOpcion.ObtenerValor("PermitirDistribucionGastos") = "1" Then
        If Len(gobjCond.Sucursal) > 0 Then
            sql = "spConsCTLibroMayorxGastoNIIF "
        Else
            sql = "spConsCTLibroMayorNIIF "
        End If
    Else
        sql = "spConsCTLibroMayorNIIF "
    End If
    sql = sql & gobjCond.numMoneda & ",'" & _
                gobjCond.CodCuenta1 & "','" & _
                gobjCond.CodCuenta2 & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB) & ",'" & gobjCond.Sucursal & "','" & _
                gobjCond.CodTrans & "'" ' jeaa 17-01-04 para filtrado por sucursal y por trans

    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    Set ConsCTKardexNIIF = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Libro Mayor NIIF" & gobjCond.fecha1 & "-" & gobjCond.fecha2, "CT"
End Function


Public Function ConsCTBalanceCompNIIF() As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim cta1 As String, cta2 As String
    
    'Si no hay condición, coge todas las cuentas
    cta1 = "0"
    cta2 = String(20, "9")
    If Len(gobjCond.CodCuenta1) > 0 Then cta1 = gobjCond.CodCuenta1
    If Len(gobjCond.CodCuenta2) > 0 Then cta2 = gobjCond.CodCuenta2

#If DAOLIB Then
    Dim qdef As QueryDef
    
    Set qdef = mdbEmpresa.QueryDefs("spConsCTBalanceComp")
    With qdef
        .Parameters("FechaDesde") = gobjCond.fecha1
        .Parameters("FechaHasta") = gobjCond.fecha2
        .Parameters("CodCuenta1") = cta1
        .Parameters("CodCuenta2") = cta2
        .Parameters("NumMoneda") = gobjCond.numMoneda
        .Parameters("CodSucursal") = gobjCond.Sucursal 'jeaa
        Set rs = .OpenRecordset(dbOpenSnapshot, dbReadOnly)
    End With
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
'    '**************************
'    gobjCond.Sucursal = "'S1'"
'    '**************************
    If Me.GNOpcion.ObtenerValor("PermitirDistribucionGastos") = "1" Then
        If Len(gobjCond.Sucursal) > 0 Then
            sql = "spConsCTBalanceCompxGastoNIIF "
        Else
            sql = "spConsCTBalanceCompNIIF "
        End If
    Else
        sql = "spConsCTBalanceCompNIIF "
    End If
    sql = sql & gobjCond.numMoneda & ",'" & cta1 & "','" & cta2 & "'," & _
            FechaYMD(gobjCond.fecha1, TipoDB) & "," & FechaYMD(gobjCond.fecha2, TipoDB) & ",'" & gobjCond.Sucursal & "'"    ' jeaa 17-01-04 para filtrado por sucursal
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    Set ConsCTBalanceCompNIIF = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Balance Comprobacion NIIF" & gobjCond.fecha1 & "-" & gobjCond.fecha2, "CT"
End Function


Public Function ConsCTBalanceNIIF(bandBalance As Boolean) As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim v As Variant, v2() As Variant, i As Long, j As Long
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsCTBalance")
    qdef.Parameters("FechaDesde") = IIf(bandBalance, Me.GNOpcion.FechaInicio, gobjCond.fecha1)
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodCuenta1") = "0"
    qdef.Parameters("CodCuenta2") = String(20, "9")
    qdef.Parameters("CodSucursal") = gobjCond.Sucursal ' ********* jeaa
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
    If Not rs.EOF Then
        rs.MoveLast
        rs.MoveFirst
        v = rs.GetRows(rs.RecordCount)
    End If
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
'    '**************************
'    gobjCond.Sucursal = "'S2'"
'    '**************************
    If Me.GNOpcion.ObtenerValor("PermitirDistribucionGastos") = "1" Then
        If Not gobjCond.IncluirCero Or Len(gobjCond.Sucursal) > 0 Then
            sql = "spConsCTBalancexGastoNIIF "
        Else
            sql = "spConsCTBalanceNIIF "
        End If
    Else
        sql = "spConsCTBalanceNIIF "
    End If
    sql = sql & gobjCond.numMoneda & ",'0','" & _
                        String(20, "9") & "'," & _
                        FechaYMD(IIf(bandBalance, Me.GNOpcion.FechaInicio, gobjCond.fecha1), TipoDB) & "," & _
                        FechaYMD(gobjCond.fecha2, TipoDB) & ",'" & gobjCond.Sucursal & "'"    ' jeaa 17-01-04 para filtrado por sucursal
                        
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    If Not rs.EOF Then v = rs.GetRows()
#End If
    
    'Mayoriza los valores
    Mayoriza v
    
    'Pasa los valores de v a v2 cambiando formato
    ' y filtrando registros por TipoCuenta, Nivel y Valor
    j = 0
    For i = 0 To UBound(v, 2)
        If Not IsNull(v(BAL_VALOR, i)) Then
            'Solo los que tengan valor diferente de 0
            If v(BAL_VALOR, i) <> 0 Then
                'Si es para balance, solo tipo 1,2 y 3, sino solo tipo 4 y 5
                If (bandBalance And (v(BAL_TIPO, i) <= 3)) Or _
                   ((Not bandBalance) And (v(BAL_TIPO, i) >= 4)) Then
                   
                   'Solo hasta el nivel indicado
                   If v(BAL_NIVEL, i) <= gobjCond.Nivel Then
                        ReDim Preserve v2(6, j)
                        v2(0, j) = v(BAL_TIPO, i)           'TipoCuenta
                        v2(1, j) = v(BAL_CODCUENTA, i)      'CodCuenta
                        v2(2, j) = v(BAL_NOMBRECUENTA, i)   'Cuenta
                        v2(3, j) = v(BAL_CODSUCURSAL, i)          'CODSUCURSAL   JEAA 16/01/04
                        v2(4, j) = v(BAL_VALOR, i)          'Valor
                        If Not bandBalance Then v2(4, j) = v2(4, j) * -1    'Invierta el signo cuando es EstadoPG
                        v2(5, j) = v(BAL_NIVEL, i)          'Nivel
                        j = j + 1
                    End If
                End If
            End If
        End If
    Next i
        
    If j Then ConsCTBalanceNIIF = v2
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Balance NIIF ", "CT"
End Function


Public Function RecuperaReportesPorModulo(num As Integer, Modulo As String) As Recordset
    Dim nuevo As Empresa, sql As String
    Dim rs As Recordset
    
    'Debe estar hecho Login para recuperar una empresa
    If gobjMain.UsuarioActual Is Nothing Then
        Err.Raise ERR_NOUsuario, "SiiMain_RecuperaEmpresa", MSGERR_NOUsuario
    End If
    
    'Verifica si el Usuario actual tiene derecho o no
    sql = "SELECT 0 as selec, Titulo, Modulo, CodReporte, Orden  "
    sql = sql & " FROM GnReporte "
    sql = sql & " WHERE NumMenu=" & num
    If Len(Modulo) > 0 Then
        sql = sql & " and Modulo = '" & Modulo & "'"
    End If
    sql = sql & " Order by Orden "
   
    Set rs = Me.OpenRecordset(sql)
    Set RecuperaReportesPorModulo = rs
    Set rs = Nothing
    
End Function

Public Function CreaCTCuentaSC() As ctCuentaSC
    Dim obj As ctCuentaSC
   Set obj = New ctCuentaSC
    Set obj.Empresa = Me
    Set CreaCTCuentaSC = obj
    Set obj = Nothing
End Function

Public Function RecuperaCTCuentaSC(key As Variant) As ctCuentaSC
    Dim obj As ctCuentaSC
    Set obj = New ctCuentaSC
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaCTCuentaSC = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function


Public Function ListaCTCuentaSC(IncluyeTotal As Boolean, TipoCuenta As Integer, bandResumido As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, cond As String
    Dim rs As Recordset
    
    If bandResumido Then
        sql = "SELECT CodCuenta, NombreCuenta FROM CTCuentaSC "
    Else
        sql = "SELECT CodCuenta, NombreCuenta, Nivel, CodCuentaSuma, TipoCuenta, BandTotal FROM vwCTCuentaSC "
    End If
    
    If TipoCuenta <> 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "TipoCuenta=" & TipoCuenta & " "
    End If
    If Not IncluyeTotal Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "BandTotal=" & CadenaBool(False, TipoDB)
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    
    sql = sql & " ORDER BY CodCuenta"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaCTCuentaSC = rs
    Else
        ListaCTCuentaSC = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaCTCuentaSC2( _
                    ByVal IncluyeTotal As Boolean, _
                    ByVal TipoCuenta As E_SIITIPOCUENTA, _
                    ByVal bandResumido As Boolean, _
                    ByVal BandRS As Boolean) As Variant
    Dim sql As String, cond As String, s As String, i As Long
    Dim rs As Recordset
    
    If bandResumido Then
        sql = "SELECT CodCuenta, NombreCuenta FROM CTCuentaSC "
    Else
        sql = "SELECT CodCuenta, NombreCuenta, Nivel, CodCuentaSuma, TipoCuenta, BandTotal FROM vwCTCuentaSC "
    End If
    
    If TipoCuenta <> sictTODOS Then
        If Len(cond) > 0 Then cond = cond & " AND "
        
        For i = 1 To 5
            If (TipoCuenta And 2 ^ (i - 1)) <> 0 Then
                If Len(s) > 0 Then s = s & " OR "
                s = s & "TipoCuenta=" & i
            End If
        Next i
            
        cond = cond & "(" & s & ")"
    End If
    
    If Not IncluyeTotal Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(BandTotal=" & CadenaBool(False, TipoDB) & ")"
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    
    sql = sql & " ORDER BY CodCuenta"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaCTCuentaSC2 = rs
    Else
        ListaCTCuentaSC2 = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


'Devuelve Array de Variant para directamente mandar a FlexCombo
Public Function ListaCTCuentaSCParaCombo(IncluyeTotal As Boolean, TipoCuenta As Integer) As Variant
    Dim sql As String, cond As String
    Dim rs As Recordset
    
    sql = "SELECT CodCuenta, CodCuenta+'  '+NombreCuenta AS Cuenta FROM CTCuentaSC "
    If TipoCuenta <> 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "TipoCuenta=" & TipoCuenta & " "
    End If
    If Not IncluyeTotal Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "BandTotal=" & CadenaBool(False, TipoDB)
    End If
    sql = sql & " where bandvalida=1"
    If Len(cond) > 0 Then sql = sql & " and " & cond
    'ANULADO JEAA 01/12/2005 filtra solo las validas  If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    
    sql = sql & " ORDER BY CodCuenta"
    Set rs = Me.OpenRecordset(sql)
    ListaCTCuentaSCParaCombo = MiGetRows(rs)
    rs.Close
    Set rs = Nothing
End Function

Public Function ConsCTBalanceSC(bandBalance As Boolean) As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim v As Variant, v2() As Variant, i As Long, j As Long
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsCTBalance")
    qdef.Parameters("FechaDesde") = IIf(bandBalance, Me.GNOpcion.FechaInicio, gobjCond.fecha1)
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodCuenta1") = "0"
    qdef.Parameters("CodCuenta2") = String(20, "9")
    qdef.Parameters("CodSucursal") = gobjCond.Sucursal ' ********* jeaa
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
    If Not rs.EOF Then
        rs.MoveLast
        rs.MoveFirst
        v = rs.GetRows(rs.RecordCount)
    End If
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
'    '**************************
'    gobjCond.Sucursal = "'S2'"
'    '**************************
'    If Me.GNOpcion.ObtenerValor("PermitirDistribucionGastos") = "1" Then
'        If Not gobjCond.IncluirCero Or Len(gobjCond.Sucursal) > 0 Then
'            sql = "spConsCTBalancexGastoNIIF "
'        Else
'            sql = "spConsCTBalanceNIIF "
'        End If
'    Else
        sql = "spConsCTBalanceSC "
'    End If
    sql = sql & gobjCond.numMoneda & ",'0','" & _
                        String(20, "9") & "'," & _
                        FechaYMD(IIf(bandBalance, Me.GNOpcion.FechaInicio, gobjCond.fecha1), TipoDB) & "," & _
                        FechaYMD(gobjCond.fecha2, TipoDB) & ",'" & gobjCond.Sucursal & "'"    ' jeaa 17-01-04 para filtrado por sucursal
                        
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    If Not rs.EOF Then v = rs.GetRows()
#End If
    
    'Mayoriza los valores
    Mayoriza v
    
    'Pasa los valores de v a v2 cambiando formato
    ' y filtrando registros por TipoCuenta, Nivel y Valor
    j = 0
    For i = 0 To UBound(v, 2)
        If Not IsNull(v(BAL_VALOR, i)) Then
            'Solo los que tengan valor diferente de 0
            If v(BAL_VALOR, i) <> 0 Then
                'Si es para balance, solo tipo 1,2 y 3, sino solo tipo 4 y 5
                If (bandBalance And (v(BAL_TIPO, i) <= 3)) Or _
                   ((Not bandBalance) And (v(BAL_TIPO, i) >= 4)) Then
                   
                   'Solo hasta el nivel indicado
                   If v(BAL_NIVEL, i) <= gobjCond.Nivel Then
                        ReDim Preserve v2(6, j)
                        v2(0, j) = v(BAL_TIPO, i)           'TipoCuenta
                        v2(1, j) = v(BAL_CODCUENTA, i)      'CodCuenta
                        v2(2, j) = v(BAL_NOMBRECUENTA, i)   'Cuenta
                        v2(3, j) = v(BAL_CODSUCURSAL, i)          'CODSUCURSAL   JEAA 16/01/04
                        v2(4, j) = v(BAL_VALOR, i)          'Valor
                        If Not bandBalance Then v2(4, j) = v2(4, j) * -1    'Invierta el signo cuando es EstadoPG
                        v2(5, j) = v(BAL_NIVEL, i)          'Nivel
                        j = j + 1
                    End If
                End If
            End If
        End If
    Next i
        
    If j Then ConsCTBalanceSC = v2
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Balance sc ", "CT"
End Function


Public Function ListaCTCuentaParaComboSC(IncluyeTotal As Boolean, TipoCuenta As Integer) As Variant
    Dim sql As String, cond As String
    Dim rs As Recordset
    
    sql = "SELECT CodCuenta, CodCuenta+'  '+NombreCuenta AS Cuenta FROM CTCuentaSC "
    If TipoCuenta <> 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "TipoCuenta=" & TipoCuenta & " "
    End If
    If Not IncluyeTotal Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "BandTotal=" & CadenaBool(False, TipoDB)
    End If
    sql = sql & " where bandvalida=1"
    If Len(cond) > 0 Then sql = sql & " and " & cond
    'ANULADO JEAA 01/12/2005 filtra solo las validas  If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    
    sql = sql & " ORDER BY CodCuenta"
    Set rs = Me.OpenRecordset(sql)
    ListaCTCuentaParaComboSC = MiGetRows(rs)
    rs.Close
    Set rs = Nothing
End Function


Public Function ListaCTCuentaSCParaFlexGrid(TipoCuenta As Integer) As String
    Dim sql As String, cad As String, rs As Recordset
    
    sql = "SELECT Codigo, Nombre FROM vwCTCuentaSCParaCombo WHERE bandvalida=1 "
    If TipoCuenta > 0 Then sql = sql & " and TipoCuenta=" & TipoCuenta
    'jeaa 01/12/2005
'    sql = "SELECT Codigo, Nombre FROM vwCTCuentaParaCombo"
'    If TipoCuenta > 0 Then sql = sql & " WHERE TipoCuenta=" & TipoCuenta
    sql = sql & " ORDER BY Codigo"
    Set rs = Me.OpenRecordset(sql)

    'Pero por ahora uso lo siguiente para controlar cuentas de total y de movimiento
#If DAOLIB Then
    cad = "|" & GetStringDAO(rs, 21 + (20 + 80 + 2))        'Código+'*'=21, Space+NombreCuenta+'[]'=20+80+2
#Else
    If Not rs.EOF Then cad = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    
    rs.Close
    Set rs = Nothing
    
    ListaCTCuentaSCParaFlexGrid = cad
End Function

Public Function OpenRecordsetConfigReporteParaEdit(ByVal sql As String) As Recordset
#If DAOLIB Then
    Set OpenRecordsetParaEdit = mdbEmpresa.OpenRecordset(sql)
#Else
    Dim rs As ADODB.Recordset
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseServer
    rs.Open sql, mcnEmpresaConfigRep, adOpenKeyset, adLockPessimistic
    Set OpenRecordsetConfigReporteParaEdit = rs
    Set rs = Nothing
#End If

End Function


'AUC para contabilizar  por pcgrupo
Public Function IdCuentaPcGrupo(ByVal idElemento As Long, ByVal CodGrupo As String, ByVal BandPre As Boolean) As Long
Dim sql As String
Dim rs As Recordset
Dim idSec As Byte
Dim PcGrupo As PcGrupo

On Error GoTo CapturaError
    If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ConAsiento")) > 0 Then
        idSec = gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ConAsiento") + 1
    End If
    
    If Not BandPre Then
        sql = "Select idCuenta from CuentaPcGrupo as cp "
    Else
        sql = "Select idCuenta from CuentaPcGrupoPre as cp "
    End If
    
    sql = sql & " INNER JOIN PcGrupo" & idSec & " AS  PCG ON PCG.IdGrupo" & idSec & " = cp.IDpcGrupo "
    sql = sql & "where idElemento = " & idElemento
    sql = sql & " AND PCG.CODGRUPO" & idSec & " = '" & CodGrupo & "'"
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        IdCuentaPcGrupo = rs!IdCuenta
    End If
    Set rs = Nothing
    Exit Function
CapturaError:
    Set rs = Nothing
    MsgBox Err.Description
    Exit Function
End Function



Public Function RecuperaClienteTiket(ByVal tiket As String) As String
    Dim sql As String, s As String
    Dim rs As Recordset, rs1 As Recordset
        
    sql = " SELECT codprovcli  "
    sql = sql & " from IVInventarioDetalleISO iviso"
    sql = sql & " inner join pcprovcli p"
    sql = sql & " on iviso.idcliente=p.idprovcli"
    sql = sql & " Where iviso.id=" & tiket
        
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount = 0 Then
        RecuperaClienteTiket = "0"
    Else
       RecuperaClienteTiket = rs.Fields("codprovcli")
    End If
    rs.Close
    Set rs = Nothing
End Function

Public Function CargarPCProvCliItemsxReferencia(ByVal IdProvcli As Long, ByVal BandProntoPago As Boolean, ByVal Ref As String) As Recordset
Dim rs As Recordset
Dim sql As String
On Error GoTo CapturaError
    sql = "Select pcInv.idInventario,iv.codInventario,pcinv.cantidad,pcinv.pu,pcinv.frecuencia, fechaini, fechafin from PCProvCliInv pcInv "
    sql = sql & " Inner join pcprovcli pc ON pc.idProvCli = pcInv.idProvCli"
    sql = sql & " Inner join Ivinventario Iv ON iv.idinventario = pcInv.idinventario"
    sql = sql & " Where pc.idprovcli = " & IdProvcli
    sql = sql & " AND pcInv.referencia = '" & Ref & "'"
    
    Set rs = Me.OpenRecordset(sql)
    Set CargarPCProvCliItemsxReferencia = rs
Exit Function
CapturaError:
    MsgBox Err.Description
    Exit Function
End Function

Public Function ListaFCVendedorNxZona(BandSoloValida As Boolean, BandRS As Boolean, _
                                                BandVendedor As Boolean, BandCobrador As Boolean, TipoTabla As String) As Variant
'BandRS : True  --> Devuelve Recordset de ADO
'      False --> Devuelve en Array de Variant

    Dim sql As String, rs As Recordset
    
    sql = "SELECT CodVendedor,Nombre FROM FCVendedor "
    sql = sql & " WHERE 1=1 "
    If BandVendedor Then
        sql = sql & " AND BandVendedor=" & CadenaBool(True, TipoDB)
    Else
        sql = sql & " AND BandCobrador=" & CadenaBool(True, TipoDB)
    End If
    If BandSoloValida Then sql = sql & " and BandValida=" & CadenaBool(True, TipoDB)
    If Len(TipoTabla) > 0 Then
        sql = sql & " and TipoTabla= " & TipoTabla
    End If
    sql = sql & " ORDER BY CodVendedor"

    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaFCVendedorNxZona = rs
    Else
        ListaFCVendedorNxZona = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaGnProyectoxTipoTablaxProvxCant(BandSoloValida As Boolean, BandRS As Boolean, TipoTabla As String, CodProv As String, CodCan As String, BandFin As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodProyecto,  gnp.Descripcion FROM GnProyecto gnp "
    sql = sql & " inner join fcvendedor fc on gnp.idvendedor=fc.idvendedor "
    sql = sql & " inner join pcProvincia pcp on gnp.idprovincia=pcp.idprovincia "
    sql = sql & " inner join pccanton pcc on gnp.idcanton=pcc.idcanton "
    sql = sql & " where 1=1 "
    If BandFin Then
        sql = sql & " and fechafinal is NULL"
    End If
    If Len(TipoTabla) > 0 Then
        sql = sql & " and  TipoTabla=" & TipoTabla
    End If
    If Len(CodProv) > 0 Then
        sql = sql & " and  codProvincia='" & CodProv & "'"
    End If
    If Len(CodCan) > 0 Then
        sql = sql & " and  codCanton='" & CodCan & "'"
    End If
    
    sql = sql & " ORDER BY CodProyecto"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaGnProyectoxTipoTablaxProvxCant = rs
    Else
        ListaGnProyectoxTipoTablaxProvxCant = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ConsGnVisitaProyectosxZona() As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim TipoTabla As String, CodVendedor As String
    Dim fcv As FCVendedor
    
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient

    gobjCond.fecha1 = Me.GNOpcion.FechaLimiteDesde

'    If Len(gobjCond.CodPC1) > 0 Then
'        sql = "spConsGNDetalleVisitasxProy " & _
'                    FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
'                    FechaYMD(gobjCond.fecha2, TipoDB) & ",'" & _
'                    gobjCond.CodBanco1 & "','" & _
'                    gobjCond.CodPC1 & "'"
'
'    Else

        CodVendedor = Me.RecuperaVendedorxUsuario(gobjMain.UsuarioActual.codUsuario)
        TipoTabla = Me.RecuperaTipoTablaVendedor(CodVendedor)
        gobjCond.CodBanco1 = CodVendedor
        Set fcv = Me.RecuperaFCVendedor(CodVendedor)
        If Not fcv Is Nothing Then
'            If fcv.BandCobrador And fcv.BandVendedor Then
'
'            Else
'                TipoTabla = ""
'            End If
'        Else
            TipoTabla = fcv.TipoTabla
        End If
        CodVendedor = ""
        sql = "spConsGNDetalleVisitasxProyecto " & _
                    FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                    FechaYMD(gobjCond.fecha2, TipoDB) & ",'" & _
                    CodVendedor & "','" & _
                    gobjCond.CodPC1 & "','" & _
                    TipoTabla & "'"
'    End If
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    
    
    
    Set ConsGnVisitaProyectosxZona = rs
    Set rs = Nothing
    Set fcv = Nothing

    Me.GrabaGNLogAccion "CONSULTA", "Consulta VisitaProyectos x Zona " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "IV"
End Function


Public Function ListaPCProvCliEmpValida(BandValida As Boolean, BandProveedor As Boolean, _
                               BandCliente As Boolean, _
                               bandEmpleado As Boolean, _
                               BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
         '------------------- cambiado AUC  02/09/20005
             sql = "SELECT pc.CodProvCli, pc.Nombre, g1.CodGrupo1, g2.CodGrupo2, g3.CodGrupo3,g4.codgrupo4,pc.observacion "
             sql = sql & " FROM PCGrupo4 g4 RIGHT JOIN( PCGrupo3 g3 RIGHT JOIN (PCGrupo2 g2 RIGHT JOIN (PCGrupo1 g1 RIGHT JOIN PCProvCli pc inner join personal pe on pc.idprovcli= pe.idempleado " & _
                          " ON g1.IdGrupo1 = pc.IdGrupo1) " & _
                    " ON g2.IdGrupo2 = pc.IdGrupo2) " & _
                " ON g3.IdGrupo3 = pc.IdGrupo3) " & _
               " ON g4.idgrupo4 = pc.idgrupo4 "
          '------------------
    If BandValida Then
        sql = sql & " WHERE pe.bandactivo=" & CadenaBool(True, TipoDB)
'    Else
'        sql = sql & " WHERE pe.bandactivo=" & CadenaBool(False, TipoDB)
    End If
    If Not (BandProveedor And BandCliente And bandEmpleado) Then
        If BandProveedor Then
            sql = sql & " WHERE BandProveedor=" & CadenaBool(True, TipoDB)
        ElseIf bandEmpleado Then
            sql = sql & " AND BandEmpleado=" & CadenaBool(True, TipoDB)
        Else
            sql = sql & " AND BandCliente=" & CadenaBool(True, TipoDB)
        End If
        sql = sql & "and Estado <> 2 "
    End If
    sql = sql & " ORDER BY Nombre"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCProvCliEmpValida = rs
    Else
        ListaPCProvCliEmpValida = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function



Public Function ConsANRetencionCompras2008ParaXMLSinRetencion(ByVal transid As Long) As Recordset
    Dim sql As String, rs As Recordset
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    
    With gobjCond
        sql = " Select "
        sql = sql & " 0 as bandiva ,codtiporetencion ,codtiporetencion, "
        sql = sql & "  0 as porcent, codtrans, numtrans,"
        sql = sql & " p.ruc,  "
        sql = sql & " '' as codtrans, '' as  numtrans,  '' as fechatrans, "
        sql = sql & " '' as NumSerieEstablecimiento, '' as NumSeriePunto, '' as NumTrans, "
        sql = sql & " '' as NumAutorizacion,  sum(i.costorealtotal) as base, 0 as haber "
        sql = sql & " from gncomprobante g inner join anexos a on g.transid=a.transid"
        sql = sql & " inner join ivkardex i "
        sql = sql & " inner join ivinventario ivi on i.idinventario=ivi.idinventario"
        sql = sql & " on g.transid=i.transid"
        sql = sql & " inner join pcprovcli p on g.idproveedorref = p.idprovcli "
        sql = sql & " Where g.Estado <> 3  And g.TransID = " & transid
        'sql = sql & " AND BANDCOMPRASINRETENCION=1 "
        sql = sql & " group by codtiporetencion, codtrans, numtrans, p.ruc, g.fechatrans "
        rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    End With
    UltimoRecordset rs
    Set ConsANRetencionCompras2008ParaXMLSinRetencion = rs
    Set rs = Nothing

End Function

'AUC lira
Public Function ConsTSPorCobrarPagarVendeProntoPago1( _
                    ByVal PorCobrar As Boolean, _
                    ByVal CodProvcli As String, _
                    ByVal FechaVenci As Date, _
                    ByVal CodForma As String, _
                    ByVal CodMoneda As String, _
                    ByVal CodGrupo1 As String, _
                    ByVal CodVendedor As String, _
                    ByVal CodSucursal As String, _
                    ByVal Codelemento) As Variant
   Dim aux_codpc As String, aux_f1 As Date, aux_f2 As Date
    Dim aux_PorCobrar As Boolean, aux_Cliente As Boolean, aux_Proveedor As Boolean
    Dim aux_CodForma As String, aux_CodMoneda As String, aux_codgrupo As String
    Dim aux_incluircero As Boolean, aux_codVendedor As String, aux_codSucursal As String
    Dim aux_codElemento As String
    Dim aux_Empleado As Boolean
    With gobjMain.objCondicion
        'Conservar valores actuales para que no afecte a otras consultas
        aux_codpc = .CodPC1
        aux_f1 = .fecha1
        aux_f2 = .fecha2
        aux_PorCobrar = .PorCobrar
        aux_Cliente = .Cliente
        aux_Proveedor = .Proveedor
        aux_Empleado = .Empleado
        aux_CodForma = .CodForma
        aux_CodMoneda = .CodMoneda
        aux_codgrupo = .CodGrupo
        aux_incluircero = .IncluirCero
        aux_codVendedor = .Usuario1
        aux_codSucursal = .Sucursal
        aux_codElemento = .Codelemento
        .PorCobrar = PorCobrar
        .Cliente = True
        .Proveedor = True
        '.Empleado = True
        .CodPC1 = CodProvcli
        .fecha1 = Me.GNOpcion.FechaInicio
        .fecha2 = FechaVenci
        .CodForma = CodForma
        .CodMoneda = CodMoneda
        .CodGrupo = CodGrupo1
        .IncluirCero = False
        .Usuario1 = CodVendedor
        .Sucursal = CodSucursal
        .Codelemento = Codelemento
       .NumDias2 = IIf(Len(Me.GNOpcion.ObtenerValor("NumDecimales")) > 0, Me.GNOpcion.ObtenerValor("NumDecimales"), 2)
        Set ConsTSPorCobrarPagarVendeProntoPago1 = ConsTSPorCobrarPagarVendedorProntoPago()
        'Recuperar valores reservados
        .CodPC1 = aux_codpc
        .fecha1 = aux_f1
        .fecha2 = aux_f2
        .PorCobrar = aux_PorCobrar
        .Cliente = aux_Cliente
        .Proveedor = aux_Proveedor
        .Empleado = aux_Empleado
        .CodForma = aux_CodForma
        .CodMoneda = aux_CodMoneda
        .CodGrupo = aux_codgrupo
        .IncluirCero = aux_incluircero
        .Usuario1 = aux_codVendedor
        .Sucursal = aux_codSucursal
         .Codelemento = aux_codElemento
    End With
End Function


Public Function CargaConsolidadoBufferM() As Variant
    'jeaa 07-07-04
    ' PARA SIETE EMPRESAS COMO MAXIMO
    Dim sql As String, cond As String, CadenaPrecio As String, Trans As String
    Dim cadempresa As String, cadBodega As String, totalcero As Boolean, cond1 As String
    Dim v As Variant, max As Integer, TotalC As String, TotalP As String, i As Integer, rs As Recordset, TotalCMAx As String
    Dim CodInv As String, codBod As String, Orden As String, cadTrans As String
    Dim W As Variant, j As Integer, Grupo As String
    Dim vBod As Variant, vNomEmp As Variant, vTrans As Variant
    Dim Cadtitulo As String, k As Integer
    Dim condTrans As String, vaux As Variant
    Dim numReg As Long, numMoneda As String
    Dim cadETrans As Variant, cadEBodega As Variant, basePrincipal As String
    Dim TotalE As String, TotalProm As String, difDias As Integer, Intervalo As Double
    Dim TotalCUC As String, TotalUtil As String, TotalPUtil As String, Fijo As Integer
    Dim NumMeses As Long
    With gobjCond
        NumMeses = DateDiff("m", .fecha1, .fecha2)
        difDias = DateDiff("d", .fecha1, .fecha2)
        NumMeses = Round(difDias / 30, 0)
        If NumMeses = 0 Then NumMeses = 1
       numMoneda = Trim(IIf(.numMoneda > 0, Str(.numMoneda + 1), ""))
        v = Split(.Sucursal, ";")
        vTrans = Split(.CodTrans, ";")
        For i = 0 To UBound(v)
            vNomEmp = Split(v(i), ",")
            Cadtitulo = Cadtitulo & vNomEmp(1) & " - "
        Next i
        'para quitar el ultimo "-"
        Cadtitulo = Mid$(Cadtitulo, 1, Len(Cadtitulo) - 3)
        cond = " "
        TotalC = ", ( "
        TotalCMAx = ", ( "
        TotalP = ", ( "
        TotalProm = ", ( "
        TotalE = ", ( "
        TotalCUC = ", ( "
        TotalUtil = ", ( "
        TotalPUtil = ", ( "
        max = UBound(v, 1)
        ReDim cadETrans(max, 2)
        ReDim cadEBodega(max, 2)
        cadETrans = llenaCadxEmpresa(vTrans, UBound(v))
        W = Split(v(0), ",")
        basePrincipal = W(1)
        difDias = DateDiff("d", .fecha1, .fecha2)
'        max = 0
        For k = 0 To max
            sql = "SELECT   "
            sql = sql & "  idinventario, CodInventario, Descripcion, DESCRIPCION2, CODUNIDAD, " & NumMeses & "  as TiempoPromVta, TiempoReposicion, "
            sql = sql & " CodGrupo" & .NumGrupo & " as CodGrupo,"
            sql = sql & "  DescGrupo" & .NumGrupo & "  as DescGrupo,"
            sql = sql & " isnull(sum(Cant),0) * -1  AS TCant,  CODBODEGA, "

            sql = sql & "  0 AS CantMax "
            sql = sql & "  Into " & basePrincipal & ".dbo.T" & k
            W = Split(v(k), ",")
            sql = sql & " from "
            sql = sql & W(1) & ".dbo.vwVentasPorBodega "
            cond = " WHERE (FechaTrans BETWEEN " & _
                         FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & _
                        " AND " & FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            cond = cond & " AND  AnexoCodTipoComp in (" & PreparaCadena(.CodBanco2) & ") "
            cond = cond & " AND  AnexoCodTipoTrans in (" & PreparaCadena(.CodBanco1) & ") "
            If Not (Len(.Grupo1) = 0 And Len(.Grupo2) = 0) Then
                cond = cond & " AND (codGrupo" & .NumGrupo & " BETWEEN '" & _
                .Grupo1 & "' AND '" & .Grupo2 & "') "
            End If
            If Not (Len(.CodItem1) = 0 And Len(.CodItem2) = 0) Then
                cond = cond & " AND (CodInventario BETWEEN '" & .CodItem1 & "' AND '" & .CodItem2 & "') "
            End If
            
            If Not (Len(.Bienes)) = 0 Then
                 cond = cond & Replace(.Bienes, "IVInventario.", "vwVentasPorBodega.", 1)       'Aquí se ha grabado SQL de ítems
             End If
            
            
            If Len(.CodBodega1) > 0 Then
                cond = cond & " AND (CodBodega = '" & .CodBodega1 & "') "
            End If
            
            Grupo = " group by "
            Grupo = Grupo & "  idinventario, CodInventario, Descripcion,   DESCRIPCION2, CODUNIDAD, CODBODEGA, "
            Orden = " ORDER BY CodInventario"
            Grupo = Grupo & " CodGrupo" & .NumGrupo & " , DescGrupo" & .NumGrupo
            Grupo = Grupo & " , TiempoPromVta , TiempoReposicion"
            sql = sql & cond & cond1 & Grupo & Orden
            
            VerificaExistenciaTablaTemporal k
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
    
            sql = "  SELECT     idinventario,"
            sql = sql & "  isnull(max(Abs(cant)), 0) As CantMax, CODBODEGA"
            sql = sql & "  Into " & basePrincipal & ".dbo.T" & k + 50
            sql = sql & "  from "
            sql = sql & W(1) & ".dbo.vwVentasPorBodega"
            sql = sql & " WHERE (FechaTrans BETWEEN " & _
                         FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & _
                        " AND " & FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            
            sql = sql & " AND  AnexoCodTipoComp in ('18') "
            sql = sql & " AND  AnexoCodTipoTrans in (" & PreparaCadena(.CodBanco1) & ") "
            
            If Not (Len(.Grupo1) = 0 And Len(.Grupo2) = 0) Then
                sql = sql & " AND (codGrupo" & .NumGrupo & " BETWEEN '" & _
                .Grupo1 & "' AND '" & .Grupo2 & "') "
            End If
            If Not (Len(.CodItem1) = 0 And Len(.CodItem2) = 0) Then
                sql = sql & " AND (CodInventario BETWEEN '" & .CodItem1 & "' AND '" & .CodItem2 & "') "
            End If
        
            If Len(.CodBodega1) > 0 Then
                sql = sql & " AND (CodBodega = '" & .CodBodega1 & "') "
            End If
        
            If Not (Len(.Bienes)) = 0 Then
                 sql = sql & Replace(.Bienes, "IVInventario.", "vwVentasPorBodega.", 1)
             End If
        
        
                sql = sql & " group by   idinventario, CODBODEGA"
            
            VerificaExistenciaTablaTemporal k + 50
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
                            
            
            
            
            sql = "select "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".Codinventario, i.Codinventario) As Codinventario, "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".Descripcion, i.Descripcion) as Descripcion, "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".Descripcion2, i.Descripcion2) as Descripcion2, "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".CodUnidad, i.CodUnidad) as CodUnidad, "
            sql = sql & basePrincipal & ".dbo.T" & k & ".TiempoPromVta as TiempoPromVta, "
            sql = sql & basePrincipal & ".dbo.T" & k & ".TiempoReposicion as TiempoReposicion, "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".CodGrupo,i.CodGrupo" & .NumGrupo & ") as CodGrupo, "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".DescGrupo, i.DescGrupo" & .NumGrupo & ") as DescGrupo, "
            sql = sql & "  isnull(sum(" & basePrincipal & ".dbo.T" & k & ".TCant), 0) as TCant, "
            sql = sql & "  isnull(sum(" & basePrincipal & ".dbo.T" & k + 50 & ".CantMax), 0)  as TCAntMAx, "
            sql = sql & "  isnull(sum(" & basePrincipal & ".dbo.T" & k & ".TCant), 0)/" & NumMeses & "as Prom, "
            sql = sql & "  round(isnull(sum(" & basePrincipal & ".dbo.T" & k & ".TCant), 2)/( " & NumMeses & "   *30"
            sql = sql & "   ),2) as PromDiario, "
            'sql = sql & basePrincipal & ".dbo.T" & k & ".CodBodega , "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".CodBodega, i.CodBodega) as CodBodega, "
            sql = sql & "  isnull((i.exist), 0) as Existencia "
            sql = sql & "  Into " & basePrincipal & ".dbo.Tmp" & k
            sql = sql & " from "
            sql = sql & basePrincipal & ".dbo.T" & k & " left join " & basePrincipal & ".dbo.T" & k + 50 & " on (" & basePrincipal & ".dbo.T" & k & ".idinventario = " & basePrincipal & ".dbo.T" & k + 50 & ".idinventario"
            sql = sql & " AND " & basePrincipal & ".dbo.T" & k & ".CODBODEGA = " & basePrincipal & ".dbo.T" & k + 50 & ".CODBODEGA)"
'            If Len(.CodBodega1) > 0 Then
                sql = sql & "  full join " & W(1) & ".dbo.VWivexistxBodega i "
'            Else
'                sql = sql & "  full join " & W(1) & ".dbo.vwivexist i "
'                sql = sql & "  inner join " & W(1) & ".dbo.ivbodega ivb "
'                sql = sql & "  on i.idbodega = ivb.idbodega"
'            End If
            
            
            
            sql = sql & " on (" & basePrincipal & ".dbo.T" & k & ".idinventario=i.idinventario"
            sql = sql & " and " & basePrincipal & ".dbo.T" & k & ".codbodega=i.codbodega) "
            sql = sql & " WHERE ((i.exist <> 0) OR (i.exist= 0))  "

            If Len(.CodBodega1) > 0 Then
                sql = sql & " AND (i.CodBodega = '" & .CodBodega1 & "') "
            End If


            If Not (Len(.Grupo1) = 0 And Len(.Grupo2) = 0) Then
                sql = sql & "  AND (codGrupo" & .NumGrupo & " BETWEEN '" & _
                .Grupo1 & "' AND '" & .Grupo2 & "') "
            End If
            If Not (Len(.CodItem1) = 0 And Len(.CodItem2) = 0) Then
                sql = sql & "AND (i.CodInventario BETWEEN '" & .CodItem1 & "' AND '" & .CodItem2 & "') "
            End If
            
            If Not (Len(.Bienes)) = 0 Then
                 sql = sql & Replace(.Bienes, "IVInventario.", "i.", 1)
             End If
            
            
            
            sql = sql & "  group by  i.exist, "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".Codinventario, i.Codinventario) , "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".Descripcion, i.Descripcion) , "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".Descripcion2, i.Descripcion2) , "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".CodUnidad, i.CodUnidad) , "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".CODBODEGA, i.CODBODEGA) , "
            'sql = sql & basePrincipal & ".dbo.T" & k & ".CODBODEGA, "
            sql = sql & basePrincipal & ".dbo.T" & k & ".TiempoPromVta, "
            sql = sql & basePrincipal & ".dbo.T" & k & ".TiempoReposicion, "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".CodGrupo,i.CodGrupo" & .NumGrupo & ") , "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".DescGrupo, i.DescGrupo" & .NumGrupo & ")  "
                
            VerificaExistenciaTabla k
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        Next k
        
        sql = " select "
        sql = sql & ArmaSQL("CodInventario", max)
        sql = sql & ArmaSQL("descripcion", max)
        sql = sql & ArmaSQL("descripcion2", max)
        sql = sql & ArmaSQL("CodUnidad", max)
        sql = sql & ArmaSQL("CodbODEGA", max)
        sql = Mid$(sql, 1, Len(sql) - 2)
       For i = 0 To max
           TotalC = TotalC & " isnull(TMP" & i & ".TCant,0) +"
           TotalCMAx = TotalCMAx & " isnull(TMP" & i & ".TCantMax,0) +"
            TotalProm = TotalProm & " isnull(TMP" & i & ".prom,0) +"
            TotalP = TotalP & " isnull(TMP" & i & ".PromDiario,0) +"
            TotalE = TotalE & " isnull(TMP" & i & ".Existencia,0) +"
        Next i
        For i = max + 1 To 6
            sql = sql & "  , 0 as TiempoReposicion" & i
            'sql = sql & " , 0 as Cant" & i & ", 0 as PTot" & i
            sql = sql & " , 0 as Cant" & i
            sql = sql & " , 0 as CantMax" & i & ", 0 as PTot" & i
            sql = sql & " , 0 as Prom" & i & ", 0 as existencia" & i
            sql = sql & " , 0 as ExistOptima" & i & " , 0 as Diferencia" & i & ""
        Next i

        TotalC = Mid(TotalC, 1, Len(TotalC) - 1)
        TotalCMAx = Mid(TotalCMAx, 1, Len(TotalCMAx) - 1)
        TotalP = Mid(TotalP, 1, Len(TotalP) - 1)
        TotalProm = Mid(TotalProm, 1, Len(TotalProm) - 1)
        TotalE = Mid(TotalE, 1, Len(TotalE) - 1)
        i = 0
        sql = sql & "  ,isnull(TMP" & i & ".TiempoReposicion,0) AS TiempoRep"
        sql = sql & ", Round(" & Mid$(TotalProm, 2, Len(TotalProm)) & "),2)  as TotalPromMen "
        sql = sql & ", Round(" & Mid$(TotalP, 2, Len(TotalP)) & "),2)  as TotalPromDia "
        sql = sql & ", Round(" & Mid$(TotalE, 2, Len(TotalE)) & "),2)  as TotalExist "
        sql = sql & ", Round(" & Mid$(TotalC, 2, Len(TotalC)) & "),2)  as TotalC "
        sql = sql & ", Round(" & Mid$(TotalCMAx, 2, Len(TotalCMAx)) & "),2)  as Totalcmax "
        sql = sql & ", Round(" & Mid(TotalP, 2, Len(TotalP) - 1) & ")  *  isnull(TMP" & i & ".TiempoReposicion,0),2) AS ExistenciaOptima "

        sql = sql & "  Into " & basePrincipal & ".dbo.Tmp" & k + 1

         For i = max To 0 Step -1
            If i = max Then
                sql = sql & " From "
            Else
                sql = sql & " FULL JOIN "
           End If
            sql = sql & " " & basePrincipal & ".dbo.TMP" & i & " "
        Next i
        If max > 0 Then
            For i = 0 To max - 1
                If i = 0 Then
                    CodInv = " ON " & basePrincipal & ".dbo.TMP" & i & ".CodInventario="
                    CodInv = CodInv & "" & basePrincipal & ".dbo.TMP" & i + 1 & ".CodInventario"
                    sql = sql & CodInv
                Else
                    Dim m As Integer
                    CodInv = ""
                    For m = 0 To i
                        If m = 0 Then
                            CodInv = CodInv & " ON " & basePrincipal & ".dbo.TMP" & i & ".CodInventario="
                            CodInv = CodInv & "" & basePrincipal & ".dbo.TMP" & i + 1 & ".CodInventario"
                        Else
                            CodInv = CodInv & " OR " & basePrincipal & ".dbo.TMP" & m - 1 & ".CodInventario="
                            CodInv = CodInv & "" & basePrincipal & ".dbo.TMP" & i + 1 & ".CodInventario"
                        End If
                    Next m
                    sql = sql & CodInv
                End If
            Next i
        End If
        
        VerificaExistenciaTabla k + 1
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
                
        sql = " select distinct "
        sql = sql & " i.idinventario, t.CodInventario, "
        sql = sql & " t.descripcion, t.descripcion2, t.codunidad,  CODBODEGA, TotalExist , Totalcmax, "
        'sql = sql & "  abs( ExistenciaOptima - TotalExist) as saldo, "
        sql = sql & "  abs(  ExistenciaOptima *" & gobjMain.objCondicion.NumDias1 & "/i.tiemporeposicion - TotalExist) as saldo, "
        sql = sql & "  0 as BandPedido,  ISNULL(TotalC,0)as TotalC, ISNULL(TotalPromMen,0)as TotalPromMen , ISNULL(TotalPromDia,0) as TotalPromDia, "
        sql = sql & " case when ISNULL(TotalPromDia,0)<>0 then TotalExist /ISNULL(TotalPromDia,0) else TotalExist end , "
        sql = sql & " pc.nombre, ISNULL(IP.Cantidad,0), ISNULL(CostoUnitario,0), ip.Fecha, ExistenciaOptima, i.tiemporeposicion, " & gobjMain.objCondicion.NumDias1 & "/i.tiemporeposicion,"
        sql = sql & " ExistenciaOptima *" & gobjMain.objCondicion.NumDias1 & "/i.tiemporeposicion"
        sql = sql & " from tmp" & k + 1 & " t "
        sql = sql & " inner join ivinventario i on t.codinventario=i.codinventario "
        Select Case .Nivel
        Case 0
            sql = sql & " left join IVProveedorDetalle ip"
            sql = sql & " inner join pcprovcli pc on ip.IdProveedor=pc.idprovcli and ip.bandprincipal=1"
            sql = sql & " on i.idinventario=ip.idinventario"
        Case 1
            sql = sql & " left join VWIVProveedorDetalle ip"
            sql = sql & " inner join pcprovcli pc on ip.IdProveedor=pc.idprovcli"
            sql = sql & " on i.idinventario=ip.idinventario"
        End Select
        sql = sql & " WHERE i.bandvalida=1 "
        
        If .tipoItem1 Then
            sql = sql & "  and  (TotalExist  >= ( ExistenciaOptima+ (ExistenciaOptima *0.5))) and (TotalExist <= TotalPromMen)"
            If .IncluirCero Then
                sql = sql & " or  (TotalExist  <  ExistenciaOptima) "
            End If
        Else
            If .IncluirCero Then
                sql = sql & " and (TotalExist  <   "
                sql = sql & " ExistenciaOptima *" & gobjMain.objCondicion.NumDias1 & "/i.tiemporeposicion )"
'            Else
'                sql = sql & " WHERE (TotalExist  >= ( ExistenciaOptima+ (ExistenciaOptima *0.5))) and (TotalExist <= TotalPromMen)"
'                sql = sql & " or  (TotalExist  <  ExistenciaOptima) "
            End If
        End If
        
        i = 0
        
        
       sql = sql & " order by "
        sql = sql & "t.CodInventario"

       Set rs = gobjMain.EmpresaActual.OpenRecordset(sql)
    Set CargaConsolidadoBufferM = rs
    Set rs = Nothing
       
    End With
End Function

Public Function RecuperarDatos107PorEmp(ByVal CodEmpleado As String, ByVal fecha As String) As Recordset
Dim sql As String, rs As Recordset, rsH As Recordset
On Error GoTo CapturaError
    sql = "SELECT pc.codprovcli,pc.nombre,'', '','','','','','','',p.varios1 as gpvivienda,p.varios2 as gpsalud,p.varios3 as gpeducacion,p.varios4 as gpalimentacion,p.varios5 as gpvestimenta " & _
          "FROM Personal p INNER JOIN Empleado pc on pc.idprovcli = p.idempleado "
          
    sql = "SELECT  pc.codprovcli,pc.nombre,''as sys, ''as sobresueldos,''as utilidades,''as igoe,''AS DT,'' AS DC,'' AS FR, "
    sql = sql & "'' AS OIRD,'' as APEE,'' AS  APOE ,p.varios1 as gpvivienda,p.varios2 as gpsalud,p.varios3 as gpeducacion,"
    sql = sql & "p.varios4 as gpalimentacion,p.varios5 as gpvestimenta,"
    sql = sql & "'' as disc, '' as TerEdad,''as IREE,''as BIG,''as IRC,''as VIROE,''as VIREE,''as IRRET,''as IG"
    sql = sql & " FROM Personal p INNER JOIN Empleado pc on pc.idprovcli = p.idempleado "
    sql = sql & "LEFT JOIN roldetalle rd on rd.idempleado = pc.idprovcli "
    sql = sql & "INNER JOIN gncomprobante gn ON gn.transid = rd.transid "
    sql = sql & " WHERE datepart(yyyy,Gn.fechatrans) = '" & fecha & "' "
          
'    sql = sql & "INNER JOIN roldetalle rd on rd.idempleado = pc.idprovcli "
'    sql = sql & "INNER JOIN gncomprobante gn ON gn.transid = rd.transid "
'    sql = sql & " WHERE datepart(yyyy,Gn.fechatrans) = '" & fecha & "' "
    sql = sql & " AnD pc.codprovcli = '" & CodEmpleado & "'"
    sql = sql & " GROUP BY pc.codprovcli,pc.nombre ,p.Varios1,p.Varios2,p.Varios3,p.Varios4,p.Varios5  "
    sql = sql & "ORDER BY PC.NOMBRE "
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        Set RecuperarDatos107PorEmp = rs
        Exit Function
    Else
        'RECUPERA DEL HISTORIAL DEL ROL
            sql = "SELECT pc.codprovcli,pc.nombre,'', '','','','','','','',p.varios1 as gpvivienda,p.varios2 as gpsalud,p.varios3 as gpeducacion,p.varios4 as gpalimentacion,p.varios5 as gpvestimenta " & _
            "FROM Personal p INNER JOIN Empleado pc on pc.idprovcli = p.idempleado "
            sql = sql & "INNER JOIN historialrol rd on rd.idempleado = pc.idprovcli "
            sql = sql & " WHERE datepart(yyyy,rd.fecharol) = '" & fecha & "' "
            sql = sql & " AnD pc.codprovcli = '" & CodEmpleado & "'"
            sql = sql & " GROUP BY pc.codprovcli,pc.nombre ,p.Varios1,p.Varios2,p.Varios3,p.Varios4,p.Varios5  "
            sql = sql & "ORDER BY PC.NOMBRE "
            Set rsH = Me.OpenRecordset(sql)
            Set RecuperarDatos107PorEmp = rsH
    End If
    Set rs = Nothing
    Set rsH = Nothing
    Exit Function
CapturaError:
    Set rs = Nothing
    MsgBox Err.Description
    Exit Function
End Function
'AUC verifica si ya tiene F1070
Public Function VerificaRelDep(ByVal codemp As String, Elemento As String, fecha As String) As Currency
Dim sql As String, rs As Recordset
On Error GoTo CapturaError
    sql = "SELECT Sum(" & Elemento & ") as valor  " & _
          "FROM IRKARDEX ir INNER JOIN Empleado pc on pc.idprovcli = IR.idempleado " & _
          "INNER JOIN GNComprobante gn Inner join GNTrans gnt on gnt.codtrans = gn.codtrans ON gn.transid = ir.transid " & _
          "WHERE gn.estado <> 3 AND gnt.codpantalla = 'GENRD' AND Pc.codprovcli='" & codemp & "'  AND datepart(yyyy,Gn.fechaDevol) = '" & fecha & "'"
    Set rs = Me.OpenRecordset(sql)
        If Not rs.EOF And Not IsNull(rs!Valor) Then
            VerificaRelDep = rs!Valor
        Else
            VerificaRelDep = 0
        End If
        Set rs = Nothing
    Exit Function
CapturaError:
    Set rs = Nothing
    MsgBox Err.Description
    Exit Function
End Function



Public Function RecuperaPCProvClixRUC(key As String, BandCliente As Boolean, BandProveedor As Boolean, bandEmpleado As Boolean) As PCProvCli
    Dim obj As PCProvCli
    
    Set obj = New PCProvCli
    Set obj.Empresa = Me
    
    On Error Resume Next
    obj.RecuperarxRUC key, BandCliente, BandProveedor, bandEmpleado
    If Err.Number = 0 Then Set RecuperaPCProvClixRUC = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function ConsTSConciliacion1Cambios() As Variant
    Dim sql As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsTSConciliacion")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodBanco") = gobjCond.CodBanco1
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient

    sql = "spConsTSConciliacionCambios1 " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodBanco1 & "', " & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB)
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    ConsTSConciliacion1Cambios = MiGetRows(rs)
    Set rs = Nothing
End Function

Public Function RecuperaCtaCuentasPersonal(ByVal IdEmp As Long, ByVal idele As Long) As Long
    Dim sql As String, rs As Recordset
    sql = " select top 1 idcuenta from cuentapersonal "
    sql = sql & " where idempleado=" & IdEmp
    sql = sql & " and idelemento =" & idele
     Set rs = Me.OpenRecordset(sql)
     If rs.RecordCount > 0 Then
        RecuperaCtaCuentasPersonal = rs.Fields(0)
    Else
        RecuperaCtaCuentasPersonal = 0
    End If
    Set rs = Nothing
    End Function
Public Function RecuperaCtaCuentasPersonalPre(ByVal IdEmp As Long, ByVal idele As Long) As Long
    Dim sql As String, rs As Recordset
    sql = " select top 1 idcuenta from cuentapersonalPre "
    sql = sql & " where idempleado=" & IdEmp
    sql = sql & " and idelemento =" & idele
     Set rs = Me.OpenRecordset(sql)
     If rs.RecordCount > 0 Then
        RecuperaCtaCuentasPersonalPre = rs.Fields(0)
    Else
        RecuperaCtaCuentasPersonalPre = 0
    End If
    Set rs = Nothing
    End Function

Public Function ConsGNTransTransformacion( _
                    Optional ByVal OrdenAscendente As Boolean) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    '*** MAKOTO 03/oct/00
    sql = "SELECT"
    If gobjCond.TopN > 0 Then
        sql = sql & " TOP " & gobjCond.TopN
    End If
    '*** MAKOTO 05/feb/01 Mod. Aumentado 'NumDocRef' y 'Nombre'
    sql = sql & " VW.TransID, FechaTrans, CodAsiento, CodTrans, NumTrans,  " & _
            " NumDocRef, Nombre, vw.Descripcion, 0 as CUR, 0 as CU, CodCentro,Estado FROM " & _
           "  " & _
            " vwConsGNTrans vw " & _
            "  " & _
            "  "
    'Condición de FechaTrans
    cond = "FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB)
    'Condición de CodTrans
    If Len(cond) > 0 Then cond = cond & " AND "
    If Len(gobjCond.CodTrans) > 0 Then      'Si está especificado transaccion
        'Si es una sola transaccion
        If InStr(gobjCond.CodTrans, ",") = 0 Then
            cond = cond & "(CodTrans='" & gobjCond.CodTrans & "')"
        'Si está seleccionado varias trans.
        Else
            cond = cond & "(CodTrans IN (" & gobjCond.CodTrans & "))"
        End If
    Else
        'Si no hay condicion de cod.trans, selecciona todas las trans.
        ' que tenga permiso
        s = gobjMain.GrupoActual.PermisoActual.ListaTrans(True)
        If Len(s) > 0 Then
            cond = cond & "(CodTrans " & s & ")"
        Else
            cond = cond & "(CodTrans = '-------')"    'Para que NO devuelva nada si no tiene ningún permiso  '*** MAKOTO 26/dic/00
        End If
    End If
    'Condición de NumTrans
    If (gobjCond.NumTrans1 > 0) And (gobjCond.NumTrans2 > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans BETWEEN " & gobjCond.NumTrans1 & " AND " & gobjCond.NumTrans2 & ")"
    ElseIf gobjCond.NumTrans1 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans>=" & gobjCond.NumTrans1 & ")"
    ElseIf gobjCond.NumTrans2 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(NumTrans<=" & gobjCond.NumTrans2 & ")"
    End If
    'Condición de Estado
    If gobjCond.EstadoBool(ESTADO_NOAPROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_NOAPROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_APROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_APROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_DESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_DESPACHADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_ANULADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(Estado<>" & ESTADO_ANULADO & ")"
    End If
    'jeaa 22/05/2006
    If Not (Len(gobjCond.Grupo1) = 0 And Len(gobjCond.Grupo2) = 0) Then
        cond = cond & " AND (codGrupo" & gobjCond.NumGrupo & " BETWEEN '" & _
                gobjCond.Grupo1 & "' AND '" & gobjCond.Grupo2 & "') "
    End If
    If Not Len(gobjCond.CodGrupo) = 0 Then
        cond = cond & "AND (ivgrupo1.codgrupo1 = '" & gobjCond.CodGrupo & "')"
    End If
   If Not (Len(gobjCond.CodItem1) = 0 And Len(gobjCond.CodItem2) = 0) Then
        cond = cond & "AND (CodInventario = '" & gobjCond.CodItem1 & "')"
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    'sql = sql & " AND IVINVENTARIO.TIPO = 4 GROUP BY VW.TransID,FechaTrans,CodAsiento,CodTrans,NumTrans,  NumDocRef, Nombre, vw.Descripcion,ivk.CostoRealTotal , ivk.Cantidad, ivk.CostoTotal, VW.CodCentro, VW.Estado, VW.HoraTrans,ivgrupo1.descripcion,ivinventario.codinventario,ivinventario.descripcion "
   'Ordern de filas
    If OrdenAscendente Then
'        sql = sql & " ORDER BY FechaTrans, TransID"         '*** MAKOTO 03/oct/00 Modificado para que salga más actual al primero
        sql = sql & " ORDER BY FechaTrans, HoraTrans, VW.TransID"         '*** MAKOTO 07/dic/00 Modificado para HoraTrans
    Else
'        sql = sql & " ORDER BY FechaTrans DESC, TransID DESC"
       sql = sql & " ORDER BY FechaTrans DESC, HoraTrans DESC, VW.TransID DESC"       '*** MAKOTO 07/dic/00 HoraTrans agregado
    End If
    Set rs = Me.OpenRecordset(sql)
    Set ConsGNTransTransformacion = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "ConsGNTransTransformacion " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function


Public Function ConsIVSaldoNotasEntrega(ByVal tid As Long, CodTrans As String) As Variant
    Dim sql As String, cond As String, rs As Recordset
    

    sql = "spConsIVSaldoNotasEntrega " & _
                tid & ",'" & _
                CodTrans & "','" & _
                CodTrans & "M'"
                
    Set rs = Me.OpenRecordset(sql)
    UltimoRecordset rs
    
    Set ConsIVSaldoNotasEntrega = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Kardex inv. ISO" & gobjCond.fecha1 & "-" & gobjCond.fecha2, "IV"
End Function



Public Function ConsVTConciliacioVentas() As Variant
    Dim sql As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsTSConciliacion")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodBanco") = gobjCond.CodBanco1
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient

    sql = "spConsVTConciliacionVentas " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodBanco1 & "', " & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB)
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    ConsVTConciliacioVentas = MiGetRows(rs)
    
    
    
    Set rs = Nothing
End Function


Public Function VerificaElemntoYAConcilaidoenOtraVentas(ByVal Id As Long, ByVal transid As Long, ByVal CodVendedor As String, ByRef Trans As String) As Boolean
    Dim sql As String, rs As Recordset, cond As String
    VerificaElemntoYAConcilaidoenOtraVentas = False
    Trans = ""
    sql = " select codtrans, numtrans from VTKardexConcilia t"
    sql = sql & " inner join gncomprobante g inner join fcvendedor f on g.idvendedor=f.idvendedor on t.transid=g.transid"
    sql = sql & " where IdTrans= " & Id
    sql = sql & " and IdTrans<> " & 0
    sql = sql & " and BandConciliado=1"
    sql = sql & " and g.estado<>3 "
    sql = sql & " and g.transid <>" & transid
    sql = sql & " and f.codvendedor='" & CodVendedor & "'"
    
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        VerificaElemntoYAConcilaidoenOtraVentas = True
        Trans = rs.Fields("Codtrans") & "-" & rs.Fields("numtrans")
    End If
End Function

Public Function ConsANTotalRetencionVentas2008ParaXML() As Recordset
    Dim sql As String, rs As Recordset
    Dim fecha As Date
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    
    With gobjCond
        fecha = DateAdd("d", -1, CDate("01/" & DatePart("m", DateAdd("m", 1, .fecha1)) & "/" & DatePart("yyyy", .fecha1)))
        sql = " select '"
        sql = sql & fecha
        sql = sql & "' as fecha, atd.CodTipoDocumento as doc, '0' AS idclienteref, pc.ruc, ts.bandiva," 'g.idclienteref,
        sql = sql & " sum(base) as base,"
        sql = sql & " round(sum(Base * ts.Porcentaje), 2) As retenido, 0 as pasado"
        sql = sql & " from gncomprobante g"
        sql = sql & " inner join tskardexret t"
        sql = sql & " inner join tsretencion ts on"
        sql = sql & " t.IdRetencion = ts.IdRetencion"
        sql = sql & " on g.transid=t.transid"
        sql = sql & " inner join pcprovcli pc"
        sql = sql & " left join anexo_TipoDocumento atd on pc.IdTipoDocumento=atd.Id"
        sql = sql & " on g.idclienteref = pc.idprovcli"
        sql = sql & " Where g.Estado <> 3"
        sql = sql & " AND CODF104<>'COM'"
        sql = sql & " AND (G.FechaTrans  BETWEEN " & _
            FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
            FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
        sql = sql & " group by pc.ruc,  ts.bandiva, atd.CodTipoDocumento " 'g.idclienteref,
        sql = sql & " order by atd.CodTipoDocumento, pc.ruc "
    End With
    
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    
    UltimoRecordset rs
    Set ConsANTotalRetencionVentas2008ParaXML = rs
    Set rs = Nothing

End Function
        
Public Function ListaAnexoTipoRetencionPorcentaje0(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodRetencion, Descripcion,porcentaje/100 as Porcentaje FROM anexos_retencion_IR"
    sql = sql & " where porcentaje=0 "
    sql = sql & " ORDER BY CodRetencion"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaAnexoTipoRetencionPorcentaje0 = rs
    Else
        ListaAnexoTipoRetencionPorcentaje0 = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ConsCTBalancePyGPorMesNiveles() As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim v As Variant, v2() As Variant, i As Long, j As Long, numReg As Long
    Dim bandBalance As Boolean
    Dim mes As Long, MesFin As Integer
    Const BAL_VAL = 7
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsCTBalance")
    qdef.Parameters("FechaDesde") = IIf(bandBalance, Me.GNOpcion.FechaInicio, gobjCond.fecha1)
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodCuenta1") = "0"
    qdef.Parameters("CodCuenta2") = String(20, "9")
    qdef.Parameters("CodSucursal") = gobjCond.Sucursal ' ********* jeaa
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
    If Not rs.EOF Then
        rs.MoveLast
        rs.MoveFirst
        v = rs.GetRows(rs.RecordCount)
    End If
#Else
    bandBalance = True
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    MesFin = DateDiff("m", gobjCond.fecha1, gobjCond.fecha2) + 2
    For mes = 1 To MesFin + 1
       '/*-------------------------------------------------
        ' * Filtrar solo los asientos que est n dentro del rango
        ' --------------------------------------------------*/
        VerificaExistenciaTabla (10 * mes) + 1
        sql = " SELECT CTCuenta.CodCuenta, Debe/Cotizacion2 Debe0,"
        sql = sql & " Haber/Cotizacion2 AS Haber0, 0 AS Saldo"
        sql = sql & " Into tmp" & (10 * mes) + 1
        sql = sql & " FROM CTCuenta INNER JOIN (GNComprobante"
        sql = sql & " INNER JOIN CTLibroDetalle ON GNComprobante.CodAsiento = CTLibroDetalle.CodAsiento)"
        sql = sql & " ON CTCuenta.IdCuenta = CTLibroDetalle.IdCuenta"
        sql = sql & " where ((GNComprobante.Estado)<>3  And (GNComprobante.Estado<>0))"
        If mes = 1 Then
            sql = sql & " AND (GNComprobante.FechaTrans <" & FechaYMD("01/" & DatePart("m", gobjCond.fecha1) & "/" & DatePart("yyyy", gobjCond.fecha1), TipoDB) & " )"
        ElseIf mes < (MesFin + 1) Then
            sql = sql & " AND (GNComprobante.FechaTrans >= " & FechaYMD(DateAdd("m", mes - 2, "01/" & DatePart("m", gobjCond.fecha1) & "/" & DatePart("yyyy", gobjCond.fecha1)), TipoDB) & " and GNComprobante.FechaTrans < " & FechaYMD(DateAdd("m", mes - 1, "01/" & DatePart("m", gobjCond.fecha1) & "/" & DatePart("yyyy", gobjCond.fecha1)), TipoDB) & ")"
        ElseIf mes = (MesFin + 1) Then
            sql = sql & " AND (GNComprobante.FechaTrans >= " & FechaYMD("01/" & DatePart("m", gobjCond.fecha1) & "/" & DatePart("yyyy", gobjCond.fecha1), TipoDB) & " and GNComprobante.FechaTrans <= " & FechaYMD(DateAdd("m", mes - 2, "01/" & DatePart("m", gobjCond.fecha1) & "/" & DatePart("yyyy", gobjCond.fecha1)), TipoDB) & ")"
        End If
        If Len(gobjCond.CodCuenta2) = 0 Then gobjCond.CodCuenta2 = gobjCond.CodCuenta1
        If Len(gobjCond.CodCuenta1) > 0 Then
            sql = sql & " AND CTCuenta.CodCuenta BETWEEN '" & gobjCond.CodCuenta1 & "' AND '" & gobjCond.CodCuenta2 & "'"
        End If
        If Len(gobjCond.Sucursal) > 0 Then
            sql = sql & "   and idLocal like " & gobjCond.Sucursal
        End If
        sql = sql & "    AND CTCUENTA.TIPOCUENTA > 3"
'        sql = sql & "    AND GNComprobante.descripcion not like 'Cierre de ejercicio'"
        
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        '/*-------------------------------------------------
        ' * Calcular la suma por cuenta
        ' --------------------------------------------------*/
        VerificaExistenciaTabla (10 * mes) + 2
        sql = " SELECT"
        sql = sql & " tmp" & (10 * mes) + 1 & ".CodCuenta,"
        sql = sql & " Sum(tmp" & (10 * mes) + 1 & ".Debe0) AS Debe,    Sum(tmp" & (10 * mes) + 1 & ".Haber0) AS Haber"
        sql = sql & " Into tmp" & (10 * mes) + 2
        sql = sql & " From tmp" & (10 * mes) + 1
        sql = sql & " GROUP BY tmp" & (10 * mes) + 1 & ".CodCuenta"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        ' /*-------------------------------------------------
        ' * Devolver en formato de Balance/Estado P.G.
        ' --------------------------------------------------*/
        VerificaExistenciaTabla (10 * mes) + 3
        sql = " SELECT"
        sql = sql & " ct.IdCuenta, ct.CodCuenta, ct.NombreCuenta,"
        sql = sql & " CTL.Nombre, Debe , Haber, Debe - Haber AS Valor, ct.Nivel,"
        sql = sql & " ct.IdCuentaSuma , ct.TipoCuenta, ct.BandTotal"
        sql = sql & " Into tmp" & (10 * mes) + 3
        sql = sql & " FROM CTLocal ctl right join CTcuenta ct"
        sql = sql & " left JOIN tmp" & (10 * mes) + 2 & " ON ct.CodCuenta = tmp" & (10 * mes) + 2 & ".CodCuenta"
        sql = sql & " on ct.idlocal=ctl.IDLocal"
        sql = sql & " ORDER BY ct.CodCuenta"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
    Next mes
    mes = 1
    sql = "select "
    sql = sql & " tmp" & mes & "3.IdCuenta, tmp" & mes & "3.CodCuenta, tmp" & mes & "3.NombreCuenta, tmp" & mes & "3.Nombre,  tmp" & mes & "3.BandTotal, "
    For mes = 1 To MesFin + 1
       sql = sql & " tmp" & mes & "3.debe, tmp" & mes & "3.Haber,"
        sql = sql & " tmp" & mes & "3.Valor, tmp" & mes & "3.Nivel,"
        sql = sql & " tmp" & mes & "3.IdCuentaSuma , tmp" & mes & "3.TipoCuenta,"
    Next mes
    'quita ultima coma
    sql = Mid$(sql, 1, Len(sql) - 1)
    sql = sql & " from tmp13  "
    If mes > 1 Then
        For mes = 2 To MesFin + 1
           sql = sql & " inner join tmp" & mes & "3 on tmp" & mes & "3.idcuenta=tmp13.idcuenta "
        Next mes
    End If
    If Not gobjCond.IncluirCero Then
        sql = sql & " where tmp13.BandTotal=" & 0
    End If
   rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    If Not rs.EOF Then v = rs.GetRows()
#End If
    'Mayoriza los valores
    'MayorizaxMeses v, MesFin - 1
    MayorizaxMeses v, MesFin
    'Pasa los valores de v a v2 cambiando formato
    ' y filtrando registros por TipoCuenta, Nivel y Valor
    Dim BandSigue As Boolean, bandDifCero As Boolean
    BandSigue = True
    bandDifCero = True
'    j = 0
    For i = 0 To UBound(v, 2)
        For mes = 0 To MesFin
           If Not IsNull(v(BAL_VAL + (8 * mes), i)) Then
                BandSigue = True
                Exit For
            Else
                BandSigue = False
            End If
        Next mes
        For mes = 0 To MesFin
           If (v(5 + (6 * mes), i) <> 0 Or v(6 + (6 * mes), i) <> 0 Or v(7 + (6 * mes), i) <> 0) Then
                bandDifCero = True
                Exit For
            Else
                bandDifCero = False
            End If
        Next mes
        If BandSigue Then
            'Solo los que tengan valor diferente de 0
            If bandDifCero Then
                   'Solo hasta el nivel indicado
                   If v(8, i) <= gobjCond.Nivel Then
                        ReDim Preserve v2(70, j)
'                        If v(BAL_TIPO, i) >= 4 Then
                        v2(0, j) = v(BAL_TIPO + 3, i)         'TipoCuenta
                        v2(1, j) = v(BAL_CODCUENTA, i)     'CodCuenta
                        v2(2, j) = v(BAL_NOMBRECUENTA, i)  'Cuenta
                        v2(3, j) = v(BAL_CODSUCURSAL, i)         'CODSUCURSAL   JEAA 16/01/04
                        v2(4, j) = IIf(v(4, i), 1, 0)  'Cuenta de total
                        For mes = 0 To MesFin
                           v2(5 + (mes * 4), j) = v(5 + (mes * 6), i)     'Valor
                            v2(6 + (mes * 4), j) = v(6 + (mes * 6), i)     'Valor
                            v2(7 + (mes * 4), j) = v(7 + (mes * 6), i)     'Valor
                            If Not bandBalance Then v2(7 + (mes * 4), j) = v2(7 + (mes * 2), j) * -1   'Invierta el signo cuando es EstadoPG
                            v2(8 + (mes * 4), j) = v(8 + (mes * 6), i)      'Nivel
                        Next mes
                        j = j + 1
'                    End If
                End If
            End If
        End If
    Next i
    If j Then ConsCTBalancePyGPorMesNiveles = v2
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Balance P y G x Mes Niveles", "CT"
    For mes = 1 To MesFin + 1
        VerificaExistenciaTabla (10 * mes) + 1
    Next mes
End Function

Public Function ObtieneCostoxTrans(ByVal transid As Long) As Currency
Dim sql As String, rs As Recordset
    ObtieneCostoxTrans = 0
    sql = "select case when max(anexocodtipocomp)=18 then isnull((sum(preciorealtotal)*-1)  - (sum(costorealtotal)*-1 ),0) else isnull((sum(preciorealtotal))  - (sum(costorealtotal) ),0) end as CT"
    sql = sql & " from gncomprobante g inner join gntrans gt"
    sql = sql & " on g.codtrans=gt.codtrans"
    sql = sql & " inner join ivkardex i"
    sql = sql & " inner join ivinventario iv"
    sql = sql & " on iv.idinventario = i.idinventario"
    sql = sql & " on g.transid=i.transid"
    sql = sql & " Where iv.BandServicio = 0"
    sql = sql & " and g.transid=" & transid
    Set rs = gobjMain.EmpresaActual.OpenRecordset(sql)
    If Not rs.EOF Then
        ObtieneCostoxTrans = rs.Fields("CT")
    End If
End Function
Public Function ListaPCGGasto(BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset, PcGrupo As Integer
    PcGrupo = CInt(Me.GNOpcion.ObtenerValor("PCGrupoGasto"))
    sql = "Select pcgg.idpcggasto,pcgg.codigo,pcg.codgrupo" & PcGrupo & ",pc.codprovcli,pc.nombre,gng.codgasto "
    sql = sql & "from PCGGasto pcgg inner join pcggastodetallepc  pcggd "
    sql = sql & "inner join pcgrupo" & PcGrupo & " pcg on pcg.idgrupo" & PcGrupo & "= pcggd.idpcgrupo"
    sql = sql & " inner join pcprovcli pc on pc.idprovcli = pcggd.idprovcli "
    sql = sql & " inner join gngasto gng on gng.idgasto = pcggd.idgasto"
    sql = sql & " ON pcggd.idpcggasto = pcgg.idpcggasto"
    sql = sql & " ORDER BY pcgg.codigo"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCGGasto = rs
    Else
        ListaPCGGasto = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function
Public Function CreaPCGGasto() As PCGGasto
    Dim obj As PCGGasto
    Set obj = New PCGGasto
    Set obj.Empresa = Me
    Set CreaPCGGasto = obj
    Set obj = Nothing
End Function

Public Function RecuperaIdGasto(ByVal IdPcg As Long, ByVal IdEmp As Long, ByVal idele As Long) As Long
    Dim sql As String, rs As Recordset
    Dim IdGrupo As Integer
    IdGrupo = Me.GNOpcion.ObtenerValor("PCGrupoGasto")
    
    sql = "Select IDGasto from cuentapcgrupo ctpg"
    sql = sql & " Inner join  pcgrupo" & IdGrupo & " pcg on pcg.idgrupo" & IdGrupo & " = ctpg.idpcgrupo"
'    sql = sql & " Inner join Empleado pc on pc.idgrupo" & IdGrupo & " = pcg.idgrupo" & IdGrupo
    sql = sql & " WHERE ctpg.idpcgrupo=" & IdPcg
    sql = sql & " AND ctpg.idelemento =" & idele
 '   sql = sql & " AND pc.idprovcli =" & IdEmp
     Set rs = Me.OpenRecordset(sql)
     If rs.RecordCount > 0 Then
        RecuperaIdGasto = rs.Fields(0)
    Else
        RecuperaIdGasto = 0
    End If
    Set rs = Nothing
End Function

Public Function RecuperaPcGGasto(key As Variant) As PCGGasto
    Dim obj As PCGGasto
    Set obj = New PCGGasto
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaPcGGasto = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function
Public Function CalculaValorDetalleTarjetaxCod(ByVal transid As Long, ByVal CodTarjeta As String) As Currency
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    sql = "Select ISNULL(Sum(Cantidad * Valor),0) AS Valor "
    sql = sql & "from TSDetalleTarjeta i "
    sql = sql & "inner join ivtarjeta t on t.idtarjeta = i.idtarjeta"
    sql = sql & " Where Transid = " & transid
    sql = sql & " AND t.codtarjeta = '" & CodTarjeta & "'"
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        CalculaValorDetalleTarjetaxCod = rs.Fields("Valor")
    Else
        CalculaValorDetalleTarjetaxCod = 0
    End If
    Set rs = Nothing
End Function

Public Function ListaIVTarjetaT(BandSoloValida As Boolean, BandRS As Boolean) As Variant
   Dim sql As String, rs As Recordset
    sql = "SELECT * FROM IVTarjeta "
    If BandSoloValida Then
        sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY CodTarjeta"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVTarjetaT = rs
    Else
        ListaIVTarjetaT = MiGetRows(rs)
        rs.Close
   End If
    Set rs = Nothing
End Function


''---------------- FLUJO DE EGFECTIVO
Public Function CreaCTCuentaFE() As ctCuentaFE
    Dim obj As ctCuentaFE
   Set obj = New ctCuentaFE
    Set obj.Empresa = Me
    Set CreaCTCuentaFE = obj
    Set obj = Nothing
End Function

Public Function RecuperaCTCuentaFE(key As Variant) As ctCuentaFE
    Dim obj As ctCuentaFE
    Set obj = New ctCuentaFE
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaCTCuentaFE = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function


Public Function ListaCTCuentaFE(IncluyeTotal As Boolean, TipoCuenta As Integer, bandResumido As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, cond As String
    Dim rs As Recordset
    
    If bandResumido Then
        sql = "SELECT CodCuenta, NombreCuenta FROM CTCuentaFE "
    Else
        sql = "SELECT CodCuenta, NombreCuenta, Nivel, CodCuentaSuma, TipoCuenta, BandTotal FROM vwCTCuentaFE "
    End If
    
    If TipoCuenta <> 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "TipoCuenta=" & TipoCuenta & " "
    End If
    If Not IncluyeTotal Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "BandTotal=" & CadenaBool(False, TipoDB)
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    
    sql = sql & " ORDER BY CodCuenta"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaCTCuentaFE = rs
    Else
        ListaCTCuentaFE = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaCTCuentaFE2( _
                    ByVal IncluyeTotal As Boolean, _
                    ByVal TipoCuenta As E_SIITIPOCUENTA, _
                    ByVal bandResumido As Boolean, _
                    ByVal BandRS As Boolean) As Variant
    Dim sql As String, cond As String, s As String, i As Long
    Dim rs As Recordset
    
    If bandResumido Then
        sql = "SELECT CodCuenta, NombreCuenta FROM CTCuentaFE "
    Else
        sql = "SELECT CodCuenta, NombreCuenta, Nivel, CodCuentaSuma, TipoCuenta, BandTotal FROM vwCTCuentaFE "
    End If
    
    If TipoCuenta <> sictTODOS Then
        If Len(cond) > 0 Then cond = cond & " AND "
        
        For i = 1 To 5
            If (TipoCuenta And 2 ^ (i - 1)) <> 0 Then
                If Len(s) > 0 Then s = s & " OR "
                s = s & "TipoCuenta=" & i
            End If
        Next i
            
        cond = cond & "(" & s & ")"
    End If
    
    If Not IncluyeTotal Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(BandTotal=" & CadenaBool(False, TipoDB) & ")"
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    
    sql = sql & " ORDER BY CodCuenta"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaCTCuentaFE2 = rs
    Else
        ListaCTCuentaFE2 = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


'Devuelve Array de Variant para directamente mandar a FlexCombo
Public Function ListaCTCuentaFEParaCombo(IncluyeTotal As Boolean, TipoCuenta As Integer) As Variant
    Dim sql As String, cond As String
    Dim rs As Recordset
    
    sql = "SELECT CodCuenta, CodCuenta+'  '+NombreCuenta AS Cuenta FROM CTCuentaFE "
    If TipoCuenta <> 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "TipoCuenta=" & TipoCuenta & " "
    End If
    If Not IncluyeTotal Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "BandTotal=" & CadenaBool(False, TipoDB)
    End If
    sql = sql & " where bandvalida=1"
    If Len(cond) > 0 Then sql = sql & " and " & cond
    'ANULADO JEAA 01/12/2005 filtra solo las validas  If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    
    sql = sql & " ORDER BY CodCuenta"
    Set rs = Me.OpenRecordset(sql)
    ListaCTCuentaFEParaCombo = MiGetRows(rs)
    rs.Close
    Set rs = Nothing
End Function


Public Function ListaCTCuentaParaComboFE(IncluyeTotal As Boolean, TipoCuenta As Integer) As Variant
    Dim sql As String, cond As String
    Dim rs As Recordset
    
    sql = "SELECT CodCuenta, CodCuenta+'  '+NombreCuenta AS Cuenta FROM CTCuentaFE "
    If TipoCuenta <> 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "TipoCuenta=" & TipoCuenta & " "
    End If
    If Not IncluyeTotal Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "BandTotal=" & CadenaBool(False, TipoDB)
    End If
    sql = sql & " where bandvalida=1"
    If Len(cond) > 0 Then sql = sql & " and " & cond
    'ANULADO JEAA 01/12/2005 filtra solo las validas  If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    
    sql = sql & " ORDER BY CodCuenta"
    Set rs = Me.OpenRecordset(sql)
    ListaCTCuentaParaComboFE = MiGetRows(rs)
    rs.Close
    Set rs = Nothing
End Function


Public Function ListaCTCuentaFEParaFlexGrid(TipoCuenta As Integer) As String
    Dim sql As String, cad As String, rs As Recordset
    
    sql = "SELECT Codigo, Nombre FROM vwCTCuentaFEParaCombo WHERE bandvalida=1 "
    If TipoCuenta > 0 Then sql = sql & " and TipoCuenta=" & TipoCuenta
    'jeaa 01/12/2005
'    sql = "SELECT Codigo, Nombre FROM vwCTCuentaParaCombo"
'    If TipoCuenta > 0 Then sql = sql & " WHERE TipoCuenta=" & TipoCuenta
    sql = sql & " ORDER BY Codigo"
    Set rs = Me.OpenRecordset(sql)

    'Pero por ahora uso lo siguiente para controlar cuentas de total y de movimiento
#If DAOLIB Then
    cad = "|" & GetStringDAO(rs, 21 + (20 + 80 + 2))        'Código+'*'=21, Space+NombreCuenta+'[]'=20+80+2
#Else
    If Not rs.EOF Then cad = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    
    rs.Close
    Set rs = Nothing
    
    ListaCTCuentaFEParaFlexGrid = cad
End Function

Public Function ConsCTBalanceFE(bandBalance As Boolean) As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim v As Variant, v2() As Variant, i As Long, j As Long
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsCTBalance")
    qdef.Parameters("FechaDesde") = IIf(bandBalance, Me.GNOpcion.FechaInicio, gobjCond.fecha1)
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodCuenta1") = "0"
    qdef.Parameters("CodCuenta2") = String(20, "9")
    qdef.Parameters("CodSucursal") = gobjCond.Sucursal ' ********* jeaa
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
    If Not rs.EOF Then
        rs.MoveLast
        rs.MoveFirst
        v = rs.GetRows(rs.RecordCount)
    End If
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
'    '**************************
'    gobjCond.Sucursal = "'S2'"
'    '**************************
'    If Me.GNOpcion.ObtenerValor("PermitirDistribucionGastos") = "1" Then
'        If Not gobjCond.IncluirCero Or Len(gobjCond.Sucursal) > 0 Then
'            sql = "spConsCTBalancexGastoNIIF "
'        Else
'            sql = "spConsCTBalanceNIIF "
'        End If
'    Else
        sql = "spConsCTBalanceFE "
'    End If
    sql = sql & gobjCond.numMoneda & ",'0','" & _
                        String(20, "9") & "'," & _
                        FechaYMD(IIf(bandBalance, Me.GNOpcion.FechaInicio, gobjCond.fecha1), TipoDB) & "," & _
                        FechaYMD(gobjCond.fecha2, TipoDB) & ",'" & gobjCond.Sucursal & "'"    ' jeaa 17-01-04 para filtrado por sucursal
                        
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    If Not rs.EOF Then v = rs.GetRows()
#End If
    
    'Mayoriza los valores
    Mayoriza v
    
    'Pasa los valores de v a v2 cambiando formato
    ' y filtrando registros por TipoCuenta, Nivel y Valor
    j = 0
    For i = 0 To UBound(v, 2)
        If Not IsNull(v(BAL_VALOR, i)) Then
            'Solo los que tengan valor diferente de 0
            If v(BAL_VALOR, i) <> 0 Then
                'Si es para balance, solo tipo 1,2 y 3, sino solo tipo 4 y 5
'                If (bandBalance And (v(BAL_TIPO, i) = 1)) Or _
'                   ((Not bandBalance) And (v(BAL_TIPO, i) >= 4)) Then
                   
                   'Solo hasta el nivel indicado
                   If v(BAL_NIVEL, i) <= gobjCond.Nivel Then
                        ReDim Preserve v2(6, j)
                        v2(0, j) = v(BAL_TIPO, i)           'TipoCuenta
                        v2(1, j) = v(BAL_CODCUENTA, i)      'CodCuenta
                        v2(2, j) = v(BAL_NOMBRECUENTA, i)   'Cuenta
                        v2(3, j) = v(BAL_CODSUCURSAL, i)          'CODSUCURSAL   JEAA 16/01/04
                        v2(4, j) = v(BAL_VALOR, i)          'Valor
                        If Not bandBalance Then v2(4, j) = v2(4, j) * -1    'Invierta el signo cuando es EstadoPG
                        v2(5, j) = v(BAL_NIVEL, i)          'Nivel
                        j = j + 1
                    End If
                'End If
            End If
        End If
    Next i
        
    If j Then ConsCTBalanceFE = v2
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Balance sc ", "CT"
End Function


Public Function ConsPCSaldoconF_CorteFlujoEfectivo(ByVal BandProveedor As Boolean, _
                            ByVal BandCliente As Boolean) As Variant
    Dim sql As String, cond As String, rs As Recordset
   Dim aux As String, Condicion As String
   Dim numReg As Long, Trans As String, i As Integer
        VerificaExistenciaTabla 1
        'Prepara reporte utilizando Tablas Temporales
    '1) Prepara los  documentos  Asignados  menores a la fecha
        aux = IIf(gobjCond.numMoneda > 0, "/Cotizacion" & gobjCond.numMoneda + 1, "")
        sql = "SELECT " & _
            "pck.IdAsignado, " & _
            "(pck.Debe + pck.Haber) " & aux & " AS Valor " & _
            "INTO tmp1 " & _
            "From " & _
            "GNtrans gt INNER JOIN " & _
                "(GNComprobante gc INNER JOIN PCKardex pck " & _
                "ON gc.transID = pck.transID) " & _
                          "ON gt.Codtrans = gc.Codtrans " & _
            "Where (pck.IdAsignado <> 0) " & _
            "AND (gc.Estado <> 3) " & _
            "AND (gt.AfectaSaldoPC=1) " & _
            "AND (gc.Fechatrans<= " & FechaYMD(gobjCond.FechaCorte, gobjMain.EmpresaActual.TipoDB) & ")"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        VerificaExistenciaTabla 2
    '2)Agrupa  estos  documentos por IdAsignado
        sql = "SELECT " & _
              "IdAsignado," & _
              "isnull(Sum(Valor),0) AS VCancelado " & _
              "INTO tmp2 " & _
              "FROM tmp1 " & _
              "GROUP BY IdAsignado"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
    '3) Finalmente une  con el documento  Padre
        VerificaExistenciaTabla 3
        sql = "SELECT  gc.transId, gc.Codtrans, gc.Numtrans, gc.NumDocRef, pc.IdProvCli, " & _
            "pc.CodProvCli, pc.Nombre, " & _
            "(pck.Debe ) " & aux & " AS Debe, " & _
            "( pck.Haber) " & aux & " AS Haber, " & _
            "(pck.Debe + pck.Haber) " & aux & " AS Valor, " & _
            "isnull(vw.VCancelado,0) AS VCancelado, " & _
            "(pck.Debe + pck.Haber) " & aux & " - isnull(vw.VCancelado,0) AS Saldo, " & _
            "pck.IdForma, pck.NumLetra, " & _
            "pck.FechaEmision, pck.FechaVenci, " & _
            "pck.Observacion " & _
            "INTO tmp3 " & _
            "From GNComprobante gc INNER JOIN " & _
                    "(PCProvCli pc  INNER JOIN " & _
                    "    (PCKardex pck  LEFT JOIN " & _
                    "      tmp2 vw  ON vw.IdAsignado = pck.Id) " & _
                    " ON pc.IdProvCli = pck.IdProvCli) " & _
                "ON gc.transID = pck.transID " & _
            "Where (pck.IdAsignado = 0) And (gc.Estado <> 3) " & _
            "AND (gc.Fechatrans<=" & FechaYMD(gobjCond.FechaCorte, gobjMain.EmpresaActual.TipoDB) & ")"
            If BandProveedor = False And BandCliente = True Then
                If gobjCond.TipoSaldo = 1 Then
                    sql = sql & "AND (pck.Haber > 0) "
                ElseIf gobjCond.TipoSaldo = 2 Then
                    sql = sql & "AND (pck.Debe > 0) "
                End If
            Else
                If gobjCond.TipoSaldo = 1 Then
                    sql = sql & "AND (pck.DEBE > 0) "
                ElseIf gobjCond.TipoSaldo = 2 Then
                    sql = sql & "AND (pck.HABER > 0) "
                End If
            End If
            If BandCliente = True And BandProveedor = False Then
                    sql = sql & "and bandcliente=1"
            ElseIf BandCliente = False And BandProveedor = True Then
                    sql = sql & "and bandproveedor=1"
            End If
      gobjMain.EmpresaActual.EjecutarSQL sql, numReg
    '---------------------------------------------------------------------------------
    '4  Consulta  final
        If gobjCond.TipoSaldo = 1 Then
            Condicion = Condicion & " AND vw.FechaVenci <= " & FechaYMD(gobjCond.FechaCorte, gobjMain.EmpresaActual.TipoDB)
        End If
        If Len(gobjCond.CodPCGrupo) > 0 Then
            Condicion = Condicion & " AND PCGrupo" & gobjCond.NumPCGrupo & ".CodGrupo" & gobjCond.NumPCGrupo & " = '" & _
                        gobjCond.CodPCGrupo & " '"
        End If
#If DAOLIB Then
    Trans = "vw.Codtrans & ' ' & CSTR(vw.Numtrans)"
#Else
    Trans = "vw.Codtrans + ' ' + CONVERT(varchar,vw.Numtrans)"
#End If
       sql = "SELECT "
        sql = sql & " (abs(sum(vw.debe)) -abs(sum(vw.VCANCELADO)))+ (abs(sum(vw.haber))) as saldo,"
        sql = sql & " FROM Gntrans INNER JOIN ((tmp3 vw "
        sql = sql & " ON Gntrans.Codtrans = vw.Codtrans  "
        sql = sql & "Where  Saldo > 0 " & Condicion & "  AND  (Gntrans.AfectaSaldoPC=1)"
        sql = sql & " having sum(vw.VALOR) >0 "
        Set rs = Me.OpenRecordset(sql)
    Set ConsPCSaldoconF_CorteFlujoEfectivo = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Saldos ProvCli con fecha de corte FE" & gobjCond.FechaCorte, "PC"
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
End Function

Public Function ListaPCProvCliFiltroNew1(BandProveedor As Boolean, _
                                    BandCliente As Boolean, _
                                    codPC As String, _
                                    Nombre As String, _
                                    nombreAlt As String, _
                                    Direccion As String, _
                                    RUC As String, _
                                    CodGrupoDesde As String, _
                                    CodGrupoHasta As String, _
                                    numG As Integer, _
                                    CodProvincia As String, _
                                    CodCanton As String, _
                                    CodVendedor As String, _
                                    BandSoloValida As Boolean, _
                                    BandRS As Boolean) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset, i As Integer
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If
    sql = "SELECT pc.CodProvCli, pc.Nombre, pc.nombreAlterno, a.CodTipoDocumento, pc.RUC, TipoProvCli , "
    sql = sql & " pcp.descripcion, pcc.descripcion, pcparr.descripcion,"
    sql = sql & " g1.CodGrupo1, g2.CodGrupo2, g3.CodGrupo3, g4.CodGrupo4 ,pc.observacion, PC.ESTADO  FROM " & _
          " PCGrupo4 g4 RIGHT JOIN (PCGrupo3 g3 RIGHT JOIN (PCGrupo2 g2 RIGHT JOIN (PCGrupo1 g1 RIGHT JOIN PCProvCli pc " & _
            " left join Anexo_TipoDocumento a on pc.IdTipoDocumento  = a.Id" & _
                          " ON g1.IdGrupo1 = pc.IdGrupo1) " & _
                    " ON g2.IdGrupo2 = pc.IdGrupo2) " & _
                " ON g3.IdGrupo3 = pc.IdGrupo3) " & _
                " ON g4.IdGrupo4 = pc.IdGrupo4 "
            sql = sql & " left join pcprovincia pcp on pcp.idprovincia=pc.idprovincia "
            sql = sql & " left join pccanton pcc on pcc.idcanton=pc.idcanton "
            sql = sql & " left join pcparroquia pcparr on pcparr.idparroquia = pc.idparroquia "
            sql = sql & " left join fcvendedor fcv on fcv.idvendedor = pc.idvendedor "
            
    If Not (BandProveedor And BandCliente) Then
        If BandProveedor Then
            sql = sql & " WHERE pc.BandProveedor=" & CadenaBool(True, TipoDB)
        Else
            sql = sql & " WHERE pc.BandCliente=" & CadenaBool(True, TipoDB)
        End If
    End If
            
    If Len(codPC) > 0 Then
        cond = cond & " and (CodProvCli LIKE '" & codPC & comodin & "') "
    End If
    If Len(Nombre) > 0 Then
        cond = cond & " and ((pc.Nombre LIKE '" & Nombre & comodin & "') " & _
                      "OR (pc. Nombre LIKE '" & Nombre & comodin & "')) "
    End If
    If Len(nombreAlt) > 0 Then
        cond = cond & " and ((pc.NombreAlterno LIKE '" & nombreAlt & comodin & "') " & _
                      "OR (pc. NombreAlterno LIKE '" & nombreAlt & comodin & "')) "
    End If
    If Len(Direccion) > 0 Then
        cond = cond & " and (Direccion1 LIKE '" & Descripcion & comodin & "') "
    End If
    If Len(RUC) > 0 Then
        cond = cond & " and (ruc LIKE '" & RUC & comodin & "') "
    End If
    If Not (Len(CodGrupoDesde) = 0 And Len(CodGrupoHasta) = 0) Then
        cond = cond & " AND (CodGrupo" & numG & " BETWEEN '" & CodGrupoDesde & _
            "' AND '" & CodGrupoHasta & "')"
    End If
    If Len(CodProvincia) > 0 Then
        cond = cond & " and (pcp.codprovincia='" & CodProvincia & "') "
    End If
    If Len(CodCanton) > 0 Then
        cond = cond & " and (pcc.codcanton='" & CodCanton & "') "
    End If
    If Len(CodVendedor) > 0 Then
        cond = cond & " and (fcv.codvendedor='" & CodVendedor & "') "
    End If
    If Len(cond) > 0 Then sql = sql & cond
    sql = sql & " ORDER BY pc.Nombre "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCProvCliFiltroNew1 = rs
    Else
        ListaPCProvCliFiltroNew1 = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


Public Function ListaGNGarantia(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    

    sql = "SELECT CodCompetencia, GNCompetencia.Nombre, GNCompetencia.Direccion, Telefono, Valor, GNCompetencia.FechaCaducidad, p.nombre, p.nombrealterno,  GNCompetencia.bandvalida"
    sql = sql & " FROM GNCompetencia inner join pcprovcli p on GNCompetencia.idprovcli=p.idprovcli"
    

    If BandSoloValida Then
        sql = sql & " where BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY CodCompetencia"

    Set rs = Me.OpenRecordset(sql)
    
    If BandRS Then
        Set ListaGNGarantia = rs
    Else
        ListaGNGarantia = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaGNGarantiaLibre(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    

    sql = "SELECT CodCompetencia, Nombre, Direccion, Telefono, Valor, FechaCaducidad FROM GNCompetencia "
    sql = sql & " Where bandlibre=0 "
    If BandSoloValida Then
        sql = sql & "and BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY CodCompetencia"

    Set rs = Me.OpenRecordset(sql)
    
    If BandRS Then
        Set ListaGNGarantiaLibre = rs
    Else
        ListaGNGarantiaLibre = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

'*********** Contrato

Public Function CreaGNContrato() As GNContrato
    Dim obj As GNContrato
    Set obj = New GNContrato
    Set obj.Empresa = Me
    Set CreaGNContrato = obj
    Set obj = Nothing
End Function

Public Function RecuperaGNContrato(key As Variant) As GNContrato
    Dim obj As GNContrato
    Set obj = New GNContrato
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaGNContrato = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function ListaGNContrato(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
    sql = "SELECT CodContrato, pc.nombre, pu, gnz.CodZona, com.CodCompetencia, "
    sql = sql & " com.Valor, com.FechaCaducidad, GNC.FechaInicio, GNC.FechaFinal, gnc.bandvalida "
    sql = sql & " FROM GNContrato  GNC "
    sql = sql & " left JOIN PCPROVCLI PC ON GNC.IDPROVCLI=PC.IDPROVCLI"
    sql = sql & " left JOIN GNCompetencia Com ON GNC.IDGarantia=com.IDcompetencia"
    sql = sql & " left JOIN vwtotalcontratoxLote vw ON GNC.codcontrato=vw.contrato"
    sql = sql & " left JOIN GNZona gnz ON GNC.IDZona=gnz.IDZona"
    

    sql = sql & " ORDER BY CodContrato"

    Set rs = Me.OpenRecordset(sql)
    
    If BandRS Then
        Set ListaGNContrato = rs
    Else
        ListaGNContrato = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaGnVehiculoParaFlex() As String
    Dim sql As String, cond As String, s As String
    Dim rs As Recordset
    
    sql = "SELECT CodVehiculo,Descripcion FROM gnVehiculo"
    
        sql = sql & " WHERE  BandValida= 1    "
    If Len(cond) > 0 Then sql = sql & " and " & cond
    sql = sql & " ORDER BY CodVehiculo"

    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 20 + 80)     'Código=20, Descripcion=80      '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    
    ListaGnVehiculoParaFlex = s
    rs.Close
    Set rs = Nothing
End Function


Public Function ListaGnVehiculoParaFlexDescripcion() As String
    Dim sql As String, cond As String, s As String
    Dim rs As Recordset
    
    sql = "SELECT Descripcion,CodVehiculo FROM GnVehiculo "
    sql = sql & " WHERE  BandValida= 1   "
    If Len(cond) > 0 Then sql = sql & " and " & cond
    sql = sql & " ORDER BY Descripcion"
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 20 + 80)     'Código=20, Descripcion=80      '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    ListaGnVehiculoParaFlexDescripcion = s
   rs.Close
    Set rs = Nothing
End Function


Public Function ListaGNGarantiaxCli(BandSoloValida As Boolean, BandRS As Boolean, CodCli As String) As Variant
    Dim sql As String, rs As Recordset
    

    sql = "SELECT g.CodCompetencia, g.Nombre, g.Direccion, g.Telefono, g.Valor, g.FechaCaducidad "
    sql = sql & " FROM GNCompetencia g inner join pcprovcli p on G.idprovcli=p.idprovcli"
    
    sql = sql & " WHERE 1=1"
    
    If Len(CodCli) > 0 Then
        sql = sql & "and codprovcli ='" & CodCli & "'"
    End If
    

    If BandSoloValida Then
        sql = sql & " AND BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY g.CodCompetencia"

    Set rs = Me.OpenRecordset(sql)
    
    If BandRS Then
        Set ListaGNGarantiaxCli = rs
    Else
        ListaGNGarantiaxCli = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaIVInventario2New(CodInventario As String, _
                                  CodAlterno As String, _
                                  Descripcion As String, _
                                  CodBodega As String, _
                                  CodGrupo() As String, _
                                  Tipo As String, _
                                  BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset, i As Integer
    
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If

    If Me.GNOpcion.IVKTipoDatoDouble Then
        sql = "SELECT CodInventario, CodAlterno1, Descripcion, Observacion, CodBodega, ExistDou as Exist, " & _
            "Precio1, Precio2, Precio3, CodGrupo1, CodGrupo2, CodGrupo3," & _
            " CodGrupo4, CodGrupo5, Tipo, TipoDesc, bandvalida FROM vwIVInventarioDou "
    Else
        sql = "SELECT CodInventario, CodAlterno1, Descripcion, Observacion, CodBodega, Exist, " & _
            "Precio1, Precio2, Precio3, CodGrupo1, CodGrupo2, CodGrupo3," & _
            " CodGrupo4, CodGrupo5, Tipo, TipoDesc, bandvalida FROM vwIVInventario "
    End If
    If BandSoloValida Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(BandValida=" & CadenaBool(True, TipoDB) & ")"
    End If
    
    If Len(CodInventario) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodInventario LIKE '" & CodInventario & comodin & "') "
    End If
    
    If Len(CodAlterno) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "((CodAlterno1 LIKE '" & CodAlterno & comodin & "') " & _
                      "OR (CodAlterno2 LIKE '" & CodAlterno & comodin & "')) "
    End If
    
    If Len(Descripcion) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(Descripcion LIKE '" & Descripcion & comodin & "') "
    End If
    
    If Len(CodBodega) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodBodega='" & CodBodega & "') "
    End If
    
    For i = LBound(CodGrupo) To UBound(CodGrupo)
        If Len(CodGrupo(i)) > 0 Then
            If Len(cond) > 0 Then cond = cond & "AND "
'            cond = cond & "(CodGrupo" & i & " LIKE '" & CodGrupo(i) & comodin & "') "
            cond = cond & "(CodGrupo" & i & " = '" & CodGrupo(i) & "') "
        End If
    Next i
    
    If Len(Tipo) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(Tipo=" & Tipo & ") "
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " ORDER BY CodInventario,CodBodega "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVInventario2New = rs
    Else
        ListaIVInventario2New = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


Public Function ListaIVInventario4New(CodInventario As String, _
                                  CodAlterno As String, _
                                  Descripcion As String, _
                                  CodBodega As String, _
                                  CodGrupo() As String, _
                                  Tipo As String, _
                                  BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset, i As Integer
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If
    sql = "SELECT CodInventario, Descripcion, Descripcion2, CodUnidad, CodBodega, Exist, " & _
            "Precio1, Precio2, Precio3, DescIV1, DescIV2, DescIV3," & _
            " DescIV4, DescIV5,Tipo, TipoDesc, BandValida FROM vwIVInventario "
    If BandSoloValida Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(BandValida=" & CadenaBool(True, TipoDB) & ")"
    End If
    If Len(CodInventario) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodInventario LIKE '" & CodInventario & comodin & "') "
    End If
    If Len(CodAlterno) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "((CodAlterno1 LIKE '" & CodAlterno & comodin & "') " & _
                      "OR (CodAlterno2 LIKE '" & CodAlterno & comodin & "')) "
    End If
    If Len(Descripcion) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(Descripcion LIKE '" & Descripcion & comodin & "') "
    End If
    If Len(CodBodega) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodBodega='" & CodBodega & "') "
    End If
    
    If Len(Tipo) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(Tipo=" & Tipo & ") "
    End If
    
    
    For i = LBound(CodGrupo) To UBound(CodGrupo)
        If Len(CodGrupo(i)) > 0 Then
            If Len(cond) > 0 Then cond = cond & "AND "
'            cond = cond & "(CodGrupo" & i & " LIKE '" & CodGrupo(i) & comodin & "') "
            cond = cond & "(CodGrupo" & i & " = '" & CodGrupo(i) & "') "
        End If
    Next i
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " ORDER BY CodInventario,CodBodega "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVInventario4New = rs
    Else
        ListaIVInventario4New = MiGetRows(rs)
        rs.Close
   End If
    Set rs = Nothing
End Function


Public Function ListaPCProvCliFiltroDetalleNew1(BandProveedor As Boolean, _
                                    BandCliente As Boolean, _
                                   codPC As String, _
                                    Nombre As String, _
                                    nombreAlt As String, _
                                    Direccion As String, _
                                    RUC As String, _
                                    CodGrupoDesde As String, _
                                    CodGrupoHasta As String, _
                                    numG As Integer, _
                                    CodProvincia As String, _
                                    CodCanton As String, _
                                    CodVendedor As String, _
                                    BandSoloValida As Boolean, _
                                    BandRS As Boolean) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset, i As Integer
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If
    sql = "SELECT pc.CodProvCli, pc.Nombre, pc.NombreAlterno,  a.CodTipoDocumento, pc.RUC, pc.direccion1, pc.Telefono1, "
    sql = sql & " pc.Telefono2, pc.Telefono3,pc.fax,pc.email, pcprov.descripcion,pccan.descripcion, pcparr.descripcion, fc.nombre , "
    sql = sql & " g1.Descripcion, g2.Descripcion, g3.Descripcion, g4.Descripcion ,pc.observacion, pc.diasplazo, pc.limitecredito , PC.ESTADO, "
    sql = sql & " case  pc.estado  when 0 then 'BUENO' WHEN 1 THEN 'REGULAR' ELSE 'MALO' END AS ESTADO, BandOmitirPendientes, bandCompensaIVA "
    sql = sql & "  FROM "
    sql = sql & "  PCGrupo4 g4 RIGHT JOIN (PCGrupo3 g3 RIGHT JOIN (PCGrupo2 g2"
    sql = sql & " RIGHT JOIN (PCGrupo1 g1 RIGHT JOIN PCProvCli pc "
    sql = sql & " ON g1.IdGrupo1 = pc.IdGrupo1) "
    sql = sql & " ON g2.IdGrupo2 = pc.IdGrupo2) "
    sql = sql & " ON g3.IdGrupo3 = pc.IdGrupo3) "
    sql = sql & " ON g4.IdGrupo4 = pc.IdGrupo4 "
    sql = sql & " LEFT JOIN pcprovincia pcprov on pc.idprovincia= pcprov.idprovincia"
    sql = sql & " LEFT JOIN pccanton pccan on pc.idcanton= pccan.idCanton"
    sql = sql & " LEFT JOIN pcparroquia pcparr on pc.idparroquia= pcparr.idparroquia"
    sql = sql & " LEFT JOIN fcvendedor fc on pc.idvendedor= fc.idvendedor"
    sql = sql & " left join Anexo_TipoDocumento a on pc.IdTipoDocumento  = a.Id "
    If Not (BandProveedor And BandCliente) Then
        If BandProveedor Then
            sql = sql & " WHERE BandProveedor=" & CadenaBool(True, TipoDB)
        Else
            sql = sql & " WHERE BandCliente=" & CadenaBool(True, TipoDB)
        End If
    End If
   If Len(codPC) > 0 Then
        cond = cond & " and (CodProvCli LIKE '" & codPC & comodin & "') "
    End If
    If Len(Nombre) > 0 Then
        cond = cond & " and ((pc.Nombre LIKE '" & Nombre & comodin & "') " & _
                      "OR (pc.Nombre LIKE '" & Nombre & comodin & "')) "
   End If
    
    If Len(nombreAlt) > 0 Then
        cond = cond & " and ((pc.NombreAlterno LIKE '" & nombreAlt & comodin & "') " & _
                      "OR (pc.NombreAlterno LIKE '" & nombreAlt & comodin & "')) "
   End If
    
    If Len(Direccion) > 0 Then
        cond = cond & " and (Direccion1 LIKE '" & Direccion & comodin & "') "
    End If
    If Len(RUC) > 0 Then
        cond = cond & " and (ruc LIKE '" & RUC & comodin & "') "
    End If
    
    If Len(CodProvincia) > 0 Then
        cond = cond & " and (pcprov.codprovincia='" & CodProvincia & "') "
    End If

    If Len(CodCanton) > 0 Then
        cond = cond & " and (pccan.codcanton='" & CodCanton & "') "
    End If

    If Len(CodVendedor) > 0 Then
        cond = cond & " and (fc.codvendedor='" & CodVendedor & "') "
    End If
    
    
    If Not (Len(CodGrupoDesde) = 0 And Len(CodGrupoHasta) = 0) Then
        cond = cond & " AND (CodGrupo" & numG & " BETWEEN '" & CodGrupoDesde & _
            "' AND '" & CodGrupoHasta & "')"
    End If
    If Len(cond) > 0 Then sql = sql & cond
    sql = sql & " ORDER BY pc.Nombre "
   Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCProvCliFiltroDetalleNew1 = rs
   Else
        ListaPCProvCliFiltroDetalleNew1 = MiGetRows(rs)
       rs.Close
    End If
    Set rs = Nothing
End Function

'AUC pendientes por entregar para mega
Public Function VericaPendientesXEntregar(ByVal TransIDs As String) As Variant
    Dim sql As String, rs As Recordset
    Dim Trans As String
    If Len(TransIDs) = 0 Then Exit Function
    On Error GoTo CapturaError
    'LO DESPACHADO
        VerificaExistenciaTabla (1)
        sql = "SELECT iv.idinventario,"
        sql = sql & " abs(sum(ivk.cantidad)) as Cantdesp"
       sql = sql & " Into TMP1"
        sql = sql & " From gntrans gnt inner join  gncomprobante gn "
        sql = sql & "on gn.codtrans = gnt.codtrans "
        sql = sql & "Inner Join ivkardex ivk Inner join ivinventario iv Inner join ivexist ive  on ive.idinventario = iv.idinventario "
        sql = sql & "On iv.idinventario = ivk.idinventario  On ivk.transid = gn.transid "
        sql = sql & "Where gn.estado <> 3 and iv.bandservicio = 0  And GN.IDTRANSFUENTE =" & TransIDs
        sql = sql & " And gnt.IdBodegaPre = ive.IdBodega"
        sql = sql & " group by iv.idinventario"
       Me.EjecutarSQL sql, 1
    Trans = "gn.CodTrans + ' ' + CONVERT(varchar, gn.NumTrans) AS Trans, "
    sql = "SELECT " & Trans & " iv.codinventario as CodPedido,iv.descripcion as DescPedido,abs(ivk.cantidad) as CantPed,IVE.EXIST"
    sql = sql & ",case when t.cantdesp is null then  (abs(ivk.cantidad)-ive.exist) else (abs(ivk.cantidad)-t.cantdesp-ive.exist) end as Dif     "
   sql = sql & " From gntrans gnt inner join  gncomprobante gn   "
    sql = sql & " on gn.codtrans = gnt.codtrans   Inner Join ivkardex ivk Inner join ivinventario iv  "
    sql = sql & " Left join tmp1 t on t.idinventario = iv.idinventario"
   sql = sql & " Inner join ivexist ive "
   sql = sql & " on ive.idinventario = iv.idinventario  On iv.idinventario = ivk.idinventario "
    sql = sql & " On ivk.transid = gn.transid"
    sql = sql & " Where gn.estado <> 3 and iv.bandservicio = 0 "
    sql = sql & " And GN.TRANSID = " & TransIDs
    sql = sql & " and  gnt.idbodegapre= ive.idbodega"
    Set rs = Me.OpenRecordset(sql)
    Set VericaPendientesXEntregar = rs
    Set rs = Nothing
    Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function



Public Function ListaDiasPlazoPCxIV2(CodPCGrupo As String, _
                                  CodIVGrupo As String, _
                                  BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset, i As Integer
    Dim NumIVGrupo As Integer, NumPCGrupo As String
    NumIVGrupo = CInt(Me.GNOpcion.ObtenerValor("PlazoIVGrupo")) + 1
    NumPCGrupo = Me.GNOpcion.ObtenerValor("PlazoPCGrupo")
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If
    sql = " Select plazo.CodPcGrupo,pcdc.descripcion, ivg.codgrupo" & NumIVGrupo & ", ivg.descripcion, Plazo.valor, Plazo.valorAdicional"
    sql = sql & " from pcdiascredito pcdc"
    sql = sql & " inner join PlazoIVGPCG Plazo"
    sql = sql & " inner join ivgrupo" & NumIVGrupo & " ivg"
    sql = sql & " on ivg.idgrupo" & NumIVGrupo & "=Plazo.idivgrupo"
    sql = sql & " on PCdc.iddiasCredito=Plazo.idpcgrupo"
    If Len(CodPCGrupo) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(Plazo.CodPCgrupo= '" & CodPCGrupo & " ') "
    End If
    If Len(CodIVGrupo) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(Plazo.CodIVgrupo= '" & CodIVGrupo & " ') "
    End If
        If Len(cond) > 0 Then sql = sql & " WHERE " & cond
        
    sql = sql & " ORDER BY Plazo.CodPcGrupo"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaDiasPlazoPCxIV2 = rs
    Else
        ListaDiasPlazoPCxIV2 = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


Public Function ListaPlazoPCxIV(BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset, NumIVGrupo As Integer, NumPCGrupo As Integer
    NumIVGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumIVGrupo")) + 1
    NumPCGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumPCGrupo")) + 1
    sql = " Select desct.CodPcGrupo,pcg.descripcion, desct.CodIvGRupo,ivg.descripcion, desct.valor"
    sql = sql & " from pcgrupo" & NumPCGrupo & " pcg"
    sql = sql & " inner join DescIVGPCG desct"
    sql = sql & " inner join ivgrupo" & NumIVGrupo & " ivg"
    sql = sql & " on ivg.idgrupo" & NumIVGrupo & "=desct.idivgrupo"
    sql = sql & " on PCg.idgrupo" & NumPCGrupo & "=desct.idpcgrupo"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPlazoPCxIV = rs
    Else
        ListaPlazoPCxIV = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


Public Function CreaPlazoPCxIV() As PlazoPcGrupoxIVGrupo
    Dim obj As PlazoPcGrupoxIVGrupo
    Set obj = New PlazoPcGrupoxIVGrupo
    Set obj.Empresa = Me
    Set CreaPlazoPCxIV = obj
    Set obj = Nothing
End Function

Public Function RecuperaPlazoPCxIV(key As Variant) As PlazoPcGrupoxIVGrupo
    Dim obj As PlazoPcGrupoxIVGrupo
    Set obj = New PlazoPcGrupoxIVGrupo
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaPlazoPCxIV = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function RecuperaProceso(key As Variant) As Proceso
    Dim obj As Proceso
    Set obj = New Proceso
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaProceso = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CreaProceso() As Proceso
    Dim obj As Proceso
    Set obj = New Proceso
    Set obj.Empresa = Me
    Set CreaProceso = obj
    Set obj = Nothing
End Function

Public Function ListaIVItemParaProduccion(bandCod As Boolean) As String
    Dim sql As String, cond As String, s As String
    Dim ind As Integer
    Dim rs As Recordset
    If bandCod Then
        sql = "SELECT IV.CodInventario,IV.Descripcion FROM vwIVInventarioRecuperar IV"
    Else
        sql = "SELECT IV.Descripcion,IV.CodInventario FROM vwIVInventarioRecuperar IV"
    End If
    If Len(Me.GNOpcion.ObtenerValor("RubroIVGrupo")) = 0 Then
        Err.Raise ERR_INVALIDO, "Empresa_GNOPCION", "Debe configurar el IVGrupo para produccion"
    End If
    ind = Me.GNOpcion.ObtenerValor("RubroIVGrupo") + 1
    sql = sql & " WHERE idgrupo" & ind & " > 0"
     ' sql = sql & " RIGHT JOIN IVPROCESO IVP ON IVP.CODPROCESO = IV.CODPROCESO"
    sql = sql & " ORDER BY IV.CodInventario"
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 20 + 80)     'Código=20, Descripcion=80      '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    ListaIVItemParaProduccion = s
    rs.Close
    Set rs = Nothing
End Function
Public Function ListaProcesoFlex(BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    'sql = "select codproceso,descripcion,CodUsuario,Secuencia as Prioridad "
    sql = "select codproceso,descripcion,Grupo,Secuencia as Prioridad "
    sql = sql & "from ivproceso "
    sql = sql & "  order by Secuencia "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaProcesoFlex = rs
    Else
        ListaProcesoFlex = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaProceso(codPC As String) As Variant
    Dim sql As String, rs As Recordset
    sql = "select ivp.codproceso from ivkproceso p "
    sql = sql & " inner join gncomprobante gn inner join pcprovcli pc on pc.idprovcli = gn.idclienteref  on gn.transid = p.transid "
    sql = sql & " inner join ivproceso ivp on ivp.idproceso = p.idproceso  "
    If Len(codPC) > 0 Then
        sql = sql & " where pc.codprovcli = '" & codPC & "'"
    End If
    sql = sql & " group by ivp.codproceso,ivp.idproceso "
    sql = sql & " order by ivp.idproceso "
   Set rs = Me.OpenRecordset(sql)
    'If BandRS Then
        Set ListaProceso = rs
    'Else
     '   ListaProceso = MiGetRows(rs)
      '  rs.Close
    'End If
    Set rs = Nothing
End Function
Public Function ListaIVInventarioProFinal(ByVal NumGrupo As Integer) As Recordset
    Dim sql As String, rs As Recordset
    sql = "SELECT iv.codinventario,iv.descripcion,iv.costoultimoingreso  "
    sql = sql & " from ivinventario iv "
    sql = sql & " INNER JOIN IVGRUPO" & NumGrupo & "  IVG ON IVG.IDGRUPO" & NumGrupo & " = IV.IDGRUPO" & NumGrupo
    sql = sql & " WHERE iv.idgrupo" & NumGrupo & " <> 0"
    Set rs = Me.OpenRecordset(sql)
    Set ListaIVInventarioProFinal = rs
    Set rs = Nothing
    On Error GoTo 0
    Set rs = Nothing
End Function
'AUC 11/02/08
Public Function ListaIVGrupoArbol(NumGrupo As Integer, BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    Dim numG As Integer
    numG = 1 + val(Me.GNOpcion.ObtenerValor("IVGrupoParaProceso"))
    sql = "SELECT  iv" & numG & ".idgrupo" & numG & ",iv" & numG & ".Descripcion,'0' as nivel,null as suma,'1' as tipo,'1' as Bandtotal FROM IVGrupo" & numG & " iv" & numG & "   "
    sql = sql & " UNION SELECT iv.idinventario, iv.descripcion,'1' as nivel,"
    sql = sql & " case when iv.idgrupo" & numG & " = iv" & numG & ".idgrupo" & numG & " then iv" & numG & ".idgrupo" & numG & " end as suma, '2' as tipo,'0'"
    sql = sql & " as Bandtotal  from ivinventario iv  inner join ivgrupo" & numG & " iv" & numG & " on iv" & numG & ".idgrupo" & numG & " = iv.idgrupo" & numG & " "
    If BandSoloValida Then
        sql = sql & " WHERE iv" & numG & ".BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY  Nivel "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVGrupoArbol = rs
    Else
        ListaIVGrupoArbol = MiGetRows(rs)
       rs.Close
    End If
    Set rs = Nothing
End Function
Public Function ListaSubArbol(ByVal cadena As String) As Variant
    Dim sql As String, rs As Recordset
    Dim rs1 As Recordset
    Dim numG As Integer
    'verifica que no exista el temporal
    sql = "SELECT * FROM sysobjects WHERE NAME =  'tmpProc'"
    Set rs = Me.OpenRecordset(sql)
    If Not (rs.EOF And rs.BOF) Then
        'elimina la tabla
        Me.EjecutarSQL "drop table TmpProc", 0
    End If
    Set rs = Nothing
    'verifica que no exista el Otro temporal
    sql = "SELECT * FROM sysobjects WHERE NAME =  'tmpProc1'"
    Set rs = Me.OpenRecordset(sql)
    If Not (rs.EOF And rs.BOF) Then
        'elimina la tabla
        Me.EjecutarSQL "drop table TmpProc1", 0
    End If
    Set rs = Nothing
    '------------------
    sql = "SELECT IVM.* INTO TMPPROC FROM IVMATERIA IVM INNER JOIN IVINVENTARIO IV  "
    sql = sql & " INNER JOIN IVPROCESO IVP ON IVP.IDPROCESO = IV.IDPROCESO "
    sql = sql & " ON IV.IDINVENTARIO = IVM.IDINVENTARIO"
    sql = sql & "  WHERE IVP.CODPROCESO IN (" & cadena & ")"
    Me.EjecutarSQL sql, 0
    '---------------------
    sql = "SELECT IVM.*  INTO tmpProc1 "
    sql = sql & "FROM IVINVENTARIO IV INNER JOIN TmpProc t  ON t.idmateria = IV.idinventario "
    sql = sql & "INNER JOIN IVMATERIA IVM ON IVM.IDINVENTARIO = IV.IDINVENTARIO"
    Me.EjecutarSQL sql, 0
    '---------------------
    sql = "SELECT IVP.IDPROCESO,IVP.DESCRIPCION , '0' as nivel,0 as suma,'1' as tipo,'1' as Bandtotal FROM IVPROCESO IVP "
    sql = sql & " WHERE IVP.CODPROCESO IN (" & cadena & ")"
    sql = sql & " UNION SELECT IV.IDINVENTARIO, IV.DESCRIPCION,'1' as nivel,CASE WHEN IV.IDPROCESO = IVP.IDPROCESO THEN "
    sql = sql & " IV.IDPROCESO END as suma,'2' as tipo,'1' as Bandtotal  "
    sql = sql & " FROM IVINVENTARIO IV INNER JOIN IVPROCESO IVP ON IVP.IDPROCESO = IV.IDPROCESO "
    sql = sql & " WHERE IVP.CODPROCESO IN (" & cadena & ")"
    'TERCERA UNION
    sql = sql & " UNION SELECT IV.IDINVENTARIO,IV.DESCRIPCION, '2' as nivel, CASE "
    sql = sql & " WHEN IV.IDINVENTARIO = T.IDMATERIA THEN T.IDINVENTARIO ELSE 0 END AS SUMA,'3' as tipo "
    sql = sql & " ,CASE WHEN IVM.IDINVENTARIO = T.IDMATERIA THEN '1' ELSE 0 END AS BANDTOTAL  "
    sql = sql & " FROM IVINVENTARIO IV INNER JOIN TmpProc t  ON t.idmateria = IV.idinventario "
    sql = sql & " LEFT JOIN IVMATERIA IVM ON IVM.IDINVENTARIO = T.IDMATERIA"
    sql = sql & " GROUP BY  IV.IDINVENTARIO,IV.DESCRIPCION, T.IDINVENTARIO,T.IDMATERIA, IVM.IDINVENTARIO "
    sql = sql & "UNION SELECT IV.IDINVENTARIO,IV.DESCRIPCION,'3' as nivel, CASE "
    sql = sql & "when iv.idinventario = t1.idmateria then t1.idinventario else 0 end as suma,'4' as tipo,'0' "
    sql = sql & "FROM IVINVENTARIO IV INNER JOIN tmpProc1 t1 ON t1.IDMATERIA =IV.IDINVENTARIO "
    sql = sql & "ORDER BY NIVEL  "
    Set rs1 = Me.OpenRecordset(sql)
    ListaSubArbol = MiGetRows(rs1)
    rs1.Close
    Set rs1 = Nothing
End Function
Public Function SacarCodInventario(desc As String) As String
   Dim sql As String, rs As Recordset
   sql = "SELECT CodInventario FROM IVInventario where descripcion = '" & desc & "'"
   Set rs = Me.OpenRecordset(sql)
   If Not IsNull(rs!CodInventario) Then SacarCodInventario = rs!CodInventario
   rs.Close
   Set rs = Nothing
End Function
'AUC 14/02/08 Para cargar los niveles de rubros
Public Function ListaIVInventarioProcesos(ByVal NumGrupo As Integer) As Variant
    Dim sql As String, rs As Recordset
    sql = "select iv.codinventario,iv.descripcion from ivinventario iv "
    sql = sql & " inner join ivgrupo" & NumGrupo & "  ivg on ivg.idgrupo" & NumGrupo & " = iv.idgrupo" & NumGrupo
    sql = sql & " and ivg.codgrupo" & NumGrupo & " = 'procesos'" 'VER DESPUES COMO CAMBIAR ESTO
    Set rs = Me.OpenRecordset(sql)
    ListaIVInventarioProcesos = MiGetRows(rs)
    rs.Close
    Set rs = Nothing
    On Error GoTo 0
End Function
'lista inventario y procesos que se relacionana cunado el codigo del proceso = codinventario
Public Function ListaIVInvProcesos() As Recordset
    Dim sql As String, rs As Recordset
    sql = "select iv.codinventario,iv.descripcion from ivinventario iv "
    sql = sql & " inner join ivproceso ivp on ivp.idproceso = iv.idproceso and iv.codinventario = ivp.codproceso"
    Set rs = Me.OpenRecordset(sql)
    Set ListaIVInvProcesos = rs
    On Error GoTo 0
End Function
Public Function ListaIVInvProcesosFlex() As Variant
    Dim sql As String, rs As Recordset
    sql = "select iv.codinventario,iv.descripcion from ivinventario iv "
    sql = sql & " inner join ivproceso ivp on ivp.idproceso = iv.idproceso and iv.codinventario = ivp.codproceso"
    Set rs = Me.OpenRecordset(sql)
    ListaIVInvProcesosFlex = MiGetRows(rs)
    rs.Close
    Set rs = Nothing
    On Error GoTo 0
End Function
'lista inventario y procesos que se relacionana cunado el codigo del proceso = codinventario
Public Function ClasificaItemsProcesos(ByVal codProc As String) As Variant
    Dim sql As String, rs As Recordset
    sql = "select iv.codinventario,iv.descripcion from ivinventario iv "
    sql = sql & " inner join ivproceso ivp on ivp.idproceso = iv.idproceso and iv.codinventario <> ivp.codproceso"
    sql = sql & " where ivp.codproceso = '" & codProc & "'"
    Set rs = Me.OpenRecordset(sql)
    ClasificaItemsProcesos = MiGetRows(rs)
    rs.Close
    Set rs = Nothing
    On Error GoTo 0
End Function
'Public Function RecuperaProcesos(ByVal TransID As Long) As Variant ', ByVal codItem As String) As Variant
Public Function RecuperaProcesos(ByVal transid As Long, ByVal codItem As String) As Variant
'    Dim sql As String, rs As Recordset
'
''    sql = "select ip.codproceso,ip.descripcion,abs(ivk.cantidad) as cant from ivkardex ivk inner join " & _
''          "gncomprobante gn on gn.transid = ivk.transid inner join ivinventario  iv " & _
''          "inner join  ivproceso ip on ip.idproceso = iv.idproceso " & _
''          "on iv.idinventario = ivk.idinventario " & _
''          "where gn.transId =" & TransID
''    sql = "SELECT ip.codproceso,ip.descripcion,abs(ivk.cantidad) as cant from ivkardex ivk inner join " & _
''          "gncomprobante gn on gn.transid = ivk.transid inner join ivinventario  iv " & _
''          "inner join  ivproceso ip on ip.idproceso = iv.idproceso " & _
''          "on iv.idinventario = ivk.idinventario " & _
''          "where gn.transId =" & TransID & " "
'    'sql = sql & "and iv.codinventario = '" & codItem & "'"
'        sql = "select ivp.codproceso,ivp.descripcion from gncomprobante gn "
'        sql = sql & "inner join ivkardex  ivk "
'        sql = sql & "inner join ivmateria ivm "
'        sql = sql & "inner join ivinventario iv "
'        sql = sql & "inner join ivproceso ivp on ivp.idproceso = iv.idproceso "
'        sql = sql & "on iv.idinventario = ivm.idinventario "
'        sql = sql & "on ivm.idmateria = ivk.idinventario "
'        sql = sql & "on ivk.transid = gn.transid "
'        sql = sql & "where gn.transId =" & TransID
'
'    Set rs = Me.OpenRecordset(sql)
'    Set RecuperaProcesos = rs ' MiGetRows(rs)
'    'rs.Close
'    Set rs = Nothing
'    On Error GoTo 0
'    Set rs = Nothing
End Function
Public Function SacarProcesos(ByVal transid As Long, ByVal CodCentroDet As String) As Variant
    Dim sql As String, rs As Recordset
On Error GoTo CapturaError
        sql = "SELECT ivp.codproceso,ivp.descripcion,SUM(IVK.CANTIDAD) AS horas "
        sql = sql & " from gncomprobante gn inner join ivkardex ivk "
      '  sql = sql & " Inner join gncentrocostodetalle gcc on gcc.idcentrodet = ivk.idcentrocosto"
        sql = sql & " inner join ivmateria ivm"
        sql = sql & " inner join ivinventario iv  "
        sql = sql & " inner join ivproceso ivp on ivp.idproceso = iv.idproceso on iv.idinventario = ivm.idinventario  "
        sql = sql & " on ivm.idmateria = ivk.idinventario on ivk.transid = gn.transid "
        sql = sql & " Where ivm.BandModificar = 0 And gn.TransID = " & transid
       ' sql = sql & " AND gcc.codcentrodet in (" & PreparaCadena(CodCentroDet) & ")"
        sql = sql & " group by ivp.codproceso,ivp.descripcion "
    Set rs = Me.OpenRecordset(sql)
    Set SacarProcesos = rs
    Set rs = Nothing
    Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function
'AUC 25/03/08
Public Function ConsIVProcesos(codPC As String) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    On Error GoTo CapturaError
    sql = "select ivp.codproceso,ivp.descripcion, "
    sql = sql & " case when p.cantidad <>0 then sum(isnull(dp.numhoras,0))/p.cantidad end as horas, p.cantidad,gcc.codcentrodet "
   sql = sql & " from ivkproceso p "
    sql = sql & " inner join gncentrocostodetalle gcc on gcc.idcentrodet = p.idcentrodet"
    'sql = sql & " inner join gncomprobante gn "
    'sql = sql & " inner join pcprovcli pc on pc.idprovcli= gn.idclienteref on gn.transid = p.transid   "
   sql = sql & " inner join ivproceso ivp on ivp.idproceso = p.idproceso   "
    sql = sql & " left JOIN detalleproceso dp on dp.idkp = p.idkp"
    sql = sql & " group by ivp.codproceso,ivp.descripcion,p.cantidad,gcc.codcentrodet"
   Set rs = Me.OpenRecordset(sql)
    Set ConsIVProcesos = rs
    Set rs = Nothing
    Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
    'Me.GrabaGNLogAccion "CONSULTA", "Cons. Procesos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "IV"
End Function

'AUC 25/03/08
Public Function ConsProcesosCliente(codPC As String) As Variant
  Dim sql As String, cond As String, s As String, rs As Recordset
sql = "select gcc.idcentrodet,gcc.codcentrodet,pc.nombre from ivkproceso p  inner join gncentrocostodetalle gcc  "
sql = sql & " inner join gncentrocosto gc "
sql = sql & "inner join pcprovcli pc on pc.idprovcli = gc.idCliente"
sql = sql & " on gc.idcentro = gcc.idcentro"
sql = sql & " on gcc.idcentrodet= p.idcentrodet"
If Len(codPC) > 0 Then
    sql = sql & " WHERE pc.codprovcli = '" & codPC & "'"
End If
sql = sql & " group by gcc.codcentrodet,pc.nombre,gcc.idcentrodet"
 Set rs = Me.OpenRecordset(sql)
    Set ConsProcesosCliente = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons. Procesos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "IV"
End Function

Public Function RecuperaIVKProceso(transid As Long, Pro As String) As IVKProceso
    Dim obj As IVKProceso
    Set obj = New IVKProceso
    Set obj.Empresa = Me
    On Error Resume Next
    obj.RecuperarProcesos transid, Pro
    If Err.Number = 0 Then Set RecuperaIVKProceso = obj
   Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function
Public Function EstadoProceso(transid As Long, CodProceso As String) As Byte
    Dim sql As String, rs As Recordset
On Error GoTo CapturaError
    sql = "SELECT kp.estado"
    sql = sql & " FROM IVKProceso kp  INNER JOIN IVProceso P ON p.idproceso = kp.idproceso"
     sql = sql & " WHERE p.descripcion = '" & CodProceso & "' AND kp.idcentrodet= " & transid

    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
          EstadoProceso = rs!Estado
    Else
          EstadoProceso = 0
    End If
    rs.Close
    Set rs = Nothing
    Exit Function
CapturaError:
    MsgBox Err.Description
    rs.Close
    Set rs = Nothing
    Exit Function
End Function
Public Sub EliminaReglas()
Dim sql As String
sql = "DELETE FROM REGLAS"
        mcnEmpresa.Execute sql, 1
End Sub
'AUC Hace listado de items solo de produccion
Public Function ListaIVInventarioProd(CodInventario As String, _
                                  CodAlterno As String, _
                                  Descripcion As String, _
                                  CodBodega As String, _
                                  CodGrupo() As String, _
                                  BandSoloValida As Boolean, _
                                  BandRS As Boolean, IdGrupo As Long, Optional Tipo As Integer) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset, i As Integer
    Dim ind As Integer
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If
    sql = "SELECT vwI.CodInventario, vwI.CodAlterno1, vwI.Descripcion, vwI.Observacion, vwI.CodBodega, vwI.Exist, " & _
            " vwR.CostoUltimoIngreso" & _
            " FROM vwIVInventario vwI inner join vwIVInventarioRecuperar vwR ON vwR.codinventario=vwI.codinventario"
   If BandSoloValida Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(vwI.BandValida=" & CadenaBool(True, TipoDB) & ")"
   End If
    If Len(CodInventario) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(vwI.CodInventario LIKE '" & CodInventario & comodin & "') "
   End If
    If Len(CodAlterno) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "((vwI.CodAlterno1 LIKE '" & CodAlterno & comodin & "') " & _
                      "OR (vwI.CodAlterno2 LIKE '" & CodAlterno & comodin & "')) "
    End If
    If Len(Descripcion) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(vwI.Descripcion LIKE '" & Descripcion & comodin & "') "
    End If
    If Len(CodBodega) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(vwI.CodBodega='" & CodBodega & "') "
    End If
        If Tipo = 0 Then
            ind = Me.GNOpcion.ObtenerValor("IVGrupoParaProduccion") + 1
            If Len(cond) = 0 Then
                cond = "idgrupo" & ind & " > 0"
            ElseIf Len(cond) > 0 Then
                cond = cond & " AND idgrupo" & ind & " > 0"
            End If
            If Len(cond) = 0 Then
                cond = cond & "(vwR.tipo1=0" & ")"
            ElseIf Len(cond) > 0 Then
                cond = cond & " AND (vwR.tipo1=0" & " ) "
            End If
        ElseIf Tipo = 1 Then
            If Len(cond) = 0 Then
                cond = cond & "(vwR.tipo1=1" & ")"
            ElseIf Len(cond) > 0 Then
                cond = cond & " AND (vwR.tipo1=1" & " ) "
            End If
        ElseIf Tipo = 2 Then
            'NO HAY NINGUNA RESTRICCION MUESTRA TODO
        ElseIf Tipo = 3 Then  'SOLO PARA REGLAS
            ind = Me.GNOpcion.ObtenerValor("IVGrupoParaReglas") + 1
            If Len(cond) = 0 Then
                cond = "idgrupo" & ind & " > 0"
            ElseIf Len(cond) > 0 Then
                cond = cond & " AND idgrupo" & ind & " > 0"
            End If
            If Len(cond) = 0 Then
                cond = cond & "(vwR.tipo1=0" & ")"
            ElseIf Len(cond) > 0 Then
                cond = cond & " AND (vwR.tipo1=0" & " ) "
            End If
        End If
    For i = LBound(CodGrupo) To UBound(CodGrupo)
        If Len(CodGrupo(i)) > 0 Then
            If Len(cond) > 0 Then cond = cond & "AND "
'            cond = cond & "(CodGrupo" & i & " LIKE '" & CodGrupo(i) & comodin & "') "
            cond = cond & "(vwI.CodGrupo" & i & " = '" & CodGrupo(i) & "') "
       End If
    Next i
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " ORDER BY vwI.CodInventario,vwI.CodBodega "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVInventarioProd = rs
    Else
        ListaIVInventarioProd = MiGetRows(rs)
        rs.Close
   End If
    Set rs = Nothing
End Function
'AUC 19/03/08
Public Function ListaGnResponsableFlexGrid() As String
    Dim sql As String, s As String
    Dim rs As Recordset
    sql = "SELECT CodResponsable,Nombre FROM GNResponsable "
    sql = sql & " ORDER BY CodResponsable"
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
'    s = "|" & GetStringDAO(rs)         '*** MAKOTO 07/ago/2000 Modificado
    If Not rs.EOF Then s = "|" & GetStringDAO(rs, 20 + 50)      '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|", "(nulo)")
#End If
    ListaGnResponsableFlexGrid = s
    rs.Close
    Set rs = Nothing
End Function
Public Function SacarCodInventarioN(ByVal codinve As String) As String
   Dim sql As String, rs As Recordset
   sql = "SELECT CodInventario FROM IVInventario where descripcion = '" & codinve & "'"
   Set rs = Me.OpenRecordset(sql)
   If Not IsNull(rs!CodInventario) Then SacarCodInventarioN = rs!CodInventario
  rs.Close
   Set rs = Nothing
End Function
Public Function rsVerificaIvMateria(ByVal codinve As String) As Recordset
   Dim sql As String, rs As Recordset
On Error GoTo CapturaError
   sql = "SELECT iv.descripcion,ivm.bandprincipal FROM IVMateria ivm inner join ivinventario iv " & _
         "ON iv.idinventario = ivm.idmateria  where iv.codinventario = '" & codinve & "'"
   Set rs = Me.OpenRecordset(sql)
   Set rsVerificaIvMateria = rs
   Set rs = Nothing
    Exit Function
CapturaError:
    MsgBox Err.Description
    Exit Function
End Function
'AUC 18/08/2008 Saber si el item esta en categoria de material
Public Function ItemEsMaterial(ByVal codinve As String) As Boolean
    Dim sql As String, rs As Recordset
    On Error GoTo CapturaError
    sql = "SELECT ivm.bandmodificar "
    sql = sql & " FROM IVInventario iv left join ivmateria ivm on ivm.idmateria = iv.idinventario  "
    sql = sql & "where iv.codinventario = '" & codinve & "'"
    Set rs = Me.OpenRecordset(sql)
    If IsNull(rs!BandModificar) Then
        ItemEsMaterial = False
    ElseIf rs!BandModificar = 0 Then
        ItemEsMaterial = False
    Else
        ItemEsMaterial = True
   End If
    rs.Close
    Set rs = Nothing
    Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function
Public Function RecuperaGNCentroUltCar(ByVal key As String) As Long
    Dim sql As String
    Dim rs As Recordset
    Dim NumCaracter As Long
    On Error GoTo CapturaError
    NumCaracter = Len(key)
    VerificaExistenciaTabla 1
    sql = "Select cast(right(codCentrodet, 3 )  as integer)  as UltimoNumero into tmp1 FROM gncentrocostoDetalle WHERE CodCentrodet like '" & key & "%'"
   Me.Execute sql
    'Toma el ultimo numero
    sql = "select  top 1 * from tmp1 order by Ultimonumero desc"
   Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        RecuperaGNCentroUltCar = rs!UltimoNumero
   Else
        RecuperaGNCentroUltCar = 0
    End If
    Set rs = Nothing
    Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function
'Public Function CreaGNCentroCostoDet() As GNCentroCostoDetalle
'    Dim obj As GNCentroCostoDetalle
'    Set obj = New GNCentroCostoDetalle
'    Set obj.GNCentroCosto = Me
'    Set CreaGNCentroCostoDet = obj
'    Set obj = Nothing
'End Function


Public Function ListaAnexoTipoDocumentoFlexGrid(TipoCuenta As Integer) As String
    Dim sql As String, cad As String, rs As Recordset
    
    sql = "SELECT CodTipoDocumento, Descripcion FROM anexo_tipodocumento WHERE bandvalida=1 "
    sql = sql & " ORDER BY CodTipoDocumento"
    Set rs = Me.OpenRecordset(sql)

    'Pero por ahora uso lo siguiente para controlar cuentas de total y de movimiento
#If DAOLIB Then
    cad = "|" & GetStringDAO(rs, 21 + (20 + 80 + 2))        'Código+'*'=21, Space+NombreCuenta+'[]'=20+80+2
#Else
    If Not rs.EOF Then cad = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    
    rs.Close
    Set rs = Nothing
    
    ListaAnexoTipoDocumentoFlexGrid = cad
End Function

Public Function ListaIVInventario5(CodInventario As String, _
                                  CodAlterno As String, _
                                  Descripcion As String, _
                                  CodBodega As String, _
                                  CodGrupo() As String, _
                                  Tipo As String, _
                                  BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset, i As Integer, W As Variant
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If
    sql = "SELECT CodInventario, CodAlterno1, iv.Descripcion, Descripcion2, CodUnidad, "
    If Len(Me.GNOpcion.OrdenBodegas) > 0 Then
        W = Split(Me.GNOpcion.OrdenBodegas, ",")
        For i = 0 To UBound(W)
            sql = sql & " vw" & i & ".Exist, "
        Next i
        'sql = sql mid
    Else
        sql = sql & " vw1.Exist , vw2.Exist, "
    End If
    
    sql = sql & " round(Precio1+(Precio1*porcentajeIVA),2), "
    sql = sql & " round(Precio2+(Precio2*porcentajeIVA),2), "
    sql = sql & " round(Precio3+(Precio3*porcentajeIVA),2), "
    sql = sql & " round(Precio4+(Precio4*porcentajeIVA),2), "
    sql = sql & " round(Precio5+(Precio5*porcentajeIVA),2),"
    sql = sql & " round(Precio6+(Precio6*porcentajeIVA),2) , BandIVA, "
    sql = sql & " CodGrupo1, IVG1.descripcion, CodGrupo2, IVG2.Descripcion, CodGrupo3, IVG3.descripcion," & _
            " CodGrupo4, IVG4.descripcion, CodGrupo5, IVG5.descripcion ,Tipo,   " 'FROM vwIVInventarioIVA2
            
    sql = sql & " Case IV.Tipo"
    sql = sql & " when 0 then 'NORMAL'"
    sql = sql & " when 1 then 'RECETA'"
    sql = sql & " when 2 then 'FAMILIA'"
    sql = sql & " when 3 then 'CAM.PRE'"
    sql = sql & " when 4 then 'PREPARA'"
    sql = sql & " when 5 then 'PROMO'"
    sql = sql & " when 6 then 'RUBRO'"
    sql = sql & " when 7 then 'POR.PRE'"
    sql = sql & " when 8 then 'MATRIZ' END AS TipoDesc, iv.BandValida "
            
    sql = sql & " FROM IVInventario IV"
    sql = sql & " left JOIN IVUnidad IVU on Iv.idunidad = IVU.IDUnidad"
    sql = sql & " left join IVGRUPO1 IVG1 ON IV.IDGRUPO1=IVG1.IDGRUPO1"
    sql = sql & " left join IVGRUPO2 IVG2 ON IV.IDGRUPO2=IVG2.IDGRUPO2"
    sql = sql & " left join IVGRUPO3 IVG3 ON IV.IDGRUPO3=IVG3.IDGRUPO3"
    sql = sql & " left join IVGRUPO4 IVG4 ON IV.IDGRUPO4=IVG4.IDGRUPO4"
    sql = sql & " left join IVGRUPO5 IVG5 ON IV.IDGRUPO5=IVG5.IDGRUPO5"
    If Len(Me.GNOpcion.OrdenBodegas) > 0 Then
        For i = 0 To UBound(W)
            sql = sql & " LEFT JOIN vwExistencia" & Mid$(W(i), 2, Len(W(i)) - 2) & " vw" & i & " on iv.idinventario = vw" & i & ".idinventario"
        Next i
    Else
        sql = sql & " LEFT JOIN vwExistencia1 vw1 on iv.idinventario = vw1.idinventario"
        sql = sql & " LEFT JOIN vwExistencia2 vw2 on iv.idinventario = vw2.idinventario"
    End If
            
    If BandSoloValida Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(iv.BandValida=" & CadenaBool(True, TipoDB) & ")"
    End If
    If Len(CodInventario) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodInventario LIKE '" & CodInventario & comodin & "') "
    End If
    If Len(CodAlterno) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "((CodAlterno1 LIKE '" & CodAlterno & comodin & "') " & _
                      "OR (CodAlterno2 LIKE '" & CodAlterno & comodin & "')) "
    End If
    If Len(Descripcion) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(iv.Descripcion LIKE '" & Descripcion & comodin & "') "
    End If
    If Len(CodBodega) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodBodega='" & CodBodega & "') "
    End If
    
    If Len(Tipo) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(Tipo=" & Tipo & ") "
    End If
    
    
    For i = LBound(CodGrupo) To UBound(CodGrupo)
        If Len(CodGrupo(i)) > 0 Then
            If Len(cond) > 0 Then cond = cond & "AND "
'            cond = cond & "(CodGrupo" & i & " LIKE '" & CodGrupo(i) & comodin & "') "
            cond = cond & "(CodGrupo" & i & " = '" & CodGrupo(i) & "') "
        End If
    Next i
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    'sql = sql & " ORDER BY CodInventario,CodBodega "
    sql = sql & " ORDER BY CodInventario "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVInventario5 = rs
    Else
        ListaIVInventario5 = MiGetRows(rs)
        rs.Close
   End If
    Set rs = Nothing
End Function


Public Function ConsIVKxMesTotalAnioAnterior(CodInventario As String) As Variant
    Dim sql As String, cond As String, rs As Recordset
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsIVKardexPorFecha")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("prmCodBodega") = gobjCond.CodBodega1
    qdef.Parameters("CodItem1") = IIf(Len(gobjCond.CodItem1) = 0, "!", gobjCond.CodItem1)
    qdef.Parameters("CodItem2") = IIf(Len(gobjCond.CodItem2) = 0, String$(20, "z"), gobjCond.CodItem2)
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
'    sql = "spConsIVKardexPorMesSinBodega " & _
                FechaYMD(DateAdd("yyyy", -1, Me.GNOpcion.FechaInicio), TipoDB) & ",'" & _
                CodInventario & "'"
    sql = "spConsIVKardexPorMesSinBodega " & _
                FechaYMD(DateAdd("yyyy", -1, "01/01/" & DatePart("yyyy", Date)), TipoDB) & ",'" & _
                CodInventario & "'"
                
                
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    Set ConsIVKxMesTotalAnioAnterior = rs
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Kardex xmes Total Anteriro" & gobjCond.fecha1 & "-" & gobjCond.fecha2, "IV"
End Function

Public Function ListaProcesoGrid(BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset, s As String
    sql = "select codproceso,descripcion "
    sql = sql & "from ivproceso "
    sql = sql & "  order by idproceso "
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 20 + 80)     'Código=20, Descripcion=80      '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    ListaProcesoGrid = s
    rs.Close
    Set rs = Nothing
End Function
Public Function RecuperaProcesosRubro(ByVal codItemPadre As String, ByVal cantPadre As Currency) As Variant
    Dim sql As String, rs As Recordset
    Dim item As IVInventario
On Error GoTo CapturaError
        Set item = Me.RecuperaIVInventarioQuick(codItemPadre)
        'If item.NumFamiliaDetalle > 0 Then
            sql = "SELECT ivp.codproceso,ivp.descripcion,ivm.cantidad*" & cantPadre & " as Cant "
            sql = sql & " from Ivinventario iv  "
            sql = sql & " Inner Join ivmateria ivm "
            sql = sql & " Inner join ivproceso ivp "
            sql = sql & " on ivp.idproceso = ivm.idproceso  "
            sql = sql & " on ivm.idinventario = iv.idinventario  "
            sql = sql & " Where iv.codinventario = '" & codItemPadre & "'"
            Set rs = Me.OpenRecordset(sql)
'        Else
'            sql = "Select ivp.codproceso,ivp.descripcion,ivk.cantidad as cant "
'            sql = sql & "From ivproceso ivp  "
'            sql = sql & "Inner join ivinventario iv   "
'            sql = sql & "Inner join ivkardex ivk   "
'            sql = sql & "ON ivk.idinventario = iv.idinventario "
'            sql = sql & "ON iv.idproceso = ivp.idproceso "
'            sql = sql & "WHERE ivk.transid = 120 "
'            sql = sql & "AND IVK.IdPadre = " & item.IdInventario
'            Set rs = Me.OpenRecordset(sql)
        'End If
    Set item = Nothing
    Set RecuperaProcesosRubro = rs
    Set rs = Nothing
    Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Set item = Nothing
    Exit Function
End Function
Public Function RecuperaIVKProcesoM(transid As Long, CodCentro As String, Pro As String) As IVKProceso
    Dim obj As IVKProceso
    Set obj = New IVKProceso
    Set obj.Empresa = Me
    On Error Resume Next
    obj.RecuperarProcesosM transid, CodCentro, Pro
    If Err.Number = 0 Then Set RecuperaIVKProcesoM = obj
   Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function
Public Function ConsAFInvetarioDepAnterior( _
                    Optional ByVal NumGrupo As Integer, _
                    Optional ByVal CodGrupo As String, _
                    Optional ByVal codItem As String) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    
    '*** MAKOTO 03/oct/00
    sql = "SELECT IdCuentaDepreAcumulada, "
    
    
    sql = sql & " CodGrupo" & NumGrupo & ", afg.descripcion, IdInventario,  CodInventario, af.Descripcion, TipoDepre,"
    sql = sql & " numVidaUtil, FechaCompra, fechaIniDepre, CostoUltimoIngreso, CostoResidual,"
    sql = sql & " (DepAnterior) as DepAnterior , IdCuentaDepreGasto, IdCuentaDepreAcumulada"
    
        sql = sql & " from afinventario af inner join afgrupo" & NumGrupo
        sql = sql & " afg on af.idgrupo" & NumGrupo & "=afg.idgrupo" & NumGrupo
        sql = sql & " where af.BandValida=1"
        sql = sql & " and fechaIniDepre <= " & FechaYMD(gobjMain.objCondicion.FechaCorte, gobjMain.EmpresaActual.TipoDB)
        sql = sql & " and fechaIniDepre > " & FechaYMD("30/12/1899", gobjMain.EmpresaActual.TipoDB)
        sql = sql & " and numVidaUtil>0 "
'        sql = sql & " and numVidaUtil>(DepAnterior+NumeroDepre) "
        sql = sql & " and Bandservicio=0  "
        sql = sql & " and DepAnterior <> 0 "
        If Len(CodGrupo) > 0 Then
            sql = sql & " and codGrupo" & NumGrupo & " ='" & CodGrupo & "'"
        End If

        If Len(codItem) > 0 Then
            sql = sql & " AND codInventario ='" & codItem & "'"
        End If

    sql = sql & " ORDER BY  CodInventario "
    Set rs = Me.OpenRecordset(sql)
    Set ConsAFInvetarioDepAnterior = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta AFInventario " & gobjCond.fecha1 + gobjCond.Hora1 & "-" & gobjCond.fecha2 + gobjCond.Hora2, "GN"
End Function


Public Function ConsCTBalanceCompFE() As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim cta1 As String, cta2 As String
    
    'Si no hay condición, coge todas las cuentas
    cta1 = "0"
    cta2 = String(20, "9")
    If Len(gobjCond.CodCuenta1) > 0 Then cta1 = gobjCond.CodCuenta1
    If Len(gobjCond.CodCuenta2) > 0 Then cta2 = gobjCond.CodCuenta2

#If DAOLIB Then
    Dim qdef As QueryDef
    
    Set qdef = mdbEmpresa.QueryDefs("spConsCTBalanceComp")
    With qdef
        .Parameters("FechaDesde") = gobjCond.fecha1
        .Parameters("FechaHasta") = gobjCond.fecha2
        .Parameters("CodCuenta1") = cta1
        .Parameters("CodCuenta2") = cta2
        .Parameters("NumMoneda") = gobjCond.numMoneda
        .Parameters("CodSucursal") = gobjCond.Sucursal 'jeaa
        Set rs = .OpenRecordset(dbOpenSnapshot, dbReadOnly)
    End With
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
'    '**************************
'    gobjCond.Sucursal = "'S1'"
'    '**************************
'    If Me.GNOpcion.ObtenerValor("PermitirDistribucionGastos") = "1" Then
'        If Len(gobjCond.Sucursal) > 0 Then
'            sql = "spConsCTBalanceCompxGasto "
'        Else
'            sql = "spConsCTBalanceComp "
'        End If
'    Else
        sql = "spConsCTBalanceCompFE "
'    End If
    sql = sql & gobjCond.numMoneda & ",'" & cta1 & "','" & cta2 & "'," & _
            FechaYMD(gobjCond.fecha1, TipoDB) & "," & FechaYMD(gobjCond.fecha2, TipoDB) & ",'" & gobjCond.Sucursal & "'"    ' jeaa 17-01-04 para filtrado por sucursal
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    Set ConsCTBalanceCompFE = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Balance Comprobacion FE " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "CT"
End Function


Public Function ConsPRKardexNew() As Variant
    Dim sql As String, cond As String, rs As Recordset
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsCTLibroMayor")
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    qdef.Parameters("CodCuenta1") = IIf(Len(gobjCond.CodCuenta1) = 0, "0", gobjCond.CodCuenta1)
    qdef.Parameters("CodCuenta2") = IIf(Len(gobjCond.CodCuenta2) = 0, "99999999999999999999", gobjCond.CodCuenta2)
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodTrans") = gobjCond.CodTrans
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
        sql = "spConsPRLibroMayorNew "
    sql = sql & gobjCond.numMoneda & ",'" & _
                gobjCond.CodCuenta1 & "','" & _
                gobjCond.CodCuenta2 & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB) & ",'" & gobjCond.Sucursal & "','" & _
                gobjCond.CodTrans & "'"
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    Set ConsPRKardexNew = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Libro Mayor Presupuesto" & gobjCond.fecha1 & "-" & gobjCond.fecha2, "PR"

End Function


Public Function ConsTSPorCobrarPagarxCheque( _
                    ByVal PorCobrar As Boolean, _
                    ByVal CodProvcli As String, _
                    ByVal FechaVenci As Date, _
                    ByVal CodForma As String, _
                    ByVal CodMoneda As String, _
                    ByVal CodGrupo1 As String, _
                    ByVal CodVendedor As String, _
                    ByVal CodSucursal As String, _
                    ByVal Codelemento As String, _
                    ByVal CodBanco As String) As Variant
    Dim aux_codpc As String, aux_f1 As Date, aux_f2 As Date
    Dim aux_PorCobrar As Boolean, aux_Cliente As Boolean, aux_Proveedor As Boolean
    Dim aux_CodForma As String, aux_CodMoneda As String, aux_codgrupo As String
    Dim aux_incluircero As Boolean, aux_codVendedor As String, aux_Empleado As Boolean
    Dim aux_codElemento As String, aux_codBanco As String

   With gobjMain.objCondicion
        'Conservar valores actuales para que no afecte a otras consultas
        aux_codpc = .CodPC1
        aux_f1 = .fecha1
        aux_f2 = .fecha2
        aux_PorCobrar = .PorCobrar
        aux_Cliente = .Cliente
        aux_Proveedor = .Proveedor
        aux_Empleado = .Empleado
        aux_CodForma = .CodForma
        aux_CodMoneda = .CodMoneda
        aux_codgrupo = .CodGrupo
        aux_incluircero = .IncluirCero
        aux_codVendedor = .Usuario1
        aux_codElemento = .Codelemento
        aux_codBanco = .CodBanco1

        .PorCobrar = PorCobrar
        .Cliente = True
        .Proveedor = True
        '.Empleado = True
        
        .CodPC1 = CodProvcli
        .fecha1 = Me.GNOpcion.FechaInicio
        .fecha2 = FechaVenci
        .CodForma = CodForma
        .CodMoneda = CodMoneda
        .CodGrupo = CodGrupo1
        .IncluirCero = False
        .Usuario1 = CodVendedor
        .Sucursal = CodSucursal
        .Codelemento = Codelemento
        .CodBanco1 = CodBanco

        'Set ConsTSPorCobrarPagarxCheque = ConsTSPorCobrarPagarCheque()
        Set ConsTSPorCobrarPagarxCheque = Me.Empresa2.ConsTSPorCobrarPagarCheque2016()
        
        'Recuperar valores reservados
        .CodPC1 = aux_codpc
        .fecha1 = aux_f1
        .fecha2 = aux_f2
        .PorCobrar = aux_PorCobrar
        .Cliente = aux_Cliente
        .Proveedor = aux_Proveedor
        .Empleado = aux_Empleado
        .CodForma = aux_CodForma
        .CodMoneda = aux_CodMoneda
        .CodGrupo = aux_codgrupo
        .IncluirCero = aux_incluircero
        .Usuario1 = aux_codVendedor
        .Sucursal = CodSucursal
        .Codelemento = Codelemento
        .CodBanco1 = CodBanco

   End With
End Function



Public Function ConsTSPorCobrarPagarCheque() As Variant
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim objCond As Condicion
    
    Set objCond = gobjMain.objCondicion
    
    'Si no está especificada la moneda, coge la Moneda predeterminada
    If Len(objCond.CodMoneda) = 0 Then objCond.CodMoneda = MONEDA_PRE
    numMoneda = Me.GNOpcion.IndiceMoneda(objCond.CodMoneda)
    
#If DAOLIB Then
    sql = "SELECT Id, CodProvCli, Nombre, TransID, CodTrans, Trans, CodForma,NumLetra, Doc, "
    Select Case numMoneda
    Case 1:  sql = sql & "Valor1 AS Valor, VCancelado1 AS VCancelado, " & _
                          "Valor1-VCancelado1 AS Saldo, CodMoneda, Cancela, 1 AS Cotizacion, "
    Case 2:  sql = sql & "Valor2 AS Valor, VCancelado2 AS VCancelado, " & _
                          "Valor2-VCancelado2 AS Saldo, CodMoneda, Cancela, Cotizacion2 AS Cotizacion, "
    Case 3:  sql = sql & "Valor3 AS Valor, VCancelado3 AS VCancelado, " & _
                          "Valor3-VCancelado3 AS Saldo, CodMoneda, Cancela, Cotizacion3 AS Cotizacion, "
    Case 4:  sql = sql & "Valor4 AS Valor, VCancelado4 AS VCancelado, " & _
                          "Valor4-VCancelado4 AS Saldo, CodMoneda, Cancela, Cotizacion4 AS Cotizacion, "
    End Select
    sql = sql & "FechaEmision, Plazo, FechaVenci "
    If objCond.PorCobrar Then
        sql = sql & " FROM vwConsPCPorCobrar "
    Else
        sql = sql & " FROM vwConsPCPorPagar "
    End If
    
    'Solo los que tengan saldo >0   (Necesario)
    cond = "(Valor" & objCond.numMoneda & ">VCancelado" & objCond.numMoneda & ")"
    
    'Condición de FechaVenci    (Necesario)             '*** MAKOTO 10/dic/00 Modificado
    cond = cond & " AND (FechaVenci BETWEEN " & _
                    FechaYMD(objCond.fecha1, TipoDB) & " AND " & _
                    FechaYMD(objCond.fecha2, TipoDB) & ")"
    
    'Condición de CodMoneda     (Necesario)
    If Len(cond) > 0 Then cond = cond & " AND "
    cond = cond & "(CodMoneda='" & Me.GNOpcion.CodMoneda(numMoneda) & "')"
    
    'Condición de CodProvCli    (Opcional)
    If Len(objCond.CodPC1) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodProvCli='" & objCond.CodPC1 & "')"
    End If
    
    'Condición de CodForma    (Opcional)
    If Len(objCond.CodForma) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodForma='" & objCond.CodForma & "')"
    End If
    
    'Condición de Cod. Grupo1 de prov/cliente (Opcional)
    If Len(objCond.CodGrupo) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodGrupo1='" & objCond.CodGrupo & "')"
    End If
    
    'Condición de si incluir cliente/proveedor          '*** MAKOTO 10/dic/00
    If Len(cond) > 0 Then cond = cond & " AND "
    cond = cond & "(BandCliente=" & CadenaBool(objCond.Cliente, TipoDB) & _
                    " OR BandProveedor=" & CadenaBool(objCond.Proveedor, TipoDB) & ")"
    
    If Len(cond) > 0 Then sql = sql & " WHERE (" & cond & ")"
    sql = sql & " ORDER BY CodProvCli,FechaVenci"
#Else
    If Len(objCond.Sucursal) = 0 Then
    
    
    
    sql = "spConsTSPorCobrarPagarCheque " & numMoneda & ", " & _
                objCond.CodMoneda & "," & _
                CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                CadenaBool(objCond.Cliente, TipoDB) & "," & _
                CadenaBool(objCond.Proveedor, TipoDB) & "," & _
                CadenaBool(objCond.Empleado, TipoDB) & "," & _
                FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                objCond.CodPC1 & "','" & _
                objCond.CodPC1 & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodForma & "','" & _
                objCond.Codelemento & "','" & _
                objCond.CodGrupo & "','" & _
                objCond.Usuario1 & "','" & _
                objCond.Usuario1 & "'," & _
                IIf(Me.GNOpcion.Los100DocCobroPago, 1, 0)
                If InStr(1, UCase(Me.GNOpcion.NombreEmpresa), "ITAL") Then
                    sql = sql & ",2"
                Else
                    sql = sql & ",1"
                End If
                 sql = sql & ",'" & objCond.CodBanco1 & "'"
                
                
    Else               'AUC cambiado para agregar el filtro sucusal
            sql = "spConsTSPorCobrarPagarVendedorSucursal " & numMoneda & ", " & _
                objCond.CodMoneda & "," & _
                CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                CadenaBool(objCond.Cliente, TipoDB) & "," & _
                CadenaBool(objCond.Proveedor, TipoDB) & "," & _
                FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                objCond.CodPC1 & "','" & _
                objCond.CodPC1 & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodGrupo & "','" & _
                objCond.Usuario1 & "','" & _
                objCond.Usuario1 & "'," & _
                IIf(Me.GNOpcion.Los100DocCobroPago, 1, 0) & ",'" & _
                objCond.Sucursal & "','" & _
                objCond.Sucursal & "'"
                
                
    End If
#End If
    Set rs = Me.OpenRecordset(sql)
    Set ConsTSPorCobrarPagarCheque = rs
    Set rs = Nothing
    Set objCond = Nothing
End Function


Public Function ConsPRBalanceLinealNew(bandBalance As Boolean) As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim v As Variant, v2() As Variant, i As Long, j As Long
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsCTBalance")
    qdef.Parameters("FechaDesde") = IIf(bandBalance, Me.GNOpcion.FechaInicio, gobjCond.fecha1)
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodCuenta1") = "0"
    qdef.Parameters("CodCuenta2") = String(20, "9")
    qdef.Parameters("CodSucursal") = gobjCond.Sucursal ' ********* jeaa
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
    If Not rs.EOF Then
        rs.MoveLast
        rs.MoveFirst
        v = rs.GetRows(rs.RecordCount)
    End If
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    sql = "spConsPRBalanceLinealNew "
    sql = sql & gobjCond.numMoneda & ",'0','" & _
                        String(20, "9") & "'," & _
                        FechaYMD(IIf(bandBalance, Me.GNOpcion.FechaInicio, gobjCond.fecha1), TipoDB) & "," & _
                        FechaYMD(gobjCond.fecha2, TipoDB) & ",'" & gobjCond.Sucursal & "'," & _
                        FechaYMD(IIf(Len(Me.GNOpcion.ObtenerValor("FechaReforma1")) > 0, Me.GNOpcion.ObtenerValor("FechaReforma1"), Date), TipoDB) & "," & _
                        FechaYMD(IIf(Len(Me.GNOpcion.ObtenerValor("FechaReforma2")) > 0, Me.GNOpcion.ObtenerValor("FechaReforma2"), Date), TipoDB) & "," & _
                        FechaYMD(IIf(Len(Me.GNOpcion.ObtenerValor("FechaReforma3")) > 0, Me.GNOpcion.ObtenerValor("FechaReforma3"), Date), TipoDB) & "," & _
                        FechaYMD(IIf(Len(Me.GNOpcion.ObtenerValor("FechaReforma4")) > 0, Me.GNOpcion.ObtenerValor("FechaReforma4"), Date), TipoDB)
                        
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    If Not rs.EOF Then v = rs.GetRows()
#End If
    'Mayoriza los valores
    MayorizaPresupuesto v
    'Pasa los valores de v a v2 cambiando formato
    ' y filtrando registros por TipoCuenta, Nivel y Valor
    j = 0
    For i = 0 To UBound(v, 2)
        If Not IsNull(v(BAL_VALOR, i)) Then
            'Solo los que tengan valor diferente de 0
            'If v(BAL_VALOR, i) <> 0 Then
                'Si es para balance, solo tipo 1,2 y 3, sino solo tipo 4 y 5
                If (bandBalance And (v(BAL_TIPO, i) <= 3)) Or _
                   ((Not bandBalance)) Then 'And (v(BAL_TIPO, i) >= 4)
                   'Solo hasta el nivel indicado
                   If v(BAL_NIVEL, i) <= gobjCond.Nivel Then
                        ReDim Preserve v2(20, j)
                        v2(0, j) = v(BAL_TIPO, i)           'TipoCuenta
                        v2(1, j) = v(BAL_CODCUENTA, i)      'CodCuenta
                        v2(2, j) = v(BAL_NOMBRECUENTA, i)   'Cuenta
                        v2(3, j) = v(BAL_CODSUCURSAL, i)          'CODSUCURSAL   JEAA 16/01/04
                        v2(4, j) = v(BAL_VALOR, i)          'Valor
                        If Not bandBalance Then v2(4, j) = v2(4, j) * -1    'Invierta el signo cuando es EstadoPG
                        v2(5, j) = v(BAL_NIVEL, i)          'Nivel
                        v2(6, j) = v(BAL_VALMODPRESUPUESTO, i)          'Modificaciones
                        v2(7, j) = v(BAL_VALREFORMA1, i)          'REFORMA 1
                        v2(8, j) = v(BAL_VALREFORMA2, i)          'REFORMA 2
                        v2(9, j) = v(BAL_VALREFORMA3, i)          'REFORMA 3
                        v2(10, j) = v(BAL_VALREFORMA4, i)          'REFORMA 4
                        v2(11, j) = v(BAL_VALSALDO, i)          'SALDO
                        v2(12, j) = v(BAL_VALPRESUP_COMP, i)          'Comprometido
                        v2(13, j) = v(BAL_P_COMP, i)          ' % Comprometido
                        v2(14, j) = v(BAL_VALPRESUP_EJEC, i)          'Ejecutado
                        v2(15, j) = v(BAL_P_EJEC, i)          ' % Ejecutado
                        v2(16, j) = v(BAL_COMP_EJEC, i)          ' % comp-Ejecutado
                        v2(17, j) = v(BAL_SALDOLPRESUP, i)          'Saldo Comprometido
                        v2(18, j) = v(BAL_PSALDOLPRESUP, i)          'Saldo Comprometido
                        v2(19, j) = v(BAL_SALDOLPRESUP_EJEC, i)           'Saldo Ejecutado
                        v2(20, j) = v(BAL_PSALDOLPRESUP_EJEC, i)           'Saldo Ejecutado
                        j = j + 1
                    End If
                End If
            'End If
        End If
    Next i
    If j Then ConsPRBalanceLinealNew = v2
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Balance Presupuesto ", "PR"
End Function

Public Function ListaCentroCostoHijoFlex(ByVal CentroCostoPadre As String, BandRS As Boolean) As Variant
    Dim sql As String, cad As String, rs As Recordset
    sql = "SELECT CodCentroDet,DescripcionDet Nombre FROM gncentrocostodetalle gcd "
    sql = sql & "INNER JOIN GNCentroCosto gcc on gcc.idcentro = gcd.idcentro "
    If InStr(1, UCase(Me.GNOpcion.NombreEmpresa), "BOLIVAR") > 0 Then
        sql = sql & "INNER JOIN FichaDetalle fd ON fd.id = gcd.idfichadet And fd.bandalta = 0 "
    End If
   sql = sql & " AND gcc.codcentro = '" & CentroCostoPadre & "'"
    sql = sql & " ORDER BY CodCentroDet"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaCentroCostoHijoFlex = rs
    Else
        ListaCentroCostoHijoFlex = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


Public Function RecuperaGNCentroCostoHijo(key As Variant) As GNCentroCostoHijo
    Dim obj As GNCentroCostoHijo
    Set obj = New GNCentroCostoHijo
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaGNCentroCostoHijo = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function
Public Function CreaGNCentroCostohijo() As GNCentroCostoHijo
    Dim obj As GNCentroCostoHijo
    Set obj = New GNCentroCostoHijo
    Set obj.Empresa = Me
    Set CreaGNCentroCostohijo = obj
    Set obj = Nothing
End Function
Public Function ListaGNCentroCostoHijo(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    Dim TransOP As String
    If Len(Me.GNOpcion.ObtenerValor("ProduccionTransOP")) > 0 Then
            TransOP = Me.GNOpcion.ObtenerValor("ProduccionTransOP")
    Else
            Err.Raise MSGERR_INVALIDO, "Empresa_TransOrdenProduccion", "No esta Configurado para tipo trans OP "
    End If
   sql = "SELECT CodCentro,pc.nombre,gcc.fechainicio,gcc.fechaentrega,CodCentroDet,Descripciondet,CodTrans,Numtrans,IdCentroDet "
    sql = sql & "FROM GNCentroCostoDetalle gcd "
    sql = sql & "inner join gncentrocosto gcc ON gcc.idcentro= gcd.idcentro "
    sql = sql & " Inner join gncomprobante gn on gn.idcentrohijo = gcd.idcentrodet "
    sql = sql & " Inner join pcprovcli pc on pc.idprovcli = gn.idclienteref"
    sql = sql & " Where gn.codtrans = '" & TransOP & "' "
   sql = sql & "ORDER BY CodCentroDet "
   Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaGNCentroCostoHijo = rs
    Else
        ListaGNCentroCostoHijo = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

'AUC PARA MADERAMICA
Public Function ListaGNTransFiltro(ByVal CodCentro As String, ByVal BandRS As Boolean) As Variant
    Dim sql As String, cond As String, rs As Recordset
    sql = "SELECT CodTrans,Numtrans,iv.descripcion FROM GNComprobante gn   "
    sql = sql & " inner join ivkardex ivk inner join ivinventario iv on iv.idinventario = ivk.idinventario   "
    sql = sql & " on ivk.transid = gn.transid  "
    sql = sql & " INNER JOIN GNCentroCosto gcc "
    sql = sql & " ON gcc.idcentro = gn.idcentro "
    sql = sql & " WHERE gn.estado <> 3 AND iv.tipo = 6 AND gcc.codcentro = '" & CodCentro & "'"
   sql = sql & " AND GN.CODTRANS = 'OP' AND gn.idcentrohijo = 0"
    sql = sql & " ORDER BY CodTrans"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaGNTransFiltro = rs
    Else
        ListaGNTransFiltro = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaPCProvCliEmpParaFlexNombre( _
                    BandProveedor As Boolean, _
                    BandCliente As Boolean, _
                    bandEmpleado As Boolean) As String
    Dim sql As String, s As String, cond As String
    Dim rs As Recordset
    sql = "SELECT  Nombre + ' [' + CodProvCli + ']' FROM Empleado "
    If Not BandProveedor And Not BandCliente And Not bandEmpleado Then
        cond = "BandProveedor=" & CadenaBool(True, Me.TipoDB)
    ElseIf Not BandProveedor And BandCliente And Not bandEmpleado Then
        cond = "BandCliente=" & CadenaBool(True, Me.TipoDB)
    ElseIf bandEmpleado And Not BandCliente And Not BandProveedor Then
        cond = "BandeMPLEADO=" & CadenaBool(True, Me.TipoDB)
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " ORDER BY Nombre"
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 20 + 40)         '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    ListaPCProvCliEmpParaFlexNombre = s
    rs.Close
    Set rs = Nothing
End Function



Public Function ConsVTConciliacioTransporte() As Variant
    Dim sql As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsTSConciliacion")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodBanco") = gobjCond.CodBanco1
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient

    sql = "spConsVTConciliacionTransporte " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodBanco1 & "', " & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB)
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    ConsVTConciliacioTransporte = MiGetRows(rs)
    
    
    
    Set rs = Nothing
End Function


Public Function VerificaElemntoYAConcilaidoenOtraVentasTransporte(ByVal Id As Long, ByVal transid As Long, ByVal CodVendedor As String, ByRef Trans As String) As Boolean
    Dim sql As String, rs As Recordset, cond As String
    VerificaElemntoYAConcilaidoenOtraVentasTransporte = False
    Trans = ""
    sql = " select codtrans, numtrans from VTKardexConciliaTrans t"
    sql = sql & " inner join gncomprobante g inner join fcvendedor f on g.idvendedor=f.idvendedor on t.transid=g.transid"
    sql = sql & " where IdTrans= " & Id
    sql = sql & " and IdTrans<> " & 0
    sql = sql & " and BandConciliado=1"
    sql = sql & " and g.estado<>3 "
    sql = sql & " and g.transid <>" & transid
    sql = sql & " and f.codvendedor='" & CodVendedor & "'"
    
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        VerificaElemntoYAConcilaidoenOtraVentasTransporte = True
        Trans = rs.Fields("Codtrans") & "-" & rs.Fields("numtrans")
    End If
End Function

Public Function ConsPRBalanceLinealxMesCompNew(bandBalance As Boolean) As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim v As Variant, v2() As Variant, i As Long, j As Long
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    sql = "spConsPRBalanceLinealxMesCompNew "
    sql = sql & gobjCond.numMoneda & "," & _
                        FechaYMD(IIf(bandBalance, Me.GNOpcion.FechaInicio, gobjCond.fecha1), TipoDB) & "," & _
                        FechaYMD(gobjCond.fecha2, TipoDB)
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    If Not rs.EOF Then v = rs.GetRows()
    'Mayoriza los valores
    MayorizaPresupuestoxMes v
    'Pasa los valores de v a v2 cambiando formato
    ' y filtrando registros por TipoCuenta, Nivel y Valor
    j = 0
    For i = 0 To UBound(v, 2)
        If Not IsNull(v(BAL_VALOR, i)) Then
            'Solo los que tengan valor diferente de 0
            'If v(BAL_VALOR, i) <> 0 Then
                'Si es para balance, solo tipo 1,2 y 3, sino solo tipo 4 y 5
                If (bandBalance And (v(BAL_TIPO, i) <= 3)) Or _
                   ((Not bandBalance)) Then 'And (v(BAL_TIPO, i) >= 4)
                   'Solo hasta el nivel indicado
                   If v(BAL_NIVEL, i) <= gobjCond.Nivel Then
                        ReDim Preserve v2(20, j)
                        v2(0, j) = v(BAL_TIPO, i)           'TipoCuenta
                        v2(1, j) = v(BAL_CODCUENTA, i)      'CodCuenta
                        v2(2, j) = v(BAL_NOMBRECUENTA, i)   'Cuenta
                        v2(3, j) = v(BAL_CODSUCURSAL, i)          'CODSUCURSAL   JEAA 16/01/04
                        v2(4, j) = v(BAL_VALOR, i)          'Valor
                        v2(5, j) = v(BAL_NIVEL, i)          'Nivel
                        v2(6, j) = v(9, i)          'mes 1
                        v2(7, j) = v(10, i)          'mes 2
                        v2(8, j) = v(11, i)          'REFORMA 2
                        v2(9, j) = v(12, i)          'REFORMA 3
                        v2(10, j) = v(13, i)          'REFORMA 4
                        v2(11, j) = v(14, i)          'SALDO
                        v2(12, j) = v(15, i)          'Comprometido
                        v2(13, j) = v(16, i)          ' % Comprometido
                        v2(14, j) = v(17, i)          'Ejecutado
                        v2(15, j) = v(18, i)              ' % Ejecutado
                        v2(16, j) = v(19, i)          ' % comp-Ejecutado
                        v2(17, j) = v(20, i)          'Saldo Comprometido
                        v2(18, j) = v(21, i)          'Saldo Comprometido
                        j = j + 1
                    End If
                End If
            'End If
        End If
    Next i
    If j Then ConsPRBalanceLinealxMesCompNew = v2
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta ConsPRBalanceLinealxMesCompNew ", "PR"
End Function


Public Function ConsPRBalanceLinealxMesEjecNew(bandBalance As Boolean) As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim v As Variant, v2() As Variant, i As Long, j As Long
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    sql = "spConsPRBalanceLinealxMesEjecNew "
    sql = sql & gobjCond.numMoneda & "," & _
                        FechaYMD(IIf(bandBalance, Me.GNOpcion.FechaInicio, gobjCond.fecha1), TipoDB) & "," & _
                        FechaYMD(gobjCond.fecha2, TipoDB)
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    If Not rs.EOF Then v = rs.GetRows()
    'Mayoriza los valores
    MayorizaPresupuestoxMes v
    'Pasa los valores de v a v2 cambiando formato
    ' y filtrando registros por TipoCuenta, Nivel y Valor
    j = 0
    For i = 0 To UBound(v, 2)
        If Not IsNull(v(BAL_VALOR, i)) Then
            'Solo los que tengan valor diferente de 0
                'Si es para balance, solo tipo 1,2 y 3, sino solo tipo 4 y 5
                If (bandBalance And (v(BAL_TIPO, i) <= 3)) Or _
                   ((Not bandBalance)) Then 'And (v(BAL_TIPO, i) >= 4)
                   'Solo hasta el nivel indicado
                   If v(BAL_NIVEL, i) <= gobjCond.Nivel Then
                        ReDim Preserve v2(20, j)
                        v2(0, j) = v(BAL_TIPO, i)           'TipoCuenta
                        v2(1, j) = v(BAL_CODCUENTA, i)      'CodCuenta
                        v2(2, j) = v(BAL_NOMBRECUENTA, i)   'Cuenta
                        v2(3, j) = v(BAL_CODSUCURSAL, i)          'CODSUCURSAL   JEAA 16/01/04
                        v2(4, j) = v(BAL_VALOR, i)          'Valor
'                        If Not bandBalance Then v2(4, j) = v2(4, j) * -1    'Invierta el signo cuando es EstadoPG
                        v2(5, j) = v(BAL_NIVEL, i)          'Nivel
                        v2(6, j) = v(9, i)          'mes 1
                        v2(7, j) = v(10, i)          'mes 2
                        v2(8, j) = v(11, i)          'REFORMA 2
                        v2(9, j) = v(12, i)          'REFORMA 3
                        v2(10, j) = v(13, i)          'REFORMA 4
                        v2(11, j) = v(14, i)          'SALDO
                        v2(12, j) = v(15, i)          'Comprometido
                        v2(13, j) = v(16, i)          ' % Comprometido
                        v2(14, j) = v(17, i)          'Ejecutado
                        v2(15, j) = v(18, i)              ' % Ejecutado
                        v2(16, j) = v(19, i)          ' % comp-Ejecutado
                        v2(17, j) = v(20, i)          'Saldo Comprometido
                        v2(18, j) = v(21, i)          'Saldo Comprometido
                        j = j + 1
                    End If
                End If
        End If
    Next i
    If j Then ConsPRBalanceLinealxMesEjecNew = v2
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta ConsPRBalanceLinealxMesCompNew", "PR"
End Function


Public Sub CambiaConciliadoTransporte( _
                ByVal Id As Long, _
                ByVal Valor As Boolean)
    Dim sql As String
    
    sql = "UPDATE Gncomprobante SET bandcierre = " & CadenaBool(Valor, Me.TipoDB)

    sql = sql & " WHERE (transId = " & Id & ") AND " & _
                       "(bandcierre <> " & CadenaBool(Valor, Me.TipoDB) & ") "
    
    Me.Execute sql, True
End Sub


Public Function ConsANRDEPXML(Anio As String) As Recordset
    Dim sql As String, rs As Recordset
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    
    With gobjCond
        sql = " SELECT"
        sql = sql & " atd.CodTipoDocumento,"
        sql = sql & " pc.ruc, per.papellido, per.pnombre,"
        sql = sql & " NumEstablecimiento as Estab, "
        sql = sql & " residencia, '593' as paisResidencia, imposicion,   Discapacidad,  porcDiscapacidad,  per.Idtipodocumento ,  cedsustituto,"
        sql = sql & " Ingresos as suelSal,"
        sql = sql & " OtraRemuneracion as sobSuelComRemu,"
        sql = sql & " Utilidad as partUtil,"
        sql = sql & " IngGravOtrosEmp as intGrabGen,"
        sql = sql & " 0 as impRentEmpl,"
        sql = sql & " XIII as decimTer,"
        sql = sql & " XIV as decimCuar,"
        sql = sql & " fr as fondoReserva,"
        sql = sql & " ir as salarioDigno,"
        sql = sql & " Deshaucio as otrosIngRenGrav,"
        sql = sql & " Ingresos +  OtraRemuneracion +  Utilidad as ingGravConEsteEmpl,"
        sql = sql & " '1' as sisSalNet,"
        sql = sql & " AportePersonal as apoPerIess,"
        sql = sql & " GPOtrosEmp as aporPerIessConOtrosEmpls,"
        sql = sql & " GPVivienda as deducVivienda,"
        sql = sql & " GPSalud as deducSalud,"
        sql = sql & " GPEducacion as deducEduca,"
        sql = sql & " GPAlimentacion as deducAliement,"
        sql = sql & " GPVestimenta as deducVestim,"
        sql = sql & " RebajaEspecial as exoDiscap,"
        sql = sql & " RebajaEspecial3E as exoTerEd,"
        sql = sql & " BaseImponible as basImp,"
        sql = sql & " ROUND(IRCausado,2) as impRentCaus,"
        sql = sql & " OtrasReb as valRetAsuOtrosEmpls,"
        sql = sql & " ValorIR as valImpAsuEsteEmpl,"
        sql = sql & " ValorRetenido As valRet, "
        sql = sql & " CASE per.BandBenGalp WHEN 0 THEN 'NO' ELSE 'SI' END AS BandBenGalp,"
        sql = sql & " ApoSol1,ApoSol2,ApoSol3,ApoSol4,ApoSol5,ApoSol6,ApoSol7,ApoSol8,ApoSol9,ApoSol10,ApoSol11, "
        sql = sql & " ApoSol12,ApoSol13,ApoSol14,ApoSol15,ApoSol16,ApoSol17,ApoSol18,ApoSol19,ApoSol20,ApoSol21 "
        sql = sql & " From"
        sql = sql & " EMPLEADO pc inner join PERSONAL PER LEFT JOIN GNSUCURSAL GNS ON PER.IDSUCURSAL = GNS.IDSUCURSAL   ON PC.IDPROVCLI = PER.IDEMPLEADO INNER JOIN anexo_tipodocumento atd on pc.idtipodocumento = atd.id"
        sql = sql & " INNER JOIN IRKardex ir"
        sql = sql & " inner join gncomprobante g"
        sql = sql & " on ir.transid=g.transid"
        sql = sql & " ON IR.IdEmpleado= pc.idProvCli"
        sql = sql & " Where g.Estado <> 3"
        sql = sql & " AND datepart (yyyy, g.fechadevol) = '" & Anio & "'"
        sql = sql & " order by pc.nombre"
    
        rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    End With
    UltimoRecordset rs
    Set ConsANRDEPXML = rs
    Set rs = Nothing
End Function

Public Sub RecuperaDatosConciliacionTransporte(ByVal cadena As String, ByRef fecha1 As Date, ByRef fecha2 As Date)
    Dim pos As Integer, v As Variant, cad As String
    If InStr(1, (cadena), "Hasta") Then
        pos = InStr(1, (cadena), "Hasta") + 7
        
        cad = Mid$(cadena, pos, Len(cadena) - pos + 1)
        fecha1 = cad
        fecha2 = cad
    End If
End Sub

Public Function VerificarPckardeCHP(Id As Long, Valor As Currency, Saldo As Currency, ByRef saldoCHP As Currency) As Boolean
    Dim sql As String, cond As String, s As String, TotalCHP As Currency
    Dim rs As Recordset
    VerificarPckardeCHP = False
    
    sql = " select isnull(sum(haber),0) as TotalCHP"
    sql = sql & " from gncomprobante g"
    sql = sql & " inner join pckardexCHP pck"
    sql = sql & " on g.transid=pck.transid"
    sql = sql & " Where Estado <> 3 And IdAsignado = " & Id
    
    Set rs = Me.OpenRecordset(sql)
    
    If rs.RecordCount > 0 Then
        saldoCHP = Saldo - rs.Fields("TotalCHP")
        If Valor > saldoCHP Then
            VerificarPckardeCHP = True
        End If
    End If
    

End Function

Public Function ConsTSPorCobrarPagarxCHP( _
                    ByVal PorCobrar As Boolean, _
                    ByVal CodProvcli As String, _
                    ByVal FechaVenci As Date, _
                    ByVal CodForma As String, _
                    ByVal CodMoneda As String, _
                    ByVal CodGrupo1 As String, _
                    ByVal CodVendedor As String, _
                    ByVal CodSucursal As String, _
                    ByVal Codelemento As String, _
                    ByVal CodBanco As String) As Variant
    Dim aux_codpc As String, aux_f1 As Date, aux_f2 As Date
    Dim aux_PorCobrar As Boolean, aux_Cliente As Boolean, aux_Proveedor As Boolean
    Dim aux_CodForma As String, aux_CodMoneda As String, aux_codgrupo As String
    Dim aux_incluircero As Boolean, aux_codVendedor As String, aux_Empleado As Boolean
    Dim aux_codElemento As String, aux_codBanco As String

   With gobjMain.objCondicion
        'Conservar valores actuales para que no afecte a otras consultas
        aux_codpc = .CodPC1
        aux_f1 = .fecha1
        aux_f2 = .fecha2
        aux_PorCobrar = .PorCobrar
        aux_Cliente = .Cliente
        aux_Proveedor = .Proveedor
        aux_Empleado = .Empleado
        aux_CodForma = .CodForma
        aux_CodMoneda = .CodMoneda
        aux_codgrupo = .CodGrupo
        aux_incluircero = .IncluirCero
        aux_codVendedor = .Usuario1
        aux_codElemento = .Codelemento
        aux_codBanco = .CodBanco1

        .PorCobrar = PorCobrar
        .Cliente = True
        .Proveedor = True
        '.Empleado = True
        
        .CodPC1 = CodProvcli
        .fecha1 = Me.GNOpcion.FechaInicio
        .fecha2 = FechaVenci
        .CodForma = CodForma
        .CodMoneda = CodMoneda
        .CodGrupo = CodGrupo1
        .IncluirCero = False
        .Usuario1 = CodVendedor
        .Sucursal = CodSucursal
        .Codelemento = Codelemento
        .CodBanco1 = CodBanco

        Set ConsTSPorCobrarPagarxCHP = ConsTSPorCobrarPagarCHP() 'x que se demora procedimeinto almacenado
        
'        Set ConsTSPorCobrarPagarxCHP = Me.Empresa2.ConsTSPorCobrarPagarCHP2016()
        
        'Recuperar valores reservados
        .CodPC1 = aux_codpc
        .fecha1 = aux_f1
        .fecha2 = aux_f2
        .PorCobrar = aux_PorCobrar
        .Cliente = aux_Cliente
        .Proveedor = aux_Proveedor
        .Empleado = aux_Empleado
        .CodForma = aux_CodForma
        .CodMoneda = aux_CodMoneda
        .CodGrupo = aux_codgrupo
        .IncluirCero = aux_incluircero
        .Usuario1 = aux_codVendedor
        .Sucursal = CodSucursal
        .Codelemento = Codelemento
        .CodBanco1 = CodBanco

   End With
End Function


Public Function ConsTSPorCobrarPagarCHP() As Variant
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim objCond As Condicion
    Dim BandModulo As Boolean
    Set objCond = gobjMain.objCondicion
    'Si no está especificada la moneda, coge la Moneda predeterminada
    If Len(objCond.CodMoneda) = 0 Then objCond.CodMoneda = MONEDA_PRE
    numMoneda = Me.GNOpcion.IndiceMoneda(objCond.CodMoneda)
    BandModulo = gobjMain.PermisoModuloEspecial(gobjMain.UsuarioActual.codUsuario, ModuloPagaRol)
    If (BandModulo And objCond.Empleado) Or objCond.BandAnticipo Then  'Esto es para pagar ets
                    sql = "spConsTSPorCobrarPagarEmpleadoCHR " & numMoneda & ", " & _
                    objCond.CodMoneda & "," & _
                    CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                    FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                    objCond.CodPC1 & "','" & _
                    objCond.CodPC1 & "','" & _
                    objCond.CodForma & "','" & _
                    objCond.CodForma & "','" & _
                    objCond.Codelemento & "','" & _
                    objCond.Codelemento & "','" & _
                    objCond.CodGrupo & "'"
'                Else
'                    sql = "spConsTSPorCobrarPagarVendedorSinRol " & numMoneda & ", " & _
'                    objCond.CodMoneda & "," & _
'                    CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
'                    CadenaBool(objCond.Cliente, TipoDB) & "," & _
'                    CadenaBool(objCond.Proveedor, TipoDB) & "," & _
'                    FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
'                    objCond.CodPC1 & "','" & _
'                    objCond.CodPC1 & "','" & _
'                    objCond.CodForma & "','" & _
'                    objCond.CodForma & "','" & _
'                    objCond.CodGrupo & "','" & _
'                    objCond.Usuario1 & "','" & _
'                    objCond.Usuario1 & "'," & _
'                    IIf(Me.GNOpcion.Los100DocCobroPago, 1, 0)
'                    If InStr(1, UCase(Me.GNOpcion.NombreEmpresa), "ITAL") Then
'                        sql = sql & ",2"
'                    Else
'                        sql = sql & ",1"
'                    End If
'        End If
'
    Else
        sql = "spConsTSPorCobrarPagarCHP " & numMoneda & ", " & _
                objCond.CodMoneda & "," & _
                CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                CadenaBool(objCond.Cliente, TipoDB) & "," & _
                CadenaBool(objCond.Proveedor, TipoDB) & "," & _
                CadenaBool(objCond.Empleado, TipoDB) & "," & _
                FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                objCond.CodPC1 & "','" & _
                objCond.CodPC1 & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodForma & "','" & _
                objCond.Codelemento & "','" & _
                objCond.CodGrupo & "','" & _
                objCond.Usuario1 & "','" & _
                objCond.Usuario1 & "'," & _
                IIf(Me.GNOpcion.Los100DocCobroPago, 1, 0)
                If InStr(1, UCase(Me.GNOpcion.NombreEmpresa), "ITAL") Then
                    sql = sql & ",2"
                Else
                    sql = sql & ",1"
                End If
                sql = sql & ",'" & objCond.CodBanco1 & "'"
                sql = sql & ",'" & objCond.CodBanco1 & "'"
    End If
    Set rs = Me.OpenRecordset(sql)
    Set ConsTSPorCobrarPagarCHP = rs
    Set rs = Nothing
    Set objCond = Nothing
End Function


Public Function ConsPCKardexPorTransCHP(ByVal BandProveedor As Boolean, _
                                     ByVal BandCliente As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsPCKardexPorTrans")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodProvCli1") = IIf(Len(gobjCond.CodPC1) = 0, "!", gobjCond.CodPC1)
    qdef.Parameters("CodProvCli2") = IIf(Len(gobjCond.CodPC2) = 0, String$(20, "z"), gobjCond.CodPC2)
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    qdef.Parameters("prmBandProveedor") = BandProveedor
    qdef.Parameters("prmBandCliente") = BandCliente
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient

    If gobjMain.GrupoActual.PermisoActual.ConsRepVen And BandCliente Then
        sql = "spConsPCKardexPorTransVen " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodPC1 & "','" & _
                gobjCond.CodPC2 & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB) & "," & _
                CadenaBool(BandProveedor, TipoDB) & "," & _
                CadenaBool(BandCliente, TipoDB) & ",'" & _
                gobjMain.UsuarioActual.codUsuario & "'"
    Else
        sql = "spConsPCKardexPorTransCHP " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodPC1 & "','" & _
                gobjCond.CodPC2 & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB) & "," & _
                CadenaBool(BandProveedor, TipoDB) & "," & _
                CadenaBool(BandCliente, TipoDB)
    End If
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    Set ConsPCKardexPorTransCHP = rs
    Set rs = Nothing
End Function

Public Function ListaGNCentroCostoHijoFlex(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodCentroDet,Descripciondet "
    sql = sql & "FROM GNCentroCostoDetalle  "
    sql = sql & "ORDER BY CodCentroDet "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaGNCentroCostoHijoFlex = rs
    Else
        ListaGNCentroCostoHijoFlex = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function
Public Function VericaExistencia(ByVal transid As Long) As Variant
Dim sql As String, rs As Recordset
    Dim Trans As String
    If transid = 0 Then Exit Function
    On Error GoTo CapturaError
    'LO DESPACHADO
        VerificaExistenciaTabla (1)
        sql = "SELECT iv.idinventario,"
        sql = sql & " abs(sum(ivk.cantidad)) as Cantdesp"
       sql = sql & " Into TMP1"
        sql = sql & " From gntrans gnt inner join  gncomprobante gn "
        sql = sql & "on gn.codtrans = gnt.codtrans "
        sql = sql & "Inner Join ivkardex ivk Inner join ivinventario iv Inner join ivexist ive  on ive.idinventario = iv.idinventario "
        sql = sql & "On iv.idinventario = ivk.idinventario  On ivk.transid = gn.transid "
        sql = sql & "Where gn.estado <> 3 and iv.bandservicio = 0  And GN.IDTRANSFUENTE =" & transid
        sql = sql & " And gnt.IdBodegaPre = ive.IdBodega"
        sql = sql & " group by iv.idinventario"
       Me.EjecutarSQL sql, 1
    'Trans = "gn.CodTrans + ' ' + CONVERT(varchar, gn.NumTrans) AS Trans, "
    sql = "SELECT '' as trans,iv.codinventario as CodPedido,iv.descripcion as DescPedido,abs(ivk.cantidad) as CantPed,IVE.EXIST"
    sql = sql & ",case when t.cantdesp is null then  (abs(ivk.cantidad)-ive.exist) else (abs(ivk.cantidad)-t.cantdesp-ive.exist) end as Dif     "
   sql = sql & " From gntrans gnt inner join  gncomprobante gn   "
    sql = sql & " on gn.codtrans = gnt.codtrans   Inner Join ivkardex ivk Inner join ivinventario iv  "
    sql = sql & " Left join tmp1 t on t.idinventario = iv.idinventario"
  sql = sql & " Inner join ivexist ive "
   sql = sql & " on ive.idinventario = iv.idinventario  On iv.idinventario = ivk.idinventario "
    sql = sql & " On ivk.transid = gn.transid"
    sql = sql & " Where gn.estado <> 3 and iv.bandservicio = 0 "
    sql = sql & " And GN.TRANSID = " & transid
    sql = sql & " and  gnt.idbodegapre= ive.idbodega"
    Set rs = Me.OpenRecordset(sql)
    Set VericaExistencia = rs
    Set rs = Nothing
    Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function

Public Function ListaGNResponsableNew(BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    

    sql = "SELECT CodResponsable,Nombre,BandValida FROM GNResponsable "

       sql = sql & " WHERE BandValida=1"

    sql = sql & " ORDER BY CodResponsable"

    Set rs = Me.OpenRecordset(sql)
    
    If BandRS Then
        Set ListaGNResponsableNew = rs
    Else
        ListaGNResponsableNew = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


Public Function ListaGNTransFuenteParaTS(BandRS As Boolean, BandAsignado As Boolean, transid As Long) As Variant
    Dim sql As String, rs As Recordset
    
    sql = " select gc.transid, gc.CodTrans+' '+CONVERT(VARCHAR,gc.NumTrans), gc.nombre "
    sql = sql & " FROM GNComprobante gc inner join gntrans gnt on gc.codtrans=gnt.codtrans "
    sql = sql & " WHERE estado <> 3 and gc.codtrans = 'RI'"
'    If BandAsignado Then
        sql = sql & " and transid not in (select idtransfuente from gncomprobante where estado <>3 and transid <>" & transid & ")"
'    End If
    sql = sql & " ORDER BY gc.CodTrans, gc.NumTrans"

    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaGNTransFuenteParaTS = rs
    Else
        ListaGNTransFuenteParaTS = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

 'AUC para ecuamueble
Public Function ListaIVKProcesos(codPC As String) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset, rsE As Recordset, rsA As Recordset
    Dim rsAnt As Recordset
    Dim Sec As Integer, mboContinua As Boolean
    Dim cadena As String
    Dim EjecutaEnCola As Integer
    Dim OrdenesMostrar As Integer
   Dim TransOP As String
        If Len(Me.GNOpcion.ObtenerValor("ProduccionTransOP")) > 0 Then
            TransOP = Me.GNOpcion.ObtenerValor("ProduccionTransOP")
        Else
            Err.Raise MSGERR_INVALIDO, "Empresa_TransOrdenProduccion", "No esta Configurado para tipo trans OP "
        End If
   On Error GoTo CapturaError
   'PRIMERO RECUPERO DE IVPROCESO CUANTOS PROCESOS PUEDE EJECUTAR
   sql = "Select EjecutaCola,OrdenesMostrar from ivproceso"
    'sql = sql & " Where CHARINDEX('" & gobjMain.UsuarioActual.codUsuario & "',codusuario) > 0"
    sql = sql & " Where CHARINDEX('" & gobjMain.UsuarioActual.CodGrupo & "',Grupo) > 0"
    Set rs = Me.OpenRecordset(sql)
    Do While Not rs.EOF
        EjecutaEnCola = rs!EjecutaCola
        OrdenesMostrar = rs!OrdenesMostrar
       rs.MoveNext
    Loop
    Set rs = Nothing
    sql = "Select ivkp.secuencia,ivkp.transid from ivkproceso ivkp "
    sql = sql & "Inner Join GnComprobante g on g.transid = ivkp.transid "
    sql = sql & " Inner join ivproceso ivp on ivp.idproceso = ivkp.idproceso"
    sql = sql & " Inner Join gncentroCosto cc on cc.idcentro = g.idcentro"
    ''sql = sql & " Where cc.fechafinal is null And g.Estado <> 3"
    sql = sql & " Where ivkp.fechafin is null And g.Estado <> 3" 'AUC esto le cambie creo q le hacia muy lento

    
    'sql = sql & " And ivkp.codusuario = '" & gobjMain.UsuarioActual.codUsuario & "'"
    sql = sql & " And ivkp.Grupo = '" & gobjMain.UsuarioActual.CodGrupo & "'"
    
   sql = sql & " group by  ivkp.secuencia,ivkp.transid,cc.fechafinal"
    Set rsAnt = Me.OpenRecordset(sql)
    cadena = ""
    Do While Not rsAnt.EOF
        If rsAnt!secuencia > 0 Then
           Sec = rsAnt!secuencia
            Sec = Sec - 1
        '    REVISA SI EL PROCESO ANTERIOR ESTA LISTO CASO CONTRARIO NO MUESTRA
            sql = "Select ivkp.transid,gne.menu  from  "
            sql = sql & " ivkproceso ivkp inner join gnestadoprod gne on gne.valor= ivkp.estado1"
            sql = sql & " AND ivkp.secuencia = " & Sec
            sql = sql & " AND ivkp.transid = " & rsAnt!transid
            sql = sql & " AND gne.menu = 'Listo'" 'tengo que revisar uno por uno
            Set rs = Me.OpenRecordset(sql)
                Do While Not rs.EOF
                    If rs!Menu = "Listo" Then
                        If cadena = "" Then
                            cadena = rs!transid & ","
                        Else
                            cadena = cadena & rs!transid & ","
                        End If
                    End If
                    rs.MoveNext
                Loop
                Set rs = Nothing
        End If
           rsAnt.MoveNext
    Loop
    Set rs = Nothing
    Set rsAnt = Nothing
        If Len(cadena) = 0 Then
            GoTo Fin
        Else
            cadena = Left(cadena, Len(cadena) - 1)
        End If
        VerificaExistenciaTabla 1
        sql = "Select transid into tmp1 from gncomprobante where transid in (" & cadena & ")"
        Me.EjecutarSQL sql, 1
    '------------
    'If mboContinua Then
        'PRIMERO REVISO ESTADOS
        sql = " Select isnull(gne1.menu,0) as estadofinal "
        sql = sql & " from gncomprobante gn   inner join ivkardex ivk inner join ivinventario iv   "
        sql = sql & "on iv.idinventario = ivk.idinventario on ivk.transid = gn.transid  "
        sql = sql & " inner join ivkproceso ivkp "
        sql = sql & " inner join ivproceso ivp on ivp.idproceso = ivkp.idproceso "
        sql = sql & " Left join gnestadoprod gne1 on gne1.valor= ivkp.estado1 "
        sql = sql & " Left join gnestadoprod gne on gne.valor= ivkp.estado"
        sql = sql & " on ivkp.transid = gn.transid"
        sql = sql & " Inner join tmp1 t on t.transid = ivkp.transid"
        sql = sql & " Where  idcentrodet = 0 And ( ivkp.FechaFin <= '" & Date & "' OR  ivkp.FechaFinEspera <= '" & Date & "')"
        sql = sql & " And gn.estado <> 3 And iv.tipo = 6 And GN.codtrans = '" & TransOP & "'"
       'sql = sql & " And ivp.codusuario = '" & gobjMain.UsuarioActual.codUsuario & "'"
       sql = sql & " And ivp.grupo = '" & gobjMain.UsuarioActual.CodGrupo & "'"
        sql = sql & " And (gne.menu <> 'Ejecucion' OR  GNE1.MENU <> 'Listo')"
        Set rsA = Me.OpenRecordset(sql)
        Do While Not rsA.EOF
            Select Case rsA!estadofinal
                Case 0
                    Set rsA = Nothing
                    GoTo estadoInicial
                Case "InicioEspera", "FinEspera"
                    GoTo EsperarEstado2
            End Select
            rsA.MoveNext
        Loop
estadoInicial:
        'REVISA SI HAY UN URGENTE
        sql = " Select top 1 ivkp.bandUrgente,ivkp.idkp "
        sql = sql & " from gncomprobante gn   inner join ivkardex ivk inner join ivinventario iv   "
        sql = sql & "on iv.idinventario = ivk.idinventario on ivk.transid = gn.transid  "
        sql = sql & " inner join ivkproceso ivkp "
        sql = sql & " inner join ivproceso ivp on ivp.idproceso = ivkp.idproceso "
        sql = sql & " Left join gnestadoprod gne1 on gne1.valor= ivkp.estado "
        sql = sql & " on ivkp.transid = gn.transid"
        sql = sql & " Where ivkp.Idcentrodet = 0 AND (IVKP.FechaFin <= '" & Date & "' OR ivkp.fechafin is null)"
        sql = sql & " And gn.estado <> 3 And iv.tipo = 6 And GN.codtrans = '" & TransOP & "'"
        'sql = sql & " And ivp.codusuario = '" & gobjMain.UsuarioActual.codUsuario & "'"
        sql = sql & " And ivp.grupo= '" & gobjMain.UsuarioActual.CodGrupo & "'"
        sql = sql & " And ivkp.estado =0"
        sql = sql & " AND NOT fechainicio IS NULL"
        sql = sql & " And ivkp.estado1 =0"
        sql = sql & " And ivkp.bandUrgente=1"
        sql = sql & " order by ivkp.orden "
        Set rsA = Me.OpenRecordset(sql)
        Do While Not rsA.EOF
            If rsA!BandUrgente Then
                sql = "Update ivkProceso set estado = (Select valor from gnestadoprod where menu= 'Ejecucion') "
                sql = sql & ",FechaToma =  '" & Date & "'"
                sql = sql & ",horaToma =  '" & Time & "'"
                sql = sql & " Where idkp = " & rsA!IDkp
                Me.EjecutarSQL sql, 1
                rsA.MoveNext
            End If
        Loop
        Set rsA = Nothing
        'aqui revisa cuantos hay en ejecucion
        sql = " Select gne1.menu as estadoInicial "
        sql = sql & " from gncomprobante gn   inner join ivkardex ivk inner join ivinventario iv   "
        sql = sql & "on iv.idinventario = ivk.idinventario on ivk.transid = gn.transid  "
        sql = sql & " inner join ivkproceso ivkp "
        sql = sql & " inner join ivproceso ivp on ivp.idproceso = ivkp.idproceso "
        sql = sql & " Left join gnestadoprod gne1 on gne1.valor= ivkp.estado "
        sql = sql & " on ivkp.transid = gn.transid"
        sql = sql & " Where ivkp.Idcentrodet = 0 AND (IVKP.FechaFin <= '" & Date & "' OR ivkp.fechafin is null)"
        sql = sql & " And gn.estado <> 3 And iv.tipo = 6 And GN.codtrans = '" & TransOP & "'"
       'sql = sql & " And ivp.codusuario = '" & gobjMain.UsuarioActual.codUsuario & "'"
       sql = sql & " And ivp.grupo = '" & gobjMain.UsuarioActual.CodGrupo & "'"
       sql = sql & " and gne1.menu = 'ejecucion'"
        sql = sql & " and ivkp.estado1 =0"
        Set rsA = Me.OpenRecordset(sql)
        If rsA.RecordCount >= EjecutaEnCola Then
           rsA.Close
            Set rsA = Nothing
                GoTo Fin 'SI TIENE AL MENOS UNO EN EJECUCION NO HACE NADA Y SOLO MUESTRA
        Else
            EjecutaEnCola = EjecutaEnCola - rsA.RecordCount
       End If
        sql = " Select isnull(gne1.menu,0) as estadoInicial "
        sql = sql & " from gncomprobante gn   inner join ivkardex ivk inner join ivinventario iv   "
        sql = sql & "on iv.idinventario = ivk.idinventario on ivk.transid = gn.transid  "
        sql = sql & " inner join ivkproceso ivkp "
        sql = sql & " inner join ivproceso ivp on ivp.idproceso = ivkp.idproceso "
        sql = sql & " Left join gnestadoprod gne1 on gne1.valor= ivkp.estado "
        sql = sql & " on ivkp.transid = gn.transid"
        sql = sql & " Where ivkp.Idcentrodet = 0 AND IVKP.FechaFin <= '" & Date & "'"
        sql = sql & " And gn.estado <> 3 And iv.tipo = 6 And GN.codtrans = '" & TransOP & "'"
       'sql = sql & " And ivp.codusuario = '" & gobjMain.UsuarioActual.codUsuario & "'"
       sql = sql & " And ivp.Grupo= '" & gobjMain.UsuarioActual.CodGrupo & "'"
        sql = sql & " And ivkp.estado1 =0"
        sql = sql & " And ivkp.FechaInicio ='" & Date & "'"
        Set rsA = Me.OpenRecordset(sql)
        Do While Not rsA.EOF
            Select Case rsA!estadoInicial
                Case "Espera"
                        GoTo Esperar
                Case 0
                        GoTo PonEjecuta
               End Select
            rsA.MoveNext
        Loop
Esperar:
                sql = "Select top 1 ivkp.idkp"
               sql = sql & " from gncomprobante gn  "
                sql = sql & " inner join ivkardex ivk inner join ivinventario iv  on iv.idinventario = ivk.idinventario"
                sql = sql & " on ivk.transid = gn.transid inner join pcprovcli pc on pc.idprovcli= gn.idclienteref "
                sql = sql & " inner join gncentrocosto gc on gc.idcentro = gn.idcentro "
                sql = sql & " inner join ivkproceso ivkp inner join ivproceso ivp on ivp.idproceso = ivkp.idproceso "
                sql = sql & " Left join gnestadoprod gne on gne.valor= ivkp.estado"
                sql = sql & " on ivkp.transid = gn.transid"
                sql = sql & " Where  ivkp.idcentrodet = 0 And ivkp.FechaFin <= '" & Date & "'"
               sql = sql & " And gn.estado <> 3 And iv.tipo = 6 And GN.codtrans = '" & TransOP & "'"
               'sql = sql & " And ivp.codusuario = '" & gobjMain.UsuarioActual.codUsuario & "'"
               sql = sql & " And ivp.grupo = '" & gobjMain.UsuarioActual.CodGrupo & "'"
                sql = sql & " And gne.menu <> 'Ejecucion'" 'LE VUELVO A PONER VER SI FUNCIONA CON TODOS USARIOS
                sql = sql & " And ivkp.FechaInicio = '" & Date & "'"
                sql = sql & "  Order by ivkp.orden"
                Set rs = Me.OpenRecordset(sql)
                Do While Not rs.EOF 'SOLO COLOCA EN EJECUCION SI ENTRA POR PRIMERA VEZ Y ESTABA EN ESPERA
                    sql = "Update ivkProceso set estado = (Select valor from gnestadoprod where menu= 'Ejecucion') "
                    sql = sql & ",FechaToma =  '" & Date & "'"
                    sql = sql & ",horaToma =  '" & Time & "'"
                    sql = sql & " Where idkp = " & rs!IDkp
                    Me.EjecutarSQL sql, 1
                    rs.MoveNext
                Loop
                Set rs = Nothing
PonEjecuta:
                sql = "Select top " & EjecutaEnCola & "  ivkp.idkp"
                sql = sql & " from gncomprobante gn  "
                sql = sql & " inner join ivkardex ivk inner join ivinventario iv  on iv.idinventario = ivk.idinventario"
                sql = sql & " on ivk.transid = gn.transid inner join pcprovcli pc on pc.idprovcli= gn.idclienteref "
                sql = sql & " inner join gncentrocosto gc on gc.idcentro = gn.idcentro "
                sql = sql & " inner join ivkproceso ivkp inner join ivproceso ivp on ivp.idproceso = ivkp.idproceso "
                sql = sql & " Left join gnestadoprod gne on gne.valor= ivkp.estado"
                sql = sql & " on ivkp.transid = gn.transid"
                sql = sql & " Where  ivkp.idcentrodet = 0 And ivkp.FechaFin IS NULL"
                sql = sql & " And gn.estado <> 3 And iv.tipo = 6 And GN.codtrans = '" & TransOP & "'"
                'sql = sql & " And ivp.codusuario = '" & gobjMain.UsuarioActual.codUsuario & "'"
                sql = sql & " And ivp.Grupo= '" & gobjMain.UsuarioActual.CodGrupo & "'"
                sql = sql & " And ivkp.FechaInicio <='" & Date & "'"
                sql = sql & " And gne.codestado is null"
                sql = sql & "  Order by ivkp.orden"
                Set rs = Me.OpenRecordset(sql)
                Do While Not rs.EOF 'SOLO COLOCA EN EJECUCION SI ENTRA POR PRIMERA VEZ Y ESTABA EN ESPERA
                    sql = "Update ivkProceso set estado = (Select valor from gnestadoprod where menu= 'Ejecucion') "
                    sql = sql & ",FechaToma =  '" & Date & "'"
                    sql = sql & ",horaToma =  '" & Time & "'"
                    sql = sql & " Where idkp = " & rs!IDkp
                    Me.EjecutarSQL sql, 1
                    rs.MoveNext
                Loop
                Set rs = Nothing
EsperarEstado2: 'PARA LOS ESTADOS2 CON ESPERAR2
                sql = "Select top 1 ivkp.*"
                sql = sql & " from gncomprobante gn  "
                sql = sql & " inner join ivkardex ivk inner join ivinventario iv  on iv.idinventario = ivk.idinventario"
                sql = sql & " on ivk.transid = gn.transid inner join pcprovcli pc on pc.idprovcli= gn.idclienteref "
                sql = sql & " inner join gncentrocosto gc on gc.idcentro = gn.idcentro "
                sql = sql & " inner join ivkproceso ivkp inner join ivproceso ivp on ivp.idproceso = ivkp.idproceso "
                sql = sql & " Left join gnestadoprod gne on gne.valor= ivkp.estado1"
                sql = sql & " on ivkp.transid = gn.transid"
                sql = sql & " Where  ivkp.idcentrodet = 0 And ivkp.FechaFinEspera <= '" & Date & "'"
                sql = sql & " And gn.estado <> 3 And iv.tipo = 6 And GN.codtrans = '" & TransOP & "'"
               'sql = sql & " And ivp.codusuario = '" & gobjMain.UsuarioActual.codUsuario & "'"
               sql = sql & " And ivp.Grupo = '" & gobjMain.UsuarioActual.CodGrupo & "'"
                sql = sql & " And gne.menu NOT IN('Listo','Revision','InicioRevision') Order by ivkp.orden"
                Set rs = Me.OpenRecordset(sql)
                Do While Not rs.EOF 'SOLO COLOCA EN EJECUCION SI ENTRA POR PRIMERA VEZ Y ESTABA EN ESPERA
                        sql = "INSERT INTO IVKPROCESO(Transid,idproceso,idresponsable,cantidad,orden,descripcion,FechaFin,estado,idcentrodet,fechatoma,FechaInicio,horainicio,horatoma,estado1,Secuencia,CodUsuario,Grupo ) values("
                    sql = sql & rs!transid & "," & rs!idproceso & ",0" & "," & rs!Cantidad & "," & rs!Orden & ",'','',(select valor from gnestadoprod where menu = 'Ejecucion'),0,'" & Date & "','" & Date & "','" & Time & "','" & Time & "',0," & rs!secuencia & ",'','" & rs!Grupo & "')"
                    Me.EjecutarSQL sql, 1
                    sql = " Update ivkproceso "
                    sql = sql & "Set idcentrodet = 1 "
                    sql = sql & ",estado1 = (Select valor from gnestadoprod where menu = 'FinEspera') "
                    sql = sql & ",FechaFin = '" & Date & "'"
                    sql = sql & ",horaFin = '" & Time & "'"
                    sql = sql & " Where idkp  = " & rs!IDkp
                    Me.EjecutarSQL sql, 1
                    rs.MoveNext
                Loop
                Set rs = Nothing
                Set rsA = Nothing
        'SOLO MUESTRA
Fin:
        VerificaExistenciaTabla 1
        VerificaExistenciaTabla 2
        VerificaExistenciaTabla 3
       sql = "select gn.transid, ivkp.idkp,gn.codusuario as usuario,gn.NumTrans,gcc.codcentro,iv.codinventario,pc.nombre,  "
        sql = sql & " gc.fechainicio,iv.descripcion+ivk.nota as descripcion,ivp.codproceso,ivkp.cantidad,ivkp.ordenUrgente as Orden "
        sql = sql & " ,UPPER(ivkpO.Grupo) as Grupo,case when ivkp.estado1= 0 then  gne.color else gne1.color end as color "
        sql = sql & " INTO tmp1 "
        sql = sql & " from gncomprobante gn  Left Join gncentrocosto gcc on gcc.idcentro = gn.idcentro "
        sql = sql & " inner join ivkardex ivk inner join ivinventario iv  on iv.idinventario = ivk.idinventario"
        sql = sql & " on ivk.transid = gn.transid inner join pcprovcli pc on pc.idprovcli= gn.idclienteref "
        sql = sql & " inner join gncentrocosto gc on gc.idcentro = gn.idcentro "
        sql = sql & " inner join ivkproceso ivkp inner join ivproceso ivp on ivp.idproceso = ivkp.idproceso "
        sql = sql & " left join ivkproceso ivkpO ON ivkpO.idkp = ivkp.idkpasignado"
        sql = sql & " Left join gnestadoprod gne on gne.valor= ivkp.estado"
        sql = sql & " Left join gnestadoprod gne1 on gne1.valor= ivkp.estado1"
        sql = sql & " on ivkp.transid = gn.transid"
        sql = sql & " Where ivkp.idcentrodet = 0"
       sql = sql & " And gn.estado <> 3 And iv.tipo = 6 And GN.codtrans = '" & TransOP & "'"
'        sql = sql & " And ivkp.codusuario = '" & gobjMain.UsuarioActual.codUsuario & "'"
        sql = sql & " And ivkp.Grupo = '" & gobjMain.UsuarioActual.CodGrupo & "'"
        sql = sql & " And ivkp.estado1 NOT in (select valor from gnestadoprod where menu = 'lISTO')"
        sql = sql & " And ivkp.FechaInicio <= '" & Date & "'"
        sql = sql & " And ivkp.bandUrgente= 1 "
        sql = sql & " Order by ivkp.ordenUrgente "
        Me.EjecutarSQL sql, 1
        
        sql = "select gn.transid, ivkp.idkp,gn.codusuario as usuario,gn.NumTrans,gcc.codcentro,iv.codinventario,pc.nombre,"
        sql = sql & " gc.fechainicio,iv.descripcion+ivk.nota as descripcion,ivp.codproceso,ivkp.cantidad,ivkp.orden "
        sql = sql & " ,UPPER(ivkpO.Grupo) as Grupo,case when ivkp.estado1= 0 then  gne.color else gne1.color end as color "
        sql = sql & " INTO tmp2 "
        sql = sql & " from gncomprobante gn  Left Join gncentrocosto gcc on gcc.idcentro = gn.idcentro "
        sql = sql & " inner join ivkardex ivk inner join ivinventario iv  on iv.idinventario = ivk.idinventario"
        sql = sql & " on ivk.transid = gn.transid inner join pcprovcli pc on pc.idprovcli= gn.idclienteref "
        sql = sql & " inner join gncentrocosto gc on gc.idcentro = gn.idcentro "
        sql = sql & " inner join ivkproceso ivkp inner join ivproceso ivp on ivp.idproceso = ivkp.idproceso "
        sql = sql & " left join ivkproceso ivkpO ON ivkpO.idkp = ivkp.idkpasignado"
        sql = sql & " Left join gnestadoprod gne on gne.valor= ivkp.estado"
        sql = sql & " Left join gnestadoprod gne1 on gne1.valor= ivkp.estado1"
        sql = sql & " on ivkp.transid = gn.transid"
        sql = sql & " Where ivkp.idcentrodet = 0"
        sql = sql & " And gn.estado <> 3 And iv.tipo = 6 And GN.codtrans = '" & TransOP & "'"
'        sql = sql & " And ivkp.codusuario = '" & gobjMain.UsuarioActual.codUsuario & "'"
        sql = sql & " And ivkp.Grupo = '" & gobjMain.UsuarioActual.CodGrupo & "'"
        sql = sql & " And ivkp.estado1 NOT in (select valor from gnestadoprod where menu = 'Listo')"
        sql = sql & " And ivkp.FechaInicio <= '" & Date & "'"
        sql = sql & " And ivkp.bandUrgente= 0 "
        sql = sql & " Order by ivkp.orden "
        Me.EjecutarSQL sql, 1
        sql = "select top " & OrdenesMostrar & " transid,idkp,Usuario,NumTrans,codcentro,codinventario,nombre,fechainicio,descripcion,codproceso,cantidad,orden,Grupo,color "
        sql = sql & " INTO tmp3 "
        sql = sql & "From TMP1 "
        sql = sql & "union all "
        sql = sql & "select  top " & OrdenesMostrar & "   transid,idkp,Usuario,NumTrans,codcentro,codinventario,nombre,fechainicio,descripcion,codproceso,cantidad,orden,Grupo,color "
        sql = sql & "From TMP2 "
        sql = sql & " order by orden "
        Me.EjecutarSQL sql, 1
        sql = "Select top " & OrdenesMostrar & " * from tmp3"
       sql = sql & " order by orden "
       Set rs = Me.OpenRecordset(sql)
    'End If
     Set ListaIVKProcesos = rs
       Set rs = Nothing
        Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
    'Me.GrabaGNLogAccion "CONSULTA", "Cons. cola Procesos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "IV"
End Function


'ECUAMUEBLE
Public Function ConsProcesosClienteNew(codPC As String, codcc1 As String, codcc2 As String) As Variant
Dim sql As String, cond As String, s As String, rs As Recordset
Dim bandFirst As Boolean
sql = "select gcc.idcentrodet,gc.codcentro,gcc.codcentrodet,gcc.descripciondet,pc.nombre from ivkproceso p  inner join gncentrocostodetalle gcc  "
sql = sql & " inner join gncentrocosto gc "
sql = sql & "inner join pcprovcli pc on pc.idprovcli = gc.idCliente"
sql = sql & " on gc.idcentro = gcc.idcentro"
sql = sql & " on gcc.idcentrodet= p.idcentrodet"
If Len(codPC) > 0 Then
    cond = " WHERE pc.codprovcli = '" & codPC & "'"
    bandFirst = True
End If
If Len(codcc1) > 0 And Len(codcc2) > 0 Then
    If bandFirst = True Then
        cond = " AND"
    Else
        cond = " WHERE"
    End If
         cond = cond & " gc.codcentro between '" & codcc1 & "' and '" & codcc2 & "'"
End If
sql = sql & cond
sql = sql & " group by gc.codcentro,gcc.codcentrodet,gcc.descripciondet,pc.nombre,gcc.idcentrodet"
Set rs = Me.OpenRecordset(sql)
    Set ConsProcesosClienteNew = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons. Procesos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "IV"
End Function

Public Function ConsProcesosColas(IdTrans As Long) As Variant
End Function
Public Function ConsProcesosColasNew(IdTrans As Long) As Recordset
Dim sql As String, cond As String, s As String, rsc As Recordset
On Error GoTo CapturaError
sql = "select ivkp.idkp,ivp.codproceso,abs(ivkp.cantidad) as cantidad,"
sql = sql & " (CONVERT(VARCHAR,fechaInicio,103)+' '+CONVERT(VARCHAR,horaInicio,108)) as fechaIni,"
sql = sql & " (CONVERT(VARCHAR,fechaToma,103)+' '+CONVERT(VARCHAR,horaToma,108)) as fechaToma,"
sql = sql & " gne.codestado as EstadoInical,"
sql = sql & " (CONVERT(VARCHAR,fechaFin,103)+' '+CONVERT(VARCHAR,horaFin,108)) as fechaFin,"
sql = sql & " (CONVERT(VARCHAR,fechaFinEspera,103)) as fechaFinEspera,"
sql = sql & " gne1.codestado AS estadoFinal, UPPER(ivkp.Grupo),ivkp.descripcion,ivkp.secuencia"
sql = sql & " from gncomprobante gn "
sql = sql & " Inner Join ivkproceso ivkp "
sql = sql & " inner join ivproceso ivp on ivp.idproceso = ivkp.idproceso on ivkp.transid = gn.transid "
sql = sql & " left join  gnestadoprod gne on gne.valor = ivkp.estado"
sql = sql & " left join  gnestadoprod gne1 on gne1.valor = ivkp.estado1"
sql = sql & " where gn.estado <> 3 "
sql = sql & " And gn.transid = " & IdTrans
sql = sql & " Group by ivp.codproceso,ivkp.cantidad,ivkp.fechainicio,ivkp.fechaInicio,ivkp.estado,ivkp.fechafin,ivkp.fechafinEspera,ivkp.idkp,"
sql = sql & " ivkp.grupo,ivkp.descripcion,ivp.secuencia,gne.codestado,ivkp.Fechatoma,ivkp.horainicio,ivkp.horatoma,"
sql = sql & " ivkp.horafin , gne1.CodEstado,ivkp.secuencia"
sql = sql & " Order by ivp.secuencia "
Set rsc = gobjMain.EmpresaActual.OpenRecordset(sql)
If rsc Is Nothing Then Exit Function
    Set ConsProcesosColasNew = rsc
    Set rsc = Nothing
  '  Me.GrabaGNLogAccion "CONSULTA", "Cons. Colas Procesos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "IV"
    Exit Function
CapturaError:
    MsgBox Err.Description
    Set rsc = Nothing
End Function

Public Function ListaGNCentroCostoHijoNew(codPC As String, CodCentro1 As String, CodCentro2 As String, BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    Dim cond  As String
    Dim TransOP As String
    On Error GoTo CapturaError
        If Len(Me.GNOpcion.ObtenerValor("ProduccionTransOP")) > 0 Then
            TransOP = Me.GNOpcion.ObtenerValor("ProduccionTransOP")
        Else
            Err.Raise MSGERR_INVALIDO, "Empresa_TransOrdenProduccion", "No esta Configurado para tipo trans OP "
        End If
   cond = ""
    sql = "SELECT CodCentro,pc.nombre,gcc.fechainicio,gcc.fechaentrega,CodCentroDet,Descripciondet,CodTrans,Numtrans,IdCentroDet "
    sql = sql & "FROM GNCentroCostoDetalle gcd "
    sql = sql & "inner join gncentrocosto gcc ON gcc.idcentro= gcd.idcentro "
    sql = sql & " Inner join gncomprobante gn on gn.idcentrohijo = gcd.idcentrodet "
    sql = sql & " Inner join pcprovcli pc on pc.idprovcli = gn.idclienteref"
    sql = sql & " Where gn.codtrans = '" & TransOP & "' "
   If Len(codPC) > 0 Then
        cond = "And pc.codprovcli = '" & codPC & "'"
    End If
    If Len(CodCentro1) > 0 And Len(CodCentro2) > 0 Then
        cond = cond & " AND gcc.codcentro between '" & CodCentro1 & "' AND  '" & CodCentro2 & "'"
    End If
    sql = sql & cond
    sql = sql & "ORDER BY codcentro,CodCentroDet "
   Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaGNCentroCostoHijoNew = rs
    Else
        ListaGNCentroCostoHijoNew = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
    Exit Function
CapturaError:
    Set rs = Nothing
    MsgBox Err.Number & Err.Description
    Exit Function
End Function

Public Function IVPSecuencia() As Integer
Dim sql As String, rs As Recordset
Dim Sec As Integer
    On Error GoTo CapturaError
    sql = "select secuencia From ivproceso where codusuario = '" & gobjMain.UsuarioActual.codUsuario & "'"
    Set rs = Me.OpenRecordset(sql)
    Do While Not rs.EOF
        Sec = rs!secuencia
        rs.MoveNext
    Loop
    Set rs = Nothing
    If Sec > 0 Then
        IVPSecuencia = Sec - 1
    Else
        IVPSecuencia = 0
    End If
    Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function

Public Function RSEncabezadoColas(ByVal IdTrans As Long) As Recordset
    Dim sql As String, rs As Recordset
    On Error GoTo CapturaError
     sql = "SELECT iv.idinventario,iv.codinventario,gn.codtrans,gn.numtrans,gc.fechaInicio,iv.descripcion,gn.descripcion+ivk.nota as nota,gc.fechaEntrega,v.nombre as vendedor,ivk.cantidad "
   sql = sql & "FROM GNComprobante gn  "
    sql = sql & "inner join gncentrocosto gc ON gc.idcentro= gn.idcentro  "
    sql = sql & " Inner join IVKardex ivk Inner join IVInventario iv on iv.idinventario = ivk.idinventario  "
    sql = sql & " on ivk.transid = gn.transid "
    sql = sql & " INNER join gncomprobante g2 left join fcvendedor v on v.idvendedor = g2.idvendedor on g2.transid = gn.idtransfuente"
   sql = sql & " Where gn.estado <> 3 AND IV.Tipo = 6 "
    sql = sql & " AND gn.transid = " & IdTrans
    Set rs = Me.OpenRecordset(sql)
    Set RSEncabezadoColas = rs
    Set rs = Nothing
    Exit Function
CapturaError:
    Set rs = Nothing
    MsgBox Err.Number & Err.Description
    Exit Function
End Function

'------PARA ECUAMUEBLE
Public Function CreaGNEstadoprod() As GNEstadoProd
    Dim obj As GNEstadoProd
    Set obj = New GNEstadoProd
    Set obj.Empresa = Me
    Set CreaGNEstadoprod = obj
    Set obj = Nothing
End Function

Public Function ListaGNEstadoProd(BandRS As Boolean, bandResumido As Boolean) As Variant
    Dim sql As String, rs As Recordset
    Dim ProdPT As String
    Dim ProdEG As String
    Dim ProdInt As String
    ProdPT = Me.GNOpcion.ObtenerValor("ProduccionUSUPT")
    ProdEG = Me.GNOpcion.ObtenerValor("ProduccionUSUEG")
    ProdInt = Me.GNOpcion.ObtenerValor("ProduccionUSUPINT")
        If bandResumido Then
            sql = "SELECT CodEstado,descripcion,menu,valor FROM GNestadoprod  "
            If UCase(ProdPT) = UCase(gobjMain.UsuarioActual.codUsuario) Or UCase(ProdEG) = UCase(gobjMain.UsuarioActual.codUsuario) Or UCase(ProdInt) = UCase(gobjMain.UsuarioActual.codUsuario) Then
               sql = sql & " Where menu <> 'Listo'"
            End If
        Else
            sql = "SELECT idestado,Codestado,descripcion,menu,color FROM GNestadoprod Where bandvalida = 1 AND MENU NOT IN ('Garantia','Prioridad','Urgencia') "
            If UCase(ProdPT) = UCase(gobjMain.UsuarioActual.codUsuario) Or UCase(ProdEG) = UCase(gobjMain.UsuarioActual.codUsuario) Or UCase(ProdInt) = UCase(gobjMain.UsuarioActual.codUsuario) Then
               sql = sql & " And menu <> 'Listo'"
            End If
        End If
       sql = sql & " ORDER BY Codestado"
        Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaGNEstadoProd = rs
    Else
        ListaGNEstadoProd = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaGNEstadoProdT(BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodEstado,descripcion,menu,valor FROM GNestadoprod  "
    sql = sql & " ORDER BY Valor"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaGNEstadoProdT = rs
    Else
        ListaGNEstadoProdT = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function RecuperaColas(transid As Long) As IVKProceso
    Dim obj As IVKProceso
    Set obj = New IVKProceso
    Set obj.Empresa = Me
    On Error Resume Next
    obj.RecuperarColas transid
    If Err.Number = 0 Then Set RecuperaColas = obj
   Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function spConsPRBalanceLinealxMesEjecPlani(bandBalance As Boolean) As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim v As Variant, v2() As Variant, i As Long, j As Long, k As Integer
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    sql = "spConsPRBalanceLinealxMesEjecPlani "
    sql = sql & gobjCond.numMoneda & "," & _
                        FechaYMD(IIf(bandBalance, Me.GNOpcion.FechaInicio, gobjCond.fecha1), TipoDB) & "," & _
                        FechaYMD(gobjCond.fecha2, TipoDB)
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    If Not rs.EOF Then v = rs.GetRows()
    'Mayoriza los valores
    MayorizaPresupuestoxMesPla v
    'Pasa los valores de v a v2 cambiando formato
    ' y filtrando registros por TipoCuenta, Nivel y Valor
    j = 0
    For i = 0 To UBound(v, 2)
        If Not IsNull(v(BAL_VALOR, i)) Then
            'Solo los que tengan valor diferente de 0
                'Si es para balance, solo tipo 1,2 y 3, sino solo tipo 4 y 5
                If (bandBalance And (v(BAL_TIPO, i) <= 3)) Or _
                   ((Not bandBalance)) Then 'And (v(BAL_TIPO, i) >= 4)
                   'Solo hasta el nivel indicado
                   If v(BAL_NIVEL, i) <= gobjCond.Nivel Then
                        ReDim Preserve v2(54, j)
                        v2(0, j) = v(BAL_TIPO, i)           'TipoCuenta
                        v2(1, j) = v(BAL_CODCUENTA, i)      'CodCuenta
                        v2(2, j) = v(BAL_NOMBRECUENTA, i)   'Cuenta
                        v2(3, j) = v(BAL_CODSUCURSAL, i)          'CODSUCURSAL   JEAA 16/01/04
                        v2(4, j) = v(BAL_VALOR, i)          'Valor
                        v2(5, j) = v(BAL_NIVEL, i)          'Nivel
                        
                        For k = 0 To 11
                            v2(6 + (k * 4), j) = v(9 + (k * 4), i)  'PLANI
                            If k < DatePart("m", Date) Then
                                v2(7 + (k * 4), j) = v(10 + (k * 4), i)  'EJEC
                                v2(8 + (k * 4), j) = v(11 + (k * 4), i)  'DIF
                                v2(9 + (k * 4), j) = v(12 + (k * 4), i)  'PORCE
                            Else
                                v2(7 + (k * 4), j) = 0  'EJEC
                                v2(8 + (k * 4), j) = 0  'DIF
                                v2(9 + (k * 4), j) = 0  'PORCE
                            
                            End If
                        Next k
                        
                      
                        j = j + 1
                    End If
                End If
        End If
    Next i
    If j Then spConsPRBalanceLinealxMesEjecPlani = v2
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta ConsPRBalanceLinealxMesEjecNew", "PR"
End Function


Private Sub MayorizaPresupuestoxMesPla(ByRef v As Variant)
    Dim i As Integer, nmax As Integer, j As Long, k As Integer
#If DAOLIB Then
    nmax = ObtieneMax(mdbEmpresa, "CTCuenta", "Nivel")
#Else
    nmax = ObtieneMax(mcnEmpresa, "CTCuenta", "Nivel")
#End If
    'Desde el nivel inferior hacia el nivel superior
    For i = nmax To 0 Step -1
        For j = 0 To UBound(v, 2)
            If (v(BAL_NIVEL, j) = i) And (v(BAL_BANDTOTAL, j) = True) Then
                For k = 0 To 11
                    v(9 + (k * 4), j) = SumaHijosPresupuestoNew(v, j, 9 + (k * 4))
                    v(10 + (k * 4), j) = SumaHijosPresupuestoNew(v, j, 10 + (k * 4))
                    v(11 + (k * 4), j) = SumaHijosPresupuestoNew(v, j, 11 + (k * 4))
                    v(12 + (k * 4), j) = PromedioHijosPresupuestoNew(v, j, 12 + (k * 4))
                Next k
            End If
        Next j
    Next i
End Sub

Private Function PromedioHijosPresupuestoNew(ByRef v As Variant, ByVal j As Long, ByVal col As Long) As Currency
    Dim i As Long, t As Currency, num As Integer
    
    'Busca todos los hijos de la cuenta indicada por j
    ' saca la suma total de los hijos en t
    For i = 0 To UBound(v, 2)
        If v(BAL_IDPADRE, i) = v(BAL_IDCUENTA, j) Then
            If Not IsNull(v(col, i)) Then
                t = t + v(col, i)
                If v(col, i) <> 0 Then
                    num = num + 1
                End If
            End If
        End If
    Next i
    If num = 0 Then num = 1
    PromedioHijosPresupuestoNew = t / num
End Function

Public Function ConsTiempos(codPC As String, Centro1 As String, Centro2 As String) As Recordset
    Dim sql As String, cond As String, s As String, rs As Recordset
    Dim bandFirst As Boolean
    Dim bandDos As Boolean
    On Error GoTo CapturaError
    sql = "select dp.id,gc.codcentro,pc.nombre,gcc.codcentrodet,gcc.descripciondet,ivp.codproceso,"
    sql = sql & " dp.Fecha , dp.HoraInicio, dp.HoraFinal,dp.HoraGracia, dp.NumHoras,dp.nota "
    sql = sql & " From ivkproceso p  inner join gncentrocostodetalle gcc inner join gncentrocosto gc "
    sql = sql & " inner join pcprovcli pc on pc.idprovcli = gc.idcliente "
    sql = sql & " On gc.idcentro = gcc.idcentro"
    sql = sql & " on gcc.idcentrodet = p.idcentrodet "
    sql = sql & " inner join ivproceso ivp on ivp.idproceso = p.idproceso "
    sql = sql & " inner join detalleproceso dp on dp.idkp = p.idkp"
    If Len(codPC) > 0 Then
        cond = " pc.codprovcli = '" & codPC & "'"
        bandFirst = True
        bandDos = True
    End If
    If Len(Centro1) > 0 And Len(Centro2) > 0 Then
        If bandFirst Then cond = cond & "AND "
        cond = cond & " gc.codcentro between '" & Centro1 & "' and '" & Centro2 & "'"
        bandDos = True
    End If
    If bandDos Then sql = sql & " WHERE " & cond
    sql = sql & " order by gc.codcentro,dp.Fecha,gcc.codcentrodet"
    Set rs = Me.OpenRecordset(sql)
    Set ConsTiempos = rs
    Set rs = Nothing
    Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
    'Me.GrabaGNLogAccion "CONSULTA", "Cons. Procesos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "IV"
End Function
'maderamica
Public Function RecuperaTiempos(transid As Long) As DetalleProceso
    Dim obj As DetalleProceso
    Set obj = New DetalleProceso
    Set obj.objEmpresa = Me
    On Error Resume Next
    obj.RecuperarTiempos transid
    If Err.Number = 0 Then Set RecuperaTiempos = obj
   Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function RecuperaPCProvCliQuick(key As Variant) As PCProvCli
    Dim obj As PCProvCli
    
    Set obj = New PCProvCli
    Set obj.Empresa = Me
    
    On Error Resume Next
    obj.RecuperarQuick key
    If Err.Number = 0 Then Set RecuperaPCProvCliQuick = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function


Public Function spConsPRBalanceLinealxMesCompPlani(bandBalance As Boolean) As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim v As Variant, v2() As Variant, i As Long, j As Long, k As Integer
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    sql = "spConsPRBalanceLinealxMesCompPlani "
    sql = sql & gobjCond.numMoneda & "," & _
                        FechaYMD(IIf(bandBalance, Me.GNOpcion.FechaInicio, gobjCond.fecha1), TipoDB) & "," & _
                        FechaYMD(gobjCond.fecha2, TipoDB)
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    If Not rs.EOF Then v = rs.GetRows()
    'Mayoriza los valores
    MayorizaPresupuestoxMesPla v
    'Pasa los valores de v a v2 cambiando formato
    ' y filtrando registros por TipoCuenta, Nivel y Valor
    j = 0
    For i = 0 To UBound(v, 2)
        If Not IsNull(v(BAL_VALOR, i)) Then
            'Solo los que tengan valor diferente de 0
                'Si es para balance, solo tipo 1,2 y 3, sino solo tipo 4 y 5
                If (bandBalance And (v(BAL_TIPO, i) <= 3)) Or _
                   ((Not bandBalance)) Then 'And (v(BAL_TIPO, i) >= 4)
                   'Solo hasta el nivel indicado
                   If v(BAL_NIVEL, i) <= gobjCond.Nivel Then
                        ReDim Preserve v2(54, j)
                        v2(0, j) = v(BAL_TIPO, i)           'TipoCuenta
                        v2(1, j) = v(BAL_CODCUENTA, i)      'CodCuenta
                        v2(2, j) = v(BAL_NOMBRECUENTA, i)   'Cuenta
                        v2(3, j) = v(BAL_CODSUCURSAL, i)          'CODSUCURSAL   JEAA 16/01/04
                        v2(4, j) = v(BAL_VALOR, i)          'Valor
                        v2(5, j) = v(BAL_NIVEL, i)          'Nivel
                        
                        For k = 0 To 11
                            v2(6 + (k * 4), j) = v(9 + (k * 4), i)  'PLANI
                            If k < DatePart("m", Date) Then
                                v2(7 + (k * 4), j) = v(10 + (k * 4), i)  'EJEC
                                v2(8 + (k * 4), j) = v(11 + (k * 4), i)  'DIF
                                v2(9 + (k * 4), j) = v(12 + (k * 4), i)  'PORCE
                            Else
                                v2(7 + (k * 4), j) = 0  'EJEC
                                v2(8 + (k * 4), j) = 0  'DIF
                                v2(9 + (k * 4), j) = 0  'PORCE
                            
                            End If
                        Next k
                        
                      
                        j = j + 1
                    End If
                End If
        End If
    Next i
    If j Then spConsPRBalanceLinealxMesCompPlani = v2
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta ConsPRBalanceLinealxMesCompNew", "PR"
End Function
Public Function RecuperaGNEstadoProd(key As Variant) As GNEstadoProd
    Dim obj As GNEstadoProd
    Set obj = New GNEstadoProd
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaGNEstadoProd = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function
Public Function RecuperaGNEstadoProdMenu(key As Variant) As GNEstadoProd
    Dim obj As GNEstadoProd
    Set obj = New GNEstadoProd
    Set obj.Empresa = Me
    On Error Resume Next
    obj.RecuperarxMenu key
    If Err.Number = 0 Then Set RecuperaGNEstadoProdMenu = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

'AUC
Public Function CreaIVKProceso() As IVKProceso
    Dim obj As IVKProceso
    Set obj = New IVKProceso
    Set obj.Empresa = Me
    Set CreaIVKProceso = obj
    Set obj = Nothing
End Function


Public Function spConsPRBalanceLinealxMesCompEjecPlani(bandBalance As Boolean) As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim v As Variant, v2() As Variant, i As Long, j As Long, k As Integer
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    sql = "spConsPRBalanceLinealxMesEjecPlaPlani "
    sql = sql & gobjCond.numMoneda & "," & _
                        FechaYMD(IIf(bandBalance, Me.GNOpcion.FechaInicio, gobjCond.fecha1), TipoDB) & "," & _
                        FechaYMD(gobjCond.fecha2, TipoDB)
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    If Not rs.EOF Then v = rs.GetRows()
    'Mayoriza los valores
    MayorizaPresupuestoxMesPlaCompEjec v
    'Pasa los valores de v a v2 cambiando formato
    ' y filtrando registros por TipoCuenta, Nivel y Valor
    j = 0
    For i = 0 To UBound(v, 2)
        If Not IsNull(v(BAL_VALOR, i)) Then
            'Solo los que tengan valor diferente de 0
                'Si es para balance, solo tipo 1,2 y 3, sino solo tipo 4 y 5
                If (bandBalance And (v(BAL_TIPO, i) <= 3)) Or _
                   ((Not bandBalance)) Then 'And (v(BAL_TIPO, i) >= 4)
                   'Solo hasta el nivel indicado
                   If v(BAL_NIVEL, i) <= gobjCond.Nivel Then
                        ReDim Preserve v2(109, j)
                        v2(0, j) = v(BAL_TIPO, i)           'TipoCuenta
                        v2(1, j) = v(BAL_CODCUENTA, i)      'CodCuenta
                        v2(2, j) = v(BAL_NOMBRECUENTA, i)   'Cuenta
                        v2(3, j) = v(BAL_CODSUCURSAL, i)          'CODSUCURSAL   JEAA 16/01/04
                        v2(4, j) = v(BAL_VALOR, i)          'Valor
                        v2(5, j) = v(BAL_NIVEL, i)          'Nivel
                        
                        
                        For k = 0 To 11
                                    v2(6 + (k * 8), j) = v(9 + (k * 8), i)  'PLANI

                            If k < DatePart("m", Date) Then
                                v2(7 + (k * 8), j) = v(10 + (k * 8), i)  'COMPRO
                                v2(8 + (k * 8), j) = v(11 + (k * 8), i)  'EJE
                                v2(9 + (k * 8), j) = v(12 + (k * 8), i)  'DIF COMP-EJEC
                                v2(10 + (k * 8), j) = v(13 + (k * 8), i)  'DIF PLA-COMP
                                v2(11 + (k * 8), j) = v(14 + (k * 8), i)  'PORCE PLA-COMP
                                v2(12 + (k * 8), j) = v(15 + (k * 8), i)  'DIF PLA-EJE
                                v2(13 + (k * 8), j) = v(16 + (k * 8), i)  'PORCE PLA-EJE
                                
                            Else
                                v2(7 + (k * 8), j) = 0  'EJEC
                                v2(8 + (k * 8), j) = 0  'DIF
                                v2(9 + (k * 8), j) = 0  'PORCE

                                v2(10 + (k * 8), j) = 0  'PORCE
                                v2(11 + (k * 8), j) = 0  'PORCE
                                v2(12 + (k * 8), j) = 0  'PORCE
                                v2(13 + (k * 8), j) = 0  'PORCE

                                End If
                        Next k
                        
                      
                        j = j + 1
                    End If
                End If
        End If
    Next i
    If j Then spConsPRBalanceLinealxMesCompEjecPlani = v2
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta spConsPRBalanceLinealxMesCompEjecPlani", "PR"
End Function


Private Sub MayorizaPresupuestoxMesPlaCompEjec(ByRef v As Variant)
    Dim i As Integer, nmax As Integer, j As Long, k As Integer
#If DAOLIB Then
    nmax = ObtieneMax(mdbEmpresa, "CTCuenta", "Nivel")
#Else
    nmax = ObtieneMax(mcnEmpresa, "CTCuenta", "Nivel")
#End If
    'Desde el nivel inferior hacia el nivel superior
    For i = nmax To 0 Step -1
        For j = 0 To UBound(v, 2)
            If (v(BAL_NIVEL, j) = i) And (v(BAL_BANDTOTAL, j) = True) Then
                For k = 0 To 11
                    v(9 + (k * 8), j) = SumaHijosPresupuestoNew(v, j, 9 + (k * 8))
                    v(10 + (k * 8), j) = SumaHijosPresupuestoNew(v, j, 10 + (k * 8))
                    v(11 + (k * 8), j) = SumaHijosPresupuestoNew(v, j, 11 + (k * 8))
                    v(12 + (k * 8), j) = SumaHijosPresupuestoNew(v, j, 12 + (k * 8))
                    v(13 + (k * 8), j) = SumaHijosPresupuestoNew(v, j, 13 + (k * 8))
                    v(14 + (k * 8), j) = PromedioHijosPresupuestoNew(v, j, 14 + (k * 8))
                    v(15 + (k * 8), j) = SumaHijosPresupuestoNew(v, j, 15 + (k * 8))
                    v(16 + (k * 8), j) = PromedioHijosPresupuestoNew(v, j, 16 + (k * 8))
                    
                    
                    
                Next k
            End If
        Next j
    Next i
End Sub

Public Function CargaConsolidadoBufferxDia() As Variant
    'jeaa 07-07-04
    ' PARA SIETE EMPRESAS COMO MAXIMO
    Dim sql As String, cond As String, CadenaPrecio As String, Trans As String
    Dim cadempresa As String, cadBodega As String, totalcero As Boolean, cond1 As String
    Dim v As Variant, max As Integer, TotalC As String, TotalP As String, i As Integer, rs As Recordset, TotalCMAx As String
    Dim CodInv As String, codBod As String, Orden As String, cadTrans As String
    Dim W As Variant, j As Integer, Grupo As String
    Dim vBod As Variant, vNomEmp As Variant, vTrans As Variant
    Dim Cadtitulo As String, k As Integer
    Dim condTrans As String, vaux As Variant
    Dim numReg As Long, numMoneda As String
    Dim cadETrans As Variant, cadEBodega As Variant, basePrincipal As String
    Dim TotalE As String, TotalProm As String, difDias As Integer, Intervalo As Double
    Dim TotalCUC As String, TotalUtil As String, TotalPUtil As String, Fijo As Integer, TotalTra As String
    Dim NumMeses As Long
    Dim TotalComp As String
    With gobjCond
        NumMeses = DateDiff("m", .fecha1, .fecha2)
        If NumMeses = 0 Then NumMeses = 1
       numMoneda = Trim(IIf(.numMoneda > 0, Str(.numMoneda + 1), ""))
        v = Split(.Sucursal, ";")
        vTrans = Split(.CodTrans, ";")
        For i = 0 To UBound(v)
            vNomEmp = Split(v(i), ",")
            Cadtitulo = Cadtitulo & vNomEmp(1) & " - "
        Next i
        'para quitar el ultimo "-"
        Cadtitulo = Mid$(Cadtitulo, 1, Len(Cadtitulo) - 3)
        cond = " "
        TotalC = ", ( "
        TotalCMAx = ", ( "
        TotalP = ", ( "
        TotalProm = ", ( "
        TotalE = ", ( "
        TotalCUC = ", ( "
        TotalUtil = ", ( "
        TotalPUtil = ", ( "
        TotalComp = ", ( "
        TotalTra = ", ( "
        max = UBound(v, 1)
        ReDim cadETrans(max, 2)
        ReDim cadEBodega(max, 2)
        cadETrans = llenaCadxEmpresa(vTrans, UBound(v))
        W = Split(v(0), ",")
        basePrincipal = W(1)
        difDias = DateDiff("d", .fecha1, .fecha2)
        For k = 0 To max
            sql = "SELECT   "
            sql = sql & "  vwVentasPorBodega.idinventario, CodInventario, Descripcion," & NumMeses & "  as TiempoPromVta, TiempoReposicion, "
            sql = sql & " CodGrupo" & .NumGrupo & " as CodGrupo,"
            sql = sql & "  DescGrupo" & .NumGrupo & "  as DescGrupo,"
            sql = sql & " isnull(sum(Cant),0) * -1  AS TCant,  "
'            sql = sql & " case when AnexoCodTipoComp='4' then 0 else isnull(MAX(abs(Cant)),0) END   AS CantMax  "
            sql = sql & "  0 AS CantMax "
            sql = sql & "  Into " & basePrincipal & ".dbo.T" & k
            W = Split(v(k), ",")
            sql = sql & " from "
            sql = sql & W(1) & ".dbo.vwVentasPorBodega vwVentasPorBodega "
            sql = sql & " Left Join "
            sql = sql & W(1) & ".dbo.VWIVProveedorDetalle ip "
            sql = sql & " Inner Join "
            sql = sql & W(1) & ".dbo.pcprovcli pc on ip.IdProveedor=pc.idprovcli "
            sql = sql & " on vwVentasPorBodega.idinventario=ip.idinventario "
            cond = " WHERE (FechaTrans BETWEEN " & _
                         FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & _
                        " AND " & FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            cond = cond & " AND  AnexoCodTipoComp in (" & PreparaCadena(.CodBanco2) & ") "
            cond = cond & " AND  AnexoCodTipoTrans in (" & PreparaCadena(.CodBanco1) & ") "
            
            If Len(.CodPC1) > 0 Then
                cond = cond & " and pc.codprovcli='" & .CodPC1 & "'"
            End If
            
            If Not (Len(.Grupo1) = 0 And Len(.Grupo2) = 0) Then
                cond = cond & " AND (codGrupo" & .NumGrupo & " BETWEEN '" & _
                .Grupo1 & "' AND '" & .Grupo2 & "') "
            End If
            If Not (Len(.CodItem1) = 0 And Len(.CodItem2) = 0) Then
                cond = cond & " AND (CodInventario BETWEEN '" & .CodItem1 & "' AND '" & .CodItem2 & "') "
            End If
            
            If Not (Len(.Bienes)) = 0 Then
                cond = cond & Mid$(.Bienes, 1, 6) & " vwVentasPorBodega" & Mid$(.Bienes, 19, 60)
            End If
            
            
            
            Grupo = " group by "
            Grupo = Grupo & "  vwVentasPorBodega.idinventario, CodInventario, Descripcion,   "
            Orden = " ORDER BY CodInventario"
            Grupo = Grupo & " CodGrupo" & .NumGrupo & " , DescGrupo" & .NumGrupo
            Grupo = Grupo & " , TiempoPromVta , TiempoReposicion"
            sql = sql & cond & cond1 & Grupo & Orden
            
            VerificaExistenciaTablaTemporal k
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
    
            sql = "  SELECT     vwVentasPorBodega.idinventario,"
            sql = sql & "  isnull(ABS(SUM(cant)), 0) As CantMax"
            sql = sql & "  Into " & basePrincipal & ".dbo.T" & k + 50
            sql = sql & "  from "
            sql = sql & W(1) & ".dbo.vwVentasPorBodega vwVentasPorBodega "
            sql = sql & " Left Join "
            sql = sql & W(1) & ".dbo.VWIVProveedorDetalle ip "
            sql = sql & " Inner Join "
            sql = sql & W(1) & ".dbo.pcprovcli pc on ip.IdProveedor=pc.idprovcli "
            sql = sql & " on vwVentasPorBodega.idinventario=ip.idinventario"
            
            
            sql = sql & " WHERE (FechaTrans BETWEEN " & _
                         FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & _
                        " AND " & FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            
            sql = sql & " AND  AnexoCodTipoComp in (" & PreparaCadena(.CodBanco2) & ") "
            sql = sql & " AND  AnexoCodTipoTrans in (" & PreparaCadena(.CodBanco1) & ") "
            
            If Len(.CodPC1) > 0 Then
                cond = cond & " and pc.codprovcli='" & .CodPC1 & "'"
            End If
            
            
            If Not (Len(.Grupo1) = 0 And Len(.Grupo2) = 0) Then
                sql = sql & " AND (codGrupo" & .NumGrupo & " BETWEEN '" & _
                .Grupo1 & "' AND '" & .Grupo2 & "') "
            End If
            If Not (Len(.CodItem1) = 0 And Len(.CodItem2) = 0) Then
                sql = sql & " AND (CodInventario BETWEEN '" & .CodItem1 & "' AND '" & .CodItem2 & "') "
            End If
        
            If Not (Len(.Bienes)) = 0 Then
                sql = sql & Mid$(.Bienes, 1, 6) & " vwVentasPorBodega" & Mid$(.Bienes, 19, 60)
            End If
        
        
                sql = sql & " group by   vwVentasPorBodega.idinventario"
            
            VerificaExistenciaTablaTemporal k + 50
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
                            
            'COMPRAS
            sql = "select I.idinventario, sum(I.cantidad) as cantIngresada"
            sql = sql & "  Into " & basePrincipal & ".dbo.T" & k + 100
            'sql = sql & "  Into Tmp0"
            sql = sql & " from " & W(1) & ".dbo.gncomprobante g"
            sql = sql & " inner join " & W(1) & ".dbo.ivkardex i"
            sql = sql & " Left Join "
            sql = sql & W(1) & ".dbo.VWIVProveedorDetalle ip "
            sql = sql & " Inner Join "
            sql = sql & W(1) & ".dbo.pcprovcli pc on ip.IdProveedor=pc.idprovcli "
            sql = sql & " on I.idinventario=ip.idinventario"
            
            
            sql = sql & " inner join " & W(1) & ".dbo.ivinventario ivinventario on ivinventario.idinventario=i.idinventario"
            sql = sql & " on g.transid=i.transid"
            sql = sql & " Where G.Estado <> 3"
            sql = sql & " and codtrans in ('" & .CodForma & "')"
            '" & .CodComp & "M')"
            If Len(.CodPC1) > 0 Then
                cond = cond & " and pc.codprovcli='" & .CodPC1 & "'"
            End If
            
            
            If Not (Len(.Bienes)) = 0 Then
                sql = sql & .Bienes
            End If
            
            sql = sql & " group by I.idinventario"

            VerificaExistenciaTablaTemporal k + 100
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            'PEDIDO
    
            sql = "select I.idinventario, sum(I.cantidad) as cantPedido"
            sql = sql & "  Into " & basePrincipal & ".dbo.T" & k + 200
            sql = sql & " from " & W(1) & ".dbo.gncomprobante g"
            sql = sql & " inner join " & W(1) & ".dbo.ivkardex i"
            sql = sql & " Left Join "
            sql = sql & W(1) & ".dbo.VWIVProveedorDetalle ip "
            sql = sql & " Inner Join "
            sql = sql & W(1) & ".dbo.pcprovcli pc on ip.IdProveedor=pc.idprovcli "
            sql = sql & " on I.idinventario=ip.idinventario"
            
            sql = sql & " inner join " & W(1) & ".dbo.ivinventario ivinventario on ivinventario.idinventario=i.idinventario"
            sql = sql & " on g.transid=i.transid"
            sql = sql & " Where G.Estado <> 3"
            sql = sql & " and codtrans in('" & .CodComp & "','" & .CodComp & "M')"
            
            If Len(.CodPC1) > 0 Then
                cond = cond & " and pc.codprovcli='" & .CodPC1 & "'"
            End If
            
            If Not (Len(.Bienes)) = 0 Then
                sql = sql & .Bienes
            End If
            
            
            sql = sql & " group by I.idinventario"
    
            VerificaExistenciaTablaTemporal k + 200
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            sql = "select isnull(" & basePrincipal & ".dbo.T" & k + 100 & ".idinventario,  " & basePrincipal & ".dbo.T" & k + 200 & ".idinventario) as idinventario,  "
            sql = sql & "case when (cantPedido-isnull(cantIngresada,0))  <0 then 0 else cantPedido-isnull(cantIngresada,0) end as Transito "
            sql = sql & "  Into " & basePrincipal & ".dbo.T" & k + 300
            sql = sql & " from " & basePrincipal & ".dbo.T" & k + 100
            sql = sql & " full join " & basePrincipal & ".dbo.T" & k + 200
            sql = sql & " on " & basePrincipal & ".dbo.T" & k + 100 & ".idinventario "
            sql = sql & " = " & basePrincipal & ".dbo.T" & k + 200 & ".idinventario "
    
            VerificaExistenciaTablaTemporal k + 300
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            ' PEDIDO CLIENTE
            sql = "select"
            sql = sql & " G.TRANSID, I.IDinventario, sum(cantidad) as cant"
            sql = sql & "  Into " & basePrincipal & ".dbo.T" & k + 400
            sql = sql & " from " & W(1) & ".dbo.gncomprobante g"
            sql = sql & " inner join " & W(1) & ".dbo.gntrans gnt left join " & W(1) & ".dbo.Anexo_Comprobantes anc on anc.id=gnt.AnexoCodTipoComp "
            sql = sql & " inner join " & W(1) & ".dbo.Anexos_Transacciones a on a.codtrans= gnt.AnexoCodTipoTrans"
            sql = sql & " on g.codtrans=gnt.codtrans"
            sql = sql & " inner join " & W(1) & ".dbo.ivkardex i"
            sql = sql & " inner join " & W(1) & ".dbo.ivinventario ivi"
            sql = sql & " on i.idinventario = ivi.idinventario"
            sql = sql & " on g.transid = i.transid"
            sql = sql & " Where Estado <> 3"
            
            sql = sql & " AND (G.FechaTrans BETWEEN " & _
                         FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & _
                        " AND " & FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            
            sql = sql & " AND  AnexoCodTipoComp in (" & PreparaCadena(.CodBanco2) & ") "
            sql = sql & " AND  AnexoCodTipoTrans in (" & PreparaCadena(.CodBanco1) & ") "
            
            sql = sql & "group by G.TRANSID,I.IDinventario"
            
            VerificaExistenciaTablaTemporal k + 400
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            ' DESPACHO CLIENTE
            sql = "select"
            sql = sql & " I.IDinventario, sum(cantidad) as cant, IDTRANSFUENTE"
            sql = sql & "  Into " & basePrincipal & ".dbo.T" & k + 500
            sql = sql & " from " & W(1) & ".dbo.gncomprobante g"
            sql = sql & " inner join " & W(1) & ".dbo.gntrans gnt left join " & W(1) & ".dbo.Anexo_Comprobantes anc on anc.id=gnt.AnexoCodTipoComp "
            sql = sql & " inner join " & W(1) & ".dbo.Anexos_Transacciones a on a.codtrans= gnt.AnexoCodTipoTrans"
            sql = sql & " on g.codtrans=gnt.codtrans"
            
            sql = sql & " inner join " & W(1) & ".dbo.ivkardex i"
            sql = sql & " inner join " & W(1) & ".dbo.ivinventario ivi"
            sql = sql & " on i.idinventario = ivi.idinventario"
            sql = sql & " on g.transid = i.transid"
            sql = sql & " Where Estado <> 3"
            sql = sql & " AND  NOT AnexoCodTipoComp in (" & PreparaCadena(.CodBanco2) & ") "
            sql = sql & " AND  NOT AnexoCodTipoTrans in (" & PreparaCadena(.CodBanco1) & ") "
            
            sql = sql & " group by I.IDinventario, IDTRANSFUENTE"
            
            
            
            VerificaExistenciaTablaTemporal k + 500
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            'SALDO POR DESPACHAR
            
            sql = "SELECT T1.IDINVENTARIO, (sum(T1.CANT)- isnull(sum(T2.CANT),0))*-1 AS XDESPACHAR "
            sql = sql & "  Into " & basePrincipal & ".dbo.T" & k + 600
            sql = sql & " FROM " & basePrincipal & ".dbo.T" & k + 400 & " T1 LEFT JOIN " & basePrincipal & ".dbo.T" & k + 500
            sql = sql & " T2 ON T1.TRANSID = T2.IDTRANSFUENTE AND T1.IDINVENTARIO = T2.IDINVENTARIO"
            sql = sql & " group by T1.IDINVENTARIO"
            
            VerificaExistenciaTablaTemporal k + 600
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            sql = "select "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".Codinventario, i.Codinventario) As Codinventario, "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".Descripcion, i.Descripcion) as Descripcion, "
            sql = sql & basePrincipal & ".dbo.T" & k & ".TiempoPromVta as TiempoPromVta, "
            sql = sql & basePrincipal & ".dbo.T" & k & ".TiempoReposicion as TiempoReposicion, "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".CodGrupo,i.CodGrupo" & .NumGrupo & ") as CodGrupo, "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".DescGrupo, i.DescGrupo" & .NumGrupo & ") as DescGrupo, "
            sql = sql & "  isnull(sum(" & basePrincipal & ".dbo.T" & k & ".TCant), 0) as TCant, "
            sql = sql & "  isnull(sum(" & basePrincipal & ".dbo.T" & k + 50 & ".CantMax), 0)  as TCAntMAx, "
            sql = sql & "  isnull(sum(" & basePrincipal & ".dbo.T" & k & ".TCant), 0)/" & NumMeses & "as Prom, "
            sql = sql & "  round(isnull(sum(" & basePrincipal & ".dbo.T" & k & ".TCant), 0)/( " & NumMeses & "   *20"
            sql = sql & "   ),1) as PromDiario, "
            sql = sql & "  isnull(sum(i.exist), 0) as Existencia,  "
            sql = sql & "  isnull(sum(" & basePrincipal & ".dbo.T" & k + 300 & ".Transito), 0) as Transito, "
            'sql = sql & "  isnull(sum(ic.compr)*-1, 0) as Comprometido "
            sql = sql & "  isnull(sum(" & basePrincipal & ".dbo.T" & k + 600 & ".XDESPACHAR), 0) as Comprometido "
            sql = sql & "  Into " & basePrincipal & ".dbo.Tmp" & k
            sql = sql & " from "

            sql = sql & basePrincipal & ".dbo.T" & k & " left join " & basePrincipal & ".dbo.T" & k + 50 & " on " & basePrincipal & ".dbo.T" & k & ".idinventario = " & basePrincipal & ".dbo.T" & k + 50 & ".idinventario"
            sql = sql & "  inner join " & W(1) & ".dbo.vwivexist i "
            sql = sql & "  inner join " & W(1) & ".dbo.IVinventario iv  "
'            sql = sql & "  inner join " & w(1) & ".dbo.VWivcompr ic on ic.idinventario=iv.idinventario "
            sql = sql & " on i.idinventario=iv.idinventario"
            sql = sql & " on " & basePrincipal & ".dbo.T" & k & ".idinventario=i.idinventario"
            sql = sql & "  left join " & basePrincipal & ".dbo.T" & k + 300
            sql = sql & " on " & basePrincipal & ".dbo.T" & k + 300 & ".idinventario=i.idinventario"
            
            sql = sql & "  left join " & basePrincipal & ".dbo.T" & k + 600
            sql = sql & " on " & basePrincipal & ".dbo.T" & k + 600 & ".idinventario=i.idinventario"
            
            
            'sql = sql & " left join " & basePrincipal & ".dbo.T" & k + 100 & " on " & basePrincipal & ".dbo.T" & k & ".idinventario = " & basePrincipal & ".dbo.T" & k + 50 & ".idinventario"
            
            
            
'            sql = sql & "  full join " & w(1) & ".dbo.vwivexist i "
'            sql = sql & " on " & basePrincipal & ".dbo.T" & k & ".idinventario=i.idinventario"
            sql = sql & " WHERE ((i.exist <> 0) OR (i.exist= 0))  "

            If Not (Len(.Grupo1) = 0 And Len(.Grupo2) = 0) Then
                sql = sql & "  AND (i.codGrupo" & .NumGrupo & " BETWEEN '" & _
                .Grupo1 & "' AND '" & .Grupo2 & "') "
            End If
            If Not (Len(.CodItem1) = 0 And Len(.CodItem2) = 0) Then
                sql = sql & "AND (i.CodInventario BETWEEN '" & .CodItem1 & "' AND '" & .CodItem2 & "') "
            End If
            
            If Not (Len(.Bienes)) = 0 Then
                sql = sql & Mid$(.Bienes, 1, 7) & "v" & Mid$(.Bienes, 19, 60)
            End If
            
            
            sql = sql & "  group by "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".Codinventario, i.Codinventario) , "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".Descripcion, i.Descripcion) , "
            sql = sql & basePrincipal & ".dbo.T" & k & ".TiempoPromVta, "
            sql = sql & basePrincipal & ".dbo.T" & k & ".TiempoReposicion, "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".CodGrupo,i.CodGrupo" & .NumGrupo & ") , "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".DescGrupo, i.DescGrupo" & .NumGrupo & ")  "
                
            VerificaExistenciaTabla k
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        Next k
        
        sql = " select "
        sql = sql & ArmaSQL("CodInventario", max)
        sql = sql & ArmaSQL("descripcion", max)
        sql = Mid$(sql, 1, Len(sql) - 2)
       For i = 0 To max
           TotalC = TotalC & " isnull(TMP" & i & ".TCant,0) +"
           TotalCMAx = TotalCMAx & " isnull(TMP" & i & ".TCantMax,0) +"
            TotalProm = TotalProm & " isnull(TMP" & i & ".prom,0) +"
            TotalP = TotalP & " isnull(TMP" & i & ".PromDiario,0) +"
            TotalE = TotalE & " isnull(TMP" & i & ".Existencia,0) +"
            TotalComp = TotalComp & " isnull(TMP" & i & ".Comprometido,0) +"
            TotalTra = TotalTra & " isnull(TMP" & i & ".Transito,0) +"
            
        Next i
        For i = max + 1 To 6
            sql = sql & "  , 0 as TiempoReposicion" & i
            sql = sql & " , 0 as Cant" & i
            sql = sql & " , 0 as CantMax" & i & ", 0 as PTot" & i
            sql = sql & " , 0 as Prom" & i & ", 0 as existencia" & i & ", 0 as comprometido" & i & ", 0 as Transito" & i
            sql = sql & " , 0 as ExistOptima" & i & " , 0 as Diferencia" & i & ""
        Next i

        TotalC = Mid(TotalC, 1, Len(TotalC) - 1)
        TotalCMAx = Mid(TotalCMAx, 1, Len(TotalCMAx) - 1)
        TotalP = Mid(TotalP, 1, Len(TotalP) - 1)
        TotalProm = Mid(TotalProm, 1, Len(TotalProm) - 1)
        TotalE = Mid(TotalE, 1, Len(TotalE) - 1)
        TotalComp = Mid(TotalComp, 1, Len(TotalComp) - 1)
        TotalTra = Mid(TotalTra, 1, Len(TotalTra) - 1)
        
        i = 0
        sql = sql & "  ,isnull(TMP" & i & ".TiempoReposicion,0) AS TiempoRep"
        sql = sql & ", Round(" & Mid$(TotalProm, 2, Len(TotalProm)) & "),0)  as TotalPromMen "
        sql = sql & ", Round(" & Mid$(TotalP, 2, Len(TotalP)) & "),0)  as TotalPromDia "
        sql = sql & ", Round(" & Mid$(TotalE, 2, Len(TotalE)) & "),0)  as TotalExist "
        sql = sql & ", Round(" & Mid$(TotalComp, 2, Len(TotalComp)) & "),0)  as Totalcomp "
        sql = sql & ", Round(" & Mid$(TotalCMAx, 2, Len(TotalCMAx)) & "),0)  as Totalcmax "
        sql = sql & ", Round(" & Mid(TotalP, 2, Len(TotalP) - 1) & ")  *  isnull(TMP" & i & ".TiempoReposicion,0),0) AS ExistenciaOptima "
        sql = sql & ", Round(" & Mid$(TotalTra, 2, Len(TotalTra)) & "),0)  as TotalTra "

        sql = sql & "  Into " & basePrincipal & ".dbo.Tmp" & k + 1

         For i = max To 0 Step -1
            If i = max Then
                sql = sql & " From "
            Else
                sql = sql & " FULL JOIN "
           End If
            sql = sql & " " & basePrincipal & ".dbo.TMP" & i & " "
        Next i
        If max > 0 Then
            For i = 0 To max - 1
                If i = 0 Then
                    CodInv = " ON " & basePrincipal & ".dbo.TMP" & i & ".CodInventario="
                    CodInv = CodInv & "" & basePrincipal & ".dbo.TMP" & i + 1 & ".CodInventario"
                    sql = sql & CodInv
                Else
                    Dim m As Integer
                    CodInv = ""
                    For m = 0 To i
                        If m = 0 Then
                            CodInv = CodInv & " ON " & basePrincipal & ".dbo.TMP" & i & ".CodInventario="
                            CodInv = CodInv & "" & basePrincipal & ".dbo.TMP" & i + 1 & ".CodInventario"
                        Else
                            CodInv = CodInv & " OR " & basePrincipal & ".dbo.TMP" & m - 1 & ".CodInventario="
                            CodInv = CodInv & "" & basePrincipal & ".dbo.TMP" & i + 1 & ".CodInventario"
                        End If
                    Next m
                    sql = sql & CodInv
                End If
            Next i
        End If
        
        VerificaExistenciaTabla k + 1
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
                
        sql = " select distinct "
        sql = sql & " i.idinventario, t.CodInventario, "
        sql = sql & " t.descripcion,  TotalExist , Totalcmax, TotalComp, TotalTra, "
        'sql = sql & " case when (ExistenciaOptima - TotalExist + totalcomp - TotalTra ) <0 then 0 else  abs( ExistenciaOptima - TotalExist + totalcomp - TotalTra ) end as saldo, "
        'sql = sql & " abs( ExistenciaOptima - TotalExist + totalcomp - TotalTra ) as saldo, "
        'sql = sql & " case when ( ExistenciaOptima - TotalExist + totalcomp - TotalTra ) <0 then 0 else ( ExistenciaOptima - TotalExist + totalcomp - TotalTra ) end as saldo,"
        sql = sql & " case when (TotalComp- TotalExist-TotalTra)>0 then (TotalComp- TotalExist-TotalTra) else 0 end  as saldo, "
        sql = sql & "  0 as BandPedido, "
        sql = sql & " pc.nombre, ISNULL(IP.Cantidad,0), ISNULL(CostoUnitario,0), ip.Fecha, ExistenciaOptima, TotalPromMen "
        sql = sql & " from tmp" & k + 1 & " t "
        sql = sql & " inner join ivinventario i on t.codinventario=i.codinventario "
        Select Case .Nivel
        Case 0
            sql = sql & " left join IVProveedorDetalle ip"
            sql = sql & " inner join pcprovcli pc on ip.IdProveedor=pc.idprovcli and ip.bandprincipal=1"
            sql = sql & " on i.idinventario=ip.idinventario"
        Case 1
            sql = sql & " left join VWIVProveedorDetalle ip"
            sql = sql & " inner join pcprovcli pc on ip.IdProveedor=pc.idprovcli"
            sql = sql & " on i.idinventario=ip.idinventario"
'        Case 2
'            sql = " select distinct"
'            sql = sql & " isnull(t.idinventario, ip.idinventario) as ivinventario,"
'            sql = sql & " isnull(t.CodInventario, iv.CodInventario) as CodInventario,"
'            sql = sql & " isnull(t.descripcion, iv.descripcion) as descripcion, isnull(TotalExist ,0),"
'            sql = sql & "  abs( ExistenciaOptima - TotalExist) as saldo, "
'            sql = sql & "  0 as BandPedido,  pc.nombre, ISNULL(IP.Cantidad,0), ISNULL(CostoUnitario,0), ip.Fecha"
'            sql = sql & " from tmp" & k + 1 & " t "
'            sql = sql & " right join (IVProveedorDetalle ip"
'            sql = sql & " inner join ivinventario iv on ip.idinventario=iv.idinventario "
'            'sql = sql & " inner join tmp0 e on iv.idinventario = e.idinventario )"
'            sql = sql & " inner join pcprovcli pc on ip.IdProveedor=pc.idprovcli"
'            sql = sql & " on iv.idinventario=ip.idinventario"
        End Select
                
        sql = sql & " WHERE 1=1"
                
        If Len(.CodPC1) > 0 Then
            sql = sql & " and pc.codprovcli='" & .CodPC1 & "'"
        End If
                
                
        
        If .tipoItem1 Then
            sql = sql & " and (TotalExist  >= ( ExistenciaOptima+ (ExistenciaOptima *0.5))) and (TotalExist <= TotalPromMen)"
            If .IncluirCero Then
                sql = sql & " or  (TotalExist  <  ExistenciaOptima) "
            End If
        Else
            If .IncluirCero Then
                sql = sql & " and ((Totalcmax-TotalExist-TotalTra)  <  ExistenciaOptima) "
'            Else
'                sql = sql & " WHERE (TotalExist  >= ( ExistenciaOptima+ (ExistenciaOptima *0.5))) and (TotalExist <= TotalPromMen)"
'                sql = sql & " or  (TotalExist  <  ExistenciaOptima) "
            End If
        End If
        sql = sql & " and (TotalComp- TotalExist-TotalTra)>0 "
        
        i = 0
        
        
        
       sql = sql & " order by "
        sql = sql & "t.CodInventario"

       Set rs = gobjMain.EmpresaActual.OpenRecordset(sql)
    Set CargaConsolidadoBufferxDia = rs
    Set rs = Nothing
       
    End With
End Function


Public Function ConsCTBalanceGPorMesNiveles() As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim v As Variant, v2() As Variant, i As Long, j As Long, numReg As Long
    Dim bandBalance As Boolean
    Dim mes As Long, MesFin As Integer
    Const BAL_VAL = 7
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsCTBalance")
    qdef.Parameters("FechaDesde") = IIf(bandBalance, Me.GNOpcion.FechaInicio, gobjCond.fecha1)
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodCuenta1") = "0"
    qdef.Parameters("CodCuenta2") = String(20, "9")
    qdef.Parameters("CodSucursal") = gobjCond.Sucursal ' ********* jeaa
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
    If Not rs.EOF Then
        rs.MoveLast
        rs.MoveFirst
        v = rs.GetRows(rs.RecordCount)
    End If
#Else
    bandBalance = True
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    MesFin = DateDiff("m", gobjCond.fecha1, gobjCond.fecha2) + 2
    For mes = 1 To MesFin + 1
       '/*-------------------------------------------------
        ' * Filtrar solo los asientos que est n dentro del rango
        ' --------------------------------------------------*/
        VerificaExistenciaTabla (10 * mes) + 2
        sql = " SELECT CTCuenta.CodCuenta, sum(Debe/Cotizacion2) as Debe,"
        sql = sql & " sum(Haber/Cotizacion2) AS Haber, 0 AS Saldo"
        'sql = sql & " Into tmp" & (10 * mes) + 1
        sql = sql & " Into tmp" & (10 * mes) + 2
        sql = sql & " FROM CTCuenta INNER JOIN (GNComprobante"
        sql = sql & " INNER JOIN CTLibroDetalle ON GNComprobante.CodAsiento = CTLibroDetalle.CodAsiento)"
        sql = sql & " ON CTCuenta.IdCuenta = CTLibroDetalle.IdCuenta"
        sql = sql & " where ((GNComprobante.Estado)<>3  And (GNComprobante.Estado<>0))"
        If mes = 1 Then
            sql = sql & " AND (GNComprobante.FechaTrans <" & FechaYMD("01/" & DatePart("m", gobjCond.fecha1) & "/" & DatePart("yyyy", gobjCond.fecha1), TipoDB) & " )"
        ElseIf mes < (MesFin + 1) Then
            sql = sql & " AND (GNComprobante.FechaTrans >= " & FechaYMD(DateAdd("m", mes - 2, "01/" & DatePart("m", gobjCond.fecha1) & "/" & DatePart("yyyy", gobjCond.fecha1)), TipoDB) & " and GNComprobante.FechaTrans < " & FechaYMD(DateAdd("m", mes - 1, "01/" & DatePart("m", gobjCond.fecha1) & "/" & DatePart("yyyy", gobjCond.fecha1)), TipoDB) & ")"
        ElseIf mes = (MesFin + 1) Then
'            sql = sql & " AND (GNComprobante.FechaTrans >= " & FechaYMD("01/" & DatePart("m", gobjCond.fecha1) & "/" & DatePart("yyyy", gobjCond.fecha1), TipoDB) & " and GNComprobante.FechaTrans < " & FechaYMD(DateAdd("m", mes - 2, "01/" & DatePart("m", gobjCond.fecha1) & "/" & DatePart("yyyy", gobjCond.fecha1)), TipoDB) & ")"
             sql = sql & " and GNComprobante.FechaTrans < " & FechaYMD(DateAdd("m", mes - 2, "01/" & DatePart("m", gobjCond.fecha1) & "/" & DatePart("yyyy", gobjCond.fecha1)), TipoDB)
        End If
        If Len(gobjCond.CodCuenta2) = 0 Then gobjCond.CodCuenta2 = gobjCond.CodCuenta1
        If Len(gobjCond.CodCuenta1) > 0 Then
            sql = sql & " AND CTCuenta.CodCuenta BETWEEN '" & gobjCond.CodCuenta1 & "' AND '" & gobjCond.CodCuenta2 & "'"
        End If
        If Len(gobjCond.Sucursal) > 0 Then
            sql = sql & "   and idLocal like " & gobjCond.Sucursal
        End If
        sql = sql & "    AND CTCUENTA.TIPOCUENTA < 4"
        sql = sql & "  group by  CTCuenta.CodCuenta "
'        sql = sql & "    AND GNComprobante.descripcion not like 'Cierre de ejercicio'"

        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        '/*-------------------------------------------------
        ' * Calcular la suma por cuenta
        ' --------------------------------------------------*/
'        VerificaExistenciaTabla (10 * mes) + 2
'        sql = " SELECT"
'        sql = sql & " tmp" & (10 * mes) + 1 & ".CodCuenta,"
'        sql = sql & " Sum(tmp" & (10 * mes) + 1 & ".Debe0) AS Debe,    Sum(tmp" & (10 * mes) + 1 & ".Haber0) AS Haber"
'        sql = sql & " Into tmp" & (10 * mes) + 2
'        sql = sql & " From tmp" & (10 * mes) + 1
'        sql = sql & " GROUP BY tmp" & (10 * mes) + 1 & ".CodCuenta"
'        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        ' /*-------------------------------------------------
        ' * Devolver en formato de Balance/Estado P.G.
        ' --------------------------------------------------*/
        VerificaExistenciaTabla (10 * mes) + 3
        sql = " SELECT"
        sql = sql & " ct.IdCuenta, ct.CodCuenta, ct.NombreCuenta,"
        sql = sql & " CTL.Nombre, Debe , Haber, Debe - Haber AS Valor, ct.Nivel,"
        sql = sql & " ct.IdCuentaSuma , ct.TipoCuenta, ct.BandTotal"
        sql = sql & " Into tmp" & (10 * mes) + 3
        sql = sql & " FROM CTLocal ctl right join CTcuenta ct"
        sql = sql & " left JOIN tmp" & (10 * mes) + 2 & " ON ct.CodCuenta = tmp" & (10 * mes) + 2 & ".CodCuenta"
        sql = sql & " on ct.idlocal=ctl.IDLocal"
        sql = sql & " ORDER BY ct.CodCuenta"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
    Next mes
    mes = 1
    sql = "select "
    sql = sql & " tmp" & mes & "3.IdCuenta, tmp" & mes & "3.CodCuenta, tmp" & mes & "3.NombreCuenta, tmp" & mes & "3.Nombre,  tmp" & mes & "3.BandTotal, "
    For mes = 1 To MesFin + 1
       sql = sql & " tmp" & mes & "3.debe, tmp" & mes & "3.Haber,"
        sql = sql & " tmp" & mes & "3.Valor, tmp" & mes & "3.Nivel,"
        sql = sql & " tmp" & mes & "3.IdCuentaSuma , tmp" & mes & "3.TipoCuenta,"
    Next mes
    'quita ultima coma
    sql = Mid$(sql, 1, Len(sql) - 1)
    sql = sql & " from tmp13  "
    If mes > 1 Then
        For mes = 2 To MesFin + 1
           sql = sql & " inner join tmp" & mes & "3 on tmp" & mes & "3.idcuenta=tmp13.idcuenta "
        Next mes
    End If
    If Not gobjCond.IncluirCero Then
        sql = sql & " where tmp13.BandTotal=" & 0
    End If
   rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    If Not rs.EOF Then v = rs.GetRows()
#End If
    'Mayoriza los valores
    'MayorizaxMeses v, MesFin - 1
    MayorizaxMeses v, MesFin
    'Pasa los valores de v a v2 cambiando formato
    ' y filtrando registros por TipoCuenta, Nivel y Valor
    Dim BandSigue As Boolean, bandDifCero As Boolean
    BandSigue = True
    bandDifCero = True
'    j = 0
    For i = 0 To UBound(v, 2)
        For mes = 0 To MesFin
           If Not IsNull(v(BAL_VAL + (8 * mes), i)) Then
                BandSigue = True
                Exit For
            Else
                BandSigue = False
            End If
        Next mes
        For mes = 0 To MesFin
           If (v(5 + (6 * mes), i) <> 0 Or v(6 + (6 * mes), i) <> 0 Or v(7 + (6 * mes), i) <> 0) Then
                bandDifCero = True
                Exit For
            Else
                bandDifCero = False
            End If
        Next mes
        If BandSigue Then
            'Solo los que tengan valor diferente de 0
            If bandDifCero Then
                   'Solo hasta el nivel indicado
                   If v(8, i) <= gobjCond.Nivel Then
                        ReDim Preserve v2(70, j)
'                        If v(BAL_TIPO, i) >= 4 Then
                        v2(0, j) = v(BAL_TIPO + 3, i)         'TipoCuenta
                        v2(1, j) = v(BAL_CODCUENTA, i)     'CodCuenta
                        v2(2, j) = v(BAL_NOMBRECUENTA, i)  'Cuenta
                        v2(3, j) = v(BAL_CODSUCURSAL, i)         'CODSUCURSAL   JEAA 16/01/04
                        v2(4, j) = IIf(v(4, i), 1, 0)  'Cuenta de total
                        For mes = 0 To MesFin
                           v2(5 + (mes * 4), j) = v(5 + (mes * 6), i)     'Valor
                            v2(6 + (mes * 4), j) = v(6 + (mes * 6), i)     'Valor
                            v2(7 + (mes * 4), j) = v(7 + (mes * 6), i)     'Valor
                            If Not bandBalance Then v2(7 + (mes * 4), j) = v2(7 + (mes * 2), j) * -1   'Invierta el signo cuando es EstadoPG
                            v2(8 + (mes * 4), j) = v(8 + (mes * 6), i)      'Nivel
                        Next mes
                        j = j + 1
'                    End If
                End If
            End If
        End If
    Next i
    If j Then ConsCTBalanceGPorMesNiveles = v2
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Balance General x Mes Niveles", "CT"
    For mes = 1 To MesFin + 1
        VerificaExistenciaTabla (10 * mes) + 1
    Next mes
End Function
'ECUAMUEBLE
Public Function UltimoOrdenProceso() As Long
    Dim sql As String
    Dim rs As Recordset
    On Error GoTo CapturError
        sql = "Select top 1 orden from ivkproceso"
        sql = sql & " order by  orden desc "
        Set rs = Me.OpenRecordset(sql)
        If rs.EOF Then
            UltimoOrdenProceso = 0
        Else
            rs.MoveFirst
            UltimoOrdenProceso = rs!Orden
        End If
        Set rs = Nothing
    Exit Function
CapturError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function
Public Function VerificaEstado(ByVal color As String, ByVal transid As Long) As Boolean
'procedimiento cambiado
End Function
Public Function RecuperaIVInventarioProduccion(key As Variant) As IVInventarioProduccion
    Dim obj As IVInventarioProduccion
    Set obj = New IVInventarioProduccion
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaIVInventarioProduccion = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function
Public Function CreaIVInventarioProduccion() As IVInventarioProduccion
    Dim obj As IVInventarioProduccion
    Set obj = New IVInventarioProduccion
    Set obj.Empresa = Me
    Set CreaIVInventarioProduccion = obj
    Set obj = Nothing
End Function

Public Function ListaIVGruposProduccion(CodGrupo As String, _
                                          desc As String, _
                                          NumGrupo As Integer) As Variant
    Dim sql As String, s As String, cond As String
    Dim rs As Recordset
    sql = "SELECT DISTINCT CodGrupo" & NumGrupo & ",Descripcion  FROM IVGrupo" & NumGrupo
    If Len(CodGrupo) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & " CodGrupo" & NumGrupo & " LIKE  '%" & CodGrupo & "%'"
    End If
    If Len(desc) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & " descripcion  like '%" & desc & "%' "
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " AND bandproducccion= -1"
    sql = sql & " ORDER BY CodGrupo" & NumGrupo
    Set rs = Me.OpenRecordset(sql)
    Set ListaIVGruposProduccion = rs
    Set rs = Nothing
End Function
Public Function ListaIVGrupoProduccion(NumGrupo As Integer, BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodGrupo" & NumGrupo & ",Descripcion FROM IVGrupo" & NumGrupo
    sql = sql & " WHERE bandProduccion= -1"
    If BandSoloValida Then
        sql = sql & " AND BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY CodGrupo" & NumGrupo
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVGrupoProduccion = rs
    Else
        ListaIVGrupoProduccion = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function
Public Function CreaIVGrupoProduccion(NumGrupo As Byte) As ivgrupo
    Dim obj As ivgrupo
    Set obj = New ivgrupo
    Set obj.Empresa = Me
    obj.NumGrupo = NumGrupo
    obj.BandProduccion = True
    Set CreaIVGrupoProduccion = obj
    Set obj = Nothing
End Function
Public Function ListaIVGrupoProduccionFlex(NumGrupo As Integer) As String
    Dim sql As String, s As String
    Dim rs As Recordset
    sql = "SELECT CodGrupo" & NumGrupo & ",Descripcion FROM IVGrupo" & NumGrupo
    sql = sql & " WHERE BandValida=" & CadenaBool(True, TipoDB)
    sql = sql & " And BandProduccion=-1"
    sql = sql & " ORDER BY CodGrupo" & NumGrupo
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
'    s = "|" & GetStringDAO(rs)         '*** MAKOTO 07/ago/2000 Modificado
    If Not rs.EOF Then s = "|" & GetStringDAO(rs, 20 + 50)      '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|", "(nulo)")
#End If
    ListaIVGrupoProduccionFlex = s
    rs.Close
    Set rs = Nothing
End Function


Public Function RecuperarTurno(key As Variant) As ClsTurno
    Dim nuevo As ClsTurno              ' dimenciona el objeto
    Set nuevo = New ClsTurno        ' crea instancia
    Set nuevo.objEmpresa = Me                    ' asignando padre desde el objeto
    nuevo.Recuperar (key)
    Set RecuperarTurno = nuevo
    Set nuevo = Nothing                     ' borra instancia
End Function

Public Function RecuperarTurnoS() As ClsTurnoSemana
    Dim nuevo As ClsTurnoSemana ' dimenciona el objeto
    Set nuevo = New ClsTurnoSemana ' crea instancia
    Set nuevo.objEmpresa = Me                     ' asignando padre desde el objeto
    Set RecuperarTurnoS = nuevo
    Set nuevo = Nothing                     ' borra instancia
End Function

Public Function RecuperarTurnoSemana(key As Variant) As Recordset
    Dim nuevo As ClsTurnoSemana              ' dimenciona el objeto
    Set nuevo = New ClsTurnoSemana        ' crea instancia
    Set nuevo.objEmpresa = Me                     ' asignando padre desde el objeto
    Set RecuperarTurnoSemana = nuevo.Recuperar(key)
    Set nuevo = Nothing                     ' borra instancia
End Function
Public Function RecuperarConfig(key As Variant) As ClsConfigTurno
    Dim nuevo As ClsConfigTurno ' dimenciona el objeto
    Set nuevo = New ClsConfigTurno ' crea instancia
    Set nuevo.objEmpresa = Me                      ' asignando padre desde el objeto
    nuevo.Recuperar (key)
    Set RecuperarConfig = nuevo
    Set nuevo = Nothing                     ' borra instancia
End Function
Public Function CreaConfig() As ClsConfigTurno
    Dim nuevo As ClsConfigTurno ' dimenciona el objeto
    Set nuevo = New ClsConfigTurno    ' crea instancia
    Set nuevo.objEmpresa = Me                     ' asignando padre desde el objeto
    Set CreaConfig = nuevo
    Set nuevo = Nothing                     ' borra instancia
End Function
Public Function CreaTurno() As ClsTurno
    Dim nuevo As ClsTurno              ' dimenciona el objeto
    Set nuevo = New ClsTurno        ' crea instancia
    Set nuevo.objEmpresa = Me                     ' asignando padre desde el objeto
    Set CreaTurno = nuevo
    Set nuevo = Nothing                     ' borra instancia
End Function
Public Function CreaTurnoSemana() As ClsTurnoSemana
    Dim nuevo As ClsTurnoSemana              ' dimenciona el objeto
    Set nuevo = New ClsTurnoSemana        ' crea instancia
    Set nuevo.objEmpresa = Me                    ' asignando padre desde el objeto
    Set CreaTurnoSemana = nuevo
    Set nuevo = Nothing                     ' borra instancia
End Function

Public Function ListaTurno(BandSoloValida As Boolean, BandRS As Boolean, Tipo As Integer) As Variant
    Dim rs As Recordset, sql As String
    sql = "SELECT IdTurno,codTurno,descripcion FROM RTurno "
    sql = sql & " Where tipo = " & Tipo
    sql = sql & " And bandvalida = 1"
    sql = sql & " ORDER BY Descripcion"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaTurno = rs
    Else
        ListaTurno = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function EliminaConfig(key As Long) As ClsConfigTurno
    Dim nuevo As ClsConfigTurno
    Set nuevo = New ClsConfigTurno
    Set nuevo.objEmpresa = Me
    nuevo.BorradoFisico (key)
    Set EliminaConfig = nuevo
    Set nuevo = Nothing
End Function

Public Function EliminaTurnoSemana(key As Long) As ClsTurnoSemana
    Dim nuevo As ClsTurnoSemana
    Set nuevo = New ClsTurnoSemana
    Set nuevo.objEmpresa = Me
    nuevo.BorradoFisico (key)
    Set EliminaTurnoSemana = nuevo
    Set nuevo = Nothing
End Function

Public Function EliminaTurno(key As Long) As ClsTurno
    Dim nuevo As ClsTurno
    Set nuevo = New ClsTurno
    Set nuevo.objEmpresa = Me
    nuevo.BorradoFisico (key)
    Set EliminaTurno = nuevo
    Set nuevo = Nothing
End Function

Public Function ListaTurnoMensual(BandSoloValida As Boolean, BandRS As Boolean) As Variant
Dim idG As Integer
    idG = Me.GNOpcion.ObtenerValor("Horario") + 1
    Dim rs As Recordset, sql As String
    'sql = "SELECT top 30 tm.IdTurnom,tm.mes,tm.anio,pcg.descripcion     "
    sql = "SELECT top 30 tm.IdTurnom,tm.fechaDesde,tm.fechaHasta,pcg.descripcion     "
    sql = sql & " FROM RTurnoMensual tm INNER JOIN PCGrupo" & idG
    sql = sql & " pcg ON pcg.idgrupo" & idG & "=tm.idgrupo" & idG '& " And tm.bandvalida = 1"
    sql = sql & " ORDER BY  tm.IdTurnom  desc"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaTurnoMensual = rs
    Else
        ListaTurnoMensual = MiGetRows(rs)
        rs.Close
    End If
   Set rs = Nothing
End Function

Public Function ListaPCProvCliEmpGarFiltroNew(bandEmpleado As Boolean, _
                                    codPC As String, _
                                    Nombre As String, _
                                    Direccion As String, _
                                    RUC As String, _
                                    CodGrupoDesde As String, _
                                    CodGrupoHasta As String, _
                                    numG As Integer, _
                                    BandActivo As Boolean, _
                                    bandNoActivo As Boolean, _
                                    BandSoloValida As Boolean, _
                                    BandRS As Boolean) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset, i As Integer
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If
    sql = "SELECT pc.CodProvCli,p.codigolosep, pc.Nombre, pc.RUC, p.salario,p.fechaIngreso,"
    sql = sql & "case when p.bandactivo = 0 then p.FechaEgreso  Else  null end as FechaEgreso"
    sql = sql & ",case when p.bandFR = 1 then 'Cobra' else 'Acumula' end as FR"
    sql = sql & ",case when p.bandFR = 1 then Null else p.fechafinal end as FechaCaducaFR"
    sql = sql & ",BandEmpPublico,bandAPGerente"
    sql = sql & ",case when p.bandactivo = 1 then 'ACTIVO' else 'INACTIVO' end as estado"
    sql = sql & ",g1.CodGrupo1, g2.CodGrupo2, g3.CodGrupo3, g4.CodGrupo4  "
    sql = sql & ",case when p.bandXIII = 1 then 'Acumula' else 'Cobra' end as XIIIEstado"
    sql = sql & ",case when p.bandXIV = 1 then 'Acumula' else 'Cobra' end as XIVEstado "


    sql = sql & " FROM PCGrupo4 g4 RIGHT JOIN (PCGrupo3 g3 RIGHT JOIN (PCGrupo2 g2 RIGHT JOIN (PCGrupo1 g1 RIGHT JOIN Empleado pc " & _
            " left join personal p on p.idempleado = pc.idprovcli" & _
            " left join Anexo_TipoDocumento a on pc.IdTipoDocumento  = a.Id" & _
                          " ON g1.IdGrupo1 = pc.IdGrupo1) " & _
                    " ON g2.IdGrupo2 = pc.IdGrupo2) " & _
                " ON g3.IdGrupo3 = pc.IdGrupo3) " & _
                " ON g4.IdGrupo4 = pc.IdGrupo4 "
            sql = sql & " WHERE p.BandGestion = 0 And bandEmpleado = " & CadenaBool(True, TipoDB)
    If Len(codPC) > 0 Then
        cond = cond & " and (CodProvCli LIKE '" & codPC & comodin & "') "
    End If
    If Len(Nombre) > 0 Then
        cond = cond & " and ((Nombre LIKE '" & Nombre & comodin & "') " & _
                      "OR (Nombre LIKE '" & Nombre & comodin & "')) "
    End If
    If Len(Direccion) > 0 Then
        cond = cond & " and (Direccion1 LIKE '" & Descripcion & comodin & "') "
    End If
    If Len(RUC) > 0 Then
        cond = cond & " and (ruc LIKE '" & RUC & comodin & "') "
    End If
    If Not (Len(CodGrupoDesde) = 0 And Len(CodGrupoHasta) = 0) Then
        cond = cond & " AND (CodGrupo" & numG & " BETWEEN '" & CodGrupoDesde & _
            "' AND '" & CodGrupoHasta & "')"
    End If
    If BandActivo And Not bandNoActivo Then
        cond = cond & " AND p.bandactivo = 1 "
    ElseIf Not BandActivo And bandNoActivo Then
        cond = cond & " AND p.bandactivo = 0 "
    Else
        'saca todo
    End If
    If Len(cond) > 0 Then sql = sql & cond
    sql = sql & " ORDER BY Nombre "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCProvCliEmpGarFiltroNew = rs
    Else
        ListaPCProvCliEmpGarFiltroNew = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function RecuperarTurnoMensualDetalle(key As Variant) As clsTurnoMensualDetalle
    Dim nuevo As clsTurnoMensualDetalle
    Set nuevo = New clsTurnoMensualDetalle
    Set nuevo.objEmpresa = Me
    nuevo.Recuperar (key)
    Set RecuperarTurnoMensualDetalle = nuevo
    Set nuevo = Nothing
End Function

Public Function EliminaTurnoMensualDetalle(key As Variant) As clsTurnoMensualDetalle
    Dim nuevo As clsTurnoMensualDetalle
    Set nuevo = New clsTurnoMensualDetalle
    Set nuevo.objEmpresa = Me
    nuevo.BorradoFisico (key)
    Set EliminaTurnoMensualDetalle = nuevo
    Set nuevo = Nothing
End Function
Public Function RecuperarTurnoMensual(key As Variant) As clsTurnoMensual
    Dim nuevo As clsTurnoMensual              ' dimenciona el objeto
    Set nuevo = New clsTurnoMensual        ' crea instancia
    Set nuevo.objEmpresa = Me                     ' asignando padre desde el objeto
    nuevo.Recuperar (key)
    Set RecuperarTurnoMensual = nuevo
    Set nuevo = Nothing                     ' borra instancia
End Function
Public Function EliminaTurnoMensual(key As Variant) As clsTurnoMensual
    Dim nuevo As clsTurnoMensual
    Set nuevo = New clsTurnoMensual
    Set nuevo.objEmpresa = Me
    nuevo.BorradoFisico (key)
    Set EliminaTurnoMensual = nuevo
    Set nuevo = Nothing
End Function
Public Function CreaTurnoMensual() As clsTurnoMensual
    Dim nuevo As clsTurnoMensual
    Set nuevo = New clsTurnoMensual
    Set nuevo.objEmpresa = Me
    Set CreaTurnoMensual = nuevo
    Set nuevo = Nothing
End Function
Public Function ListaTipoTurno(ByVal Tipo As String) As Recordset
    Dim rs As Recordset, sql As String
    Dim idPG As Long
    On Error GoTo ErrTrap
    idPG = Me.GNOpcion.ObtenerValor("Horario") + 1
    Select Case idPG
        Case 1
                sql = " Select pcg.IdGrupo1,pcg.Descripcion  "
                sql = sql & " FROM pcgrupo1  pcg " ' INNER JOIN RTURNO rt on rt.idturno = pcg.idturno"
                'sql = sql & " WHERE rt.tipo in (" & Tipo & ")"
               sql = sql & " ORDER BY pcg.Descripcion"
        Case 2
                sql = " Select pcg.IdGrupo2,pcg.Descripcion  "
                sql = sql & " FROM pcgrupo2  pcg" ' INNER JOIN RTURNO rt on rt.idturno = pcg.idturno"
                'sql = sql & " WHERE rt.tipo in (" & Tipo & ")"
               sql = sql & " ORDER BY pcgDescripcion"
        Case 3
                sql = " Select pcg.IdGrupo3,pcg.Descripcion  "
                sql = sql & " FROM pcgrupo3  pcg" ' INNER JOIN RTURNO rt on rt.idturno = pcg.idturno"
                'sql = sql & " WHERE rt.tipo in (" & Tipo & ")"
               sql = sql & " ORDER BY pcgDescripcion"
        Case 4
                sql = " Select pcg.IdGrupo4,pcg.Descripcion  "
                sql = sql & " FROM pcgrupo4 pcg" ' INNER JOIN RTURNO rt on rt.idturno = pcg.idturno"
                'sql = sql & " WHERE rt.tipo in (" & Tipo & ")"
                sql = sql & " ORDER BY pcg.Descripcion"
   End Select
'    Select Case tabla
'        Case "persona" 'AUC 31/12/2011
'            sql = sql & " INNER JOIN SECCION ON SECCION.IDSECCION = PERSONA.IDSECCION "
'    End Select
    Set rs = Me.OpenRecordset(sql)
    Set ListaTipoTurno = rs
    Set rs = Nothing
   Exit Function
ErrTrap:
    MsgBox Err.Description
    Exit Function
End Function

Public Function ListaTurnoTipo(ByVal Tipo As String, ByVal NumHoras As Integer) As Recordset
    Dim rs As Recordset, sql As String
    On Error GoTo ErrTrap
    sql = "SELECT codTurno, Descripcion,IdTurno,DiasLaborables,DiasDescanso "
    sql = sql & " FROM RTurno WHERE Tipo= '" & Tipo & "'"
    sql = sql & " AND HorasTrabajadas =-" & NumHoras
    sql = sql & " ORDER BY descripcion"
    Set rs = Me.OpenRecordset(sql)
    Set ListaTurnoTipo = rs
    Set rs = Nothing
    Exit Function
ErrTrap:
    MsgBox Err.Description
    Exit Function
End Function
Public Function ListaEmpTurno(ByVal cod As String) As String
    Dim rs As Recordset, sql As String
    Dim cad As String
    Dim idPG
    On Error GoTo ErrTrap
    idPG = Me.GNOpcion.ObtenerValor("Horario") + 1
    sql = "SELECT  pc.Nombre "
    sql = sql & " FROM Empleado pc Inner Join personal p on p.idempleado = pc.idprovcli INNER JOIN pcgrupo" & idPG
    sql = sql & " & pcg ON pc.idGrupo" & idPG & " = pcg.IdGrupo" & idPG
    sql = sql & " WHERE pcg.Idgrupo" & idPG & "=" & cod
    sql = sql & " AND p.bandActivo=1 ORDER BY pc.nombre "
    Set rs = Me.OpenRecordset(sql)
    cad = "|"
    Do While Not rs.EOF
        cad = cad & rs!Nombre & "|"
        rs.MoveNext
    Loop
    ListaEmpTurno = cad
    Set rs = Nothing
   Exit Function
ErrTrap:
    MsgBox Err.Description
    Exit Function
End Function
Public Function CreaTurnoMensualDetalle() As clsTurnoMensualDetalle
    Dim nuevo As clsTurnoMensualDetalle
    Set nuevo = New clsTurnoMensualDetalle
    Set nuevo.objEmpresa = Me
    Set CreaTurnoMensualDetalle = nuevo
    Set nuevo = Nothing
End Function
Public Function RecuperarIdTurno(ByVal IdTurno As Integer, ByVal IdEmpleado As Integer, ByVal fecha As Date) As Long
    Dim rs As Recordset
    Dim sql As String
    Dim sfecha As String
    sfecha = FechaYMD(fecha, TipoDB)
    sql = "SELECT tmd.idturnod as idTurnoD FROM (RTurnoMensual tm INNER JOIN RTurnoMensualDetalle   tmd"
    sql = sql & " ON tm.IdTurnom = tmd.IdTurnoM)   "
    'sql = sql & " INNER JOIN PCProvCli pc ON tmd.IdEmpleado = Pc.idprovcli "
    sql = sql & " INNER JOIN Empleado pc ON tmd.IdEmpleado = Pc.idprovcli "
    sql = sql & " WHERE tm.IdTurnom=" & IdTurno
    sql = sql & " AND pc.Idprovcli=" & IdEmpleado
    sql = sql & " AND Tmd.Fecha=" & sfecha
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        RecuperarIdTurno = rs.Fields("idTurnoD")
    Else
        RecuperarIdTurno = 0
    End If
End Function
'Public Function CambiaFormatoFechaReloj(ByRef fecha As Date) As String
'      Dim ffin, dia, mes, Anio As String
'      dia = Mid(Str(fecha), 2, 2)
'      mes = Mid(Str(fecha), 5, 2)
'      Anio = Mid(Str(fecha), 8, 4)
'      CambiaFormatoFechaReloj = mes & "/" & dia & "/" & Anio
'End Function
Public Function ListaEmpTurnoN(ByVal cond As String, ByVal FechaIngreso As Date)
    Dim rs As Recordset, sql As String
    Dim idPG
    On Error GoTo ErrTrap
    idPG = Me.GNOpcion.ObtenerValor("Horario") + 1
    sql = "SELECT pc.Idprovcli, pc.Codprovcli, pc.Nombre "
    sql = sql & " FROM Empleado pc Inner Join personal p on p.idempleado = pc.idprovcli INNER JOIN pcgrupo" & idPG
    sql = sql & " pcg ON pc.idGrupo" & idPG & " = pcg.IdGrupo" & idPG
    sql = sql & "  where p.bandActivo=1 AND p.FechaIngreso<= " & FechaYMD(FechaIngreso, TipoDB)
    If Len(cond) > 0 Then sql = sql & " and pcg.idGrupo" & idPG & "= " & cond & ""
    sql = sql & " group by pc.Idprovcli, pc.CodProvCli, pc.Nombre"
    sql = sql & "  order by pc.Nombre "
    Set rs = Me.OpenRecordset(sql)
    Set ListaEmpTurnoN = rs
    Set rs = Nothing
   Exit Function
ErrTrap:
    MsgBox Err.Description
    Exit Function
End Function

Public Function ListaPersonalSeccion(ByVal cond As String, ByVal FechaInicio As Date, ByVal fechaHasta As Date)
    Dim rs As Recordset, sql As String
    On Error GoTo ErrTrap
    Dim idP As Integer
    idP = gobjMain.EmpresaActual.GNOpcion.ObtenerValor("Horario") + 1
    sql = "SELECT pc.IdProvCli, pc.CodProvCli, pc.Nombre "
    'sql = sql & " FROM RTurnoMensualDetalle tmd INNER JOIN pcprovcli pc ON tmd.idempleado = pc.idProvcli"
    sql = sql & " FROM RTurnoMensualDetalle tmd INNER JOIN Empleado pc ON tmd.idempleado = pc.idProvcli"
    sql = sql & " INNER JOIN Personal p on p.idempleado = pc.idprovcli"
    sql = sql & " INNER JOIN pcgrupo" & idP & " as pcg ON pcg.idGrupo" & idP & "= pc.idgrupo" & idP
    sql = sql & "  WHERE tmd.fecha >= " & FechaYMD(FechaInicio, TipoDB)
    sql = sql & "  AND p.fechaIngreso <= " & FechaYMD(fechaHasta, TipoDB)
    If Len(cond) > 0 Then sql = sql & " and pcg.idgrupo" & idP & "= " & cond & ""
    sql = sql & " group by pc.Idprovcli, pc.Codprovcli, pc.Nombre"
    sql = sql & "  order by pc.Nombre "
    Set rs = Me.OpenRecordset(sql)
    Set ListaPersonalSeccion = rs
    Set rs = Nothing
   Exit Function
ErrTrap:
    MsgBox Err.Description
    Exit Function
End Function
Public Function RecuperarPersonaxNombre(ByVal Nombre As String) As Recordset
      Dim rs As Recordset
      Dim sql, k As String
    sql = "SELECT * FROM Pcprovcli WHERE nombre = '" & Nombre & "' "
      Set rs = Me.OpenRecordset(sql)
      If rs.RecordCount > 0 Then
      End If
      Set RecuperarPersonaxNombre = rs
      Set rs = Nothing
End Function
Public Function ListaTurnoFlex(BandSoloValida As Boolean, BandRS As Boolean, Tipo As Integer) As Variant
    Dim rs As Recordset, sql As String
    sql = "SELECT codTurno,descripcion FROM RTurno "
    sql = sql & " Where tipo = " & Tipo
    sql = sql & " And bandvalida = 1"
    sql = sql & " ORDER BY Descripcion"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaTurnoFlex = rs
    Else
        ListaTurnoFlex = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function
Public Function CreaJornada() As ClsJornada
    Dim nuevo As ClsJornada               ' dimenciona el objeto
    Set nuevo = New ClsJornada        ' crea instancia
    Set nuevo.objEmpresa = Me                     ' asignando padre desde el objeto
    Set CreaJornada = nuevo
    Set nuevo = Nothing                     ' borra instancia
End Function
Public Function RecuperarJornada(key As Variant) As ClsJornada
    Dim nuevo As ClsJornada              ' dimenciona el objeto
    Set nuevo = New ClsJornada        ' crea instancia
    Set nuevo.objEmpresa = Me                    ' asignando padre desde el objeto
    nuevo.Recuperar key
    Set RecuperarJornada = nuevo
    Set nuevo = Nothing                     ' borra instancia
End Function
Public Function recuperaSecuenciaBotones(ByVal key As Variant, ByVal dia As Date) As Recordset
    Dim rs As Recordset
    Dim sql As String
    Dim finicio As Date
    sql = "SELECT A.Secuencia, a.hora From RAsistencia a "
    sql = sql & " Where (((a.idEmpleado) = " & key & " and Fecha='" & CambiaFormatoFecha(dia) & "')) ORDER BY a.Fecha DESC , a.Hora DESC"
    Set rs = Me.OpenRecordsetParaEdit(sql)
    Set recuperaSecuenciaBotones = rs
    Set rs = Nothing
    End Function
Public Function CambiaFormatoFecha(ByRef fecha As Date) As String
      Dim ffin, dia, mes, Anio As String
      dia = Mid(Str(fecha), 2, 2)
      mes = Mid(Str(fecha), 5, 2)
      Anio = Mid(Str(fecha), 8, 4)
      CambiaFormatoFecha = dia & "/" & mes & "/" & Anio
End Function
Public Function RecuperarTurnoRotativoAsignado(ByVal IdPersona As Integer, ByVal fecha As Date) As Long
    Dim rs As Recordset
    Dim sql As String
    Dim i As Integer
    Dim ffecha As Date
    Dim sfecha As String
    sfecha = CambiaFormatoFecha(fecha)
    sql = "SELECT RTurnoMensualDetalle.idturno as id"
    sql = sql & " FROM (RTurnoMensual INNER JOIN RTurnoMensualDetalle "
    sql = sql & " ON RTurnoMensual.IdTurno = RTurnoMensualDetalle.IdTurnoMensual) "
    sql = sql & " INNER JOIN Empleado ON RTurnoMensualDetalle.IdPersona = Empleado.Idprovcli"
    sql = sql & " WHERE "
    sql = sql & "  empleado.Idprovcli=" & IdPersona
    sql = sql & " AND RTurnoMensualDetalle.Fecha=#" & sfecha & "#"
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
            RecuperarTurnoRotativoAsignado = rs.Fields("id")
    Else
        RecuperarTurnoRotativoAsignado = 0
    End If
End Function
Public Function UltimaAsistencia(ByVal codPersona As String, ByVal fecha As Date) As Recordset                 'Alex 15/02/2002
    Dim rs As Recordset, sql As String
    Dim cond As String
    Dim ffecha, ffin
    On Error GoTo ErrTrap
        ffecha = CambiaFormatoFecha(fecha)
        sql = "SELECT top 1 pc.Codprovcli, A.Fecha, A.Secuencia as secuencia"
        sql = sql & " FROM Empleado pc INNER JOIN RAsistencia a ON pc.idprovcli = A.Idempleado"
        sql = sql & " Where pc.Codprovcli = '" & codPersona & "' AND A.Fecha='" & ffecha & "'"
        sql = sql & " ORDER BY A.Fecha DESC , A.Secuencia DESC"
        Set rs = Me.OpenRecordset(sql)
        Set UltimaAsistencia = rs
        Set rs = Nothing
   Exit Function
ErrTrap:
    Err.Raise Err.Number, "Asistencia.UltimaMarca", Err.Description
    Exit Function
End Function
Public Function ObtieneHoraDelTurno(ByVal IdPersona As Long, dia As Integer) As Recordset                     'Alex 15/02/2002
    Dim rs As Recordset, sql As String
    On Error GoTo ErrTrap
    sql = "SELECT *  FROM vwHoraTurno "
    sql = sql & " WHERE idProvcli=" & IdPersona
    sql = sql & " and dia=" & dia
    Set rs = Me.OpenRecordset(sql)
    Set ObtieneHoraDelTurno = rs
    Set rs = Nothing
   Exit Function
ErrTrap:
    Err.Raise Err.Number, "Reloj.ObtieneHoraDelTurno", Err.Description
    Exit Function
End Function

Public Function RecuperarDiasAsistencia(ByVal Desde As Date, ByVal Hasta As Date) As Recordset
      Dim rs As Recordset
      Dim sql As String
      Dim finicio, ffin, dia As String
        finicio = CambiaFormatoFecha(Desde)
        ffin = CambiaFormatoFecha(Hasta)
        sql = "SELECT DISTINCT Fecha FROM RAsistencia "
        sql = sql & " where fecha between '" & CambiaFormatoFecha(Desde) & "' and '" & CambiaFormatoFecha(Hasta) & "'"
      Set rs = Me.OpenRecordset(sql)
      If rs.RecordCount > 0 Then
      End If
      Set RecuperarDiasAsistencia = rs
      Set rs = Nothing
End Function

Public Function RecuperarAsistencia(ByVal Desde As Date, ByVal Hasta As Date, ByVal CodEmpleado As String) As Recordset
      Dim rs As Recordset
      Dim sql As String, k As String, cond As String
      Dim finicio, ffin, dia As String
        Dim mes As Integer
        Dim mesh As Integer
        Dim diaInicial As Integer
        Dim diaFinal As Integer
        Dim diaFin As Integer
     Dim i As Long
       finicio = CambiaFormatoFecha(Desde)
       ffin = CambiaFormatoFecha(Hasta)
       If Len(CodEmpleado) > 0 Then
            cond = " And codper = '" & CodEmpleado & "'"
       End If
    'If InStr(1, UCase(Me.GNOpcion.NombreEmpresa), "MEGA") > 0 Then cambiado opcion para los que marcar manual
    If Len(Me.GNOpcion.ObtenerValor("RelojDigital")) > 0 Then
        If Me.GNOpcion.ObtenerValor("RelojDigital") = "1" Then
            VerificaExistenciaTabla 1
            sql = "Select pc.idprovcli,pc.Codprovcli,pc.Nombre, pc.ruc,pcgrupo1.codgrupo1,rt.codturno,CONVERT(datetime,'01/01/1900') as fecha"
            'sql = sql & " into tmp1 from pcprovcli pc inner join RTURNO rt on rt.idturno = pc.idturno"
            sql = sql & " into tmp1 "
            sql = sql & " from Empleado pc inner join RTURNO rt on rt.idturno = pc.idturno"
            sql = sql & " LEFT JOIN pcgrupo1 ON pc.idGrupo1 = pcgrupo1.idgrupo1 "
            sql = sql & " Where pc.BandEmpleado = 1 and pc.tipoturno = 0"
            If Len(CodEmpleado) > 0 Then
                sql = sql & " And pc.codprovcli = '" & CodEmpleado & "'"
            End If
            Me.EjecutarSQL sql, 1
            sql = "Select * from tmp1"
            Set rs = Me.OpenRecordset(sql)
            mes = DatePart("m", Desde)
            mesh = DatePart("m", Hasta)
            diaInicial = Str(DatePart("d", Desde))
            diaFinal = Str(DatePart("d", Hasta))
            If mes <> mesh Then
                diaFin = DatePart("d", DateAdd("d", -1, CDate("01/" & mesh & "/" & DatePart("yyyy", Desde))))
            Else
                diaFin = DatePart("d", Hasta)
            End If
            Do While Not rs.EOF
                For i = diaInicial To diaFin
                   sql = "Insert into tmp1(idprovcli,codprovcli,nombre,ruc,codGrupo1,codTurno,fecha) values ("
                    sql = sql & rs!IdProvcli & ","
                    sql = sql & "'" & rs!CodProvcli & "',"
                    sql = sql & "'" & rs!Nombre & "',"
                    sql = sql & "'" & rs!RUC & "',"
                    sql = sql & "'" & rs!CodGrupo1 & "',"
                    sql = sql & "'" & rs!Codturno & "',"
                    sql = sql & "'" & IIf(i > 0 And i < 10, "0" & i, i) & "/" & _
                    IIf(DatePart("m", Desde) > 0 And DatePart("m", Desde) < 10, _
                    "0" & DatePart("m", Desde), DatePart("m", Desde)) & "/" & _
                    DatePart("yyyy", Desde) & "')"
                    gobjMain.EmpresaActual.EjecutarSQL sql, 1
                Next
                If mes <> mesh Then
                    For i = 1 To diaFinal
                        sql = "Insert into tmp1(idprovcli,codprovcli,nombre,ruc,codGrupo1,codTurno,fecha) values ("
                        sql = sql & rs!IdProvcli & ","
                        sql = sql & "'" & rs!CodProvcli & "',"
                        sql = sql & "'" & rs!Nombre & "',"
                        sql = sql & "'" & rs!RUC & "',"
                        sql = sql & "'" & rs!CodGrupo1 & "',"
                        sql = sql & "'" & rs!Codturno & "',"
                        sql = sql & "'" & IIf(i > 0 And i < 10, "0" & i, i) & "/" & _
                        IIf(DatePart("m", Hasta) > 0 And DatePart("m", Hasta) < 10, _
                        "0" & DatePart("m", Hasta), DatePart("m", Hasta)) & "/" & _
                        DatePart("yyyy", Hasta) & "')"
                        gobjMain.EmpresaActual.EjecutarSQL sql, 1
                    Next
                End If
               rs.MoveNext
            Loop
            sql = "delete from tmp1 where fecha = '1900-01-01 00:00:00.000'"
            gobjMain.EmpresaActual.EjecutarSQL sql, 1
            VerificaExistenciaTabla 2
            sql = "SELECT a.IdEmpleado,pc.Codprovcli AS codper,pc.Nombre, pc.ruc,pcgrupo1.Codgrupo1,RTurno.CodTurno,"
            sql = sql & "DATEPART(Weekday,a.fecha) as dia, 'a' AS DiaSemana, a.Fecha, IsNull(a.marca1,0) AS Hora1,"
            sql = sql & " IsNull(a.marca2,0) AS Hora2,IsNull(a.marca3,0) AS Hora3, IsNull(a.marca4,0) AS Hora4,"
            sql = sql & " 0 AS THT, 0 AS EQHO, 0 AS ATRAZO, 0 AS EQAT, 0 AS HREC, 0 AS H50, 0 AS H100, 0 AS FALTA,"
            sql = sql & " 0 AS ASIST,0 AS diasREal"
           sql = sql & " Into tmp2 from RTurno"
            sql = sql & " RIGHT JOIN rasistencia a"
            'sql = sql & " INNER JOIN pcprovcli pc"
            sql = sql & " INNER JOIN Empleado pc"
            sql = sql & " INNER JOIN personal p on p.idempleado = pc.idprovcli ON a.IdEmpleado = pc.Idprovcli"
            sql = sql & " LEFT JOIN pcgrupo1 ON pc.idGrupo1 = pcgrupo1.idgrupo1 ON RTurno.IdTurno = pc.IdTurno"
            sql = sql & " WHERE p.bandactivo=1 And pc.tipoTurno =0"
            sql = sql & " AND a.fecha between '" & Desde & "' AND '" & Hasta & "'"
            If Len(CodEmpleado) > 0 Then
                sql = sql & " And pc.codprovcli = '" & CodEmpleado & "'"
            End If
            sql = sql & " GROUP BY a.IdEmpleado,pc.Codprovcli,pc.Nombre, pc.ruc,pcgrupo1.Codgrupo1,RTurno.CodTurno,a.fecha , a.Marca1, a.Marca2, a.Marca3, a.Marca4"
            gobjMain.EmpresaActual.EjecutarSQL sql, 1
            sql = "select isnull(t1.idprovcli,t2.idempleado) as idProvCli,"
            sql = sql & " isnull(t1.codprovcli,t2.codper) as codigo,isnull(t1.nombre,t2.nombre),"
            sql = sql & " isnull(t1.ruc,t2.ruc) as ruc,isnull(t1.codgrupo1,t2.codgrupo1) as codgrupo1,t1.codturno,isnull(datepart(dw,t1.fecha),0) as dia,"
            sql = sql & " 'a' diasemana,t1.fecha,"
            sql = sql & "isnull(t2.hora1,'00:00')as hora1,"
            sql = sql & "isnull(t2.hora2,'00:00') as hora2,"
            sql = sql & "isnull(t2.hora3,'00:00') as hora3,"
            sql = sql & "isnull(t2.hora4,'00:00')as hora4,"
            sql = sql & "0 as tht,0 as eqho,0 as atrazo,0 as eqat,0,hrec,0,h50,0 as h100,"
            sql = sql & "0 as falta,0 as asist,0 as diasreal "
            sql = sql & "from tmp1 t1 "
            sql = sql & "full join tmp2 t2 on t2.idempleado = t1.idprovcli and t2.fecha = t1.fecha"
        Else
            sql = "SELECT *   FROM vwAsistenciaTotal "
            sql = sql & " where fecha between '" & CambiaFormatoFecha(Desde) & "' and '" & CambiaFormatoFecha(Hasta) & "'"
            sql = sql & cond
        End If
    Else
        Dim IdEmpleado As Long
        sql = "SELECT *   FROM vwAsistenciaTotal "
        sql = sql & " where fecha between '" & CambiaFormatoFecha(Desde) & "' and '" & CambiaFormatoFecha(Hasta) & "'"
        sql = sql & cond
    End If
        Set rs = Me.OpenRecordset(sql)
        Set RecuperarAsistencia = rs
        Set rs = Nothing
End Function
Public Function RecuperarHoras(ByVal IdPersona As Long, ByVal dia As Integer) As Recordset
      Dim rs As Recordset
      Dim sql
      sql = "SELECT * FROM vwHorasxEmpleado WHERE bandvalida = 1 AND"
     sql = sql & " idProvCli=" & IdPersona & " and dia=" & dia
      Set rs = Me.OpenRecordset(sql)
      If rs.RecordCount > 0 Then
      End If
      Set RecuperarHoras = rs
      Set rs = Nothing
End Function


Public Function EsFeriado(ByVal fecha As String) As Recordset
      Dim rs As Recordset
      Dim sql
        sql = "SELECT * FROM Rferiado WHERE "
        sql = sql & " Fecha='" & fecha & "'"
        Set rs = Me.OpenRecordset(sql)
        If rs.RecordCount > 0 Then
        End If
        Set EsFeriado = rs
        Set rs = Nothing
End Function

'AUC para ecuamueble
      Public Function ListaIVKProcesosOrden() As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset, rsE As Recordset, rsA As Recordset
    Dim rsAnt As Recordset
    Dim Sec As Integer, mboContinua As Boolean
    Dim cadena As String
    Dim TransOP As String
    On Error GoTo CapturaError
    If Len(Me.GNOpcion.ObtenerValor("ProduccionTransOP")) > 0 Then
            TransOP = Me.GNOpcion.ObtenerValor("ProduccionTransOP")
        Else
            Err.Raise MSGERR_INVALIDO, "Empresa_TransOrdenProduccion", "No esta Configurado para tipo trans OP "
        End If
       sql = "select gn.transid, ivkp.idkp ,gn.NumTrans,pc.nombre,iv.codinventario,  "
        sql = sql & " iv.descripcion+ivk.nota as descripcion, gc.fechainicio, ivkp.orden, "
        sql = sql & " case when ivkp.estado1= 0 then  gne.color else gne1.color end as color "
        sql = sql & " from gncomprobante gn "
        sql = sql & " inner join ivkardex ivk inner join ivinventario iv  on iv.idinventario = ivk.idinventario"
        sql = sql & " on ivk.transid = gn.transid inner join pcprovcli pc on pc.idprovcli= gn.idclienteref "
        sql = sql & " inner join gncentrocosto gc on gc.idcentro = gn.idcentro "
        sql = sql & " inner join ivkproceso ivkp inner join ivproceso ivp on ivp.idproceso = ivkp.idproceso "
        sql = sql & " Left join gnestadoprod gne on gne.valor= ivkp.estado"
        sql = sql & " Left join gnestadoprod gne1 on gne1.valor= ivkp.estado1"
        sql = sql & " on ivkp.transid = gn.transid"
        sql = sql & " Where ivkp.idcentrodet = 0"
        sql = sql & " And gn.estado <> 3 And iv.tipo = 6 And GN.codtrans = '" & TransOP & "'"
       'sql = sql & " And ivp.codusuario = '" & gobjMain.UsuarioActual.CodUsuario & "'"
        sql = sql & " And ivkp.estado1 NOT in (select valor from gnestadoprod where menu = 'lISTO')"
        sql = sql & " And ivkp.fechainicio between '01/01/2013' and '" & Date & "'"
        sql = sql & " Order by ivkp.orden"
        Set rs = Me.OpenRecordset(sql)
     Set ListaIVKProcesosOrden = rs
       Set rs = Nothing
        Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
    'Me.GrabaGNLogAccion "CONSULTA", "Cons. cola Procesos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "IV"
End Function


Public Function ListaGNEspacio(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    

    sql = "SELECT CodVehiculo, Descripcion, Dimension,rutafoto FROM GNVehiculo "
    sql = sql & " ORDER BY CodVehiculo"

    Set rs = Me.OpenRecordset(sql)
    
    If BandRS Then
        Set ListaGNEspacio = rs
    Else
        ListaGNEspacio = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function
Public Function idCentroHijo(ByVal Id As Long) As Long
'Dim sql As String
'Dim transid As Long
'Dim rs As Recordset
'Dim rs1 As Recordset
'Dim USUPT As String
'Dim USUEG As String
'
'On Error GoTo CapturaError
'VerificaExistenciaTabla 1
'sql = "Select g.transid,g.idcentroHijo into tmp1 from gncomprobante g where g.transid = " & id
'sql = sql & " And g.codtrans = 'op'"
'sql = sql & " and g.idcentroHijo in(Select g1.idcentroHijo from gncomprobante g1 where g1.codtrans = 'bd')"
'Me.EjecutarSQL sql, 1
'sql = "Select g.transid from tmp1 t inner join gncomprobante g on g.idcentrohijo = t.idcentrohijo  where g.codtrans= 'bd'"
'Set rs = Me.OpenRecordset(sql)
'    Do While Not rs.EOF
'        transid = rs!transid 'AUC en realidad necesita el transid
'        rs.MoveNext
'    Loop
'idCentroHijo = transid
'Set rs = Nothing
'Exit Function
'CapturaError:
'    MsgBox Err.Description
'    Set rs = Nothing
'    Exit Function
End Function

Public Function CreaIVKProcesoDetalle() As IVKProcesoDetalle
    Dim nuevo As IVKProcesoDetalle
    Set nuevo = New IVKProcesoDetalle
    Set nuevo.objEmpresa = Me
    Set CreaIVKProcesoDetalle = nuevo
    Set nuevo = Nothing
End Function
Public Function ListaivkProcesoComentario(ByVal transid As Long) As Variant
    Dim sql As String
    Dim rs As Recordset
    On Error GoTo CapturaError
    sql = "SELECT ivp.CodProceso, i.Nota,i.ruta from ivkprocesodetalle i inner join ivproceso ivp on ivp.idproceso = i.idproceso  where transid = " & transid
    sql = sql & " order by idpd"
    Set rs = Me.OpenRecordset(sql)
    Set ListaivkProcesoComentario = rs
    Set rs = Nothing
    Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function
Public Function RecuperaProcesoxUsuario() As String
'    Dim sql As String, rs As Recordset
'    Dim s As String
'    On Error GoTo CapturaError
'    sql = "select codproceso from ivproceso where codusuario = '" & gobjMain.UsuarioActual.CodUsuario & "' "
'    Set rs = Me.OpenRecordset(sql)
'    Do While Not rs.EOF
'        s = rs!CodProceso
'        rs.MoveNext
'    Loop
'    RecuperaProcesoxUsuario = s
'    Set rs = Nothing
'    Exit Function
'CapturaError:
'    MsgBox Err.Description
'    Set rs = Nothing
'    Exit Function
End Function

Public Function ListaGNEstadoProdFlex(BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodEstado,descripcion FROM GNestadoprod  "
    sql = sql & " ORDER BY Codestado"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaGNEstadoProdFlex = rs
    Else
        ListaGNEstadoProdFlex = MiGetRows(rs)
       rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ConsVTConciliacioCartera() As Variant
    Dim sql As String, rs As Recordset
    
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient

    sql = "spConsTSPorCobrarPagarVendedorConcilia " & _
                gobjCond.numMoneda & ",'USD',1,'" & _
                gobjCond.Usuario1 & "','" & _
                gobjCond.CodBanco1 & "'"
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    
    ConsVTConciliacioCartera = MiGetRows(rs)
    
    
    
    Set rs = Nothing
End Function

Public Sub CorregirExistenciaDocum()
    Dim rs As Recordset, sql As String, rs2 As Recordset
    
    Set rs = Me.ConsIVCorrecExistDocum
    If rs.EOF Then Exit Sub
    
#If DAOLIB = 0 Then
    Set rs2 = New ADODB.Recordset
    rs2.CursorLocation = adUseClient
#End If

    With rs
        Do Until .EOF
            'Verifica si existe el registro
            sql = "SELECT Exist FROM    GNExistDocumento " & _
                  " WHERE Transid=" & !transid & _
                  " AND IdProvCli=" & !IdProvcli
#If DAOLIB Then
            Set rs2 = mdbEmpresa.OpenRecordset(sql, dbOpenSnapshot, dbReadOnly)
#Else
            rs2.Open sql, mcnEmpresa, adOpenStatic, adLockReadOnly
#End If
            'Si no existe, lo inserta
            If rs2.EOF Then
                sql = "INSERT INTO IVExist (IdInventario,IdBodega,Exist) " & _
                      "VALUES (" & !IdInventario & "," & !IdBodega & "," & !SumaDeCantidad & ")"
            
            'Si existe, lo modifica
            Else
                sql = "UPDATE GNExistDocumento SET Exist=" & !SumaDeCantidad & _
                      " WHERE Transid=" & !transid & _
                      " AND IdProvCli=" & !IdProvcli
            End If
            Me.Execute sql, True
            rs2.Close
            .MoveNext
        Loop
        .Close
    End With
    Set rs2 = Nothing
    Set rs = Nothing
End Sub


Public Function ConsIVCorrecExistDocum() As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    Dim ex1 As String, ex2 As String, ex3 As String, ex4 As String
    Dim ex5 As String, ex6 As String
    
#If DAOLIB Then
    ex1 = "IIF(IsNull(ive.Exist),0,ive.Exist)"
    ex2 = "IIF(IsNull(iv.IdInventario), iv2.IdInventario, iv.IdInventario)"
    ex3 = "IIF(IsNull(iv.CodInventario), iv2.CodInventario, iv.CodInventario)"
    ex4 = "IIF(IsNull(vw.SumaDeCantidad),0, vw.SumaDeCantidad)"
    ex5 = "IIF(IsNull(ivb.IdBodega), ivb2.IdBodega, ivb.IdBodega)"
    ex6 = "IIF(IsNull(ivb.CodBodega), ivb2.CodBodega, ivb.CodBodega)"
#Else
    ex1 = "isnull(ive.Exist,0)"
    ex2 = "isnull(ive.IdInventario, iv2.IdInventario)"
    ex3 = "isnull(iv.CodInventario, iv2.CodInventario)"
    ex4 = "isnull(vw.SumaDeCantidad,0)"
    ex5 = "isnull(ivb.IdBodega, ivb2.IdBodega)"
    ex6 = "isnull(ivb.CodBodega, ivb2.CodBodega)"
#End If

    'Muestra la diferencia de existencia y suma de IVKardex si es que la hay
    sql = "SELECT " & ex2 & " AS IdInventario, " & ex3 & " AS CodInventario, " & _
                 ex5 & " AS IdBodega, " & ex6 & " AS CodBodega, " & ex1 & " AS Exist1, " & _
                 ex4 & " AS SumaDeCantidad, (" & ex1 & " - " & ex4 & ") AS Dif " & _
          "FROM IVInventario iv2 RIGHT JOIN " & _
                    "(IVInventario iv RIGHT JOIN " & _
                        "(IVBodega ivb2 RIGHT JOIN " & _
                            "(IVBodega ivb RIGHT JOIN "
#If DAOLIB Then                         '*** MAKOTO 25/ene/01 Mod. porque en DAO no sporta FULL JOIN
                    sql = sql & "(vwConsIVKardexSuma vw Right JOIN IVExist ive "
#Else
                    sql = sql & "(vwConsIVKardexSuma vw FULL JOIN IVExist ive "
#End If
                    sql = sql & "ON (vw.IdBodega = ive.IdBodega) AND (vw.IdInventario = ive.IdInventario) ) " & _
                            "ON ivb.IdBodega = vw.IdBodega) " & _
                        "ON ivb2.IdBodega = ive.IdBodega) " & _
                    "ON iv.IdInventario=vw.IdInventario) " & _
                "ON iv2.IdInventario = ive.IdInventario " & _
          "WHERE (" & ex1 & " - " & ex4 & ")<>0 " & _
                 "AND " & ex2 & " is not null " & _
          "ORDER BY " & ex3
    
sql = "SELECT"
sql = sql & " isnull(ive.transId, iv2.transId) AS Transid,"
'sql = sql & " isnull(iv.CodInventario, iv2.CodInventario) AS CodInventario,"
sql = sql & " isnull(ivb.IdProvcli, ivb2.IdProvcli) AS IdProvCli,"
sql = sql & " isnull(ivb.CodProvcli, ivb2.CodProvcli) AS CodProvcli,"
sql = sql & " isnull(ive.Exist,0) AS Exist1,"
sql = sql & " isnull(vw.SumaDeCantidad,0) AS SumaDeCantidad,"
sql = sql & " (isnull(ive.Exist,0) - isnull(vw.SumaDeCantidad,0)) AS Dif"
sql = sql & " FROM Gncomprobante iv2"
sql = sql & "     RIGHT JOIN (Gncomprobante iv"
sql = sql & "         RIGHT JOIN (Pcprovcli ivb2"
sql = sql & "             RIGHT JOIN (Pcprovcli ivb"
sql = sql & "                 RIGHT JOIN (vwConsIVKardexSumaDocum vw"
sql = sql & "                     FULL JOIN GNExistDocumento ive"
sql = sql & "                     ON (vw.IdProvcli = ive.IdProvcli) AND (vw.transid = ive.transid) )"
sql = sql & "                 ON ivb.IdProvcli = vw.IdProvcli)"
sql = sql & "             ON ivb2.IdProvcli = ive.IdProvcli)"
sql = sql & "         ON iv.transid=vw.transid)"
sql = sql & "     ON iv2.transid = ive.transid"
sql = sql & " Where (isnull(ive.exist, 0) - isnull(vw.SumaDeCantidad, 0)) <> 0"
sql = sql & " AND isnull(ive.transid, iv2.transid) is not null"
    
    Set rs = Me.OpenRecordset(sql)
    Set ConsIVCorrecExistDocum = rs
    Set rs = Nothing
End Function


Public Function RecuperaPCProvCliReloj(key As Variant) As PCProvCli
    Dim obj As PCProvCli
    Set obj = New PCProvCli
    Set obj.Empresa = Me
    On Error Resume Next
    obj.RecuperarpcprovcliReloj key
    If Err.Number = 0 Then Set RecuperaPCProvCliReloj = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function ListaEmpleadosFlex(BandActivo As Boolean, BandInactivo As Boolean) As Variant
    Dim sql As String
    Dim rs As Recordset
    sql = "SELECT  pc.CodProvCli, pc.Nombre FROM Empleado pc "
    sql = sql & " Inner join personal p on p.idempleado = pc.idprovcli "
    sql = sql & " Where BandGestion=" & CadenaBool(False, Me.TipoDB)
    If BandActivo And Not BandInactivo Then
        sql = sql & " And p.bandActivo = 1"
    ElseIf BandInactivo And Not BandActivo Then
        sql = sql & " And p.bandActivo = 0"
    End If
    sql = sql & " ORDER BY pc.Nombre"
    Set rs = Me.OpenRecordset(sql)
    If Not (rs.EOF) Then
        rs.MoveLast
        rs.MoveFirst
        ListaEmpleadosFlex = rs.GetRows(rs.RecordCount)
    Else
        Set ListaEmpleadosFlex = rs
   End If
    Set rs = Nothing
End Function

Public Function ListaGNCentroCostoBQD(BandSoloValida As Boolean, BandRS As Boolean, CodProvcli, Centro1 As String, Centro2 As String) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT cc.CodCentro, cc.Nombre,cc.descripcion, pc.nombre, cc.FechaInicio,cc.FechaFinal,cc.FechaEntrega,IdCentro FROM GNCentroCosto cc "
    sql = sql & " INNER JOIN PCProvCli pc on pc.idprovcli = cc.idcliente "
    If BandSoloValida Then sql = sql & "WHERE FechaFinal Is Null "
    If Len(Centro1) > 0 And Len(Centro2) > 0 Then
        sql = sql & " AND (cc.codCentro between '" & Centro1 & "' And '" & Centro2 & "')"
    End If
    If Len(CodProvcli) > 0 Then
        sql = sql & " AND pc.codprovcli = '" & CodProvcli & "'"
    End If
    sql = sql & " ORDER BY cc.CodCentro"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaGNCentroCostoBQD = rs
    Else
        ListaGNCentroCostoBQD = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function
Public Function RecuperaProcesoUsuario(key As String) As Proceso
    Dim obj As Proceso
    Set obj = New Proceso
    Set obj.Empresa = Me
    On Error Resume Next
    obj.recuperarxUsuario key
    If Err.Number = 0 Then Set RecuperaProcesoUsuario = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function
Public Sub SacaEspera(ByVal IDkp As Long)
    Dim rs As Recordset
    Dim sql As String
        sql = "Select *  from ivkproceso where idkp = " & IDkp
                Set rs = Me.OpenRecordset(sql)
                Do While Not rs.EOF
                    sql = "INSERT INTO IVKPROCESO(Transid,idproceso,idresponsable,cantidad,orden,descripcion,FechaFin,estado,idcentrodet,fechatoma,FechaInicio,horainicio,horatoma,estado1,Secuencia,codUsuario,bandUrgente,OrdenUrgente ) values("
                    sql = sql & rs!transid & "," & rs!idproceso & ",0" & "," & rs!Cantidad & "," & rs!Orden & ",'','',(select valor from gnestadoprod where menu = 'Ejecucion'),0,'" & Date & "','" & Date & "','" & Time & "','" & Time & "',0," & rs!secuencia & ",'" & rs!codUsuario & "', " & rs!BandUrgente & "," & rs!OrdenUrgente & " )"
                  Me.EjecutarSQL sql, 1
                    sql = " Update ivkproceso "
                    sql = sql & "Set idcentrodet = 1 "
                    sql = sql & ",estado1 = (Select valor from gnestadoprod where menu = 'FinEspera') "
                    sql = sql & ",FechaFin = '" & Date & "'"
                    sql = sql & ",horaFin = '" & Time & "'"
                    sql = sql & " Where idkp  = " & rs!IDkp
                    Me.EjecutarSQL sql, 1
                    rs.MoveNext
                Loop
                Set rs = Nothing
                gobjMain.EmpresaActual.RaiseRefreshEvent REFRESH_DETALLEPROCESOD
End Sub

Public Function VerificaEstadoEspera(ByVal IDkp As Long) As Boolean
Dim sql As String
Dim rs As Recordset
Dim Si As Boolean
On Error GoTo CapturaError
    sql = "Select  gne.menu From gnEstadoProd gne Inner join ivkproceso ivkp on ivkp.estado = gne.valor where ivkp.idkp =" & IDkp
        Set rs = Me.OpenRecordset(sql)
        Do While Not rs.EOF
            If rs!Menu = "Espera" Then 'Or rs!Menu = "Revision" Then
                Si = True
            End If
            rs.MoveNext
        Loop
        VerificaEstadoEspera = Si
Set rs = Nothing
Exit Function
CapturaError:
Set rs = Nothing
MsgBox Err.Description
Exit Function
End Function

Public Function ObtieneDesctoPCxIVxFechaNew(ByVal CodIVGrupo As String, ByVal codPC As String, ByVal codFC As String, ByRef CodDescuento As String, ByRef FechaTrans As Date, ByRef HoraTrans As Date) As Double
Dim sql As String, rs As Recordset, NumIVGrupo As Integer, NumPCGrupo As Integer
    CodDescuento = ""
    NumIVGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumIVGrupo")) + 1
    NumPCGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumPCGrupo")) + 1
    sql = " select top 1"
    sql = sql & " ivD.codDescuento as codDesc,"
    sql = sql & " case when ivdiv.Descuento-Penal>0 then ivdiv.Descuento-Penal else 0 end as TotalDesc, "
    sql = sql & " ivd.IdDescuento , ivd.BandCaducidad, ivd.FechaDesde, ivd.FechaHasta, ivd.HoraDesde, ivd.HoraHasta "
    sql = sql & " From"
    sql = sql & " ivdescuentodetallepc ivdpc "
    sql = sql & " left join pcprovcli pcc  on ivdpc.idprovcli=pcc.idprovcli"
    sql = sql & " left join pcgrupo" & NumPCGrupo & " pcg "
    sql = sql & " inner join pcprovcli pc "
    sql = sql & " on pcg.idgrupo" & NumPCGrupo & "=pc.idgrupo" & NumPCGrupo
    sql = sql & " on ivdpc.IdPCGrupo = pcg.idgrupo" & NumPCGrupo
    sql = sql & " inner join ivdescuentodetalleiv ivdiv "
    sql = sql & " inner join ivgrupo" & NumIVGrupo & " ivg "
    sql = sql & " on ivdiv.IdIVGrupo = ivg.idgrupo" & NumIVGrupo
    sql = sql & " inner join ivdescuentodetallefc ivdfc "
    sql = sql & " inner join TsFormaCobroPago tsf "
    sql = sql & " on ivdfc.idforma=tsf.idforma"
    sql = sql & " inner join ivdescuento ivd"
    sql = sql & " on ivd.iddescuento=ivdfc.iddescuento"
    sql = sql & " on ivd.iddescuento=ivdiv.iddescuento"
    sql = sql & " on ivd.iddescuento=ivdpc.iddescuento"
    sql = sql & " WHERE "
    sql = sql & " ivd.BandValida=1 and "
    sql = sql & " ivg.CodGrupo" & NumIVGrupo & " = '" & CodIVGrupo & "'"
    sql = sql & " and ( pc.CodProvCli ='" & codPC & "' or pcc.CodProvCli ='" & codPC & "')"
    sql = sql & " and tsf.codforma='" & codFC & "'"
    sql = sql & " and ivdiv.cantmin= 0"
    sql = sql & " order by ivd.fechagrabado"
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        If rs.Fields("BandCaducidad") Then
            If FechaTrans >= rs.Fields("FechaDesde") And FechaTrans <= rs.Fields("FechaHasta") Then
                ObtieneDesctoPCxIVxFechaNew = rs!TotalDesc
                CodDescuento = rs!codDesc
            Else
                ObtieneDesctoPCxIVxFechaNew = 0
                CodDescuento = "" ' 0
            End If
        Else
                ObtieneDesctoPCxIVxFechaNew = rs!TotalDesc
                CodDescuento = rs!codDesc
        
        End If
    
    End If
    Set rs = Nothing
End Function

Public Function ObtieneDesctoPCxItemxFechaAcumulaNew(ByVal CodInventario As String, ByVal codPC As String, ByVal codFC As String, ByRef CodDescuento As String, ByRef BandAcumula As Boolean, ByRef FechaTrans As Date, ByRef HoraTrans As Date) As Double
    Dim sql As String, rs As Recordset, NumIVGrupo As Integer, NumPCGrupo As Integer
    CodDescuento = ""
    NumIVGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumIVGrupo")) + 1
    NumPCGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumPCGrupo")) + 1
    sql = " select top 1"
    sql = sql & " ivD.codDescuento as codDesc, ivD.BandAcumula,"
    sql = sql & " case when ivdiv.Descuento-Penal>0 then ivdiv.Descuento-Penal else 0 end as TotalDesc,"
    sql = sql & " ivd.IdDescuento , ivd.BandCaducidad, ivd.FechaDesde, ivd.FechaHasta, ivd.HoraDesde, ivd.HoraHasta "
    sql = sql & " From"
    sql = sql & " ivdescuentodetallepc ivdpc "
    sql = sql & " left join pcprovcli pcc  on ivdpc.idprovcli=pcc.idprovcli"
    sql = sql & " left join pcgrupo" & NumPCGrupo & " pcg "
    sql = sql & " inner join pcprovcli pc "
    sql = sql & " on pcg.idgrupo" & NumPCGrupo & "=pc.idgrupo" & NumPCGrupo
    sql = sql & " on ivdpc.IdPCGrupo = pcg.idgrupo" & NumPCGrupo
    sql = sql & " inner join ivdescuentodetalleiv ivdiv "
    sql = sql & " Left join ivinventario ivi on ivdiv.idinventario=ivi.idinventario"
    sql = sql & " inner join ivdescuentodetallefc ivdfc "
    sql = sql & " inner join TsFormaCobroPago tsf "
    sql = sql & " on ivdfc.idforma=tsf.idforma"
    sql = sql & " inner join ivdescuento ivd"
    sql = sql & " on ivd.iddescuento=ivdfc.iddescuento"
    sql = sql & " on ivd.iddescuento=ivdiv.iddescuento"
    sql = sql & " on ivd.iddescuento=ivdpc.iddescuento"
    sql = sql & " WHERE "
    sql = sql & " ivd.BandValida=1 "
    sql = sql & " and ( pc.CodProvCli ='" & codPC & "' or pcc.CodProvCli ='" & codPC & "')"
    If Len(codFC) > 0 Then
        sql = sql & " and tsf.codforma='" & codFC & "'"
    End If
    sql = sql & " and codinventario='" & CodInventario & "'"
    sql = sql & " and ivdiv.cantmin= 0"
    sql = sql & " order by ivd.fechagrabado"
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        If rs.Fields("BandCaducidad") Then
            If FechaTrans >= rs.Fields("FechaDesde") And FechaTrans <= rs.Fields("FechaHasta") Then
                ObtieneDesctoPCxItemxFechaAcumulaNew = rs!TotalDesc
                CodDescuento = rs!codDesc
                BandAcumula = rs!BandAcumula
            Else
                ObtieneDesctoPCxItemxFechaAcumulaNew = 0
                CodDescuento = 0
                BandAcumula = False
            End If
        Else
            ObtieneDesctoPCxItemxFechaAcumulaNew = rs!TotalDesc
            CodDescuento = rs!codDesc
            BandAcumula = rs!BandAcumula
        End If
   End If
    Set rs = Nothing
End Function

Public Function RecuperaGNEstadoProdXColor(key As Variant) As GNEstadoProd
    Dim obj As GNEstadoProd
    Set obj = New GNEstadoProd
    Set obj.Empresa = Me
    On Error Resume Next
    obj.RecuperarxColor key
    If Err.Number = 0 Then Set RecuperaGNEstadoProdXColor = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function ListaUsuariosProceso(ByVal CodProceso As String) As String
    Dim sql As String, rs As Recordset
    Dim s As String
    s = ""
    sql = "SELECT CodUsuario From ivproceso where  codProceso = '" & CodProceso & "'"
    sql = sql & " ORDER BY CodUsuario"
    Set rs = Me.OpenRecordset(sql)
    Do While Not rs.EOF
            s = rs!codUsuario
            rs.MoveNext
    Loop
    ListaUsuariosProceso = s
    Set rs = Nothing
End Function

Public Function IdTrans(ByVal Id As Long, ByVal CodTrans As String) As Long
Dim sql As String
Dim transid As Long
Dim rs As Recordset
Dim CodOp As String
On Error GoTo CapturaError
CodOp = Me.GNOpcion.ObtenerValor("ProduccionTransOP")
VerificaExistenciaTabla 1
sql = "Select g.transid,g.idcentroHijo into tmp1 from gncomprobante g where g.transid = " & Id
sql = sql & " And g.codtrans = '" & CodOp & "'"
sql = sql & " and g.idcentroHijo in(Select g1.idcentroHijo from gncomprobante g1 where g1.codtrans = '" & CodTrans & "')"
Me.EjecutarSQL sql, 1
sql = "Select g.transid from tmp1 t inner join gncomprobante g on g.idcentrohijo = t.idcentrohijo  where g.estado <> 3 AND g.codtrans= '" & CodTrans & "'"
Set rs = Me.OpenRecordset(sql)
    Do While Not rs.EOF
        transid = rs!transid
        rs.MoveNext
    Loop
IdTrans = transid
Set rs = Nothing
Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function

Public Function RSEncabezadoColasIdkp(ByVal IDkp As Long) As Recordset
    Dim sql As String, rs As Recordset
    On Error GoTo CapturaError
    sql = "SELECT iv.descripcion,gn.descripcion+ivk.nota as nota"
    sql = sql & " FROM GNComprobante gn "
    sql = sql & " Inner join IVKardex ivk Inner join IVInventario iv on iv.idinventario = ivk.idinventario   on ivk.transid = gn.transid    "
    sql = sql & "  Inner join ivkproceso ivkp on ivkp.transid = gn.transid "
    sql = sql & " Where gn.estado <> 3 AND IV.Tipo = 6 "
    sql = sql & " AND ivkp.idkp = " & IDkp
    Set rs = Me.OpenRecordset(sql)
    Set RSEncabezadoColasIdkp = rs
    Set rs = Nothing
    Exit Function
CapturaError:
    Set rs = Nothing
    MsgBox Err.Number & Err.Description
    Exit Function
End Function


Public Function RecuperaNumeroSucursales() As Integer
    Dim sql As String, rs As Recordset
    On Error GoTo CapturaError
    RecuperaNumeroSucursales = 0
    sql = "SELECT count(idsucursal) as cant"
    sql = sql & " FROM GNSucursal "
    sql = sql & " Where bandvalida=1 "
    Set rs = Me.OpenRecordset(sql)
    RecuperaNumeroSucursales = rs.Fields(0)
    Set rs = Nothing
    Exit Function
CapturaError:
    Set rs = Nothing
    MsgBox Err.Number & Err.Description
    Exit Function

End Function

Public Function ListaGNTransTipoTRansTipoComp( _
                    Modulo As String, _
                    BandInvisibles As Boolean, _
                    BandRS As Boolean, _
                    TipoTrans As String, _
                    TipoComp As String) As Variant
    Dim sql As String, cond As String, rs As Recordset
    
    sql = "SELECT g.CodTrans, NombreTrans FROM GNTrans g  "

    sql = sql & " inner join Anexos_Transacciones a on a.codtrans=G.AnexoCodTipoTrans  "
    sql = sql & " inner join Anexo_Comprobantes c on c.CodComprobante=G.AnexoCodTipoComp "
    
    'If Len(Modulo) > 0 Then cond = cond & "Modulo='" & Modulo & "' "
    If Not BandInvisibles Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "BandVisible=" & CadenaBool(True, TipoDB)
    End If
    
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    
    sql = sql & " and a.CodTrans in (" & TipoTrans & ")"
    sql = sql & " and c.CodComprobante in (" & TipoComp & ")"
    
    sql = sql & " ORDER BY g.CodTrans"
    Set rs = Me.OpenRecordset(sql)
    
    If BandRS Then
        Set ListaGNTransTipoTRansTipoComp = rs
    Else
        ListaGNTransTipoTRansTipoComp = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


Public Function ConsANCompras2013ParaXML() As Variant
    Dim pck As PCKardex, pcd As PCDocAsignado
    Dim objGnComp As GNComprobante, objGnCompDocOriginal As GNComprobante
    Dim sql As String, cond As String, CadenaValores As String
    Dim Recargo As String 'CadenaAgrupa  As String
    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
    Dim from As String, numReg As Long
    Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
    Dim Servicios As String, Bienes As String, RowRet As Long
    Const COL_BASESER = 15
    'segunda parte de la consulta: carga los valores de  Detalles de Anexos
    Const COL_FECHA = 2
    Const COL_CODCREDTRIB = 7
    Const COL_TRANSID = 1
    Const COL_TRANSRET = 5
    Dim condServ As String
    Dim condBien As String
    
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   
    With gobjCond
        
            cond = " AND (GNC.FechaTrans  BETWEEN " & _
                    FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                    FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            
'            If Len(.Usuario1) > 0 Or Len(.Usuario2) > 0 Then
'                   cond = cond & " AND pcprovcli.CodProvCli  BETWEEN  '" & .Usuario1 & "' AND '" & .Usuario2 & "' "
'            End If
            
            VerificaExistenciaTabla 0
            VerificaExistenciaTabla 1
            VerificaExistenciaTabla 2
            VerificaExistenciaTabla 3
            VerificaExistenciaTabla 4
            VerificaExistenciaTabla 5
            VerificaExistenciaTabla 6
            
            
            VerificaExistenciaTabla 10
            VerificaExistenciaTabla 11
            VerificaExistenciaTabla 12
            VerificaExistenciaTabla 13
            VerificaExistenciaTabla 14
            VerificaExistenciaTabla 15
            VerificaExistenciaTabla 16
            
            
            
            
            sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as TotalDescuento Into tmp0 " & _
                    "From IvRecargo ivR inner join " & _
                        "IvKardexRecargo ivkR Inner join " & _
                            "GnComprobante gNc  " & _
                        "On ivkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = IvkR.IdRecargo "
            sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.Servicios) & ") " & cond & _
                    " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")" & _
                  "Group by IvkR.TransID"
                  
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as TotalDescuento Into tmp10 " & _
                    "From IvRecargo ivR inner join " & _
                        "AFKardexRecargo ivkR Inner join " & _
                            "GnComprobante gNc  " & _
                        "On ivkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = IvkR.IdRecargo "
            sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.Servicios) & ") " & cond & _
                    " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")" & _
                  "Group by IvkR.TransID"
                  
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            'jeaa 09/01/2007
            'datos ICE
            sql = " Select Ivkr.TransID, "
            sql = sql & " SUM(IVK.CostoRealTotal) AS BASEice,"
            sql = sql & " MAX(IVC.CodICE) AS CodICE, SUM(ivkr.Valor) As ValorICE"
            sql = sql & " Into tmp6"
            sql = sql & " From IvRecargo ivR"
            sql = sql & " inner join IvKardexRecargo ivkR"
            sql = sql & " INNER JOIN IVKARDEX IVK"
            sql = sql & " INNER JOIN IVINVENTARIO IV"
            sql = sql & " INNER JOIN IVRECARGOICE IVC"
            sql = sql & " ON IV.IDICE=IVC.IDICE"
            sql = sql & " ON IVK.IDINVENTARIO=IV.IDINVENTARIO"
            sql = sql & " ON IVKR.TRANSID=IVK.TRANSID"
            sql = sql & " Inner join GnComprobante gNc"
            sql = sql & " On ivkr.TransID = gNc.TransID"
            sql = sql & " On Ivr.IdRecargo = IvkR.IdRecargo"
            sql = sql & " Where gnc.Estado <> 3"
            sql = sql & " AND ivr.CodRecargo IN ('" & gobjMain.EmpresaActual.GNOpcion.ObtenerValor("RecDescParaICE") & "')" & cond
            sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")"
            sql = sql & " Group by IvkR.TransID"
            
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            
'--datos de indices
            VerificaExistenciaTabla 3
            sql = " Select  DISTINCT GNC.TransID AS cp_id, GNC_b.TransID AS rtp_id"
            sql = sql & " Into tmp3"
            sql = sql & " From    (gncomprobante GNC Inner join pckardex pck_a ON GNC.TransID = pck_a.TransID ) INNER JOIN"
            sql = sql & "  (gncomprobante GNC_b Inner join pckardex pck_B ON GNC_b.TransID = pck_B.TransID )"
            sql = sql & " ON  PCK_A.ID = PCK_B.IDASIGNADO"
            sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " AND GNC_b.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion1) & ")"
            sql = sql & " AND (GNC.FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = sql & " and GNC.Estado<>3 and GNC_b.estado<>3 "
            
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            sql = " Select  DISTINCT GNC.TransID AS cp_id, GNC_b.TransID AS rtp_id"
            sql = sql & " Into tmp13"
            sql = sql & " From    (gncomprobante GNC Inner join pckardex pck_a ON GNC.TransID = pck_a.TransID ) INNER JOIN"
            sql = sql & "  (gncomprobante GNC_b Inner join pckardex pck_B ON GNC_b.TransID = pck_B.TransID )"
            sql = sql & " ON  PCK_A.ID = PCK_B.IDASIGNADO"
            sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " AND GNC_b.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion1) & ")"
            sql = sql & " AND (GNC.FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = sql & " and GNC.Estado<>3 and GNC_b.estado<>3 "
            
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            '--datos de la compra
            sql = " Select  GNC.TransID, Ane.FechaAnexos, GNC.FechaTrans, CodTipoDocumento, pcprovcli.ruc,"
            sql = sql & " GNC.Nombre, Ane.CodCredTrib, Ane.CodTipoComp, Ane.NumAutSRI,"
            sql = sql & " Ane.NumSerie, Ane.NumSecuencial, GNC.Descripcion, CodFormaPagoSRI, BandPagoExterior, CodPaisSRI , BandDobleTributa, BandPagoSujRet, "
            sql = sql & " Case Ane.BandDevolucion WHEN 0 THEN 'N' ELSE 'S' END AS BandDev,"
            sql = sql & " Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as Trans,"
            sql = sql & " Gnc.CodTrans as Transa, Gnc.NumTrans as NumTransa,"
            sql = sql & " Case vw.CostoTotalBase0 When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBase0 + (vw.CostoTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))) ) end As Valor0, "
            sql = sql & " Case vw.CostoTotalBaseIVA When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseIVA + (vw.CostoTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) end AS Valor12, "
            sql = sql & " Case vw.CostoTotalBaseNOIVA When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseNOIVA + (vw.CostoTotalBaseNOIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) end AS ValorNOIVA, "
            sql = sql & " Case vw.CostoTotal When 0 then 0 else "
            sql = sql & " vw.SignoCompra  * (vw.CostoTotal + (vw.CostoTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))))  End AS CostoTotal,  "
            sql = sql & " ane.NumSerieEstablecimiento ,ane.NumSeriePunto ,ane.FechaCaducidad, "
            sql = sql & " tmp6.BASEice, tmp6.CodICE ,tmp6.ValorICE,BANDREToTRO, idproveedorref "
            sql = sql & " Into tmp1"
            sql = sql & " from    (( tmp0 Right join gncomprobante Gnc "
            sql = sql & " inner join gntrans gnt"
            sql = sql & " inner join GNTransRecargo gntr"
            sql = sql & " inner join ivrecargo ivr"
            sql = sql & " on ivr.idrecargo=gntr.idrecargo"
            sql = sql & " on gnt.codtrans= gntr.codtrans"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " left join tmp6 on gnc.transid=tmp6.transid"
            sql = sql & " inner join vwConsSUMIVKardexIVA vw ON Gnc.TransID = vw.transid "
            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " inner join Anexos Ane on Gnc.TransID = Ane.Transid)"
            sql = sql & " right join pcprovcli  "
            sql = sql & " left join anexo_TipoDocumento atd on pcprovcli.IdTipoDocumento=atd.Id"
            sql = sql & " on gnc.IdProveedorRef=pcprovcli.idprovcli"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " and GNC.Estado<>3 " & cond
            
            sql = sql & " union all"
            
            
            '--datos de la compra activos
            sql = sql & " Select  GNC.TransID, Ane.FechaAnexos, GNC.FechaTrans, CodTipoDocumento, pcprovcli.ruc,"
            sql = sql & " GNC.Nombre, Ane.CodCredTrib, Ane.CodTipoComp, Ane.NumAutSRI,"
            sql = sql & " Ane.NumSerie, Ane.NumSecuencial, GNC.Descripcion, CodFormaPagoSRI, BandPagoExterior, CodPaisSRI , BandDobleTributa, BandPagoSujRet, "
            sql = sql & " Case Ane.BandDevolucion WHEN 0 THEN 'N' ELSE 'S' END AS BandDev,"
            sql = sql & " Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as Trans,"
            sql = sql & " Gnc.CodTrans as Transa, Gnc.NumTrans as NumTransa,"
            sql = sql & " Case vw.CostoTotalBase0 When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBase0 + (vw.CostoTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))) ) end As Valor0, "
            sql = sql & " Case vw.CostoTotalBaseIVA When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseIVA + (vw.CostoTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) end AS Valor12, "
            'sql = sql & " Case vw.CostoTotalBaseNOIVA When 0 then 0 else "
            'sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseNOIVA + (vw.CostoTotalBaseNOIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) end AS ValorNOIVA, "
            sql = sql & " 0 as ValorNOIVA, "
            sql = sql & " Case vw.CostoTotal When 0 then 0 else "
            sql = sql & " vw.SignoCompra  * (vw.CostoTotal + (vw.CostoTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))))  End AS CostoTotal,  "
            sql = sql & " ane.NumSerieEstablecimiento ,ane.NumSeriePunto ,ane.FechaCaducidad, "
            sql = sql & " 0 as BASEice, '0' as CodICE , 0 as ValorICE,BANDREToTRO, idproveedorref "
            sql = sql & " from    (( tmp10 Right join gncomprobante Gnc "
            sql = sql & " inner join gntrans gnt"
            sql = sql & " inner join GNTransRecargo gntr"
            sql = sql & " inner join ivrecargo ivr"
            sql = sql & " on ivr.idrecargo=gntr.idrecargo"
            sql = sql & " on gnt.codtrans= gntr.codtrans"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            ''sql = sql & " left join tmp6 on gnc.transid=tmp6.transid"
            sql = sql & " inner join vwConsSUMAFKardexIVA vw ON Gnc.TransID = vw.transid "
            sql = sql & " ON tmp10.TransID = Gnc.TransID)"
            sql = sql & " inner join Anexos Ane on Gnc.TransID = Ane.Transid)"
            sql = sql & " right join pcprovcli  "
            sql = sql & " left join anexo_TipoDocumento atd on pcprovcli.IdTipoDocumento=atd.Id"
            sql = sql & " on gnc.IdProveedorRef=pcprovcli.idprovcli"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " and GNC.Estado<>3 " & cond
            
            VerificaExistenciaTabla 1
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            '-- datos de las retenciones
            
            
            
            ' union de las tres tablas
            ' union de las tres tablas
            sql = " select  DISTINCT  a.Transid,a.FechaAnexos, a.FechaTrans, a.Transa,  a.NumTransa, "
            sql = sql & "a.CodTipoDocumento, a.idproveedorref, a.RUC, a.Nombre, "
            sql = sql & " a.NumSerieEstablecimiento , a.NumSeriePunto, "
            sql = sql & " case when len(a.NumSecuencial)>9 then right(a.NumSecuencial,9) else a.NumSecuencial end as NumSecuencial ,  "
            sql = sql & " a.NumAutSRI, a.FechaCaducidad, "
            sql = sql & "a.CodCredTrib, a.CodTipoComp, a.CodFormaPagoSRI, a.BandPagoExterior, a.CodPaisSRI , a.BandDobleTributa, a.BandPagoSujRet, "
            sql = sql & " a.Valor0, a.Valor12,a.ValorNOIVA, CodICE, ISNULL(ValorICE,0) AS ValorICE, BANDREToTRO "
                sql = sql & " From tmp1 a  "
            sql = sql & " order by a.CodTipoComp"

            
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANCompras2013ParaXML = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Compraspara Anexos 2013 XML" & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 4
End Function


Public Function ListaAnexoFormaPago(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodFormaPago,  Descripcion FROM Anexo_FormaPago"
    If BandSoloValida Then
        sql = sql & " where bandvalida= 1"
    End If
    sql = sql & " ORDER BY CodFormaPago"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaAnexoFormaPago = rs
    Else
        ListaAnexoFormaPago = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function RecuperaAnexosFormaPago(key As Variant) As Anexos
Dim obj As Anexos
    Set obj = New Anexos
    Set obj.Empresa = Me
    On Error Resume Next
    obj.RecuperarAnexoFormaPago key
    If Err.Number = 0 Then Set RecuperaAnexosFormaPago = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function


Public Function ConsANVentas2013paraXML() As Variant
    Dim pck As PCKardex, pcd As PCDocAsignado
    Dim objGnComp As GNComprobante, objGnCompDocOriginal As GNComprobante
    Dim sql As String, cond As String, CadenaValores As String
    Dim Recargo As String 'CadenaAgrupa  As String
    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
    Dim from As String, numReg As Long, f1 As String
    Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
    Dim Servicios As String, Bienes As String, RowRet As Long
    Const COL_BASESER = 15
    'segunda parte de la consulta: carga los valores de  Detalles de Anexos
    Const COL_FECHA = 2
    Const COL_CODCREDTRIB = 7
    Const COL_TRANSID = 1
    Const COL_TRANSRET = 5
    Dim condServ As String
    Dim condBien As String
    Dim Vista As String
    Dim pos As Integer, pos1 As Integer
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   With gobjCond
        'Reporte de un mes a la vez
        f1 = DateSerial(Year(.fecha1), Month(.fecha1), 1)
        cond = " AND GNC.FechaTrans BETWEEN " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & _
               " AND " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB)
            VerificaExistenciaTabla 0
            VerificaExistenciaTabla 1
            VerificaExistenciaTabla 2
            VerificaExistenciaTabla 3
            pos = InStr(1, UCase(Me.GNOpcion.NombreEmpresa), "DISFRA")
            pos1 = InStr(1, UCase(Me.GNOpcion.NombreEmpresa), "ENCOFRADO")
            If pos > 0 Or pos1 > 0 Then
                Vista = "vwConsSUMIVKardexIVA2B"
            Else
                Vista = "vwConsSUMIVKardexIVA"
            End If
               sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as TotalDescuento Into tmp0 " & _
                    "From IvRecargo ivR inner join " & _
                        "IvKardexRecargo ivkR Inner join " & _
                            "GnComprobante gNc  " & _
                        "On ivkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = IvkR.IdRecargo "
                sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.Sucursal) & ") " & cond & _
                    " AND GNC.CodTrans IN (" & PreparaCadena(.CodGrupo) & ")" & _
                  "Group by IvkR.TransID"
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
               
        VerificaExistenciaTablaTemp "tan1"
            sql = "Select pc.ruc, SUM(IvKr.Valor) as TotalIVA Into tan1 " & _
                    "From IvRecargo ivR inner join " & _
                        "IvKardexRecargo ivkR Inner join " & _
                            "GnComprobante gNc  inner join pcprovcli pc on gnc.idclienteref= pc.idprovcli " & _
                        "On ivkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = IvkR.IdRecargo "
                sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN ('IVA') " & cond & _
                    " AND GNC.CodTrans IN (" & PreparaCadena(.CodGrupo) & ")" & _
                  "Group by pc.ruc"
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            
            
            
'--datos de indices
            VerificaExistenciaTabla 3
            sql = " Select  DISTINCT GNC.IdClienteRef AS FC_id, GNC_b.IdClienteRef AS rtp_id1, "
            sql = sql & " CASE WHEN GNC_b.IdClienteRef=0 THEN PCK_b.IdProvcli WHEN GNC_b.IdClienteRef<>0 THEN GNC_b.IdClienteRef end as rtp_id "
            sql = sql & " Into tmp3"
            sql = sql & " From    (gncomprobante GNC Inner join pckardex pck_a ON GNC.TransID = pck_a.TransID ) INNER JOIN"
            sql = sql & "  (gncomprobante GNC_b Inner join pckardex pck_B ON GNC_b.TransID = pck_B.TransID )"
            sql = sql & " ON  PCK_A.ID = PCK_B.IDASIGNADO"
            sql = sql & " where GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
            sql = sql & " AND GNC_b.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion2) & ")"
            sql = sql & " AND (GNC_b.FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = sql & " and GNC.Estado<>3 and GNC.IdClienteRef<>0 and GNC_b.IdClienteRef<>0 "
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            '--datos de la Venta
            sql = " Select pc.ruc, ' ' as Nombre, atd.CodTipoDocumento, "
            sql = sql & " AnexoCodTipoComp, count(Gnc.NumTrans) as cantTrans,  "
            
'''            sql = sql & "  CASE WHEN SUM(vw.PrecioRealTotal)<>0 THEN sum( (vw.PrecioRealTotalBase0 + (vw.PrecioRealTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.PrecioRealTotal as float))) ))*-1 END As Valor0,"
'''            sql = sql & "  CASE WHEN SUM(vw.PrecioRealTotal)<>0 THEN sum( (vw.PrecioRealTotalBaseIVA + (vw.PrecioRealTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioRealTotal as float)))))*-1 END AS Valor12,"
'''            sql = sql & " 0 AS ValorNO12,"
'''            sql = sql & "  CASE WHEN SUM(vw.PrecioRealTotal)<>0 THEN sum( (vw.PrecioRealTotal + (vw.PrecioRealTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioRealTotal as float)))))*-1 END  AS PrecioRealTotal"
            
            
            sql = sql & "  CASE WHEN SUM(vw.PrecioRealTotal)<>0 THEN sum( vw.PrecioRealTotalBase0) *-1 END As Valor0,"
            sql = sql & "  CASE WHEN SUM(vw.PrecioRealTotal)<>0 THEN sum( vw.PrecioRealTotalBaseIVA) *-1 END AS Valor12,"
            sql = sql & " 0 AS ValorNO12,"
            sql = sql & "  CASE WHEN SUM(vw.PrecioRealTotal)<>0 THEN sum( vw.PrecioRealTotal) *-1 END  AS PrecioRealTotal"
            
            
            sql = sql & " Into tmp1"
            sql = sql & " from    ("
            sql = sql & " tmp0"
            sql = sql & " Right join gncomprobante Gnc "
            sql = sql & " inner join GnTrans gnt on gnc.codtrans=GnT.codtrans"
            sql = sql & " INNER JOIN PCPROVClI pc "
            sql = sql & " left join anexo_TipoDocumento atd on pc.IdTipoDocumento=atd.Id"
            sql = sql & " ON GNC.IdClienteRef=pc.idprovcli "
            sql = sql & " inner join " & Vista & " vw"
            sql = sql & " ON Gnc.TransID = vw.transid"
            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
            sql = sql & " and pc.bandempresapublica=0 AND Gnc.BandCierre<>9 "
            sql = sql & " and GNC.Estado<>3 " & cond
            sql = sql & " and pc.ruc<>'9999999999999'"
            sql = sql & " and  (atd.CodTipoDocumento in ( 'R','C') or atd.CodTipoDocumento is null)"
            sql = sql & " group by  pc.ruc,   AnexoCodTipoComp  ,CodTipoDocumento "
           
           sql = sql & " union all "
            
            sql = sql & " Select  pc.ruc, ' ' as Nombre, atd.CodTipoDocumento , "
            sql = sql & " AnexoCodTipoComp, count(Gnc.NumTrans) as cantTrans,  "
'            sql = sql & " CASE WHEN SUM(vw.PrecioRealTotal)<>0 THEN sum( (vw.PrecioRealTotalBase0 + (vw.PrecioRealTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.PrecioRealTotal as float))) ))*-1 END As Valor0,"
'            sql = sql & " 0 AS Valor12,"
'            sql = sql & " CASE WHEN SUM(vw.PrecioRealTotal)<>0 THEN sum( (vw.PrecioRealTotalBaseIVA + (vw.PrecioRealTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioRealTotal as float)))))*-1 END AS ValorNO12,"
'            sql = sql & " CASE WHEN SUM(vw.PrecioRealTotal)<>0 THEN sum( (vw.PrecioRealTotal + (vw.PrecioRealTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioRealTotal as float)))))*-1 END  AS PrecioRealTotal"
            
            sql = sql & "  CASE WHEN SUM(vw.PrecioRealTotal)<>0 THEN sum( vw.PrecioRealTotalBase0) *-1 END As Valor0,"
            sql = sql & "  CASE WHEN SUM(vw.PrecioRealTotal)<>0 THEN sum( vw.PrecioRealTotalBaseIVA) *-1 END AS Valor12,"
            sql = sql & " 0 AS ValorNO12,"
            sql = sql & "  CASE WHEN SUM(vw.PrecioRealTotal)<>0 THEN sum( vw.PrecioRealTotal) *-1 END  AS PrecioRealTotal"
            
            
            sql = sql & " from    ("
            sql = sql & " tmp0"
            sql = sql & " Right join gncomprobante Gnc "
            sql = sql & " inner join GnTrans gnt on gnc.codtrans=GnT.codtrans"
            'sql = sql & " INNER JOIN PCPROVClI pc ON GNC.IdClienteRef=pc.idprovcli "
            sql = sql & " INNER JOIN PCPROVClI pc "
            sql = sql & " left join anexo_TipoDocumento atd on pc.IdTipoDocumento=atd.Id"
            sql = sql & " ON GNC.IdClienteRef=pc.idprovcli "
            sql = sql & " inner join " & Vista & " vw"
            sql = sql & " ON Gnc.TransID = vw.transid"
            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
            sql = sql & " and pc.bandempresapublica=1  AND Gnc.BandCierre<>9 "
            sql = sql & " and GNC.Estado<>3 " & cond
            sql = sql & " and pc.ruc<>'9999999999999'"
            sql = sql & " and  (atd.CodTipoDocumento in ( 'R','C') or atd.CodTipoDocumento is null)"
            sql = sql & " group by  pc.ruc ,AnexoCodTipoComp , CodTipoDocumento "
           
           sql = sql & " union all "
            
            sql = sql & " Select '9999999999999' AS ruc, ' ' as Nombre, 'F' as CodTipoDocumento, "
            sql = sql & " AnexoCodTipoComp, count(Gnc.NumTrans) as cantTrans,  "
            
'            sql = sql & " CASE WHEN SUM(vw.PrecioRealTotal)<>0 THEN sum( (vw.PrecioRealTotalBase0 + (vw.PrecioRealTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.PrecioRealTotal as float))) ))*-1 END  As Valor0,"
'            sql = sql & " CASE WHEN SUM(vw.PrecioRealTotal)<>0 THEN sum( (vw.PrecioRealTotalBaseIVA + (vw.PrecioRealTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioRealTotal as float)))))*-1 END AS Valor12,"
'            sql = sql & " 0 AS ValorNO12,"
'            sql = sql & " CASE WHEN SUM(vw.PrecioRealTotal)<>0 THEN sum( (vw.PrecioRealTotal + (vw.PrecioRealTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioRealTotal as float)))))*-1 END  AS PrecioRealTotal"
            sql = sql & "  CASE WHEN SUM(vw.PrecioRealTotal)<>0 THEN sum( vw.PrecioRealTotalBase0) *-1 END As Valor0,"
            sql = sql & "  CASE WHEN SUM(vw.PrecioRealTotal)<>0 THEN sum( vw.PrecioRealTotalBaseIVA) *-1 END AS Valor12,"
            sql = sql & " 0 AS ValorNO12,"
            sql = sql & "  CASE WHEN SUM(vw.PrecioRealTotal)<>0 THEN sum( vw.PrecioRealTotal) *-1 END  AS PrecioRealTotal"




            sql = sql & " from    ("
            sql = sql & " tmp0"
            sql = sql & " Right join gncomprobante Gnc "
            sql = sql & " inner join GnTrans gnt on gnc.codtrans=GnT.codtrans"
            sql = sql & " INNER JOIN PCPROVClI pc "
            sql = sql & " left join anexo_TipoDocumento atd on pc.IdTipoDocumento=atd.Id"
            sql = sql & " ON GNC.IdClienteRef=pc.idprovcli "
            sql = sql & " inner join " & Vista & " vw"

            sql = sql & " ON Gnc.TransID = vw.transid"
            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
            sql = sql & " and pc.bandempresapublica=0  AND Gnc.BandCierre<>9 "
            sql = sql & " and GNC.Estado<>3 " & cond
            'sql = sql & " and pc.ruc='0160043670001'"
            sql = sql & " and  (atd.CodTipoDocumento not in ( 'R','C')"
            sql = sql & " OR pc.ruc='9999999999999')"
            sql = sql & " group by  AnexoCodTipoComp " 'CodTipoDocumento ,
           
           sql = sql & " union all "
           
            sql = sql & " Select  '9999999999999' AS ruc, ' ' as Nombre, 'F' as CodTipoDocumento , "
            sql = sql & " AnexoCodTipoComp, count(Gnc.NumTrans) as cantTrans,  "
            
'            sql = sql & " CASE WHEN SUM(vw.PrecioRealTotal)<>0 THEN sum( (vw.PrecioRealTotalBase0 + (vw.PrecioRealTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.PrecioRealTotal as float))) ))*-1 END As Valor0,"
'            sql = sql & " 0 AS Valor12,"
'            sql = sql & " CASE WHEN SUM(vw.PrecioRealTotal)<>0 THEN sum( (vw.PrecioRealTotalBaseIVA + (vw.PrecioRealTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioRealTotal as float)))))*-1 END AS ValorNO12,"
'            sql = sql & " CASE WHEN SUM(vw.PrecioRealTotal)<>0 THEN sum( (vw.PrecioRealTotal + (vw.PrecioRealTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioRealTotal as float)))))*-1  END AS PrecioRealTotal"

            sql = sql & "  CASE WHEN SUM(vw.PrecioRealTotal)<>0 THEN sum( vw.PrecioRealTotalBase0) *-1 END As Valor0,"
            sql = sql & "  CASE WHEN SUM(vw.PrecioRealTotal)<>0 THEN sum( vw.PrecioRealTotalBaseIVA) *-1 END AS Valor12,"
            sql = sql & " 0 AS ValorNO12,"
            sql = sql & "  CASE WHEN SUM(vw.PrecioRealTotal)<>0 THEN sum( vw.PrecioRealTotal) *-1 END  AS PrecioRealTotal"

            sql = sql & " from    ("
            sql = sql & " tmp0"
            sql = sql & " Right join gncomprobante Gnc "
            sql = sql & " inner join GnTrans gnt on gnc.codtrans=GnT.codtrans"
            'sql = sql & " INNER JOIN PCPROVClI pc ON GNC.IdClienteRef=pc.idprovcli "
            sql = sql & " INNER JOIN PCPROVClI pc "
            sql = sql & " left join anexo_TipoDocumento atd on pc.IdTipoDocumento=atd.Id"
            sql = sql & " ON GNC.IdClienteRef=pc.idprovcli "
            sql = sql & " inner join " & Vista & " vw"

            sql = sql & " ON Gnc.TransID = vw.transid"
            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
            sql = sql & " and pc.bandempresapublica=1  AND Gnc.BandCierre<>9 "
            sql = sql & " and GNC.Estado<>3 " & cond
            sql = sql & " and (pc.ruc='9999999999999'"
            sql = sql & " OR  atd.CodTipoDocumento not in ( 'R','C'))"
            sql = sql & " group by  AnexoCodTipoComp " ', CodTipoDocumento
           VerificaExistenciaTabla 1
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            
            sql = " select ruc  into tmp4 from tmp1 where anexocodtipocomp=18"
            VerificaExistenciaTabla 4
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            ' union de las tres tablas
            sql = "SELECT DISTINCT " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB) & " as Fecha, "
            sql = sql & "  CodTipoDocumento,  '' as i,  (a.RUC)as ruc, '' as nombre, a.AnexoCodTipoComp, isnull(a.cantTrans,0),"
'            sql = sql & " isnull(a.Valor0*-1,0) , isnull(a.Valor12*-1,0), isnull(a.ValorNO12*-1,0) "
            sql = sql & " case when a.AnexoCodTipoComp=4 then  isnull(a.Valor0,0) else isnull(a.Valor0*-1,0) end as Valor0,"
            sql = sql & " case when a.AnexoCodTipoComp=4 then  isnull(a.Valor12,0) else isnull(a.Valor12*-1,0) end as Valor12,"
            sql = sql & " case when a.AnexoCodTipoComp=4 then isnull(a.ValorNO12,0) else  isnull(a.ValorNO12*-1,0) end as ValorNO12"
            sql = sql & " ,round(b.totaliva,2) as totaliva "
            sql = sql & " From tmp1 a  left  join tan1 b on a.ruc = b.ruc "
            sql = sql & " union all "
            'saca retenciones de este periodo afectadas a facturas de otro periodo
            sql = sql & " Select  DISTINCT " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB) & " as Fecha, "
            sql = sql & " atd.CodTipoDocumento, '' as i, (pc.RUC)as ruc, '' as nombre, '18' as AnexoCodTipoComp, 0 as cantTrans,"
            sql = sql & "0 as Valor0, 0 as Valor12 , 0 as ValorNO12 ,0 as totaliva "
            sql = sql & " From    (gncomprobante GNC_b INNER JOIN PCPROVClI pc"
            sql = sql & " left join anexo_TipoDocumento atd on pc.IdTipoDocumento=atd.Id"
            sql = sql & " ON GNC_b.IdClienteRef=pc.idprovcli   )"
            sql = sql & " inner join tskardexret ivr on gnc_b.transid = ivr.transid"
            sql = sql & " where GNC_b.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion2) & ")"
            sql = sql & " AND (GNC_b.FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = sql & " and GNC_B .Estado<>3 and GNC_b.IdClienteRef<>0 "
            sql = sql & " and pc.ruc not in (select  ruc from tmp4) "
            'sql = sql & " group by atd.CodTipoDocumento"
            sql = sql & " order by a.AnexoCodTipoComp " ', a.Nombre
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANVentas2013paraXML = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Compraspara Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 4
End Function

Public Function ConsANVentasxEstablecimiento2013paraXML() As Variant
    Dim pck As PCKardex, pcd As PCDocAsignado
    Dim objGnComp As GNComprobante, objGnCompDocOriginal As GNComprobante
    Dim sql As String, cond As String, CadenaValores As String
    Dim Recargo As String 'CadenaAgrupa  As String
    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
    Dim from As String, numReg As Long, f1 As String
    Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
    Dim Servicios As String, Bienes As String, RowRet As Long
    Const COL_BASESER = 15
    'segunda parte de la consulta: carga los valores de  Detalles de Anexos
    Const COL_FECHA = 2
    Const COL_CODCREDTRIB = 7
    Const COL_TRANSID = 1
    Const COL_TRANSRET = 5
    Dim condServ As String
    Dim condBien As String
    Dim Vista As String
    Dim pos As Integer
    Dim pos1 As Integer
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   With gobjCond
        'Reporte de un mes a la vez
        f1 = DateSerial(Year(.fecha1), Month(.fecha1), 1)
        cond = " AND GNC.FechaTrans BETWEEN " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & _
               " AND " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB)
            VerificaExistenciaTabla 0
            VerificaExistenciaTabla 1
            VerificaExistenciaTabla 2
            VerificaExistenciaTabla 3
            pos = InStr(1, UCase(Me.GNOpcion.NombreEmpresa), "DISFRA")
            pos1 = InStr(1, UCase(Me.GNOpcion.NombreEmpresa), "ENCOFRADO")
            If pos > 0 Or pos1 > 0 Then
                Vista = "vwConsSUMIVKardexIVA2B"
            Else
                Vista = "vwConsSUMIVKardexIVA"
            End If
               sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as TotalDescuento Into tmp0 " & _
                    "From IvRecargo ivR inner join " & _
                        "IvKardexRecargo ivkR Inner join " & _
                            "GnComprobante gNc  " & _
                        "On ivkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = IvkR.IdRecargo "
                sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.Sucursal) & ") " & cond & _
                    " AND GNC.CodTrans IN (" & PreparaCadena(.CodGrupo) & ")" & _
                  "Group by IvkR.TransID"
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
'--datos de indices
            VerificaExistenciaTabla 3
            sql = " Select  DISTINCT GNC.IdClienteRef AS FC_id, GNC_b.IdClienteRef AS rtp_id1, "
            sql = sql & " CASE WHEN GNC_b.IdClienteRef=0 THEN PCK_b.IdProvcli WHEN GNC_b.IdClienteRef<>0 THEN GNC_b.IdClienteRef end as rtp_id "
            sql = sql & " Into tmp3"
            sql = sql & " From    (gncomprobante GNC Inner join pckardex pck_a ON GNC.TransID = pck_a.TransID ) INNER JOIN"
            sql = sql & "  (gncomprobante GNC_b Inner join pckardex pck_B ON GNC_b.TransID = pck_B.TransID )"
            sql = sql & " ON  PCK_A.ID = PCK_B.IDASIGNADO"
            sql = sql & " where GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
            sql = sql & " AND GNC_b.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion2) & ")"
            sql = sql & " AND (GNC_b.FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = sql & " and GNC.Estado<>3 and GNC.IdClienteRef<>0 and GNC_b.IdClienteRef<>0 "
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            '--datos de la Venta
            
            
            sql = " Select gns.numestablecimiento, AnexoCodTipoComp, "
            sql = sql & " count(Gnc.NumTrans) as cantTrans,  "
'            sql = sql & "  CASE WHEN SUM(vw.PrecioRealTotal)<>0 THEN sum( (vw.PrecioRealTotalBase0 + (vw.PrecioRealTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.PrecioRealTotal as float))) ))*-1 END As Valor0,"
'            sql = sql & "  CASE WHEN SUM(vw.PrecioRealTotal)<>0 THEN sum( (vw.PrecioRealTotalBaseIVA + (vw.PrecioRealTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioRealTotal as float)))))*-1 END AS Valor12,"
'            sql = sql & " 0 AS ValorNO12,"
'            sql = sql & "  CASE WHEN SUM(vw.PrecioRealTotal)<>0 THEN sum( (vw.PrecioRealTotal + (vw.PrecioRealTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioRealTotal as float)))))*-1 END  AS PrecioRealTotal "
            
            sql = sql & "  CASE WHEN SUM(vw.PrecioRealTotal)<>0 THEN sum( vw.PrecioRealTotalBase0) *-1 END As Valor0,"
            sql = sql & "  CASE WHEN SUM(vw.PrecioRealTotal)<>0 THEN sum( vw.PrecioRealTotalBaseIVA) *-1 END AS Valor12,"
            sql = sql & " 0 AS ValorNO12,"
            sql = sql & "  CASE WHEN SUM(vw.PrecioRealTotal)<>0 THEN sum( vw.PrecioRealTotal) *-1 END  AS PrecioRealTotal"
            
            
            sql = sql & " Into tmp1"
            sql = sql & " from    ("
            sql = sql & " tmp0"
            sql = sql & " Right join gncomprobante Gnc "
            sql = sql & " inner join GnTrans gnt "
            sql = sql & " inner join gnsucursal gns on gnt.idsucursal=gns.idsucursal"
            sql = sql & " on gnc.codtrans=GnT.codtrans"
            
            sql = sql & " inner join " & Vista & " vw"

            sql = sql & " ON Gnc.TransID = vw.transid"
            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " where  gns.bandvalida=1 and GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
            sql = sql & " and GNC.Estado<>3  AND Gnc.BandCierre<>9 " & cond
            sql = sql & " group by  gns.numestablecimiento, AnexoCodTipoComp "
            
            VerificaExistenciaTabla 4
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            ' union de las tres tablas
            sql = "SELECT DISTINCT  gns.numestablecimiento, "
            sql = sql & "   a.AnexoCodTipoComp, isnull(a.cantTrans,0),"
            sql = sql & " case when a.AnexoCodTipoComp=4 then isnull(a.Valor0,0) else isnull(a.Valor0*-1,0) end as Valor0, "
            sql = sql & " case when a.AnexoCodTipoComp=4 then isnull(a.Valor12,0) else isnull(a.Valor12*-1,0) end as Valor12, "
            sql = sql & " case when a.AnexoCodTipoComp=4then  isnull(a.ValorNO12,0) else isnull(a.ValorNO12*-1,0) end as ValorNO12, "
            sql = sql & " case when a.AnexoCodTipoComp=4 then  isnull(a.PrecioRealTotal,0) else isnull(a.PrecioRealTotal*-1,0) end as PrecioRealTotal "
            sql = sql & "  "
            sql = sql & " From gnsucursal gns left join tmp1 a on gns.numestablecimiento  = a.numestablecimiento where  gns.bandvalida=1"
            sql = sql & " order by gns.numestablecimiento, a.AnexoCodTipoComp desc"
            
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANVentasxEstablecimiento2013paraXML = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Compraspara Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 4
End Function


Public Function ListaAnexoTipoComprobanteFlexGrid() As String
    Dim sql As String, cad As String, rs As Recordset
    
    sql = "SELECT CodComprobante,  Descripcion FROM Anexo_Comprobantes  "
    sql = sql & " ORDER BY CodComprobante"
    Set rs = Me.OpenRecordset(sql)

    'Pero por ahora uso lo siguiente para controlar cuentas de total y de movimiento
#If DAOLIB Then
    cad = "|" & GetStringDAO(rs, 21 + (20 + 80 + 2))        'Código+'*'=21, Space+NombreCuenta+'[]'=20+80+2
#Else
    If Not rs.EOF Then cad = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    
    rs.Close
    Set rs = Nothing
    
    ListaAnexoTipoComprobanteFlexGrid = cad
End Function

Public Function ConsReembolsoGastos2013ParaXML(ByVal transid As Long) As Recordset


    Dim sql As String, rs As Recordset
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    sql = " select * "
     sql = sql & " from vwRGKardex "
        sql = sql & " Where TransID = " & transid
    
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsReembolsoGastos2013ParaXML = rs
    Set rs = Nothing
End Function


Public Function ListaAnexoFormaPagoParaFlexGrid(TipoCuenta As Integer) As String
    Dim sql As String, cad As String, rs As Recordset

    sql = "SELECT  CodFormaPago, Descripcion FROM Anexo_FormaPago order by CodFormaPago"
    Set rs = Me.OpenRecordset(sql)

    'Pero por ahora uso lo siguiente para controlar cuentas de total y de movimiento
#If DAOLIB Then
    cad = "|" & GetStringDAO(rs, 21 + (20 + 80 + 2))        'Código+'*'=21, Space+NombreCuenta+'[]'=20+80+2
#Else
    If Not rs.EOF Then cad = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    
    rs.Close
    Set rs = Nothing
    
    ListaAnexoFormaPagoParaFlexGrid = cad
End Function


Public Function ConsANCompras2013() As Variant
    Dim pck As PCKardex, pcd As PCDocAsignado
    Dim objGnComp As GNComprobante, objGnCompDocOriginal As GNComprobante
    Dim sql As String, cond As String, CadenaValores As String
    Dim Recargo As String 'CadenaAgrupa  As String
    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
    Dim from As String, numReg As Long
    Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
    Dim Servicios As String, Bienes As String, RowRet As Long
    Const COL_BASESER = 15
    'segunda parte de la consulta: carga los valores de  Detalles de Anexos
    Const COL_FECHA = 2
    Const COL_CODCREDTRIB = 7
    Const COL_TRANSID = 1
    Const COL_TRANSRET = 5
    Dim condServ As String
    Dim condBien As String
    
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   
    With gobjCond
        
            cond = " AND (GNC.FechaTrans  BETWEEN " & _
                    FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                    FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            
'            If Len(.Usuario1) > 0 Or Len(.Usuario2) > 0 Then
'                   cond = cond & " AND pcprovcli.CodProvCli  BETWEEN  '" & .Usuario1 & "' AND '" & .Usuario2 & "' "
'            End If
            
            VerificaExistenciaTabla 0
            VerificaExistenciaTabla 1
            VerificaExistenciaTabla 2
            VerificaExistenciaTabla 3
            VerificaExistenciaTabla 4
            VerificaExistenciaTabla 5
            VerificaExistenciaTabla 6
            
            sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as TotalDescuento Into tmp0 " & _
                    "From IvRecargo ivR inner join " & _
                        "IvKardexRecargo ivkR Inner join " & _
                            "GnComprobante gNc  " & _
                        "On ivkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = IvkR.IdRecargo "
            sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.CodForma) & ") " & cond & _
                    " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")" & _
                  "Group by IvkR.TransID"
                  
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
                        VerificaExistenciaTablaTemp "t0"
            sql = "Select AfkR.TransID, SUM(AfkR.Valor) as TotalDescuento Into t0 " & _
                    "From IvRecargo ivR inner join " & _
                        "AFKardexRecargo AfkR Inner join " & _
                            "GnComprobante gNc  " & _
                        "On afkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = AfkR.IdRecargo "
            sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.CodForma) & ") " & cond & _
                    " AND GNC.CodTrans IN (" & PreparaCadena(.Usuario1) & ")" & _
                  "Group by afkR.TransID"
            
                  
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg

            
            'jeaa 09/01/2007
            'datos ICE
            sql = " Select Ivkr.TransID, "
            sql = sql & " max(IVK.CostoRealTotal) AS BASEice,"
            sql = sql & " MAX(IVC.CodICE) AS CodICE, max(ivkr.Valor) As ValorICE"
            sql = sql & " Into tmp6"
            sql = sql & " From IvRecargo ivR"
            sql = sql & " inner join IvKardexRecargo ivkR"
            sql = sql & " INNER JOIN IVKARDEX IVK"
            sql = sql & " INNER JOIN IVINVENTARIO IV"
            sql = sql & " INNER JOIN IVRECARGOICE IVC"
            sql = sql & " ON IV.IDICE=IVC.IDICE"
            sql = sql & " ON IVK.IDINVENTARIO=IV.IDINVENTARIO"
            sql = sql & " ON IVKR.TRANSID=IVK.TRANSID"
            sql = sql & " Inner join GnComprobante gNc"
            sql = sql & " On ivkr.TransID = gNc.TransID"
            sql = sql & " On Ivr.IdRecargo = IvkR.IdRecargo"
            sql = sql & " Where gnc.Estado <> 3"
            sql = sql & " AND ivr.CodRecargo IN ('" & gobjMain.EmpresaActual.GNOpcion.ObtenerValor("RecDescParaICE") & "')" & cond
            sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")"
            sql = sql & " Group by IvkR.TransID"
            
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
'--datos de indices
            VerificaExistenciaTabla 3
            sql = " Select  DISTINCT GNC.TransID AS cp_id, GNC_b.TransID AS rtp_id"
            sql = sql & " Into tmp3"
            sql = sql & " From    (gncomprobante GNC Inner join pckardex pck_a ON GNC.TransID = pck_a.TransID ) INNER JOIN"
            sql = sql & "  (gncomprobante GNC_b Inner join pckardex pck_B ON GNC_b.TransID = pck_B.TransID )"
            sql = sql & " ON  PCK_A.ID = PCK_B.IDASIGNADO"
'            sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            If Len(gobjMain.objCondicion.Usuario1) > 0 Then
                sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(gobjMain.objCondicion.CodTrans) + "," + PreparaCadena(gobjMain.objCondicion.Usuario1) & ")"
            Else
                sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(gobjMain.objCondicion.CodTrans) + "," + PreparaCadena(gobjMain.objCondicion.Usuario1) & ")"
            End If

            sql = sql & " AND GNC_b.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion1) & ")"
            sql = sql & " AND (GNC.FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = sql & " and GNC.Estado<>3 and GNC_b.estado<>3 "
            
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            '--datos de la compra
            sql = " Select  GNC.TransID, Ane.FechaAnexos, GNC.FechaTrans, pcprovcli.ruc,"
            sql = sql & " GNC.Nombre, Ane.CodCredTrib, Ane.CodTipoComp, Ane.NumAutSRI,"
            sql = sql & " case when SUBSTRING(gnt.OPCION,31,1)='N'THEN gnt.NumSerieEstablecimiento else Ane.NumSerie end as NumSerie, Ane.NumSecuencial, GNC.Descripcion,"
            sql = sql & " Case Ane.BandDevolucion WHEN 0 THEN 'N' ELSE 'S' END AS BandDev,"
            sql = sql & " Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as Trans,"
            sql = sql & " Gnc.CodTrans as Transa, Gnc.NumTrans as NumTransa,"
            sql = sql & " Case vw.CostoTotalBase0 When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBase0 + (vw.CostoTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))) ) end As Valor0, "
            sql = sql & " Case vw.CostoTotalBaseIVA When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseIVA + (vw.CostoTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) end AS Valor12, "
            
            sql = sql & " Case vw.CostoTotalBaseNOIVA When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseNOIVA + (vw.CostoTotalBaseNOIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) end AS ValorNOIVA, "
            
            sql = sql & " Case vw.CostoTotal When 0 then 0 else "
            sql = sql & " vw.SignoCompra  * (vw.CostoTotal + (vw.CostoTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))))  End AS CostoTotal,  "
            sql = sql & " ane.NumSerieEstablecimiento ,case when SUBSTRING(gnt.OPCION,31,1)='N'THEN gnt.NumSeriePunto else ane.NumSeriePunto end as NumSeriePunto,ane.FechaCaducidad, "
            sql = sql & " tmp6.BASEice, tmp6.CodICE ,tmp6.ValorICE, pcprovcli.TipoProvcli, CodFormaPagoSRI, BandFactElec"
            sql = sql & " Into tmp1"
            sql = sql & " from    (( tmp0 Right join gncomprobante Gnc "
            sql = sql & " inner join gntrans gnt"
            sql = sql & " inner join GNTransRecargo gntr"
            sql = sql & " inner join ivrecargo ivr"
            sql = sql & " on ivr.idrecargo=gntr.idrecargo"
            sql = sql & " on gnt.codtrans= gntr.codtrans"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " left join tmp6 on gnc.transid=tmp6.transid"
            sql = sql & " inner join vwConsSUMIVKardexIVA vw ON Gnc.TransID = vw.transid "
            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " left join Anexos Ane on Gnc.TransID = Ane.Transid)"
            sql = sql & " right join pcprovcli  on gnc.IdProveedorRef=pcprovcli.idprovcli"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " and GNC.Estado<>3 " & cond
            
            sql = sql & " union all "
            
            sql = sql & " Select  GNC.TransID, Ane.FechaAnexos, GNC.FechaTrans, pcprovcli.ruc,"
            sql = sql & " GNC.Nombre, Ane.CodCredTrib, Ane.CodTipoComp, Ane.NumAutSRI,"
            sql = sql & " case when SUBSTRING(gnt.OPCION,31,1)='N'THEN gnt.NumSerieEstablecimiento else Ane.NumSerie end as NumSerie, Ane.NumSecuencial, GNC.Descripcion,"
            sql = sql & " Case Ane.BandDevolucion WHEN 0 THEN 'N' ELSE 'S' END AS BandDev,"
            sql = sql & " Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as Trans,"
            sql = sql & " Gnc.CodTrans as Transa, Gnc.NumTrans as NumTransa,"
            sql = sql & " Case vw.CostoTotalBase0 When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBase0 + (vw.CostoTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))) ) end As Valor0, "
            sql = sql & " Case vw.CostoTotalBaseIVA When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseIVA + (vw.CostoTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) end AS Valor12, 0 AS ValorNOIVA, "
            sql = sql & " Case vw.CostoTotal When 0 then 0 else "
            sql = sql & " vw.SignoCompra  * (vw.CostoTotal + (vw.CostoTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))))  End AS CostoTotal,  "
            sql = sql & " ane.NumSerieEstablecimiento ,case when SUBSTRING(gnt.OPCION,31,1)='N'THEN gnt.NumSeriePunto else ane.NumSeriePunto end as NumSeriePunto,ane.FechaCaducidad, "
            sql = sql & " 0 as BASEice, '' as CodICE , 0 as ValorICE, pcprovcli.TipoProvcli, CodFormaPagoSRI, BandFactElec"
            sql = sql & " from    (( t0 Right join gncomprobante Gnc "
            sql = sql & " inner join gntrans gnt"
            sql = sql & " inner join GNTransRecargo gntr"
            sql = sql & " inner join ivrecargo ivr"
            sql = sql & " on ivr.idrecargo=gntr.idrecargo"
            sql = sql & " on gnt.codtrans= gntr.codtrans"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " left join tmp6 on gnc.transid=tmp6.transid"
            sql = sql & " inner join vwConsSUMAFKardexIVA vw ON Gnc.TransID = vw.transid "
            sql = sql & " ON t0.TransID = Gnc.TransID))"
            sql = sql & " left join Anexos Ane on Gnc.TransID = Ane.Transid"
            sql = sql & " right join pcprovcli  on gnc.IdProveedorRef=pcprovcli.idprovcli"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.Usuario1) & ")"
            sql = sql & " and GNC.Estado<>3 " & cond
            
            
            
            
            VerificaExistenciaTabla 1
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            '-- datos de las retenciones
            
            
            
            ' union de las tres tablas
            ' union de las tres tablas
            sql = " select  DISTINCT  a.Transid,a.FechaAnexos, a.FechaTrans, a.Transa,  a.NumTransa, "
            sql = sql & "a.RUC, a.Nombre, "
            sql = sql & " a.NumSerieEstablecimiento , a.NumSeriePunto, "
            sql = sql & " a.NumSecuencial, a.NumAutSRI, a.FechaCaducidad, "
            sql = sql & "a.CodCredTrib, a.CodTipoComp, CodFormaPagoSRI, BandFactElec, "
            sql = sql & " a.Descripcion, a.Valor0, a.Valor12, a.ValorNOIVA,  a.ValorICE, TipoProvCli "
                sql = sql & " From tmp1 a  "
            sql = sql & " order by a.CodTipoComp"

            
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANCompras2013 = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Compraspara Anexos 2013" & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 4
End Function

'AUC LISTA TRANS LISTANDO POR TIPO DE TRANS
Public Function ListaGNTrans1( _
                    Modulo As String, _
                    BandInvisibles As Boolean, _
                    BandRS As Boolean, TipoTrans As String) As Variant
    Dim sql As String, cond As String, rs As Recordset
    sql = "SELECT CodTrans, NombreTrans FROM GNTrans "
    If Len(Modulo) > 0 Then cond = cond & "Modulo='" & Modulo & "' "
    If Not BandInvisibles Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "BandVisible=" & CadenaBool(True, TipoDB)
    End If
    If Len(cond) > 0 Then sql = sql & "WHERE " & cond
    sql = sql & " AND left(GNTrans.opcion,1) = '" & TipoTrans & "'"
    sql = sql & " ORDER BY CodTrans"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaGNTrans1 = rs
    Else
        ListaGNTrans1 = MiGetRows(rs)
       rs.Close
    End If
    Set rs = Nothing
End Function
Public Function ConsGNTransErrorAlq() As Recordset
    Dim sql As String, cond As String, s As String, rs As Recordset
        sql = "select ivk.id,gnc.fechagrabado,gnc.estado,gnc.CodTrans, gnc.NumTrans,pc.nombre,iv.codinventario, ivk.cantidad,b.codbodega,ivk.idpadre "
        sql = sql & " from ivkardex ivk  inner join gncomprobante gnc inner join pcprovcli pc on pc.idprovcli = gnc.idclienteref  on ivk.transid=gnc.transid "
        sql = sql & " inner join ivinventario iv "
        sql = sql & " on ivk.idinventario=iv.idinventario "
        sql = sql & " INNER JOIN IVBodega b on b.idbodega=ivk.idbodega "
        sql = sql & " WHERE ivk.idpadresub = 0 AND gnc.codtrans  IN (" & gobjCond.CodTrans & ")"
        If Len(gobjCond.CodPC1) > 0 Then sql = sql & " AND pc.codprovcli  = '" & gobjCond.CodPC1 & "'"
        If gobjCond.NumTrans1 > 0 Then sql = sql & " AND gnc.NUMTRANS > = " & gobjCond.NumTrans1
        If gobjCond.NumTrans2 > 0 Then sql = sql & " AND gnc.NUMTRANS < = " & gobjCond.NumTrans2
        sql = sql & " AND FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB)
        sql = sql & " AND gnc.estado <> 3"
        sql = sql & " AND b.codbodega = '" & gobjCond.CodBodega1 & "'"
        sql = sql & " order by gnc.fechagrabado,iv.codinventario, gnc.CodTrans, gnc.NumTrans"
       Set rs = Me.OpenRecordset(sql)
        Set ConsGNTransErrorAlq = rs
        Set rs = Nothing
        Me.GrabaGNLogAccion "CONSULTA", "Consulta Trans Erradas " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function
Public Function ListaAsistencia(ByVal CodEmpleado As String, ByVal fecha1 As Date, ByVal fecha2 As Date) As Variant
Dim idG As Integer
    Dim cond As String
    Dim rs As Recordset, sql As String
    cond = "Where Fecha BETWEEN " & FechaYMD(fecha1, mProps.TipoDB) & " AND " & FechaYMD(fecha2, mProps.TipoDB)
    If Len(CodEmpleado) > 0 Then
        cond = cond & " And pc.codprovcli = '" & CodEmpleado & "'"
    End If
    sql = "SELECT a.IdJornada,pC.nombre,A.Fecha,a.Hora,a.Secuencia, a.Horaturno  "
    sql = sql & " FROM Empleado pc INNER JOIN RAsistencia a ON a.IdEmpleado = pc.IdProvCli "
    sql = sql & cond
    sql = sql & " Order by fecha,hora,pc.nombre"
    Set rs = Me.OpenRecordset(sql)
        Set ListaAsistencia = rs
   Set rs = Nothing
End Function
Public Function RecuperarJornadaResumido(key As Variant) As ClsJornada
    Dim nuevo As ClsJornada              ' dimenciona el objeto
    Set nuevo = New ClsJornada        ' crea instancia
    Set nuevo.objEmpresa = Me                    ' asignando padre desde el objeto
    nuevo.recuperarResumido key
    Set RecuperarJornadaResumido = nuevo
    Set nuevo = Nothing                     ' borra instancia
End Function

Public Function ConsANClientesProv2013(BandCliente As Boolean) As Variant
    Dim sql As String, cond As String, rs As Recordset
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    cond = IIf(BandCliente, _
            "PCProvCli.BandCliente=" & CadenaBool(True, gobjMain.EmpresaActual.TipoDB), _
            "PCProvCli.BandProveedor=" & CadenaBool(True, gobjMain.EmpresaActual.TipoDB))

    'Agregado Alex: proveedores por fecha modificado
    cond = cond & " AND (PCProvCli.FechaGrabado BETWEEN " & _
                FechaYMD(gobjCond.fecha1, gobjMain.EmpresaActual.TipoDB, False) & " AND " & _
                FechaYMD(gobjCond.fecha2 + 1, gobjMain.EmpresaActual.TipoDB, False) & ")"

    If Not (Len(gobjCond.Grupo1) = 0 And Len(gobjCond.Grupo2) = 0) Then
        cond = cond & " AND (CodGrupo" & gobjCond.NumPCGrupo & " BETWEEN '" & gobjCond.Grupo1 & _
            "' AND '" & gobjCond.Grupo2 & "')"
    End If

    sql = "SELECT PCGrupo" & gobjCond.NumPCGrupo & ".CodGrupo" & gobjCond.NumPCGrupo & ", PCGrupo" & gobjCond.NumPCGrupo & _
            ".Descripcion, PCProvCli.CodProvCli, PCProvCli.RUC, PCProvCli.Nombre, " & _
            "PCProvCli.Direccion1, PCProvCli.Ciudad,  PCProvCli.Provincia, PCProvCli.Telefono1, " & _
            "PCProvCli.NumAutSRI, PCProvCli.TipoComprobante, PCProvCli.TipoDocumento,  TipoProvcli, bandrelacionado" & _
            " FROM PCGrupo" & gobjCond.NumPCGrupo & " RIGHT JOIN PCProvCli ON PCGrupo" & gobjCond.NumPCGrupo & ".IdGrupo" & gobjCond.NumPCGrupo & _
            " = PCProvCli.IdGrupo" & gobjCond.NumPCGrupo & "  WHERE "

    sql = sql & cond & " ORDER BY CodGrupo" & gobjCond.NumPCGrupo & ", PCProvCli.Nombre"
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANClientesProv2013 = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Clientes/Proveedores para Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
End Function


Public Function ConsANReembolsoCompras2013() As Variant
    Dim pck As PCKardex, pcd As PCDocAsignado
    Dim objGnComp As GNComprobante, objGnCompDocOriginal As GNComprobante
    Dim sql As String, cond As String, CadenaValores As String
    Dim Recargo As String 'CadenaAgrupa  As String
    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
    Dim from As String, numReg As Long
    Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
    Dim Servicios As String, Bienes As String, RowRet As Long
    Const COL_BASESER = 15
    'segunda parte de la consulta: carga los valores de  Detalles de Anexos
    Const COL_FECHA = 2
    Const COL_CODCREDTRIB = 7
    Const COL_TRANSID = 1
    Const COL_TRANSRET = 5
    Dim condServ As String
    Dim condBien As String
    
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   
    With gobjCond
        
            cond = " AND (GNC.FechaTrans  BETWEEN " & _
                    FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                    FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            
            
            sql = "select"
            sql = sql & " gnc.fechatrans, codtrans, numtrans, pc.nombre, pc.ruc,"
            sql = sql & " IDComp, IdTipoDoc, rgk.RUC, NumEstab, rgk.NumPunto, Secuencial,"
            sql = sql & " FechaEmision , Autorizacion, Base0, BaseIVA, BaseNOIVA, MontoICE, MontoIVA"
            sql = sql & " from gncomprobante gnc"
            sql = sql & " inner join rgkardex rgk"
            sql = sql & " on gnc.transid=rgk.transid"
            sql = sql & " inner join pcprovcli pc on gnc.idproveedorref=pc.idprovcli"
            sql = sql & " where  gnc.estado <>3 and GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")" & cond
            
            
            
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANReembolsoCompras2013 = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Reembolso Compras para Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 4
End Function


Public Function ConsANVentasEsta2013() As Variant
    Dim pck As PCKardex, pcd As PCDocAsignado
    Dim objGnComp As GNComprobante, objGnCompDocOriginal As GNComprobante
    Dim sql As String, cond As String, CadenaValores As String
    Dim Recargo As String 'CadenaAgrupa  As String
    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
    Dim from As String, numReg As Long, f1 As String
    Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
    Dim Servicios As String, Bienes As String, RowRet As Long
    Const COL_BASESER = 15
    'segunda parte de la consulta: carga los valores de  Detalles de Anexos
    Const COL_FECHA = 2
    Const COL_CODCREDTRIB = 7
    Const COL_TRANSID = 1
    Const COL_TRANSRET = 5
    Dim condServ As String
    Dim condBien As String
    
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   
    With gobjCond
        'Reporte de un mes a la vez
        f1 = DateSerial(Year(.fecha1), Month(.fecha1), 1)
        cond = " AND GNC.FechaTrans BETWEEN " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & _
               " AND " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB)
        
           
            VerificaExistenciaTabla 0
            VerificaExistenciaTabla 1
            VerificaExistenciaTabla 2
            VerificaExistenciaTabla 3
            
            sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as TotalDescuento Into tmp0 " & _
                    "From IvRecargo ivR inner join " & _
                        "IvKardexRecargo ivkR Inner join " & _
                            "GnComprobante gNc  inner join gntrans gnt on gnc.codtrans=gnt.codtrans  " & _
                        "On ivkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = IvkR.IdRecargo "
            sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.Sucursal) & ") " & cond
            '" AND GNC.CodTrans IN (" & PreparaCadena(.CodGrupo) & ")"
            sql = sql & " AND  gnt.AnexoCodTipoComp in (" & PreparaCadena(.CodBanco2) & ") "
            sql = sql & " AND  AnexoCodTipoTrans in (" & PreparaCadena(.CodBanco1) & ") "
            sql = sql & " Group by IvkR.TransID"
                  
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg

'--datos de indices
            VerificaExistenciaTabla 3
            sql = " Select  DISTINCT GNC.IdClienteRef AS FC_id, GNC_b.IdClienteRef AS rtp_id1, "
            sql = sql & " CASE WHEN GNC_b.IdClienteRef=0 THEN PCK_b.IdProvcli WHEN GNC_b.IdClienteRef<>0 THEN GNC_b.IdClienteRef end as rtp_id "
            sql = sql & " Into tmp3"
            sql = sql & " From    (gncomprobante GNC Inner join pckardex pck_a ON GNC.TransID = pck_a.TransID ) INNER JOIN"
            sql = sql & "  (gncomprobante GNC_b Inner join pckardex pck_B ON GNC_b.TransID = pck_B.TransID )"
            sql = sql & " ON  PCK_A.ID = PCK_B.IDASIGNADO"
            sql = sql & " where GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
            sql = sql & " AND GNC_b.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion2) & ")"
            sql = sql & " AND (GNC.FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = sql & " and GNC.Estado<>3 and GNC.IdClienteRef<>0 and GNC_b.IdClienteRef<>0 "
            
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            '--datos de la Venta
            
            
            sql = " Select gns.codsucursal, NumEstablecimiento, count(Gnc.NumTrans) as cantTrans,  gnt.AnexoCodTipoComp , "
'            sql = sql & "  CASE WHEN SUM(vw.PrecioTotal)<>0 THEN sum( (vw.PrecioTotalBase0 + (vw.PrecioTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float))) ))*-1 END As Valor0,"
'            sql = sql & "  CASE WHEN SUM(vw.PrecioTotal)<>0 THEN sum( (vw.PrecioTotalBaseIVA + (vw.PrecioTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1 END AS Valor12,"
'            sql = sql & " 0 AS ValorNO12,"
'            sql = sql & "  CASE WHEN SUM(vw.PrecioTotal)<>0 THEN sum( (vw.PrecioTotal + (vw.PrecioTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1 END  AS PrecioTotal "
            
            sql = sql & "  case when gnt.AnexoCodTipoComp='4' then"
            sql = sql & "  CASE WHEN SUM(vw.PrecioTotal)<>0 THEN sum( (vw.PrecioTotalBase0 + (vw.PrecioTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float))) )) end"
            sql = sql & "  Else"
            sql = sql & "  CASE WHEN SUM(vw.PrecioTotal)<>0 THEN sum( (vw.PrecioTotalBase0 + (vw.PrecioTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float))) ))*-1"
            sql = sql & "  end END As Valor0,"
            sql = sql & "  case when gnt.AnexoCodTipoComp='4' then"
            sql = sql & "  CASE WHEN SUM(vw.PrecioTotal)<>0 THEN sum( (vw.PrecioTotalBaseIVA + (vw.PrecioTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float))))) end"
            sql = sql & "  Else"
            sql = sql & "  CASE WHEN SUM(vw.PrecioTotal)<>0 THEN sum( (vw.PrecioTotalBaseIVA + (vw.PrecioTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1 END"
            sql = sql & "  end AS Valor12,"
            sql = sql & "  0 AS ValorNO12,"
            sql = sql & "  case when gnt.AnexoCodTipoComp='4' then"
            sql = sql & "  CASE WHEN SUM(vw.PrecioTotal)<>0 THEN sum( (vw.PrecioTotal + (vw.PrecioTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float))))) END"
            sql = sql & "  Else"
            sql = sql & "  CASE WHEN SUM(vw.PrecioTotal)<>0 THEN sum( (vw.PrecioTotal + (vw.PrecioTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1 END  end"
            sql = sql & "  AS PrecioTotal"
            
            
            sql = sql & " Into tmp1"
            sql = sql & " from    ("
            sql = sql & " tmp0"
            sql = sql & " Right join gncomprobante Gnc "
            sql = sql & " inner join gntrans gnt "
            sql = sql & " inner join gnsucursal gns on gnt.idsucursal = gns.idsucursal"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            'sql = sql & " INNER JOIN PCPROVClI pc ON GNC.IdClienteRef=pc.idprovcli "
            
            If InStr(1, mProps.CodEmpresa, "CADI") > 0 Or InStr(1, mProps.CodEmpresa, "ENCO") Or InStr(1, mProps.CodEmpresa, "MASKE") Then
                sql = sql & " inner join vwConsSUMIVKardexIVA2Bod vw"
            Else
                sql = sql & " inner join vwConsSUMIVKardexIVA vw"
            End If
            
            sql = sql & " ON Gnc.TransID = vw.transid"
            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " where  1=1 "
            'GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
            'sql = sql & " pc.bandempresapublica=0"
            sql = sql & " AND  gnt.AnexoCodTipoComp in (" & PreparaCadena(.CodBanco2) & ") "
            sql = sql & " AND  AnexoCodTipoTrans in (" & PreparaCadena(.CodBanco1) & ") "
            sql = sql & " AND  vw.preciototal <> 0 " 'AUC agregado solo manda los que tiene precio <> 0
            
            sql = sql & " and GNC.Estado<>3 " & cond
            sql = sql & " group by  gns.codsucursal, NumEstablecimiento, gnt.AnexoCodTipoComp   "
            
            
            
            VerificaExistenciaTabla 1
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            ' union de las tres tablas
            sql = "SELECT DISTINCT " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB) & " as Fecha, "
            sql = sql & " codsucursal, NumEstablecimiento, '' as a, "
''            sql = sql & "  isnull(a.cantTrans,0),
''            sql = sql & "  isnull(a.Valor0*-1,0)  as Valor0, "
''            sql = sql & " isnull(a.Valor12*-1,0) as Valor12, "
''            sql = sql & " isnull(a.ValorNO12*-1,0) as ValorNO12 "
            
            sql = sql & " isnull(sum(a.cantTrans),0),"
            sql = sql & " isnull(sum(a.Valor0)*-1,0)  as Valor0,"
            sql = sql & " isnull(sum(a.Valor12)*-1,0) as Valor12,"
            sql = sql & " isnull(Sum(a.ValorNO12) * -1, 0) As ValorNO12"

            sql = sql & " From tmp1 a  "
            sql = sql & " group by codsucursal, NumEstablecimiento"
            sql = sql & " order by a.NumEstablecimiento "
    
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANVentasEsta2013 = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons VentasEst para Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 4

End Function


Public Function ConsANRetencionCompras2013() As Variant
    Dim pck As PCKardex, pcd As PCDocAsignado
    Dim objGnComp As GNComprobante, objGnCompDocOriginal As GNComprobante
    Dim sql As String, cond As String, CadenaValores As String
    Dim Recargo As String 'CadenaAgrupa  As String
    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
    Dim from As String, numReg As Long
    Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
    Dim Servicios As String, Bienes As String, RowRet As Long
    Const COL_BASESER = 15
    'segunda parte de la consulta: carga los valores de  Detalles de Anexos
    Const COL_FECHA = 2
    Const COL_CODCREDTRIB = 7
    Const COL_TRANSID = 1
    Const COL_TRANSRET = 5
    Dim condServ As String
    Dim condBien As String
    
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   
    With gobjCond
        
            cond = " AND (GNC.FechaTrans  BETWEEN " & _
                    FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                    FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            
'            If Len(.Usuario1) > 0 Or Len(.Usuario2) > 0 Then
'                   cond = cond & " AND pcprovcli.CodProvCli  BETWEEN  '" & .Usuario1 & "' AND '" & .Usuario2 & "' "
'            End If
            
            VerificaExistenciaTabla 0
            VerificaExistenciaTabla 1
            VerificaExistenciaTabla 2
            VerificaExistenciaTabla 3
            VerificaExistenciaTabla 4
            VerificaExistenciaTabla 5
            VerificaExistenciaTabla 6
            
            VerificaExistenciaTablaTemp "t0"
            
            sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as TotalDescuento Into tmp0 " & _
                    "From IvRecargo ivR inner join " & _
                        "IvKardexRecargo ivkR Inner join " & _
                            "GnComprobante gNc  " & _
                        "On ivkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = IvkR.IdRecargo "
            sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.CodForma) & ") " & cond & _
                    " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")" & _
                  "Group by IvkR.TransID"
                  
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            VerificaExistenciaTablaTemp "t0"
            sql = "Select AfkR.TransID, SUM(AfkR.Valor) as TotalDescuento Into t0 " & _
                    "From IvRecargo ivR inner join " & _
                        "AFKardexRecargo AfkR Inner join " & _
                            "GnComprobante gNc  " & _
                        "On afkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = AfkR.IdRecargo "
            sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.CodForma) & ") " & cond & _
                    " AND GNC.CodTrans IN (" & PreparaCadena(.Usuario1) & ")" & _
                  "Group by afkR.TransID"
            
                  
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            
            'VerificaExistenciaTablaTemp "t0"
            
            'jeaa 09/01/2007
            'datos ICE
            sql = " Select Ivkr.TransID, "
            sql = sql & " SUM(IVK.CostoRealTotal) AS BASEice,"
            sql = sql & " MAX(IVC.CodICE) AS CodICE, SUM(ivkr.Valor) As ValorICE"
            sql = sql & " Into tmp6"
            sql = sql & " From IvRecargo ivR"
            sql = sql & " inner join IvKardexRecargo ivkR"
            sql = sql & " INNER JOIN IVKARDEX IVK"
            sql = sql & " INNER JOIN IVINVENTARIO IV"
            sql = sql & " INNER JOIN IVRECARGOICE IVC"
            sql = sql & " ON IV.IDICE=IVC.IDICE"
            sql = sql & " ON IVK.IDINVENTARIO=IV.IDINVENTARIO"
            sql = sql & " ON IVKR.TRANSID=IVK.TRANSID"
            sql = sql & " Inner join GnComprobante gNc"
            sql = sql & " On ivkr.TransID = gNc.TransID"
            sql = sql & " On Ivr.IdRecargo = IvkR.IdRecargo"
            sql = sql & " Where gnc.Estado <> 3"
            sql = sql & " AND ivr.CodRecargo IN ('" & gobjMain.EmpresaActual.GNOpcion.ObtenerValor("RecDescParaICE") & "')" & cond
            sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")"
            sql = sql & " Group by IvkR.TransID"
            
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
'--datos de indices
            VerificaExistenciaTabla 3
            sql = " Select  DISTINCT GNC.TransID AS cp_id, GNC_b.TransID AS rtp_id"
            sql = sql & " Into tmp3"
            sql = sql & " From    (gncomprobante GNC Inner join pckardex pck_a ON GNC.TransID = pck_a.TransID ) INNER JOIN"
            sql = sql & "  (gncomprobante GNC_b Inner join pckardex pck_B ON GNC_b.TransID = pck_B.TransID )"
            sql = sql & " ON  PCK_A.ID = PCK_B.IDASIGNADO"
            'sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            If Len(gobjMain.objCondicion.Usuario1) > 0 Then
                sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(gobjMain.objCondicion.CodTrans) + "," + PreparaCadena(gobjMain.objCondicion.Usuario1) & ")"
            Else
                sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(gobjMain.objCondicion.CodTrans) + "," + PreparaCadena(gobjMain.objCondicion.Usuario1) & ")"
            End If
            
            sql = sql & " AND GNC_b.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion1) & ")"
            
            sql = sql & " AND (GNC.FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = sql & " and GNC.Estado<>3 and GNC_b.estado<>3 "
            
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            '--datos de la compra
            sql = " Select  GNC.TransID, GNC.FechaTrans, pcprovcli.ruc,"
            sql = sql & " GNC.Nombre, "
            sql = sql & " GNC.Descripcion,"
            sql = sql & " Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as Trans,"
            sql = sql & " Gnc.CodTrans as Transa, Gnc.NumTrans as NumTransa,"
            sql = sql & " Case vw.CostoTotalBase0 When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBase0 + (vw.CostoTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))) ) end As Valor0, "
            sql = sql & " Case vw.CostoTotalBaseIVA When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseIVA + (vw.CostoTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) end AS Valor12, "
            sql = sql & " Case vw.CostoTotal When 0 then 0 else "
            sql = sql & " vw.SignoCompra  * (vw.CostoTotal + (vw.CostoTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))))  End AS CostoTotal,  "
            sql = sql & " tmp6.BASEice, tmp6.CodICE ,tmp6.ValorICE"
            sql = sql & " Into tmp1"
            sql = sql & " from    (( tmp0 Right join gncomprobante Gnc "
            sql = sql & " inner join gntrans gnt"
            sql = sql & " inner join GNTransRecargo gntr"
            sql = sql & " inner join ivrecargo ivr"
            sql = sql & " on ivr.idrecargo=gntr.idrecargo"
            sql = sql & " on gnt.codtrans= gntr.codtrans"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " left join tmp6 on gnc.transid=tmp6.transid"
            sql = sql & " inner join vwConsSUMIVKardexIVA vw ON Gnc.TransID = vw.transid "
            sql = sql & " ON tmp0.TransID = Gnc.TransID))"
            sql = sql & " right join pcprovcli  on gnc.IdProveedorRef=pcprovcli.idprovcli"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " and GNC.Estado<>3 " & cond
            
            sql = sql & " union all "
            
            sql = sql & " Select  GNC.TransID, GNC.FechaTrans, pcprovcli.ruc,"
            sql = sql & " GNC.Nombre, "
            sql = sql & " GNC.Descripcion,"
            sql = sql & " Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as Trans,"
            sql = sql & " Gnc.CodTrans as Transa, Gnc.NumTrans as NumTransa,"
            sql = sql & " Case vw.CostoTotalBase0 When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBase0 + (vw.CostoTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))) ) end As Valor0, "
            sql = sql & " Case vw.CostoTotalBaseIVA When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseIVA + (vw.CostoTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) end AS Valor12, "
            sql = sql & " Case vw.CostoTotal When 0 then 0 else "
            sql = sql & " vw.SignoCompra  * (vw.CostoTotal + (vw.CostoTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))))  End AS CostoTotal,  "
            sql = sql & " 0 as BASEice, '0' as CodICE , 0 as ValorICE"

            sql = sql & " from    (( t0 Right join gncomprobante Gnc "
            sql = sql & " inner join gntrans gnt"
            sql = sql & " inner join GNTransRecargo gntr"
            sql = sql & " inner join ivrecargo ivr"
            sql = sql & " on ivr.idrecargo=gntr.idrecargo"
            sql = sql & " on gnt.codtrans= gntr.codtrans"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " left join tmp6 on gnc.transid=tmp6.transid"
            sql = sql & " inner join vwConsSUMAFKardexIVA vw ON Gnc.TransID = vw.transid "
            sql = sql & " ON t0.TransID = Gnc.TransID))"
            sql = sql & " right join pcprovcli  on gnc.IdProveedorRef=pcprovcli.idprovcli"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.Usuario1) & ")"
            sql = sql & " and GNC.Estado<>3 " & cond
            
            VerificaExistenciaTabla 1
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            '-- datos de las retenciones
            
            sql = " "
            
            
             For i = 1 To 3
             
                sql = sql & " select GNC.TransID, Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as TransRet,"
                sql = sql & " sum(ts_ret.base) as Base, "
                sql = sql & " CASE WHEN BANDIVA=1 THEN  "
                Select Case i
                Case 1
                    sql = sql & " 'IVA_BIE' "
                Case 2
                    sql = sql & "  'IVA_SER'  "
                Case 3
                    sql = sql & "  'IVA_100'  "
                End Select
                
                sql = sql & " ELSE MAX(ir.CodRetencion) END as Cod,"
                sql = sql & " sum(ts_ret.Debe+ts_ret.Haber) as Valor ,"
                sql = sql & " NumSerieEstablecimiento, NumSeriePunto ,"
                If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosRetencion")) > 0 Then
                    If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosRetencion") > 0 Then
                        sql = sql & " gnc.NumDocRef as NumeroTrans , "
                    Else
                        sql = sql & " gnc.NumTrans as NumeroTrans, "
                    End If
                Else
                    sql = sql & " gnc.NumTrans as NumeroTrans, "
                End If

                If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion")) > 0 Then
                    If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion") > 0 Then
                        sql = sql & " gnc.AutorizacionSRI as NumAutorizacion , "
                    Else
                        sql = sql & " gnt.NumAutorizacion as NumAutorizacion, "
                    End If
                Else
                    sql = sql & " gnt.NumAutorizacion as NumAutorizacion, "
                End If
                sql = sql & " gnc.FechaTRans, BANDIVA"
                If i = 1 Then
                sql = sql & " into tmp2 "
                End If
                
                
                sql = sql & " from    gntrans gnt"
                sql = sql & " inner join gncomprobante Gnc"
                sql = sql & " inner join (tskardexret ts_ret"
                sql = sql & " inner join tsretencion tsr left join Anexos_Retencion_IR ir on tsr.idanexo=ir.id on ts_ret.IdRetencion = tsr.IdRetencion )"
                sql = sql & " on GNC.TransID=ts_ret.TransID"
                sql = sql & " on gnc.codtrans=gnt.codtrans"
                sql = sql & " WHERE GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion1) & ")"
                sql = sql & " and GNC.Estado<>3"
                Select Case i
                Case 1
                    sql = sql & " and tsr.CodRetencion in "
                    sql = sql & " (" & PreparaCadena(gobjCond.Bienes) & ")"
                    sql = sql & " and tsr.Porcentaje<>1"
                Case 2
                    sql = sql & " and tsr.CodRetencion in "
                    sql = sql & " (" & PreparaCadena(gobjCond.Servicios) & ")"
                    sql = sql & " and tsr.Porcentaje<>1"
                Case 3
                    sql = sql & " and (tsr.CodRetencion in "
                    sql = sql & " (" & PreparaCadena(gobjCond.Bienes) & ")"
                    sql = sql & " OR tsr.CodRetencion in"
                    sql = sql & " (" & PreparaCadena(gobjCond.Servicios) & "))"
                    sql = sql & " and tsr.Porcentaje=1"
                End Select
                
                sql = sql & " Group By ts_ret.TransID, GNC.TransId, GNC.CodTrans,"
                sql = sql & " GnC.NumTrans, NumSerieEstablecimiento, NumSeriePunto,"
                sql = sql & " gnc.NumDocRef ,  gnc.FechaTrans, "
                If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion")) > 0 Then
                    If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion") > 0 Then
                        sql = sql & " gnc.AutorizacionSRI   "
                    Else
                        sql = sql & " gnt.NumAutorizacion  "
                    End If
                Else
                    sql = sql & " gnt.NumAutorizacion  "
                End If
                
                sql = sql & " ,tsr.Porcentaje, BANDIVA"
                sql = sql & " union all "
                
            Next i

            sql = sql & " select  GNC.TransID, Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as TransRet,"
            sql = sql & " (ts_ret.base) as Base,"
            sql = sql & " CASE WHEN BANDIVA=1 THEN  'BIENES'  ELSE (ir.CodRetencion) END as Cod,"
            sql = sql & " (ts_ret.Debe+ts_ret.Haber) as Valor ,"
            sql = sql & " NumSerieEstablecimiento, NumSeriePunto ,"
                If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosRetencion")) > 0 Then
                    If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosRetencion") > 0 Then
                        sql = sql & " gnc.NumDocRef as NumeroTrans , "
                    Else
                        sql = sql & " gnc.NumTrans as NumeroTrans, "
                    End If
                Else
                    sql = sql & " gnc.NumTrans as NumeroTrans, "
                End If

                If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion")) > 0 Then
                    If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion") > 0 Then
                        sql = sql & " gnc.AutorizacionSRI as NumAutorizacion , "
                    Else
                        sql = sql & " gnt.NumAutorizacion as NumAutorizacion, "
                    End If
                Else
                    sql = sql & " gnt.NumAutorizacion as NumAutorizacion, "
                End If
           
            sql = sql & "  gnc.FechaTRans, BANDIVA"
            sql = sql & " from    gntrans gnt"
            sql = sql & " inner join gncomprobante Gnc"
            sql = sql & " inner join (tskardexret ts_ret"
            sql = sql & " inner join tsretencion tsr left join Anexos_Retencion_IR ir on tsr.idanexo=ir.id on ts_ret.IdRetencion = tsr.IdRetencion )"
            sql = sql & " on GNC.TransID=ts_ret.TransID"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " WHERE GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion1) & ")"
            sql = sql & " and GNC.Estado<>3"
            sql = sql & " and (tsr.CodRetencion NOT in "
            sql = sql & " (" & PreparaCadena(gobjCond.Bienes) & ")"
            sql = sql & " AND tsr.CodRetencion NOT in"
            sql = sql & " (" & PreparaCadena(gobjCond.Servicios) & "))"





            VerificaExistenciaTabla 2
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg

            
            
            
            
            
            
            ' union de las tres tablas
            ' union de las tres tablas
            sql = " select  DISTINCT  "
            sql = sql & " CASE When BandIVA=1 then 'IVA' else 'RENTA' end as IVA, b.Cod, "
            sql = sql & "  a.TransID, a.FechaTrans, a.Transa, a.NumTransa, "
            sql = sql & "  a.RUC, a.Nombre, "
            sql = sql & "  b.TransRet as TransRet,"
            sql = sql & "  b.FechaTrans As FechaTrans, "
            sql = sql & "  b.NumSerieEstablecimiento as NumSerieEstablecimiento,"
            sql = sql & "  b.NumSeriePunto NumSeriePunto ,"
            sql = sql & "  b.NumeroTrans as NumTrans,"
            sql = sql & "  b.NumAutorizacion as NumAutorizacion,"
            sql = sql & " b.Base ,  b.valor "
            sql = sql & " From tmp1 a  inner join tmp2 b right join tmp3 c  on b.Transid=c.rtp_id on a.Transid=c.cp_id"
            'sql = sql & " order by  CASE When BandIVA=1 then 'IVA' else 'RENTA' end, b.Cod, a.Transa,  a.NumTransa "

            '--datos de la compra sin retencion
            sql = sql & " union all "
            sql = sql & " Select  DISTINCT 'RENTA' as IVA, ane.CodTipoRetencion, GNC.TransID, "
            sql = sql & " GNC.FechaTrans,  gnc.codtrans, gnc.numtrans, pcprovcli.ruc, GNC.Nombre, "
            sql = sql & " '' as transret, GNC.FechaTrans, "
            sql = sql & " '' as NumSerieEstablecimiento, '' as NumSeriePunto , '' as NumTrans, '' NumAutorizacion, "
            sql = sql & " Case vw.CostoTotal When 0 then 0 else "
            sql = sql & " vw.SignoCompra  * (vw.CostoTotal + (vw.CostoTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))))- CostoTotalBaseNOIVA  End AS CostoTotal,  "
            sql = sql & " 0  as valorRetenido "
            sql = sql & " from    (( tmp0 Right join gncomprobante Gnc "
            sql = sql & " inner join gntrans gnt"
            sql = sql & " inner join GNTransRecargo gntr"
            sql = sql & " inner join ivrecargo ivr"
            sql = sql & " on ivr.idrecargo=gntr.idrecargo"
            sql = sql & " on gnt.codtrans= gntr.codtrans"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " left join tmp6 on gnc.transid=tmp6.transid"
            sql = sql & " inner join vwConsSUMIVKardexIVA vw ON Gnc.TransID = vw.transid "
            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " inner join Anexos Ane on Gnc.TransID = Ane.Transid)"
            sql = sql & " right join pcprovcli  on gnc.IdProveedorRef=pcprovcli.idprovcli"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " and GNC.Estado<>3 and BandCompraSinRetencion=1 " & cond
            sql = sql & " order by  CASE When BandIVA=1 then 'IVA' else 'RENTA' end, b.Cod, a.Transa,  a.NumTransa "
            
            
            
            
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANRetencionCompras2013 = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Retencion Compras para Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 4
End Function


Public Function ConsANRetencionVentas2013() As Variant
    Dim pck As PCKardex, pcd As PCDocAsignado
    Dim objGnComp As GNComprobante, objGnCompDocOriginal As GNComprobante
    Dim sql As String, cond As String, CadenaValores As String
    Dim Recargo As String 'CadenaAgrupa  As String
    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
    Dim from As String, numReg As Long, f1 As String
    Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
    Dim Servicios As String, Bienes As String, RowRet As Long
    Const COL_BASESER = 15
    'segunda parte de la consulta: carga los valores de  Detalles de Anexos
    Const COL_FECHA = 2
    Const COL_CODCREDTRIB = 7
    Const COL_TRANSID = 1
    Const COL_TRANSRET = 5
    Dim condServ As String
    Dim condBien As String
    
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   
    With gobjCond
        'Reporte de un mes a la vez
        f1 = DateSerial(Year(.fecha1), Month(.fecha1), 1)
        cond = " AND GNC.FechaTrans BETWEEN " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & _
               " AND " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB)
        
           
            VerificaExistenciaTabla 0
            
            
            '-- datos de las retenciones
            
            sql = " "
            
            
             For i = 1 To 3
             
                sql = sql & " select GNC.idclienteref, Gnc.CodTrans as TransRet, BANDIVA, "
                sql = sql & " sum(ts_ret.base) as Base, "
                sql = sql & " CASE WHEN BANDIVA=1 THEN  "
                Select Case i
                Case 1
                    sql = sql & " 'IVA_BIE' "
                Case 2
                    sql = sql & "  'IVA_SER'  "
                Case 3
                    sql = sql & "  'IVA_100'  "
                End Select
                
                sql = sql & " ELSE MAX(Ir.CodRetencion) END as Cod,"
                sql = sql & " sum(ts_ret.Debe+ts_ret.Haber) as Valor"
                If i = 1 Then
                sql = sql & " into tmp0 "
                End If
                
                
                sql = sql & " from    gntrans gnt"
                sql = sql & " inner join gncomprobante Gnc"
                sql = sql & " inner join (tskardexret ts_ret"
                sql = sql & " inner join tsretencion tsr left join Anexos_Retencion_IR ir on tsr.idanexo=ir.id on ts_ret.IdRetencion = tsr.IdRetencion )"
                sql = sql & " on GNC.TransID=ts_ret.TransID"
                sql = sql & " on gnc.codtrans=gnt.codtrans"
                sql = sql & " WHERE GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion2) & ")"
                sql = sql & " and GNC.Estado<>3 " & cond
                Select Case i
                Case 1
                    sql = sql & " and tsr.CodRetencion in "
                    sql = sql & " (" & PreparaCadena(gobjCond.Bienes) & ")"
                    sql = sql & " and tsr.Porcentaje<>1"
                Case 2
                    sql = sql & " and tsr.CodRetencion in "
                    sql = sql & " (" & PreparaCadena(gobjCond.Servicios) & ")"
                    sql = sql & " and tsr.Porcentaje<>1"
                Case 3
                    sql = sql & " and (tsr.CodRetencion in "
                    sql = sql & " (" & PreparaCadena(gobjCond.Bienes) & ")"
                    sql = sql & " OR tsr.CodRetencion in"
                    sql = sql & " (" & PreparaCadena(gobjCond.Servicios) & "))"
                    sql = sql & " and tsr.Porcentaje=1"
                End Select
                 sql = sql
                sql = sql & " Group By GNC.idclienteref, GNC.CodTrans,  ir.CodRetencion, BANDIVA"
                sql = sql & " union all "
                
            Next i

            sql = sql & " select  GNC.idclienteref, Gnc.CodTrans as TransRet, BANDIVA,"
            sql = sql & " sum(ts_ret.base) as Base,"
            sql = sql & " CASE WHEN BANDIVA=1 THEN  'BIENES'  ELSE max(ir.CodRetencion) END as Cod,"
            sql = sql & " sum(ts_ret.Debe+ts_ret.Haber) as Valor "
            sql = sql & " from    gntrans gnt"
            sql = sql & " inner join gncomprobante Gnc"
            sql = sql & " inner join (tskardexret ts_ret"
            sql = sql & " inner join tsretencion tsr left join Anexos_Retencion_IR ir on tsr.idanexo=ir.id on ts_ret.IdRetencion = tsr.IdRetencion )"
            sql = sql & " on GNC.TransID=ts_ret.TransID"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " WHERE GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion2) & ")"
            sql = sql & " and GNC.Estado<>3" & cond
            sql = sql & " and (tsr.CodRetencion NOT in "
            sql = sql & " (" & PreparaCadena(gobjCond.Bienes) & ")"
            sql = sql & " AND tsr.CodRetencion NOT in"
            sql = sql & " (" & PreparaCadena(gobjCond.Servicios) & "))"
            sql = sql & " Group By GNC.idclienteref, GNC.CodTrans,  ir.CodRetencion, BANDIVA"

            VerificaExistenciaTabla 0
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            
            ' union de las tres tablas
            sql = "SELECT DISTINCT "
            sql = sql & " CASE When BandIVA=1 then 'IVA' else 'RENTA' end as IVA, b.Cod, "
            sql = sql & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB) & " as Fecha, "
            sql = sql & " a.RUC as ruc, a.Nombre as nombre,  "
            sql = sql & " b.Base, b.Valor "
            sql = sql & " From tmp0 b inner join PcProvcli a"
            sql = sql & " on b.IdClienteRef=a.IdProvcli "
            sql = sql & " order by CASE When BandIVA=1 then 'IVA' else 'RENTA' end, b.Cod "
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANRetencionVentas2013 = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Compraspara Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 4

End Function


Public Function ConsANComprobantesAnulado2013() As Variant
    Dim sql As String, cond As String, CadenaValores As String
    Dim rs As Recordset
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    
    With gobjCond
            cond = " AND (GNC.FechaTrans  BETWEEN " & _
                    FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                    FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = " select  gnc.FechaTrans, gnc.CodTrans, "
            sql = sql & " gnt.NumSerieEstablecimiento, gnt.NumSeriePunto,"
'            'jeaa 07/07/2006
            sql = sql & " case left(gnc.CodTrans,2)"
            sql = sql & " when 'FC' then "
            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura")) > 0 Then
                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura") > 0 Then
                    sql = sql & " NumDocRef  "
                Else
                     sql = sql & " NumTrans  "
                 End If
            Else
                sql = sql & " NumTrans  "
            End If
            sql = sql & " when 'FD' then "
            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura")) > 0 Then
                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura") > 0 Then
                    sql = sql & " NumDocRef  "
                Else
                     sql = sql & " NumTrans  "
                 End If
            Else
                sql = sql & " NumTrans  "
            End If
            sql = sql & " when 'FA' then "
            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura")) > 0 Then
                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura") > 0 Then
                    sql = sql & " NumDocRef  "
                Else
                     sql = sql & " NumTrans  "
                 End If
            Else
                sql = sql & " NumTrans  "
            End If
            
            sql = sql & " when 'NV' then "
            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura")) > 0 Then
                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura") > 0 Then
                    sql = sql & " NumDocRef  "
                Else
                     sql = sql & " NumTrans  "
                 End If
            Else
                sql = sql & " NumTrans  "
            End If
            sql = sql & " when 'VT' then "
            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura")) > 0 Then
                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura") > 0 Then
                    sql = sql & " NumDocRef  "
                Else
                     sql = sql & " NumTrans  "
                 End If
            Else
                sql = sql & " NumTrans  "
            End If
            
            sql = sql & " when 'RT' then "
            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosRetencion")) > 0 Then
                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosRetencion") > 0 Then
                    sql = sql & " NumDocRef "
                Else
                     sql = sql & " NumTrans  "
                End If
            Else
                sql = sql & " NumTrans  "
            End If
            sql = sql & " Else "
            sql = sql & " NumTrans "
            
            sql = sql & " end as numtrans, "
            
            
            
            'sql = sql & " numtrans, "
            
            'jeaa 12/09/2007
            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion")) > 0 Then
                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion") > 0 Then
                    sql = sql & " gnc.AutorizacionSRI as NumAutorizacion , "
                Else
                    sql = sql & " gnt.NumAutorizacion as NumAutorizacion, "
                End If
            Else
                sql = sql & " gnt.NumAutorizacion as NumAutorizacion, "
            End If
            
            sql = sql & " GNC.FechaTrans"
            sql = sql & " from gncomprobante gnc inner join gntrans gnt on gnc.codtrans=gnt.codtrans "
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodPC2) & ")"
            sql = sql & " and Estado = 3 " & cond
            sql = sql & " order by gnc.FechaTrans,gnc.codTrans "
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANComprobantesAnulado2013 = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons CompAnuladas para Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"

End Function


Public Function ConsIVTConciliacionCarcasa() As Variant
    Dim sql As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsTSConciliacion")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodBanco") = gobjCond.CodBanco1
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient

    sql = "spConsIVConciliacionCarcasa " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodBanco1 & "', " & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.FechaCorte, TipoDB)
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    ConsIVTConciliacionCarcasa = MiGetRows(rs)
    
    
    
    Set rs = Nothing
End Function
Public Sub RecuperaDatosConciliacionCarcasa(ByVal cadena As String, ByRef fecha1 As Date)
    Dim pos As Integer, v As Variant, cad As String
    If InStr(1, UCase(cadena), ":") Then
        pos = InStr(1, UCase(cadena), ":")
        cad = Mid$(cadena, pos + 2, 10)
        fecha1 = CDate(cad)
    End If
End Sub
Public Function ConsProduccion(codPC As String, codcc1 As String, codcc2 As String, LimMax As Integer) As Variant
'Limmax  para poner el limite maximo a ingresar
Dim sql As String, cond As String, s As String, rs As Recordset
Dim bandFirst As Boolean
    VerificaExistenciaTabla 1
    'saco total horas consumidas
    sql = "Select idkp,sum(numhoras)as HorasConsumidas Into Tmp1 "
    sql = sql & " From detalleproceso group by idkp "
    sql = "select gcc.idcentrodet,gc.codcentro,gcc.codcentrodet,gcc.descripciondet,"
    sql = sql & " pc.codprovcli,pc.nombre from ivkproceso p  inner join gncentrocostodetalle gcc"
   sql = sql & " inner join gncentrocosto gc "
    sql = sql & "inner join pcprovcli pc on pc.idprovcli = gc.idCliente"
    sql = sql & " on gc.idcentro = gcc.idcentro"
    sql = sql & " on gcc.idcentrodet= p.idcentrodet"
    sql = sql & " Where gc.fechafinaL is Null"
    If Len(codPC) > 0 Then
        cond = " And pc.codprovcli = '" & codPC & "'"
        'bandFirst = True
    End If
    If Len(codcc1) > 0 And Len(codcc2) > 0 Then
        'If bandFirst = True Then
          '  cond = " AND"
        'Else
         '   cond = " WHERE"
        'End If
             cond = cond & " AND gc.codcentro between '" & codcc1 & "' and '" & codcc2 & "'"
   End If
sql = sql & cond
sql = sql & " group by gc.codcentro,gcc.codcentrodet,gcc.descripciondet,pc.codprovcli,pc.nombre,gcc.idcentrodet"
Set rs = Me.OpenRecordset(sql)
    Set ConsProduccion = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons. Procesos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "IV"
End Function


Public Function ListaFichas(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT idFicha,Historia,Cedula,Nombre,Direccion,Telefono  FROM Ficha"
    sql = sql & " ORDER BY Nombre"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaFichas = rs
    Else
        ListaFichas = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function
Public Function CreaPCFicha() As Ficha
    Dim obj As Ficha
    Set obj = New Ficha
    Set obj.objEmpresa = Me
    Set CreaPCFicha = obj
    Set obj = Nothing
End Function
Public Function RecuperaPCFicha(key As Variant) As Ficha
    Dim obj As Ficha
    Set obj = New Ficha
    Set obj.objEmpresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaPCFicha = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function


Public Function ConsGNTransVentas() As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    '*** MAKOTO 03/oct/00
    sql = "SELECT"
    '*** MAKOTO 05/feb/01 Mod. Aumentado 'NumDocRef' y 'Nombre'
    sql = sql & " vwConsGNTrans.TransID, vwConsGNTrans.FechaTrans,  vwConsGNTrans.HoraTrans,vwConsGNTrans.CodTrans, "
    sql = sql & " vwConsGNTrans.NumTrans,  vwConsGNTrans.codVendedor, "
    sql = sql & " vwConsGNTrans.Nombre,"
    sql = sql & " (vwConsGNTrans.PrecioRealTotal * signo) +IVA,  CODFORMA, "
    sql = sql & " codusuario, bandcierre,  "
    sql = sql & " case vwConsGNTrans.Estado when '0' THEN 'NO CONT' when '1' THEN 'APROV' when '2' THEN 'DESPA' when '3' THEN 'ANULA' when '4' THEN 'SEM DESP' END AS estadoL "
    sql = sql & "  FROM vwConsGNTransPrecios as vwConsGNTrans "
    'Condición de FechaTrans
    cond = "vwConsGNTrans.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB)
   'Condición de CodTrans
    If Len(cond) > 0 Then cond = cond & " AND "
    If Len(gobjCond.CodTrans) > 0 Then      'Si está especificado transaccion
        'Si es una sola transaccion
        If InStr(gobjCond.CodTrans, ",") = 0 Then
            cond = cond & "(vwConsGNTrans.CodTrans='" & gobjCond.CodTrans & "')"
        'Si está seleccionado varias trans.
        Else
            cond = cond & "(vwConsGNTrans.CodTrans IN (" & gobjCond.CodTrans & "))"
        End If
    Else
        'Si no hay condicion de cod.trans, selecciona todas las trans.
        ' que tenga permiso
        s = gobjMain.GrupoActual.PermisoActual.ListaTrans(True)
        If Len(s) > 0 Then
            cond = cond & "(vwConsGNTrans.CodTrans " & s & ")"
        Else
            cond = cond & "(vwConsGNTrans.CodTrans = '-------')"    'Para que NO devuelva nada si no tiene ningún permiso  '*** MAKOTO 26/dic/00
        End If
    End If
    'Condición de NumTrans
    If (gobjCond.NumTrans1 > 0) And (gobjCond.NumTrans2 > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.NumTrans BETWEEN " & gobjCond.NumTrans1 & " AND " & gobjCond.NumTrans2 & ")"
    ElseIf gobjCond.NumTrans1 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.NumTrans>=" & gobjCond.NumTrans1 & ")"
    ElseIf gobjCond.NumTrans2 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.NumTrans<=" & gobjCond.NumTrans2 & ")"
    End If
    'Condición de Estado
    If gobjCond.EstadoBool(ESTADO_NOAPROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.Estado<>" & ESTADO_NOAPROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_APROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.Estado<>" & ESTADO_APROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_DESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.Estado<>" & ESTADO_DESPACHADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_ANULADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.Estado<>" & ESTADO_ANULADO & ")"
    End If
    '----------------------------------------
    '----- CAO 13/06/2006
    '-----------------------------------------
    If gobjCond.EstadoBool(ESTADO_SEMDESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.Estado<>" & ESTADO_SEMDESPACHADO & ")"
   End If
    If Len(gobjCond.CodCentro1) > 0 And Len(gobjCond.CodCentro2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " codCentro between '" & gobjCond.CodCentro1 & "' and '" & gobjCond.CodCentro2 & "'"
    End If
    If gobjMain.GrupoActual.PermisoActual.ConsRepVen Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " v.codvendedor = '" & gobjMain.UsuarioActual.codUsuario & "'  "
    End If
    If Len(gobjCond.CodPC1) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " codprovcli = '" & gobjCond.CodPC1 & "' "
    End If
    If Len(gobjCond.CodPC2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " codvendedor = '" & gobjCond.CodPC2 & "' "
    End If
    If Len(gobjCond.CodSust) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " codusuario = '" & gobjCond.CodSust & "' "
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
   'Ordern de filas
    sql = sql & " ORDER BY vwConsGNTrans.FechaTrans DESC, vwConsGNTrans.HoraTrans DESC, vwConsGNTrans.TransID DESC"       '*** MAKOTO 07/dic/00 HoraTrans agregado
    Set rs = Me.OpenRecordset(sql)
    Set ConsGNTransVentas = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Ventas " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function


Public Sub CambiaEstadoGNCompRevisar(transid As Long, value As Byte)
    Dim sql As String, pt As PermisoTrans, CodT As String, gc As GNComprobante, NumT As Long
    Dim est As Byte, rs As Recordset, idCentro As Long, EstadoOriginal As Byte, pos As Integer, Revisar As Byte
    Dim idAsiento As Long, gcaux As GNComprobante, IdTransFuente As Long, i As Long
    If transid = 0 Then Exit Sub        '*** MAKOTO 15/dic/00
    
    'Obtiene CodTrans de la transacción
    sql = "SELECT CodTrans, Estado, BandCierre, NumTrans  FROM GNComprobante WHERE TransID=" & transid
    Set rs = Me.OpenRecordset(sql)
    If rs.EOF Then
        Err.Raise ERR_NOHAYCODIGO, "Empresa.CambiaEstadoGNComp", "No se enencuentra la transacción."
    End If
    CodT = rs!CodTrans
    NumT = rs!NumTrans
    est = rs!Estado                 'Estado actual de la trans.
    Revisar = rs!BandCierre
    rs.Close
    
    'Si no está cambiando no hace nada
    If est = value Then Exit Sub
            
    'Recupera el permiso para la transacción
    Set pt = gobjMain.GrupoActual.PermisoActual.Trans(CodT)
    If Not pt Is Nothing Then
                sql = "UPDATE GNComprobante SET bandcierre='" & value & _
                  "' WHERE TransID=" & transid
                Me.Execute sql, True
    Else
        Err.Raise ERR_NODERECHO, "Empresa.CambiaEstadoGNComp", MSGERR_NODERECHO
    End If
    




#If DAOLIB Then
    gobjWS.BeginTrans           '================= Comienza la transacción
#Else
    mcnEmpresa.BeginTrans       '================= Comienza la transacción
#End If
    On Error GoTo ErrTrap

    '*** MAKOTO 13/oct/00 Agregado
    
    
    
    
    'Si cambia a anulado y antes no estaba anulado
    
            Me.GrabaGNLogAccion "Mod_TRANS", "Transacción Revisada " & _
                                                         CodT & NumT, "GN"
    
    
    
'*** MAKOTO 15/dic/00   Eliminado por que no debería cambiar el codusuario
    
#If DAOLIB Then
    gobjWS.CommitTrans          '============ Completa la transacción
#Else
    mcnEmpresa.CommitTrans      '============ Completa la transacción
#End If
    Set gc = Nothing

    Exit Sub

ErrTrap:
#If DAOLIB Then
    gobjWS.Rollback             '============ Anula la transacción
#Else
    mcnEmpresa.RollbackTrans    '============ Anula la transacción
#End If
    
    Err.Raise Err.Number, Err.Source, Err.Description
    Exit Sub
End Sub


Public Function ListaAnexoPais(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodPais,  Descripcion FROM Anexo_Pais"
    sql = sql & " ORDER BY Descripcion"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaAnexoPais = rs
    Else
        ListaAnexoPais = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function RecuperaAnexosPais(key As Variant) As Anexos
Dim obj As Anexos
    Set obj = New Anexos
    Set obj.Empresa = Me
    On Error Resume Next
    obj.RecuperarAnexoPais key
    If Err.Number = 0 Then Set RecuperaAnexosPais = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function ConsANExportacion2013paraXML() As Variant
    Dim pck As PCKardex, pcd As PCDocAsignado
    Dim objGnComp As GNComprobante, objGnCompDocOriginal As GNComprobante
    Dim sql As String, cond As String, CadenaValores As String
    Dim Recargo As String 'CadenaAgrupa  As String
    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
    Dim from As String, numReg As Long, f1 As String
    Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
    Dim Servicios As String, Bienes As String, RowRet As Long
    Const COL_BASESER = 15
    'segunda parte de la consulta: carga los valores de  Detalles de Anexos
    Const COL_FECHA = 2
    Const COL_CODCREDTRIB = 7
    Const COL_TRANSID = 1
    Const COL_TRANSRET = 5
    Dim condServ As String
    Dim condBien As String
    Dim Vista As String
    Dim pos As Integer, pos1 As Integer
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   With gobjCond
        'Reporte de un mes a la vez
        f1 = DateSerial(Year(.fecha1), Month(.fecha1), 1)
        cond = " AND GNC.FechaTrans BETWEEN " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & _
               " AND " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB)
            sql = sql & " Select pc.ruc , pc.nombre as Nombre,"
            sql = sql & " case when BandReferendo=1 then '01' else '02' end as Referendo,"
            sql = sql & " '0' + TipoTrans as TipoComprobante, CodDistrito, Anio, CodRegimen,"
            sql = sql & " Correlativo, DocTransporte , FechaEmbarque, ValorFOB, ValorFOBLocal,"
            sql = sql & " numserieestasri, numseriepuntosri, numtrans,  "
            sql = sql & " case when substring(Opcion2, 122, 1)='S' and tipoemision='1' and TipoAmbiente = '2'  then NumeroAutorizacion else AutorizacionSRI end as AutorizacionSRI,"
            'sql = sql & " autorizacionsri,"
            sql = sql & " FechaTrans , "
            sql = sql & " CASE WHEN (vw.PrecioRealTotal)<>0 THEN ( vw.PrecioRealTotal)  END  AS PrecioRealTotal"
            sql = sql & " from     gncomprobante Gnc"
            sql = sql & " inner join GnTrans gnt on gnc.codtrans=GnT.codtrans"
            sql = sql & " left join InfoComprobantes Inf  on gnc.transid=inf.transID"
            sql = sql & " inner join anexosexportacion at on gnc.transId = at.TransId"
            sql = sql & " INNER JOIN PCPROVClI pc  ON GNC.IdClienteRef=pc.idprovcli"
            sql = sql & " inner join vwConsSUMIVKardexIVA vw ON Gnc.TransID = vw.transid"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
            sql = sql & " AND Gnc.BandCierre=9 "
            sql = sql & " and GNC.Estado<>3 " & cond
            
            
            'sql = sql & " union all "
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANExportacion2013paraXML = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Compraspara Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 4
End Function


Public Function RecuperaAFUbicacion(key As Variant) As AFUbicacion
    Dim obj As AFUbicacion
    
    Set obj = New AFUbicacion
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaAFUbicacion = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function CreaAFUbicacion() As AFUbicacion
    Dim obj As AFUbicacion
    
    Set obj = New AFUbicacion
    Set obj.Empresa = Me
    Set CreaAFUbicacion = obj
    Set obj = Nothing
End Function


Public Function ListaAFUbicacion(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
    sql = "SELECT CodUbicacion,Descripcion FROM AFUbicacion "
    If BandSoloValida Then
        sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY CodUbicacion"
    
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaAFUbicacion = rs
    Else
        ListaAFUbicacion = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaAFInventario3New(CodInventario As String, _
                                  CodAlterno As String, _
                                  Descripcion As String, _
                                  CodBodega As String, _
                                  CodUbicacion As String, _
                                  CodGrupo() As String, _
                                  BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset, i As Integer
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If
    'sql = "SELECT CodInventario, CodAlterno1, Descripcion, NombreCustodio, Exist, "  'AUC cambiado es otro campo
        sql = "SELECT CodInventario, CodAlterno1, Descripcion, NombreCustodio, Exist, " & _
            " dESCuBICACION , CodGrupo1, CodGrupo2, CodGrupo3," & _
            " CodGrupo4, CodGrupo5, Observacion,BandValida,BandServicio  FROM vwAFInventario "
    If BandSoloValida Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(BandValida=" & CadenaBool(True, TipoDB) & ")"
    End If
    If Len(CodInventario) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodInventario LIKE '" & CodInventario & comodin & "') "
    End If
    If Len(CodAlterno) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "((CodAlterno1 LIKE '" & CodAlterno & comodin & "') " & _
                      "OR (CodAlterno2 LIKE '" & CodAlterno & comodin & "')) "
    End If
    If Len(Descripcion) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(Descripcion LIKE '" & Descripcion & comodin & "') "
    End If
    If Len(CodBodega) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodigoCustodio='" & CodBodega & "') "
    End If
    
    If Len(CodUbicacion) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodUbicacion='" & CodUbicacion & "') "
    End If
    
    
    For i = LBound(CodGrupo) To UBound(CodGrupo)
        If Len(CodGrupo(i)) > 0 Then
            If Len(cond) > 0 Then cond = cond & "AND "
            cond = cond & "(CodGrupo" & i & " = '" & CodGrupo(i) & "') "
        End If
    Next i
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " ORDER BY CodInventario"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaAFInventario3New = rs
    Else
        ListaAFInventario3New = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ConsTiemposProduccion(ByVal idCentroDet As Long) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    On Error GoTo CapturaError
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    sql = " select  ivkp.idkp, ivkp.Cantidad as HorasPresupuestadas, ivkp.idproceso into tmp1 "
    sql = sql & " From ivkproceso ivkp"
    sql = sql & " Where idCentroDet = " & idCentroDet
    Me.EjecutarSQL sql, 1
    sql = "select  dp.idkp, sum(dp.numhoras) as HorasConsumidas into tmp2 from ivkproceso ivkp"
    sql = sql & " inner join detalleproceso dp on dp.idkp=ivkp.idkp"
    sql = sql & " Where idCentroDet =" & idCentroDet
    sql = sql & " group by  dp.idkp"
    Me.EjecutarSQL sql, 1
    sql = "select IVP.DESCRIPCION,t1.idkp,t1.horaspresupuestadas AS HP,isnull(t2.horasconsumidas,0) AS HC "
    sql = sql & " ,case when t1.horaspresupuestadas= 0 then 0 else isnull(t2.horasconsumidas,0)/t1.horaspresupuestadas end AS cumplido"
   sql = sql & " from tmp1 t1 full join tmp2 t2 on t2.idkp=t1.idkp"
    sql = sql & " INNER  JOIN IVPROCESO IVP ON IVP.IDPROCESO = T1.IDPROCESO"
    Set rs = Me.OpenRecordset(sql)
    Set ConsTiemposProduccion = rs
    Set rs = Nothing
    Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function
Public Function ListaFAntecedentePersonal(ByVal idficha As Long) As Recordset
    Dim sql As String, rs As Recordset
    On Error GoTo CapturaError
    sql = "SELECT idAntecedente,Codigo,Descripcion FROM FAntecedentePersonal where idficha =" & idficha
    sql = sql & " ORDER BY idantecedente"
    Set rs = Me.OpenRecordset(sql)
    Set ListaFAntecedentePersonal = rs
    Set rs = Nothing
    Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function
Public Function ListaFAntecedenteFamiliar(ByVal idficha As Long) As Recordset
    Dim sql As String, rs As Recordset
    On Error GoTo CapturaError
    sql = "SELECT idAntecedenteF,Codigo,Descripcion FROM FAntecedenteFamiliar where idficha =" & idficha
    sql = sql & " ORDER BY idantecedentef"
    Set rs = Me.OpenRecordset(sql)
    Set ListaFAntecedenteFamiliar = rs
    Set rs = Nothing
    Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function
Public Function ListaFOrgano(ByVal IdFichaDetalle As Long) As Recordset
    Dim sql As String, rs As Recordset
    On Error GoTo CapturaError
    sql = "SELECT idOrgano,Codigo,CP,SP,Descripcion FROM FOrgano where idfichaDetalle =" & IdFichaDetalle
    sql = sql & " ORDER BY idOrgano"
    Set rs = Me.OpenRecordset(sql)
    Set ListaFOrgano = rs
    Set rs = Nothing
    Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function
Public Function ListaFExamenFisico(ByVal IdFichaDetalle As Long) As Recordset
    Dim sql As String, rs As Recordset
    On Error GoTo CapturaError
    sql = "SELECT idExamenFisico,Codigo,CP,SP,Descripcion FROM FExamenFisico where idfichaDetalle =" & IdFichaDetalle
    sql = sql & " ORDER BY idExamenFisico"
    Set rs = Me.OpenRecordset(sql)
    Set ListaFExamenFisico = rs
    Set rs = Nothing
    Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function
Public Function ListaFDiagnostico(ByVal IdFichaDetalle As Long, ByVal BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    On Error GoTo CapturaError
    sql = "SELECT idDiagnostico,Codigo,Descripcion FROM FDiagnostico where idfichaDetalle =" & IdFichaDetalle
    sql = sql & " ORDER BY iddiagnostico"
    Set rs = Me.OpenRecordset(sql)
     If BandRS Then
        Set ListaFDiagnostico = rs
    Else
        ListaFDiagnostico = MiGetRows(rs)
       rs.Close
    End If
    Set rs = Nothing
    Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function
Public Function ListaFPlan(ByVal IdFichaDetalle As Long, ByVal BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    On Error GoTo CapturaError
    sql = "SELECT idPlan,Descripcion FROM FPlan where idfichaDetalle =" & IdFichaDetalle
    sql = sql & " ORDER BY idPlan "
    Set rs = Me.OpenRecordset(sql)
     If BandRS Then
        Set ListaFPlan = rs
    Else
        ListaFPlan = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
    Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function
Public Function EliminaFicha(key As Variant) As Ficha
    Dim nuevo As Ficha
    Set nuevo = New Ficha
    Set nuevo.objEmpresa = Me
    nuevo.BorradoFisico (key)
    Set EliminaFicha = nuevo
    Set nuevo = Nothing
End Function
Public Function ListaFSignos(ByVal IdFichaDetalle As Long) As Recordset
    Dim sql As String, rs As Recordset
    On Error GoTo CapturaError
    sql = "SELECT idSigno,Codigo,Descripcion FROM FSigno where idfichaDetalle =" & IdFichaDetalle
    sql = sql & " ORDER BY idSigno"
    Set rs = Me.OpenRecordset(sql)
    Set ListaFSignos = rs
    Set rs = Nothing
    Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function

Public Function VerificaEstadoNew(ByVal color As String, ByVal transid As Long, ByVal IDkp As Long) As Boolean
Dim sql As String
Dim rs As Recordset
Dim rsP As Recordset
Dim rs2 As Recordset
Dim v As Variant, i As Long
Dim v1() As Variant
Dim X As Long
On Error GoTo CapturaError
    sql = "Select  gne.menu from  gnestadoprod gne  "
    sql = sql & " Where gne.color = '" & color & "'"
   Set rs = Me.OpenRecordset(sql)
    Do While Not rs.EOF
If rs!Menu = "Espera" Or rs!Menu = "InicioEspera" Then
            'de una si esta en espera no puede continuar
            VerificaEstadoNew = False
            Exit Function
        End If
        rs.MoveNext
    Loop
    Set rs = Nothing
    'AQUI SE VALIDA PARA REVISION
    sql = "Select  gne.menu from  gnestadoprod gne  "
    sql = sql & " INNER JOIN ivkproceso ivkp on ivkp.estado1=gne.valor  "
    sql = sql & " Where gne.color = '" & color & "'"
    sql = sql & " And idkpAsignado  = 0"
    sql = sql & " And idkp = " & IDkp
    Set rs = Me.OpenRecordset(sql)
    Do While Not rs.EOF
        If rs!Menu = "Revision" Then
            'de una si esta en espera no puede continuar
            VerificaEstadoNew = False
            Exit Function
        End If
        rs.MoveNext
    Loop
    Set rs = Nothing
   sql = "Select  ivp.codprocesov from ivproceso ivp Where CHARINDEX('" & gobjMain.UsuarioActual.codUsuario & "',ivp.codusuario) > 0"
    Set rsP = Me.OpenRecordset(sql)
    If IsNull(rsP!CodProcesoV) Or rsP!CodProcesoV = "" Then  'No tiene enlazado nada y pasa
sigue: '06/09/2013 creo que esto no va ha servir revisar despues sino hay que
       sql = "Select ivkp.idkp,ivkp.idcentrodet, gne.menu from GnestadoProd gne  "
        sql = sql & " inner join ivkproceso ivkp "
        sql = sql & " on ivkp.estado = gne.valor"
        sql = sql & " Where ivkp.estado1 =0 And gne.color = '" & color & "'"
        sql = sql & " and ivkp.codusuario = '" & gobjMain.UsuarioActual.codUsuario & "'"
       Set rs = Me.OpenRecordset(sql)
        Do While Not rs.EOF
            If rs!Menu = "Ejecucion" Or rs!Menu = "Revision" Then
                VerificaEstadoNew = True
            End If
            rs.MoveNext
        Loop
    Else 'AUC REVISA LOS ENLACES
        v = Split(rsP!CodProcesoV, ",")
        'primero comparo lo que se carga en el vector con lo que tiene el proceso
        sql = "select ivp.codproceso from ivkproceso ivkp"
        sql = sql & " inner join ivproceso ivp on ivp.idproceso = ivkp.idproceso "
        sql = sql & " Where transid = " & transid
        sql = sql & " Group by ivp.codproceso"
       Set rs2 = Me.OpenRecordset(sql)
        For i = 0 To UBound(v) 'revisa los enlazados que esten listos
            rs2.MoveFirst
            Do While Not rs2.EOF
                If v(i) = rs2!CodProceso Then
                    ReDim Preserve v1(0, X)
                    v1(0, X) = rs2!CodProceso
                    X = X + 1
                End If
                rs2.MoveNext
            Loop
        Next
            Set rs2 = Nothing
            If X = 0 Then GoTo sigue 'regresa a revisar para ver porque no tiene procesos intermedios
       For i = 0 To X - 1 'revisa los enlazados que esten listos
            sql = "Select ivp.*,ivkp.transid,isnull(gne.menu,0) as menu  from ivproceso ivp "
            sql = sql & " inner join ivkproceso ivkp Left join gnestadoprod gne on gne.valor= ivkp.estado1"
            sql = sql & " ON ivkp.idproceso = ivp.idproceso"
            sql = sql & " AND ivp.codproceso = '" & v1(0, i) & "'"
            sql = sql & " AND ivkp.transid = " & transid
            sql = sql & " AND gne.menu not in ('Espera','FinEspera')" 'si hay un anterior en espera dejar pasar
            Set rs = Me.OpenRecordset(sql)
            If rs.RecordCount = 0 Then VerificaEstadoNew = False:  Exit Function
             Do While Not rs.EOF
                If rs!Menu = "Listo" Or rs!Menu = "Revision" Then
                   VerificaEstadoNew = True
                Else
                    VerificaEstadoNew = False
                    Exit Function
               End If
             rs.MoveNext
             Loop
        Next
    End If
Set rs = Nothing
Set rsP = Nothing
Exit Function
CapturaError:
Set rs = Nothing
MsgBox Err.Description
Exit Function
End Function

Public Function RecuperaIVInventarioProduccionNew(key As Variant, IdTrans As Long) As IVInventarioProduccion

    Dim obj As IVInventarioProduccion
    Set obj = New IVInventarioProduccion
    Set obj.Empresa = Me
    On Error Resume Next
    obj.recuperarNEW key, IdTrans
    If Err.Number = 0 Then Set RecuperaIVInventarioProduccionNew = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function


Public Function ConsCTSaldoCuentaBalance(bandBalance As Boolean, CodCuenta As String) As Currency
    Dim sql As String, cond As String, rs As Recordset
    Dim v As Variant, v2() As Variant, i As Long, j As Long
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsCTBalance")
    qdef.Parameters("FechaDesde") = IIf(bandBalance, Me.GNOpcion.FechaInicio, gobjCond.fecha1)
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodCuenta1") = "0"
    qdef.Parameters("CodCuenta2") = String(20, "9")
    qdef.Parameters("CodSucursal") = gobjCond.Sucursal ' ********* jeaa
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
    If Not rs.EOF Then
        rs.MoveLast
        rs.MoveFirst
        v = rs.GetRows(rs.RecordCount)
    End If
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
'    '**************************
'    gobjCond.Sucursal = "'S2'"
'    '**************************
    If Me.GNOpcion.ObtenerValor("PermitirDistribucionGastos") = "1" Then
        If Not gobjCond.IncluirCero Or Len(gobjCond.Sucursal) > 0 Then
            If Len(gobjCond.Codciudad1) = 0 Then
                sql = "spConsSaldoBalanceSinUtilSinIR "
            Else
                sql = "spConsSaldoBalancexGastoSinUtilSinIR "
            End If
        Else
            If Len(gobjCond.Codciudad1) = 0 Then
                    sql = "spConsSaldoBalanceSinUtilSinIR  "
            Else
                    sql = "spConsCTBalancexGastoSinUtilSinIR "
            End If
        End If
    Else
            If Not gobjCond.IncluirCero Or Len(gobjCond.Sucursal) > 0 Then
                    sql = "spConsSaldoBalanceSinUtilSinIR  "
            Else
                    sql = "spConsCTBalancexGastoSinUtilSinIR "
            End If

    End If
    
    sql = sql & gobjCond.numMoneda
    If Len(gobjCond.Codciudad1) = 0 Then
        sql = sql & ",'0','" & String(20, "9") & "',"
    Else
        sql = sql & ",'" & CodCuenta & "',"
    End If
    sql = sql & FechaYMD(IIf(bandBalance, Me.GNOpcion.FechaInicio, gobjCond.fecha1), TipoDB) & ","
    sql = sql & FechaYMD(gobjCond.fecha2, TipoDB) & ",'" & gobjCond.Sucursal & "'"    ' jeaa 17-01-04 para filtrado por sucursal
                        
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    ConsCTSaldoCuentaBalance = 0
    ConsCTSaldoCuentaBalance = rs.Fields(0)

#End If
    
        
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta SaldoBalance ", "CT"
End Function


Public Function ConsANExportaciones2013() As Variant
    Dim pck As PCKardex, pcd As PCDocAsignado
    Dim objGnComp As GNComprobante, objGnCompDocOriginal As GNComprobante
    Dim sql As String, cond As String, CadenaValores As String
    Dim Recargo As String 'CadenaAgrupa  As String
    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
    Dim from As String, numReg As Long, f1 As String
    Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
    Dim Servicios As String, Bienes As String, RowRet As Long
    Const COL_BASESER = 15
    'segunda parte de la consulta: carga los valores de  Detalles de Anexos
    Const COL_FECHA = 2
    Const COL_CODCREDTRIB = 7
    Const COL_TRANSID = 1
    Const COL_TRANSRET = 5
    Dim condServ As String
    Dim condBien As String
    
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   
    With gobjCond
        'Reporte de un mes a la vez
        'f1 = DateSerial(Year(.fecha1), Month(.fecha1), 1)
        cond = " AND GNC.FechaTrans BETWEEN " & FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & _
               " AND " & FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB)
        
           
            VerificaExistenciaTabla 0
            VerificaExistenciaTabla 1
            VerificaExistenciaTabla 2
            VerificaExistenciaTabla 3
            
            sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as TotalDescuento Into tmp0 " & _
                    "From IvRecargo ivR inner join " & _
                        "IvKardexRecargo ivkR Inner join " & _
                            "GnComprobante gNc  " & _
                        "On ivkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = IvkR.IdRecargo "
            sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.Sucursal) & ") " & cond & _
                    " AND GNC.CodTrans IN (" & PreparaCadena(.CodGrupo) & ")" & _
                  "Group by IvkR.TransID"
                  
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg

'--datos de indices
            VerificaExistenciaTabla 3
            sql = " Select  DISTINCT GNC.IdClienteRef AS FC_id, GNC_b.IdClienteRef AS rtp_id1, "
            sql = sql & " CASE WHEN GNC_b.IdClienteRef=0 THEN PCK_b.IdProvcli WHEN GNC_b.IdClienteRef<>0 THEN GNC_b.IdClienteRef end as rtp_id "
            sql = sql & " Into tmp3"
            sql = sql & " From    (gncomprobante GNC Inner join pckardex pck_a ON GNC.TransID = pck_a.TransID ) INNER JOIN"
            sql = sql & "  (gncomprobante GNC_b Inner join pckardex pck_B ON GNC_b.TransID = pck_B.TransID )"
            sql = sql & " ON  PCK_A.ID = PCK_B.IDASIGNADO"
            sql = sql & " where GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
            sql = sql & " AND GNC_b.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion2) & ")"
            sql = sql & " AND (GNC.FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = sql & " and GNC.Estado<>3 and GNC.IdClienteRef<>0 and GNC_b.IdClienteRef<>0 "
            
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            '--datos de la Venta
            
            
            sql = " Select gnc.fechatrans, gnc.IdClienteRef as IdClienteRef, pc.ruc, pc.Nombre as Nombre , CodTipoDocumento, "
            sql = sql & " AnexoCodTipoComp , (Gnc.NumTrans) as cantTrans,  "
            sql = sql & " gnc.CodTrans + ' ' + CONVERT(varchar,NumTrans) AS Trans, "
            sql = sql & " ( (vw.PrecioTotalBase0 + (vw.PrecioTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float))) ))*-1  As Valor0,"
            sql = sql & " ( (vw.PrecioTotalBaseIVA + (vw.PrecioTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1 AS Valor12,"
            sql = sql & " 0 AS ValorNO12,"
            sql = sql & " ( (vw.PrecioTotal + (vw.PrecioTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.PrecioTotal as float)))))*-1   AS PrecioTotal, "
            sql = sql & " FechaEmbarque, ValorFOB, ValorFOBLocal, BandReferendo, CodDistrito, Anio, CodRegimen, Correlativo, DocTransporte "
            sql = sql & " Into tmp1"
            sql = sql & " from    ("
            sql = sql & " tmp0"
            sql = sql & " Right join gncomprobante Gnc inner join gntrans gnt on gnc.codtrans= gnt.codtrans "
            sql = sql & " INNER JOIN PCPROVClI pc"
            sql = sql & " left join anexo_TipoDocumento atd on pc.IdTipoDocumento=atd.Id"
            sql = sql & " ON GNC.IdClienteRef=pc.idprovcli "
            sql = sql & " inner join vwConsSUMIVKardexIVA vw"
            sql = sql & " ON Gnc.TransID = vw.transid"
            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " inner join AnexosExportacion anex on gnc.transid= anex.transid"
            
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
            sql = sql & " and pc.bandempresapublica=0 AND BANDCIERRE=9"
            sql = sql & " and GNC.Estado<>3 " & cond
            'sql = sql & " group by   pc.ruc, AnexoCodTipoComp, CodTipoDocumento "
            
            VerificaExistenciaTabla 1
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            ' union de las tres tablas
            sql = "SELECT  fechatrans as Fecha, "

            sql = sql & " (a.RUC)as ruc, CodTipoDocumento, (a.Nombre) as nombre, AnexoCodTipoComp, isnull(a.Trans,0),"
            sql = sql & " case when AnexoCodTipoComp = 4 then isnull(a.Valor0,0) else isnull(a.Valor0*-1,0) end , "
            sql = sql & " case when AnexoCodTipoComp = 4 then isnull(a.Valor12,0) else isnull(a.Valor12*-1,0) end , "
            sql = sql & " case when AnexoCodTipoComp = 4 then isnull(a.ValorNO12,0) else isnull(a.ValorNO12*-1,0) end , "
            
            sql = sql & " case when AnexoCodTipoComp = 4 then isnull(a.Valor0,0) else isnull(a.Valor0*-1,0) end + "
            sql = sql & " case when AnexoCodTipoComp = 4 then isnull(a.Valor12,0) else isnull(a.Valor12*-1,0) end + "
            sql = sql & " case when AnexoCodTipoComp = 4 then isnull(a.ValorNO12,0) else isnull(a.ValorNO12*-1,0) end  as total, "
            sql = sql & " FechaEmbarque, ValorFOB, ValorFOBLocal, BandReferendo, CodDistrito, Anio, CodRegimen, Correlativo, DocTransporte "
            
            'sql = sql & " 0 "
            sql = sql & " From tmp1 a  "
            sql = sql & " order by AnexoCodTipoComp, CodTipoDocumento, a.ruc"
    
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANExportaciones2013 = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Compraspara Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 4
End Function

Public Function ListaIVItemFlex() As String
    Dim sql As String, cond As String, s As String
    Dim rs As Recordset
    sql = "SELECT CodInventario,descripcion FROM IVInventario "
    sql = sql & " ORDER BY CodInventario"
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 20 + 80)
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    ListaIVItemFlex = s
    rs.Close
    Set rs = Nothing
End Function

Public Function ListaGNReporte( _
                    BandRS As Boolean) As Variant
    Dim sql As String, cond As String, rs As Recordset
    
    sql = "SELECT 0 as sel, CodReporte,Titulo, NumMenu, Orden, Modulo,Empresas,id  FROM GNReporte "
    
   
    If Len(cond) > 0 Then sql = sql & "WHERE " & cond
    sql = sql & " ORDER BY id"
    Set rs = Me.OpenRecordset(sql)
    
    If BandRS Then
        Set ListaGNReporte = rs
    Else
        ListaGNReporte = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


Public Sub RecuperaDatosConciliacionCartera(ByVal cadena As String, ByRef CodPC1 As String, ByRef CodPC2 As String)
    Dim pos As Integer, v As Variant, cad As String, W As Variant
    If InStr(1, UCase(cadena), "DESDE:") Then
        pos = InStr(1, UCase(cadena), "DESDE:") + 7
        
        cad = Mid$(cadena, pos, Len(cadena) - pos + 1)
        v = Split(cad, "a:")
        W = Split(v(0), "-")
        CodPC1 = Trim$(W(0))
        W = Split(v(1), "-")
        CodPC2 = Trim$(W(0))
    End If
End Sub
'AUC
Public Function ObtenerUltimoGnCentroCostoDet() As Long
Dim sql As String
Dim numero As Long
Dim rs As Recordset
On Error GoTo CapturaError
sql = " select max(cast(codcentrodet as integer) ) as Ultimo  from gncentrocostodetalle"
Set rs = Me.OpenRecordset(sql)
If rs.RecordCount > 0 Then
    numero = rs!ultimo + 1
Else
    numero = 0
End If
ObtenerUltimoGnCentroCostoDet = numero
Set rs = Nothing
Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function

Public Function ListaPCProvCliEmpGarFiltroNewLosep(bandEmpleado As Boolean, _
                                    codPC As String, _
                                    Nombre As String, _
                                    Direccion As String, _
                                    RUC As String, _
                                    CodGrupoDesde As String, _
                                    CodGrupoHasta As String, _
                                    numG As Integer, _
                                    BandActivo As Boolean, _
                                    bandNoActivo As Boolean, _
                                    BandSoloValida As Boolean, _
                                    BandRS As Boolean) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset, i As Integer
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If
    sql = "SELECT pc.CodProvCli,p.codigolosep, pc.Nombre, pc.RUC, p.salario,p.fechaIngreso,"
    sql = sql & "case when p.bandactivo = 0 then p.FechaEgreso  Else  null end as FechaEgreso"
    sql = sql & ",case when p.bandFR = 1 then 'Cobra' else 'Acumula' end as FR"
    sql = sql & ",BandEmpPublico,bandAPGerente"
    sql = sql & ",case when p.bandactivo = 1 then 'ACTIVO' else 'INACTIVO' end as estado "
    sql = sql & ",g1.descripcion, g2.descripcion, g3.descripcion, g4.descripcion  "
    sql = sql & " FROM "
    sql = sql & " PCGrupo4 g4 "
    sql = sql & " RIGHT JOIN (PCGrupo3 g3 "
    sql = sql & " RIGHT JOIN (PCGrupo2 g2 "
    sql = sql & " RIGHT JOIN (PCGrupo1 g1 "
    sql = sql & " RIGHT JOIN  personal p "
    sql = sql & " RIGHT JOIN Empleado pc on p.idempleado = pc.idprovcli"
    sql = sql & " left join Anexo_TipoDocumento a on pc.IdTipoDocumento  = a.Id"
    sql = sql & " ON g1.IdGrupo1 = p.IdGrupo1) "
    sql = sql & " ON g2.IdGrupo2 = p.IdGrupo2) "
    sql = sql & " ON g3.IdGrupo3 = p.IdGrupo3) "
    sql = sql & " ON g4.IdGrupo4 = p.IdGrupo4 "
    sql = sql & " WHERE BandEmpleado=" & CadenaBool(True, TipoDB)
    If Len(codPC) > 0 Then
        cond = cond & " and (CodProvCli LIKE '" & codPC & comodin & "') "
    End If
    If Len(Nombre) > 0 Then
        cond = cond & " and ((Nombre LIKE '" & Nombre & comodin & "') " & _
                      "OR (Nombre LIKE '" & Nombre & comodin & "')) "
    End If
    If Len(Direccion) > 0 Then
        cond = cond & " and (Direccion1 LIKE '" & Descripcion & comodin & "') "
    End If
    If Len(RUC) > 0 Then
        cond = cond & " and (ruc LIKE '" & RUC & comodin & "') "
    End If
    If Not (Len(CodGrupoDesde) = 0 And Len(CodGrupoHasta) = 0) Then
        cond = cond & " AND (CodGrupo" & numG & " BETWEEN '" & CodGrupoDesde & _
            "' AND '" & CodGrupoHasta & "')"
    End If
    If BandActivo And Not bandNoActivo Then
        cond = cond & " AND p.bandactivo = 1 "
    ElseIf Not BandActivo And bandNoActivo Then
        cond = cond & " AND p.bandactivo = 0 "
    Else
        'saca todo
    End If
    If Len(cond) > 0 Then sql = sql & cond
    sql = sql & " ORDER BY Nombre "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCProvCliEmpGarFiltroNewLosep = rs
    Else
        ListaPCProvCliEmpGarFiltroNewLosep = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


Public Function ListaGNCentroCostoFicha(BandRS As Boolean, BandOcupado As Boolean, BandDetallado As Boolean) As Variant
    Dim sql As String, rs As Recordset
    If BandDetallado Then
        sql = "SELECT CodCentro, Nombre, Descripcion, FechaInicio,FechaFinal,FechaEntrega,IdCentro,bandOcupado"
        sql = sql & " FROM GNCentroCosto "
    Else
        sql = "SELECT CodCentro, " & _
                "CASE WHEN (Nombre Is NULL) OR Len(Nombre)=0 THEN Descripcion " & _
                "  ELSE Nombre + ' ' + Descripcion " & _
                "END AS Descripcion " & _
          "FROM GNCentroCosto "
    End If
    If Not BandOcupado Then sql = sql & "WHERE bandOcupado = 0"
    sql = sql & " ORDER BY CodCentro"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaGNCentroCostoFicha = rs
    Else
        ListaGNCentroCostoFicha = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function RecuperaGNCentroCostoHijoxId(key As Long) As GNCentroCostoHijo
    Dim obj As GNCentroCostoHijo
    Set obj = New GNCentroCostoHijo
    Set obj.Empresa = Me
    On Error Resume Next
    obj.recuperarxId key
    If Err.Number = 0 Then Set RecuperaGNCentroCostoHijoxId = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function


Public Function ConsConsIVKardexPorMesGyp() As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim v As Variant, v2() As Variant, i As Long, j As Long
    
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    
    sql = "spConsIVKardexPorMesGyp "
    
    sql = sql & FechaYMD((gobjCond.fecha1), TipoDB) & ",'" & gobjCond.Bienes
    
    sql = sql & "','','','','','','','',''"
    
                       
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsConsIVKardexPorMesGyp = rs
    
        
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Buffer Gyp", "VT"
End Function

Public Function RecuperaExistenciaItemxFecha(ByVal CodInventario As String, CodBodega As String, FechaCorte As Date) As Currency
    Dim sql As String
    Dim rs As Recordset

    sql = "select isnull(sum(ivk.cantidad),0) as cant"
    sql = sql & " from gntrans gnt"
    sql = sql & " inner join gncomprobante g"
    sql = sql & " inner join ivkardex ivk inner join ivbodega ivb on ivb.idbodega = ivk.idbodega"
    sql = sql & " inner join ivinventario ivi"
    sql = sql & " on ivk.idinventario = ivi.idinventario"
    sql = sql & " on g.transid=ivk.transid"
    sql = sql & " on gnt.codtrans = g.codtrans"
    sql = sql & " Where g.Estado <> 3"
    sql = sql & " and GNt.AfectaCantidad=1"
    sql = sql & " and g.fechatrans <=" & FechaYMD(FechaCorte, gobjMain.EmpresaActual.TipoDB)
    sql = sql & " and codinventario='" & CodInventario & "'"
    sql = sql & " and ivb.codbodega='" & CodBodega & "'"
    
    Set rs = Me.OpenRecordset(sql)
    
    If rs.RecordCount > 0 Then
        RecuperaExistenciaItemxFecha = rs.Fields("cant")
    Else
        RecuperaExistenciaItemxFecha = 0
    End If
    Set rs = Nothing
End Function

Public Function RecuperaDatosUltimaCompraItem(ByVal CodInventario As String) As Variant
    Dim sql As String
    Dim rs As Recordset

    sql = "select top 1"
    sql = sql & " codinventario, pc.nombre,cantidad, costounitario, max(fecha) from ivinventario iv"
    sql = sql & " inner join IVProveedorDetalle ivpd"
    sql = sql & " inner join pcprovcli pc"
    sql = sql & " on pc.idprovcli = ivpd.idproveedor"
    sql = sql & " on iv.idinventario= ivpd.idinventario"
    sql = sql & " where 1=1 "
    sql = sql & " and codinventario='" & CodInventario & "'"
    sql = sql & " group by codinventario, pc.nombre,cantidad, costounitario"
    sql = sql & " order by max(fecha) desc"
    
    Set rs = Me.OpenRecordset(sql)
    
    If rs.RecordCount > 0 Then
        Set RecuperaDatosUltimaCompraItem = rs
    Else
        Set RecuperaDatosUltimaCompraItem = rs
    End If
    Set rs = Nothing
End Function

Public Function CargaBufferGyp() As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim i As Long, j As Long, numReg As Long

    With gobjCond
    
            Set rs = New ADODB.Recordset
            rs.CursorLocation = adUseClient
            
            
            For i = 0 To 12
                sql = " SELECT"
                sql = sql & " ivk.idinventario, sum(Cantidad) As cant"
                sql = sql & " INTO tbgyp" & i
                sql = sql & " from gncomprobante g inner join gntrans gnt"
                sql = sql & " on g.codtrans=gnt.codtrans"
                sql = sql & " inner join ivkardex ivk "
                sql = sql & " inner join ivinventario  on ivk.idinventario = ivinventario.idinventario"
                sql = sql & " on g.transid=ivk.transid"
                sql = sql & " Where g.Estado <> 3"
                sql = sql & " AND  AnexoCodTipoTrans in (" & PreparaCadena(.CodBanco1) & ") "
                sql = sql & " and gnt.AnexoCodTipoComp in (" & PreparaCadena(.CodBanco2) & ")"
                sql = sql & " AND g.FechaTrans BETWEEN '" & DateAdd("m", i, .fecha1) & "' AND '" & DateAdd("d", -1, (DateAdd("m", i + 1, .fecha1)))
                sql = sql & "' " & .Bienes
                sql = sql & " group by  ivk.idinventario"
            
                VerificaExistenciaTablaTemp "tbgyp" & i
                gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            Next i
            
            
            
    
            sql = " SELECT IDINVENTARIO, CODINVENTARIO, DESCRIPCION"
            sql = sql & " INTO tbgyp99 "
            sql = sql & " from IVInventario"
            sql = sql & " Where bandValida = 1 And BandServicio = 0 " & .Bienes
            
            VerificaExistenciaTablaTemp "tbgyp99"
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
    
            Dim catotal As String
            catotal = "("
            sql = " SELECT"
            sql = sql & " tbgyp99.IDINVENTARIO,"
            For i = 0 To 12
                sql = sql & " isnull(tbgyp" & i & ".cant, 0)*-1 AS cant" & i & ","
            Next i

            sql = sql & " ("
            For i = 0 To 12
                sql = sql & " isnull(tbgyp" & i & ".cant, 0) " & "+"
            Next i
            sql = Mid$(sql, 1, Len(sql) - 1)
            sql = sql & " )*-1 AS CantTotal,"
            
            sql = sql & " ("
            For i = 0 To 12
                sql = sql & " isnull(tbgyp" & i & ".cant, 0) " & "+"
            Next i
            sql = Mid$(sql, 1, Len(sql) - 1)
            sql = sql & " )*-1/13 AS Prom "

        sql = sql & " Into tbgyp14"
        sql = sql & " from"
        For i = 12 To 0 Step -1
            sql = sql & " (tbgyp" & i & " RIGHT JOIN"
        Next i
        sql = Mid$(sql, 1, Len(sql) - 11)
        sql = sql & " RIGHT  JOIN"
        sql = sql & " (tbgyp99 inner JOIN IvInventario iv"
        sql = sql & " ON tbgyp99.idinventario = iv.idinventario)"
        For i = 0 To 12
            sql = sql & " ON tbgyp" & i & ".idinventario = iv.idinventario)"
        Next i
    
        VerificaExistenciaTablaTemp "tbgyp14"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg


        sql = " select"
         sql = sql & " IDINVENTARIO,"
        sql = sql & " sqrt(("
        For i = 0 To 12
            sql = sql & " ((cant" & i & "-prom)*(cant" & i & "-prom)) +"
        Next i
        sql = Mid$(sql, 1, Len(sql) - 1)
        sql = sql & " )"
        sql = sql & " /13) as variacion"
        sql = sql & " Into tbgyp15"
        sql = sql & " from tbgyp14"

        VerificaExistenciaTablaTemp "tbgyp15"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg


        sql = "select"
        sql = sql & " IDINVENTARIO,"
        For i = 0 To 12
            sql = sql & " case when cant" & i & "<prom  then cant" & i & "  end as cantb" & i & ","
        Next i
        sql = Mid$(sql, 1, Len(sql) - 1)
        sql = sql & " Into tbgyp16"
        sql = sql & " from tbgyp14"

        VerificaExistenciaTablaTemp "tbgyp16"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg

        sql = "select"
        sql = sql & " IDINVENTARIO,"
        For i = 0 To 12
            sql = sql & " case when cant" & i & ">prom  then cant" & i & "  end as cantm" & i & ","
        Next i
        sql = Mid$(sql, 1, Len(sql) - 1)
        sql = sql & " Into tbgyp17"
        sql = sql & " from tbgyp14"

        VerificaExistenciaTablaTemp "tbgyp17"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg




        sql = "SELECT"
        sql = sql & " tbgyp14.idinventario,"
        For i = 0 To 12
            sql = sql & " cant" & i & ", "
        Next i
        sql = sql & " CantTotal,   Prom,    variacion,"
        sql = sql & " case when prom<>0 then variacion/prom else variacion end as cv,"
        For i = 0 To 12
            sql = sql & " cantb" & i & ", "
        Next i
        
        For i = 0 To 12
            sql = sql & " cantb" & i & "+"
        Next i
        
        sql = Mid$(sql, 1, Len(sql) - 1)
        sql = sql & "  as Totalb,"
    
        For i = 0 To 12
            sql = sql & " cantm" & i & ", "
        Next i
    
        For i = 0 To 12
            sql = sql & " cantm" & i & "+"
        Next i
    
        sql = Mid$(sql, 1, Len(sql) - 1)
        sql = sql & "  as Totalm "
    
        sql = sql & " into tbgyp18"
        sql = sql & " from"
        sql = sql & " tbgyp14 inner join tbgyp15 on tbgyp14.idinventario = tbgyp15.idinventario"
        sql = sql & " inner join tbgyp16 on tbgyp14.idinventario = tbgyp16.idinventario"
        sql = sql & " inner join tbgyp17 on tbgyp14.idinventario = tbgyp17.idinventario"


        VerificaExistenciaTablaTemp "tbgyp18"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg


        sql = " SELECT"
        'sql = sql & " IVG1.CODGRUPO1,IVG2.CODGRUPO2,"
        sql = sql & " IVG3.CODGRUPO3,"
        'sql = sql & " IVG4.CODGRUPO4,"
        sql = sql & " IVG5.CODGRUPO5,"
        sql = sql & " IV.IDINVENTARIO,"
        sql = sql & " IV.CODINVENTARIO,   IV.codalterno2, IV.DESCRIPCION,"
        For i = 0 To 12
            sql = sql & " cant" & i & " ,"
        Next i
        sql = sql & " CantTotal,    Prom,     case when prom<>0 then variacion/prom else variacion end as cv,"
        sql = sql & " 0 as CantMAx,"
        For i = 0 To 12
            sql = sql & " cantb" & i & " ,"
        Next i
        sql = sql & " 0 as cantb,    0 as maxb,    0 as Totalb,"
        For i = 0 To 12
            sql = sql & " cantm" & i & " ,"
        Next i
        sql = sql & " 0 as cantm,"
        sql = sql & " 0 as maxm,"
        sql = sql & " 0 as Totalm,"
        sql = sql & " TiempoReposicion,"
        sql = sql & " TiempoReposicion/30 as TRM,"
        sql = sql & " 0 AS valorMaximo"
        sql = sql & " from"
        sql = sql & " (tbgyp18"
        sql = sql & " left JOIN IvInventario iv"
        sql = sql & " left JOIN IVGRUPO1 IVG1 ON IV.IDGRUPO1=IVG1.IDGRUPO1"
        sql = sql & " left JOIN IVGRUPO2 IVG2 ON IV.IDGRUPO2=IVG2.IDGRUPO2"
        sql = sql & " left JOIN IVGRUPO3 IVG3 ON IV.IDGRUPO3=IVG3.IDGRUPO3"
        sql = sql & " left JOIN IVGRUPO4 IVG4 ON IV.IDGRUPO4=IVG4.IDGRUPO4"
        sql = sql & " left JOIN IVGRUPO5 IVG5 ON IV.IDGRUPO5=IVG5.IDGRUPO5"
        sql = sql & " ON tbgyp18.idinventario = iv.idinventario)"
        sql = sql & " Where iv.bandValida = 1 And iv.BandServicio = 0"
        sql = sql & " order by IV.codalterno2, IV.DESCRIPCION " 'IVG5.CODGRUPO5, IVG3.CODGRUPO3, IV.DESCRIPCION"



                   
        rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
        UltimoRecordset rs
        Set CargaBufferGyp = rs
        
    End With
        
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Buffer Gyp", "VT"
End Function

Public Function RecuperaDatosUltimaCompraItemxProvPrincipal(ByVal CodInventario As String) As Variant
    Dim sql As String
    Dim rs As Recordset

    sql = "select top 1"
    sql = sql & " codinventario, pc.nombre,cantidad, costounitario, max(fecha) from ivinventario iv"
    sql = sql & " inner join IVProveedorDetalle ivpd"
    sql = sql & " inner join pcprovcli pc"
    sql = sql & " on pc.idprovcli = ivpd.idproveedor"
    sql = sql & " on iv.idinventario= ivpd.idinventario"
    sql = sql & " where bandprincipal=1 "
    sql = sql & " and codinventario='" & CodInventario & "'"
    sql = sql & " group by codinventario, pc.nombre,cantidad, costounitario"
    sql = sql & " order by max(fecha) desc"
    
    Set rs = Me.OpenRecordset(sql)
    
    If rs.RecordCount > 0 Then
        Set RecuperaDatosUltimaCompraItemxProvPrincipal = rs
    Else
        Set RecuperaDatosUltimaCompraItemxProvPrincipal = rs
    End If
    Set rs = Nothing
End Function

Public Function ConsGNTrans2BuscaAsientoDuplicado( _
                    Optional ByVal OrdenAscendente As Boolean) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    '*** MAKOTO 03/oct/00
    sql = "SELECT"
    sql = sql & " '0' as a,  codasiento, count(codasiento) from gncomprobante"
    sql = sql & " Where CodAsiento <> 0"
    sql = sql & " group by codasiento"
    sql = sql & " Having Count(CodAsiento) > 1"

    Set rs = Me.OpenRecordset(sql)
    Set ConsGNTrans2BuscaAsientoDuplicado = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "ConsGNTrans2BuscaAsientoDuplicado", "GN"
End Function




Public Function ConsGNTrans2AsientoDuplicado(ByVal CodAsiento As Long) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    '*** MAKOTO 03/oct/00
    sql = "SELECT"
    sql = sql & " TransID, FechaTrans, CodAsiento, CodTrans, "
    sql = sql & " NumTrans,   "
    sql = sql & " NumDocRef, Nombre, Descripcion , '' as codcentro, "
    sql = sql & " Estado, '' as estadoL  "
    sql = sql & " FROM gncomprobante "
    sql = sql & " WHERE CodAsiento= " & CodAsiento
    
    
    sql = sql & " ORDER BY gncomprobante.TransID"         '*** MAKOTO 07/dic/00 Modificado para HoraTrans
    
    Set rs = Me.OpenRecordset(sql)
    Set ConsGNTrans2AsientoDuplicado = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "ConsGNTrans2AsientoDuplicado", "GN"
End Function


Public Sub BorraAsientoDuplicado(ByVal CodAsiento As Long)
    Dim sql As String, cond As String, s As String, rs As Recordset
    '*** MAKOTO 03/oct/00
    sql = "delete ctlibrodetalle where codasiento=" & CodAsiento
    Set rs = Me.OpenRecordset(sql)
    sql = " update gncomprobante set CodAsiento=0 "
    sql = sql & " WHERE CodAsiento= " & CodAsiento
    Set rs = Me.OpenRecordset(sql)
    Me.GrabaGNLogAccion "CONSULTA", "ConsGNTrans2AsientoDuplicado", "GN"
End Sub

Public Function ListaFichaFlex() As Variant
    Dim sql As String
    Dim rs As Recordset
    sql = "SELECT  cedula,Nombre FROM Ficha"
    sql = sql & " ORDER BY Nombre"
    Set rs = Me.OpenRecordset(sql)
    If Not (rs.EOF) Then
        rs.MoveLast
        rs.MoveFirst
        ListaFichaFlex = rs.GetRows(rs.RecordCount)
    Else
        Set ListaFichaFlex = rs
  End If
    Set rs = Nothing
End Function

Public Function ListaFichasNew(Ced As String, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT idFicha,Historia,Cedula,Nombre,Direccion,Telefono FROM Ficha"
    If Len(Ced) > 0 Then
        sql = sql & " Where cedula = '" & Ced & "'"
    End If
    sql = sql & " ORDER BY Nombre"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaFichasNew = rs
    Else
        ListaFichasNew = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function RecuperaPCFichaxTrans(key As Variant) As Ficha
    Dim obj As Ficha
    Set obj = New Ficha
    Set obj.objEmpresa = Me
    On Error Resume Next
    obj.RecuperarXTrans key
    If Err.Number = 0 Then Set RecuperaPCFichaxTrans = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function


Public Sub CreaVistaPantalla2Bodegas(ByVal cadbod As String)
Dim rs As Recordset
Dim sql As String, v As Variant, i As Integer
On Error GoTo CapturaError
    v = Split(cadbod, ",")
    For i = 0 To 1
        sql = "drop view vwExistencia0" & i + 1
        gobjMain.EmpresaActual.EjecutarSQL sql, 1
        
        sql = " CREATE view vwExistencia0" & i + 1
        sql = sql & " as"
        sql = sql & " select idinventario, ive.idbodega, exist from ivexist ive"
        sql = sql & " inner join ivbodega ivb"
        sql = sql & " on ive.idbodega=ivb.idbodega"
        sql = sql & " where ivb.Idbodega=" & v(i)
        

        gobjMain.EmpresaActual.EjecutarSQL sql, 1
    Next i
    
    
   Exit Sub
CapturaError:
        MsgBox Err.Description
        Exit Sub
End Sub

Public Function CreaTurnoRotativo() As clsTurnoRotativo
    Dim nuevo As clsTurnoRotativo
    Set nuevo = New clsTurnoRotativo
    Set nuevo.objEmpresa = Me
    Set CreaTurnoRotativo = nuevo
    Set nuevo = Nothing
End Function

Public Function ListaTurnoRotativo(BandRS As Boolean, IdTurno As Variant) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT idTurnoR,Entrada,Salida,inicioREceso,finreceso,DesdeH25,HastaH25 FROM RTurnoRotativo "
    sql = sql & "Where idTurno = " & IdTurno
    sql = sql & " ORDER BY orden"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaTurnoRotativo = rs
    Else
        ListaTurnoRotativo = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaPCGrupoOrigenParaFlexGrid(NumGrupo As Integer, Origen As Integer) As String
    Dim sql As String, rs As Recordset, s As String
   sql = "SELECT CodGrupo" & NumGrupo & ",Descripcion FROM PCGrupo" & NumGrupo
    sql = sql & " WHERE BandValida=" & CadenaBool(True, TipoDB)
    sql = sql & " and origen= " & Origen
    sql = sql & " ORDER BY CodGrupo" & NumGrupo
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
'    s = "|" & GetStringDAO(rs)         '*** MAKOTO 07/ago/2000 Modificado
    If Not rs.EOF Then s = "|" & GetStringDAO(rs, 20 + 50)      '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|", "(nulo)")
#End If
    ListaPCGrupoOrigenParaFlexGrid = s
    rs.Close
    Set rs = Nothing
End Function

Public Function ListaGNEstadoProdxColor(color As String) As Variant
    Dim sql As String, rs As Recordset
        sql = "SELECT menu,color FROM GNestadoprod Where bandvalida = 1 "
        If Len(color) > 0 Then
            sql = sql & "And color = '" & color & "'"
        Else
            sql = sql & "And menu <> 'Ver'"
        End If
        Set rs = Me.OpenRecordset(sql)
        Set ListaGNEstadoProdxColor = rs
    Set rs = Nothing
End Function
Public Function RecuperarAsistenciaFiltroH(ByVal Desde As Date, ByVal Hasta As Date, Tipo As Integer, cod As String, TipoSeccion As Boolean) As Recordset
      Dim rs As Recordset
      Dim sql, k As String
      Dim finicio, ffin, dia As String
      Dim numG As Integer
      numG = gobjMain.EmpresaActual.GNOpcion.ObtenerValor("HORARIO") + 1
      finicio = CambiaFormatoFecha(Desde)
      ffin = CambiaFormatoFecha(Hasta)
'    If Not TipoSeccion Then
'        sql = "SELECT * FROM vwAsistenciaTotalHNoc "
'    Else
        sql = "select a.idempleado,pc.codprovcli,pc.nombre,pc.ruc,"
        Select Case numG
            Case 1: sql = sql & " CodGrupo1 as codGrupo,"
            Case 2: sql = sql & " CodGrupo2 as codGrupo,"
            Case 3: sql = sql & " CodGrupo3 as codGrupo,"
            Case 4: sql = sql & " CodGrupo4 as codGrupo,"
        End Select
        sql = sql & " t.codturno,"
        sql = sql & "DATEPART(dw, a.fecha) as dia,"
        sql = sql & " 'a' AS DiaSemana,"
        sql = sql & "a.fecha , Marca1, Marca2, Marca3, Marca4, Marca5, Marca6, Marca7, Marca8, Marca9, Marca10"
        sql = sql & ",marca11,marca12,marca13,marca14,marca15,marca16,marca17,marca18,marca19,marca20,"
        sql = sql & "'' AS THT,  '' AS EQHO,"
        sql = sql & "'' AS ATRAZO,"
        sql = sql & "'' AS EQAT,"
        sql = sql & "'' AS HREC,"
        sql = sql & "'' AS H25,"
        sql = sql & "'' AS H50,"
        sql = sql & "'' AS H100,"
        sql = sql & "'' AS FALTA,"
        sql = sql & "'' AS ASIST,"
        sql = sql & "'' AS diasREal,"
        sql = sql & "'' AS error,"
        sql = sql & "'' AS diasPer into tmp1"
        'sql = sql & " fRom rasistencia a inner join pcprovcli pc"
        sql = sql & " fRom rasistencia a inner join Empleado pc"

        sql = sql & " left JOIN pcgrupo1 p1 on p1.idgrupo1=pc.idgrupo1"
        sql = sql & " left JOIN pcgrupo2 p2 on p2.idgrupo2=pc.idgrupo2"
        sql = sql & " left JOIN pcgrupo3 p3 on p3.idgrupo3=pc.idgrupo3"
        sql = sql & " left JOIN pcgrupo4 p4 on p4.idgrupo4=pc.idgrupo4"
        sql = sql & " left JOIN RTurno t on t.idturno=pc.idturno"
        sql = sql & " on pc.idprovcli = a.idEMPLEADO"
    'End If
        sql = sql & " where pc.tipoturno = 1 And a.fecha between '" & CambiaFormatoFecha(Desde) & "' and '" & CambiaFormatoFecha(Hasta) & "'"
        If Not TipoSeccion Then 'es por empleado
        End If
    If Tipo = 1 Then
        If Len(cod) > 0 Then
            Select Case numG
                Case 1: sql = sql & " and p1.CodGrupo1 = '" & cod & "'"
                Case 2: sql = sql & " and p2.CodGrupo2 = '" & cod & "'"
                Case 3: sql = sql & " and p3.CodGrupo3 = '" & cod & "'"
                Case 4: sql = sql & " and p4.CodGrupo4 = '" & cod & "'"
            End Select
        End If
'    ElseIf Tipo = 2 Then
'        sql = sql & " and Turno.Codigo = '" & cod & "'"
    Else
        sql = sql & " and pc.codprovcli = '" & cod & "'"
    End If
        sql = sql & " Group by a.idempleado,pc.codprovcli,pc.nombre,pc.ruc, CodGrupo4, t.codturno, a.fecha , Marca1, Marca2, "
        sql = sql & "Marca3, Marca4, Marca5, Marca6, Marca7, Marca8, Marca9, Marca10,marca11,marca12,marca13,marca14,marca15,marca16,marca17,marca18,marca19,marca20"
        VerificaExistenciaTabla (1)
        Me.EjecutarSQL sql, 1
        sql = "select idempleado,fecha,pc.codProvcli,pc.nombre,pc.ruc,t.codturno,"
        Select Case numG
            Case 1: sql = sql & " CodGrupo1 as codGrupo,"
            Case 2: sql = sql & " CodGrupo2 as codGrupo,"
            Case 3: sql = sql & " CodGrupo3 as codGrupo,"
            Case 4: sql = sql & " CodGrupo4 as codGrupo "
        End Select
      sql = sql & "into tmp2 "
      sql = sql & "from rturnomensualdetalle rtd "
      sql = sql & " left join rturno t on t.idturno= rtd.idturno"
      'sql = sql & " inner join pcprovcli pc "
      sql = sql & " inner join Empleado pc "

      sql = sql & " left JOIN pcgrupo1 p1 on p1.idgrupo1=pc.idgrupo1"
      sql = sql & " left JOIN pcgrupo2 p2 on p2.idgrupo2=pc.idgrupo2"
      sql = sql & " left JOIN pcgrupo3 p3 on p3.idgrupo3=pc.idgrupo3"
      sql = sql & " left JOIN pcgrupo4 p4 on p4.idgrupo4=pc.idgrupo4"
      sql = sql & " on pc.idprovcli = rtd.idempleado "
      sql = sql & " Where fecha between '" & CambiaFormatoFecha(Desde) & "' and '" & CambiaFormatoFecha(Hasta) & "'"
      If Tipo = 1 Then
            If Len(cod) > 0 Then
            Select Case numG
                Case 1: sql = sql & " and p1.CodGrupo1 = '" & cod & "'"
                Case 2: sql = sql & " and p2.CodGrupo2 = '" & cod & "'"
                Case 3: sql = sql & " and p3.CodGrupo3 = '" & cod & "'"
                Case 4: sql = sql & " and p4.CodGrupo4 = '" & cod & "'"
            End Select
            End If
        Else   'es por empleado
            sql = sql & "And pc.codprovcli = '" & cod & "'"
        End If
      VerificaExistenciaTabla (2)
      Me.EjecutarSQL sql, 2
      'uno todo
        sql = "select distinct isnull(t2.idempleado,t1.idempleado) as idempleado,isnull(t2.codprovcli,t1.codprovcli) as codprovcli,"
        sql = sql & " isnull(t2.nombre,t1.nombre) as nombre,isnull(t2.ruc,t1.ruc) as ruc,"
        sql = sql & "isnull(t2.CodGrupo,t1.CodGrupo) as codgrupo,t2.codturno,isnull(DATEPART(dw, t2.fecha),DATEPART(dw, t1.fecha)) as dia,'a' as DiaSemana,"
        sql = sql & "isnull(t2.fecha,t1.fecha) as fecha,"
        sql = sql & "isnull(Marca1,'00:00:00') as marca1,"
        sql = sql & "isnull(Marca2,'00:00:00') as marca2,"
        sql = sql & "isnull(Marca3,'00:00:00') as marca3,"
        sql = sql & "isnull(Marca4,'00:00:00') as marca4,"
        sql = sql & "isnull(Marca5,'00:00:00') as marca5,"
        sql = sql & "isnull(Marca6,'00:00:00') as marca6,"
        sql = sql & "isnull(Marca7,'00:00:00') as marca7,"
        sql = sql & "isnull(Marca8,'00:00:00') as marca8,"
        sql = sql & "isnull(Marca9,'00:00:00') as marca9,"
        sql = sql & "isnull(Marca10,'00:00:00') as marca10,"
        sql = sql & "isnull(Marca11,'00:00:00') as marca11,"
        sql = sql & "isnull(Marca12,'00:00:00') as marca12,"
        sql = sql & "isnull(Marca13,'00:00:00') as marca13,"
        sql = sql & "isnull(Marca14,'00:00:00') as marca14,"
        sql = sql & "isnull(Marca15,'00:00:00') as marca15,"
        sql = sql & "isnull(Marca16,'00:00:00') as marca16,"
        sql = sql & "isnull(Marca17,'00:00:00') as marca17,"
        sql = sql & "isnull(Marca18,'00:00:00') as marca18,"
        sql = sql & "isnull(Marca19,'00:00:00') as marca19,"
        sql = sql & "isnull(Marca20,'00:00:00') as marca20,"
        sql = sql & " THT,EQHO,ATRAZO,EQAT,HREC,H25,H50,H100,FALTA,ASIST,diasREal "
       sql = sql & "from tmp1 t1 full join tmp2 t2 on t2.idempleado = t1.idempleado and t2.fecha = t1.fecha "
        sql = sql & "order by t2.nombre,t2.fecha "
        Set rs = Me.OpenRecordset(sql)
        If rs.RecordCount > 0 Then
        End If
        Set RecuperarAsistenciaFiltroH = rs
        Set rs = Nothing
End Function
Public Function RecuperarHorasRotativo(ByVal IdPersona As Long, ByVal fecha As Date) As Recordset
End Function
Public Function ListaPermisos(BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
        sql = "SELECT idPermiso,Codprovcli,Nombre,Codigo,HoraInicio,HoraFinal,fechaInicio,FechaFinal,observa,Autoriza"
        'sql = sql & " FROM RPermiso p inner join pcprovcli pc on pc.idprovcli = p.idempleado"
        sql = sql & " FROM RPermiso p inner join Empleado pc on pc.idprovcli = p.idempleado"

        sql = sql & " Inner join RMotivo m on m.idMotivo=p.idmotivo"
        sql = sql & " ORDER BY FechaInicio"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPermisos = rs
    Else
        ListaPermisos = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function
Public Function CreaPermiso() As clsPermiso
    Dim obj As clsPermiso
    Set obj = New clsPermiso
    Set obj.objEmpresa = Me
    Set CreaPermiso = obj
    Set obj = Nothing
End Function
Public Function ListaRelojMotivo(BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT Codigo,Descripcion"
    sql = sql & " FROM RMotivo "
    sql = sql & " ORDER BY Codigo"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaRelojMotivo = rs
    Else
        ListaRelojMotivo = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function
Public Function CreaRMotivo() As clsMotivo
    Dim obj As clsMotivo
    Set obj = New clsMotivo
    Set obj.objEmpresa = Me
    Set CreaRMotivo = obj
    Set obj = Nothing
End Function
Public Function ListaMotivoPermiso(BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
        sql = "SELECT idMotivo,codigo,descripcion,Remunerado"
        sql = sql & " FROM RMotivo"
        sql = sql & " ORDER BY codigo"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaMotivoPermiso = rs
    Else
        ListaMotivoPermiso = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function
Public Function RecuperaRMotivo(key As Variant) As clsMotivo
    Dim obj As clsMotivo
    Set obj = New clsMotivo
    Set obj.objEmpresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaRMotivo = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function
Public Function RecuperaRPermiso(key As Variant) As clsPermiso
    Dim obj As clsPermiso
    Set obj = New clsPermiso
    Set obj.objEmpresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaRPermiso = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function
Public Function ListaFeriado(BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
        sql = "SELECT *"
        sql = sql & " FROM RFeriado"
        sql = sql & " ORDER BY Fecha"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaFeriado = rs
    Else
        ListaFeriado = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function
Public Function CreaFeriado() As clsFeriado
    Dim obj As clsFeriado
    Set obj = New clsFeriado
    Set obj.objEmpresa = Me
    Set CreaFeriado = obj
    Set obj = Nothing
End Function
'AUC
Public Function EsPermiso(ByVal Desde As Date, ByVal Hasta As Date, ByVal IdPersona As Long) As Recordset
        Dim finicio, ffin, dia As String
        finicio = CambiaFormatoFecha(Desde)
        ffin = CambiaFormatoFecha(Hasta)
      Dim rs As Recordset
      Dim sql
    sql = "SELECT * FROM RPermiso WHERE "
    sql = sql & " FechaInicio <= '" & finicio & "' AND Fechafinal >='" & finicio & "'"
    sql = sql & " AND idEmpleado = " & IdPersona & ""
      Set rs = Me.OpenRecordset(sql)
      If rs.RecordCount > 0 Then
      End If
      Set EsPermiso = rs
      Set rs = Nothing
End Function
Public Function EliminaRPermiso(key As Variant) As clsPermiso
    Dim nuevo As clsPermiso
    Set nuevo = New clsPermiso
    Set nuevo.objEmpresa = Me
    nuevo.BorradoFisico (key)
    Set EliminaRPermiso = nuevo
    Set nuevo = Nothing
End Function

Public Function ListaPCEmp(BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT pc.CodProvCli, pc.Nombre "
    sql = sql & " FROM Empleado pc INNER JOIN Personal p on p.idEmpleado = pc.idprovcli "
    sql = sql & " WHERE BandEmpleado=" & CadenaBool(True, TipoDB)
    sql = sql & " AND p.bandactivo = 1"
    sql = sql & " ORDER BY Nombre"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCEmp = rs
    Else
        ListaPCEmp = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function
Public Function RecuperaRFeriado(key As Variant) As clsFeriado
    Dim obj As clsFeriado
    Set obj = New clsFeriado
    Set obj.objEmpresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaRFeriado = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function
Public Function RecuperarTurnoRotativo(ByVal Codturno As String) As Recordset
      Dim rs As Recordset
      Dim sql As String
      sql = " select rt.*,ct.TolEntrada,ct.TolEntradarec,ct.Insuficiente,ct.exceso,ct.marcas,ct.TolRecesoHE  "
      sql = sql & " from rturnorotativo rt inner join rturno t on t.idturno = rt.idturno "
      sql = sql & "Inner Join rconfigTurno ct on ct.idturno = rt.idturno"
      sql = sql & " Where t.codturno = '" & Codturno & "'"
      Set rs = Me.OpenRecordset(sql)
      If rs.RecordCount > 0 Then
      End If
      Set RecuperarTurnoRotativo = rs
      Set rs = Nothing
End Function

 'AUC para ecuamueble
Public Function ListaIVKProcesosMantenimiento() As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset, rsE As Recordset, rsA As Recordset
    Dim rsAnt As Recordset
    Dim Sec As Integer, mboContinua As Boolean
    Dim cadena As String
    Dim TransOP As String
   On Error GoTo CapturaError
        If Len(Me.GNOpcion.ObtenerValor("ProduccionTransOP")) > 0 Then
            TransOP = Me.GNOpcion.ObtenerValor("ProduccionTransOP")
        Else
            Err.Raise MSGERR_INVALIDO, "Empresa_TransOrdenProduccion", "No esta Configurado para tipo trans OP "
        End If
       sql = "select DISTINCT gn.transid, ivkp.idkp,gn.codusuario,gn.NumTrans,iv.codinventario,pc.nombre,  "
        sql = sql & " gc.fechainicio,iv.descripcion+ivk.nota as descripcion,ivp.codproceso,ivkp.cantidad,ivkp.orden "
        sql = sql & " ,UPPER(ivkpO.codusuario),case when ivkp.estado1= 0 then  gne.color else gne1.color end as color "
        sql = sql & " from gncomprobante gn  "
        sql = sql & " inner join ivkardex ivk inner join ivinventario iv  on iv.idinventario = ivk.idinventario"
        sql = sql & " on ivk.transid = gn.transid inner join pcprovcli pc on pc.idprovcli= gn.idclienteref "
        sql = sql & " inner join gncentrocosto gc on gc.idcentro = gn.idcentro "
        sql = sql & " inner join ivkproceso ivkp inner join ivproceso ivp on ivp.idproceso = ivkp.idproceso "
        sql = sql & " left join ivkproceso ivkpO ON ivkpO.idkp = ivkp.idkpasignado"
        sql = sql & " Left join gnestadoprod gne on gne.valor= ivkp.estado"
        sql = sql & " Left join gnestadoprod gne1 on gne1.valor= ivkp.estado1"
        sql = sql & " on ivkp.transid = gn.transid"
        sql = sql & " Where ivkp.idcentrodet = 0" ' and ivkp.estado1= 0"
        sql = sql & " And gn.estado <> 3 And iv.tipo = 6 And GN.codtrans = '" & TransOP & "'"
       sql = sql & " And ivp.secuencia = 1"
        sql = sql & " And ivkp.estado1 NOT in (select valor from gnestadoprod where menu = 'lISTO')"
        sql = sql & " And ivkp.FechaInicio <= '" & Date & "'"
        sql = sql & " Order by ivkp.orden"
        Set rs = Me.OpenRecordset(sql)
     Set ListaIVKProcesosMantenimiento = rs
       Set rs = Nothing
        Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function

Public Function ListaGNEstadoProdMant(BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
        sql = "SELECT CodEstado,descripcion,menu,valor FROM GNestadoprod where menu='Prioridad'"
        sql = sql & " ORDER BY Codestado"
        Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaGNEstadoProdMant = rs
    Else
        ListaGNEstadoProdMant = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaElementosAfectaSaldoEmp() As Recordset
    Dim sql As String, rs As Recordset
    Dim band As Boolean
    Dim cond As String
    sql = "SELECT * FROM Elemento where afectaemp = 1 "
    Set rs = Me.OpenRecordset(sql)
    Set ListaElementosAfectaSaldoEmp = rs
    Set rs = Nothing
End Function

Public Function ObtieneDesctoPCxIVxFechaxCantMin(ByVal CodIVGrupo As String, ByVal codPC As String, ByVal codFC As String, ByRef CodDescuento As String, ByRef FechaTrans As Date, ByRef HoraTrans As Date, ByRef CantMin As Currency, ByVal bandMayorDesc As Boolean) As Double
Dim sql As String, rs As Recordset, NumIVGrupo As Integer, NumPCGrupo As Integer
    CodDescuento = ""
    NumIVGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumIVGrupo")) + 1
    NumPCGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumPCGrupo")) + 1
'    If bandMayorDesc Then 'Revisa el descuento mayor con cant min por ivgrupo y pcgrupo
      sql = " select top 1"
        sql = sql & " ivD.codDescuento as codDesc,"
        sql = sql & " case when ivdiv.Descuento-Penal>0 then ivdiv.Descuento-Penal else 0 end as TotalDesc, ivdiv.cantmin,"
        sql = sql & " ivd.IdDescuento , ivd.BandCaducidad, ivd.FechaDesde, ivd.FechaHasta, ivd.HoraDesde, ivd.HoraHasta "
        
        sql = sql & " from  IVDescuento ivd"
        sql = sql & " left join ivdescuentodetallepc ivdpc  on ivd.iddescuento=ivdpc.iddescuento"
        sql = sql & " left join ivdescuentodetalleiv ivdiv"
        sql = sql & " inner join ivinventario ivi  on ivdiv.idinventario=ivi.idinventario"
        sql = sql & " on ivd.iddescuento=ivdiv.iddescuento"
        sql = sql & " left join ivdescuentodetallefc ivdfc"
        sql = sql & " inner join TsFormaCobroPago tsf  on ivdfc.idforma=tsf.idforma"
        sql = sql & " on ivd.iddescuento=ivdfc.iddescuento"
        
'        sql = sql & " From"
'        sql = sql & " ivdescuentodetallepc ivdpc "
'        sql = sql & " left join ivdescuentodetalleiv ivdiv "
'        sql = sql & " inner join ivinventario ivi on ivdiv.idinventario=ivi.idinventario"
'        sql = sql & " left join ivgrupo" & NumIVGrupo & " ivg "
'       sql = sql & " on ivdiv.IdIVGrupo = ivg.idgrupo" & NumIVGrupo
'        sql = sql & " left join ivdescuentodetallefc ivdfc "
'       sql = sql & " inner join TsFormaCobroPago tsf "
'        sql = sql & " on ivdfc.idforma=tsf.idforma"
'        sql = sql & " inner join ivdescuento ivd"
'        sql = sql & " on ivd.iddescuento=ivdfc.iddescuento"
'        sql = sql & " on ivd.iddescuento=ivdiv.iddescuento"
'        sql = sql & " on ivd.iddescuento=ivdpc.iddescuento"
        sql = sql & " WHERE "
        sql = sql & " ivd.BandValida=1  "
        sql = sql & " and ivi.codinventario='" & CodIVGrupo & "'"

        sql = sql & " and tsf.codforma='" & codFC & "'"
        sql = sql & " and bandTodoCliente=1 "
        sql = sql & " order by ivdiv.cantMin desc"
   Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        If rs.Fields("BandCaducidad") Then
            If FechaTrans >= rs.Fields("FechaDesde") And FechaTrans <= rs.Fields("FechaHasta") Then
                ObtieneDesctoPCxIVxFechaxCantMin = rs!TotalDesc
                CodDescuento = rs!codDesc
                CantMin = rs!CantMin
            Else
                ObtieneDesctoPCxIVxFechaxCantMin = 0
                CodDescuento = "" ' 0
            End If
        Else
                ObtieneDesctoPCxIVxFechaxCantMin = rs!TotalDesc
                CodDescuento = rs!codDesc
        End If
    End If
    Set rs = Nothing
End Function
Public Function VerificarCambioCobroPagoCHP(Id As Long, ByRef Trans As String, ByRef num As Long, Optional ByRef Valor As Currency) As Boolean
    Dim sql  As String, rs As Recordset
    sql = " select codtrans,numtrans,Haber from pckardexCHP p inner join gncomprobante g"
    sql = sql & " on p.transid=g.transid"
    sql = sql & " where idasignado=" & Id
    sql = sql & " and estado <>3"
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        Trans = rs.Fields("codtrans")
        num = rs.Fields("numtrans")
        Valor = rs.Fields("Haber")
        VerificarCambioCobroPagoCHP = True
    Else
        VerificarCambioCobroPagoCHP = False
    End If
End Function

Public Function ListaTurnoRotativo2(BandRS As Boolean) As Variant
   Dim sql As String, rs As Recordset
    sql = "SELECT codturno,Entrada,Salida,DesdeH25,HastaH25 FROM RTurnoRotativo RT "
    sql = sql & " Inner Join RTurno t on t.idturno = rt.idturno"
    sql = sql & " ORDER BY orden"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaTurnoRotativo2 = rs
    Else
        ListaTurnoRotativo2 = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

'/-------------- ROCAR
Public Function RecuperaIdSolicitud(ByVal transid As Long, BandCliente As Byte) As Long
Dim rs As Recordset, sql As String
    RecuperaIdSolicitud = 0
    sql = "select id "
    sql = sql & " from PCSolCreProvCli"
    sql = sql & " where IdTransFuente=" & transid
    sql = sql & " and TipoSolicitud=" & BandCliente
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        If rs.Fields("id") > 0 Then
            RecuperaIdSolicitud = rs.Fields("id")
        End If
    End If
    Set rs = Nothing
End Function
Public Function VerificaNumeroGarantias(ByVal CodGarante As String, ByRef num As Integer) As Boolean
Dim rs As Recordset, sql As String
    VerificaNumeroGarantias = False
    num = 0
    sql = " SELECT CodProvCli, Nombre,"
    sql = sql & " count(Valor2) as cant,"
    sql = sql & " sum(Valor2)  AS Valor,"
    sql = sql & " sum(VCancelado2) AS VCancelado,"
    sql = sql & " sum(Valor2 - VCancelado2) AS Saldo,"
    sql = sql & " CodGarante , NombreGarante"
   sql = sql & " From vwConsPCPorCobrarPagar"
   sql = sql & " Where    (CodMoneda= 'usd') AND"
    sql = sql & "(Valor2 - VCancelado2 >0) AND"
    sql = sql & " ( (BandProveedor = 0) OR (BandCliente = 1) )"
    sql = sql & " and codgarante='" & CodGarante & "'"
    sql = sql & " group by    CodProvCli,     Nombre, CodGarante, NombreGarante"
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        num = rs.RecordCount
        VerificaNumeroGarantias = True
    End If
    Set rs = Nothing
End Function
Public Function RecuperaIdSolicitudNew(ByVal transid As Long, TipoSolicitud As Integer) As Long
Dim rs As Recordset, sql As String
    RecuperaIdSolicitudNew = 0
    sql = "select id "
    sql = sql & " from PCSolCreProvCli"
    sql = sql & " where IdTransFuente=" & transid
    sql = sql & " and TipoSolicitud=" & TipoSolicitud
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        If rs.Fields("id") > 0 Then
            RecuperaIdSolicitudNew = rs.Fields("id")
        End If
    End If
    Set rs = Nothing
End Function
Public Function RecuperaSolicituClienteNew(ByVal IdTransFuente As Long, ByVal CodCli As String, TipoSolicitud As Integer, ByRef BandCliente As Boolean) As Boolean
    Dim sql As String, rs As Recordset
    sql = "select bandAprobado, bandcliente from vwPCSolCreProvCli "
    sql = sql & " WHERE codprovcli ='" & CodCli & "'"
    sql = sql & " and idtransfuente=" & IdTransFuente
    sql = sql & " and TipoSolicitud=" & TipoSolicitud
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        BandCliente = rs.Fields("bandcliente")
        If rs.Fields("bandAprobado") Then
            RecuperaSolicituClienteNew = True
        Else
            RecuperaSolicituClienteNew = False
        End If
    Else
        RecuperaSolicituClienteNew = False
    End If
    Set rs = Nothing
End Function
Public Function RecuperaGNComprobantexIdAsignado(IdAsignado As Long, _
                                      Optional CodTrans As String, _
                                      Optional NumTrans As Long) As GNComprobante
    Dim sql As String, rs As Recordset, transid As Long
    Dim obj As GNComprobante
    sql = " select g.transid from gncomprobante g inner join pckardex p"
    sql = sql & " on g.transid=p.transid"
    sql = sql & " where id=" & IdAsignado
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        transid = rs.Fields("transid")
      Set obj = New GNComprobante
      Set obj.Empresa = Me
      On Error Resume Next
      'jeaa 09/05/2005 para igualar la hora con el servidor
      If obj.Empresa.GNOpcion.ObtenerValor("IgualarHora") = "1" Then
          AjustaHoraServidor
      End If
      obj.Recuperar transid, CodTrans, NumTrans
      If Err.Number = 0 Then Set RecuperaGNComprobantexIdAsignado = obj
    End If
   Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function
Public Function CalculaValorSaldoCapital(ByVal transid As Long) As Currency
    Dim sql As String, rs As Recordset
    Dim deuda As Currency, pago As Currency
    sql = " select sum(debe) as deuda"
    sql = sql & " from gncomprobante g"
    sql = sql & " inner join pckardex p"
    sql = sql & " on g.transid=p.transid"
    sql = sql & " Where g.Estado <> 3"
    sql = sql & " and g.transid=" & transid
    sql = sql & " and p.numletra like '%CAP%'"
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        deuda = rs.Fields("deuda")
    Else
        deuda = 0
    End If
    sql = "select   sum(pp.Haber) as pago"
    sql = sql & " from gncomprobante g"
    sql = sql & " inner join pckardex p"
    sql = sql & " inner join pckardex pp"
    sql = sql & " inner join gncomprobante gg"
    sql = sql & " on gg.transid=pp.transid"
    sql = sql & " on p.id=pp.idasignado"
    sql = sql & " on g.transid=p.transid"
    sql = sql & " Where g.Estado <> 3 And gg.Estado <> 3"
    sql = sql & " and g.transid=" & transid
    sql = sql & " and pp.numletra like '%CAP%'"
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        pago = rs.Fields("pago")
   Else
        pago = 0
   End If
    CalculaValorSaldoCapital = deuda - pago
    Set rs = Nothing
End Function
Public Function RecuperaValorFinanciamiento(ByVal Id As Long, TipoValor As Integer, NumValor As Integer) As Currency
Dim rs As Recordset, sql As String
    RecuperaValorFinanciamiento = 0
    sql = "select  "
    Select Case TipoValor
        Case 1: sql = sql & "ValorCapital" & NumValor
        Case 2: sql = sql & "ValorInteres" & NumValor
        Case 3: sql = sql & "TasaInteres" & NumValor
    End Select
    sql = sql & " as Valor"
    sql = sql & " from PCFinanciamiento"
    sql = sql & " where IdPCKardex=" & Id
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        RecuperaValorFinanciamiento = rs.Fields("Valor")
    End If
    Set rs = Nothing
End Function
Public Function RecuperaCapitalPagado(ByVal Id As Long, TipoValor As Integer, NumValor As Integer) As Currency
Dim rs As Recordset, sql As String
    RecuperaCapitalPagado = 0
    sql = "select  "
    Select Case TipoValor
        Case 1: sql = sql & "ValorCapital" & NumValor
        Case 2: sql = sql & "ValorInteres" & NumValor
        Case 3: sql = sql & "TasaInteres" & NumValor
    End Select
    sql = sql & " as Valor"
    sql = sql & " from PCFinanciamiento"
    sql = sql & " where transid=" & Id
    sql = "select   sum(pp.Haber) as pago, "
    Select Case TipoValor
        Case 1: sql = sql & "sum(ValorCapital" & NumValor
        Case 2: sql = sql & "sum(ValorInteres" & NumValor
        Case 3: sql = sql & "sum(TasaInteres" & NumValor
    End Select
        sql = sql & ") as Valor"
    sql = sql & " from gncomprobante g"
    sql = sql & " inner join pckardex p inner join PCFinanciamiento pcf on p.id=pcf.idpckardex"
    sql = sql & " inner join pckardex pp"
    sql = sql & " inner join gncomprobante gg"
    sql = sql & " on gg.transid=pp.transid"
    sql = sql & " on p.id=pp.idasignado"
    sql = sql & " on g.transid=p.transid"
    sql = sql & " Where g.Estado <> 3 And gg.Estado <> 3"
    sql = sql & " and g.transid=" & Id
    sql = sql & " and pp.numletra like '%CAP%'"
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        RecuperaCapitalPagado = rs.Fields("Valor")
    End If
    Set rs = Nothing
End Function
Public Function RecuperaTotalFinanciamiento(ByVal transid As Long, TipoValor As Integer, NumValor As Integer) As Currency
Dim rs As Recordset, sql As String
    RecuperaTotalFinanciamiento = 0
    sql = "select  "
    Select Case TipoValor
        Case 1: sql = sql & "sum(ValorCapital" & NumValor
        Case 2: sql = sql & "sum(ValorInteres" & NumValor
        Case 3: sql = sql & "sum(TasaInteres" & NumValor
    End Select
    sql = sql & ") as Valor"
    sql = sql & " from "
    sql = sql & " pckardex p inner join PCFinanciamiento pcf on p.id=pcf.idpckardex"
    sql = sql & " where pcf.TransId=" & transid
    sql = sql & " and p.numletra like '%CAP%'"
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        RecuperaTotalFinanciamiento = rs.Fields("Valor")
    End If
    Set rs = Nothing
End Function
Public Function RecuperaPCSolCreProvCli(key As Variant) As PCSolCreProvCli
    Dim obj As PCSolCreProvCli
    Set obj = New PCSolCreProvCli
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaPCSolCreProvCli = obj
   Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function
Public Function CreaPCSolCreProvCli() As PCSolCreProvCli
    Dim obj As PCSolCreProvCli
    Set obj = New PCSolCreProvCli
    Set obj.Empresa = Me
    Set CreaPCSolCreProvCli = obj
    Set obj = Nothing
End Function
Public Function ConsTSPorCobrarPagarVendeCapInt( _
                    ByVal PorCobrar As Boolean, _
                    ByVal CodProvcli As String, _
                   ByVal FechaVenci As Date, _
                    ByVal CodForma As String, _
                    ByVal CodMoneda As String, _
                    ByVal CodGrupo1 As String, _
                    ByVal CodVendedor As String) As Variant
    Dim aux_codpc As String, aux_f1 As Date, aux_f2 As Date
    Dim aux_PorCobrar As Boolean, aux_Cliente As Boolean, aux_Proveedor As Boolean
    Dim aux_CodForma As String, aux_CodMoneda As String, aux_codgrupo As String
    Dim aux_incluircero As Boolean, aux_codVendedor As String
   With gobjMain.objCondicion
        'Conservar valores actuales para que no afecte a otras consultas
        aux_codpc = .CodPC1
        aux_f1 = .fecha1
        aux_f2 = .fecha2
        aux_PorCobrar = .PorCobrar
        aux_Cliente = .Cliente
        aux_Proveedor = .Proveedor
        aux_CodForma = .CodForma
        aux_CodMoneda = .CodMoneda
        aux_codgrupo = .CodGrupo
        aux_incluircero = .IncluirCero
        aux_codVendedor = .Usuario1
        .PorCobrar = PorCobrar
        .Cliente = True
        .Proveedor = True
        .CodPC1 = CodProvcli
        .fecha1 = Me.GNOpcion.FechaInicio
        .fecha2 = FechaVenci
        .CodForma = CodForma
        .CodMoneda = CodMoneda
        .CodGrupo = CodGrupo1
        .IncluirCero = False
        .Usuario1 = CodVendedor
        Set ConsTSPorCobrarPagarVendeCapInt = ConsTSPorCobrarPagarVendedorCapInt()
        'Recuperar valores reservados
        .CodPC1 = aux_codpc
        .fecha1 = aux_f1
        .fecha2 = aux_f2
        .PorCobrar = aux_PorCobrar
        .Cliente = aux_Cliente
        .Proveedor = aux_Proveedor
        .CodForma = aux_CodForma
        .CodMoneda = aux_CodMoneda
        .CodGrupo = aux_codgrupo
        .IncluirCero = aux_incluircero
        .Usuario1 = aux_codVendedor
    End With
End Function
Public Function ConsTSPorCobrarPagarVendedorCapInt() As Variant
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim objCond As Condicion
    Set objCond = gobjMain.objCondicion
    'Si no está especificada la moneda, coge la Moneda predeterminada
    If Len(objCond.CodMoneda) = 0 Then objCond.CodMoneda = MONEDA_PRE
    numMoneda = Me.GNOpcion.IndiceMoneda(objCond.CodMoneda)
#If DAOLIB Then
    sql = "SELECT Id, CodProvCli, Nombre, TransID, CodTrans, Trans, CodForma,NumLetra, Doc, "
    Select Case numMoneda
    Case 1:  sql = sql & "Valor1 AS Valor, VCancelado1 AS VCancelado, " & _
                          "Valor1-VCancelado1 AS Saldo, CodMoneda, Cancela, 1 AS Cotizacion, "
    Case 2:  sql = sql & "Valor2 AS Valor, VCancelado2 AS VCancelado, " & _
                          "Valor2-VCancelado2 AS Saldo, CodMoneda, Cancela, Cotizacion2 AS Cotizacion, "
    Case 3:  sql = sql & "Valor3 AS Valor, VCancelado3 AS VCancelado, " & _
                          "Valor3-VCancelado3 AS Saldo, CodMoneda, Cancela, Cotizacion3 AS Cotizacion, "
    Case 4:  sql = sql & "Valor4 AS Valor, VCancelado4 AS VCancelado, " & _
                          "Valor4-VCancelado4 AS Saldo, CodMoneda, Cancela, Cotizacion4 AS Cotizacion, "
    End Select
    sql = sql & "FechaEmision, Plazo, FechaVenci "
    If objCond.PorCobrar Then
        sql = sql & " FROM vwConsPCPorCobrar "
    Else
        sql = sql & " FROM vwConsPCPorPagar "
    End If
    'Solo los que tengan saldo >0   (Necesario)
    cond = "(Valor" & objCond.numMoneda & ">VCancelado" & objCond.numMoneda & ")"
    'Condición de FechaVenci    (Necesario)             '*** MAKOTO 10/dic/00 Modificado
    cond = cond & " AND (FechaVenci BETWEEN " & _
                    FechaYMD(objCond.fecha1, TipoDB) & " AND " & _
                    FechaYMD(objCond.fecha2, TipoDB) & ")"
    'Condición de CodMoneda     (Necesario)
    If Len(cond) > 0 Then cond = cond & " AND "
    cond = cond & "(CodMoneda='" & Me.GNOpcion.CodMoneda(numMoneda) & "')"
    'Condición de CodProvCli    (Opcional)
    If Len(objCond.CodPC1) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodProvCli='" & objCond.CodPC1 & "')"
    End If
    'Condición de CodForma    (Opcional)
    If Len(objCond.CodForma) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodForma='" & objCond.CodForma & "')"
    End If
    'Condición de Cod. Grupo1 de prov/cliente (Opcional)
    If Len(objCond.CodGrupo) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodGrupo1='" & objCond.CodGrupo & "')"
    End If
    'Condición de si incluir cliente/proveedor          '*** MAKOTO 10/dic/00
    If Len(cond) > 0 Then cond = cond & " AND "
    cond = cond & "(BandCliente=" & CadenaBool(objCond.Cliente, TipoDB) & _
                    " OR BandProveedor=" & CadenaBool(objCond.Proveedor, TipoDB) & ")"
    If Len(cond) > 0 Then sql = sql & " WHERE (" & cond & ")"
    sql = sql & " ORDER BY CodProvCli,FechaVenci"
#Else
    sql = "spConsTSPorCobrarPagarVendedorCapInt " & numMoneda & ", " & _
               objCond.CodMoneda & "," & _
                CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                CadenaBool(objCond.Cliente, TipoDB) & "," & _
                CadenaBool(objCond.Proveedor, TipoDB) & "," & _
                FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                objCond.CodPC1 & "','" & _
                objCond.CodPC1 & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodGrupo & "','" & _
                objCond.Usuario1 & "','" & _
                objCond.Usuario1 & "'," & _
                IIf(Me.GNOpcion.Los100DocCobroPago, 1, 0)
#End If
    Set rs = Me.OpenRecordset(sql)
    Set ConsTSPorCobrarPagarVendedorCapInt = rs
    Set rs = Nothing
    Set objCond = Nothing
End Function
Public Function ConsTSPorCobrarPagarVendeMoraSucursalCapInt( _
                    ByVal PorCobrar As Boolean, _
                    ByVal CodProvcli As String, _
                    ByVal FechaVenci As Date, _
                    ByVal CodForma As String, _
                    ByVal CodMoneda As String, _
                    ByVal CodGrupo1 As String, _
                    ByVal CodVendedor As String, _
                    ByVal TasaMensual As Currency, _
                    ByVal diasGracia As Integer, _
                   ByVal CodSucursal As String) As Variant
    Dim aux_codpc As String, aux_f1 As Date, aux_f2 As Date
    Dim aux_PorCobrar As Boolean, aux_Cliente As Boolean, aux_Proveedor As Boolean
    Dim aux_CodForma As String, aux_CodMoneda As String, aux_codgrupo As String
    Dim aux_incluircero As Boolean, aux_codVendedor As String, aux_codSucursal As String
   With gobjMain.objCondicion
        'Conservar valores actuales para que no afecte a otras consultas
        aux_codpc = .CodPC1
        aux_f1 = .fecha1
        aux_f2 = .fecha2
        aux_PorCobrar = .PorCobrar
        aux_Cliente = .Cliente
        aux_Proveedor = .Proveedor
        aux_CodForma = .CodForma
        aux_CodMoneda = .CodMoneda
        aux_codgrupo = .CodGrupo
        aux_incluircero = .IncluirCero
        aux_codVendedor = .Usuario1
        aux_codSucursal = .Sucursal
       .PorCobrar = PorCobrar
        .Cliente = True
        .Proveedor = True
        .CodPC1 = CodProvcli
        .fecha1 = Me.GNOpcion.FechaInicio
        .fecha2 = FechaVenci
        .CodForma = CodForma
        .CodMoneda = CodMoneda
        .CodGrupo = CodGrupo1
        .IncluirCero = False
        .Usuario1 = CodVendedor
        .NumDias1 = diasGracia
        .TasaMensual = TasaMensual
        .NumDias2 = IIf(Len(Me.GNOpcion.ObtenerValor("NumDecimales")) > 0, Me.GNOpcion.ObtenerValor("NumDecimales"), 2)
        .Sucursal = CodSucursal
        Set ConsTSPorCobrarPagarVendeMoraSucursalCapInt = ConsTSPorCobrarPagarVendedorMoraSucursalCapInt()
       'Recuperar valores reservados
        .CodPC1 = aux_codpc
        .fecha1 = aux_f1
        .fecha2 = aux_f2
        .PorCobrar = aux_PorCobrar
        .Cliente = aux_Cliente
        .Proveedor = aux_Proveedor
        .CodForma = aux_CodForma
        .CodMoneda = aux_CodMoneda
        .CodGrupo = aux_codgrupo
        .IncluirCero = aux_incluircero
        .Usuario1 = aux_codVendedor
        .Sucursal = aux_codSucursal
   End With
End Function
Public Function ConsTSPorCobrarPagarVendedorMoraSucursalCapInt() As Variant
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim objCond As Condicion
    Set objCond = gobjMain.objCondicion
    'Si no está especificada la moneda, coge la Moneda predeterminada
    If Len(objCond.CodMoneda) = 0 Then objCond.CodMoneda = MONEDA_PRE
    numMoneda = Me.GNOpcion.IndiceMoneda(objCond.CodMoneda)
    sql = "spConsTSPorCobrarPagarVendedorMoraSucursalCapInt " & numMoneda & ", " & _
                objCond.CodMoneda & "," & _
                CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                CadenaBool(objCond.Cliente, TipoDB) & "," & _
                CadenaBool(objCond.Proveedor, TipoDB) & "," & _
                FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                objCond.CodPC1 & "','" & _
                objCond.CodPC1 & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodGrupo & "','" & _
                objCond.Usuario1 & "','" & _
                objCond.Usuario1 & "'," & _
                objCond.TasaMensual & "," & _
                objCond.NumDias1 & "," & _
                IIf(Me.GNOpcion.Los100DocCobroPago, 1, 0) & "," & _
                objCond.NumDias2 & ",'" & _
                objCond.Sucursal & "','" & _
                objCond.Sucursal & "'"
     If Me.GNOpcion.ObtenerValor("AplicaCalculoMensual") = "1" Then
        sql = sql & " ,0 "
     Else
        sql = sql & " ,1 "
     End If
    Set rs = Me.OpenRecordset(sql)
    Set ConsTSPorCobrarPagarVendedorMoraSucursalCapInt = rs
    Set rs = Nothing
    Set objCond = Nothing
End Function
Public Function ListaSolicitudCreditoPC(BandGarante As Boolean, _
                                       BandCliente As Boolean, _
                                       BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT pcs.id, "
    sql = sql & " case pcs.Tiposolicitud when 0 then 'CLIENTE' when 1 then 'GARANTE 1' else 'GARANTE 2' end as Tipo, "
    sql = sql & " pc.CodProvCli, pc.Nombre,"
    sql = sql & " pcs.FechaSolicitud, (gc.CodTrans+'-'+CONVERT(VARCHAR,gc.NumTrans)) AS Trans,"
    sql = sql & " pcs.MontoCredito, pcs.BandAprobado "
    sql = sql & " FROM PCProvCli pc "
    sql = sql & " Inner join PCSolCreProvCli pcs on pc.Idprovcli = pcs.IdProvcli"
    sql = sql & " left join GnComprobante gc on pcs.IdTransFuente = gc.Transid "
    If Not (BandGarante And BandCliente) Then
    End If
    sql = sql & " ORDER BY pcs.FechaSolicitud DESC"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaSolicitudCreditoPC = rs
    Else
        ListaSolicitudCreditoPC = MiGetRows(rs)
       rs.Close
   End If
    Set rs = Nothing
End Function
Public Function RecuperaUltimoSolicitud() As Long
    Dim sql As String, s As String
    Dim rs As Recordset, rs1 As Recordset
    sql = " select  top 1 id "
    sql = sql & " from PCSolCreProvCli "
    sql = sql & " order by Id desc "
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        RecuperaUltimoSolicitud = rs.Fields("id")
    Else
        RecuperaUltimoSolicitud = 0
    End If
    rs.Close
    Set rs = Nothing
End Function
Public Sub ActualizaNumeroSolicitud(ByVal num As Long)
    Dim sql As String, s As String
    Dim rs As Recordset, rs1 As Recordset
    sql = " DBCC CHECKIDENT (PCSolCreProvCli, RESEED," & num & ") "
    Set rs = Me.OpenRecordset(sql)
    Set rs = Nothing
End Sub
'AUC parametro codtrans ya no necesito quitar cuando se una con la version ultima
'Public Function ListaGnTransCotizacion(CodTrans As String, BandSoloValida As Boolean, BandRS As Boolean) As Variant
Public Function ListaGnTransCotizacion(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    Dim v As Variant, i As Long, cad As String
    Dim rs1 As Recordset
    'VerificaExistenciaTabla 1
    sql = "Select codtrans from gntrans where substring(Opcion, 243,1)= 'S'"
    Set rs1 = Me.OpenRecordset(sql)
    cad = ""
    Do While Not rs1.EOF
    'v = Split(CodTrans, ",")
    'For i = 0 To UBound(v)
        cad = cad & "'" & rs1!CodTrans & "',"
    'Next
        rs1.MoveNext
    Loop
    Set rs1 = Nothing
    cad = Mid(cad, 1, Len(cad) - 1)
    sql = "SELECT  (gc.CodTrans+'-'+CONVERT(VARCHAR,gc.NumTrans)) AS Trans, nombre "
    sql = sql & " FROM GNComprobante gc "
    sql = sql & " WHERE gc.Estado<>3 AND "
    sql = sql & " gc.CodTrans IN (" & cad & ")"
    If BandSoloValida Then
        sql = sql & " AND transid not in (select idtransfuente from gncomprobante where estado<>3)"
    End If
    sql = sql & " ORDER BY gc.CodTrans, gc.Numtrans"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaGnTransCotizacion = rs
    Else
        ListaGnTransCotizacion = MiGetRows(rs)
      rs.Close
   End If
    Set rs = Nothing
End Function
Public Function RecuperaGnTransID(Trans As String) As Long
    Dim sql As String, rs As Recordset
    Dim v As Variant
    v = Split(Trans, "-")
    sql = "SELECT  transid "
    sql = sql & " FROM GNComprobante gc "
    sql = sql & " WHERE (gc.Estado<>3) AND "
    sql = sql & "(gc.CodTrans = '" & v(0) & "')  "
    sql = sql & "and (gc.NumTrans = " & v(1) & ")  "
    Set rs = Me.OpenRecordset(sql)
    RecuperaGnTransID = rs.Fields("TransID")
    rs.Close
    Set rs = Nothing
End Function
Public Function ConsTSPorCobrarPagarVendeMoraSucursalCuota( _
                    ByVal PorCobrar As Boolean, _
                    ByVal CodProvcli As String, _
                    ByVal FechaVenci As Date, _
                    ByVal CodForma As String, _
                    ByVal CodMoneda As String, _
                    ByVal CodGrupo1 As String, _
                    ByVal CodVendedor As String, _
                    ByVal TasaMensual As Currency, _
                    ByVal diasGracia As Integer, _
                    ByVal CodSucursal As String) As Variant
    Dim aux_codpc As String, aux_f1 As Date, aux_f2 As Date
    Dim aux_PorCobrar As Boolean, aux_Cliente As Boolean, aux_Proveedor As Boolean
    Dim aux_CodForma As String, aux_CodMoneda As String, aux_codgrupo As String
    Dim aux_incluircero As Boolean, aux_codVendedor As String, aux_codSucursal As String
    With gobjMain.objCondicion
        'Conservar valores actuales para que no afecte a otras consultas
        aux_codpc = .CodPC1
        aux_f1 = .fecha1
        aux_f2 = .fecha2
        aux_PorCobrar = .PorCobrar
        aux_Cliente = .Cliente
        aux_Proveedor = .Proveedor
        aux_CodForma = .CodForma
        aux_CodMoneda = .CodMoneda
        aux_codgrupo = .CodGrupo
        aux_incluircero = .IncluirCero
        aux_codVendedor = .Usuario1
        aux_codSucursal = .Sucursal
        .PorCobrar = PorCobrar
        .Cliente = True
        .Proveedor = True
        .CodPC1 = CodProvcli
        .fecha1 = Me.GNOpcion.FechaInicio
        .fecha2 = FechaVenci
        .CodForma = CodForma
        .CodMoneda = CodMoneda
        .CodGrupo = CodGrupo1
        .IncluirCero = False
        .Usuario1 = CodVendedor
        .NumDias1 = diasGracia
        .TasaMensual = TasaMensual
        .NumDias2 = IIf(Len(Me.GNOpcion.ObtenerValor("NumDecimales")) > 0, Me.GNOpcion.ObtenerValor("NumDecimales"), 2)
        .Sucursal = CodSucursal
        Set ConsTSPorCobrarPagarVendeMoraSucursalCuota = ConsTSPorCobrarPagarVendedorMoraSucursalCuota()
        'Recuperar valores reservados
        .CodPC1 = aux_codpc
        .fecha1 = aux_f1
        .fecha2 = aux_f2
        .PorCobrar = aux_PorCobrar
        .Cliente = aux_Cliente
        .Proveedor = aux_Proveedor
        .CodForma = aux_CodForma
        .CodMoneda = aux_CodMoneda
        .CodGrupo = aux_codgrupo
        .IncluirCero = aux_incluircero
        .Usuario1 = aux_codVendedor
        .Sucursal = aux_codSucursal
    End With
End Function
Public Function ConsTSPorCobrarPagarVendedorMoraSucursalCuota() As Variant
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim objCond As Condicion
    Set objCond = gobjMain.objCondicion
    If Len(objCond.CodMoneda) = 0 Then objCond.CodMoneda = MONEDA_PRE
    numMoneda = Me.GNOpcion.IndiceMoneda(objCond.CodMoneda)
    sql = "spConsTSPorCobrarPagarVendedorMoraSucursalCuota " & numMoneda & ", " & _
                objCond.CodMoneda & "," & _
                CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                CadenaBool(objCond.Cliente, TipoDB) & "," & _
                CadenaBool(objCond.Proveedor, TipoDB) & "," & _
                FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                objCond.CodPC1 & "','" & _
                objCond.CodPC1 & "','" & _
                objCond.CodForma & "I','" & _
                objCond.CodForma & "','" & _
                objCond.CodGrupo & "','" & _
                objCond.Usuario1 & "','" & _
                objCond.Usuario1 & "'," & _
                objCond.TasaMensual & "," & _
                objCond.NumDias1 & "," & _
                IIf(Me.GNOpcion.Los100DocCobroPago, 1, 0) & "," & _
                objCond.NumDias2 & ",'" & _
                objCond.Sucursal & "','" & _
                objCond.Sucursal & "'"
     If Me.GNOpcion.ObtenerValor("AplicaCalculoMensual") = "1" Then
        sql = sql & " ,0 "
     Else
        sql = sql & " ,1 "
     End If
    Set rs = Me.OpenRecordset(sql)
    Set ConsTSPorCobrarPagarVendedorMoraSucursalCuota = rs
    Set rs = Nothing
    Set objCond = Nothing
End Function
Public Function ConsTSPorCobrarPagarVendedorMoraSucursalCuota_R(ByVal mbooPorCobrar As Boolean, _
                                                              ByVal codPC As String, _
                                                              ByVal f As Date, _
                                                              ByVal codF As String, _
                                                              ByVal codg1 As String, _
                                                              ByVal CodVen As String, _
                                                              ByVal Tasa As Currency, _
                                                              ByVal diasGracia As Long, _
                                                              ByVal CodSucursal As String, ByVal fTrans As Date) As Variant
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim objCond As Condicion
    Set objCond = gobjMain.objCondicion
    If Len(objCond.CodMoneda) = 0 Then objCond.CodMoneda = MONEDA_PRE
    numMoneda = Me.GNOpcion.IndiceMoneda(objCond.CodMoneda)
    objCond.PorCobrar = mbooPorCobrar
    objCond.Cliente = mbooPorCobrar
    objCond.Proveedor = Not mbooPorCobrar
    objCond.fecha2 = f
    objCond.CodPC1 = codPC
    objCond.CodForma = codF
    objCond.CodGrupo = codg1
    objCond.Usuario1 = CodVen
    objCond.TasaMensual = Tasa
    objCond.NumDias1 = diasGracia
    objCond.NumDias2 = diasGracia
    objCond.Sucursal = CodSucursal
    objCond.fecha1 = fTrans
    sql = "spConsTSPorCobrarPagarVendedorMoraSucursalCuota " & numMoneda & ", " & _
                objCond.CodMoneda & "," & _
                CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                CadenaBool(objCond.Cliente, TipoDB) & "," & _
                CadenaBool(objCond.Proveedor, TipoDB) & "," & _
                FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                objCond.CodPC1 & "','" & _
                objCond.CodPC1 & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodGrupo & "','" & _
                objCond.Usuario1 & "','" & _
                objCond.Usuario1 & "'," & _
                objCond.TasaMensual & "," & _
                objCond.NumDias1 & "," & _
                IIf(Me.GNOpcion.Los100DocCobroPago, 1, 0) & "," & _
                objCond.NumDias2 & ",'" & _
                objCond.Sucursal & "','" & _
                objCond.Sucursal & "'"
     If Me.GNOpcion.ObtenerValor("AplicaCalculoMensual") = "1" Then
        sql = sql & " ,0 "
     Else
        sql = sql & " ,1 "
     End If
      sql = sql & "," & FechaYMD(objCond.fecha1, TipoDB)
    Set rs = Me.OpenRecordset(sql)
    Set ConsTSPorCobrarPagarVendedorMoraSucursalCuota_R = rs
    Set rs = Nothing
    Set objCond = Nothing
End Function
Public Function RecuperaSolicituCliente(ByVal IdTransFuente As Long, ByVal CodCli As String, ByRef BandCliente As Boolean) As Boolean
    Dim sql As String, rs As Recordset
    sql = "select bandAprobado, bandcliente from vwPCSolCreProvCli "
    sql = sql & " WHERE codprovcli ='" & CodCli & "'"
    sql = sql & " and idtransfuente=" & IdTransFuente
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        BandCliente = rs.Fields("bandcliente")
        If rs.Fields("bandAprobado") Then
            RecuperaSolicituCliente = True
        Else
            RecuperaSolicituCliente = False
        End If
    Else
        RecuperaSolicituCliente = False

    End If
    Set rs = Nothing
End Function
Public Function VerificaciondeExistencia(ByVal CodInventario As String) As Boolean
Dim rs As Recordset, sql As String
    VerificaciondeExistencia = False
    sql = "select codinventario, sum(Exist) as exist"
    sql = sql & " from ivinventario iv"
    sql = sql & " inner join ivexist ive on iv.idinventario = ive.idinventario"
    sql = sql & " where codinventario='" & CodInventario & "'"
    sql = sql & " group by codinventario"
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        If rs.Fields("exist") > 0 Then
            VerificaciondeExistencia = True
        End If

   End If
    Set rs = Nothing
End Function
Public Function ListaPCTipoCuentaBancaria() As String
    Dim sql As String, cond As String, s As String
    Dim rs As Recordset
    s = "|0-Ninguno|"
    s = s & "|1-Corriente|"
    s = s & "|2-Ahorros|"
    s = s & "|3-Tar.Crédito|"
    s = s & "|4-Póliza|"
    ListaPCTipoCuentaBancaria = s
End Function
Public Function CalculaValorCredito(ByVal transid As Long) As Currency
    Dim rs As Recordset, sql As String, cad As String, i As Integer
    'sql = " select  ( sum(MontoFinanciar)) as valor"
    sql = "select  ( sum(abs(ivk.preciorealtotal))) as valor" 'cambiado AUC 12/01/2011 quiere este valor
    sql = sql & " from gncomprobante g "
    sql = sql & " left join IVFinanciamientoItem ivf "
    sql = sql & " inner join ivkardex ivk"
    sql = sql & " inner join ivinventario ivi"
    sql = sql & " on ivi.idinventario = ivk.idinventario"
    sql = sql & " on ivf.IdIVKardex = ivk.id"
    sql = sql & " on g.transid = ivf.transid "
    sql = sql & " where g.estado <> 3 "
    sql = sql & " and ivf.transid=" & transid
    sql = sql & " and ivi.Bandservicio=0"
    sql = sql & " group by g.transid"
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        CalculaValorCredito = rs.Fields("valor")
    Else
        CalculaValorCredito = 0
    End If
End Function
Public Function ConsTSPorCobrarPagarVendeMoraSucursalCuotaNew( _
                    ByVal PorCobrar As Boolean, _
                    ByVal CodProvcli As String, _
                    ByVal FechaVenci As Date, _
                    ByVal CodForma As String, _
                    ByVal CodForma1 As String, _
                    ByVal CodMoneda As String, _
                    ByVal CodGrupo1 As String, _
                    ByVal CodVendedor As String, _
                    ByVal TasaMensual As Currency, _
                    ByVal diasGracia As Integer, _
                    ByVal CodSucursal As String) As Variant
    Dim aux_codpc As String, aux_f1 As Date, aux_f2 As Date
    Dim aux_PorCobrar As Boolean, aux_Cliente As Boolean, aux_Proveedor As Boolean
    Dim aux_CodForma As String, aux_CodMoneda As String, aux_codgrupo As String
    Dim aux_incluircero As Boolean, aux_codVendedor As String, aux_codSucursal As String
    Dim aux_CodForma1 As String
    With gobjMain.objCondicion
        'Conservar valores actuales para que no afecte a otras consultas
        aux_codpc = .CodPC1
        aux_f1 = .fecha1
        aux_f2 = .fecha2
        aux_PorCobrar = .PorCobrar
        aux_Cliente = .Cliente
        aux_Proveedor = .Proveedor
        aux_CodForma = .CodForma
        aux_CodForma1 = .CodForma1
        aux_CodMoneda = .CodMoneda
        aux_codgrupo = .CodGrupo
        aux_incluircero = .IncluirCero
        aux_codVendedor = .Usuario1
        aux_codSucursal = .Sucursal
        .PorCobrar = PorCobrar
        .Cliente = True
        .Proveedor = True
        .CodPC1 = CodProvcli
        .fecha1 = Me.GNOpcion.FechaInicio
        .fecha2 = FechaVenci
        .CodForma = CodForma
        .CodForma1 = CodForma1
        .CodMoneda = CodMoneda
        .CodGrupo = CodGrupo1
        .IncluirCero = False
        .Usuario1 = CodVendedor
        .NumDias1 = diasGracia
        .TasaMensual = TasaMensual
        .NumDias2 = IIf(Len(Me.GNOpcion.ObtenerValor("NumDecimales")) > 0, Me.GNOpcion.ObtenerValor("NumDecimales"), 2)
        .Sucursal = CodSucursal
        Set ConsTSPorCobrarPagarVendeMoraSucursalCuotaNew = ConsTSPorCobrarPagarVendedorMoraSucursalCuotaNew()
        'Recuperar valores reservados
        .CodPC1 = aux_codpc
        .fecha1 = aux_f1
        .fecha2 = aux_f2
        .PorCobrar = aux_PorCobrar
        .Cliente = aux_Cliente
        .Proveedor = aux_Proveedor
        .CodForma = aux_CodForma
        .CodForma1 = aux_CodForma1
        .CodMoneda = aux_CodMoneda
        .CodGrupo = aux_codgrupo
        .IncluirCero = aux_incluircero
        .Usuario1 = aux_codVendedor
        .Sucursal = aux_codSucursal
    End With
End Function
Public Function ConsTSPorCobrarPagarVendedorMoraSucursalCuotaNew() As Variant
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim objCond As Condicion
    Set objCond = gobjMain.objCondicion
    'Si no está especificada la moneda, coge la Moneda predeterminada
    If Len(objCond.CodMoneda) = 0 Then objCond.CodMoneda = MONEDA_PRE
    numMoneda = Me.GNOpcion.IndiceMoneda(objCond.CodMoneda)
'    objCond.CodForma = "CO"
    sql = "spConsTSPorCobrarPagarVendedorMoraSucursalCuotaNew " & numMoneda & ", " & _
                objCond.CodMoneda & "," & _
                CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                CadenaBool(objCond.Cliente, TipoDB) & "," & _
                CadenaBool(objCond.Proveedor, TipoDB) & "," & _
                FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                objCond.CodPC1 & "','" & _
                objCond.CodPC1 & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodForma1 & "','" & _
                objCond.CodGrupo & "','" & _
                objCond.Usuario1 & "','" & _
                objCond.Usuario1 & "'," & _
                objCond.TasaMensual & "," & _
                objCond.NumDias1 & "," & _
                IIf(Me.GNOpcion.Los100DocCobroPago, 1, 0) & "," & _
                objCond.NumDias2 & ",'" & _
                objCond.Sucursal & "','" & _
                objCond.Sucursal & "'"
     If Me.GNOpcion.ObtenerValor("AplicaCalculoMensual") = "1" Then
        sql = sql & " ,0 "
     Else
        sql = sql & " ,1 "
     End If
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
'    Set rs = Me.OpenRecordset(sql)
    Set ConsTSPorCobrarPagarVendedorMoraSucursalCuotaNew = rs
    Set rs = Nothing
    Set objCond = Nothing
End Function
Public Function RecuperarIVFinanciamientoTipoItem(ByVal transid As Long, ByVal Itemtipo As Integer) As Recordset
    Dim sql As String, rs As Recordset
    sql = "SELECT top 1 P.* FROM IVFINANCIAMIENTOITEM P INNER JOIN IVKARDEX IVK INNER JOIN IVINVENTARIO IV  "
    sql = sql & " INNER JOIN IVGRUPO1 IVG1 ON IVG1.IDGRUPO1 = IV.IDGRUPO1 "
    sql = sql & " ON IV.IDINVENTARIO = IVK.IDINVENTARIO ON IVK.ID = P.IDIVKARDEX  INNER JOIN GNCOMPROBANTE G  ON G.TRANSID = P.TRANSID "
    sql = sql & " WHERE G.TRANSID =" & transid
    sql = sql & " AND IV.Tipo1 =" & Itemtipo
    sql = sql & " ORDER BY P.VALORTOTAL DESC"
    Set rs = Me.OpenRecordset(sql)
    Set RecuperarIVFinanciamientoTipoItem = rs
    Set rs = Nothing
End Function
Public Function ConsTSPorCobrarPagarVendeSucursalIV( _
                    ByVal PorCobrar As Boolean, _
                    ByVal CodProvcli As String, _
                    ByVal FechaVenci As Date, _
                    ByVal CodForma As String, _
                    ByVal CodMoneda As String, _
                    ByVal CodGrupo1 As String, _
                    ByVal CodVendedor As String, _
                    ByVal CodSucursal As String) As Variant
    Dim aux_codpc As String, aux_f1 As Date, aux_f2 As Date
    Dim aux_PorCobrar As Boolean, aux_Cliente As Boolean, aux_Proveedor As Boolean
    Dim aux_CodForma As String, aux_CodMoneda As String, aux_codgrupo As String
    Dim aux_incluircero As Boolean, aux_codVendedor As String
   With gobjMain.objCondicion
        'Conservar valores actuales para que no afecte a otras consultas
        aux_codpc = .CodPC1
        aux_f1 = .fecha1
        aux_f2 = .fecha2
        aux_PorCobrar = .PorCobrar
        aux_Cliente = .Cliente
        aux_Proveedor = .Proveedor
        aux_CodForma = .CodForma
        aux_CodMoneda = .CodMoneda
        aux_codgrupo = .CodGrupo
        aux_incluircero = .IncluirCero
        aux_codVendedor = .Usuario1
        .PorCobrar = PorCobrar
        .Cliente = True
        .Proveedor = True
        .CodPC1 = CodProvcli
        .fecha1 = Me.GNOpcion.FechaInicio
        .fecha2 = FechaVenci
        .CodForma = CodForma
        .CodMoneda = CodMoneda
        .CodGrupo = CodGrupo1
        .IncluirCero = False
        .Usuario1 = CodVendedor
        .Sucursal = CodSucursal
        Set ConsTSPorCobrarPagarVendeSucursalIV = ConsTSPorCobrarPagarVendedorIV()
        'Recuperar valores reservados
        .CodPC1 = aux_codpc
        .fecha1 = aux_f1
        .fecha2 = aux_f2
        .PorCobrar = aux_PorCobrar
        .Cliente = aux_Cliente
        .Proveedor = aux_Proveedor
        .CodForma = aux_CodForma
        .CodMoneda = aux_CodMoneda
        .CodGrupo = aux_codgrupo
        .IncluirCero = aux_incluircero
        .Usuario1 = aux_codVendedor
        .Sucursal = CodSucursal
   End With
End Function
'Para selección de documentos por cobrar/pagar con item
Public Function ConsTSPorCobrarPagarVendedorIV() As Variant
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim objCond As Condicion
    Set objCond = gobjMain.objCondicion
    'Si no está especificada la moneda, coge la Moneda predeterminada
    If Len(objCond.CodMoneda) = 0 Then objCond.CodMoneda = MONEDA_PRE
    numMoneda = Me.GNOpcion.IndiceMoneda(objCond.CodMoneda)
#If DAOLIB Then
    sql = "SELECT Id, CodProvCli, Nombre, TransID, CodTrans, Trans, CodForma,NumLetra, Doc, "
    Select Case numMoneda
    Case 1:  sql = sql & "Valor1 AS Valor, VCancelado1 AS VCancelado, " & _
                          "Valor1-VCancelado1 AS Saldo, CodMoneda, Cancela, 1 AS Cotizacion, "
    Case 2:  sql = sql & "Valor2 AS Valor, VCancelado2 AS VCancelado, " & _
                          "Valor2-VCancelado2 AS Saldo, CodMoneda, Cancela, Cotizacion2 AS Cotizacion, "
    Case 3:  sql = sql & "Valor3 AS Valor, VCancelado3 AS VCancelado, " & _
                          "Valor3-VCancelado3 AS Saldo, CodMoneda, Cancela, Cotizacion3 AS Cotizacion, "
    Case 4:  sql = sql & "Valor4 AS Valor, VCancelado4 AS VCancelado, " & _
                          "Valor4-VCancelado4 AS Saldo, CodMoneda, Cancela, Cotizacion4 AS Cotizacion, "
    End Select
    sql = sql & "FechaEmision, Plazo, FechaVenci "
    If objCond.PorCobrar Then
        sql = sql & " FROM vwConsPCPorCobrar "
    Else
        sql = sql & " FROM vwConsPCPorPagar "
    End If
    'Solo los que tengan saldo >0   (Necesario)
    cond = "(Valor" & objCond.numMoneda & ">VCancelado" & objCond.numMoneda & ")"
    'Condición de FechaVenci    (Necesario)             '*** MAKOTO 10/dic/00 Modificado
    cond = cond & " AND (FechaVenci BETWEEN " & _
                    FechaYMD(objCond.fecha1, TipoDB) & " AND " & _
                    FechaYMD(objCond.fecha2, TipoDB) & ")"
    'Condición de CodMoneda     (Necesario)
    If Len(cond) > 0 Then cond = cond & " AND "
    cond = cond & "(CodMoneda='" & Me.GNOpcion.CodMoneda(numMoneda) & "')"
    'Condición de CodProvCli    (Opcional)
    If Len(objCond.CodPC1) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodProvCli='" & objCond.CodPC1 & "')"
    End If
    'Condición de CodForma    (Opcional)
    If Len(objCond.CodForma) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodForma='" & objCond.CodForma & "')"
    End If
    'Condición de Cod. Grupo1 de prov/cliente (Opcional)
    If Len(objCond.CodGrupo) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodGrupo1='" & objCond.CodGrupo & "')"
    End If
    'Condición de si incluir cliente/proveedor          '*** MAKOTO 10/dic/00
    If Len(cond) > 0 Then cond = cond & " AND "
    cond = cond & "(BandCliente=" & CadenaBool(objCond.Cliente, TipoDB) & _
                    " OR BandProveedor=" & CadenaBool(objCond.Proveedor, TipoDB) & ")"
    If Len(cond) > 0 Then sql = sql & " WHERE (" & cond & ")"
    sql = sql & " ORDER BY CodProvCli,FechaVenci"
#Else
    sql = "spConsTSPorCobrarPagarVendedoriv " & numMoneda & ", " & _
                objCond.CodMoneda & "," & _
                CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                CadenaBool(objCond.Cliente, TipoDB) & "," & _
                CadenaBool(objCond.Proveedor, TipoDB) & "," & _
                FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                objCond.CodPC1 & "','" & _
                objCond.CodPC1 & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodGrupo & "','" & _
                objCond.Usuario1 & "','" & _
                objCond.Usuario1 & "'," & _
                IIf(Me.GNOpcion.Los100DocCobroPago, 1, 0)
#End If
    Set rs = Me.OpenRecordset(sql)
    Set ConsTSPorCobrarPagarVendedorIV = rs
    Set rs = Nothing
    Set objCond = Nothing
End Function
Public Function entrada(ByVal transid) As Currency
Dim sql As String
Dim rs As Recordset
sql = "SELECT sum(valorentrada) as entrada  FROM IVFinanciamientoItem  "
sql = sql & " Where TransID = " & transid
Set rs = Me.OpenRecordset(sql)
If rs.RecordCount > 0 Then
    entrada = rs!entrada
Else
    entrada = 0

End If
Set rs = Nothing
End Function
Public Function Adicional1(ByVal transid) As Currency
Dim sql As String
Dim rs As Recordset
sql = "SELECT sum(entradaadicional1) as adicional1  FROM IVFinanciamientoItem  "
sql = sql & " Where TransID = " & transid
Set rs = Me.OpenRecordset(sql)
If rs.RecordCount > 0 Then
    Adicional1 = rs!Adicional1
Else
    Adicional1 = 0
End If
Set rs = Nothing
End Function
Public Function Adicional2(ByVal transid) As Currency
Dim sql As String
Dim rs As Recordset
sql = "SELECT sum(entradaadicional2) as adicional2  FROM IVFinanciamientoItem  "
sql = sql & " Where TransID = " & transid
Set rs = Me.OpenRecordset(sql)
If rs.RecordCount > 0 Then
    Adicional2 = rs!Adicional2
Else
    Adicional2 = 0
End If
Set rs = Nothing
End Function
Public Function Adicional3(ByVal transid) As Currency
Dim sql As String
Dim rs As Recordset
sql = "SELECT sum(entradaadicional3) as adicional3  FROM IVFinanciamientoItem  "
sql = sql & " Where TransID = " & transid
Set rs = Me.OpenRecordset(sql)
If rs.RecordCount > 0 Then
    Adicional3 = rs!Adicional3
Else
    Adicional3 = 0
End If
Set rs = Nothing
End Function
Public Function FechaAdicional1(ByVal transid) As String
Dim sql As String
Dim rs As Recordset
sql = "SELECT fechaadicional1 as fechaadicional1  FROM IVFinanciamientoItem  "
sql = sql & " Where TransID = " & transid
sql = sql & " AND entradaadicional1 > 0 "
Set rs = Me.OpenRecordset(sql)
If rs.RecordCount > 0 Then
    FechaAdicional1 = rs!FechaAdicional1
Else
    FechaAdicional1 = "_"
End If
Set rs = Nothing
End Function
Public Function FechaAdicional2(ByVal transid) As String
Dim sql As String
Dim rs As Recordset
sql = "SELECT fechaadicional2 as fechaadicional2  FROM IVFinanciamientoItem  "
sql = sql & " Where TransID = " & transid
sql = sql & " AND entradaadicional2 > 0 "
Set rs = Me.OpenRecordset(sql)
If rs.RecordCount > 0 Then
    FechaAdicional2 = rs!FechaAdicional2
Else
    FechaAdicional2 = "_"
End If
Set rs = Nothing
End Function
Public Function FechaAdicional3(ByVal transid) As String
Dim sql As String
Dim rs As Recordset
sql = "SELECT fechaadicional3 as fechaadicional3  FROM IVFinanciamientoItem  "
sql = sql & " Where TransID = " & transid
sql = sql & " AND entradaadicional3 > 0 "
Set rs = Me.OpenRecordset(sql)
If rs.RecordCount > 0 Then
    FechaAdicional3 = rs!FechaAdicional3
Else
    FechaAdicional3 = "_"
End If
Set rs = Nothing
End Function
'--------------------
Public Function FechaSeguro(ByVal transid) As String
Dim sql As String
Dim rs As Recordset
sql = "SELECT fechaSeguro as Fechaseguro  FROM IVFinanciamientoItem "
sql = sql & " Where TransID = " & transid
Set rs = Me.OpenRecordset(sql)
If rs.RecordCount > 0 Then
    FechaSeguro = rs!FechaSeguro
Else
    FechaSeguro = "_"
End If
Set rs = Nothing
End Function
Public Function FechaDisp(ByVal transid As Long, ByVal s As String) As String
Dim sql As String
Dim rs As Recordset
sql = "SELECT fechaDisp as FechaDisp  FROM IVFinanciamientoItem ivf inner join ivkardex ivk "
sql = sql & "inner join ivinventario iv on iv.idiNventario = ivk.idinventario on ivk.id= ivf.idivkardex"
sql = sql & " Where IVK.TransID = " & transid
sql = sql & s
Set rs = Me.OpenRecordset(sql)
If rs.RecordCount > 0 Then
    FechaDisp = rs!FechaDisp
Else
    FechaDisp = "_"
End If
Set rs = Nothing
End Function
Public Function RecuperaDetalleFin(ByVal FCorte As Date, ByVal transid As Long, ByVal CodClienteRef As String, ByVal f As Date) As Recordset
    Dim sql As String, rs As Recordset
    On Error GoTo CapturaError
    sql = "SELECT FECHAEMISION,FECHAVENCI,datediff(d,fechavenci,'" & f & "' )as plazo "
    sql = sql & " FROM vwConsPCPorCobrar  "
    sql = sql & " WHERE codProvCli  = '" & CodClienteRef & "'"
    sql = sql & " AND (VALOR1-VCANCELADO1) <> 0 "
    sql = sql & " AND (FECHAVENCI) <= '" & FCorte & "'"
    sql = sql & " group BY FECHAEMISION,PLAZO,FECHAVENCI"
    sql = sql & " ORDER BY PLAZO DESC"
    Set rs = Me.OpenRecordset(sql)
    Set RecuperaDetalleFin = rs
    Set rs = Nothing
    Exit Function
CapturaError:
    Set rs = Nothing
End Function
Public Function RecuperaDetalleFinValores(ByVal f As Date, ByVal CodProvcli As String) As Recordset
    Dim sql As String, rs As Recordset
    On Error GoTo CapturaError
    sql = "SELECT CodForma,numletra, (valor1-vcancelado1)as saldo,datediff(d,fechavenci,'" & f & "' )as plazo "
    sql = sql & " FROM vwConsPCPorCobrar"
    sql = sql & " WHERE CodProvCli = '" & CodProvcli & "'  AND (valor1-vcancelado1) <> 0"
    sql = sql & " ORDER BY plazo desc"
    Set rs = Me.OpenRecordset(sql)
    Set RecuperaDetalleFinValores = rs
    Set rs = Nothing
    Exit Function
CapturaError:
    Set rs = Nothing
End Function
Public Function ConsPCSaldoconF_CortexProvcli_hora(ByVal BandProveedor As Boolean, _
                            ByVal BandCliente As Boolean, CodProvcli As String, _
                            TipoSaldo As Integer, FechaCorte As Date) As Variant
    Dim sql As String, cond As String, rs As Recordset
   Dim aux As String, Condicion As String
   Dim numReg As Long, Trans As String, i As Integer
        VerificaExistenciaTabla 1
        'Prepara reporte utilizando Tablas Temporales
    '1) Prepara los  documentos  Asignados  menores a la fecha
        aux = IIf(gobjCond.numMoneda > 0, "/Cotizacion" & gobjCond.numMoneda + 1, "")
        sql = "SELECT " & _
            "pck.IdAsignado, " & _
            "(pck.Debe + pck.Haber) " & aux & " AS Valor " & _
            "INTO tmp1 " & _
            "From " & _
            "GNtrans gt INNER JOIN " & _
                "(GNComprobante gc INNER JOIN PCKardex pck " & _
                "INNER JOIN PCProvcli pc " & _
                "ON PC.idprovcli = pck.IdProvcli " & _
                "ON gc.transID = pck.transID) " & _
                          "ON gt.Codtrans = gc.Codtrans " & _
            "Where (pck.IdAsignado <> 0) " & _
            "AND (gc.Estado <> 3) " & _
            "AND (gt.AfectaSaldoPC=1) " & _
            "AND (gc.Fechatrans<= " & FechaYMD(FechaCorte, gobjMain.EmpresaActual.TipoDB) & ")" & _
            " AND pc.codprovcli='" & CodProvcli & "'"
            sql = sql & " AND gc.horatrans <  &  dateadd('mi',10, gc.horatrans)"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        VerificaExistenciaTabla 2
    '2)Agrupa  estos  documentos por IdAsignado
        sql = "SELECT " & _
              "IdAsignado," & _
              "isnull(Sum(Valor),0) AS VCancelado " & _
              "INTO tmp2 " & _
              "FROM tmp1 " & _
              "GROUP BY IdAsignado"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
    '3) Finalmente une  con el documento  Padre
        VerificaExistenciaTabla 3
        sql = "SELECT  gc.transId, gc.Codtrans, gc.Numtrans, gc.NumDocRef, pc.IdProvCli, " & _
            "pc.CodProvCli, pc.Nombre, " & _
            "(pck.Debe ) " & aux & " AS Debe, " & _
            "( pck.Haber) " & aux & " AS Haber, " & _
            "(pck.Debe + pck.Haber) " & aux & " AS Valor, " & _
            "isnull(vw.VCancelado,0) AS VCancelado, " & _
            "(pck.Debe + pck.Haber) " & aux & " - isnull(vw.VCancelado,0) AS Saldo, " & _
            "pck.IdForma, pck.NumLetra, " & _
            "pck.FechaEmision, pck.FechaVenci, " & _
            "pck.Observacion " & _
            "INTO tmp3 " & _
            "From GNComprobante gc INNER JOIN " & _
                    "(PCProvCli pc  INNER JOIN " & _
                    "    (PCKardex pck  LEFT JOIN " & _
                    "      tmp2 vw  ON vw.IdAsignado = pck.Id) " & _
                    " ON pc.IdProvCli = pck.IdProvCli) " & _
                "ON gc.transID = pck.transID " & _
            "Where (pck.IdAsignado = 0) And (gc.Estado <> 3) " & _
            "AND (gc.Fechatrans<=" & FechaYMD(FechaCorte, gobjMain.EmpresaActual.TipoDB) & ")" & _
            " AND pc.codprovcli='" & CodProvcli & "'"
            If BandProveedor = False And BandCliente = True Then
                If TipoSaldo = 1 Then
                    sql = sql & "AND (pck.Haber > 0) "
                ElseIf TipoSaldo = 2 Then
                    sql = sql & "AND (pck.Debe > 0) "
                End If
            Else
                If TipoSaldo = 1 Then
                    sql = sql & "AND (pck.DEBE > 0) "
                ElseIf TipoSaldo = 2 Then
                    sql = sql & "AND (pck.HABER > 0) "
                End If
            End If
            If BandCliente = True And BandProveedor = False Then
                    sql = sql & "and bandcliente=1"
            ElseIf BandCliente = False And BandProveedor = True Then
                    sql = sql & "and bandproveedor=1"
            End If
            sql = sql & " AND gc.horatrans <  &  dateadd('mi',10, gc.horatrans)"
          gobjMain.EmpresaActual.EjecutarSQL sql, numReg
    '---------------------------------------------------------------------------------
    '4  Consulta  final
        If TipoSaldo = 1 Then
'            Condicion = Condicion & " AND vw.FechaVenci <= " & FechaYMD(gobjCond.FechaCorte, gobjMain.EmpresaActual.TipoDB)
        End If
        If Len(gobjCond.CodPCGrupo) > 0 Then
            Condicion = Condicion & " AND PCGrupo" & gobjCond.NumPCGrupo & ".CodGrupo" & gobjCond.NumPCGrupo & " = '" & _
                        gobjCond.CodPCGrupo & " '"
        End If
#If DAOLIB Then
    Trans = "vw.Codtrans & ' ' & CSTR(vw.Numtrans)"
#Else
    Trans = "vw.Codtrans + ' ' + CONVERT(varchar,vw.Numtrans)"
#End If
       sql = "SELECT "
            If TipoSaldo = 0 Then
                sql = sql & " abs(sum(vw.debe)) +abs(sum(vw.VCANCELADO))  as debe, "
                sql = sql & "  abs(sum(vw.haber)) as haber, "
                sql = sql & " (abs(sum(vw.debe)) -abs(sum(vw.VCANCELADO)))+ (abs(sum(vw.haber))) as saldo "
           Else
                sql = sql & " abs(sum(vw.VALOR)) as debe, " & _
                "abs(sum(vw.VCANCELADO)) as haber, " & _
                " (abs(sum(vw.VALOR)) - abs(sum(vw.VCANCELADO)) ) as Saldo "
           End If
             sql = sql & " FROM Gntrans INNER JOIN tmp3 vw INNER JOIN " & _
               "PCProvCli   pc " & _
               " ON PC.IdProvCli = vw.IdProvCli LEFT JOIN TSFormaCobroPago tsforma on vw.idforma = tsforma.idforma ON Gntrans.Codtrans = vw.Codtrans  "
        sql = sql & "Where  Saldo > 0 " & Condicion & "  AND  (Gntrans.AfectaSaldoPC=1)"
        sql = sql & " AND pc.codprovcli='" & CodProvcli & "'"
        If TipoSaldo = 1 Then
            sql = sql & " having sum(vw.VALOR) >0 "
        End If
        Set rs = Me.OpenRecordset(sql)
    Set ConsPCSaldoconF_CortexProvcli_hora = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Saldos ProvCli con fecha de corte" & gobjCond.FechaCorte, "PC"
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
End Function
Public Function IdFuenteLook(ByVal gc As GNComprobante, ByVal IdInventario As Long) As Long
Dim sql As String
Dim rs As Recordset
    'AUC tomamos la ultima transaccion relacionanda con ese carro porque puede que se vendan varias veces
On Error GoTo CapturaError
    sql = "Select top 1 transid from gncomprobante where idinventario = " & IdInventario
    sql = sql & " AND CodTrans = '" & gc.GNTrans.TransDespuesDevolucion & "'"
    sql = sql & " AND estado<> 3 order by fechatrans desc"
    Set rs = Me.OpenRecordset(sql)
    Do While Not rs.EOF
        IdFuenteLook = rs!transid
        rs.MoveNext
    Loop
    Exit Function
CapturaError:
    MsgBox Err.Description
    Exit Function
End Function
Public Function RecuperaCancelado(ByVal f As Date, ByVal CodProvcli As String, ByVal transid As Long) As Recordset
    Dim sql As String, rs As Recordset
    On Error GoTo CapturaError
    sql = "SELECT CodForma,numletra, vcancelado1"
    sql = sql & " FROM vwConsPCPorCobrar"
    sql = sql & " WHERE CodProvCli = '" & CodProvcli & "'  AND vcancelado1 <> 0"
    sql = sql & " AND TRANSID = " & transid
    sql = sql & " ORDER BY plazo desc"
    Set rs = Me.OpenRecordset(sql)
    Set RecuperaCancelado = rs
    Set rs = Nothing
    Exit Function
CapturaError:
  MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function
'AUC KARDEX PROVEEDOR WITH ITEM
Public Function ConsPCKardexIV(ByVal BandProveedor As Boolean, _
                             ByVal BandCliente As Boolean) As Variant
    Dim sql As String, rs As Recordset
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    sql = "spConsPCKardexPorFechaIV " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodPC1 & "','" & _
                gobjCond.CodPC2 & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB) & "," & _
                CadenaBool(BandProveedor, TipoDB) & "," & _
                CadenaBool(BandCliente, TipoDB)
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsPCKardexIV = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Kardex Prov-Cli ", "PC"
End Function
Public Function CuotaMensual(ByVal transid As Long, ByVal fmt As String, IDKardex As Long, ByVal Opcion As String) As String
Dim sql As String
Dim rs As Recordset
Dim cad As String
   Select Case Opcion
        Case "V"
            sql = " SELECT CASE WHEN numeropagos > 0 then ((MontoFinanciar+valorfinanciamiento) / numeropagos) else (MontoFinanciar+valorfinanciamiento) end as cuota FROM IVFinanciamientoItem "
        Case "S"
            sql = "SELECT CASE WHEN BandPagosSoloSeguro = 1 then ((MontoFinanciar+valorfinanciamiento) / numpagossolosegURO) else 0 end as cuota FROM IVFinanciamientoItem"
        Case "D"
            sql = "SELECT CASE WHEN BandPagosSolodispo= 1 then ((MontoFinanciar+valorfinanciamiento) / numeropagossolodispo) else 0 end as cuota FROM IVFinanciamientoItem "
    End Select
        sql = sql & " Where TransID = " & transid
        sql = sql & " AND idivkardex = " & IDKardex
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        cad = rs!Cuota
    Else
        cad = ""
    End If
        CuotaMensual = cad
        Set rs = Nothing
End Function
Public Function Adicionales(ByVal transid As Long, fmt As String) As String
Dim sql As String
Dim rs As Recordset
Dim cad As String
sql = "SELECT Entradaadicional1,Entradaadicional2,Entradaadicional3, fechaadicional1,fechaadicional2,fechaadicional3 FROM IVFinanciamientoItem "
sql = sql & " Where TransID = " & transid
sql = sql & " AND Entradaadicional1 <> 0"
Set rs = Me.OpenRecordset(sql)
If rs.RecordCount > 0 Then
    If rs!EntradaAdicional1 > 0 Then
        cad = Format(rs!EntradaAdicional1, fmt) & " para el " & rs!FechaAdicional1
    End If
    If rs!EntradaAdicional2 > 0 Then
        cad = cad & "; " & Format(rs!EntradaAdicional2, fmt) & " para el " & rs!FechaAdicional2
    End If
    If rs!EntradaAdicional3 > 0 Then
        cad = cad & "; " & Format(rs!EntradaAdicional3, fmt) & " para el " & rs!FechaAdicional3
    End If
Else
    cad = ""
End If
    Adicionales = cad
    Set rs = Nothing
End Function
'AUC 2012 Para listar en financiamientos
Public Function RecuperaPcFinanciamiento(ByVal gc As GNComprobante, ByVal transid As Long, ByVal IdProvcli As Long, ByVal FechaCorte As Date) As Recordset
Dim sql As String
Dim rs As Recordset
Dim s As String
Dim CodT As String
Dim v As Variant
Dim i As Long
On Error GoTo CapturaError
    s = ""
    CodT = ""
    If Len(gc.GNTrans.TransHistorial) > 0 Then
        'Puede tener varios codigos de transaccion de fuente    ejm. (FC);(OF)
        v = Split(gc.GNTrans.TransHistorial, ";")
        For i = 0 To UBound(v)
            If Len(s) > 0 Then s = s & ","
            CodT = v(i)
            CodT = Left$(CodT, Len(CodT) - 1)       'Quita el signo ')'
            CodT = Right$(CodT, Len(CodT) - 1)      'Quita el signo '('
            s = s & "'" & CodT & "'"
        Next i
    Else
        Err.Raise ERR_INVALIDO, "Empresa.TransHistorial", _
                    "No está definida ningúna transacción de fuente. "
    End If
    VerificaExistenciaTabla 0 'revisamos si hay cobros realizados
    sql = "select  pck1.idasignado  ,SUM(pck1.haber) as vpagado,SUM(pf.valorcapital1) as vc1,SUM(pf.valorInteres1) as vi1"
    sql = sql & ",SUM(pf.valorcapital2) as vc2,SUM(pf.valorInteres2) as vi2"
    sql = sql & ",SUM(pf.valorcapital3) as vc3,SUM(pf.valorInteres3) as vi3"
    sql = sql & " into tmp0 "
    sql = sql & "from pcfinanciamiento pf  "
    sql = sql & "inner join pckardex pck inner join pckardex pck1 inner join gncomprobante g on g.transid = pck1.transid "
    sql = sql & " on pck1.idasignado = pck.id "
    sql = sql & "inner join gncomprobante gn on gn.transid = pck.transid"
    sql = sql & " on pck.id = pf.idpckardex"
    sql = sql & " WHERE g.estado <> 3 AND gn.idclienteref = " & IdProvcli 'gn.transid =" & TransID
    sql = sql & " GROUP BY pck1.IdAsignado,pf.tasaInteres1,pf.tasaInteres2,pf.tasainteres3 "
    gobjMain.EmpresaActual.EjecutarSQL sql, 1
    sql = " SELECT pc.idpckardex,pck.ordencuota,pck.numletra,pck.fechaemision,pck.fechavenci, "
    sql = sql & "case when t.vc1 > 0 then  pc.valorcapital1-vpagado else  pc.valorcapital1 end  as vc1,"
    sql = sql & "case when t.vi1 > 0 then  pc.valorinteres1-vpagado else  pc.valorInteres1 end as vi1, "
    sql = sql & "pc.tasaInteres1,"
    sql = sql & "case when t.vc2 > 0 then  pc.valorcapital2-vpagado else  pc.valorcapital2 end  as vc2,"
    sql = sql & "case when t.vi2 > 0 then  pc.valorinteres2-vpagado else  pc.valorinteres2 end as vi2,"
    sql = sql & "pc.tasaInteres2,"
    sql = sql & "case when t.vc3 > 0 then  pc.valorcapital3-vpagado else  pc.valorcapital3 end as vc3,"
    sql = sql & "case when t.vi3 > 0 then  pc.valorinteres3-vpagado else  pc.valorInteres3 end as vi3, "
    sql = sql & "pc.tasaInteres3 "
    sql = sql & "From pcFinanciamiento pc left join tmp0 t on t.idasignado = pc.idpckardex "
    sql = sql & " inner join pckardex pck "
    sql = sql & " inner join gncomprobante  gn on gn.transid = pck.transid  on pck.id=pc.idpckardex "
    sql = sql & " WHERE gn.idclienteref = " & IdProvcli  '"WHERE gn.transid = " & TransID
    sql = sql & " and pck.fechavenci <='" & FechaCorte & "'"
'    sql = sql & " order by pc.id"
    sql = sql & "  Union All"
    sql = sql & " SELECT pck.id,pck.ordencuota,pck.numletra,pck.fechaemision,pck.fechavenci,"
    sql = sql & "  pck.debe as vc1,"
    sql = sql & " 0 as vi1,"
    sql = sql & " 0 as tasaInteres1,"
    sql = sql & " 0 as vc2,"
    sql = sql & " 0 as vi2,"
    sql = sql & " 0 as tasaInteres2,"
    sql = sql & " 0 as vc3,"
    sql = sql & " 0 as vi3,"
    sql = sql & " 0 as tasaInteres3"
    sql = sql & " From  pckardex pck inner join gncomprobante  gn"
    sql = sql & " on gn.transid = pck.transid" 'utilizo esta variable TransHistorial para  reutilizar esta variable
    sql = sql & " WHERE gn.codtrans in (" & s & ") "
    sql = sql & " AND pck.fechavenci <='" & FechaCorte & "'"
    sql = sql & " AND gn.idclienteref = " & IdProvcli
'    sql = sql & "order by pcK.id"
    Set rs = Me.OpenRecordset(sql)
    Set RecuperaPcFinanciamiento = rs
    Set rs = Nothing
    Exit Function
CapturaError:
    Set rs = Nothing
    MsgBox Err.Description
    Exit Function
End Function
Public Function RecuperaPcFinanciamientoTotal(ByVal transid As Long, ByVal FechaCorte As Date) As Recordset
Dim sql As String
Dim rs As Recordset
On Error GoTo CapturaError
    sql = "SELECT Sum(pc.valorcapital1) as CapitalVeh,sum(pc.valorcapital2) as CapitalSeg,sum(pc.valorcapital3) as CapitalDisp " & _
    " From pcFinanciamiento pc inner join pckardex pck  inner join gncomprobante  gn on gn.transid = pck.transid " & _
    " on pck.id=pc.idpckardex WHERE gn.transid = " & transid & _
    " and pck.fechavenci <='" & FechaCorte & "'"
    Set rs = Me.OpenRecordset(sql)
    Set RecuperaPcFinanciamientoTotal = rs
    Set rs = Nothing
    Exit Function
CapturaError:
    Set rs = Nothing
    MsgBox Err.Description
    Exit Function
End Function
Public Function ListaPcFinanciamientoAsignar(ByVal CodTrans As String, ByVal NumTrans As Integer, ByVal NumTransH As Integer) As Variant
    Dim sql As String, rs As Recordset
    On Error GoTo CapturaError
    sql = "SELECT pck.id,pck.numletra,pck.debe,gn.codtrans,gn.numtrans,pc.id,isnull(pc.transid,pck.transid) as Transid,isnull(pc.idpckardex,pck.id)as idpckardex,pc.valorcapital1,pc.valorinteres1,pc.valorcapital2,pc.valorinteres2,pc.valorcapital3,pc.valorinteres3,pc.tasainteres1,pc.tasainteres2,pc.tasainteres3 "
             sql = sql & "from pcfinanciamiento pc " & _
                         " right join pckardex pck  " & _
                    " inner join  gncomprobante gn   " & _
                " on pck.transid = gn.transid  " & _
                " on pck.id = pc.idpckardex"
            sql = sql & " WHERE estado <> 3" ' and pc.tasainteres1=0 and pc.tasainteres2=0 and pc.tasainteres3=0 "
            sql = sql & " AND  gn.codtrans = '" & CodTrans & "'"
            If NumTrans > 0 Then sql = sql & " AND  gn.numtrans  between " & NumTrans & " AND " & NumTransH
    sql = sql & " order by pc.id"
        Set rs = Me.OpenRecordset(sql)
        Set ListaPcFinanciamientoAsignar = rs
     Set rs = Nothing
    Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function
Public Function RecuperaIVUltimoItem(ByVal key As String) As Long 'AUC recuperaItems Telas compra
    Dim sql As String
    Dim rs As Recordset
    Dim NumCaracter As Long
    On Error GoTo CapturaError
    VerificaExistenciaTabla 1
    sql = "Select cast(right(codinventario, LEN(CODINVENTARIO)- " & Len(key) & ")  as integer)   as UltimoNumero into tmp1 FROM vwIVInventarioRecuperar WHERE CodInventario like '" & key & "%'"
   Me.Execute sql
    'Toma el ultimo numero
    sql = "select  top 1 * from tmp1 order by Ultimonumero desc"
   Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        RecuperaIVUltimoItem = rs!UltimoNumero
   Else
        RecuperaIVUltimoItem = 0
    End If
    Set rs = Nothing
    Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function
'AUC para seguros rocar
Public Function ListaIVInventarioSoloIvGrupoYServicio(NumGrupo As Integer, BandSoloValida As Boolean, BandRS As Boolean, cod As String) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT codInventario, iv.descripcion from ivinventario iv "
    sql = sql & " inner join ivgrupo" & NumGrupo & " ivg on iv.idgrupo" & NumGrupo & "=ivg.idgrupo" & NumGrupo
    sql = sql & " where ivg.bandvalida= 1 AND iv.bandservicio = 1 AND bandVenta = 0"
    If Len(cod) > 0 Then
        sql = sql & " and  codgrupo" & NumGrupo & "='" & cod & "'"
    End If
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVInventarioSoloIvGrupoYServicio = rs
    Else
        ListaIVInventarioSoloIvGrupoYServicio = MiGetRows(rs)
     rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaGnTransCotizacionNew(CodTrans As String, BandSoloValida As Boolean, BandRS As Boolean) As Variant
   Dim sql As String, rs As Recordset
    Dim v As Variant, i As Long, cad As String
    Dim rs1 As Recordset
    'VerificaExistenciaTabla 1
    sql = "Select codtrans from gntrans where substring(Opcion2, 84,1)= 'S'"
    Set rs1 = Me.OpenRecordset(sql)
    cad = ""
    Do While Not rs1.EOF
    'v = Split(CodTrans, ",")
    'For i = 0 To UBound(v)
        cad = cad & "'" & rs1!CodTrans & "',"
    'Next
        rs1.MoveNext
    Loop
    Set rs1 = Nothing
    cad = Mid(cad, 1, Len(cad) - 1)
    sql = "SELECT  (gc.CodTrans+'-'+CONVERT(VARCHAR,gc.NumTrans)) AS Trans, nombre "
    sql = sql & " FROM GNComprobante gc "
    sql = sql & " WHERE gc.Estado<>3 AND "
    sql = sql & " gc.CodTrans IN (" & cad & ")"
    If BandSoloValida Then
        sql = sql & " AND transid not in (select idtransfuente from gncomprobante where estado<>3)"
    End If
    sql = sql & " ORDER BY gc.CodTrans, gc.Numtrans"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaGnTransCotizacionNew = rs
    Else
        ListaGnTransCotizacionNew = MiGetRows(rs)
 rs.Close
   End If
    Set rs = Nothing
End Function

Public Function RecuperaEmpleado(key As Variant) As PCProvCli
    Dim obj As PCProvCli
    
    Set obj = New PCProvCli
    Set obj.Empresa = Me
    
    On Error Resume Next
    obj.RecuperarEmpleado key
    If Err.Number = 0 Then Set RecuperaEmpleado = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function ListaEstadoCivil() As Variant
    Dim v(1, 5) As Variant
   v(0, 0) = "S"
    v(1, 0) = "Soltero"
    v(0, 1) = "C"
    v(1, 1) = "Casado"
    v(0, 2) = "D"
    v(1, 2) = "Divorciado"
    v(0, 3) = "U"
    v(1, 3) = "Unión Libre"
    v(0, 4) = "V"
    v(1, 4) = "Viudo"
    v(0, 5) = "N"
    v(1, 5) = "No Aplica"

  
  ListaEstadoCivil = v
End Function

Public Function ListaOrigenIngresos() As Variant
    Dim v(1, 7) As Variant
   v(0, 0) = "B"
    v(1, 0) = "Empleado Público"
    v(0, 1) = "V"
    v(1, 1) = "Empleado Privado"
    v(0, 2) = "I"
    v(1, 2) = "Independiente"
    v(0, 3) = "A"
    v(1, 3) = "Ama de casa o estudiante"
    v(0, 4) = "R"
    v(1, 4) = "Rentista"
    v(0, 5) = "H"
    v(1, 5) = "Jubilado"
    v(0, 6) = "M"
    v(1, 6) = "Remesas del exterior"
    v(0, 7) = "N"
    v(1, 7) = "No Aplica"
    
  ListaOrigenIngresos = v
End Function


Public Function ListaSexo() As Variant
    Dim v(1, 2) As Variant
   v(0, 0) = "M"
    v(1, 0) = "Masculino"
    v(0, 1) = "F"
    v(1, 1) = "Femenino"
    v(0, 2) = "N"
    v(1, 2) = "No Aplica"
   
   ListaSexo = v
End Function

Public Function ListaTipoSujeto() As Variant
    Dim v(1, 1) As Variant
   v(0, 0) = "N"
    v(1, 0) = "Pesona Natural"
    v(0, 1) = "J"
    v(1, 1) = "Persona Juridica"
   ListaTipoSujeto = v
End Function

Public Function ListaElementosAfectaSaldoEmpFlex(BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    'sql = "SELECT codElemento,Nombre FROM Elemento where afectaemp = 1 "
    'AUC  cambiado para que salgan los que son netos y decimos y anticipos
    sql = "SELECT codElemento,Nombre FROM Elemento where tipo in (5,6,7,8,9) "
   Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaElementosAfectaSaldoEmpFlex = rs
    Else
        ListaElementosAfectaSaldoEmpFlex = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaTipoSujetoFlex() As String
    Dim cad As String
   cad = "|" & "N" & vbTab & "Pesona Natural" & "|"
    cad = cad & "J" & vbTab & "Persona Juridica" & "|"
   ListaTipoSujetoFlex = cad
End Function

Public Function ListaSexoFlex() As String
    Dim cad As String
    cad = "|" & "M" & vbTab & "Masculino" & "|"
    cad = cad & "F" & vbTab & "Femenino" & "|"
    cad = cad & "N" & vbTab & "No Aplica" & "|"
  
   
   ListaSexoFlex = cad
End Function

Public Function ListaEstadoCivilFlex() As String
    Dim cad As String
    cad = "S" & vbTab
    cad = cad & "Soltero" & "|"
    cad = cad & "C" & vbTab
    cad = cad & "Casado" & "|"
    cad = cad & "D" & vbTab
    cad = cad & "Divorciado" & "|"
    cad = cad & "U" & vbTab
    cad = cad & "Unión Libre" & "|"
    cad = cad & "V" & vbTab
    cad = cad & "Viudo" & "|"
    cad = cad & "N" & vbTab
    cad = cad & "No Aplica" & "|"

  
  ListaEstadoCivilFlex = cad
End Function

Public Function ListaOrigenIngresosFlex() As String
    Dim cad As String
   cad = "B" & vbTab
    cad = cad & "Empleado Público" & "|"
    cad = cad & "V" & vbTab
    cad = cad & "Empleado Privado" & "|"
    cad = cad & "I" & vbTab
    cad = cad & "Independiente" & "|"
    cad = cad & "A" & vbTab
    cad = cad & "Ama de casa o estudiante" & "|"
    cad = cad & "R" & vbTab
    cad = cad & "Rentista" & "|"
    cad = cad & "H" & vbTab
    cad = cad & "Jubilado" & "|"
    cad = cad & "M" & vbTab
    cad = cad & "Remesas del exterior" & "|"
    cad = cad & "N" & vbTab
    cad = cad & "No Aplica" & "|"
    
  ListaOrigenIngresosFlex = cad
End Function

Public Function ListaTipoDiscapacidad() As Variant
    Dim v(1, 3) As Variant
   v(0, 0) = "01"
    v(1, 0) = "No aplica"
    v(0, 1) = "02"
    v(1, 1) = "Trabajador con discapacidad"
    v(0, 2) = "03"
    v(1, 2) = "Trabajador que actúa en calidad de sustituto de persona con discapacidad"
    v(0, 3) = "04"
    v(1, 3) = "Trabajador tiene cónyugeo hijo con discapacidad "
   
   ListaTipoDiscapacidad = v
End Function

Public Function ListaResidenciaTrabajador() As Variant
    Dim v(1, 1) As Variant
    v(0, 0) = "01"
    v(1, 0) = "Residente local"
    v(0, 1) = "02"
    v(1, 1) = "Residente del exterior"
   ListaResidenciaTrabajador = v
End Function

Public Function ListaDobleImposicion() As Variant
    Dim v(1, 2) As Variant
   v(0, 0) = "NA"
    v(1, 0) = "No aplica"
    v(0, 1) = "NO"
    v(1, 1) = "Sin convenio"
    v(0, 2) = "SI"
    v(1, 2) = "Con convenio"
   
   ListaDobleImposicion = v
End Function

'AUC para ecuamueble
Public Function ListaIVKProcesosMantenimientoNew(ByVal CodProceso As String) As Variant
    
End Function

Public Function IVKProcesoPrioridadAltaxProceso(ByVal idproceso As Long) As Long
End Function
 Public Function IVKProcesoPrioridadAltaxProcesoNew(ByVal idproceso As Long, ByRef SecuenciaProceso As Integer) As Long
   Dim sql As String, cond As String, rs As Recordset
    Dim Orden As Long
    Dim TransOP As String
   On Error GoTo CapturaError
        If Len(Me.GNOpcion.ObtenerValor("ProduccionTransOP")) > 0 Then
            TransOP = Me.GNOpcion.ObtenerValor("ProduccionTransOP")
        Else
            Err.Raise MSGERR_INVALIDO, "Empresa_TransOrdenProduccion", "No esta Configurado para tipo trans OP "
        End If
        sql = "select TOP 1 ivkp.orden,ivkp.secuencia   "
        sql = sql & " from gncomprobante gn   inner join ivkardex ivk inner join ivinventario iv "
        sql = sql & " on iv.idinventario = ivk.idinventario on ivk.transid = gn.transid "
        sql = sql & " inner join ivkproceso ivkp inner join ivproceso ivp "
        sql = sql & " on ivp.idproceso = ivkp.idproceso  "
        sql = sql & " on ivkp.transid = gn.transid "
        sql = sql & " Where ivkp.idcentrodet = 0"
        sql = sql & " And gn.estado <> 3 And iv.tipo = 6 And GN.codtrans = '" & TransOP & "'"
        sql = sql & " And ivp.idproceso = " & idproceso
        sql = sql & " And ivkp.estado1 NOT in (select valor from gnestadoprod where menu = 'Listo')"
        sql = sql & " And ivkp.FechaInicio <= '" & Date & "'"
        sql = sql & " And ivkp.bandurgente <> 1"
       sql = sql & " Order by ivkp.orden"
        Set rs = Me.OpenRecordset(sql)
        If rs.RecordCount = 0 Then
            Orden = 0
            SecuenciaProceso = 0
        Else
           Do While Not rs.EOF
                Orden = rs!Orden
                SecuenciaProceso = rs!secuencia
                rs.MoveNext
            Loop
        End If
       IVKProcesoPrioridadAltaxProcesoNew = Orden
       Set rs = Nothing
        Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function

Public Function RecuperaIVKProcesoxIdkp(IDkp As Long) As IVKProceso
    Dim obj As IVKProceso
    Set obj = New IVKProceso
    Set obj.Empresa = Me
    On Error Resume Next
    obj.RecuperarColas IDkp
    If Err.Number = 0 Then Set RecuperaIVKProcesoxIdkp = obj
   Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function
Public Function ListaIVInventarioxTipo(Tipo As Integer, _
                                  BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, cond As String
    Dim rs As Recordset, i As Integer
    sql = "SELECT CodInventario, Descripcion FROM IVInventario "
    If BandSoloValida Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(BandValida=" & CadenaBool(True, TipoDB) & ")"
    End If
    If Tipo > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(Tipo=" & Tipo & ") "
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " ORDER BY Descripcion,CodInventario "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVInventarioxTipo = rs
    Else
        ListaIVInventarioxTipo = MiGetRows(rs)
        rs.Close
   End If
    Set rs = Nothing
End Function

Public Function UltimoOrdenUrgente() As Long
    Dim sql As String
    Dim rs As Recordset
    On Error GoTo CapturError
        sql = "Select max(OrdenUrgente) as ordenUrgente from ivkproceso"
        Set rs = Me.OpenRecordset(sql)
        If rs.EOF Then
            UltimoOrdenUrgente = 0
        Else
            rs.MoveFirst
            UltimoOrdenUrgente = rs!OrdenUrgente
        End If
        Set rs = Nothing
    Exit Function
CapturError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function

Public Function ListaIVGrupoxCodigo(NumGrupo As Integer, BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
    sql = "SELECT CodGrupo" & NumGrupo & ",Descripcion FROM IVGrupo" & NumGrupo
    If BandSoloValida Then
        sql = sql & " WHERE BandValida=" & CadenaBool(True, TipoDB)
        sql = sql & " AND BandProduccion= 0"
    Else
       sql = sql & " WHERE BandProduccion= 0"
    End If
    sql = sql & " ORDER BY CodGrupo" & NumGrupo
    'sql = sql & " ORDER BY Descripcion"

    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVGrupoxCodigo = rs
    Else
        ListaIVGrupoxCodigo = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaPCProvCliUnidoEmp(BandProveedor As Boolean, _
                               BandCliente As Boolean, _
                               BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    Dim BandModulo As Boolean
         '------------------- cambiado AUC  02/09/20005
             sql = "SELECT pc.CodProvCli, pc.Nombre, g1.CodGrupo1, g2.CodGrupo2, g3.CodGrupo3,g4.codgrupo4,pc.observacion, pc.estado  "
             sql = sql & " FROM PCGrupo4 g4 RIGHT JOIN( PCGrupo3 g3 RIGHT JOIN (PCGrupo2 g2 RIGHT JOIN (PCGrupo1 g1 RIGHT JOIN PCProvCli pc " & _
                          " ON g1.IdGrupo1 = pc.IdGrupo1) " & _
                    " ON g2.IdGrupo2 = pc.IdGrupo2) " & _
                " ON g3.IdGrupo3 = pc.IdGrupo3) " & _
               " ON g4.idgrupo4 = pc.idgrupo4 "
          '------------------
    If Not (BandProveedor And BandCliente) Then
        If BandProveedor Then
            sql = sql & " WHERE pc.BandProveedor=" & CadenaBool(True, TipoDB)
        Else
            If gobjMain.GrupoActual.PermisoActual.ConsRepVen Then
                sql = sql & " INNER JOIN FCVendedor v on v.idvendedor = pc.idvendedor"
            End If
            sql = sql & " WHERE pc.BandCliente=" & CadenaBool(True, TipoDB)
            If gobjMain.GrupoActual.PermisoActual.ConsRepVen Then
                sql = sql & " AND v.codvendedor = '" & gobjMain.UsuarioActual.codUsuario & "' "
            End If
        End If
        sql = sql & "and Estado <> 2 "
    End If
    BandModulo = gobjMain.PermisoModuloEspecial(gobjMain.UsuarioActual.codUsuario, ModuloPagaRol)
        If BandModulo Then
            sql = sql & " UNION ALL"
            sql = sql & " SELECT e.CodProvCli, e.Nombre, g1e.CodGrupo1, g2e.CodGrupo2, g3e.CodGrupo3,g4E.codgrupo4,e.observacion, e.estado  "
             sql = sql & " FROM PCGrupo4 g4e RIGHT JOIN( PCGrupo3 g3e RIGHT JOIN (PCGrupo2 g2e RIGHT JOIN (PCGrupo1 g1e RIGHT JOIN Empleado e " & _
                          " ON g1e.IdGrupo1 = e.IdGrupo1) " & _
                    " ON g2e.IdGrupo2 = e.IdGrupo2) " & _
                " ON g3e.IdGrupo3 = e.IdGrupo3) " & _
               " ON g4e.idgrupo4 = e.idgrupo4 "
        End If
    sql = sql & " ORDER BY pc.Nombre"

    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCProvCliUnidoEmp = rs
    Else
        ListaPCProvCliUnidoEmp = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ConsGNTrans2ValoresIngreso() As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    '*** MAKOTO 03/oct/00
    sql = "SELECT"
    '*** MAKOTO 05/feb/01 Mod. Aumentado 'NumDocRef' y 'Nombre'
    sql = sql & " vwConsGNTrans.TransID, vwConsGNTrans.FechaTrans,  vwConsGNTrans.CodTrans, "
    sql = sql & " vwConsGNTrans.NumTrans, "
    sql = sql & " vwConsGNTrans.Nombre,  "
    sql = sql & " vwConsGNTrans.CostoTotal * signo,  "
    sql = sql & " (vwConsGNTrans.CostoTotal * signo) -(vwConsGNTrans.CostoRealTotal * signo),  "
    sql = sql & " (vwConsGNTrans.CostoRealTotal * signo) , "
    sql = sql & " IVA, "
    sql = sql & " (vwConsGNTrans.CostoRealTotal * signo) +IVA, "
    sql = sql & " (vwConsGNTrans.CostoTotal ) * SIGNO,  "
    sql = sql & " (vwConsGNTrans.CostoRealTotal * signo) - (vwConsGNTrans.CostoTotal * signo) ,  "
    sql = sql & " case when vwConsGNTrans.CostoTotal <> 0 then  "
    sql = sql & "  ((vwConsGNTrans.CostoRealTotal * signo) - (vwConsGNTrans.CostoTotal * signo)) / (vwConsGNTrans.CostoTotal * signo)  "
    sql = sql & " else ((vwConsGNTrans.CostoRealTotal * signo) - (vwConsGNTrans.CostoTotal * signo))  end,  "
    sql = sql & " codusuario, codVendedor, "
    sql = sql & " case vwConsGNTrans.Estado when '0' THEN 'NO CONT' when '1' THEN 'APROV' when '2' THEN 'DESPA' when '3' THEN 'ANULA' when '4' THEN 'SEM DESP' END AS estadoL "
    sql = sql & "  FROM vwConsGNTransPrecios as vwConsGNTrans "
    If gobjMain.GrupoActual.PermisoActual.ConsRepVen Then
        sql = sql & " INNER JOIN GNComprobante gn inner join PCProvCli pc INNER JOIN FCVendedor  v"
        sql = sql & " ON v.idvendedor = pc.idvendedor "
        sql = sql & " ON pc.IdProvcli = gn.idClienteRef "
        sql = sql & " ON gn.transid = vwConsGNTrans.transid "
    End If
    'Condición de FechaTrans
    cond = "vwConsGNTrans.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB)
   'Condición de CodTrans
    If Len(cond) > 0 Then cond = cond & " AND "
    If Len(gobjCond.CodTrans) > 0 Then      'Si está especificado transaccion
        'Si es una sola transaccion
        If InStr(gobjCond.CodTrans, ",") = 0 Then
            cond = cond & "(vwConsGNTrans.CodTrans='" & gobjCond.CodTrans & "')"
        'Si está seleccionado varias trans.
        Else
            cond = cond & "(vwConsGNTrans.CodTrans IN (" & gobjCond.CodTrans & "))"
        End If
    Else
        'Si no hay condicion de cod.trans, selecciona todas las trans.
        ' que tenga permiso
        s = gobjMain.GrupoActual.PermisoActual.ListaTrans(True)
        If Len(s) > 0 Then
            cond = cond & "(vwConsGNTrans.CodTrans " & s & ")"
        Else
            cond = cond & "(vwConsGNTrans.CodTrans = '-------')"    'Para que NO devuelva nada si no tiene ningún permiso  '*** MAKOTO 26/dic/00
        End If
    End If
    'Condición de NumTrans
    If (gobjCond.NumTrans1 > 0) And (gobjCond.NumTrans2 > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.NumTrans BETWEEN " & gobjCond.NumTrans1 & " AND " & gobjCond.NumTrans2 & ")"
    ElseIf gobjCond.NumTrans1 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.NumTrans>=" & gobjCond.NumTrans1 & ")"
    ElseIf gobjCond.NumTrans2 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.NumTrans<=" & gobjCond.NumTrans2 & ")"
    End If
    'Condición de Estado
    If gobjCond.EstadoBool(ESTADO_NOAPROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.Estado<>" & ESTADO_NOAPROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_APROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.Estado<>" & ESTADO_APROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_DESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.Estado<>" & ESTADO_DESPACHADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_ANULADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.Estado<>" & ESTADO_ANULADO & ")"
    End If
    '----------------------------------------
    '----- CAO 13/06/2006
    '-----------------------------------------
    If gobjCond.EstadoBool(ESTADO_SEMDESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.Estado<>" & ESTADO_SEMDESPACHADO & ")"
   End If
    If Len(gobjCond.CodCentro1) > 0 And Len(gobjCond.CodCentro2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " codCentro between '" & gobjCond.CodCentro1 & "' and '" & gobjCond.CodCentro2 & "'"
    End If
    If gobjMain.GrupoActual.PermisoActual.ConsRepVen Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " v.codvendedor = '" & gobjMain.UsuarioActual.codUsuario & "'  "
    End If
    If Len(gobjCond.CodPC1) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " codprovcli = '" & gobjCond.CodPC1 & "' "
    End If
    If Len(gobjCond.CodPC2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " codvendedor = '" & gobjCond.CodPC2 & "' "
    End If
    If Len(gobjCond.CodSust) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " codusuario = '" & gobjCond.CodSust & "' "
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
   'Ordern de filas
    sql = sql & " ORDER BY vwConsGNTrans.FechaTrans DESC, vwConsGNTrans.HoraTrans DESC, vwConsGNTrans.TransID DESC"       '*** MAKOTO 07/dic/00 HoraTrans agregado
    Set rs = Me.OpenRecordset(sql)
    Set ConsGNTrans2ValoresIngreso = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta General " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function

Public Function VerificaAuditoriaEquipo(ByRef UsuarioRed) As Boolean
    Dim sql As String, s As String
    Dim rs As Recordset, rs1 As Recordset
        sql = "SELECT UsuarioRed"
        sql = sql & " From Regauditoria "
        sql = sql & " Where Usuariored='" & UsuarioRed & "'"
        Set rs = Me.OpenRecordset(sql)
        If rs.RecordCount = 0 Then
            sql = "SELECT CodUsuario"
            sql = sql & " From GnLogAccion "
            sql = sql & " Where Usuariored='" & UsuarioRed & "'"
            Set rs1 = Me.OpenRecordset(sql)
            If rs1.RecordCount = 0 Then
                VerificaAuditoriaEquipo = False
            Else
               VerificaAuditoriaEquipo = True
            End If
        Else
           VerificaAuditoriaEquipo = True
        End If
  rs.Close
    Set rs = Nothing
    Set rs1 = Nothing
End Function

'AUC para ecuamueble
Public Function ListaIVKProcesosMantenimientoNew_1(ByVal CodCliente As String, ByVal codItem As String) As Variant
End Function
'AUC para ecuamueble urgencias
Public Function ListaIVKProcesosMantenimientoNew_2(ByVal CodCliente As String, ByVal codItem As String, ByVal NumOrden As Long) As Variant
   Dim sql As String, rs As Recordset
    Dim TransOP As String
    On Error GoTo CapturaError
        If Len(Me.GNOpcion.ObtenerValor("ProduccionTransOP")) > 0 Then
            TransOP = Me.GNOpcion.ObtenerValor("ProduccionTransOP")
        Else
            Err.Raise MSGERR_INVALIDO, "Empresa_TransOrdenProduccion", "No esta Configurado para tipo trans OP "
        End If
        sql = "select DISTINCT gn.transid, ivkp.idkp,gn.codusuario,gn.NumTrans,iv.codinventario,pc.nombre,  "
        sql = sql & " gc.fechainicio,iv.descripcion+ivk.nota as descripcion,ivp.codproceso,ivkp.cantidad,ivkp.orden "
        sql = sql & " ,UPPER(ivkpO.codusuario), case when ivkp.estado1= 0 then  gne.color else gne1.color end as color ,'' as resultado"
        sql = sql & " from gncomprobante gn  "
        sql = sql & " inner join ivkardex ivk inner join ivinventario iv  on iv.idinventario = ivk.idinventario"
        sql = sql & " on ivk.transid = gn.transid inner join pcprovcli pc on pc.idprovcli= gn.idclienteref "
        sql = sql & " inner join gncentrocosto gc on gc.idcentro = gn.idcentro "
        sql = sql & " inner join ivkproceso ivkp inner join ivproceso ivp on ivp.idproceso = ivkp.idproceso "
        sql = sql & " left join ivkproceso ivkpO ON ivkpO.idkp = ivkp.idkpasignado"
        sql = sql & " Left join gnestadoprod gne on gne.valor= ivkp.estado"
        sql = sql & " Left join gnestadoprod gne1 on gne1.valor= ivkp.estado1"
        sql = sql & " on ivkp.transid = gn.transid"
        sql = sql & " Where ivkp.idcentrodet = 0"
        sql = sql & " AND GN.codtrans = '" & TransOP & "'"
        sql = sql & " And ivkp.estado1 NOT in (select valor from gnestadoprod where menu = 'Listo')"
        sql = sql & " And ivkp.FechaInicio <= '" & Date & "'"
        sql = sql & " And gn.estado <> 3 And iv.tipo = 6 "
        If Len(CodCliente) > 0 Then
            sql = sql & " And pc.codprovcli = '" & CodCliente & "'"
        End If
        If Len(codItem) > 0 Then
            sql = sql & " And iv.codInventario = '" & codItem & "'"
        End If
        If NumOrden > 0 Then
            sql = sql & " And gn.numtrans = " & NumOrden
        End If
        sql = sql & " Order by ivkp.orden"
        Set rs = Me.OpenRecordset(sql)
        Set ListaIVKProcesosMantenimientoNew_2 = rs
       Set rs = Nothing
        Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function


Public Function ConsVentasDINARDAP() As Variant
        Dim sql As String, cond As String, CadenaValores As String, Condicion As String
    Dim rs As Recordset, f1 As String, numReg As Long, Trans As String

Dim aux As String
        
        
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   With gobjCond
        'Reporte de un mes a la vez
    '--------------------------------------------------------------------------------------------------------------------------------
'        If DatePart("yyyy", .fecha1) > 2013 Then
            f1 = .fecha1
'        Else
'            f1 = DateAdd("d", -1, DateAdd("m", 1, DateSerial(Year(.fecha1), Month(.fecha1), 1)))
'        End If

    
            aux = IIf(.numMoneda > 0, "/Cotizacion" & .numMoneda + 1, "")
        VerificaExistenciaTabla 1
        sql = "SELECT gc.fechatrans, " & _
            "pck.IdAsignado, " & _
            "(pck.Debe + pck.Haber) " & aux & " AS Valor " & _
            "INTO tmp1 " & _
            "From " & _
            "GNtrans gt INNER JOIN " & _
                "(GNComprobante gc INNER JOIN PCKardex pck " & _
                "ON gc.transID = pck.transID) " & _
                          "ON gt.Codtrans = gc.Codtrans " & _
            "Where (pck.IdAsignado <> 0) " & _
            "AND (gc.Estado <> 3) " & _
            "AND (gt.AfectaSaldoPC=1) " & _
            "AND (gc.Fechatrans<= " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")"


        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        
        
        sql = "SELECT gc.fechatrans, " & _
            "pck.IdAsignado, " & _
            "(pck.Debe + pck.Haber) " & aux & " AS Valor " & _
            "INTO tmp111 " & _
            "From " & _
            "GNtrans gt INNER JOIN " & _
                "(GNComprobante gc INNER JOIN PCKardex pck " & _
                "ON gc.transID = pck.transID) " & _
                          "ON gt.Codtrans = gc.Codtrans " & _
            "Where (pck.IdAsignado <> 0) " & _
            "AND (gc.Estado <> 3) " & _
            "AND (gt.AfectaSaldoPC=1) " & _
            " "
            '"AND (gc.Fechatrans> " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")"

        VerificaExistenciaTabla 111
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        
        
        
        VerificaExistenciaTabla 2
    '2)Agrupa  estos  documentos por IdAsignado
        sql = "SELECT max(Fechatrans) as FechaPago, " & _
              "IdAsignado," & _
              "isnull(Sum(Valor),0) AS VCancelado " & _
              "INTO tmp2 " & _
              "FROM tmp1 " & _
              "GROUP BY IdAsignado"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        
        VerificaExistenciaTabla 2222
    '2)Agrupa  estos  documentos por IdAsignado
        sql = "SELECT max(Fechatrans) as FechaUltimoPago, " & _
              "IdAsignado," & _
              "isnull(Sum(Valor),0) AS VTCancelado " & _
              "INTO tmp2222 " & _
              "FROM tmp111 " & _
              "GROUP BY IdAsignado"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        
        
        '------------ X VENCER
        
        sql = "SELECT"
        sql = sql & " gc.transId,"
        sql = sql & " ((pck.Debe + pck.Haber) /Cotizacion2) AS Valor,"
        sql = sql & " isnull((vw.VCancelado),0) AS VCancelado,"
        sql = sql & " ((pck.Debe + pck.Haber) /Cotizacion2 - isnull(vw.VCancelado,0) )AS Saldo,"
        sql = sql & " case when ((pck.Debe + pck.Haber) /Cotizacion2 - isnull(vw.VCancelado,0) )<>0 then  "
        sql = sql & "  case when datediff(day, (Fechavenci), " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") <= 0 and datediff(day, (Fechavenci), " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") >= -30 "
        sql = sql & " then  ((pck.Debe + pck.Haber) /Cotizacion2 - isnull(vw.VCancelado,0) ) else 0 end end as SaldoxV1_30"
         sql = sql & " INTO tmp130"
        sql = sql & " from"
        sql = sql & " GNComprobante gc"
        sql = sql & " INNER JOIN PCKardex pck"
        sql = sql & " left join tmp2 vw  ON vw.IdAsignado = pck.Id"
        sql = sql & " ON gc.transID = pck.transID"
        sql = sql & " Where (pck.IdAsignado = 0) And (gc.Estado <> 3) AND (gc.Fechatrans<=" & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")AND (pck.Debe >0)"
        sql = sql & " and( datediff(day, (Fechavenci), " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")<= 0 and datediff(day, (Fechavenci), " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")>=-30)"

        VerificaExistenciaTabla 130
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        
        
        sql = "SELECT"
        sql = sql & " transId,"
        sql = sql & " sum(Valor) as Valor,"
        sql = sql & " sum(VCancelado) as VCancelado,"
        sql = sql & " sum(Saldo) as saldo,"
        sql = sql & " sum(SaldoxV1_30) as SaldoxV1_30 "


        sql = sql & " INTO tmp330"
        sql = sql & " from tmp130"
        sql = sql & " group by transId "
        
        VerificaExistenciaTabla 330
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        
        
        sql = "SELECT"
        sql = sql & " gc.transId,"
        sql = sql & " ((pck.Debe + pck.Haber) /Cotizacion2) AS Valor,"
        sql = sql & " isnull((vw.VCancelado),0) AS VCancelado,"
        sql = sql & " ((pck.Debe + pck.Haber) /Cotizacion2 - isnull(vw.VCancelado,0) )AS Saldo,"
        sql = sql & " case when ((pck.Debe + pck.Haber) /Cotizacion2 - isnull(VCancelado,0) )<>0 then  "
        sql = sql & "  case when datediff(day, (Fechavenci), " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") < -30 and datediff(day, (Fechavenci), " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") >= -90 "
        sql = sql & " then  ((pck.Debe + pck.Haber) /Cotizacion2 - isnull(vw.VCancelado,0) ) else 0 end end as SaldoxV1_90"
        sql = sql & " INTO tmp190"
        sql = sql & " from"
        sql = sql & " GNComprobante gc"
        sql = sql & " INNER JOIN PCKardex pck"
        sql = sql & " left join tmp2 vw  ON vw.IdAsignado = pck.Id"
        sql = sql & " ON gc.transID = pck.transID"
        sql = sql & " Where (pck.IdAsignado = 0) And (gc.Estado <> 3) AND (gc.Fechatrans<=" & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")AND (pck.Debe >0)"
        sql = sql & " and( datediff(day, (Fechavenci), " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")< -30 and datediff(day, (Fechavenci), " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")>=-90)"

        
        VerificaExistenciaTabla 190
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        
        
        sql = "SELECT"
        sql = sql & " transId,"
        sql = sql & " sum(Valor) as Valor,"
        sql = sql & " sum(VCancelado) as VCancelado,"
        sql = sql & " sum(Saldo) as saldo,"
        sql = sql & " sum(SaldoxV1_90) as SaldoxV1_90"
        sql = sql & " INTO tmp390"
        sql = sql & " from tmp190"
        sql = sql & " group by transId "
        
        VerificaExistenciaTabla 390
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        
        
        sql = "SELECT"
        sql = sql & " gc.transId,"
        sql = sql & " ((pck.Debe + pck.Haber) /Cotizacion2) AS Valor,"
        sql = sql & " isnull((vw.VCancelado),0) AS VCancelado,"
        sql = sql & " ((pck.Debe + pck.Haber) /Cotizacion2 - isnull(vw.VCancelado,0) )AS Saldo,"
        sql = sql & " case when ((pck.Debe + pck.Haber) /Cotizacion2 - isnull(VCancelado,0) )<>0 then  "
        sql = sql & "  case when datediff(day, (Fechavenci), " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") < -90 and datediff(day, (Fechavenci), " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") >= -180 "
        sql = sql & " then  ((pck.Debe + pck.Haber) /Cotizacion2 - isnull(vw.VCancelado,0) ) else 0 end end as SaldoxV1_180"
        sql = sql & " INTO tmp1180"
        sql = sql & " from"
        sql = sql & " GNComprobante gc"
        sql = sql & " INNER JOIN PCKardex pck"
        sql = sql & " left join tmp2 vw  ON vw.IdAsignado = pck.Id"
        sql = sql & " ON gc.transID = pck.transID"
        sql = sql & " Where (pck.IdAsignado = 0) And (gc.Estado <> 3) AND (gc.Fechatrans<=" & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")AND (pck.Debe >0)"
        sql = sql & " and( datediff(day, (Fechavenci), " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")< -90 and datediff(day, (Fechavenci), " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")>=-180)"

        VerificaExistenciaTabla 1180
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        
        
        sql = "SELECT"
        sql = sql & " transId,"
        sql = sql & " sum(Valor) as Valor,"
        sql = sql & " sum(VCancelado) as VCancelado,"
        sql = sql & " sum(Saldo) as saldo,"
        sql = sql & " sum(SaldoxV1_180) as SaldoxV1_180"
        sql = sql & " INTO tmp3180"
        sql = sql & " from tmp1180"
        sql = sql & " group by transId "
        
       
        VerificaExistenciaTabla 3180
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        
            
        sql = "SELECT"
        sql = sql & " gc.transId,"
        sql = sql & " ((pck.Debe + pck.Haber) /Cotizacion2) AS Valor,"
        sql = sql & " isnull((vw.VCancelado),0) AS VCancelado,"
        sql = sql & " ((pck.Debe + pck.Haber) /Cotizacion2 - isnull(vw.VCancelado,0) )AS Saldo,"
        sql = sql & " case when ((pck.Debe + pck.Haber) /Cotizacion2 - isnull(VCancelado,0) )<>0 then  "
        sql = sql & "  case when datediff(day, (Fechavenci), " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") < -180 and datediff(day, (Fechavenci), " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") >= -360 "
        sql = sql & " then  ((pck.Debe + pck.Haber) /Cotizacion2 - isnull(vw.VCancelado,0) ) else 0 end end as SaldoxV1_360"
        sql = sql & " INTO tmp1360"
        sql = sql & " from"
        sql = sql & " GNComprobante gc"
        sql = sql & " INNER JOIN PCKardex pck"
        sql = sql & " left join tmp2 vw  ON vw.IdAsignado = pck.Id"
        sql = sql & " ON gc.transID = pck.transID"
        sql = sql & " Where (pck.IdAsignado = 0) And (gc.Estado <> 3) AND (gc.Fechatrans<=" & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")AND (pck.Debe >0)"
        sql = sql & " and( datediff(day, (Fechavenci), " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")< -180 and datediff(day, (Fechavenci), " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")>=-360)"

        
        VerificaExistenciaTabla 1360
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg

        sql = "SELECT"
        sql = sql & " transId,"
        sql = sql & " sum(Valor) as Valor,"
        sql = sql & " sum(VCancelado) as VCancelado,"
        sql = sql & " sum(Saldo) as saldo,"
        sql = sql & " sum(SaldoxV1_360) as SaldoxV1_360"
        sql = sql & " INTO tmp3360"
        sql = sql & " from tmp1360"
        sql = sql & " group by transId "
        
       
        VerificaExistenciaTabla 3360
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        
        
        
        
        
        
        

        '------------ VENCIDO

        sql = "SELECT"
        sql = sql & " gc.transId,"
        sql = sql & " ((pck.Debe + pck.Haber) /Cotizacion2) AS Valor,"
        sql = sql & " isnull((vw.VCancelado),0) AS VCancelado,"
        sql = sql & " ((pck.Debe + pck.Haber) /Cotizacion2 - isnull(vw.VCancelado,0) )AS Saldo,"
        sql = sql & " case when ((pck.Debe + pck.Haber) /Cotizacion2 - isnull(VCancelado,0) )<>0 then  "
        sql = sql & "  case when datediff(day, (Fechavenci), " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") > 0 and datediff(day, (Fechavenci), " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") <= 30 "
        sql = sql & " then  ((pck.Debe + pck.Haber) /Cotizacion2 - isnull(vw.VCancelado,0) ) else 0 end end as SaldoV1_30"
        sql = sql & " INTO tmp230"
        sql = sql & " from"
        sql = sql & " GNComprobante gc"
        sql = sql & " INNER JOIN PCKardex pck"
        sql = sql & " left join tmp2 vw  ON vw.IdAsignado = pck.Id"
        sql = sql & " ON gc.transID = pck.transID"
        sql = sql & " Where (pck.IdAsignado = 0) And (gc.Estado <> 3) AND (gc.Fechatrans<=" & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")AND (pck.Debe >0)"
        sql = sql & " and( datediff(day, (Fechavenci), " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")> 0 and datediff(day, (Fechavenci), " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")<=30)"

        VerificaExistenciaTabla 230
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        
        
        sql = "SELECT"
        sql = sql & " transId,"
        sql = sql & " sum(Valor) as Valor,"
        sql = sql & " sum(VCancelado) as VCancelado,"
        sql = sql & " sum(Saldo) as saldo,"
        sql = sql & " sum(SaldoV1_30) as SaldoV1_30"
        sql = sql & " INTO tmp430"
        sql = sql & " from tmp230"
        sql = sql & " group by transId "
        
        VerificaExistenciaTabla 430
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg

        
        
        sql = "SELECT"
        sql = sql & " gc.transId,"
        sql = sql & " ((pck.Debe + pck.Haber) /Cotizacion2) AS Valor,"
        sql = sql & " isnull((vw.VCancelado),0) AS VCancelado,"
        sql = sql & " ((pck.Debe + pck.Haber) /Cotizacion2 - isnull(vw.VCancelado,0) )AS Saldo,"
        sql = sql & " case when ((pck.Debe + pck.Haber) /Cotizacion2 - isnull(VCancelado,0) )<>0 then  "
        sql = sql & "  case when datediff(day, (Fechavenci), " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") > 30 and datediff(day, (Fechavenci), " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") <= 90 "
        sql = sql & " then  ((pck.Debe + pck.Haber) /Cotizacion2 - isnull(vw.VCancelado,0) ) else 0 end end as SaldoV1_90"
        sql = sql & " INTO tmp290"
        sql = sql & " from"
        sql = sql & " GNComprobante gc"
        sql = sql & " INNER JOIN PCKardex pck"
        sql = sql & " left join tmp2 vw  ON vw.IdAsignado = pck.Id"
        sql = sql & " ON gc.transID = pck.transID"
        sql = sql & " Where (pck.IdAsignado = 0) And (gc.Estado <> 3) AND (gc.Fechatrans<=" & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")AND (pck.Debe >0)"
        sql = sql & " and( datediff(day, (Fechavenci), " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")> 30 and datediff(day, (Fechavenci), " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")<=90)"

        
        VerificaExistenciaTabla 290
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        
        
        sql = "SELECT"
        sql = sql & " transId,"
        sql = sql & " sum(Valor) as Valor,"
        sql = sql & " sum(VCancelado) as VCancelado,"
        sql = sql & " sum(Saldo) as saldo,"
        sql = sql & " sum(SaldoV1_90) as SaldoV1_90"
        sql = sql & " INTO tmp490"
        sql = sql & " from tmp290"
        sql = sql & " group by transId "
        
        VerificaExistenciaTabla 490
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        
        
        sql = "SELECT"
        sql = sql & " gc.transId,"
        sql = sql & " ((pck.Debe + pck.Haber) /Cotizacion2) AS Valor,"
        sql = sql & " isnull((vw.VCancelado),0) AS VCancelado,"
        sql = sql & " ((pck.Debe + pck.Haber) /Cotizacion2 - isnull(vw.VCancelado,0) )AS Saldo,"
        sql = sql & " case when ((pck.Debe + pck.Haber) /Cotizacion2 - isnull(VCancelado,0) )<>0 then  "
        sql = sql & "  case when datediff(day, (Fechavenci), " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") > 90 and datediff(day, (Fechavenci), " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") <= 180 "
        sql = sql & " then  ((pck.Debe + pck.Haber) /Cotizacion2 - isnull(vw.VCancelado,0) ) else 0 end end as SaldoV1_180"
        sql = sql & " INTO tmp2180"
        sql = sql & " from"
        sql = sql & " GNComprobante gc"
        sql = sql & " INNER JOIN PCKardex pck"
        sql = sql & " left join tmp2 vw  ON vw.IdAsignado = pck.Id"
        sql = sql & " ON gc.transID = pck.transID"
        sql = sql & " Where (pck.IdAsignado = 0) And (gc.Estado <> 3) AND (gc.Fechatrans<=" & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")AND (pck.Debe >0)"
        sql = sql & " and( datediff(day, (Fechavenci), " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")>90 and datediff(day, (Fechavenci), " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")<=180)"

        VerificaExistenciaTabla 2180
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        
        
        sql = "SELECT"
        sql = sql & " transId,"
        sql = sql & " sum(Valor) as Valor,"
        sql = sql & " sum(VCancelado) as VCancelado,"
        sql = sql & " sum(Saldo) as saldo,"
        sql = sql & " sum(SaldoV1_180) as SaldoV1_180"
        sql = sql & " INTO tmp4180"
        sql = sql & " from tmp2180"
        sql = sql & " group by transId "
        
       
        VerificaExistenciaTabla 4180
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        
            
        sql = "SELECT"
        sql = sql & " gc.transId,"
        sql = sql & " ((pck.Debe + pck.Haber) /Cotizacion2) AS Valor,"
        sql = sql & " isnull((vw.VCancelado),0) AS VCancelado,"
        sql = sql & " ((pck.Debe + pck.Haber) /Cotizacion2 - isnull(vw.VCancelado,0) )AS Saldo,"
        sql = sql & " case when ((pck.Debe + pck.Haber) /Cotizacion2 - isnull(VCancelado,0) )<>0 then  "
        sql = sql & "  case when datediff(day, (Fechavenci), " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") >180 and datediff(day, (Fechavenci), " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") <= 360 "
        sql = sql & " then  ((pck.Debe + pck.Haber) /Cotizacion2 - isnull(vw.VCancelado,0) ) else 0 end end as SaldoV1_360"
        sql = sql & " INTO tmp2360"
        sql = sql & " from"
        sql = sql & " GNComprobante gc"
        sql = sql & " INNER JOIN PCKardex pck"
        sql = sql & " left join tmp2 vw  ON vw.IdAsignado = pck.Id"
        sql = sql & " ON gc.transID = pck.transID"
        sql = sql & " Where (pck.IdAsignado = 0) And (gc.Estado <> 3) AND (gc.Fechatrans<=" & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")AND (pck.Debe >0)"
        sql = sql & " and( datediff(day, (Fechavenci), " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")> 180 and datediff(day, (Fechavenci), " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")<=360)"

        
        VerificaExistenciaTabla 2360
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg

        sql = "SELECT"
        sql = sql & " transId,"
        sql = sql & " sum(Valor) as Valor,"
        sql = sql & " sum(VCancelado) as VCancelado,"
        sql = sql & " sum(Saldo) as saldo,"
        sql = sql & " sum(SaldoV1_360) as SaldoV1_360"
        sql = sql & " INTO tmp4360"
        sql = sql & " from tmp2360"
        sql = sql & " group by transId "
        
        
       
        VerificaExistenciaTabla 4360
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        
        
        
        sql = "SELECT"
        sql = sql & " gc.transId,"
        sql = sql & " ((pck.Debe + pck.Haber) /Cotizacion2) AS Valor,"
        sql = sql & " isnull((vw.VCancelado),0) AS VCancelado,"
        sql = sql & " ((pck.Debe + pck.Haber) /Cotizacion2 - isnull(vw.VCancelado,0) )AS Saldo,"
        sql = sql & " case when ((pck.Debe + pck.Haber) /Cotizacion2 - isnull(VCancelado,0) )<>0 then  "
        sql = sql & "  case when datediff(day, (Fechavenci), " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") >360  "
        sql = sql & " then  ((pck.Debe + pck.Haber) /Cotizacion2 - isnull(vw.VCancelado,0) ) else 0 end end as SaldoV1_m360"
        sql = sql & " INTO tmp5360"
        sql = sql & " from"
        sql = sql & " GNComprobante gc"
        sql = sql & " INNER JOIN PCKardex pck"
        sql = sql & " left join tmp2 vw  ON vw.IdAsignado = pck.Id"
        sql = sql & " ON gc.transID = pck.transID"
        sql = sql & " Where (pck.IdAsignado = 0) And (gc.Estado <> 3) AND (gc.Fechatrans<=" & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")AND (pck.Debe >0)"
        sql = sql & " and datediff(day, (Fechavenci), " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")> 360 "

        
        VerificaExistenciaTabla 5360
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg

        sql = "SELECT"
        sql = sql & " transId,"
        sql = sql & " sum(Valor) as Valor,"
        sql = sql & " sum(VCancelado) as VCancelado,"
        sql = sql & " sum(Saldo) as saldo,"
        sql = sql & " sum(SaldoV1_m360) as SaldoV1_m360"
        sql = sql & " INTO tmp6360"
        sql = sql & " from tmp5360"
        sql = sql & " group by transId "
        
        VerificaExistenciaTabla 6360
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        
        
        
        
        
        
        
        
        
        
        
        
        
    '3) Finalmente une  con el documento  Padre
        VerificaExistenciaTabla 3
        sql = "SELECT  gc.transId, gc.Codtrans, gc.Numtrans, gc.NumDocRef, pc.IdProvCli, " & _
            "pc.RUC, pc.Nombre, codtipodocumento, NumSerieEstaSRI ,NumSeriePuntoSRI, fechapago, " & _
            "(pck.Debe + pck.Haber) " & aux & " AS Valor, " & _
            "isnull(vw.VCancelado,0) AS VCancelado, " & _
            "(pck.Debe + pck.Haber) " & aux & " - isnull(vw.VCancelado,0) AS Saldo, " & _
            "pck.IdForma, pck.NumLetra, " & _
            "pck.FechaEmision, pck.FechaVenci, " & _
            "pck.Observacion, ISNULL(fc.codvendedor,fcV.codvendedor) as codven, ISNULL(fc.nombre,fcV.nombre) as nomven, " & _
            "gc.codusuario,  gc.codUsuarioAutoriza, pc.Observacion as ObsProvCli, ivba.codbanco, ivba.descripcion as nombrebanco," & _
            "PCK.NumCuenta as ctaBanco, pck.numcheque, pck.TitularCta, gc.idzona   " & _
            "INTO tmp3 " & _
            "From fcvendedor fc right join GNComprobante gc INNER JOIN " & _
                    "(PCProvCli pc  left join Anexo_TipoDocumento a on pc.idTipodocumento = a.id INNER JOIN " & _
                    "    (PCKardex pck  LEFT JOIN fcvendedor fcv on pck.idvendedor=FCV.IDVENDEDOR left join " & _
                    "      tmp2 vw  ON vw.IdAsignado = pck.Id) " & _
                    " ON pc.IdProvCli = pck.IdProvCli) " & _
                "ON gc.transID = pck.transID on fc.idvendedor=gc.idvendedor left join IVBanco ivba on pck.idbanco=ivba.idbanco "
            
                sql = sql & "Where (pck.IdAsignado = 0) And (gc.Estado <> 3) "
            sql = sql & "AND (gc.Fechatrans<=" & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")" & _
            "AND (pck.Debe >0) "
       'gobjMain.EmpresaActual.EjecutarSQL sql, numreg
       
       
        sql = " SELECT  distinct "
        sql = sql & " gc.transId,gc.Codtrans, gc.Numtrans, count(FECHAVENCI) as NumCuota, "
        'sql = sql & " gc.idclienteref , "
        sql = sql & " pck.idprovcli as idclienteref , "
        sql = sql & " NumSerieEstaSRI, NumSeriePuntoSRI, "
        sql = sql & " sum((pck.Debe + pck.Haber) /Cotizacion2) AS Valor,"
        sql = sql & " sum(isnull(vw.VCancelado,0)) AS VCancelado,"
        sql = sql & " sum((pck.Debe + pck.Haber) /Cotizacion2 - isnull(vw.VCancelado,0)) AS Saldo,"
        sql = sql & " max(pck.FechaEmision) as FechaEmision , MAX(FECHAVENCI) AS FechaVenci, count(pck.FechaEmision) as numpagos, max(fechapago) as fechapago, "
        sql = sql & " SaldoxV1_30 , SaldoxV1_90, SaldoxV1_180, SaldoxV1_360, "
        sql = sql & " SaldoV1_30 , SaldoV1_90, SaldoV1_180, SaldoV1_360 , SaldoV1_m360,max(vw222.FechaUltimoPago) as FechaUltimoPago, sum(VTCancelado) as VTCancelado "
        sql = sql & " INTO tmp3"
        sql = sql & " From GNComprobante gc"
        sql = sql & " left join tmp330 on gc.transid=tmp330.transid"
        sql = sql & " left join tmp390 on gc.transid=tmp390.transid"
        sql = sql & " left join tmp3180 on gc.transid=tmp3180.transid"
        sql = sql & " left join tmp3360 on gc.transid=tmp3360.transid"
        sql = sql & " left join tmp430 on gc.transid=tmp430.transid"
        sql = sql & " left join tmp490 on gc.transid=tmp490.transid"
        sql = sql & " left join tmp4180 on gc.transid=tmp4180.transid"
        sql = sql & " left join tmp4360 on gc.transid=tmp4360.transid"
        sql = sql & " left join tmp6360 on gc.transid=tmp6360.transid"
        sql = sql & " INNER JOIN PCKardex pck"
        sql = sql & " left join tmp2 vw"
        sql = sql & " ON vw.IdAsignado = pck.Id"
        sql = sql & " left join tmp2222 vw222"
        sql = sql & " ON vw222.IdAsignado = pck.Id"
        
        sql = sql & " ON gc.transID = pck.transID"
        sql = sql & " Where (pck.IdAsignado = 0) And (gc.Estado <> 3) AND (gc.Fechatrans<=" & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")AND (pck.Debe >0)"
        'sql = sql & " and codtrans='fci' and numtrans=60910 "
        sql = sql & " group by gc.transId, gc.Codtrans, gc.Numtrans,  "
        sql = sql & " pck.idprovcli, "
        'sql = sql & " gc.idclienteref ,"
        sql = sql & " NumSerieEstaSRI , NumSeriePuntoSRI,  "
        sql = sql & " SaldoxV1_30, SaldoxV1_90,SaldoxV1_180, SaldoxV1_360, SaldoV1_30,  SaldoV1_90, SaldoV1_180, SaldoV1_360, SaldoV1_m360 "
       
       gobjMain.EmpresaActual.EjecutarSQL sql, numReg
       
    '---------------------------------------------------------------------------------
    '4  Consulta  final
            Condicion = Condicion & " AND vw.FechaeMISION <= " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB)
'        If Len(.CodGrupo) > 0 Then
'            Condicion = Condicion & " AND vw.Codtrans IN (" & _
'                        PreparaCadena(.CodGrupo) & ") "
'        End If
'        If Len(.Grupo1) > 0 Or Len(.Grupo2) > 0 Then
'            Condicion = Condicion & " AND PCGrupo" & .NumGrupo & ".CodGrupo" & .NumGrupo & " BETWEEN '" & _
'                        .Grupo1 & " ' AND '" & .Grupo2 & "'"
'        End If
        
       
            Condicion = Condicion & " AND PcProvCli.BandCliente=1"
        
        
        
        If Len(.Codciudad1) > 0 Then
            Condicion = Condicion & " AND ( GNS.CodSucursal = '" & .Codciudad1 & "')"
        End If
        
        If Len(.Codciudad2) > 0 Then
            Condicion = Condicion & " AND ( GNS.CodZona= '" & .Codciudad2 & "')"
        End If
        
        
            If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura")) > 0 Then
                If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura") > 0 Then
                    Trans = "vw.NumSerieEstaSRI +vw.NumSeriePuntoSRI+ right('000000000' + CONVERT(varchar,vw.numdocref),9)"
                    Trans = "('' + CONVERT(varchar,vw.numdocref))"
                Else
                     Trans = "vw.NumSerieEstaSRI +vw.NumSeriePuntoSRI+ right('000000000' + CONVERT(varchar,vw.Numtrans),9)"
                 End If
            Else
                Trans = "vw.NumSerieEstaSRI +vw.NumSeriePuntoSRI+ right('000000000' + CONVERT(varchar,vw.Numtrans),9)"
            End If
        
        

    
    

    sql = "SELECT  "
    
    sql = sql & "'" & gobjMain.EmpresaActual.GNOpcion.CodigoSC & "' as codEntidad, '" & f1 & "' as  fechaDatos, "
    sql = sql & " case when codtipodocumento = 'P' then 'E' else codtipodocumento end as codtipodocumento , "
    sql = sql & "PcProvCli.RUC, SUBSTRING(PcProvCli.Nombre,1,100) AS NOMBRE , TIPOSUJETO, "
    sql = sql & " pcp. codprovinciasc as Provincia, pcc.codcantonsc as canton, pcparr.codparroquia as parroquia, "
    sql = sql & "  case when TIPOSUJETO<>'J' then SEXO end as sexo, "
    sql = sql & "  case when TIPOSUJETO<>'J' then ESTADOCIVIL end as ESTADOCIVIL , "
    sql = sql & "  case when TIPOSUJETO<>'J' then ORIGENINGRESOS end as ORIGENINGRESOS, "
    'sql = sql & " case when modulo='IV' then " & Trans & " else numletra end As trans ,  "
    sql = sql & Trans & "  As trans ,  "
    sql = sql & " vw.Valor,  vw.Saldo, vw.FechaEmision AS FechaConcesion,  "
    sql = sql & "vw.FechaVenci, vw.FechaVenci as FechaExigible,"
    sql = sql & "datediff(day, vw.FechaEmision, vw.FechaVenci) as DiasCredito,    "
    sql = sql & "datediff(day, vw.FechaEmision, vw.FechaVenci)/(vw.numpagos) as PeriodicidadPago,"
    sql = sql & "case when vw.Saldo<>0 then case when datediff(day, vw.Fechavenci, '" & f1 & "') >=0 then datediff(day, vw.Fechavenci, '" & f1 & "') else 0 end else 0 end as DiasMora, "
    sql = sql & "case when vw.Saldo<>0 then case when datediff(day, vw.Fechavenci, '" & f1 & "') >=0 then vw.Saldo else 0 end else 0 end as MontoMora,"
    sql = sql & "case when vw.Saldo<>0 then case when datediff(day, vw.Fechavenci, '" & f1 & "') >=0 then 0 else 0 end else 0 end as InteresMora,  "
    sql = sql & " isnull(SaldoxV1_30,0) as SaldoxV1_30 , isnull(SaldoxV1_90,0) as SaldoxV1_90, isnull(SaldoxV1_180,0) as SaldoxV1_180 , isnull(SaldoxV1_360,0) as SaldoxV1_360, 0 as mas360, "
    sql = sql & " isnull(SaldoV1_30,0) as SaldoV1_30 , "
    sql = sql & " isnull(SaldoV1_90,0) as SaldoV1_90 , "
    sql = sql & " isnull(SaldoV1_180,0) as SaldoV1_180 , "
    sql = sql & " isnull(SaldoV1_360,0) as SaldoV1_360 , "
    sql = sql & " isnull(SaldoV1_m360,0) as SaldoV1_m360 , "
    sql = sql & "0 as ValorDemanda, 0 CarteraCastigada, vw.Valor/vw.numpagos as CuotaCredito, "
    'sql = sql & " case when vw.Saldo=0 then fechapago end as fechapago , "
    sql = sql & " case when (vw.Valor- VTCancelado) = 0 then fechaUltimopago else '' end as fechaUltimopago ,    "
    sql = sql & " case when (vw.Valor- VTCancelado) = 0 then 'C' else ' ' end as FormaCancelacion ,    Gntrans.Codtrans "
    'sql = sql & " case when vw.Saldo=0 then 'C' end as FormaCancelacion, Gntrans.Codtrans "
'    sql = sql & "datepart(m, vw.FechaEmision) as MesEmitido,    "
    'sql = sql & " case when vw.Saldo=0 then datepart(m, fechapago ) end as mespago  "
    
    sql = sql & "  into tmp111"
    sql = sql & "  FROM "
    sql = sql & " Gntrans INNER JOIN tmp3 vw  INNER JOIN "
    sql = sql & " PcProvCli left join Anexo_TipoDocumento a on PcProvCli.idTipodocumento = a.id left join pcprovincia pcp on PcProvCli.idprovincia = PcP.idprovincia "
    sql = sql & " left join pccanton pcc on PcProvCli.idcanton = pcc.idcanton "
    sql = sql & " left join pcparroquia pcparr on PcProvCli.idparroquia = pcparr.idparroquia "
    sql = sql & " left join fcvendedor fcva on PcProvCli.idvendedor = fcva.idvendedor "
    sql = sql & " ON PCProvCli.IdProvCli = vw.Idclienteref "
    sql = sql & " ON Gntrans.Codtrans = vw.Codtrans  "
    sql = sql & " Where  Saldo > 0  " & Condicion & "  AND  (Gntrans.AfectaSaldoPC=1)"
    
    VerificaExistenciaTabla 111
    gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        
    sql = " select * from tmp111 "
    sql = sql & " where fechaconcesion between "
    'AND (gc.Fechatrans<=" & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")AND (pck.Debe >0)"
    If DatePart("yyyy", f1) > 2013 Then
        
        'sql = sql & FechaYMD("01/" & DatePart("m", f1) & "/" & DatePart("yyyy", f1), gobjMain.EmpresaActual.TipoDB)
        sql = sql & FechaYMD("01/01/2001", gobjMain.EmpresaActual.TipoDB)
        sql = sql & " and"
        sql = sql & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB)
    Else
        sql = sql & FechaYMD("01/01/2001", gobjMain.EmpresaActual.TipoDB)
        sql = sql & " and"
        sql = sql & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB)
        '01/01/2014' and '31/01/2014'"
    End If
    sql = sql & " order by trans"
    End With
    
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsVentasDINARDAP = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Ventas DINARDAP " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 4
End Function


Public Function ListaIVInventario5Foto(CodInventario As String, _
                                  CodAlterno As String, _
                                  Descripcion As String, _
                                  CodBodega As String, _
                                  CodGrupo() As String, _
                                  Tipo As String, _
                                  BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset, i As Integer, W As Variant
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If
    sql = "SELECT CodInventario, CodAlterno1, '' as foto, rutafoto , iv.Descripcion, Descripcion2, CodUnidad, "
    If Len(Me.GNOpcion.OrdenBodegas) > 0 Then
        W = Split(Me.GNOpcion.OrdenBodegas, ",")
        For i = 0 To UBound(W)
            sql = sql & " vw" & i & ".Exist, "
        Next i
        'sql = sql mid
    Else
        sql = sql & " vw1.Exist , vw2.Exist, "
    End If
    sql = sql & " round(Precio1+(Precio1*Porcentajeiva),2), "
    sql = sql & " round(Precio2+(Precio2*Porcentajeiva),2), "
    sql = sql & " round(Precio3+(Precio3*Porcentajeiva),2), "
    sql = sql & " round(Precio4+(Precio4*Porcentajeiva),2), "
    sql = sql & " round(Precio5+(Precio5*Porcentajeiva),2),"
    sql = sql & " round(Precio6+(Precio6*Porcentajeiva),2) , BandIVA, "
    sql = sql & " CodGrupo1, CodGrupo2, CodGrupo3,"
    sql = sql & " CodGrupo4, CodGrupo5, iv.BandValida "
    sql = sql & " FROM IVInventario IV"
    sql = sql & " left JOIN IVUnidad IVU on Iv.idunidad = IVU.IDUnidad"
    sql = sql & " left join IVGRUPO1 IVG1 ON IV.IDGRUPO1=IVG1.IDGRUPO1"
    sql = sql & " left join IVGRUPO2 IVG2 ON IV.IDGRUPO2=IVG2.IDGRUPO2"
    sql = sql & " left join IVGRUPO3 IVG3 ON IV.IDGRUPO3=IVG3.IDGRUPO3"
    sql = sql & " left join IVGRUPO4 IVG4 ON IV.IDGRUPO4=IVG4.IDGRUPO4"
    sql = sql & " left join IVGRUPO5 IVG5 ON IV.IDGRUPO5=IVG5.IDGRUPO5"
    If Len(Me.GNOpcion.OrdenBodegas) > 0 Then
        For i = 0 To UBound(W)
            sql = sql & " LEFT JOIN vwExistencia" & Mid$(W(i), 2, Len(W(i)) - 2) & " vw" & i & " on iv.idinventario = vw" & i & ".idinventario"
        Next i
    Else
        sql = sql & " LEFT JOIN vwExistencia1 vw1 on iv.idinventario = vw1.idinventario"
        sql = sql & " LEFT JOIN vwExistencia2 vw2 on iv.idinventario = vw2.idinventario"
    End If
    

    If BandSoloValida Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(BandValida=" & CadenaBool(True, TipoDB) & ")"
    End If
    If Len(CodInventario) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodInventario LIKE '" & CodInventario & comodin & "') "
    End If
    If Len(CodAlterno) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "((CodAlterno1 LIKE '" & CodAlterno & comodin & "') " & _
                      "OR (CodAlterno2 LIKE '" & CodAlterno & comodin & "')) "
    End If
    If Len(Descripcion) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(iv.Descripcion LIKE '" & Descripcion & comodin & "') "
    End If
'    If Len(CodBodega) > 0 Then
'        If Len(cond) > 0 Then cond = cond & "AND "
'        cond = cond & "(CodBodega='" & CodBodega & "') "
'    End If
    
    If Len(Tipo) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(Tipo=" & Tipo & ") "
    End If
    
    
    For i = LBound(CodGrupo) To UBound(CodGrupo)
        If Len(CodGrupo(i)) > 0 Then
            If Len(cond) > 0 Then cond = cond & "AND "
'            cond = cond & "(CodGrupo" & i & " LIKE '" & CodGrupo(i) & comodin & "') "
            cond = cond & "(CodGrupo" & i & " = '" & CodGrupo(i) & "') "
        End If
    Next i
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " ORDER BY CodInventario "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVInventario5Foto = rs
    Else
        ListaIVInventario5Foto = MiGetRows(rs)
        rs.Close
   End If
    Set rs = Nothing
End Function


Public Function ListaIVBodegaNew(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
    sql = "SELECT IdBodega,CodBodega,Descripcion FROM IVBodega "
    If BandSoloValida Then
        sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY CodBodega"
    
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVBodegaNew = rs
    Else
        ListaIVBodegaNew = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaFichasEmp(Ced As String, BandRS As Boolean) As Variant
   Dim sql As String, rs As Recordset
    sql = "SELECT Codprovcli,idprovcli as historia,RUC,Nombre,Direccion1,Telefono1, bandactivo  FROM Empleado e inner join personal p on e.idprovcli=p.idempleado "
   If Len(Ced) > 0 Then
        sql = sql & " Where CODPROVCLI = '" & Ced & "'"
  End If
    sql = sql & " ORDER BY Nombre"
   Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaFichasEmp = rs
   Else
        ListaFichasEmp = MiGetRows(rs)
       rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaPCProvCliEmpParaFlex2Ex( _
                    BandProveedor As Boolean, _
                    BandCliente As Boolean, bandEmpleado As Boolean) As String
    Dim sql As String, s As String, rs As Recordset, cond As String
    VerificaExistenciaTabla 1
    If bandEmpleado And BandProveedor And BandCliente Then
        sql = "SELECT  Nombre + ' [' + CodProvCli + ']' as Nombre into  tmp1 FROM Empleado "
        sql = sql & "UNION ALL "
        sql = sql & "SELECT  Nombre + ' [' + CodProvCli + ']' as Nombre FROM PCProvCli "
    Else
        sql = "SELECT  Nombre + ' [' + CodProvCli + ']' FROM PCProvCli "
        If BandProveedor And Not BandCliente And Not bandEmpleado Then
            cond = "BandProveedor=" & CadenaBool(True, Me.TipoDB)
        ElseIf Not BandProveedor And BandCliente And Not bandEmpleado Then
            cond = "BandCliente=" & CadenaBool(True, Me.TipoDB)
        End If
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    If bandEmpleado And BandProveedor And BandCliente Then
        Me.EjecutarSQL sql, 1
        sql = "Select nombre from tmp1"
    End If
        sql = sql & " ORDER BY Nombre"      'Ordena por nombre
        Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 40 + 20 + 3)     '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    ListaPCProvCliEmpParaFlex2Ex = s
    rs.Close
    Set rs = Nothing
End Function

Public Function ListaArbolEnf(ByVal cadena As String) As Variant
    Dim sql As String, rs As Recordset
    Dim rs1 As Recordset
    Dim numG As Integer
    VerificaExistenciaTabla 4
    VerificaExistenciaTabla 5
    VerificaExistenciaTabla 6
    sql = "SELECT fe.idenfermedad,fe.codenfermedad,fe.descripcion , "
    sql = sql & "'0' as nivel, "
    sql = sql & "'0' as suma,"
    sql = sql & "'1' as tipo,"
    sql = sql & "'1' as Bandtotal INTO TMP4 "
    sql = sql & "FROM fichaEnfermedad fe  WHERE Len(fe.codenfermedad) = 3 "
    If Len(cadena) > 0 Then sql = sql & " And fe.descripcion like '%" & cadena & "%'"
    Me.EjecutarSQL sql, 1
    sql = "SELECT fe2.idenfermedad, left(fe2.codenfermedad,3) as codenfermedad, fe2.DESCRIPCION,"
    sql = sql & " '1' as nivel,fe2.idenfermedad as suma,"
    sql = sql & " '2' as tipo,'0' as Bandtotal INTO TMP5"
    sql = sql & " FROM  fichaenfermedad fe2      "
    sql = sql & " WHERE Len(fe2.codenfermedad) > 3 "
    If Len(cadena) > 0 Then sql = sql & " And fe2.descripcion like '%" & cadena & "%'"
    Me.EjecutarSQL sql, 1
    sql = "select t5.idenfermedad, T5.codenfermedad,T5.descripcion,T5.nivel,T4.idenfermedad as suma ,T5.tipo,t5.Bandtotal into tmp6 from tmp5  T5"
    sql = sql & " INNER JOIN  tmp4 T4 ON T4.codenfermedad = t5.codenfermedad"
    Me.EjecutarSQL sql, 1
    sql = " select T4.idenfermedad,T4.codenfermedad +'_' +T4.descripcion as descripcion,T4.nivel,T4.suma,T4.tipo,T4.Bandtotal from tmp4 as t4 "
    sql = sql & " Union"
    sql = sql & " select T6.idenfermedad,fe.codenfermedad+'_'+fe.descripcion as descripcion,T6.nivel,T6.suma,T6.tipo,T6.Bandtotal from tmp6 as t6 "
    sql = sql & " Inner join fichaenfermedad fe on fe.idenfermedad = t6.idenfermedad"
    sql = sql & " order by nivel"
    Set rs1 = Me.OpenRecordset(sql)
    ListaArbolEnf = MiGetRows(rs1)
    rs1.Close
    Set rs1 = Nothing
End Function

Public Function RecuperaEnfemedad(key As Variant) As Enfermedad
    Dim obj As Enfermedad
    Set obj = New Enfermedad
    Set obj.objEmpresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaEnfemedad = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function ListaEnferDetalle(ByVal Id As Long) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT  e.CodCuenta, e.NombreCuenta  "
    sql = sql & "FROM FichamedEnfdetalle f inner join fichaEnfermedad e on e.idcuenta = f.idenfermedad "
    sql = sql & " WHERE IdExmFisico = " & Id
    sql = sql & " ORDER BY Orden "
    Set rs = Me.OpenRecordset(sql)
    Set ListaEnferDetalle = rs
    Set rs = Nothing



End Function

Public Function ListaColas() As Variant
Dim sql As String
Dim rs As Recordset

    sql = "Select i.Idkp,iv.codProceso,i.Cantidad,i.Orden,i.Descripcion,i.FechaInicio,i.HoraInicio,i.FechaToma"
    sql = sql & ",i.HoraToma,i.FechaFin,i.HoraFin,i.FechaFinEspera,gne.codestado,i.IdCentroDet,gne1.codestado,UPPER(i.CodUsuario) as codusuario,i.idkpasignado,i.Secuencia"
    sql = sql & ",i.BandGarantia,i.BandUrgente,i.OrdenUrgente "
    sql = sql & " from ivkproceso i inner join gncomprobante g on g.transid = i.transid"
    sql = sql & " Inner join ivproceso iv on iv.idproceso = i.idproceso"
    sql = sql & " Left join gnestadoprod gne on gne.valor = i.estado"
    sql = sql & " Left join gnestadoprod gne1 on gne1.valor = i.estado1"
    sql = sql & " Where g.CodTrans = '" & gobjCond.CodTrans & "'"
    If gobjCond.NumTrans1 > 0 And gobjCond.NumTrans2 Then
        sql = sql & " And (g.numTrans  between " & gobjCond.NumTrans1 & " And " & gobjCond.NumTrans1 & ")"
    End If
    sql = sql & " And g.estado <> 3"
    sql = sql & " Order by i.secuencia,iv.codproceso,i.idkp "
    Set rs = Me.OpenRecordset(sql)
    
    Set ListaColas = rs
    Set rs = Nothing
End Function

'AUC
Public Function ConsEmpSaldo() As Variant
    Dim sql As String, cond As String, rs As Recordset, CodForma As String
        Select Case gobjCond.TipoSaldo
        Case 0
            sql = "spConsEmpSaldo "
        Case 1
            sql = "spConsEmpSaldoAnticipos "
            CodForma = Me.GNOpcion.ObtenerValor("FormaCobroAnticipo")
        Case 2
                sql = "spConsEmpSaldoXCobrar "
                CodForma = Me.GNOpcion.ObtenerValor("FormaCobroAnticipo")
        End Select
    gobjCond.CodPC1 = ""
    gobjCond.CodPC2 = ""
            sql = sql & _
            gobjCond.numMoneda & ", '" & _
            gobjCond.CodPC1 & "', '" & _
            gobjCond.CodPC2 & "', '" & _
            gobjCond.Codelemento & "', '" & _
            gobjCond.Codelemento & "', " & _
            CadenaBool(gobjCond.IncluirCero, TipoDB) & ", " & _
            FechaYMD(gobjCond.FechaCorte, TipoDB) & ", " & _
            gobjCond.NumPCGrupo & ", '" & _
            gobjCond.CodPCGrupo & "'," & _
            gobjCond.TipoSaldo
            If gobjCond.TipoSaldo = 2 Then
                  sql = sql & ",''"
            End If
    Set rs = Me.OpenRecordset(sql)
    UltimoRecordset rs
    Set ConsEmpSaldo = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Saldos Empleados " & gobjCond.FechaCorte, "EMP"
End Function


Public Function ConsCTKardexN() As Variant
    Dim sql As String, cond As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsCTLibroMayor")
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    qdef.Parameters("CodCuenta1") = IIf(Len(gobjCond.CodCuenta1) = 0, "0", gobjCond.CodCuenta1)
    qdef.Parameters("CodCuenta2") = IIf(Len(gobjCond.CodCuenta2) = 0, "99999999999999999999", gobjCond.CodCuenta2)
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    'jeaa 07/04/2005
    qdef.Parameters("CodTrans") = gobjCond.CodTrans
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient

    If Me.GNOpcion.ObtenerValor("PermitirDistribucionGastos") = "1" Then
        If Len(gobjCond.Sucursal) > 0 Then
            sql = "spConsCTLibroMayorxGasto "
        Else
            sql = "spConsCTLibroMayorN "
        End If
    Else
        sql = "spConsCTLibroMayorN "
    End If
    sql = sql & gobjCond.numMoneda & ",'" & _
                gobjCond.CodCuenta1 & "','" & _
                gobjCond.CodCuenta2 & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB) & ",'" & gobjCond.Sucursal & "','" & _
                gobjCond.CodTrans & "'" ' jeaa 17-01-04 para filtrado por sucursal y por trans

    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    Set ConsCTKardexN = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Libro Mayor " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "CT"
End Function

'AUC para ecuamueble urgencias
Public Function ListaIVKProcesosMantenimientoCambiaOrden() As Variant
   Dim sql As String, rs As Recordset
    Dim TransOP As String
    On Error GoTo CapturaError
        If Len(Me.GNOpcion.ObtenerValor("ProduccionTransOP")) > 0 Then
            TransOP = Me.GNOpcion.ObtenerValor("ProduccionTransOP")
        Else
            Err.Raise MSGERR_INVALIDO, "Empresa_TransOrdenProduccion", "No esta Configurado para tipo trans OP "
        End If
        sql = "select DISTINCT gn.transid, ivkp.idkp,gn.codusuario,gn.NumTrans,iv.codinventario,pc.nombre,  "
        sql = sql & " gc.fechainicio,iv.descripcion+ivk.nota as descripcion,ivp.codproceso,ivkp.cantidad,ivkp.orden "
        'sql = sql & " ,case when ivkp.estado1= 0 then  gne.color else gne1.color end as color"
        sql = sql & " ,case when ivkp.estado1= 0 then  gne.color else gne1.color end as color,'' as ordenActual,'' as NuevoOrden"
        sql = sql & " from gncomprobante gn  "
        sql = sql & " inner join ivkardex ivk inner join ivinventario iv  on iv.idinventario = ivk.idinventario"
        sql = sql & " on ivk.transid = gn.transid inner join pcprovcli pc on pc.idprovcli= gn.idclienteref "
        sql = sql & " inner join gncentrocosto gc on gc.idcentro = gn.idcentro "
        sql = sql & " inner join ivkproceso ivkp inner join ivproceso ivp on ivp.idproceso = ivkp.idproceso "
        sql = sql & " left join ivkproceso ivkpO ON ivkpO.idkp = ivkp.idkpasignado"
        sql = sql & " Left join gnestadoprod gne on gne.valor= ivkp.estado"
        sql = sql & " Left join gnestadoprod gne1 on gne1.valor= ivkp.estado1"
        sql = sql & " on ivkp.transid = gn.transid"
        sql = sql & " Where ivkp.idcentrodet = 0"
        'sql = sql & " And ivp.secuencia = 1 And ivkp.BandGarantia=0 and ivkp.bandUrgente = 0"
        sql = sql & " And ivkp.secuencia = 1 And ivkp.BandGarantia=0 and ivkp.bandUrgente = 0"
        sql = sql & " And GN.codtrans = '" & TransOP & "'"
        sql = sql & " And ivkp.estado1 NOT in (select valor from gnestadoprod where menu = 'Listo')"
        sql = sql & " And ivkp.FechaInicio <= '" & Date & "'"
        sql = sql & " And gn.estado <> 3 And iv.tipo = 6 "
        sql = sql & " Order by ivkp.orden asc"
        Set rs = Me.OpenRecordset(sql)
        Set ListaIVKProcesosMantenimientoCambiaOrden = rs
       Set rs = Nothing
        Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function


Public Function IVKProcesoCantidad(ByVal transid) As Currency
   Dim sql As String, rs As Recordset
    On Error GoTo CapturaError
        sql = "select Top 1 cantidad from ivkproceso where transid =  " & transid
        sql = sql & " And secuencia = 1  "
        Set rs = Me.OpenRecordset(sql)
        Do While Not rs.EOF
            IVKProcesoCantidad = rs!Cantidad
            rs.MoveNext
        Loop
        Set rs = Nothing
        Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function


Public Sub CambiaEstadoGNCompxTerminaPedido(transid As Long, value As Byte)
    Dim sql As String, pt As PermisoTrans, CodT As String, gc As GNComprobante
    Dim est As Byte, rs As Recordset, idCentro As Long, EstadoOriginal As Byte, pos As Integer
    Dim idAsiento As Long, gcaux As GNComprobante, IdTransFuente As Long, i As Long
    If transid = 0 Then Exit Sub        '*** MAKOTO 15/dic/00
    
    'Obtiene CodTrans de la transacción
    sql = "SELECT CodTrans, Estado, IdCentro, idtransfuente  FROM GNComprobante WHERE TransID=" & transid
    Set rs = Me.OpenRecordset(sql)
    If rs.EOF Then
        Err.Raise ERR_NOHAYCODIGO, "Empresa.CambiaEstadoGNComp", "No se enencuentra la transacción."
    End If
    CodT = rs!CodTrans
    est = rs!Estado                 'Estado actual de la trans.
    idCentro = rs!idCentro
    IdTransFuente = rs!IdTransFuente
    rs.Close
    
    'Si no está cambiando no hace nada
    If est = value Then Exit Sub
            
        Select Case value
        Case ESTADO_DESPACHADO
'            If Not pt.Despachar Then Err.Raise ERR_NODERECHO, "Empresa.CambiaEstadoGNComp", MSGERR_NODERECHO
            If est = ESTADO_ANULADO Then
                    Err.Raise ERR_NODERECHO, "Empresa_CambiaEstadoGNComp", _
                        "No se puede despachar porque el comprobante está anulado." & vbCr & _
                        "Primero recupérelo y luego intente de nuevo."
            ElseIf est = ESTADO_NOAPROBADO Then
                Err.Raise ERR_INVALIDO, "Empresa.CambiaEstadoGNComp", _
                        "No se puede aprobar mientras el asiento está descuadrado." & vbCr & _
                        "Primero debería modificarlo para que esté cuadrado el asiento."
            End If
            Set gc = RecuperaGNComprobante(transid)
        End Select
    
    



#If DAOLIB Then
    gobjWS.BeginTrans           '================= Comienza la transacción
#Else
    mcnEmpresa.BeginTrans       '================= Comienza la transacción
#End If
    On Error GoTo ErrTrap

    

    'Si no hay problema en permisos, cambia el estado
    sql = "UPDATE GNComprobante SET Estado=" & value & _
          " WHERE TransID=" & transid
    Me.Execute sql, True
    
    'Si no hay problema en permisos, cambia la fecha de grabado
    sql = "UPDATE GNComprobante SET FechaGrabado='" & Now & _
      "' WHERE TransID=" & transid
    Me.Execute sql, True
    
    
    'Graba en GNLogAccion para utilizarlo como historial
    If value = ESTADO_DESPACHADO Then            '*** ANGEL 23/mar/02
        Me.GrabaGNLogAccion "MOD_TRANS", "Transacción Despachada x Termina Pedido " & _
                                                         gc.CodTrans & gc.NumTrans, "GN"
    End If
    
#If DAOLIB Then
    gobjWS.CommitTrans          '============ Completa la transacción
#Else
    mcnEmpresa.CommitTrans      '============ Completa la transacción
#End If
    Set gc = Nothing

    Exit Sub

ErrTrap:
#If DAOLIB Then
    gobjWS.Rollback             '============ Anula la transacción
#Else
    mcnEmpresa.RollbackTrans    '============ Anula la transacción
#End If
    
    Err.Raise Err.Number, Err.Source, Err.Description
    Exit Sub
End Sub


Public Function RecuperaListaEnfermedad(key As Variant) As PCListaEnfermedad 'CTCuenta
'    Dim obj As CTCuenta
'    Set obj = New CTCuenta
    Dim obj As PCListaEnfermedad
    Set obj = New PCListaEnfermedad
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaListaEnfermedad = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function ListaEnfermedad(IncluyeTotal As Boolean, TipoCuenta As Integer, bandResumido As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, cond As String
    Dim rs As Recordset
    If bandResumido Then
        sql = "SELECT CodCuenta, NombreCuenta FROM dbo.FichaEnfermedad "
    Else
        sql = "SELECT CodCuenta, NombreCuenta, Nivel, CodCuentaSuma, TipoCuenta, BandTotal FROM vwFichaEnfermedad "
    End If
    If TipoCuenta <> 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "TipoCuenta=" & TipoCuenta & " "
    End If
    If Not IncluyeTotal Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "BandTotal=" & CadenaBool(False, TipoDB)
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " ORDER BY CodCuenta"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaEnfermedad = rs
    Else
        ListaEnfermedad = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function CreaListaEnfermedad() As PCListaEnfermedad
    Dim obj As PCListaEnfermedad
   Set obj = New PCListaEnfermedad
    Set obj.Empresa = Me
    Set CreaListaEnfermedad = obj
    Set obj = Nothing
End Function

Public Function ListaNombreEnfermedadParaFlexGrid(TipoCuenta As Integer) As String
    Dim sql As String, cad As String, rs As Recordset
    'sql = "SELECT Nombre,codigo FROM vwCTCuentaNombreParaCombo WHERE bandvalida=1 "
    sql = "SELECT nombre + ' [' + Codigo + ']' FROM vwEnfermedadParaCombo WHERE bandvalida=1"
    If TipoCuenta > 0 Then sql = sql & " and TipoCuenta=" & TipoCuenta
    'jeaa 01/12/2005
    sql = sql & " ORDER BY nombre"
    Set rs = Me.OpenRecordset(sql)
    'Pero por ahora uso lo siguiente para controlar cuentas de total y de movimiento
#If DAOLIB Then
    cad = "|" & GetStringDAO(rs, 21 + (20 + 80 + 2))        'Código+'*'=21, Space+NombreCuenta+'[]'=20+80+2
#Else
    If Not rs.EOF Then cad = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    rs.Close
    Set rs = Nothing
    ListaNombreEnfermedadParaFlexGrid = cad
End Function

'Devuelve una cadena para asignar a ListCombo de vsFlexGrid
Public Function ListaEnfermedadParaFlexGrid(TipoCuenta As Integer) As String
    Dim sql As String, cad As String, rs As Recordset
    sql = "SELECT Codigo, Nombre FROM vwPCEnfermedadParaCombo WHERE bandvalida=1 "
    If TipoCuenta > 0 Then sql = sql & " and TipoCuenta=" & TipoCuenta
    'jeaa 01/12/2005
'    sql = "SELECT Codigo, Nombre FROM vwCTCuentaParaCombo"
'    If TipoCuenta > 0 Then sql = sql & " WHERE TipoCuenta=" & TipoCuenta
    sql = sql & " ORDER BY Codigo"
    Set rs = Me.OpenRecordset(sql)
    'Pero por ahora uso lo siguiente para controlar cuentas de total y de movimiento
#If DAOLIB Then
    cad = "|" & GetStringDAO(rs, 21 + (20 + 80 + 2))        'Código+'*'=21, Space+NombreCuenta+'[]'=20+80+2
#Else
    If Not rs.EOF Then cad = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    rs.Close
    Set rs = Nothing
    ListaEnfermedadParaFlexGrid = cad
End Function

Public Function RecuperaEnfemedad01(key As Variant) As Enfermedad
    Dim obj As Enfermedad
    Set obj = New Enfermedad
    Set obj.objEmpresa = Me
    On Error Resume Next
    obj.Recuperar01 key
    If Err.Number = 0 Then Set RecuperaEnfemedad01 = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function


Public Function ConsDevolucionReservados() As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    Dim numReg As Long
    
    sql = " select gres.transid, gres.fechatrans, gres.codtrans+ '-'  +convert(VARCHAR,gres.numtrans)as trans, gres.nombre, ivkres.idbodega,"
    sql = sql & " IViRES.idinventario, ivires.codinventario, ivires.descripcion,"
    sql = sql & " isnull(ivkres.cantidad,0) AS RESERVADO"
    sql = sql & " into tmp1"
'    sql = sql & " isnull(ivfac.cantidad,0) AS DEVOL,"
 '   sql = sql & " (isnull(ivkres.cantidad,0) + isnull(ivfac.cantidad,0)) AS SALDO, DATEDIFF(d,gres.fechatrans,getdate()) as diasdif, 0 AS Auto"
    sql = sql & " from gncomprobante gres"
    sql = sql & " inner join ivkardex ivkres"
    sql = sql & " inner join ivinventario ivires"
    sql = sql & " on ivkres.idinventario=ivires.idinventario"
    sql = sql & " on gres.transid=ivkres.transid"
  '  sql = sql & " left join gncomprobante gfac"
   ' sql = sql & " inner join ivkardex ivfac"
    'sql = sql & " inner join ivinventario ivifac"
    'sql = sql & " on ivfac.idinventario=ivifac.idinventario"
    'sql = sql & " on gfac.transid=ivfac.transid"
    sql = sql & " where gres.codtrans  "
    sql = sql & " IN ('" & (gobjCond.CodTrans) & "')"
    sql = sql & " and gres.estado <>3 "
    sql = sql & " and ivkres.cantidad>0"
    sql = sql & " AND  (gres.FechaTrans between " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB) & ")"
    sql = sql & " order by gres.transid"
    
    VerificaExistenciaTabla 1
    Me.EjecutarSQL sql, numReg
    
    sql = " select gres.idtransfuente, gres.fechatrans, gres.codtrans+ '-'  +convert(VARCHAR,gres.numtrans)as trans, gres.nombre, ivkres.idbodega,"
    sql = sql & " IViRES.idinventario, ivires.codinventario, ivires.descripcion,"
    sql = sql & " isnull(ivkres.cantidad,0)*-1 AS DEVOL"
    sql = sql & " into tmp2"
    sql = sql & " from gncomprobante gres"
    sql = sql & " inner join ivkardex ivkres"
    sql = sql & " inner join ivinventario ivires"
    sql = sql & " on ivkres.idinventario=ivires.idinventario"
    sql = sql & " on gres.transid=ivkres.transid"
    sql = sql & " where gres.codtrans  "
    sql = sql & " NOT IN ('" & (gobjCond.CodTrans) & "')"
    sql = sql & " and gres.estado <>3 "
    sql = sql & " and ivkres.cantidad<0"
    sql = sql & " AND  (gres.FechaTrans >= " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & ")"
    sql = sql & " order by gres.idtransfuente"
    
    VerificaExistenciaTabla 2
    Me.EjecutarSQL sql, numReg

    sql = " select t1.transid, t1.fechatrans, t1.trans, t1.nombre, t1.idbodega,"
    sql = sql & " t1.idinventario, t1.codinventario, t1.descripcion,"
    sql = sql & " isnull(RESERVADO,0) as RESERVADO,"
    sql = sql & " isnull(devol,0) as devol, "
    sql = sql & " (isnull(RESERVADO,0) - isnull(devol,0)) as saldo, datediff(d, t1.fechatrans, getdate()) "
    sql = sql & " from tmp1 as t1"
    sql = sql & " left join tmp2 t2 on t1.transid=t2.idtransfuente and t1.codinventario=t2.codinventario"
    sql = sql & " Where IsNull(RESERVADO, 0) <> IsNull(devol, 0)"
    sql = sql & " order by t1.transid"
    
    Set rs = Me.OpenRecordset(sql)
    Set ConsDevolucionReservados = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Devolucion Reservados " & gobjCond.fecha1 + gobjCond.Hora1 & "-" & gobjCond.fecha2 + gobjCond.Hora2, "GN"
End Function


Public Function ConsPCPorCobrarPagar_NumDiasVencidosNew( _
                    ByVal PorCobrar As Boolean, _
                    ByVal IdProvcli As Long, _
                    ByVal FechaVenci As Date, _
                    ByVal CodForma As String, _
                    ByVal CodMoneda As String, _
                    ByVal NumdiasVencidos As Integer) As Variant
    'Consulta para limite de credito por numero de dias vencidos
    Dim aux_codpc As String, aux_f1 As Date, aux_f2 As Date
    Dim aux_PorCobrar As Boolean, aux_Cliente As Boolean, aux_Proveedor As Boolean
    Dim aux_CodForma As String, aux_CodMoneda As String, aux_codgrupo As String
    Dim aux_incluircero As Boolean, sql  As String, rs As Recordset
    Dim aux_idpc As Long
    Dim numMoneda As Integer
    
    'Si no está especificada la moneda, coge la Moneda predeterminada
    If Len(gobjMain.objCondicion.CodMoneda) = 0 Then gobjMain.objCondicion.CodMoneda = MONEDA_PRE
    numMoneda = Me.GNOpcion.IndiceMoneda(gobjMain.objCondicion.CodMoneda)
    
    With gobjMain.objCondicion
        'Conservar valores actuales para que no afecte a otras consultas
        If Len(.CodPC1) = 0 Then
        Else
        End If
        'aux_codpc = .CodPC1
        aux_idpc = .NumTrans1
        aux_f1 = .fecha1
        aux_f2 = .fecha2
        aux_PorCobrar = .PorCobrar
        aux_Cliente = .Cliente
        aux_Proveedor = .Proveedor
        aux_CodForma = .CodForma
        aux_CodMoneda = .CodMoneda
        aux_codgrupo = .CodGrupo
        aux_incluircero = .IncluirCero
            
        .PorCobrar = PorCobrar
        .Cliente = True
        .Proveedor = True
        '.CodPC1 = CodProvCli
        .NumTrans1 = IdProvcli
        .fecha1 = Me.GNOpcion.FechaInicio
        .fecha2 = FechaVenci
        .CodForma = CodForma
        .CodMoneda = CodMoneda
        .IncluirCero = False
        
        sql = "spConsPCPorCobrarpagar_NumDiasVencidosNew " & numMoneda & ", " & _
                    .CodMoneda & "," & _
                    CadenaBool(.PorCobrar, TipoDB) & "," & _
                    CadenaBool(False, TipoDB) & "," & _
                    CadenaBool(.Cliente, TipoDB) & "," & _
                    CadenaBool(.Proveedor, TipoDB) & "," & _
                    FechaYMD(.fecha2, TipoDB) & "," & _
                    .NumTrans1 & "," & _
                    .NumTrans1 & ",'" & _
                    .CodForma & "','" & _
                    .CodForma & "'," & _
                     IIf(Me.GNOpcion.Los100DocCobroPago, 1, 0) & ", " & NumdiasVencidos

        Set rs = Me.OpenRecordset(sql)
        Set ConsPCPorCobrarPagar_NumDiasVencidosNew = rs
        Set rs = Nothing
        'Set objCond = Nothing
        
        'Recuperar valores reservados
        .NumTrans1 = aux_idpc
        '.CodPC1 = aux_codpc
        .fecha1 = aux_f1
        .fecha2 = aux_f2
        .PorCobrar = aux_PorCobrar
        .Cliente = aux_Cliente
        .Proveedor = aux_Proveedor
        .CodForma = aux_CodForma
        .CodMoneda = aux_CodMoneda
        .IncluirCero = aux_incluircero
    End With
End Function


Public Function RecuperaIVInventarioQuickId(key As Variant) As IVInventario
    Dim obj As IVInventario
    Set obj = New IVInventario
    Set obj.Empresa = Me
    On Error Resume Next
    obj.RecuperarQuickId key
    If Err.Number = 0 Then Set RecuperaIVInventarioQuickId = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function ConsIVCambioAcopiadorISO(ByVal NumDocRef As Long) As Recordset
    Dim sql As String, cond As String, s As String, rs As Recordset, i As Integer, rsItem As Recordset
    Dim numReg As Long, CantItem As Integer
    'Condición de CodTrans
    If Len(NumDocRef) > 0 Then
          cond = cond & "(gning.numdocref ='" & NumDocRef & "')"
    End If
    If Len(gobjCond.CodTrans) > 0 Then
        cond = cond & " and gning.codtrans='" & gobjCond.CodTrans & "' "
    End If
        sql = "select"
        sql = sql & " gning.numdocref ,"
        sql = sql & " ivk.orden, iviso.id as tiket,"
        sql = sql & " ivmar.codinventario as marca,  ivtam.codinventario as tamanio,"
        sql = sql & " iviso.NumSerie, DisenioOri,ivtra.codinventario as trabajo,"
        sql = sql & " (gning.CodTrans+' '+CONVERT(VARCHAR,gning.NumTrans)) AS TransIng, gning.fechatrans,"
        sql = sql & " pc.codprovcli, pc.NombreAlterno, fc.codvendedor, pcg.NombreAlterno, gnob.codobra as Acopia, gning.transid , '' as resp "
       sql = sql & " from IVInventarioDetalleISO iviso"
        sql = sql & " inner join ivkardex ivk"
        sql = sql & " inner join ivinventario ivtam on ivk.Idinventario=ivtam.idinventario"
        sql = sql & " on iviso.idkardex=ivk.id"
        sql = sql & " left join ivinventario ivmar on iviso.IdMarca=ivmar.idinventario"
        sql = sql & " left join ivinventario ivtra on iviso.IdTrabajo=ivtra.idinventario"
       sql = sql & " left join gncomprobante gning"
        sql = sql & " inner join pcprovcli pc on gning.idclienteref= pc.idprovcli"
        sql = sql & " inner join fcVendedor fc on gning.idvendedor= fc.idvendedor"
        sql = sql & " left join pcprovcli pcg on gning.idgaranteref= pcg.idprovcli"
        sql = sql & " on iviso.transid = gning.transid"
        sql = sql & " left join gnobra gnob on gnob.idobra=iviso.idobra"
        sql = sql & " WHERE gning.estado <>3 and " & cond
        sql = sql & "  ORDER BY iviso.id"
   Set rs = Me.OpenRecordset(sql)
    Set ConsIVCambioAcopiadorISO = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Cambio Acopiador ISO x Lote " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function

Public Function ListaIVNumSerie(ByVal CodInventario As String) As String

End Function

Public Function ListaIVNumSerieNew(ByVal CodInventario As String, ByVal CodBodega As String) As String
   Dim sql As String, s As String
    Dim rs As Recordset
    sql = "SELECT Campo1,ive.exist "
    sql = sql & " FROM IVSerie ivs Inner Join ivinventario iv "
    sql = sql & " on iv.idinventario = ivs.idinventario "
    sql = sql & " inner join ivserieexist ive inner join ivbodega ivb"
    sql = sql & " on ivb.idbodega = ive.idbodega  on ive.idserie = ivs.idserie"
    sql = sql & " Where ive.exist > 0 And iv.codInventario = '" & CodInventario & "'"
    sql = sql & " And ivb.codbodega= '" & CodBodega & "'"
    sql = sql & " group by campo1,ive.exist"
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 10 + 40)         '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|", "(nulo)")
#End If
    ListaIVNumSerieNew = s
    rs.Close
    Set rs = Nothing
End Function


Public Function ObtieneIDSerie(ByVal NumSerie As String) As Long
Dim sql As String
Dim rs As Recordset
sql = "Select idserie from ivserie where campo1 = '" & NumSerie & "'"
Set rs = Me.OpenRecordset(sql)
If rs.RecordCount > 0 Then
    ObtieneIDSerie = rs!IdSerie
Else
    ObtieneIDSerie = 0
End If
    rs.Close
    Set rs = Nothing
End Function

Public Function ObtieneCampoIvSerie(ByVal IdSerie As Long, campo As String) As String
    Dim sql As String, s As String
    Dim rs As Recordset
    sql = " select " & campo & " as campo from ivSerie where idSerie=" & IdSerie
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        ObtieneCampoIvSerie = rs.Fields("campo")
    Else
        ObtieneCampoIvSerie = 0
    End If
    rs.Close
    Set rs = Nothing
End Function


Public Function ConsTSPorCobrarCapInteres( _
                    ByVal PorCobrar As Boolean, _
                    ByVal CodProvcli As String, _
                    ByVal FechaVenci As Date, _
                    ByVal CodForma As String, _
                    ByVal CodMoneda As String, _
                    ByVal CodGrupo1 As String, _
                    ByVal CodVendedor As String, _
                    ByVal TasaMensual As Currency, _
                    ByVal diasGracia As Integer, _
                    ByVal CodSucursal As String) As Variant
End Function
Public Function ConsTSPorCobrarCapitalInteres() As Variant
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim objCond As Condicion
    Set objCond = gobjMain.objCondicion
    'Si no está especificada la moneda, coge la Moneda predeterminada
    If Len(objCond.CodMoneda) = 0 Then objCond.CodMoneda = MONEDA_PRE
    numMoneda = Me.GNOpcion.IndiceMoneda(objCond.CodMoneda)
    sql = "spConsTSPorCobrarCapitalInteres " & numMoneda & ", " & _
                objCond.CodMoneda & "," & _
                CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                objCond.CodPC1 & "','" & _
                objCond.CodPC1 & "','" & _
                Me.GNOpcion.ObtenerValor("FornmaCobroOtrasCuotas") & "','" & _
                Me.GNOpcion.ObtenerValor("FormaCobroCuotaInt") & "','" & _
                objCond.CodGrupo & "','" & _
                objCond.Usuario1 & "'," & _
                objCond.TasaMensual & "," & _
                objCond.NumDias1 & "," & _
                objCond.NumDias2 & ",'" & _
                objCond.Sucursal & "','" & _
                objCond.Sucursal & "'"
     If Me.GNOpcion.ObtenerValor("AplicaCalculoMensual") = "1" Then 'AUC ESTO NO DEBERIA IR AQUI BORRA DESPUES
        sql = sql & " ,0, "
    Else
        sql = sql & " ,1, "
    End If
    sql = sql & objCond.Precio & ","
    sql = sql & objCond.PrecioV
  Set rs = Me.OpenRecordset(sql)
    Set ConsTSPorCobrarCapitalInteres = rs
    Set rs = Nothing
    Set objCond = Nothing
End Function

Public Function CreaIVSerie() As IVNumSerie
    Dim obj As IVNumSerie
    Set obj = New IVNumSerie
    Set obj.Empresa = Me
    Set CreaIVSerie = obj
    Set obj = Nothing
End Function

Public Function RecuperaIVSerie(key As Variant) As IVNumSerie
    Dim obj As IVNumSerie
    Set obj = New IVNumSerie
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaIVSerie = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function RsIVSerieDisp(ByVal codItem As String, ByVal CodBodega As String) As Recordset
    Dim sql As String
    Dim rs As Recordset
    sql = "Select ivk.*,ivs.* from IVSerieExist ivk inner join ivserie ivs inner join ivinventario iv on iv.idinventario = ivs.idinventario "
    sql = sql & " ON ivs.idserie = ivk.idserie "
    sql = sql & " INNER JOIN IVBodega ivb on ivb.idbodega = ivk.idbodega "
    sql = sql & " Where iv.codInventario = '" & codItem & "'"
    sql = sql & " And ivb.codbodega= '" & CodBodega & "'"
    sql = sql & " And ivk.Exist>0"
    Set rs = Me.OpenRecordset(sql)
    Set RsIVSerieDisp = rs
End Function

Public Function ConsIVKardexSerie() As Variant
    Dim sql As String, cond As String, rs As Recordset
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    sql = "spConsIVSerieKardex " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodBodega1 & "','" & _
                gobjCond.CodItem1 & "','" & _
                gobjCond.CodItem2 & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB)
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsIVKardexSerie = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Kardex inv. Series " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "IV"
End Function

Public Function ConsTSPorCobrarPagarSucursal( _
                    ByVal PorCobrar As Boolean, _
                    ByVal FechaVenci As Date, _
                    ByVal CodForma As String, _
                    ByVal CodMoneda As String, _
                    ByVal codUsuario As String) As Variant
    Dim aux_codpc As String, aux_f1 As Date, aux_f2 As Date
    Dim aux_PorCobrar As Boolean, aux_Cliente As Boolean, aux_Proveedor As Boolean
    Dim aux_CodForma As String, aux_CodMoneda As String, aux_codgrupo As String
    Dim aux_incluircero As Boolean, aux_codUsuario As String
   With gobjMain.objCondicion
        'Conservar valores actuales para que no afecte a otras consultas
        aux_f1 = .fecha1
        aux_f2 = .fecha2
        aux_PorCobrar = .PorCobrar
        aux_CodForma = .CodForma
        aux_CodMoneda = .CodMoneda
        aux_codgrupo = .CodGrupo
        aux_codUsuario = .Usuario1

        .PorCobrar = PorCobrar
        .fecha1 = Me.GNOpcion.FechaInicio
        .fecha2 = FechaVenci
        .CodForma = CodForma
        .CodMoneda = CodMoneda
        .Usuario1 = codUsuario

        Set ConsTSPorCobrarPagarSucursal = ConsTSPorCobrarPagarSucursales()
        
        'Recuperar valores reservados
        .fecha1 = aux_f1
        .fecha2 = aux_f2
        .PorCobrar = aux_PorCobrar
        .CodForma = aux_CodForma
        .CodMoneda = aux_CodMoneda
        .Usuario1 = aux_codUsuario
   End With
End Function


Public Function ConsTSPorCobrarPagarSucursales() As Variant
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim objCond As Condicion
    
    Set objCond = gobjMain.objCondicion
    
    'Si no está especificada la moneda, coge la Moneda predeterminada
    If Len(objCond.CodMoneda) = 0 Then objCond.CodMoneda = MONEDA_PRE
    numMoneda = Me.GNOpcion.IndiceMoneda(objCond.CodMoneda)
    


        sql = " SELECT   Id,"
        sql = sql & " CodProvCli,"
        sql = sql & " Nombre,"
        sql = sql & " TransID,"
        sql = sql & " CodTrans,"
        sql = sql & " Trans,"
        sql = sql & " CodForma,"
        sql = sql & " NumLetra,"
        sql = sql & " Doc,"
        sql = sql & " Valor" & numMoneda & " AS Valor,"
        sql = sql & " VCancelado" & numMoneda & " AS VCancelado,"
        sql = sql & " Valor" & numMoneda & " - VCancelado" & numMoneda & " AS Saldo,"
        sql = sql & " CodMoneda,"
        sql = sql & " Valor" & numMoneda & " - VCancelado" & numMoneda & " AS CANCELA,"
        If numMoneda = 1 Then
            sql = sql & "  1 AS Cotizacion,"
        Else
            sql = sql & "  Cotizacion" & numMoneda & " AS Cotizacion,"
        End If
        sql = sql & " FechaEmision,"
        sql = sql & " Plazo,"
        sql = sql & " FechaVenci,"
        sql = sql & " codvendedor,"
        sql = sql & " NomVendedor"
        sql = sql & " From vwConsPCPorCobrarPagar"
        sql = sql & " WHERE  (FechaEmision between  " & FechaYMD(objCond.fecha2, Me.TipoDB) & " and " & FechaYMD(objCond.fecha2, Me.TipoDB) & " ) AND"
        sql = sql & " (Codsucursal='" & objCond.Usuario1 & "') AND"
        sql = sql & " (CodMoneda='" & objCond.CodMoneda & "') AND"
        sql = sql & " (CodForma in (" & objCond.CodForma & ")) AND"
        
        sql = sql & " (PorCobrar = " & CadenaBool(objCond.PorCobrar, TipoDB) & ") AND"
        sql = sql & " (Valor" & numMoneda & " - VCancelado" & numMoneda & ") >0 "
        sql = sql & " AND   ( (BandProveedor = 0) OR (BandCliente = 1) )"
        sql = sql & " ORDER BY CodProvCli, FechaVenci"
        



    Set rs = Me.OpenRecordset(sql)
    Set ConsTSPorCobrarPagarSucursales = rs
    Set rs = Nothing
    Set objCond = Nothing
End Function


Public Function CalculaValorDetalleChequePosfechado(ByVal transid As Long) As Currency
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    
    sql = "  select ISNULL(Sum(Cantidad * Valor),0) AS Valor "
    sql = sql & "from TSDetalleChequePosf"
    sql = sql & " Where Transid = " & transid
    
    Set rs = Me.OpenRecordset(sql)
    
    If rs.RecordCount > 0 Then
        CalculaValorDetalleChequePosfechado = rs.Fields("Valor")
    Else
        CalculaValorDetalleChequePosfechado = 0
    End If
    Set rs = Nothing
End Function

Public Function ListaIVItemParaFlexCiudad(CodBodega As String, _
                                    CodGrupo1 As String, _
                                    CodGrupo2 As String, _
                                    CodGrupo3 As String, _
                                    CodGrupo4 As String, _
                                    CodGrupo5 As String, _
                                    Optional Clave As String) As String
    Dim sql As String, cond As String, s As String
    Dim rs As Recordset
    
    sql = "SELECT CodInventario,Descripcion FROM vwIVInventarioRecuperar"
    
'*** CodBodega No tiene efecto
'    If Len(CodBodega) > 0 Then
'        If Len(cond) > 0 Then cond = cond & "AND "
'        cond = cond & "CodBodega ='" & CodBodega & "' "
'    End If
    
    If CodGrupo1 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo1='" & CodGrupo1 & "' "
    End If
    If CodGrupo2 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo2='" & CodGrupo2 & "' "
    End If
    If CodGrupo3 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo3='" & CodGrupo3 & "' "
    End If
    If CodGrupo4 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo4='" & CodGrupo4 & "' "
    End If
    If CodGrupo5 <> "!#" Then           '** '!#' significa que no hay condición
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "CodGrupo5='" & CodGrupo5 & "' "
    End If
    'jeaa 01/12/2005
'    sql = sql & " WHERE  BandValida= 1  "
'    If Len(cond) > 0 Then sql = sql & " and " & cond
'    sql = sql & " ORDER BY CodInventario"
'    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
'    sql = sql & " ORDER BY CodInventario"
        sql = sql & " WHERE  BandValida= 1  and BandVenta= 1  "
    If Len(cond) > 0 Then sql = sql & " and " & cond
    
    If Len(Clave) > 0 Then sql = sql & " and descripcion like '%" & Clave & "%'"
    
    sql = sql & " ORDER BY CodInventario"

    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 20 + 80)     'Código=20, Descripcion=80      '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    
    ListaIVItemParaFlexCiudad = s
    rs.Close
    Set rs = Nothing
End Function

Public Sub CorregirExistenciaSerie()
    Dim rs As Recordset, sql As String, rs2 As Recordset
    
    Set rs = Me.ConsIVCorrecExistSerie
    If rs.EOF Then Exit Sub
    Set rs2 = New ADODB.Recordset
    rs2.CursorLocation = adUseClient

    With rs
        Do Until .EOF
            'Verifica si existe el registro
            sql = "SELECT Exist FROM IVSerieExist " & _
                  " WHERE IdSerie=" & !IdSerie & _
                  " AND IdBodega=" & !IdBodega
                  
            rs2.Open sql, mcnEmpresa, adOpenStatic, adLockReadOnly
            
            'Si no existe, lo inserta
            If rs2.EOF Then
                sql = "INSERT INTO IVSerieExist (IdSerie,IdBodega,Exist) " & _
                      "VALUES (" & !IdSerie & "," & !IdBodega & "," & !SumaDeCantidad & ")"
            
            'Si existe, lo modifica
            Else
                sql = "UPDATE IVSerieExist SET Exist=" & !SumaDeCantidad & _
                      " WHERE IdSerie=" & !IdSerie & _
                      " AND IdBodega=" & !IdBodega
            End If
            Me.Execute sql, True
            rs2.Close
            .MoveNext
        Loop
        .Close
    End With
    Set rs2 = Nothing
    Set rs = Nothing
End Sub

Public Function ConsIVCorrecExistSerie() As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    Dim ex1 As String, ex2 As String, ex3 As String, ex4 As String
    Dim ex5 As String, ex6 As String
    ex1 = "isnull(ive.Exist,0)"
    ex2 = "isnull(ivs.IdSerie, ivs2.IdSerie)"
    ex3 = "isnull(ivs.campo1, ivs2.campo1)"
    ex4 = "isnull(vw.SumaDeCantidad,0)"
    ex5 = "isnull(ivb.IdBodega, ivb2.IdBodega)"
    ex6 = "isnull(ivb.CodBodega, ivb2.CodBodega)"

    'Muestra la diferencia de existencia y suma de IVKardex si es que la hay
    sql = "SELECT " & ex2 & " AS IdSerie, " & ex3 & " AS Serie, " & _
                 ex5 & " AS IdBodega, " & ex6 & " AS CodBodega, " & ex1 & " AS Exist1, " & _
                 ex4 & " AS SumaDeCantidad, (" & ex1 & " - " & ex4 & ") AS Dif " & _
          "FROM IVSerie ivs2 RIGHT JOIN " & _
                    "(IVSerie ivs RIGHT JOIN " & _
                        "(IVBodega ivb2 RIGHT JOIN " & _
                            "(IVBodega ivb RIGHT JOIN "
                    sql = sql & "(vwConsIVKardexSerieSuma vw FULL JOIN IVSerieExist ive "
                    sql = sql & "ON (vw.IdBodega = ive.IdBodega) AND (vw.IdSerie = ive.IdSerie) ) " & _
                            "ON ivb.IdBodega = vw.IdBodega) " & _
                        "ON ivb2.IdBodega = ive.IdBodega) " & _
                    "ON ivs.IdSerie=vw.IdSerie) " & _
                "ON ivs2.IdSerie = ive.IdSerie " & _
          "WHERE (" & ex1 & " - " & ex4 & ")<>0 " & _
                 "AND " & ex2 & " is not null " & _
          "ORDER BY " & ex3
    Set rs = Me.OpenRecordset(sql)
    Set ConsIVCorrecExistSerie = rs
    Set rs = Nothing
End Function


Public Function ConsIVPareto(ByRef BandCliente As Boolean) As Variant
    Dim v As Variant, obj As Object, s As String, rs As Recordset
    Dim NumMeses As Integer, cond As String, sql As String, NumGrupo As Integer, NumIVGrupo As Integer
    Dim CadenaValores As String, CadenaOrdena As String, W As Variant, i As Integer
    
    
    With gobjMain.objCondicion
        NumMeses = DateDiff("m", .fecha1, .fecha2) + 1
        cond = " WHERE (vwConsVxParetos.FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
        sql = sql & " AND  gnt.AnexoCodTipoComp in (" & PreparaCadena(.CodBanco2) & ") "
        sql = sql & " AND  AnexoCodTipoTrans in (" & PreparaCadena(.CodBanco1) & ") "
        
        NumGrupo = 1
        If InStr(1, .Sucursal, "vwConsVxParetos") <> 0 Then
            If Not (Len(.Sucursal)) = 0 Then
                cond = cond & Mid$(.Sucursal, 1, 6)
                If BandCliente Then
                    cond = cond & "vwConsVxParetos.idpc" & Mid$(.Sucursal, 25, Len(.Sucursal))
                Else
                    cond = cond & "vwConsVxParetos" & Mid$(.Sucursal, 22, Len(.Sucursal))
                End If
            End If
            NumGrupo = Mid$(.Sucursal, 30, 1)
        End If
        If Len(.CodPC1) > 0 Or Len(.CodPC2) > 0 Then
            cond = cond & " AND (CodProvCli  BETWEEN  '" & .CodPC1 & "' AND  '" & _
                   .CodPC2 & "') "
        End If
        NumIVGrupo = 1
        If InStr(1, .Bienes, "IVInventario") <> 0 Then
                If Not (Len(.CodVehiculo)) = 0 Then
                    cond = cond & .CodVehiculo
                End If
            NumIVGrupo = Mid$(.Bienes, 27, 1)
        End If
        If Not (Len(.CodItem1) = 0 And Len(.CodItem2) = 0) Then
            cond = cond & "AND (CodInventario BETWEEN '" & .CodItem1 & "' AND '" & .CodItem2 & "') "
        End If
        If gobjMain.GrupoActual.PermisoActual.ConsRepVen Then
            cond = cond & " AND V.CodVendedor = '" & gobjMain.UsuarioActual.codUsuario & "'"
        Else
            If Not (Len(.Usuario1) = 0 And Len(.Usuario2) = 0) Then
                cond = cond & " AND CodVendedor between '" & .Usuario1 & "' and '" & .Usuario2 & "'"
            End If
        End If
        'Carga valores  de moneda Indice Moneda 0 / 1 / 2 / 3
        CadenaValores = "Sum(vwConsVxParetos.ValorNeto" & _
              IIf(.numMoneda > 0, "/Cotizacion" & .numMoneda + 1, "") & _
              ") AS SumaDeValorNeto, '" & NumMeses & "' as nummeses, "
        CadenaValores = CadenaValores & "Sum(vwConsVxParetos.ValorNeto" & _
              IIf(.numMoneda > 0, "/Cotizacion" & .numMoneda + 1, "") & _
              ")/ " & NumMeses & " AS promVentas, 0 as pp, 0 as s,0 as t,vwConsVxParetos.DescDiasCredito   "
        CadenaOrdena = "Sum(vwConsVxParetos.ValorNeto" & _
              IIf(.numMoneda > 0, "/Cotizacion" & .numMoneda + 1, "") & _
              ") "
        sql = "SELECT  0 as orden, 0 as tipo , "
        If BandCliente Then
            sql = sql & " vwConsVxParetos.codINVENTARIO, vwConsVxParetos.Descripcion,  "
   '         If Len(.CodVehiculo) > 0 Then
                sql = sql & " vwConsVxParetos.codunidad ,"
    '        Else
     '           sql = sql & " '' as codunidad ,"
      '      End If
        Else
            sql = sql & " vwConsVxParetos.CodProvCli, vwConsVxParetos.Nombre, vwConsVxParetos.NombreAlterno ,"
        End If
        sql = sql & " vwConsVxParetos.nomvendedor, "
        
        
        If Len(.CodVehiculo) = 0 Then
            If BandCliente Then

                sql = sql & " vwConsVxParetos.codgrupo1,  vwConsVxParetos.descivgrupo1 "
            Else
                sql = sql & "  descpcgrupo" & NumIVGrupo & ",' ' as codgrupo1"
            End If
            
            
        Else
            If BandCliente Then
                sql = sql & " vwConsVxParetos.codivgrupo" & NumIVGrupo & ", "
                sql = sql & " vwConsVxParetos.descivgrupo" & NumIVGrupo
            Else
                sql = sql & " vwConsVxParetos.CodGrupo" & NumGrupo
                sql = sql & ", vwConsVxParetos.descIvgrupo" & NumIVGrupo
            End If
        End If
        sql = sql & ", " & CadenaValores & "  From  "
        If Len(.Bienes) = 0 Then
            If BandCliente Then
                sql = sql & " vwConsVxParetosxItem  vwConsVxParetos "
            Else
                sql = sql & " vwConsVxParetos "
            End If
        Else
        
            If BandCliente Then
                sql = sql & " vwConsVxParetosxIvGrupoxItem as vwConsVxParetos"
            Else
                sql = sql & " vwConsVxParetosxIvGrupo as vwConsVxParetos"
            End If
        
        
            'sql = sql & " vwConsVxParetosxIvGrupo as vwConsVxParetos"
        End If
        If gobjMain.GrupoActual.PermisoActual.ConsRepVen Then
            sql = sql & " INNER JOIN FCVENDEDOR V ON V.IDVENDEDOR = vwConsVxParetos.IDVENDEDOR "
        End If
        sql = sql & cond & "GROUP BY "
        
        If BandCliente Then
            sql = sql & " vwConsVxParetos.codINVENTARIO, vwConsVxParetos.Descripcion,  "
'            If Len(.CodVehiculo) > 0 Then
                sql = sql & " vwConsVxParetos.codunidad ,"
 '           Else
                'sql = sql & " '' as codunidad ,"
  '          End If
            
        Else
            sql = sql & " vwConsVxParetos.CodProvCli, vwConsVxParetos.Nombre, vwConsVxParetos.NombreAlterno ,"
        End If
        
        sql = sql & " vwConsVxParetos.nomvendedor , vwConsVxParetos.DescDiasCredito"
        
        If BandCliente Then
            If Len(.CodVehiculo) = 0 Then
                sql = sql & ", vwConsVxParetos.codgrupo1  , vwConsVxParetos.descivgrupo1 "
            Else
                sql = sql & ", vwConsVxParetos.codivgrupo" & NumIVGrupo
            End If
'            End If
            sql = sql & " "
        Else
            'sql = sql & " vwConsVxParetos.nomvendedor, "
            sql = sql & " , vwConsVxParetos.codgrupo" & NumGrupo & " "
            sql = sql & "  ,  descpcgrupo" & NumIVGrupo
        End If
        If Len(.Bienes) > 0 Then
            If BandCliente Then
                    sql = sql & " , vwConsVxParetos.descivgrupo" & NumIVGrupo
            Else
                sql = sql & " ,vwConsVxParetos.descivgrupo" & NumIVGrupo
            End If
        End If
        sql = sql & " union all"
        If BandCliente Then
            sql = sql & " select 0 as orden, 0 as tipo, ivinventario.codinventario as codprovcli, ivinventario.descripcion as nombre, "
            'sql = sql & " ivinventario.descripcion2 as NombreAlterno, "
            sql = sql & " ivunidad.codunidad as NombreAlterno, "
            sql = sql & " '' as nombrevendedor, "
            sql = sql & " CodGrupo" & NumIVGrupo
            sql = sql & " , ivgrupo" & NumIVGrupo & ".descripcion as codIvGrupo, 0 as sumavalorneto , " & NumMeses & " as nummeses , 0 as promventas, 0 as pp,   0 as s, 0 as t, 0 as dc "
            sql = sql & " from ivinventario " ' inner join fcvendedor on pcprovcli.idvendedor = fcvendedor.idvendedor "
            sql = sql & " inner join ivgrupo1 on ivinventario.idgrupo1 = ivgrupo1.idgrupo1 "
            sql = sql & " left join ivgrupo2 on ivinventario.idgrupo2 = ivgrupo2.idgrupo2 "
            sql = sql & " left join ivgrupo3 on ivinventario.idgrupo3 = ivgrupo3.idgrupo3 "
            sql = sql & " left join ivgrupo4 on ivinventario.idgrupo4 = ivgrupo4.idgrupo4 "
            sql = sql & " left join ivgrupo5 on ivinventario.idgrupo5 = ivgrupo5.idgrupo5 "
            sql = sql & " left join ivunidad on ivinventario.idunidad= ivunidad.idunidad "
            If Len(.CodVehiculo) > 0 Then
                sql = sql & " where 1=1 "
                W = Split(.CodVehiculo, "AND")
                For i = 1 To UBound(W)
                    If i <> 1 Then W(i) = " " & W(i)
                    sql = sql & " and ivinventario." & Mid$(W(i), 22, 100)
                Next i
                sql = Mid$(sql, 1, Len(sql) - 1)
                sql = sql & " and codinventario not in( "
            Else
                sql = sql & " where codinventario not in("
            End If
        Else
            sql = sql & " select 0 as orden, 0 as tipo, pcprovcli.codprovcli, pcprovcli.nombre, pcprovcli.NombreAlterno, "
            sql = sql & " fcvendedor.nombre as nombrevendedor, codgrupo" & NumGrupo & " , ' ' as codIvGrupo, 0 as sumavalorneto , " & NumMeses & " as nummeses , 0 as promventas, 0 as pp,   0 as s, 0 as t, dc.codDiasCredito as dc "
            sql = sql & " from pcprovcli inner join fcvendedor on pcprovcli.idvendedor = fcvendedor.idvendedor "
            sql = sql & " inner join pcgrupo" & NumGrupo & " on pcprovcli.idgrupo" & NumGrupo & "= pcgrupo" & NumGrupo & ".idgrupo" & NumGrupo
            sql = sql & " inner join pcdiasCredito dc on dc.iddiascredito = pcprovcli.iddiascredito"
            sql = sql & " where bandcliente=1 "
            If Len(.Sucursal) > 0 Then
                sql = sql & " and ( pcprovcli.idgrupo" & NumGrupo & Mid$(.Sucursal, 31, 60)
            End If
            sql = sql & " and codprovcli not in("
        End If
        If Len(.Bienes) > 0 Then
            If BandCliente Then
                sql = sql & " SELECT  CodProvCli From vwConsVxParetosxIvGrupoXiTEM AS vwConsVxParetos  "
            Else
                sql = sql & " SELECT  vwConsVxParetos.CodProvCli From vwConsVxParetosxivgrupo AS vwConsVxParetos  "
            End If
        Else
            If BandCliente Then
                sql = sql & " SELECT  vwConsVxParetos.CodProvCli From vwConsVxParetosxItem  vwConsVxParetos  "
            Else
                sql = sql & " SELECT  vwConsVxParetos.CodProvCli From vwConsVxParetos  "
            End If
        End If
            sql = sql & cond
        sql = sql & " )"
        
        If Not (Len(.Usuario1) = 0 And Len(.Usuario2) = 0) Then
            sql = sql & " AND CodVendedor between '" & .Usuario1 & "' and '" & .Usuario2 & "'"
        End If
        
        sql = sql & " order by SumaDeValorNeto "
        
    End With

    Set rs = Me.OpenRecordset(sql)
    Set ConsIVPareto = rs
    Set rs = Nothing

End Function

Public Function ConsIVParetoVentaItemcCli(ByRef CodCliente As String) As Variant
Dim rs As Recordset
Dim cond As String, sql As String, NumGrupo As Integer, NumIVGrupo As Integer
Dim CadenaValores As String, CadenaOrdena As String, W As Variant, i As Integer
    With gobjMain.objCondicion




        sql = " select distinct codinventario, 0 as numpareto"
        sql = sql & " from gncomprobante g"
        sql = sql & " inner join pcprovcli pc on g.idclienteref=pc.idprovcli"
        sql = sql & " inner join ivkardex ivk"
        sql = sql & " inner join ivinventario ivi"
        sql = sql & " on ivk.idinventario=ivi.idinventario"
        sql = sql & " on g.transid=ivk.transid"
        sql = sql & " inner join gntrans gt on g.codtrans=gt.codtrans"
        sql = sql & " Where g.Estado <> 3"
        sql = sql & " and codprovcli='" & CodCliente & "'"
 '       sql = sql & " AND  gt.AnexoCodTipoComp in ('4','18')"
'        sql = sql & " AND  AnexoCodTipoTrans in ('2')"
        sql = sql & "  and (FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
        sql = sql & " AND  gt.AnexoCodTipoComp in (" & PreparaCadena(.CodBanco2) & ") "
        sql = sql & " AND  AnexoCodTipoTrans in (" & PreparaCadena(.CodBanco1) & ") "




    End With

    Set rs = Me.OpenRecordset(sql)
    Set ConsIVParetoVentaItemcCli = rs
    Set rs = Nothing

End Function

'AUC
Public Function ObtenerCodGarante(ByVal transid As Long) As String
    Dim sql As String, rs As Recordset
    sql = "SELECT CodProvcli From vwpcsolcreprovcli WHERE idtransfuente =  " & transid
    sql = sql & " AND Tiposolicitud = 1"
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        If Not IsNull(rs.Fields("CodProvcli")) Then ObtenerCodGarante = rs.Fields("CodProvcli")
    End If
    rs.Close
    Set rs = Nothing
End Function



Public Function ConsIVKardexIngreso() As Variant
    Dim sql As String, cond As String, rs As Recordset
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsIVKardexPorFecha")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("prmCodBodega") = gobjCond.CodBodega1
    qdef.Parameters("CodItem1") = IIf(Len(gobjCond.CodItem1) = 0, "!", gobjCond.CodItem1)
    qdef.Parameters("CodItem2") = IIf(Len(gobjCond.CodItem2) = 0, String$(20, "z"), gobjCond.CodItem2)
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    sql = "spConsIVKardexPorFechaIngreso " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodBodega1 & "','" & _
                gobjCond.CodItem1 & "','" & _
                gobjCond.CodItem2 & "','" & _
                gobjCond.NombreItem & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB)
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    Set ConsIVKardexIngreso = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Kardex inv. Ingreso" & gobjCond.fecha1 & "-" & gobjCond.fecha2, "IV"
End Function


Public Function RecuperaPCProvClixSolCred(key As Variant, IdFuente As Long) As PCProvCli
    Dim obj As PCProvCli
    Set obj = New PCProvCli
    Set obj.Empresa = Me
    On Error Resume Next
    obj.RecuperarxSolCred key, IdFuente
    If Err.Number = 0 Then Set RecuperaPCProvClixSolCred = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function ConsIVParetoVentaItem(ByRef codItem As String) As Variant
Dim rs As Recordset
Dim cond As String, sql As String, NumGrupo As Integer, NumIVGrupo As Integer
Dim CadenaValores As String, CadenaOrdena As String, W As Variant, i As Integer
    With gobjMain.objCondicion
        sql = " select distinct codProvcli, 0 as numpareto"
        sql = sql & " from gncomprobante g"
        sql = sql & " inner join pcprovcli pc on g.idclienteref=pc.idprovcli"
        sql = sql & " inner join ivkardex ivk"
        sql = sql & " inner join ivinventario ivi"
        sql = sql & " on ivk.idinventario=ivi.idinventario"
        sql = sql & " on g.transid=ivk.transid"
        sql = sql & " inner join gntrans gt on g.codtrans=gt.codtrans"
        sql = sql & " Where g.Estado <> 3"
        sql = sql & " and codInventario='" & codItem & "'"
        sql = sql & "  and (FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
        sql = sql & " AND  gt.AnexoCodTipoComp in (" & PreparaCadena(.CodBanco2) & ") "
        sql = sql & " AND  AnexoCodTipoTrans in (" & PreparaCadena(.CodBanco1) & ") "
    End With
    Set rs = Me.OpenRecordset(sql)
    Set ConsIVParetoVentaItem = rs
    Set rs = Nothing

End Function

Public Function RecuperaIVNumSerie(key As Variant) As IVNumSerie
    Dim obj As IVNumSerie
    Set obj = New IVNumSerie
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaIVNumSerie = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function ListaNumSerie(BandRS As Boolean, codItem As String, desc As String, Campo1 As String, Bodega As String) As Variant
    Dim sql As String, rs As Recordset
    Dim cond As String
        If Len(codItem) > 0 Then
            cond = "AND iv.codInventario like '" & codItem & "'"
        End If
        If Len(desc) > 0 Then
            cond = cond & "AND iv.Descripcion like '" & codItem & "'"
        End If
        If Len(Campo1) > 0 Then
            cond = cond & "AND ivs.campo1 like '" & Campo1 & "'"
        End If
        If Len(Bodega) > 0 Then
            cond = cond & "AND ivb.codbodega = '" & Bodega & "'"
        End If
        sql = "SELECT ivs.IdSerie,iv.codinventario,iv.descripcion,ivs.Campo1,ivs.Campo2,ivs.Campo3,ivs.Campo4,ivs.Campo5,"
        sql = sql & " ivs.fechacreacion,ivb.codbodega,ive.exist FROM IVSerie ivs "
        sql = sql & " LEFT JOIN IVINVENTARIO iv on iv.idinventario = ivs.idinventario"
        sql = sql & " LEFT JOIN IVSerieExist ive on ive.idSerie= ivs.idSerie "
        sql = sql & " LEFT JOIN IVBodega ivb on ivb.idbodega= ive.idbodega"
        sql = sql & " WHERE  iv.BandValida= 1 "
        sql = sql & cond
        sql = sql & " ORDER BY iv.codinventario"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaNumSerie = rs
    Else
        ListaNumSerie = MiGetRows(rs)
        rs.Close
    End If
   Set rs = Nothing
End Function

Public Function ListaIVItemSerieFlex(CodBodega As String, _
                                    codItem As String _
                                    ) As String
    Dim sql As String, cond As String, s As String
    Dim rs As Recordset
    sql = "SELECT Campo1 FROM ivserie ivs "
    sql = sql & " Inner Join ivinventario iv on iv.idinventario =ivs.idinventario"
    sql = sql & " Inner Join IVSerieExist ive "
    sql = sql & " Inner Join ivbodega ivb on  ivb.idbodega=ive.idbodega"
    sql = sql & " on ive.idserie=ivs.idSerie"
    sql = sql & " Where ive.exist = 0 "
    If Len(CodBodega) > 0 Then
        cond = " And CodBodega ='" & CodBodega & "' "
    End If
    If Len(codItem) > 0 Then
        cond = cond & " And iv.CodInventario='" & codItem & "' "
     End If
    sql = sql & cond
    sql = sql & " ORDER BY Campo1"
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 20 + 80)     'Código=20, Descripcion=80      '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    ListaIVItemSerieFlex = s
    rs.Close
    Set rs = Nothing
End Function

'*** AUC
Public Function ConsGNCall( _
                    Optional ByVal OrdenAscendente As Boolean) As Variant
        Dim sql As String, rs As Recordset
    Dim numMoneda As Integer
    Dim Tasa As Currency
    Dim diasGracia As Integer
    Dim NumDec As Integer
    Dim NumGrupo As Integer
    NumGrupo = 1
    If Len(Me.GNOpcion.ObtenerValor("TasaAnual")) > 0 Then
        Tasa = Me.GNOpcion.ObtenerValor("TasaAnual") / 100
    Else
        Tasa = 0
    End If
    
    If Len(Me.GNOpcion.ObtenerValor("DiasGraciaMora")) > 0 Then
        diasGracia = Me.GNOpcion.ObtenerValor("DiasGraciaMora")
    Else
        diasGracia = 0
    End If
    NumDec = IIf(Len(Me.GNOpcion.ObtenerValor("NumDecimales")) > 0, Me.GNOpcion.ObtenerValor("NumDecimales"), 2)
        numMoneda = Me.GNOpcion.IndiceMoneda("USD")
        sql = "spConsGNCall " & numMoneda & ",'" & _
        "USD" & "','" & _
        gobjMain.objCondicion.FechaCorte & "','" & _
        Me.GNOpcion.ObtenerValor("FornmaCobroOtrasCuotas") & "','" & _
        Me.GNOpcion.ObtenerValor("FormaCobroCuotaInt") & "'," & _
        Tasa & "," & _
        diasGracia & "," & _
        NumDec & "," & _
        NumGrupo & ",'" & _
        gobjMain.objCondicion.CodPC1 & "','" & _
        gobjMain.objCondicion.CodPC2 & "'"
        If Me.GNOpcion.ObtenerValor("AplicaCalculoMensual") = "1" Then
            sql = sql & ",0 "
        Else
            sql = sql & ",1 "
        End If
        
        Set rs = Me.OpenRecordset(sql)
    Set ConsGNCall = rs
    Set rs = Nothing
    
End Function

Public Function ListaGNCall(BandRS As Boolean, idpckardex1 As Long, idpckardex2 As Long) As Variant
    Dim sql As String, rs As Recordset
    Dim cond As String
        sql = "SELECT id,transid,idpckardex1,idpckardex2,Fecha,Hora,Contesta,FechaVisita,HoraProxGestion,codVendedor,observacion"
        sql = sql & " FROM GNCall g "
        sql = sql & " LEFT JOIN FCVendedor fcv on fcv.idvendedor= g.idCobrador"
        sql = sql & " Where g.idpckardex1=" & idpckardex1
        sql = sql & " And g.idpckardex2=" & idpckardex2
        'sql = sql & " ORDER BY fecha,hora"
   Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaGNCall = rs
    Else
        ListaGNCall = MiGetRows(rs)
        rs.Close
    End If
   Set rs = Nothing
End Function


Public Function CreaGNCall(id1 As Long, id2 As Long, IdTrans As Long) As GNCall
    Dim obj As GNCall
    Set obj = New GNCall
    Set obj.objEmpresa = Me
    Set CreaGNCall = obj
    obj.idpckardex1 = id1
    obj.idpckardex2 = id2
    obj.transid = IdTrans
    Set obj = Nothing
End Function

Public Function RecuperaGNCall(key As Long) As GNCall
    Dim obj As GNCall
    Set obj = New GNCall
    Set obj.objEmpresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaGNCall = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function ListaCiclo() As Variant
    Dim v(1, 1) As Variant
    v(0, 0) = "S"
    v(1, 0) = "Sierra"
    v(0, 1) = "C"
    v(1, 1) = "Costa"
   ListaCiclo = v
End Function

Public Function ConsPCKardexPorTrans2PCK(ByVal BandProveedor As Boolean, _
                                     ByVal BandCliente As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsPCKardexPorTrans")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodProvCli1") = IIf(Len(gobjCond.CodPC1) = 0, "!", gobjCond.CodPC1)
    qdef.Parameters("CodProvCli2") = IIf(Len(gobjCond.CodPC2) = 0, String$(20, "z"), gobjCond.CodPC2)
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    qdef.Parameters("prmBandProveedor") = BandProveedor
    qdef.Parameters("prmBandCliente") = BandCliente
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient

    If gobjMain.GrupoActual.PermisoActual.ConsRepVen And BandCliente Then
        sql = "spConsPCKardexPorTransVen " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodPC1 & "','" & _
                gobjCond.CodPC2 & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB) & "," & _
                CadenaBool(BandProveedor, TipoDB) & "," & _
                CadenaBool(BandCliente, TipoDB) & ",'" & _
                gobjMain.UsuarioActual.codUsuario & "'"
    Else
        sql = "spConsPCKardexPorTrans2PCK " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodPC1 & "','" & _
                gobjCond.CodPC2 & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB) & "," & _
                CadenaBool(BandProveedor, TipoDB) & "," & _
                CadenaBool(BandCliente, TipoDB)
    End If
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    Set ConsPCKardexPorTrans2PCK = rs
    Set rs = Nothing
End Function

Public Function ConsTSPorCobrarPagarVendeSucursal2pck( _
                    ByVal PorCobrar As Boolean, _
                    ByVal CodProvcli As String, _
                    ByVal FechaVenci As Date, _
                    ByVal CodForma As String, _
                    ByVal CodMoneda As String, _
                    ByVal CodGrupo1 As String, _
                    ByVal CodVendedor As String, _
                    ByVal CodSucursal As String, _
                    ByVal Codelemento As String) As Variant
    Dim aux_codpc As String, aux_f1 As Date, aux_f2 As Date
    Dim aux_PorCobrar As Boolean, aux_Cliente As Boolean, aux_Proveedor As Boolean
    Dim aux_CodForma As String, aux_CodMoneda As String, aux_codgrupo As String
    Dim aux_incluircero As Boolean, aux_codVendedor As String, aux_Empleado As Boolean
    Dim aux_codElemento As String

   With gobjMain.objCondicion
        'Conservar valores actuales para que no afecte a otras consultas
        aux_codpc = .CodPC1
        aux_f1 = .fecha1
        aux_f2 = .fecha2
        aux_PorCobrar = .PorCobrar
        aux_Cliente = .Cliente
        aux_Proveedor = .Proveedor
        aux_Empleado = .Empleado
        aux_CodForma = .CodForma
        aux_CodMoneda = .CodMoneda
        aux_codgrupo = .CodGrupo
        aux_incluircero = .IncluirCero
        aux_codVendedor = .Usuario1
        aux_codElemento = .Codelemento

        .PorCobrar = PorCobrar
        .Cliente = True
        .Proveedor = True
        '.Empleado = True
        
        .CodPC1 = CodProvcli
        .fecha1 = Me.GNOpcion.FechaInicio
        .fecha2 = FechaVenci
        .CodForma = CodForma
        .CodMoneda = CodMoneda
        .CodGrupo = CodGrupo1
        .IncluirCero = False
        .Usuario1 = CodVendedor
        .Sucursal = CodSucursal
        .Codelemento = Codelemento

        Set ConsTSPorCobrarPagarVendeSucursal2pck = ConsTSPorCobrarPagarVendedor2pck()
        
        'Recuperar valores reservados
        .CodPC1 = aux_codpc
        .fecha1 = aux_f1
        .fecha2 = aux_f2
        .PorCobrar = aux_PorCobrar
        .Cliente = aux_Cliente
        .Proveedor = aux_Proveedor
        .Empleado = aux_Empleado
        .CodForma = aux_CodForma
        .CodMoneda = aux_CodMoneda
        .CodGrupo = aux_codgrupo
        .IncluirCero = aux_incluircero
        .Usuario1 = aux_codVendedor
        .Sucursal = CodSucursal
        .Codelemento = Codelemento

   End With
End Function

Public Function ConsTSPorCobrarPagarVendedor2pck() As Variant
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim objCond As Condicion
    Dim BandModulo As Boolean
    Set objCond = gobjMain.objCondicion
    'Si no está especificada la moneda, coge la Moneda predeterminada
    If Len(objCond.CodMoneda) = 0 Then objCond.CodMoneda = MONEDA_PRE
    numMoneda = Me.GNOpcion.IndiceMoneda(objCond.CodMoneda)
#If DAOLIB Then
    sql = "SELECT Id, CodProvCli, Nombre, TransID, CodTrans, Trans, CodForma,NumLetra, Doc, "
    Select Case numMoneda
    Case 1:  sql = sql & "Valor1 AS Valor, VCancelado1 AS VCancelado, " & _
                          "Valor1-VCancelado1 AS Saldo, CodMoneda, Cancela, 1 AS Cotizacion, "
    Case 2:  sql = sql & "Valor2 AS Valor, VCancelado2 AS VCancelado, " & _
                          "Valor2-VCancelado2 AS Saldo, CodMoneda, Cancela, Cotizacion2 AS Cotizacion, "
    Case 3:  sql = sql & "Valor3 AS Valor, VCancelado3 AS VCancelado, " & _
                          "Valor3-VCancelado3 AS Saldo, CodMoneda, Cancela, Cotizacion3 AS Cotizacion, "
    Case 4:  sql = sql & "Valor4 AS Valor, VCancelado4 AS VCancelado, " & _
                          "Valor4-VCancelado4 AS Saldo, CodMoneda, Cancela, Cotizacion4 AS Cotizacion, "
    End Select
    sql = sql & "FechaEmision, Plazo, FechaVenci "
    If objCond.PorCobrar Then
        sql = sql & " FROM vwConsPCPorCobrar "
    Else
        sql = sql & " FROM vwConsPCPorPagar "
    End If
    'Solo los que tengan saldo >0   (Necesario)
    cond = "(Valor" & objCond.numMoneda & ">VCancelado" & objCond.numMoneda & ")"
    'Condición de FechaVenci    (Necesario)             '*** MAKOTO 10/dic/00 Modificado
    cond = cond & " AND (FechaVenci BETWEEN " & _
                    FechaYMD(objCond.fecha1, TipoDB) & " AND " & _
                    FechaYMD(objCond.fecha2, TipoDB) & ")"
    'Condición de CodMoneda     (Necesario)
    If Len(cond) > 0 Then cond = cond & " AND "
    cond = cond & "(CodMoneda='" & Me.GNOpcion.CodMoneda(numMoneda) & "')"
    'Condición de CodProvCli    (Opcional)
    If Len(objCond.CodPC1) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodProvCli='" & objCond.CodPC1 & "')"
    End If
    'Condición de CodForma    (Opcional)
    If Len(objCond.CodForma) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodForma='" & objCond.CodForma & "')"
    End If
    'Condición de Cod. Grupo1 de prov/cliente (Opcional)
    If Len(objCond.CodGrupo) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodGrupo1='" & objCond.CodGrupo & "')"
    End If
    'Condición de si incluir cliente/proveedor          '*** MAKOTO 10/dic/00
    If Len(cond) > 0 Then cond = cond & " AND "
    cond = cond & "(BandCliente=" & CadenaBool(objCond.Cliente, TipoDB) & _
                    " OR BandProveedor=" & CadenaBool(objCond.Proveedor, TipoDB) & ")"
    If Len(cond) > 0 Then sql = sql & " WHERE (" & cond & ")"
    sql = sql & " ORDER BY CodProvCli,FechaVenci"
#Else
    If Len(objCond.Sucursal) = 0 Then
        BandModulo = gobjMain.PermisoModuloEspecial(gobjMain.UsuarioActual.codUsuario, ModuloPagaRol)
        If (BandModulo And objCond.Empleado) Or objCond.BandAnticipo Then  'Esto es para pagar ets
            sql = "spConsTSPorCobrarPagarEmpleado " & numMoneda & ", " & _
                   objCond.CodMoneda & "," & _
                    CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                    FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                    objCond.CodPC1 & "','" & _
                    objCond.CodPC1 & "','" & _
                    objCond.CodForma & "','" & _
                    objCond.CodForma & "','" & _
                    objCond.Codelemento & "','" & _
                    objCond.Codelemento & "','" & _
                    objCond.CodGrupo & "'"
        Else
                sql = "spConsTSPorCobrarPagarVendedorSinRol " & numMoneda & ", " & _
                    objCond.CodMoneda & "," & _
                    CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                    CadenaBool(objCond.Cliente, TipoDB) & "," & _
                    CadenaBool(objCond.Proveedor, TipoDB) & "," & _
                    FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                    objCond.CodPC1 & "','" & _
                    objCond.CodPC1 & "','" & _
                    objCond.CodForma & "','" & _
                    objCond.CodForma & "','" & _
                    objCond.CodGrupo & "','" & _
                    objCond.Usuario1 & "','" & _
                    objCond.Usuario1 & "'," & _
                    IIf(Me.GNOpcion.Los100DocCobroPago, 1, 0)
                    If InStr(1, UCase(Me.GNOpcion.NombreEmpresa), "ITAL") Then
                        sql = sql & ",2"
                    Else
                        sql = sql & ",1"
                    End If
        End If
                  'sql = sql & ",'" & objCond.Codelemento & "'," & _
                "'" & objCond.Codelemento & "'"
    Else               'AUC cambiado para agregar el filtro sucusal
            sql = "spConsTSPorCobrarPagarVendedorSucursal2pck " & numMoneda & ", " & _
                objCond.CodMoneda & "," & _
                CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                CadenaBool(objCond.Cliente, TipoDB) & "," & _
                CadenaBool(objCond.Proveedor, TipoDB) & "," & _
                FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                objCond.CodPC1 & "','" & _
                objCond.CodPC1 & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodGrupo & "','" & _
                objCond.Usuario1 & "','" & _
                objCond.Usuario1 & "'," & _
                IIf(Me.GNOpcion.Los100DocCobroPago, 1, 0) & ",'" & _
                objCond.Sucursal & "','" & _
                objCond.Sucursal & "'"
    End If
#End If
    Set rs = Me.OpenRecordset(sql)
    Set ConsTSPorCobrarPagarVendedor2pck = rs
    Set rs = Nothing
    Set objCond = Nothing
End Function

Public Function ConsTSPorCobrarPagar32pck() As Variant
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim objCond As Condicion
    
    Set objCond = gobjMain.objCondicion
    
    'Si no está especificada la moneda, coge la Moneda predeterminada
    If Len(objCond.CodMoneda) = 0 Then objCond.CodMoneda = MONEDA_PRE
    numMoneda = Me.GNOpcion.IndiceMoneda(objCond.CodMoneda)
    
#If DAOLIB Then
    sql = "SELECT Id, CodProvCli, Nombre, TransID, CodTrans, Trans, CodForma,NumLetra, Doc, "
    Select Case numMoneda
    Case 1:  sql = sql & "Valor1 AS Valor, VCancelado1 AS VCancelado, " & _
                          "Valor1-VCancelado1 AS Saldo, CodMoneda, Cancela, 1 AS Cotizacion, "
    Case 2:  sql = sql & "Valor2 AS Valor, VCancelado2 AS VCancelado, " & _
                          "Valor2-VCancelado2 AS Saldo, CodMoneda, Cancela, Cotizacion2 AS Cotizacion, "
    Case 3:  sql = sql & "Valor3 AS Valor, VCancelado3 AS VCancelado, " & _
                          "Valor3-VCancelado3 AS Saldo, CodMoneda, Cancela, Cotizacion3 AS Cotizacion, "
    Case 4:  sql = sql & "Valor4 AS Valor, VCancelado4 AS VCancelado, " & _
                          "Valor4-VCancelado4 AS Saldo, CodMoneda, Cancela, Cotizacion4 AS Cotizacion, "
    End Select
    sql = sql & "FechaEmision, Plazo, FechaVenci "
    If objCond.PorCobrar Then
        sql = sql & " FROM vwConsPCPorCobrar "
    Else
        sql = sql & " FROM vwConsPCPorPagar "
    End If
    
    'Solo los que tengan saldo >0   (Necesario)
    cond = "(Valor" & objCond.numMoneda & ">VCancelado" & objCond.numMoneda & ")"
    
    'Condición de FechaVenci    (Necesario)             '*** MAKOTO 10/dic/00 Modificado
    cond = cond & " AND (FechaVenci BETWEEN " & _
                    FechaYMD(objCond.fecha1, TipoDB) & " AND " & _
                    FechaYMD(objCond.fecha2, TipoDB) & ")"
    
    'Condición de CodMoneda     (Necesario)
    If Len(cond) > 0 Then cond = cond & " AND "
    cond = cond & "(CodMoneda='" & Me.GNOpcion.CodMoneda(numMoneda) & "')"
    
    'Condición de CodProvCli    (Opcional)
    If Len(objCond.CodPC1) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodProvCli='" & objCond.CodPC1 & "')"
    End If
    
    'Condición de CodForma    (Opcional)
    If Len(objCond.CodForma) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodForma='" & objCond.CodForma & "')"
    End If
    
    'Condición de Cod. Grupo1 de prov/cliente (Opcional)
    If Len(objCond.CodGrupo) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodGrupo1='" & objCond.CodGrupo & "')"
    End If
    
    'Condición de si incluir cliente/proveedor          '*** MAKOTO 10/dic/00
    If Len(cond) > 0 Then cond = cond & " AND "
    cond = cond & "(BandCliente=" & CadenaBool(objCond.Cliente, TipoDB) & _
                    " OR BandProveedor=" & CadenaBool(objCond.Proveedor, TipoDB) & ")"
    
    If Len(cond) > 0 Then sql = sql & " WHERE (" & cond & ")"
    sql = sql & " ORDER BY CodProvCli,FechaVenci"
#Else
    If gobjMain.GrupoActual.PermisoActual.ConsRepVen And objCond.Cliente Then
        sql = "spConsTSPorCobrarPagarVen " & numMoneda & ", " & _
                objCond.CodMoneda & "," & _
                CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                CadenaBool(objCond.Cliente, TipoDB) & "," & _
                CadenaBool(objCond.Proveedor, TipoDB) & "," & _
                FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                objCond.CodPC1 & "','" & _
                objCond.CodPC1 & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodGrupo & "'," & IIf(Me.GNOpcion.Los100DocCobroPago, 1, 0)
            sql = sql & ",'" & gobjMain.UsuarioActual.codUsuario & "'"
    Else
        sql = "spConsTSPorCobrarPagar2pck " & numMoneda & ", " & _
                objCond.CodMoneda & "," & _
                CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                CadenaBool(objCond.Cliente, TipoDB) & "," & _
                CadenaBool(objCond.Proveedor, TipoDB) & "," & _
                FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                objCond.CodPC1 & "','" & _
                objCond.CodPC1 & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodGrupo & "'," & IIf(Me.GNOpcion.Los100DocCobroPago, 1, 0)
    End If
#End If
    Set rs = Me.OpenRecordset(sql)
    Set ConsTSPorCobrarPagar32pck = rs
    Set rs = Nothing
    Set objCond = Nothing
End Function

Public Function ListaPCGestion(BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
        sql = "SELECT id,codGestion,descripcion"
        sql = sql & " FROM PCGestion"
        sql = sql & " ORDER BY CodGestion"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCGestion = rs
    Else
        ListaPCGestion = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function
Public Function CreaGestion() As PCGestion
    Dim obj As PCGestion
    Set obj = New PCGestion
    Set obj.Empresa = Me
    Set CreaGestion = obj
    Set obj = Nothing
End Function
Public Function RecuperaPCGestion(key As Variant) As PCGestion
    Dim obj As PCGestion
    Set obj = New PCGestion
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaPCGestion = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function
Public Function ListaPCGestionFlex(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodGestion,Descripcion FROM PCGestion "
    If BandSoloValida Then sql = sql & " Where  BandValida=" & CadenaBool(True, TipoDB)
    sql = sql & " ORDER BY CodGestion"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCGestionFlex = rs
    Else
        ListaPCGestionFlex = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function
Public Function ListaIVNumSerieNewA(ByVal CodInventario As String, ByVal CodBodega As String, ByVal TipoTrans As String) As String
   Dim sql As String, s As String
    Dim rs As Recordset
    sql = "SELECT Campo1,ive.exist "
    sql = sql & " FROM IVSerie ivs Inner Join ivinventario iv "
    sql = sql & " on iv.idinventario = ivs.idinventario "
    sql = sql & " inner join ivserieexist ive inner join ivbodega ivb"
    sql = sql & " on ivb.idbodega = ive.idbodega  on ive.idserie = ivs.idserie"
    sql = sql & " Where iv.codInventario = '" & CodInventario & "'"
    sql = sql & " And ivb.codbodega= '" & CodBodega & "'"
    If TipoTrans <> "I" Then
        sql = sql & " And ive.exist > 0 "
    End If
    sql = sql & " group by campo1,ive.exist"
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 10 + 40)
#Else
    If Not rs.EOF Then
        s = rs.GetString(adClipString, , vbTab, "|", "(nulo)")
    End If
#End If
    ListaIVNumSerieNewA = s
    rs.Close
    Set rs = Nothing
End Function
Public Function RecuperarDatosProv(ByVal Ciclo As String, ByVal CodEle As String, ByVal CodEmpleado As String, ByVal fechaD As Date, ByVal FechaH As Date) As Recordset
Dim sql As String, rs As Recordset
Dim DiasTrab As String
Dim ElePago As String
Dim SB As Currency
On Error GoTo CapturaError
    If Len(Me.GNOpcion.ObtenerValor("DiasTrabajados")) > 0 Then
        DiasTrab = Me.GNOpcion.ObtenerValor("DiasTrabajados")
    Else
        MsgBox "Tiene que configurar elemento para diasTrab en inf. de emp.", vbInformation
        Exit Function
    End If
    'aqui estoy
    If Len(Me.GNOpcion.ObtenerValor("ElePagoXIV")) > 0 Then
        ElePago = Me.GNOpcion.ObtenerValor("ElePagoXIV")
    Else
        MsgBox "Tiene que configurar elemento a pagar en inf. de emp.", vbInformation
        Exit Function
    End If
    If Len(Me.GNOpcion.ObtenerValor("SB")) > 0 Then
        SB = Me.GNOpcion.ObtenerValor("SB")
    Else
        MsgBox "Tiene que configurar Sueldo Basico Actual en inf. de emp.", vbInformation
        Exit Function
    End If
    VerificaExistenciaTabla 100
    sql = "SELECT p.ciclo,e.idprovcli,e.nombre, "
    If Len(Me.GNOpcion.ObtenerValor("CalculaDiasExactos")) > 0 Then
        If Me.GNOpcion.ObtenerValor("CalculaDiasExactos") = "1" Then
            'sql = sql & " datediff(d,'" & fechaD & "','" & FechaH & "') as TotalDias,"
            sql = sql & " 365 as TotalDias,"
        Else
            sql = sql & " 360 as TotalDias,"
        End If
    Else
        sql = sql & " 360 as TotalDias,"
    End If
    sql = sql & " sum(hr.valor) as valor "
    sql = sql & " INTO TMP100 FROM Personal p "
    sql = sql & " INNER JOIN Empleado e"
    sql = sql & " inner  join historialrolmensual hr "
    sql = sql & " inner join elemento ele on ele.idelemento = hr.idelemento"
    sql = sql & " on hr.idEmpleado = e.idprovcli"
    sql = sql & " on e.idprovcli = p.idempleado "
    sql = sql & " WHERE ele.codelemento = '" & DiasTrab & "'"
    sql = sql & " AND (hr.fecharol between '" & fechaD & "'"
    sql = sql & " AND '" & FechaH & "')"
    sql = sql & " AND p.ciclo = '" & Ciclo & "'"
    sql = sql & " Group by p.ciclo,e.idprovcli,e.nombre,ele.codelemento"
    sql = sql & " UNION ALL" 'uniendo las dos tablas
    sql = sql & " SELECT p.ciclo,e.idprovcli,e.nombre,0 as TotalDias,sum(hr.valor) as valor "
    sql = sql & " FROM Personal p "
    sql = sql & " INNER JOIN Empleado e"
    sql = sql & " inner  join Roldetalle hr Inner Join GnComprobante g on g.transid = hr.transid "
    sql = sql & " inner join elemento ele on ele.idelemento = hr.idelemento"
    sql = sql & " on hr.idEmpleado = e.idprovcli"
    sql = sql & " on e.idprovcli = p.idempleado "
    sql = sql & " WHERE g.estado<>3 And ele.codelemento = '" & DiasTrab & "'"
    sql = sql & " AND (g.fechadevol between '" & fechaD & "'"
    sql = sql & " AND '" & FechaH & "')"
    sql = sql & " AND p.ciclo = '" & Ciclo & "'"
    sql = sql & " Group by p.ciclo,e.idprovcli,e.nombre,ele.codelemento"
    sql = sql & " ORDER BY e.NOMBRE "
    Me.EjecutarSQL sql, 1
    VerificaExistenciaTabla 101
    sql = "SELECT p.ciclo,e.idprovcli,e.nombre,"
    sql = sql & SB & " as Apagar, sum(hr.valor) as valorPagado "
    sql = sql & " INTO TMP101 FROM Personal p "
    sql = sql & " INNER JOIN Empleado e"
    sql = sql & " inner  join historialrolmensual hr "
    sql = sql & " inner join elemento ele on ele.idelemento = hr.idelemento"
    sql = sql & " on hr.idEmpleado = e.idprovcli"
    sql = sql & " on e.idprovcli = p.idempleado "
    sql = sql & " WHERE ele.codelemento = '" & ElePago & "'"
    sql = sql & " AND (hr.fecharol between '" & fechaD & "'"
    sql = sql & " AND '" & FechaH & "')"
    sql = sql & " AND p.ciclo = '" & Ciclo & "'"
    sql = sql & " Group by p.ciclo,e.idprovcli,e.nombre,ele.codelemento"
    sql = sql & " UNION ALL" 'uniendo las dos tablas
    sql = sql & " SELECT p.ciclo,e.idprovcli,e.nombre,0 as APagar,sum(hr.valor) as valorPagado "
    sql = sql & " FROM Personal p "
    sql = sql & " INNER JOIN Empleado e"
    sql = sql & " inner  join Roldetalle hr Inner Join GnComprobante g on g.transid = hr.transid "
    sql = sql & " inner join elemento ele on ele.idelemento = hr.idelemento"
    sql = sql & " on hr.idEmpleado = e.idprovcli"
    sql = sql & " on e.idprovcli = p.idempleado "
    sql = sql & " WHERE g.estado<> 3 AND ele.codelemento = '" & ElePago & "'"
    sql = sql & " AND (g.fechadevol between '" & fechaD & "'"
    sql = sql & " AND '" & FechaH & "')"
    sql = sql & " AND p.ciclo = '" & Ciclo & "'"
    sql = sql & " Group by p.ciclo,e.idprovcli,e.nombre,ele.codelemento"
    sql = sql & " ORDER BY e.NOMBRE "
    Me.EjecutarSQL sql, 1
    VerificaExistenciaTabla 102
    sql = "Select ciclo,idprovcli,nombre,sum(totaldias) as totaldias,sum(valor) as valor,(sum(valor)-sum(totaldias) ) as dif into tmp102 from tmp100"
    sql = sql & " Group by ciclo,idprovcli,nombre "
    Me.EjecutarSQL sql, 1
    VerificaExistenciaTabla 103
    sql = "Select ciclo,idprovcli,nombre,sum(APagar) as Apagar,sum(valorPagado) as valorPagado into tmp103 from tmp101"
    sql = sql & " Group by ciclo,idprovcli,nombre "
    Me.EjecutarSQL sql, 1
    sql = "Select tmp102.ciclo,pc.codprovcli,pc.nombre,tmp102.totaldias,tmp102.valor,"
    sql = sql & " tmp102.dif,tmp103.APagar as SB,tmp103.valorPagado,((tmp102.valor*tmp103.APagar)/tmp102.totaldias) as APagar, "
    sql = sql & "((tmp102.valor*tmp103.APagar)/tmp102.totaldias)- tmp103.valorPagado as difApagar"
    sql = sql & " from tmp102 inner join tmp103"
    sql = sql & " On tmp103.idprovcli = tmp102.idprovcli"
    sql = sql & " Inner Join Empleado pc on pc.idprovcli = tmp102.idprovcli"
    Set rs = Me.OpenRecordset(sql)
   Set RecuperarDatosProv = rs
   Set rs = Nothing
    Exit Function
CapturaError:
    Set rs = Nothing
    MsgBox Err.Description
    Exit Function
End Function
Public Function ListaRolProv(ByVal transid As Long) As Recordset
Dim sql As String, rs As Recordset
    sql = "Select g.numdocref,codEmpleado,empleado,'' as TotDias,'' as DiasTrab,'' as DiasDif,'' as SB, "
    sql = sql & "'' as ProvPagada,'' as APagar,valor "
    sql = sql & " from vwRolDetalle"
    sql = sql & " inner join gncomprobante g on g.transid = vwRolDetalle.transid"
    sql = sql & " Where g.TransID = " & transid
    Set rs = Me.OpenRecordset(sql)
    Set ListaRolProv = rs
    Set rs = Nothing
End Function
Public Function ListaCicloFlex() As String
    Dim cad As String
   cad = "|" & "S" & vbTab & "Sierra" & "|"
    cad = cad & "C" & vbTab & "Costa" & "|"
   ListaCicloFlex = cad
End Function

Public Function ConsTSPorCobrarCapInteresNew( _
                    ByVal PorCobrar As Boolean, _
                    ByVal CodProvcli As String, _
                    ByVal FechaVenci As Date, _
                    ByVal CodForma As String, _
                    ByVal CodMoneda As String, _
                    ByVal CodGrupo1 As String, _
                    ByVal CodVendedor As String, _
                    ByVal TasaMensual As Currency, _
                    ByVal diasGracia As Integer, _
                    ByVal CodSucursal As String, _
                    ByVal Precio As Currency _
                    ) As Variant
   Dim aux_codpc As String, aux_f1 As Date, aux_f2 As Date
    Dim aux_PorCobrar As Boolean, aux_Cliente As Boolean, aux_Proveedor As Boolean
    Dim aux_CodForma As String, aux_CodMoneda As String, aux_codgrupo As String
    Dim aux_incluircero As Boolean, aux_codVendedor As String, aux_codSucursal As String
    Dim aux_precio As Boolean
   With gobjMain.objCondicion
        'Conservar valores actuales para que no afecte a otras consultas
        aux_codpc = .CodPC1
        aux_f1 = .fecha1
        aux_f2 = .fecha2
        aux_PorCobrar = .PorCobrar
        aux_Cliente = .Cliente
        aux_Proveedor = .Proveedor
        aux_CodForma = .CodForma
        aux_CodMoneda = .CodMoneda
        aux_codgrupo = .CodGrupo
        aux_incluircero = .IncluirCero
        aux_codVendedor = .Usuario1
        aux_codSucursal = .Sucursal
        aux_precio = .Precio
       .PorCobrar = PorCobrar
        .Cliente = True
        .Proveedor = True
        .CodPC1 = CodProvcli
        .fecha1 = Me.GNOpcion.FechaInicio
        .fecha2 = FechaVenci
        .CodForma = CodForma
        .CodMoneda = CodMoneda
        .CodGrupo = CodGrupo1
        .IncluirCero = False
        .Usuario1 = CodVendedor
        .NumDias1 = diasGracia
        .TasaMensual = TasaMensual
        .NumDias2 = IIf(Len(Me.GNOpcion.ObtenerValor("NumDecimales")) > 0, Me.GNOpcion.ObtenerValor("NumDecimales"), 2)
        .Sucursal = CodSucursal
        .Precio = Precio
        Set ConsTSPorCobrarCapInteresNew = ConsTSPorCobrarCapitalInteres()
       'Recuperar valores reservados
        .CodPC1 = aux_codpc
        .fecha1 = aux_f1
        .fecha2 = aux_f2
        .PorCobrar = aux_PorCobrar
        .Cliente = aux_Cliente
        .Proveedor = aux_Proveedor
        .CodForma = aux_CodForma
        .CodMoneda = aux_CodMoneda
        .CodGrupo = aux_codgrupo
        .IncluirCero = aux_incluircero
        .Usuario1 = aux_codVendedor
        .Sucursal = aux_codSucursal
        .Precio = aux_precio
   End With
End Function

Public Function RecuperaPcFinanAmort(ByVal gc As GNComprobante, ByVal transid As Long, ByVal IdProvcli As Long, ByVal FechaCorte As Date) As Recordset
Dim sql As String
Dim rs As Recordset
Dim s As String
Dim CodT As String
Dim v As Variant
Dim i As Long
Dim ItemCall As String
Dim p As String
Dim Precio As Currency
Dim PrecioV As Currency
Dim iv As IVInventario
Dim item As String
Dim itemV As String
'Dim tipogestion As String
On Error GoTo CapturaError
    s = ""
    CodT = ""

'--------------------
    If Len(Me.GNOpcion.ObtenerValor("CallItem")) > 0 Then
        item = Me.GNOpcion.ObtenerValor("CallItem")
    Else
        MsgBox "No tiene configurado el item para gestion Llamada. revice en conf de la empresa"
        Exit Function
    End If
    
    If Len(Me.GNOpcion.ObtenerValor("VisitaItem")) > 0 Then
        itemV = Me.GNOpcion.ObtenerValor("VisitaItem")
    Else
        MsgBox "No tiene configurado el item para gestion Visita. revice en conf de la empresa"
        Exit Function
    End If
    
    Set iv = Me.RecuperaIVInventarioQuick(item)
     Select Case Me.GNOpcion.ObtenerValor("PrecioGestion") 'gestion llamada
            Case "P1": Precio = iv.Precio(1)
            Case "P2": Precio = iv.Precio(2)
            Case "P3": Precio = iv.Precio(3)
            Case "P4": Precio = iv.Precio(4)
            Case "P5": Precio = iv.Precio(5)
            Case "P6": Precio = iv.Precio(6)
            Case "P7": Precio = iv.Precio(7)
        End Select
    Set iv = Nothing
    Set iv = Me.RecuperaIVInventarioQuick(itemV)
     Select Case Me.GNOpcion.ObtenerValor("PrecioGestionV") ' gestion visita
            Case "P1": PrecioV = iv.Precio(1)
            Case "P2": PrecioV = iv.Precio(2)
            Case "P3": PrecioV = iv.Precio(3)
            Case "P4": PrecioV = iv.Precio(4)
            Case "P5": PrecioV = iv.Precio(5)
            Case "P6": PrecioV = iv.Precio(6)
            Case "P7": PrecioV = iv.Precio(7)
        End Select
    Set iv = Nothing

'--------------------
   
    VerificaExistenciaTabla 0 'revisamos si hay cobros realizados
    sql = "select  pck1.idasignado  ,SUM(pck1.haber) as vpagado,"
    sql = sql & " SUM(pf.valorcapital) as vc1,SUM(pf.valorInteres) as vi1"
    sql = sql & " into tmp0 "
    sql = sql & " from PCKARDEXAMORT pf  "
    sql = sql & " inner join pckardex pck inner join pckardex pck1 inner join gncomprobante g on g.transid = pck1.transid "
    sql = sql & " on pck1.idasignado = pck.id "
    sql = sql & " inner join gncomprobante gn on gn.transid = pck.transid"
    sql = sql & " on pck.id = pf.idpckardex"
    sql = sql & " WHERE g.estado <> 3 AND pck.idprovcli = " & IdProvcli
   sql = sql & " GROUP BY pck1.IdAsignado,pf.valorInteres "
    gobjMain.EmpresaActual.EjecutarSQL sql, 1
    
    
    
    
    
        VerificaExistenciaTabla 1
        sql = "SELECT c.idpckardex1, COUNT(c.IDPCKARDEX1) AS NumLlamadas INTO TMP1 FROM GNCALL c"
        sql = sql & " iNNER JOIN PCKARDEX PCK "
        sql = sql & " iNNER JOin gncomprobante g on g.transid = pck.transid"
        sql = sql & " ON PCK.ID = c.IDPCKARDEX1"
        sql = sql & " Inner join pcgestion pcg on pcg.id = c.idgestion"
        sql = sql & " Where pcg.codgestion = 'LLAMADA'"
        sql = sql & " group by idpckardex1"
        gobjMain.EmpresaActual.EjecutarSQL sql, 1
        
    
        VerificaExistenciaTabla 2
        sql = "SELECT c.idpckardex1, COUNT(c.IDPCKARDEX1) AS NumVisitas INTO TMP2 FROM GNCALL c"
        sql = sql & " iNNER JOIN PCKARDEX PCK "
        sql = sql & " iNNER JOin gncomprobante g on g.transid = pck.transid"
        sql = sql & " ON PCK.ID = c.IDPCKARDEX1"
        sql = sql & " Inner join pcgestion pcg on pcg.id = c.idgestion"
        sql = sql & " Where pcg.codgestion = 'VISITA'"
        sql = sql & " group by idpckardex1"
        gobjMain.EmpresaActual.EjecutarSQL sql, 1
    
    VerificaExistenciaTabla 3
    sql = " SELECT pc.idpckardex,pck.ordencuota,gn.codtrans+''+convert(varchar,numtrans) +' '+pck.numletra as numletra,pck.fechaemision,pck.fechavenci, "
    sql = sql & "case when t.vc1 > 0 then  pc.valorcapital-vpagado else  pc.valorcapital end  as vc1,"
    sql = sql & "case when t.vi1 > 0 then  pc.valorinteres-vpagado else  pc.valorInteres end as vi1, "
    
    sql = sql & "t1.numllamadas*" & Precio & " as ValorGestionCall,"
    sql = sql & "t2.numvisitas*" & PrecioV & " as ValorGestionVisita"
    
    
    sql = sql & " Into tmp3 From PCKARDEXAMORT pc left join tmp0 t on t.idasignado = pc.idpckardex "
    sql = sql & " inner join pckardex pck "
    
    sql = sql & " left join tmp1 t1 on t1.idpckardex1=pck.id "
    sql = sql & " left join tmp2 t2 on t2.idpckardex1=pck.id "
    
    sql = sql & " inner join gncomprobante gn Inner Join gntrans gt on gt.codtrans = gn.codtrans on gn.transid = pck.transid  on pck.id=pc.idpckardex "
    sql = sql & " WHERE pck.idProvcli = " & IdProvcli 'Auc tiene que recuperar de pckardex para que tome en cuenta saldos iniciales
    sql = sql & " And gn.estado <> 3"
    sql = sql & " And gt.AfectaSaldoPC=1"
    sql = sql & " and pck.fechavenci <='31/12/9999'"
    gobjMain.EmpresaActual.EjecutarSQL sql, 1
    
    sql = "Select * From tmp3 "
    sql = sql & "Where (vc1+vi1)>0"
    sql = sql & " Order by  fechaVenci"
    Set rs = Me.OpenRecordset(sql)
    Set RecuperaPcFinanAmort = rs
    Set rs = Nothing
    Exit Function
CapturaError:
    Set rs = Nothing
    MsgBox Err.Description
    Exit Function
End Function
 'AUC cierre por trans para solis
Public Function ConsTSPorCobrarPagarTransaccion( _
                    ByVal PorCobrar As Boolean, _
                    ByVal FechaVenci As Date, _
                    ByVal CodForma As String, _
                    ByVal CodMoneda As String, _
                    ByVal CodTrans As String, _
                    ByVal HoraDesde As Date, _
                    ByVal HoraHasta As Date) As Variant
    Dim aux_codpc As String, aux_f1 As Date, aux_f2 As Date
    Dim aux_PorCobrar As Boolean, aux_Cliente As Boolean, aux_Proveedor As Boolean
    Dim aux_CodForma As String, aux_CodMoneda As String, aux_codgrupo As String
    Dim aux_incluircero As Boolean, aux_codUsuario As String, aux_codTrans As String
    Dim aux_HoraDesde As Date, aux_HoraHasta As Date
   With gobjMain.objCondicion
        'Conservar valores actuales para que no afecte a otras consultas
        aux_f1 = .fecha1
        aux_f2 = .fecha2
        aux_PorCobrar = .PorCobrar
        aux_CodForma = .CodForma
        aux_CodMoneda = .CodMoneda
        aux_codgrupo = .CodGrupo
        aux_codTrans = CodTrans
        aux_HoraDesde = HoraDesde
        aux_HoraHasta = HoraHasta
        .PorCobrar = PorCobrar
        .fecha1 = Me.GNOpcion.FechaInicio
        .fecha2 = FechaVenci
        .CodForma = CodForma
        .CodMoneda = CodMoneda
        .CodTrans = CodTrans
        .Hora1 = HoraDesde
        .Hora2 = HoraHasta
        Set ConsTSPorCobrarPagarTransaccion = ConsTSPorCobrarPagarTrans()
        'Recuperar valores reservados
        .fecha1 = aux_f1
        .fecha2 = aux_f2
        .PorCobrar = aux_PorCobrar
        .CodForma = aux_CodForma
        .CodMoneda = aux_CodMoneda
        .CodTrans = aux_codTrans
        .Hora1 = aux_HoraDesde
        .Hora2 = aux_HoraHasta
   End With
End Function
Public Function ConsTSPorCobrarPagarTrans() As Variant
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim objCond As Condicion
    Set objCond = gobjMain.objCondicion
    'Si no está especificada la moneda, coge la Moneda predeterminada
    If Len(objCond.CodMoneda) = 0 Then objCond.CodMoneda = MONEDA_PRE
    numMoneda = Me.GNOpcion.IndiceMoneda(objCond.CodMoneda)
        sql = " SELECT   vw.Id,"
        sql = sql & " vw.CodProvCli,"
        sql = sql & " vw.Nombre,"
        sql = sql & " vw.TransID,"
        sql = sql & " vw.CodTrans,"
        sql = sql & " vw.Trans,"
        sql = sql & " vw.CodForma,"
        sql = sql & " vw.NumLetra,"
        sql = sql & " vw.Doc,"
        sql = sql & " vw.Valor" & numMoneda & " AS Valor,"
        sql = sql & " vw.VCancelado" & numMoneda & " AS VCancelado,"
        sql = sql & " vw.Valor" & numMoneda & " - vw.VCancelado" & numMoneda & " AS Saldo,"
        sql = sql & " vw.CodMoneda,"
        sql = sql & " vw.Valor" & numMoneda & " - vw.VCancelado" & numMoneda & " AS CANCELA,"
        If numMoneda = 1 Then
            sql = sql & "  1 AS Cotizacion,"
        Else
            sql = sql & "  vw.Cotizacion" & numMoneda & " AS Cotizacion,"
        End If
        sql = sql & " vw.FechaEmision,"
        sql = sql & " vw.Plazo,"
        sql = sql & " vw.FechaVenci,"
        sql = sql & " vw.codvendedor,"
        sql = sql & " vw.NomVendedor"
        sql = sql & " From vwConsPCPorCobrarPagar vw"
        sql = sql & " Inner Join GnComprobante g on g.transid = vw.transid "
        sql = sql & " WHERE (g.FechaTrans  BETWEEN '" & gobjCond.fecha2 & "' AND '" & gobjCond.fecha2 & "') "
        sql = sql & " AND (g.HoraTrans  BETWEEN '" & Format(gobjCond.Hora1, "hh:mm:ss") & "' AND '" & Format(gobjCond.Hora2, "hh:mm:ss") & "') And"
        sql = sql & " (g.codTrans='" & objCond.CodTrans & "') AND"
        sql = sql & " (vw.CodMoneda='" & objCond.CodMoneda & "') AND"
        sql = sql & " (vw.CodForma in (" & objCond.CodForma & ")) AND"
        sql = sql & " (vw.PorCobrar = " & CadenaBool(objCond.PorCobrar, TipoDB) & ") AND"
        sql = sql & " (vw.Valor" & numMoneda & " - vw.VCancelado" & numMoneda & ") >0 "
        sql = sql & " AND   ( (vw.BandProveedor = 0) OR (vw.BandCliente = 1) )"
        sql = sql & " ORDER BY vw.CodProvCli, vw.FechaVenci"
    Set rs = Me.OpenRecordset(sql)
    Set ConsTSPorCobrarPagarTrans = rs
    Set rs = Nothing
    Set objCond = Nothing
End Function


Public Function RecuperaGNComprobantexIdTrandfuente(transid As Long) As GNComprobante
    Dim obj As GNComprobante
    
    Set obj = New GNComprobante
    Set obj.Empresa = Me
  
    On Error Resume Next
    'jeaa 09/05/2005 para igualar la hora con el servidor
    If obj.Empresa.GNOpcion.ObtenerValor("IgualarHora") = "1" Then
        AjustaHoraServidor
    End If
    obj.RecuperarxIdTrandfuente transid
    If Err.Number = 0 Then Set RecuperaGNComprobantexIdTrandfuente = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function


Public Function ConsGNCallNew(ByVal codPC As String, ByVal Nombre As String, ByVal nombreAlt As String, _
                               ByVal Direccion As String, ByVal RUC As String, ByVal CodGrupoDesde As String, ByVal CodGrupoHasta As String, _
                               ByVal numG As Integer, ByVal obs As String, ByVal CodProvincia As String, ByVal CodCanton As String, _
                               ByVal CodVendedor As String, ByVal FechaC As Date) As Variant
    
End Function


Public Function ConsTSPorCobrarPagar_SinEfectivos2PCK( _
                    ByVal PorCobrar As Boolean, _
                    ByVal CodProvcli As String, _
                    ByVal FechaVenci As Date, _
                    ByVal CodForma As String, _
                    ByVal CodMoneda As String, _
                    ByVal CodGrupo1 As String) As Variant
    Dim aux_codpc As String, aux_f1 As Date, aux_f2 As Date
    Dim aux_PorCobrar As Boolean, aux_Cliente As Boolean, aux_Proveedor As Boolean
    Dim aux_CodForma As String, aux_CodMoneda As String, aux_codgrupo As String
    Dim aux_incluircero As Boolean
    
    With gobjMain.objCondicion
        'Conservar valores actuales para que no afecte a otras consultas
        aux_codpc = .CodPC1
        aux_f1 = .fecha1
        aux_f2 = .fecha2
        aux_PorCobrar = .PorCobrar
        aux_Cliente = .Cliente
        aux_Proveedor = .Proveedor
        aux_CodForma = .CodForma
        aux_CodMoneda = .CodMoneda
        aux_codgrupo = .CodGrupo
        aux_incluircero = .IncluirCero
            
        .PorCobrar = PorCobrar
        .Cliente = True
        .Proveedor = True
        .CodPC1 = CodProvcli
        .fecha1 = Me.GNOpcion.FechaInicio
        .fecha2 = FechaVenci
        .CodForma = CodForma
        .CodMoneda = CodMoneda
        .CodGrupo = CodGrupo1
        .IncluirCero = False
        
        
        Set ConsTSPorCobrarPagar_SinEfectivos2PCK = ConsTSPorCobrarPagar42PCK()
        
        'Recuperar valores reservados
        .CodPC1 = aux_codpc
        .fecha1 = aux_f1
        .fecha2 = aux_f2
        .PorCobrar = aux_PorCobrar
        .Cliente = aux_Cliente
        .Proveedor = aux_Proveedor
        .CodForma = aux_CodForma
        .CodMoneda = aux_CodMoneda
        .CodGrupo = aux_codgrupo
        .IncluirCero = aux_incluircero
    End With
End Function



Public Function ConsTSPorCobrarPagar42PCK() As Variant
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim objCond As Condicion
    
    Set objCond = gobjMain.objCondicion
    
    'Si no está especificada la moneda, coge la Moneda predeterminada
    If Len(objCond.CodMoneda) = 0 Then objCond.CodMoneda = MONEDA_PRE
    numMoneda = Me.GNOpcion.IndiceMoneda(objCond.CodMoneda)
    
#If DAOLIB Then
    sql = "SELECT Id, CodProvCli, Nombre, TransID, CodTrans, Trans, CodForma,NumLetra, Doc, "
    Select Case numMoneda
    Case 1:  sql = sql & "Valor1 AS Valor, VCancelado1 AS VCancelado, " & _
                          "Valor1-VCancelado1 AS Saldo, CodMoneda, Cancela, 1 AS Cotizacion, "
    Case 2:  sql = sql & "Valor2 AS Valor, VCancelado2 AS VCancelado, " & _
                          "Valor2-VCancelado2 AS Saldo, CodMoneda, Cancela, Cotizacion2 AS Cotizacion, "
    Case 3:  sql = sql & "Valor3 AS Valor, VCancelado3 AS VCancelado, " & _
                          "Valor3-VCancelado3 AS Saldo, CodMoneda, Cancela, Cotizacion3 AS Cotizacion, "
    Case 4:  sql = sql & "Valor4 AS Valor, VCancelado4 AS VCancelado, " & _
                          "Valor4-VCancelado4 AS Saldo, CodMoneda, Cancela, Cotizacion4 AS Cotizacion, "
    End Select
    sql = sql & "FechaEmision, Plazo, FechaVenci "
    If objCond.PorCobrar Then
        sql = sql & " FROM vwConsPCPorCobrar "
    Else
        sql = sql & " FROM vwConsPCPorPagar "
    End If
    
    'Solo los que tengan saldo >0   (Necesario)
    cond = "(Valor" & objCond.numMoneda & ">VCancelado" & objCond.numMoneda & ")"
    
    'Condición de FechaVenci    (Necesario)             '*** MAKOTO 10/dic/00 Modificado
    cond = cond & " AND (FechaVenci BETWEEN " & _
                    FechaYMD(objCond.fecha1, TipoDB) & " AND " & _
                    FechaYMD(objCond.fecha2, TipoDB) & ")"
    
    'Condición de CodMoneda     (Necesario)
    If Len(cond) > 0 Then cond = cond & " AND "
    cond = cond & "(CodMoneda='" & Me.GNOpcion.CodMoneda(numMoneda) & "')"
    
    'Condición de CodProvCli    (Opcional)
    If Len(objCond.CodPC1) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodProvCli='" & objCond.CodPC1 & "')"
    End If
    
    'Condición de CodForma    (Opcional)
    If Len(objCond.CodForma) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodForma='" & objCond.CodForma & "')"
    End If
    
    'Condición de Cod. Grupo1 de prov/cliente (Opcional)
    If Len(objCond.CodGrupo) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodGrupo1='" & objCond.CodGrupo & "')"
    End If
    
    'Condición de si incluir cliente/proveedor          '*** MAKOTO 10/dic/00
    If Len(cond) > 0 Then cond = cond & " AND "
    cond = cond & "(BandCliente=" & CadenaBool(objCond.Cliente, TipoDB) & _
                    " OR BandProveedor=" & CadenaBool(objCond.Proveedor, TipoDB) & ")"
    
    If Len(cond) > 0 Then sql = sql & " WHERE (" & cond & ")"
    sql = sql & " ORDER BY CodProvCli,FechaVenci"
    
#Else
    sql = "spConsTSPorCobrarPagar_EfectivoSINO2PCK " & numMoneda & ", " & _
                objCond.CodMoneda & "," & _
                CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                CadenaBool(False, TipoDB) & "," & _
                CadenaBool(objCond.Cliente, TipoDB) & "," & _
                CadenaBool(objCond.Proveedor, TipoDB) & "," & _
                FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                objCond.CodPC1 & "','" & _
                objCond.CodPC1 & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodGrupo & "'," & IIf(Me.GNOpcion.Los100DocCobroPago, 1, 0)
#End If
    Set rs = Me.OpenRecordset(sql)
    Set ConsTSPorCobrarPagar42PCK = rs
    Set rs = Nothing
    Set objCond = Nothing
End Function

Public Function ListaPCCantonFlex(BandSoloValida As Boolean) As String
    Dim sql As String, rs As Recordset, cad As String
    'AUC si se nececita filtrar por provincia poner codigo
    sql = "SELECT Descripcion,CodCanton   FROM PCCanton "
    If BandSoloValida Then
        sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY Descripcion "
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then cad = "|" & rs.GetString(adClipString, , vbTab, "|")
    rs.Close
    Set rs = Nothing
    ListaPCCantonFlex = cad
End Function

Public Function ListaAgenciaxpcFlex(ByVal IdProvcli As Long) As Variant
    Dim sql As String, cad As String, rs As Recordset
    sql = "SELECT idagencia,CodAgencia,Direccion,pcc.descripcion as Ciudad FROM pcagencia pca "
   sql = sql & "INNER JOIN pccanton pcc on pcc.idcanton = pca.idciudad"
    sql = sql & " WHERE pca.bandValida = 1 And pca.idprovcli = " & IdProvcli
   sql = sql & " ORDER BY orden"
    Set rs = Me.OpenRecordset(sql)
    'If BandRS Then
     '   Set ListaAgenciaxpc = rs
    'Else
        ListaAgenciaxpcFlex = MiGetRows(rs)
        rs.Close
    'End If
    Set rs = Nothing
End Function
Public Function RecuperaPCAgencia(key As Variant) As PCAgencia
    Dim obj As PCAgencia
    Set obj = New PCAgencia
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaPCAgencia = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function ConsGNCallNew_1(ByVal codPC As String, ByVal Nombre As String, ByVal nombreAlt As String, _
                               ByVal Direccion As String, ByVal RUC As String, ByVal CodGrupoDesde As String, ByVal CodGrupoHasta As String, _
                               ByVal numG As Integer, ByVal obs As String, ByVal CodProvincia As String, ByVal CodCanton As String, _
                               ByVal CodVendedor As String, ByVal FechaC As Date, ByVal FechaVdesde As Date, ByVal FechaVHasta As Date, BandGestion As Boolean) As Variant
    Dim sql As String, rs As Recordset
    Dim numMoneda As Integer
    Dim Tasa As Currency
    Dim diasGracia As Integer
    Dim NumDec As Integer
    Dim NumGrupo As Integer
    NumGrupo = 1
    If Len(Me.GNOpcion.ObtenerValor("TasaAnual")) > 0 Then
        Tasa = Me.GNOpcion.ObtenerValor("TasaAnual") / 100
    Else
        Tasa = 0
    End If
    If Len(Me.GNOpcion.ObtenerValor("DiasGraciaMora")) > 0 Then
        diasGracia = Me.GNOpcion.ObtenerValor("DiasGraciaMora")
    Else
        diasGracia = 0
    End If
    NumDec = IIf(Len(Me.GNOpcion.ObtenerValor("NumDecimales")) > 0, Me.GNOpcion.ObtenerValor("NumDecimales"), 2)
        numMoneda = Me.GNOpcion.IndiceMoneda("USD")
        sql = "spConsGNCall " & numMoneda & ",'" & _
        "USD" & "','" & _
        FechaC & "','" & _
        Me.GNOpcion.ObtenerValor("FornmaCobroOtrasCuotas") & "','" & _
        Me.GNOpcion.ObtenerValor("FormaCobroCuotaInt") & "'," & _
        Tasa & "," & _
        diasGracia & "," & _
        NumDec & "," & _
        numG & ",'" & _
        codPC & "%','" & _
        Nombre & "%','" & _
        nombreAlt & "%','" & _
        Direccion & "%','" & _
        RUC & "%','" & _
        CodGrupoDesde & "','" & _
        CodGrupoHasta & "','" & _
        obs & "%','" & _
        CodProvincia & "%','" & _
        CodCanton & "%','" & _
        CodVendedor & "%'"
        If Me.GNOpcion.ObtenerValor("AplicaCalculoMensual") = "1" Then
            sql = sql & ",0, "
        Else
            sql = sql & ",1, "
        End If
            sql = sql & "'" & FechaVdesde & "',"
            sql = sql & "'" & FechaVHasta & "',"
            sql = sql & IIf(BandGestion, 1, 0)
        Set rs = Me.OpenRecordset(sql)
    Set ConsGNCallNew_1 = rs
    Set rs = Nothing
End Function
Public Function CreaAgencia() As PCAgencia
    Dim obj As PCAgencia
    Set obj = New PCAgencia
    Set obj.Empresa = Me
    obj.BandValida = True
    Set CreaAgencia = obj
    Set obj = Nothing
End Function
Public Function ListaPCAgencia(IdProvcli As Long) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT pca.idAgencia,pcp.Descripcion as provincia,pcc.Descripcion as Ciudad,"
  '  If Len(Me.GNOpcion.ObtenerValor("NoMostrar_AgeCodigo")) > 0 Then
   '     If Me.GNOpcion.ObtenerValor("NoMostrar_AgeCodigo") = 0 Then
           sql = sql & "pca.CodAgencia, "
    '    End If
    'End If
   sql = sql & " pca.Descripcion,pca.direccion,pca.Telefono,pca.Contacto,pca.bandValida FROM pcAgencia pca"
    sql = sql & " Left Join PCprovincia pcp on pcp.idProvincia=pca.idProvincia"
    sql = sql & " Left Join PCCanton pcc on pcc.idcanton=pca.idciudad"
   sql = sql & " Inner Join PCProvCli pc on pc.idprovcli = pca.idprovcli"
    sql = sql & " Where pca.idprovcli =  " & IdProvcli
    sql = sql & " ORDER BY orden"
    Set rs = Me.OpenRecordset(sql)
'    If BandRS Then
        Set ListaPCAgencia = rs
'    Else
'        ListaPCAgencia = MiGetRows(rs)
'        rs.Close
'    End If
    Set rs = Nothing
End Function

Public Function RecuperaPCSolCreditoxTransFuente(Id As Long, bandCli As Boolean) As PCSolCreProvCli
    Dim obj As PCSolCreProvCli
    Set obj = New PCSolCreProvCli
    Set obj.Empresa = Me
    On Error Resume Next
    obj.RecuperarxTransFuente Id, bandCli
    If Err.Number = 0 Then Set RecuperaPCSolCreditoxTransFuente = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function ConsPRBalanceLinealIngresosEgresos2014(bandBalance As Boolean, ByVal bandEgreso As Boolean) As Variant
    Dim sql As String, cond As String, rs As Recordset
    Dim v As Variant, v2() As Variant, i As Long, j As Long
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsCTBalance")
    qdef.Parameters("FechaDesde") = IIf(bandBalance, Me.GNOpcion.FechaInicio, gobjCond.fecha1)
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodCuenta1") = "0"
    qdef.Parameters("CodCuenta2") = String(20, "9")
    qdef.Parameters("CodSucursal") = gobjCond.Sucursal ' ********* jeaa
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
    If Not rs.EOF Then
        rs.MoveLast
        rs.MoveFirst
        v = rs.GetRows(rs.RecordCount)
    End If
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    If bandEgreso Then
        sql = "spConsPRBalanceLinealEgreso2014 "
    Else
        sql = " spConsPRBalanceLinealIngreso2014 "
    End If
    sql = sql & gobjCond.numMoneda & ",'0','" & _
                        String(20, "9") & "'," & _
                        FechaYMD(IIf(bandBalance, Me.GNOpcion.FechaInicio, gobjCond.fecha1), TipoDB) & "," & _
                        FechaYMD(gobjCond.fecha2, TipoDB) & ",'" & gobjCond.Sucursal & "'," & _
                        FechaYMD(IIf(Len(Me.GNOpcion.ObtenerValor("FechaReforma1")) > 0, Me.GNOpcion.ObtenerValor("FechaReforma1"), Date), TipoDB) & "," & _
                        FechaYMD(IIf(Len(Me.GNOpcion.ObtenerValor("FechaReforma2")) > 0, Me.GNOpcion.ObtenerValor("FechaReforma2"), Date), TipoDB) & "," & _
                        FechaYMD(IIf(Len(Me.GNOpcion.ObtenerValor("FechaReforma3")) > 0, Me.GNOpcion.ObtenerValor("FechaReforma3"), Date), TipoDB) & "," & _
                        FechaYMD(IIf(Len(Me.GNOpcion.ObtenerValor("FechaReforma4")) > 0, Me.GNOpcion.ObtenerValor("FechaReforma4"), Date), TipoDB)
                        
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    
    Set ConsPRBalanceLinealIngresosEgresos2014 = rs
    
#End If
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Balance Presupuesto ", "PR"
End Function


Public Function CalculaValorDetalleCobrosRetencionClientes(ByVal transid As Long) As Currency
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    
    sql = "  select ISNULL(Sum(Valor),0) AS Valor "
    sql = sql & "from TSDetalleIngresoRT "
    sql = sql & " Where Transid = " & transid
    
    Set rs = Me.OpenRecordset(sql)
    
    If rs.RecordCount > 0 Then
        CalculaValorDetalleCobrosRetencionClientes = rs.Fields("Valor")
    Else
        CalculaValorDetalleCobrosRetencionClientes = 0
    End If
    Set rs = Nothing
End Function

Public Function ListaRAsistencia(CodProvcli As String, bandOcupada As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    Dim Intervalo As Integer
    sql = " select idjornada,  convert(varchar(8),hora,108) as hora, fecha "
   sql = sql & " from RAsistencia ras"
    sql = sql & " inner join pcprovcli pc"
    sql = sql & " on ras.idproveedor=pc.idprovcli"
    sql = sql & " where codprovcli='" & CodProvcli & "'"
    If bandOcupada Then sql = sql & " AND BandOcupada=" & CadenaBool(False, TipoDB)
    sql = sql & " ORDER BY idjornada "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaRAsistencia = rs
    Else
        ListaRAsistencia = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


Public Function ListaGnComprobanteFlexGrid(ByVal CodTrans As String) As String
    Dim sql As String, cad As String, rs As Recordset
    
    sql = "SELECT codtrans  + '-' + convert(varchar,numtrans) as trans FROM gncomprobante "
    sql = sql & " WHERE estado<>3 and codtrans ='" & CodTrans & "'"
    sql = sql & " ORDER BY codtrans, numtrans "
    Set rs = Me.OpenRecordset(sql)

    'Pero por ahora uso lo siguiente para controlar cuentas de total y de movimiento
#If DAOLIB Then
    cad = "|" & GetStringDAO(rs, 21 + (20 + 80 + 2))        'Código+'*'=21, Space+NombreCuenta+'[]'=20+80+2
#Else
    If Not rs.EOF Then cad = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    
    rs.Close
    Set rs = Nothing
    
    ListaGnComprobanteFlexGrid = cad
End Function

Public Function RecuperaPCProvClixCodRelojProv(key As Variant) As PCProvCli
    Dim obj As PCProvCli
    Set obj = New PCProvCli
    Set obj.Empresa = Me
    On Error Resume Next
    obj.RecuperarxCodRelojProv key
    If Err.Number = 0 Then Set RecuperaPCProvClixCodRelojProv = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function ConsKardexDocEntregados() As Variant
    Dim sql As String, cond As String, rs As Recordset
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsIVKardexPorFecha")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("prmCodBodega") = gobjCond.CodBodega1
    qdef.Parameters("CodItem1") = IIf(Len(gobjCond.CodItem1) = 0, "!", gobjCond.CodItem1)
    qdef.Parameters("CodItem2") = IIf(Len(gobjCond.CodItem2) = 0, String$(20, "z"), gobjCond.CodItem2)
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    gobjCond.CodTrans = ""
    gobjCond.CodBanco1 = ""
    gobjCond.CodBanco2 = ""
    sql = "spConsKardexDocEntregados" & _
                "'" & _
                gobjCond.CodTrans & "','" & _
                gobjCond.CodBanco1 & "','" & _
                gobjCond.CodBanco2 & "','" & _
                gobjCond.CodPC1 & "','" & _
                gobjCond.CodPC2 & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB)
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    Set ConsKardexDocEntregados = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Kardex Doc Entregados" & gobjCond.fecha1 & "-" & gobjCond.fecha2, "IV"
End Function


Public Function ListaEmpleadoFlexGrid() As String
    Dim s As String, sql As String
    Dim rs As Recordset
    
    sql = "SELECT CodProvcli,Nombre FROM Empleado "
    sql = sql & " Inner join personal on personal.idempleado = empleado.idprovcli"
    sql = sql & " WHERE BandActivo=" & CadenaBool(True, TipoDB)
    sql = sql & " AND BandGestion=" & CadenaBool(False, TipoDB)
    sql = sql & " ORDER BY CodProvcli"

    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 10 + 40)         '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    ListaEmpleadoFlexGrid = s
    rs.Close
    Set rs = Nothing
End Function

Public Function ConsGNCallNew_2(ByVal codPC As String, ByVal Nombre As String, ByVal nombreAlt As String, _
                               ByVal Direccion As String, ByVal RUC As String, ByVal CodGrupoDesde As String, ByVal CodGrupoHasta As String, _
                               ByVal numG As Integer, ByVal obs As String, ByVal CodProvincia As String, ByVal CodCanton As String, _
                               ByVal CodVendedor As String, ByVal FechaC As Date, ByVal FechaVdesde As Date, ByVal FechaVHasta As Date, BandGestion As Boolean, codemp As String) As Variant
                               
    
End Function


Public Function ConsIVDetalleItemISO(ByVal tiket As Long) As Recordset
    Dim sql As String, cond As String, s As String, rs As Recordset, i As Integer, rsItem As Recordset
    Dim numReg As Long, CantItem As Integer
    'Condición de CodTrans
        sql = "select"
        sql = sql & " gning.numdocref ,"
        sql = sql & " ivk.orden, iviso.id as tiket,"
        sql = sql & " ivmar.descripcion as marca,  ivtam.codinventario as tamanio,"
        sql = sql & " iviso.NumSerie, DisenioOri,ivpro.codinventario as trabajo,"
        sql = sql & " (gning.CodTrans+' '+CONVERT(VARCHAR,gning.NumTrans)) AS TransIng, gning.fechatrans,"
        sql = sql & " pc.codprovcli, pc.NombreAlterno, fc.codvendedor, pcg.NombreAlterno "
       sql = sql & " from IVInventarioDetalleISO iviso"
        sql = sql & " inner join ivkardex ivk"
        sql = sql & " inner join ivinventario ivtam on ivk.Idinventario=ivtam.idinventario"
        sql = sql & " on iviso.idkardex=ivk.id"
        sql = sql & " left join ivinventario ivmar on iviso.IdMarca=ivmar.idinventario"
        sql = sql & " left join ivinventario ivtra on iviso.IdTrabajo=ivtra.idinventario"
        sql = sql & " left join ivinventario ivpro on iviso.IdProcesado=ivpro.idinventario"
       sql = sql & " left join gncomprobante gning"
        sql = sql & " inner join pcprovcli pc on gning.idclienteref= pc.idprovcli"
        sql = sql & " inner join fcVendedor fc on gning.idvendedor= fc.idvendedor"
        sql = sql & " left join pcprovcli pcg on gning.idgaranteref= pcg.idprovcli"
        sql = sql & " on iviso.transid = gning.transid"
        sql = sql & " WHERE iviso.id = " & tiket
        sql = sql & "  ORDER BY iviso.id"
   Set rs = Me.OpenRecordset(sql)
    Set ConsIVDetalleItemISO = rs
    Set rs = Nothing
        Me.GrabaGNLogAccion "CONSULTA", "Consulta Detalle Item ISO " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function

Public Function RSPCAgenciaxPC(key As Long) As Recordset
Dim sql As String
Dim rs As Recordset
    sql = "SELECT PCAgencia.*,pcc.codcanton as ciudad FROM PCAgencia Inner Join PCCanton pcc on pcc.idcanton = pcagencia.idciudad "
    sql = sql & " Where IdProvcli = " & key
    sql = sql & " And PCAgencia.BandValida =1"
    Set rs = Me.OpenRecordset(sql)
    Set RSPCAgenciaxPC = rs
    Set rs = Nothing
End Function

Public Function CreaPCActConyuge() As PCActConyuge
    Dim obj As PCActConyuge
    Set obj = New PCActConyuge
    Set obj.Empresa = Me
    Set CreaPCActConyuge = obj
    Set obj = Nothing
End Function

Public Function RecuperarPCActConyuge(ByVal IdProvcli As Long) As PCActConyuge
    Dim obj As PCActConyuge
    Set obj = New PCActConyuge
    Set obj.Empresa = Me
    If IdProvcli > 0 Then obj.Recuperar IdProvcli
    If obj.IdProvcli = 0 Then
        Set obj = Nothing
    End If
    Set RecuperarPCActConyuge = obj
    Set obj = Nothing
End Function
Public Function RecuperaSolCliGar(key As Variant) As PCSolCreProvCli
    Dim obj As PCSolCreProvCli
    Set obj = New PCSolCreProvCli
    Set obj.Empresa = Me
    On Error Resume Next
    obj.RecuperarCliGar key
    If Err.Number = 0 Then Set RecuperaSolCliGar = obj
   Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function
    Public Function ListaSolicitudCreditoCliGar( _
                                       BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT pcs.idTransFuente, gc.CodTrans,gc.NumTrans,"
    sql = sql & " pc.CodProvCli, pc.Nombre,"
    sql = sql & " pcs.FechaSolicitud,"
    sql = sql & " pcs.MontoCredito, pcs.BandAprobado,pcs.codUsuarioAutoriza,  "
    sql = sql & " pc2.CodProvCli as codGarante,pc2.nombre as NomGarante "
    sql = sql & " FROM PCProvCli pc "
    sql = sql & " Inner join PCSolCreProvCli pcs  "
    sql = sql & " Left join PCProvCli pc2 on pc2.idprovcli = pcs.idgar  "
    sql = sql & " on pc.Idprovcli = pcs.IdProvcli"
    sql = sql & " left join GnComprobante gc on pcs.IdTransFuente = gc.Transid "
    sql = sql & " ORDER BY pcs.idTransFuente DESC"
   Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaSolicitudCreditoCliGar = rs
    Else
        ListaSolicitudCreditoCliGar = MiGetRows(rs)
       rs.Close
   End If
    Set rs = Nothing
End Function

'AUC
Public Function ObtenerCodGarante_1(ByVal transid As Long) As String
    Dim sql As String, rs As Recordset
    sql = "SELECT pc.CodProvcli From pcprovcli pc inner join PCSolCreProvCli pcs "
    sql = sql & " ON pcs.idgar=pc.idprovcli WHERE  idtransfuente =  " & transid
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        If Not IsNull(rs.Fields("CodProvcli")) Then ObtenerCodGarante_1 = rs.Fields("CodProvcli")
    End If
    rs.Close
    Set rs = Nothing
End Function



Public Function CreaGNTransporte() As GNTransporte
    Dim obj As GNTransporte
    Set obj = New GNTransporte
    Set obj.Empresa = Me
    Set CreaGNTransporte = obj
    Set obj = Nothing
End Function

Public Function RecuperaGNTransporte(key As Variant) As GNTransporte
    Dim obj As GNTransporte
    Set obj = New GNTransporte
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaGNTransporte = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function


Public Function ListaGNTransporte(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    

    sql = "SELECT CodTransporte, Descripcion FROM GNTransporte "

    If BandSoloValida Then
        sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY CodTransporte"

    Set rs = Me.OpenRecordset(sql)
    
    If BandRS Then
        Set ListaGNTransporte = rs
    Else
        ListaGNTransporte = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


Public Function ConsIVTransImpresionEtiquetasISOxProduccion(ByVal CodTrans As String, ByVal NumTrans As Long) As Recordset
    Dim sql As String, cond As String, s As String, rs As Recordset, i As Integer, rsItem As Recordset
    Dim numReg As Long, CantItem As Integer
    'Condición de CodTrans
    If Len(CodTrans) > 0 Then
        cond = cond & " and gnpro.codtrans='" & CodTrans & "' "
    End If
    If NumTrans > 0 Then
        cond = cond & " and gnpro.numtrans='" & NumTrans & "' "
    End If
        
        sql = "select"
        sql = sql & " gning.numdocref ,"
        sql = sql & " ivk.orden, iviso.id as tiket,"
        sql = sql & " ivmar.codinventario as marca,  ivtam.codinventario as tamanio,"
        sql = sql & " iviso.NumSerie, DisenioOri,ivtra.codinventario as trabajo,"
        sql = sql & " (gning.CodTrans+' '+CONVERT(VARCHAR,gning.NumTrans)) AS TransIng, gning.fechatrans,"
        sql = sql & " pc.codprovcli, pc.NombreAlterno, fc.codvendedor, pcg.NombreAlterno "
       sql = sql & " from IVInventarioDetalleISO iviso"
        sql = sql & " inner join ivkardex ivk"
        sql = sql & " inner join ivinventario ivtam on ivk.Idinventario=ivtam.idinventario"
        sql = sql & " on iviso.idkardex=ivk.id"
        sql = sql & " left join ivinventario ivmar on iviso.IdMarca=ivmar.idinventario"
        sql = sql & " left join ivinventario ivtra on iviso.IdTrabajo=ivtra.idinventario"
       sql = sql & " left join gncomprobante gning"
        sql = sql & " inner join pcprovcli pc on gning.idclienteref= pc.idprovcli"
        sql = sql & " inner join fcVendedor fc on gning.idvendedor= fc.idvendedor"
        sql = sql & " left join pcprovcli pcg on gning.idgaranteref= pcg.idprovcli"
        sql = sql & " on iviso.transid = gning.transid"
       sql = sql & " left join gncomprobante gnpro"
       sql = sql & " on gnpro.transid = iviso.transidproceso"
        
        
        sql = sql & " WHERE gning.estado <>3 and idmotivopro=0  " & cond
        sql = sql & "  ORDER BY pc.NombreAlterno, ivtam.codinventario "
   Set rs = Me.OpenRecordset(sql)
    Set ConsIVTransImpresionEtiquetasISOxProduccion = rs
    Set rs = Nothing
        Me.GrabaGNLogAccion "CONSULTA", "Consulta Impresion Etiqueta x Lote " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function

Public Function ConsIVTransImpresionEtiquetasISOxProduccionFecha(ByVal CodTrans As String, ByVal NumTrans As Long, fechadesde As Date, fechaHasta As Date, motivo As Integer) As Recordset
    Dim sql As String, cond As String, s As String, rs As Recordset, i As Integer, rsItem As Recordset
    Dim numReg As Long, CantItem As Integer
    'Condición de CodTrans
    If Len(CodTrans) > 0 Then
        cond = cond & " and gnpro.codtrans='" & CodTrans & "' "
    End If
    If NumTrans > 0 Then
        cond = cond & " and gnpro.numtrans=" & NumTrans
    End If
    
    cond = cond & " and motivo= " & motivo
        
    If Len(CodTrans) > 0 Then
        cond = cond & " and gnpro.fechatrans between " & FechaYMD(fechadesde, gobjMain.TipoDB) & " and " & FechaYMD(fechaHasta, gobjMain.TipoDB)

    End If
        
        sql = "select"
        sql = sql & " gning.numdocref ,"
        sql = sql & " ivk.orden, iviso.id as tiket,"
        sql = sql & " ivmar.codinventario as marca,  ivtam.codinventario as tamanio,"
        sql = sql & " iviso.NumSerie, DisenioOri,ivtra.codinventario as trabajo,"
        sql = sql & " (gning.CodTrans+' '+CONVERT(VARCHAR,gning.NumTrans)) AS TransIng, gning.fechatrans,"
        sql = sql & " pc.codprovcli, pc.NombreAlterno, fc.codvendedor, pcg.NombreAlterno, "
        sql = sql & " case motivo when 0 then 'Rencauche' when 1 then 'Compra' when 2 then 'Devolucion' when 3 then 'Reparacion' end as motivo"
        sql = sql & " from IVInventarioDetalleISO iviso"
        sql = sql & " inner join ivkardex ivk"
        sql = sql & " inner join ivinventario ivtam on ivk.Idinventario=ivtam.idinventario"
        sql = sql & " on iviso.idkardex=ivk.id"
        sql = sql & " left join ivinventario ivmar on iviso.IdMarca=ivmar.idinventario"
        sql = sql & " left join ivinventario ivtra on iviso.IdTrabajo=ivtra.idinventario"
       sql = sql & " left join gncomprobante gning"
        sql = sql & " inner join pcprovcli pc on gning.idclienteref= pc.idprovcli"
        sql = sql & " inner join fcVendedor fc on gning.idvendedor= fc.idvendedor"
        sql = sql & " left join pcprovcli pcg on gning.idgaranteref= pcg.idprovcli"
        sql = sql & " on iviso.transid = gning.transid"
       sql = sql & " left join gncomprobante gnpro"
       sql = sql & " on gnpro.transid = iviso.transidproceso"
        
        
        sql = sql & " WHERE gning.estado <>3  and idmotivopro=0 " & cond
        sql = sql & "  ORDER BY pc.NombreAlterno, ivtam.codinventario "
   Set rs = Me.OpenRecordset(sql)
    Set ConsIVTransImpresionEtiquetasISOxProduccionFecha = rs
    Set rs = Nothing
        Me.GrabaGNLogAccion "CONSULTA", "Consulta Impresion Etiqueta x Lote " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function

Public Function ListaPCProvCli2(BandProveedor As Boolean, _
                               BandCliente As Boolean, _
                               BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
         '------------------- cambiado AUC  02/09/20005
             sql = "SELECT pc.CodProvCli, pc.Nombre, pc.nombreAlterno, pc.direccion1, g1.CodGrupo1, g2.CodGrupo2, g3.CodGrupo3,g4.codgrupo4,pc.observacion, pc.estado  "
             sql = sql & " FROM PCGrupo4 g4 RIGHT JOIN( PCGrupo3 g3 RIGHT JOIN (PCGrupo2 g2 RIGHT JOIN (PCGrupo1 g1 RIGHT JOIN PCProvCli pc " & _
                          " ON g1.IdGrupo1 = pc.IdGrupo1) " & _
                    " ON g2.IdGrupo2 = pc.IdGrupo2) " & _
                " ON g3.IdGrupo3 = pc.IdGrupo3) " & _
               " ON g4.idgrupo4 = pc.idgrupo4 "
          '------------------
    If Not (BandProveedor And BandCliente) Then
        If BandProveedor Then
            sql = sql & " WHERE pc.BandProveedor=" & CadenaBool(True, TipoDB)
        Else
            If gobjMain.GrupoActual.PermisoActual.ConsRepVen Then
                sql = sql & " INNER JOIN FCVendedor v on v.idvendedor = pc.idvendedor"
            End If
            sql = sql & " WHERE pc.BandCliente=" & CadenaBool(True, TipoDB)
            If gobjMain.GrupoActual.PermisoActual.ConsRepVen Then
                sql = sql & " AND v.codvendedor = '" & gobjMain.UsuarioActual.codUsuario & "' "
            End If
        End If
        sql = sql & "and Estado <> 2 "
    End If
    sql = sql & " ORDER BY pc.Nombre, pc.codprovcli "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCProvCli2 = rs
    Else
        ListaPCProvCli2 = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing

End Function

Public Function ConsVTConciliacioCarteraOrden() As Variant
    Dim sql As String, rs As Recordset
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    sql = "spConsTSPorCobrarPagarVendedorConciliaOrden " & _
                gobjCond.numMoneda & ",'USD',1,'" & _
                gobjCond.Usuario1 & "','" & _
                gobjCond.CodBanco1 & "'"
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    ConsVTConciliacioCarteraOrden = MiGetRows(rs)
    Set rs = Nothing
End Function


Public Function GlobalCambiaCadenaFormatoUTF8(ByVal cad As String, Ruta As String) As String

    Dim objStream   As ADODB.Stream
    Set objStream = New ADODB.Stream
        objStream.Open
        objStream.Charset = "UTF-8"
        objStream.WriteText cad
        'ruta = "c:\0309201401019010353600120010010000390830000000016.xml"
        
        If Dir(Ruta, vbArchive) <> "" Then
            MsgBox "El archivo ya esta generado, pero todavía no es AUTORIZADO por SRI "
        Else
            objStream.SaveToFile Ruta
            objStream.Close
        End If
        Set objStream = Nothing
        
        


End Function



Public Function ConsVTConciliacioCarteraOrden_new(ByVal codPC As String, ByVal Nombre As String, ByVal Direccion As String, ByVal RUC As String, ByVal CodGrupoDesde As String, _
    ByVal CodGrupoHasta As String, ByVal numG As Integer, ByVal CodProvincia As String, ByVal CodCanton As String, ByVal CodVendedor As String, _
    ByVal codemp1 As String, ByVal codemp2 As String) As Variant
   Dim sql As String, rs As Recordset
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    sql = "spConsTSPorCobrarPagarVendedorConciliaOrden " & _
                gobjCond.numMoneda & ",'" & _
                codPC & "%','" & _
                Nombre & "%','" & _
                Direccion & "%','" & _
                RUC & "%','" & _
                CodGrupoDesde & "%','" & _
                CodGrupoHasta & "%'," & _
                numG & ",'" & _
                CodProvincia & "%','" & _
                CodCanton & "%','" & _
                CodVendedor & "%','" & _
                codemp1 & "','" & _
                codemp2 & "'"
   rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    ConsVTConciliacioCarteraOrden_new = MiGetRows(rs)
    Set rs = Nothing
End Function
Public Function ConsGNCallNew_3(ByVal codPC As String, ByVal Nombre As String, ByVal nombreAlt As String, _
                               ByVal Direccion As String, ByVal RUC As String, ByVal CodGrupoDesde As String, ByVal CodGrupoHasta As String, _
                               ByVal numG As Integer, ByVal obs As String, ByVal CodProvincia As String, ByVal CodCanton As String, _
                               ByVal CodVendedor As String, ByVal FechaC As Date, ByVal FechaVdesde As Date, ByVal FechaVHasta As Date, BandGestion As Boolean, codemp As String, codemp1 As String) As Variant
'    Dim sql As String, rs As Recordset
'    Dim numMoneda As Integer
'    Dim Tasa As Currency
'    Dim diasGracia As Integer
'    Dim NumDec As Integer
'    Dim NumGrupo As Integer
'    NumGrupo = 1
'    If Len(Me.GNOpcion.ObtenerValor("TasaMoraAnual")) > 0 Then
'        Tasa = Me.GNOpcion.ObtenerValor("TasaMoraAnual") / 100
'    Else
'        Tasa = 0
'    End If
'    If Len(Me.GNOpcion.ObtenerValor("DiasGraciaMora")) > 0 Then
'        diasGracia = Me.GNOpcion.ObtenerValor("DiasGraciaMora")
'    Else
'        diasGracia = 0
'    End If
'    NumDec = IIf(Len(Me.GNOpcion.ObtenerValor("NumDecimales")) > 0, Me.GNOpcion.ObtenerValor("NumDecimales"), 2)
'        numMoneda = Me.GNOpcion.IndiceMoneda("USD")
'        sql = "spConsGNCall " & numMoneda & ",'" & _
'        "USD" & "','" & _
'        FechaC & "','" & _
'        Me.GNOpcion.ObtenerValor("FornmaCobroOtrasCuotas") & "','" & _
'        Me.GNOpcion.ObtenerValor("FormaCobroCuotaInt") & "'," & _
'        Tasa & "," & _
'        diasGracia & "," & _
'        NumDec & "," & _
'        numG & ",'" & _
'        codPC & "%','" & _
'        Nombre & "%','" & _
'        nombreAlt & "%','" & _
'        Direccion & "%','" & _
'        RUC & "%','" & _
'        CodGrupoDesde & "','" & _
'        CodGrupoHasta & "','" & _
'        obs & "%','" & _
'        CodProvincia & "%','" & _
'        CodCanton & "%','" & _
'        CodVendedor & "%'"
'        If Me.GNOpcion.ObtenerValor("AplicaCalculoMensual") = "1" Then
'            sql = sql & ",0, "
'        Else
'            sql = sql & ",1, "
'        End If
'            sql = sql & "'" & FechaVdesde & "',"
'            sql = sql & "'" & FechaVHasta & "',"
'            sql = sql & "'" & codemp & "',"
'            sql = sql & "'" & codemp1 & "',"
'            sql = sql & IIf(BandGestion, 1, 0)
'        Set rs = Me.OpenRecordset(sql)
'    Set ConsGNCallNew_3 = rs
'    Set rs = Nothing
End Function


Public Function ConsIVTransImpresionDatosISO(ByVal Ticket As Long) As Recordset
    Dim sql As String, cond As String, s As String, rs As Recordset, i As Integer, rsItem As Recordset
    Dim numReg As Long, CantItem As Integer
    'Condición de CodTrans
        cond = " iviso.id=" & Ticket

        sql = "select"
        sql = sql & " gning.numdocref as numIngreso,"
        sql = sql & " ivk.orden, iviso.id as tiket,"
        sql = sql & " ivmar.codinventario as marca,  ivtam.codinventario as tamanio,"
        sql = sql & " iviso.NumSerie, DisenioOri,ivtra.codinventario as trabajo, ivpro.codinventario as procesado, "
        sql = sql & " (gning.CodTrans+' '+CONVERT(VARCHAR,gning.NumTrans)) AS TransIng, gning.fechatrans,"
        sql = sql & " pc.codprovcli, pc.NombreAlterno, fc.codvendedor, pcg.NombreAlterno, bandsingarantia, band2renmas "
       sql = sql & " from IVInventarioDetalleISO iviso"
        sql = sql & " inner join ivkardex ivk"
        sql = sql & " inner join ivinventario ivtam on ivk.Idinventario=ivtam.idinventario"
        sql = sql & " on iviso.idkardex=ivk.id"
        sql = sql & " left join ivinventario ivmar on iviso.IdMarca=ivmar.idinventario"
        sql = sql & " left join ivinventario ivtra on iviso.IdTrabajo=ivtra.idinventario"
        sql = sql & " left join ivinventario ivpro on iviso.IdProcesado=ivpro.idinventario"
       sql = sql & " left join gncomprobante gning"
        sql = sql & " inner join pcprovcli pc on gning.idclienteref= pc.idprovcli"
        sql = sql & " left join fcVendedor fc on gning.idvendedor= fc.idvendedor"
        sql = sql & " left join pcprovcli pcg on gning.idgaranteref= pcg.idprovcli"
        sql = sql & " on iviso.transid = gning.transid"
        sql = sql & " WHERE gning.estado <>3 and " & cond
        sql = sql & "  ORDER BY iviso.id"
        Set rs = Me.OpenRecordset(sql)
        Set ConsIVTransImpresionDatosISO = rs
        Set rs = Nothing
        Me.GrabaGNLogAccion "CONSULTA", "Consulta Impresion Etiqueta x Lote " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function

Public Function ConsGNCallNew_4(ByVal codPC As String, ByVal Nombre As String, ByVal nombreAlt As String, _
                               ByVal Direccion As String, ByVal RUC As String, ByVal CodGrupoDesde As String, ByVal CodGrupoHasta As String, _
                               ByVal numG As Integer, ByVal obs As String, ByVal CodProvincia As String, ByVal CodCanton As String, ByVal CodParroquia As String, _
                               ByVal CodVendedor As String, ByVal FechaC As Date, ByVal FechaVdesde As Date, ByVal FechaVHasta As Date, BandGestion As Boolean, codemp As String, codemp1 As String) As Variant
   Dim sql As String, rs As Recordset
    Dim numMoneda As Integer
    Dim Tasa As Currency
    Dim diasGracia As Integer
    Dim NumDec As Integer
    Dim NumGrupo As Integer
    NumGrupo = 1
    If Len(Me.GNOpcion.ObtenerValor("TasaMoraAnual")) > 0 Then
        Tasa = Me.GNOpcion.ObtenerValor("TasaMoraAnual") / 100
    Else
        Tasa = 0
    End If
    If Len(Me.GNOpcion.ObtenerValor("DiasGraciaMora")) > 0 Then
        diasGracia = Me.GNOpcion.ObtenerValor("DiasGraciaMora")
    Else
        diasGracia = 0
    End If
    NumDec = IIf(Len(Me.GNOpcion.ObtenerValor("NumDecimales")) > 0, Me.GNOpcion.ObtenerValor("NumDecimales"), 2)
        numMoneda = Me.GNOpcion.IndiceMoneda("USD")
        sql = "spConsGNCall " & numMoneda & ",'" & _
        "USD" & "','" & _
        FechaC & "','" & _
        Me.GNOpcion.ObtenerValor("FornmaCobroOtrasCuotas") & "','" & _
        Me.GNOpcion.ObtenerValor("FormaCobroCuotaInt") & "'," & _
        Tasa & "," & _
        diasGracia & "," & _
        NumDec & "," & _
        numG & ",'" & _
        codPC & "%','" & _
        Nombre & "%','" & _
        nombreAlt & "%','" & _
        Direccion & "%','" & _
        RUC & "%','" & _
        CodGrupoDesde & "','" & _
        CodGrupoHasta & "','" & _
        obs & "%','" & _
        CodProvincia & "%','" & _
        CodCanton & "%','" & _
        CodParroquia & "%','" & _
       CodVendedor & "%'"
        If Me.GNOpcion.ObtenerValor("AplicaCalculoMensual") = "1" Then
            sql = sql & ",0, "
        Else
            sql = sql & ",1, "
        End If
            sql = sql & "'" & FechaVdesde & "',"
            sql = sql & "'" & FechaVHasta & "',"
            sql = sql & "'" & codemp & "',"
            sql = sql & "'" & codemp1 & "',"
            sql = sql & IIf(BandGestion, 1, 0)
        Set rs = Me.OpenRecordset(sql)
    Set ConsGNCallNew_4 = rs
   Set rs = Nothing
End Function

Public Function ConsVTConciliacioCarteraOrden_new1(ByVal codPC As String, ByVal Nombre As String, ByVal Direccion As String, ByVal RUC As String, ByVal CodGrupoDesde As String, _
    ByVal CodGrupoHasta As String, ByVal numG As Integer, ByVal CodProvincia As String, ByVal CodCanton As String, ByVal CodParroquia As String, ByVal CodVendedor As String, _
    ByVal codemp1 As String, ByVal codemp2 As String) As Variant
    Dim sql As String, rs As Recordset
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    sql = "spConsTSPorCobrarPagarVendedorConciliaOrden " & _
                gobjCond.numMoneda & ",'" & _
                codPC & "%','" & _
                Nombre & "%','" & _
                Direccion & "%','" & _
                RUC & "%','" & _
                CodGrupoDesde & "%','" & _
                CodGrupoHasta & "%'," & _
                numG & ",'" & _
                CodProvincia & "%','" & _
                CodCanton & "%','" & _
                CodParroquia & "%','" & _
                CodVendedor & "%','" & _
                codemp1 & "','" & _
                codemp2 & "'"
   rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    ConsVTConciliacioCarteraOrden_new1 = MiGetRows(rs)
    Set rs = Nothing
End Function


Public Function ListaIVSerie() As Variant
    Dim sql As String, rs As Recordset
    
    sql = "SELECT Campo1 FROM IVSerie ORDER BY Campo1"
    
    Set rs = Me.OpenRecordset(sql)
    ListaIVSerie = MiGetRows(rs)
    rs.Close
    Set rs = Nothing
End Function

Public Function ListaIVInventario3New(CodInventario As String, _
                                  CodAlterno As String, _
                                  Descripcion As String, _
                                  CodBodega As String, _
                                  CodGrupo() As String, _
                                  Tipo As String, _
                                  BandSoloValida As Boolean, BandRS As Boolean) As Variant
End Function


Public Function ListaIVInventario5New(CodInventario As String, _
                                  CodAlterno As String, _
                                  Descripcion As String, _
                                  CodBodega As String, _
                                  CodGrupo() As String, _
                                  exist As Boolean, _
                                  Tipo As String, _
                                  BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset, i As Integer
    
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If

    sql = "SELECT DescIV1, DescIV2, DescIV3,DescIV4, DescIV5,CodInventario, CodAlterno1, Descripcion, Observacion, CodBodega, Exist, " & _
            "Precio1,Precio2,Precio3," & _
            " Tipo, TipoDesc, bandvalida FROM vwIVInventario"
    
    If BandSoloValida Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(BandValida=" & CadenaBool(True, TipoDB) & ")"
    End If
    
    If Len(CodInventario) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodInventario LIKE '" & CodInventario & comodin & "') "
    End If
    
    If Len(CodAlterno) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "((CodAlterno1 LIKE '" & CodAlterno & comodin & "') " & _
                      "OR (CodAlterno2 LIKE '" & CodAlterno & comodin & "')) "
    End If
    
    If Len(Descripcion) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(Descripcion LIKE '" & Descripcion & comodin & "') "
    End If
    
    If Len(CodBodega) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodBodega='" & CodBodega & "') "
    End If
    
    For i = LBound(CodGrupo) To UBound(CodGrupo)
        If Len(CodGrupo(i)) > 0 Then
            If Len(cond) > 0 Then cond = cond & "AND "
            cond = cond & "(CodGrupo" & i & " = '" & CodGrupo(i) & "') "
        End If
    Next i
    
    If Len(Tipo) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(Tipo=" & Tipo & ") "
    End If
    If Not exist Then
'        If Len(cond) > 0 Then cond = cond & "AND "
'            cond = cond & "(Exist<= 0) "
'    Else
        If Len(cond) > 0 Then cond = cond & "AND "
            cond = cond & "(Exist> 0) "
    End If
    
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " ORDER BY CodInventario,CodBodega "
    
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVInventario5New = rs
    Else
        ListaIVInventario5New = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function CreaIVMotivo() As IvMotivo
    Dim obj As IvMotivo
    
    Set obj = New IvMotivo
    Set obj.Empresa = Me
    Set CreaIVMotivo = obj
    Set obj = Nothing
End Function


Public Function RecuperaIvMotivo(key As Variant) As IvMotivo
    Dim obj As IvMotivo
    
    Set obj = New IvMotivo
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaIvMotivo = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function



Public Function ListaIvMotivo(BandSoloValida As Boolean, BandRS As Boolean, Origen As Integer) As Variant
    Dim sql As String, rs As Recordset
    
    sql = "SELECT CodMotivo, Descripcion FROM IVMotivo"
   sql = sql & " WHERE ORIGEN=" & Origen

    If BandSoloValida Then
        sql = sql & " AND BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY CodMotivo"

    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIvMotivo = rs
    Else
        ListaIvMotivo = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


Public Function CargaBufferMP3() As Variant
    'jeaa 07-07-04
    ' PARA SIETE EMPRESAS COMO MAXIMO
    Dim sql As String, cond As String, CadenaPrecio As String, Trans As String
    Dim cadempresa As String, cadBodega As String, totalcero As Boolean, cond1 As String
    Dim v As Variant, max As Integer, TotalC As String, TotalP As String, i As Integer, rs As Recordset, TotalCMAx As String
    Dim CodInv As String, codBod As String, Orden As String, cadTrans As String
    Dim W As Variant, j As Integer, Grupo As String
    Dim vBod As Variant, vNomEmp As Variant, vTrans As Variant
    Dim Cadtitulo As String, k As Integer
    Dim condTrans As String, vaux As Variant
    Dim numReg As Long, numMoneda As String
    Dim cadETrans As Variant, cadEBodega As Variant, basePrincipal As String
    Dim TotalE As String, TotalProm As String, difDias As Integer, Intervalo As Double
    Dim TotalCUC As String, TotalUtil As String, TotalPUtil As String, Fijo As Integer
    Dim NumMeses As Long
    With gobjCond
        NumMeses = DateDiff("m", .fecha1, .fecha2)
        difDias = DateDiff("d", .fecha1, .fecha2)
        NumMeses = Round(difDias / 30, 0)
        If NumMeses = 0 Then NumMeses = 1
       numMoneda = Trim(IIf(.numMoneda > 0, Str(.numMoneda + 1), ""))
        v = Split(.Sucursal, ";")
        vTrans = Split(.CodTrans, ";")
        For i = 0 To UBound(v)
            vNomEmp = Split(v(i), ",")
            Cadtitulo = Cadtitulo & vNomEmp(1) & " - "
        Next i
        'para quitar el ultimo "-"
        Cadtitulo = Mid$(Cadtitulo, 1, Len(Cadtitulo) - 3)
        cond = " "
        TotalC = ", ( "
        TotalCMAx = ", ( "
        TotalP = ", ( "
        TotalProm = ", ( "
        TotalE = ", ( "
        TotalCUC = ", ( "
        TotalUtil = ", ( "
        TotalPUtil = ", ( "
        max = UBound(v, 1)
        ReDim cadETrans(max, 2)
        ReDim cadEBodega(max, 2)
        cadETrans = llenaCadxEmpresa(vTrans, UBound(v))
        W = Split(v(0), ",")
        basePrincipal = W(1)
        difDias = DateDiff("d", .fecha1, .fecha2)
'        max = 0
        For k = 0 To max
            sql = "SELECT   DISTINCT "
            sql = sql & "  idinventario, CodInventario, Descripcion, DESCRIPCION2, CODUNIDAD, " & NumMeses & "  as TiempoPromVta, TiempoReposicion, "
            sql = sql & " CodGrupo" & .NumGrupo & " as CodGrupo,"
            sql = sql & "  DescGrupo" & .NumGrupo & "  as DescGrupo,"
            sql = sql & " isnull(sum(Cant),0) * -1  AS TCant,  "

            sql = sql & "  0 AS CantMax "
            sql = sql & "  Into " & basePrincipal & ".dbo.T" & k
            W = Split(v(k), ",")
            sql = sql & " from "
            sql = sql & W(1) & ".dbo.vwVentasPorBodega "
            cond = " WHERE (FechaTrans BETWEEN " & _
                         FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & _
                        " AND " & FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            cond = cond & " AND  AnexoCodTipoComp in (" & PreparaCadena(.CodBanco2) & ") "
            cond = cond & " AND  AnexoCodTipoTrans in (" & PreparaCadena(.CodBanco1) & ") "
            If Not (Len(.Grupo1) = 0 And Len(.Grupo2) = 0) Then
                cond = cond & " AND (codGrupo" & .NumGrupo & " BETWEEN '" & _
                .Grupo1 & "' AND '" & .Grupo2 & "') "
            End If
            If Not (Len(.CodItem1) = 0 And Len(.CodItem2) = 0) Then
                cond = cond & " AND (CodInventario BETWEEN '" & .CodItem1 & "' AND '" & .CodItem2 & "') "
            End If
            
            If Len(.CodBodega1) > 0 Then
                cond = cond & " AND (CodBodega in (" & PreparaCadena(.CodBodega1) & ")) "
            End If
            
            Grupo = " group by "
            Grupo = Grupo & "  idinventario, CodInventario, Descripcion,   DESCRIPCION2, CODUNIDAD, "
            Orden = " ORDER BY CodInventario"
            Grupo = Grupo & " CodGrupo" & .NumGrupo & " , DescGrupo" & .NumGrupo
            Grupo = Grupo & " , TiempoPromVta , TiempoReposicion"
            sql = sql & cond & cond1 & Grupo & Orden
            
            VerificaExistenciaTablaTemporal k
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
    
            sql = "  SELECT     idinventario,"
            sql = sql & "  isnull(max(Abs(cant)), 0) As CantMax"
            sql = sql & "  Into " & basePrincipal & ".dbo.T" & k + 50
            sql = sql & "  from "
            sql = sql & W(1) & ".dbo.vwVentasPorBodega"
            sql = sql & " WHERE (FechaTrans BETWEEN " & _
                         FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & _
                        " AND " & FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            
            sql = sql & " AND  AnexoCodTipoComp in ('18') "
            sql = sql & " AND  AnexoCodTipoTrans in (" & PreparaCadena(.CodBanco1) & ") "
            
            If Not (Len(.Grupo1) = 0 And Len(.Grupo2) = 0) Then
                sql = sql & " AND (codGrupo" & .NumGrupo & " BETWEEN '" & _
                .Grupo1 & "' AND '" & .Grupo2 & "') "
            End If
            If Not (Len(.CodItem1) = 0 And Len(.CodItem2) = 0) Then
                sql = sql & " AND (CodInventario BETWEEN '" & .CodItem1 & "' AND '" & .CodItem2 & "') "
            End If
        
            If Len(.CodBodega1) > 0 Then
                'cond = cond & " AND (CodBodega = '" & .CodBodega1 & "') "
                sql = sql & " AND (CodBodega in (" & PreparaCadena(.CodBodega1) & ")) "
            End If
        
                sql = sql & " group by   idinventario"
            
            VerificaExistenciaTablaTemporal k + 50
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
                            
            
            
            
            sql = "select "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".Codinventario, i.Codinventario) As Codinventario, "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".Descripcion, i.Descripcion) as Descripcion, "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".Descripcion2, i.Descripcion2) as Descripcion2, "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".CodUnidad, i.CodUnidad) as CodUnidad, "
            sql = sql & basePrincipal & ".dbo.T" & k & ".TiempoPromVta as TiempoPromVta, "
            sql = sql & basePrincipal & ".dbo.T" & k & ".TiempoReposicion as TiempoReposicion, "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".CodGrupo,i.CodGrupo" & .NumGrupo & ") as CodGrupo, "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".DescGrupo, i.DescGrupo" & .NumGrupo & ") as DescGrupo, "
            sql = sql & "  isnull(max(" & basePrincipal & ".dbo.T" & k & ".TCant), 0) as TCant, "
            sql = sql & "  isnull(max(" & basePrincipal & ".dbo.T" & k + 50 & ".CantMax), 0)  as TCAntMAx, "
            sql = sql & "  isnull(max(" & basePrincipal & ".dbo.T" & k & ".TCant), 0)/" & NumMeses & "as Prom, "
            sql = sql & "  round(isnull(max(" & basePrincipal & ".dbo.T" & k & ".TCant), 2)/( " & NumMeses & "   *30"
            sql = sql & "   ),2) as PromDiario, "
            sql = sql & "  isnull(sum(i.exist), 0) as Existencia "
            sql = sql & "  Into " & basePrincipal & ".dbo.Tmp" & k
            sql = sql & " from "
            sql = sql & basePrincipal & ".dbo.T" & k & " left join " & basePrincipal & ".dbo.T" & k + 50 & " on " & basePrincipal & ".dbo.T" & k & ".idinventario = " & basePrincipal & ".dbo.T" & k + 50 & ".idinventario"
            
            If Len(.CodBodega1) > 0 Then
                sql = sql & "  full join " & W(1) & ".dbo.VWivexistxBodega i "
            Else
                sql = sql & "  full join " & W(1) & ".dbo.vwivexist i "
            End If
            
            
            
            sql = sql & " on " & basePrincipal & ".dbo.T" & k & ".idinventario=i.idinventario"
            sql = sql & " WHERE ((i.exist <> 0) OR (i.exist= 0))  "

            If Len(.CodBodega1) > 0 Then
                'sql = sql & " AND (i.CodBodega = '" & .CodBodega1 & "') "
                sql = sql & " AND (CodBodega in (" & PreparaCadena(.CodBodega1) & ")) "
            End If


            If Not (Len(.Grupo1) = 0 And Len(.Grupo2) = 0) Then
                sql = sql & "  AND (codGrupo" & .NumGrupo & " BETWEEN '" & _
                .Grupo1 & "' AND '" & .Grupo2 & "') "
            End If
            If Not (Len(.CodItem1) = 0 And Len(.CodItem2) = 0) Then
                sql = sql & "AND (i.CodInventario BETWEEN '" & .CodItem1 & "' AND '" & .CodItem2 & "') "
            End If
            
            
            
            sql = sql & "  group by "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".Codinventario, i.Codinventario) , "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".Descripcion, i.Descripcion) , "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".Descripcion2, i.Descripcion2) , "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".CodUnidad, i.CodUnidad) , "

            sql = sql & basePrincipal & ".dbo.T" & k & ".TiempoPromVta, "
            sql = sql & basePrincipal & ".dbo.T" & k & ".TiempoReposicion, "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".CodGrupo,i.CodGrupo" & .NumGrupo & ") , "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".DescGrupo, i.DescGrupo" & .NumGrupo & ")  "
                
            VerificaExistenciaTabla k
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        Next k
        sql = " select "
        sql = sql & ArmaSQL("CodInventario", max)
        sql = sql & ArmaSQL("descripcion", max)
        sql = sql & ArmaSQL("descripcion2", max)
        sql = sql & ArmaSQL("CodUnidad", max)
        sql = Mid$(sql, 1, Len(sql) - 2)
       For i = 0 To max
           TotalC = TotalC & " isnull(TMP" & i & ".TCant,0) +"
           TotalCMAx = TotalCMAx & " isnull(TMP" & i & ".TCantMax,0) +"
            TotalProm = TotalProm & " isnull(TMP" & i & ".prom,0) +"
            TotalP = TotalP & " isnull(TMP" & i & ".PromDiario,0) +"
            TotalE = TotalE & " isnull(TMP" & i & ".Existencia,0) +"
        Next i
        For i = max + 1 To 6
            sql = sql & "  , 0 as TiempoReposicion" & i
            'sql = sql & " , 0 as Cant" & i & ", 0 as PTot" & i
            sql = sql & " , 0 as Cant" & i
            sql = sql & " , 0 as CantMax" & i & ", 0 as PTot" & i
            sql = sql & " , 0 as Prom" & i & ", 0 as existencia" & i
            sql = sql & " , 0 as ExistOptima" & i & " , 0 as Diferencia" & i & ""
        Next i

        TotalC = Mid(TotalC, 1, Len(TotalC) - 1)
        TotalCMAx = Mid(TotalCMAx, 1, Len(TotalCMAx) - 1)
        TotalP = Mid(TotalP, 1, Len(TotalP) - 1)
        TotalProm = Mid(TotalProm, 1, Len(TotalProm) - 1)
        TotalE = Mid(TotalE, 1, Len(TotalE) - 1)
        i = 0
        sql = sql & "  ,isnull(TMP" & i & ".TiempoReposicion,0) AS TiempoRep"
        sql = sql & ", Round(" & Mid$(TotalProm, 2, Len(TotalProm)) & "),2)  as TotalPromMen "
        sql = sql & ", Round(" & Mid$(TotalP, 2, Len(TotalP)) & "),2)  as TotalPromDia "
        sql = sql & ", Round(" & Mid$(TotalE, 2, Len(TotalE)) & "),2)  as TotalExist "
        sql = sql & ", Round(" & Mid$(TotalC, 2, Len(TotalC)) & "),2)  as TotalC "
        sql = sql & ", Round(" & Mid$(TotalCMAx, 2, Len(TotalCMAx)) & "),2)  as Totalcmax "
        sql = sql & ", Round(" & Mid(TotalP, 2, Len(TotalP) - 1) & ")  *  isnull(TMP" & i & ".TiempoReposicion,0),2) AS ExistenciaOptima "

        sql = sql & "  Into " & basePrincipal & ".dbo.Tmp" & k + 1

         For i = max To 0 Step -1
            If i = max Then
                sql = sql & " From "
            Else
                sql = sql & " FULL JOIN "
           End If
            sql = sql & " " & basePrincipal & ".dbo.TMP" & i & " "
        Next i
        If max > 0 Then
            For i = 0 To max - 1
                If i = 0 Then
                    CodInv = " ON " & basePrincipal & ".dbo.TMP" & i & ".CodInventario="
                    CodInv = CodInv & "" & basePrincipal & ".dbo.TMP" & i + 1 & ".CodInventario"
                    sql = sql & CodInv
                Else
                    Dim m As Integer
                    CodInv = ""
                    For m = 0 To i
                        If m = 0 Then
                            CodInv = CodInv & " ON " & basePrincipal & ".dbo.TMP" & i & ".CodInventario="
                            CodInv = CodInv & "" & basePrincipal & ".dbo.TMP" & i + 1 & ".CodInventario"
                        Else
                            CodInv = CodInv & " OR " & basePrincipal & ".dbo.TMP" & m - 1 & ".CodInventario="
                            CodInv = CodInv & "" & basePrincipal & ".dbo.TMP" & i + 1 & ".CodInventario"
                        End If
                    Next m
                    sql = sql & CodInv
                End If
            Next i
        End If
        
        VerificaExistenciaTabla k + 1
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
                
            'PEDIDOS COLOCADOS
            sql = "select I.idinventario, sum(I.cantidad) as cantcOLOCADA"
            sql = sql & "  Into " & basePrincipal & ".dbo.T" & k + 4000
            'sql = sql & "  Into Tmp0"
            sql = sql & " from " & W(1) & ".dbo.gncomprobante g"
            sql = sql & " inner join " & W(1) & ".dbo.ivkardex i"
            sql = sql & " Left Join "
            sql = sql & W(1) & ".dbo.VWIVProveedorDetalle ip "
            sql = sql & " Inner Join "
            sql = sql & W(1) & ".dbo.pcprovcli pc on ip.IdProveedor=pc.idprovcli "
            sql = sql & " on I.idinventario=ip.idinventario"
            sql = sql & " inner join " & W(1) & ".dbo.ivinventario ivinventario on ivinventario.idinventario=i.idinventario"
            sql = sql & " on g.transid=i.transid"
            sql = sql & " Where G.Estado = 0"
            sql = sql & " and codtrans in ('" & .CodComp & "')"
            '" & .CodComp & "M')"
            If Len(.CodPC1) > 0 Then
                cond = cond & " and pc.codprovcli='" & .CodPC1 & "'"
            End If
            
            
            If Not (Len(.Bienes)) = 0 Then
                sql = sql & .Bienes
            End If
            
            sql = sql & " group by I.idinventario"

            VerificaExistenciaTablaTemporal k + 4000
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
                
                
             ' pedidos en transito
            sql = "select I.idinventario, sum(I.cantidad) as cantPedida"
            sql = sql & "  Into " & basePrincipal & ".dbo.T" & k + 1000
            'sql = sql & "  Into Tmp0"
            sql = sql & " from " & W(1) & ".dbo.gncomprobante g"
            sql = sql & " inner join " & W(1) & ".dbo.ivkardex i"
            sql = sql & " Left Join "
            sql = sql & W(1) & ".dbo.VWIVProveedorDetalle ip "
            sql = sql & " Inner Join "
            sql = sql & W(1) & ".dbo.pcprovcli pc on ip.IdProveedor=pc.idprovcli "
            sql = sql & " on I.idinventario=ip.idinventario"
            
            
            sql = sql & " inner join " & W(1) & ".dbo.ivinventario ivinventario on ivinventario.idinventario=i.idinventario"
            sql = sql & " on g.transid=i.transid"
            sql = sql & " Where G.Estado in (1,2,4)  "
            sql = sql & " and codtrans in ('" & .CodComp & "')"
            '" & .CodComp & "M')"
            If Len(.CodPC1) > 0 Then
                cond = cond & " and pc.codprovcli='" & .CodPC1 & "'"
            End If
            
            
            If Not (Len(.Bienes)) = 0 Then
                sql = sql & .Bienes
            End If
            
            sql = sql & " group by I.idinventario"

            VerificaExistenciaTablaTemporal k + 1000
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
                
                
            sql = "select I.idinventario, sum(I.cantidad) as cantIngresada"
            sql = sql & "  Into " & basePrincipal & ".dbo.T" & k + 2000
            'sql = sql & "  Into Tmp0"
            sql = sql & " from " & W(1) & ".dbo.gncomprobante g"
            sql = sql & " inner join " & W(1) & ".dbo.ivkardex i"
            sql = sql & " Left Join "
            sql = sql & W(1) & ".dbo.VWIVProveedorDetalle ip "
            sql = sql & " Inner Join "
            sql = sql & W(1) & ".dbo.pcprovcli pc on ip.IdProveedor=pc.idprovcli "
            sql = sql & " on I.idinventario=ip.idinventario"
            
            
            sql = sql & " inner join " & W(1) & ".dbo.ivinventario ivinventario on ivinventario.idinventario=i.idinventario"
            sql = sql & " on g.transid=i.transid"
            sql = sql & " Where G.Estado <> 3"
            sql = sql & " and codtrans in ('" & .CodForma & "')"
            '" & .CodComp & "M')"
            If Len(.CodPC1) > 0 Then
                cond = cond & " and pc.codprovcli='" & .CodPC1 & "'"
            End If
            
            
            If Not (Len(.Bienes)) = 0 Then
                sql = sql & .Bienes
            End If
            
            sql = sql & " group by I.idinventario"

            VerificaExistenciaTablaTemporal k + 2000
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            sql = " select tra.idinventario, isnull(cantPedida,0)-isnull(cantIngresada,0) as transito "
            sql = sql & "  Into " & basePrincipal & ".dbo.T" & k + 3000
            sql = sql & " from " & basePrincipal & ".dbo.T" & k + 1000 & " tra  "
            sql = sql & " left join " & basePrincipal & ".dbo.T" & k + 2000 & " traP on tra.idinventario=trap.idinventario "
            
            VerificaExistenciaTablaTemporal k + 3000
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
                
                
        sql = " select distinct "
        sql = sql & " i.idinventario, t.CodInventario, "
        sql = sql & " t.descripcion, ivg.descripcion, BUFFER,  TotalExist , ISNULL(cantcolocada,0), isnull(tra.transito,0),  "
         sql = sql & "  CASE WHEN (   BUFFER-TotalExist-ISNULL(cantcolocada,0)-isnull(tra.transito,0)) >0 THEN    (  BUFFER - TotalExist-ISNULL(cantcolocada,0)-isnull(tra.transito,0)) ELSE 0 END as saldo,"
        sql = sql & "  0 as BandPedido,  ISNULL(TotalC,0)as TotalC, ISNULL(TotalPromMen,0)as TotalPromMen , ISNULL(TotalPromDia,0) as TotalPromDia, "
        sql = sql & " case when ISNULL(TotalPromDia,0)<>0 then TotalExist /ISNULL(TotalPromDia,0) else TotalExist end , "
        sql = sql & " pc.nombre, ISNULL(IP.Cantidad,0), ISNULL(CostoUnitario,0), ip.Fecha, buffer, ISNULL(i.tiemporeposicion,0) , "
        sql = sql & " CASE WHEN ISNULL(i.tiemporeposicion,0)<>0 THEN " & gobjMain.objCondicion.NumDias1 & "/i.tiemporeposicion ELSE " & gobjMain.objCondicion.NumDias1 & " END,"
        sql = sql & " CASE WHEN ISNULL(i.tiemporeposicion,0)<>0 THEN BUFFER *" & gobjMain.objCondicion.NumDias1 & "/i.tiemporeposicion ELSE  Buffer * " & gobjMain.objCondicion.NumDias1 & " END "
        sql = sql & " from tmp" & k + 1 & " t "
        sql = sql & " inner join ivinventario i on t.codinventario=i.codinventario "
        sql = sql & " left join " & basePrincipal & ".dbo.T" & k + 3000 & " tra on i.idinventario=tra.idinventario "
        sql = sql & " left join " & basePrincipal & ".dbo.T" & k + 4000 & " traC on i.idinventario=traC.idinventario "

        sql = sql & " left join ivgrupo4 ivg on i.idgrupo4=ivg.idgrupo4 "
        Select Case .Nivel
        Case 0
            sql = sql & " left join IVProveedorDetalle ip"
            sql = sql & " inner join pcprovcli pc on ip.IdProveedor=pc.idprovcli and ip.bandprincipal=1"
            sql = sql & " on i.idinventario=ip.idinventario"
        Case 1
            sql = sql & " left join VWIVProveedorDetalle ip"
            sql = sql & " inner join pcprovcli pc on ip.IdProveedor=pc.idprovcli"
            sql = sql & " on i.idinventario=ip.idinventario"
        End Select
        sql = sql & " WHERE i.bandvalida=1 "
        
        If gobjMain.objCondicion.IncluirCero Then
        Else
            sql = sql & " and BUFFER<>0 "
        End If
        If .tipoItem1 Then
            sql = sql & "  and  ((TotalExist+isnull(tra.transito,0)+ISNULL(cantcolocada,0))  >= ( BUFFER+ (BUFFER *0.5))) and ((TotalExist +isnull(tra.transito,0)+ISNULL(cantcolocada,0)) <= TotalPromMen)"
            If .IncluirCero Then
                sql = sql & " or  ((TotalExist+isnull(tra.transito,0)+ISNULL(cantcolocada,0))  <  BUFFER) "
            End If
        Else
        End If
        
        i = 0
        
        
       sql = sql & " order by "
        sql = sql & "t.CodInventario"

       Set rs = gobjMain.EmpresaActual.OpenRecordset(sql)
    Set CargaBufferMP3 = rs
    Set rs = Nothing
       
    End With
End Function

Public Function CargaConsolidadoBufferUtilesa() As Variant
    Dim sql As String, cond As String, CadenaPrecio As String, Trans As String, rs As Recordset
    Dim Dias As Integer, mes As Currency, numReg As Long
    With gobjCond
    
        Dias = DateDiff("d", .fecha1, .fecha2)
        mes = Dias / 30

    
        '------------ existencias
        sql = "select idinventario, sum(exist) as exist into tmpexist from ivexist group by idinventario"
        VerificaExistenciaTablaTemp "tmpexist"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        
        '---------- COMPRA ANTERIOR
        sql = " select iv.idinventario, pc.nombre, cantidad, fecha, costounitario "
        sql = sql & " Into tmpcp"
        sql = sql & " from ivinventario iv"
        sql = sql & " left join VWIVProveedorDetalle ip"
        sql = sql & " inner join pcprovcli pc on ip.IdProveedor=pc.idprovcli"
        sql = sql & " on iv.idinventario=ip.idinventario"

        
        

        
        VerificaExistenciaTablaTemp "tmpcp"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        
        
        '--------- buffer
    
        sql = " select "
        sql = sql & " i.idinventario, "
        sql = sql & " max(buffer) as buffer, "
        sql = sql & " max(TiempoReposicion) as tr, max(FrecuenciaReposicion) as fr, max(TiempoPromVta) as promV,  sum(i.cantidad)*-1 as cant,  "
        If .tipoItem1 Then
            sql = sql & " abs(max(TiempoPromVta)  *(max(TiempoReposicion)+ max(FrecuenciaReposicion)) * 1.5) AS BF, "
        Else
            sql = sql & " abs(round(round((sum(i.cantidad) /" & mes & ") *-1,4) *(max(TiempoReposicion)+ max(FrecuenciaReposicion)) * 1.5,0)) AS BF, "
        End If
        
        sql = sql & Dias & " as dias, round((sum(i.cantidad) /" & Dias & ") *-1,4) as promdia, "
        sql = sql & mes & " as mes, round((sum(i.cantidad) /" & mes & ") *-1,4) as prommes,"
        sql = sql & " max(ivg1.codgrupo1) as codgrupo1, max(ivg2.codgrupo2) as codgrupo2, max(ivg3.codgrupo3) as codgrupo3,"
        sql = sql & " max(ivg4.codgrupo4) as codgrupo4, max(ivg5.codgrupo5) as codgrupo5 "
        sql = sql & " Into tmpBUFFER"
        sql = sql & " from gncomprobante g inner join gntrans gnt on g.codtrans=gnt.codtrans"
        sql = sql & " inner join ivkardex i "
        sql = sql & " full join ivinventario iv left join tmpexist t on iv.idinventario= t.idinventario"
        sql = sql & " on i.idinventario = iv.idinventario"
        sql = sql & " on g.transid=i.transid"
        sql = sql & " left join ivgrupo1 ivg1  on iv.idgrupo1=ivg1.idgrupo1 "
        sql = sql & " left join ivgrupo2 ivg2  on iv.idgrupo2=ivg2.idgrupo2 "
        sql = sql & " left join ivgrupo3 ivg3  on iv.idgrupo3=ivg3.idgrupo3 "
        sql = sql & " left join ivgrupo4 ivg4  on iv.idgrupo4=ivg4.idgrupo4 "
        sql = sql & " left join ivgrupo5 ivg5  on iv.idgrupo5=ivg5.idgrupo5 "
        sql = sql & " Where Estado <> 3"
        sql = sql & "  and fechatrans between '" & .fecha1 & "' and '" & .fecha2 & "'"
        sql = sql & " AND  AnexoCodTipoComp in (" & PreparaCadena(.CodBanco2) & ") "
        sql = sql & " AND  AnexoCodTipoTrans in (" & PreparaCadena(.CodBanco1) & ") "
        
            If Not (Len(.Grupo1) = 0 And Len(.Grupo2) = 0) Then
                sql = sql & " AND (codGrupo" & .NumGrupo & " BETWEEN '" & _
                .Grupo1 & "' AND '" & .Grupo2 & "') "
            End If
            If Not (Len(.CodItem1) = 0 And Len(.CodItem2) = 0) Then
                sql = sql & " AND (CodInventario BETWEEN '" & .CodItem1 & "' AND '" & .CodItem2 & "') "
            End If
        
        
        sql = sql & "  group by i.idinventario"
    
        VerificaExistenciaTablaTemp "tmpBUFFER"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
    
    
        '--------- buffer x Item
    
        sql = " select "
        sql = sql & " idinventario, "
        sql = sql & " buffer as buffer "
        sql = sql & " Into tmpBUFFERxItem"
        sql = sql & " from ivinventario "
        VerificaExistenciaTablaTemp "tmpBUFFERxItem"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
    
    
    '--------------- PEDIDOS
        sql = " select "
        sql = sql & " i.idinventario, "
        sql = sql & " sum(i.cantidad) as cantPED"
        sql = sql & " Into tmpPedido"
        sql = sql & " from gncomprobante g "
        sql = sql & " inner join ivkardex i "
        sql = sql & " on g.transid=i.transid"
        sql = sql & " Where Estado = 0 "
        sql = sql & "  and fechatrans between '" & .fecha1 & "' and '" & .fecha2 & "'"
        sql = sql & " AND  codtrans in ('" & .CodComp & "')"
        sql = sql & "  group by i.idinventario"
    
        VerificaExistenciaTablaTemp "tmpPedido"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
    
'--------------- importa
        sql = " select "
        sql = sql & " i.idinventario, "
        sql = sql & " sum(i.cantidad) as cantIMP"
        sql = sql & " Into tmpImporta"
        sql = sql & " from gncomprobante g "
        sql = sql & " inner join ivkardex i "
        sql = sql & " on g.transid=i.transid"
        sql = sql & " Where Estado <> 3 "
        sql = sql & "  and fechatrans between '" & .fecha1 & "' and '" & .fecha2 & "'"
        sql = sql & " AND  codtrans in (" & PreparaCadena(gobjCond.CodForma) & ")"
        sql = sql & "  group by i.idinventario"
    
        VerificaExistenciaTablaTemp "tmpImporta"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
    
    
    
    '--------------- TRANSITO
        sql = " select "
        sql = sql & " i.idinventario, "
        sql = sql & " sum(i.cantidad) as cantPEDtran"
        sql = sql & " Into tmpPedidoTran"
        sql = sql & " from gncomprobante g "
        sql = sql & " inner join ivkardex i "
        sql = sql & " on g.transid=i.transid"
        sql = sql & " Where Estado <> 0 AND Estado <> 3"
        sql = sql & "  and fechatrans between '" & .fecha1 & "' and '" & .fecha2 & "'"
        sql = sql & " AND  codtrans in ('" & .CodComp & "')"
        sql = sql & "  group by i.idinventario"
    
        VerificaExistenciaTablaTemp "tmpPedidoTran"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        
        sql = " select  tp.idinventario,  cantPEDtran - isnull(cantIMP,0) as cantPEDtran "
        sql = sql & "  Into tmpPedidoTranN"
        sql = sql & "  from tmpPedidoTran tp"
        sql = sql & "  left join tmpImporta ti on tp.idinventario=ti.idinventario"

        VerificaExistenciaTablaTemp "tmpPedidoTranN"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
    
        
        sql = "SELECT  iv.idinventario, codinventario, IV.descripcion, isnull(exist,0), isnull(BUFFERI.buffer,0),isnull(cpe.cantPED,0),isnull(cpet.cantPEDTran,0), "
        sql = sql & " case when (isnull(exist,0)-isnull(BUFFERI.buffer,0)+isnull(cpe.cantPED,0)+isnull(cpet.cantPEDTran,0))<0 then abs(isnull(exist,0)-isnull(BUFFERI.buffer,0)+isnull(cpe.cantPED,0)+isnull(cpet.cantPEDTran,0)) else '0' end as ped,0, "
        sql = sql & " Nombre , Cantidad, CostoUnitario, fecha, "
        sql = sql & " TiempoReposicion, FrecuenciaReposicion, TiempoPromVta, bf,cant, dias,promdia,mes,prommes"
        sql = sql & " from ivinventario iv "
        sql = sql & " left join ivgrupo1 ivg1  on iv.idgrupo1=ivg1.idgrupo1 "
        sql = sql & " left join ivgrupo2 ivg2  on iv.idgrupo2=ivg2.idgrupo2 "
        sql = sql & " left join ivgrupo3 ivg3  on iv.idgrupo3=ivg3.idgrupo3 "
        sql = sql & " left join ivgrupo4 ivg4  on iv.idgrupo4=ivg4.idgrupo4 "
        sql = sql & " left join ivgrupo5 ivg5  on iv.idgrupo5=ivg5.idgrupo5 "
        
        sql = sql & " left join tmpexist exist on iv.idinventario= exist.idinventario"
        sql = sql & " left join  tmpBUFFER BUFFER on iv.idinventario= BUFFER.idinventario"
        sql = sql & " left join  tmpBUFFERxItem BUFFERI on iv.idinventario= BUFFERI.idinventario"
        
        sql = sql & " left join  tmpcp cp on iv.idinventario= cp.idinventario"
        sql = sql & " left join  tmpPedido cpe on iv.idinventario= cpe.idinventario"
        sql = sql & " left join  tmpPedidoTranN cpet on iv.idinventario= cpet.idinventario"
        
        sql = sql & " where bandservicio=0 and iv.bandvalida=1 "
        
        If .IncluirCero Then
            sql = sql & " and (isnull(exist,0)-isnull(buffer.buffer,0)+isnull(cpe.cantPED,0)+isnull(cpet.cantPEDTran,0))<0"
        End If
        
         If Not (Len(.Grupo1) = 0 And Len(.Grupo2) = 0) Then
                sql = sql & " AND (IVG" & .NumGrupo & ".codGrupo" & .NumGrupo & " BETWEEN '" & _
                .Grupo1 & "' AND '" & .Grupo2 & "') "
            End If
            If Not (Len(.CodItem1) = 0 And Len(.CodItem2) = 0) Then
                sql = sql & " AND (CodInventario BETWEEN '" & .CodItem1 & "' AND '" & .CodItem2 & "') "
            End If
        sql = sql & " order by descripcion"
        Set rs = gobjMain.EmpresaActual.OpenRecordset(sql)
        Set CargaConsolidadoBufferUtilesa = rs
        Set rs = Nothing
       
    End With
End Function

Public Function ConsPCKardexBQD(ByVal BandProveedor As Boolean, _
                             ByVal BandCliente As Boolean) As Variant 'REVISAR SI ESTE PROC
    Dim sql As String, rs As Recordset
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
        sql = "spConsPCKardexPorFechaBQD " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodPC1 & "','" & _
                gobjCond.NomCliente & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB) & "," & _
                CadenaBool(BandProveedor, TipoDB) & "," & _
                CadenaBool(BandCliente, TipoDB)
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsPCKardexBQD = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Kardex Prov-Cli ", "PC"
End Function

Public Function RecuperarElementoQuick(ByVal key As Variant) As Elementos
    Dim obj As Elementos
    Set obj = New Elementos
    Set obj.Empresa = Me
    If key <> 0 Then obj.RecuperarQuick key
    Set RecuperarElementoQuick = obj
    Set obj = Nothing
End Function


Public Function CargaTransaccionesParaGenerarRide() As Variant

    Dim sql As String, cond As String, CadenaPrecio As String, Trans As String, rs As Recordset
    Dim Dias As Integer, mes As Currency, numReg As Long
    With gobjCond
    
   
        '------------ existencias
        sql = "select top 10 (CodTrans+' '+CONVERT(VARCHAR,NumTrans)) AS Trans, FechaTrans,  g.transid,0 as pdf, '' as nombre , pc.idtipodocumento"
        sql = sql & " from infocomprobantes i inner join gncomprobante g on i.transid = g.transid "
        sql = sql & " left join  pcprovcli pc on g.idclienteref = pc.idprovcli or g.idproveedorref = pc.idprovcli"
        sql = sql & " where CodigoMensaje =60 and BandPdf =0 and tipoambiente=2 AND g.estado <> 3 "
'        sql = sql & " and fechatrans between '01/03/2017' and '01/03/2017'"
'        sql = sql & " and codtrans ='FER'"
        
        sql = sql & " order by g.transid  "
        
'        gobjMain.EmpresaActual.EjecutarSQL sql, numReg

        Set rs = gobjMain.EmpresaActual.OpenRecordset(sql)
        Set CargaTransaccionesParaGenerarRide = rs
        Set rs = Nothing
    End With
End Function

Public Function ActualizaBanderaGeneraRide(transid As Long) As Boolean

    Dim sql As String, cond As String, CadenaPrecio As String, Trans As String, rs As Recordset
    Dim Dias As Integer, mes As Currency, numReg As Long
    With gobjCond
    
   
        '------------ existencias
        sql = "update infocomprobantes set BandPdf =1 where transid = " & transid
        
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg

        Set rs = gobjMain.EmpresaActual.OpenRecordset(sql)
        'If rs.RecordCount > 0 Then
            ActualizaBanderaGeneraRide = True
'        Else
 '           ActualizaBanderaGeneraRide = True
  '      End If
        Set rs = Nothing
    End With
End Function

Public Function CargaTransaccionesParaGenerarRidexPC(ByVal Nombre As String) As Variant

    Dim sql As String, cond As String, CadenaPrecio As String, Trans As String, rs As Recordset
    Dim Dias As Integer, mes As Currency, numReg As Long
    With gobjCond
    
   
        '------------ existencias
        sql = "select top 10 (CodTrans+' '+CONVERT(VARCHAR,NumTrans)) AS Trans, FechaTrans,  g.transid,0 as pdf "
        sql = sql & " from infocomprobantes i inner join gncomprobante g on i.transid = g.transid "
        sql = sql & " where CodigoMensaje =60 and BandPdf =0 "
        sql = sql & " and NombreUsuarioPC = '" & Nombre & "'"
        sql = sql & " order by g.transid  "
        
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg

        Set rs = gobjMain.EmpresaActual.OpenRecordset(sql)
        Set CargaTransaccionesParaGenerarRidexPC = rs
        Set rs = Nothing
    End With
End Function

Public Function ListaViaEmbarque() As Variant
 Dim v(1, 2) As Variant
    v(0, 0) = "A"
    v(1, 0) = "AEREO"
    v(0, 1) = "M"
    v(1, 1) = "MARITIMO"
    v(0, 2) = "T"
    v(1, 2) = "TERRESTRE"
   ListaViaEmbarque = v
   End Function

Public Function ListaPCProvCliParaFlexNombreyCodigo( _
                    BandProveedor As Boolean, _
                    BandCliente As Boolean) As String
    Dim sql As String, s As String, cond As String
    Dim rs As Recordset
    sql = "SELECT  Nombre+' ['+CodProvCli+']' FROM PCProvCli "
    If BandProveedor And Not BandCliente Then
        cond = "BandProveedor=" & CadenaBool(True, Me.TipoDB)
    ElseIf Not BandProveedor And BandCliente Then
        cond = "BandCliente=" & CadenaBool(True, Me.TipoDB)
    End If
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " ORDER BY Nombre"
    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 20 + 40)         '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    ListaPCProvCliParaFlexNombreyCodigo = s
    rs.Close
    Set rs = Nothing
End Function

'EMPLEADO COMO GESTION DE COBRO
Public Function ListaEmpleadoG(codPC As String, _
                                    Nombre As String, _
                                    Direccion As String, _
                                    RUC As String, _
                                    CodGrupoDesde As String, _
                                    CodGrupoHasta As String, _
                                    numG As Integer, _
                                    BandActivo As Boolean, _
                                    bandNoActivo As Boolean, _
                                    BandSoloValida As Boolean, _
                                    BandRS As Boolean) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset, i As Integer
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If
    sql = "SELECT pc.CodProvCli,pc.Nombre "
    sql = sql & ",case when p.bandactivo = 1 then 'ACTIVO' else 'INACTIVO' end as estado "
    sql = sql & ",g1.CodGrupo1, g2.CodGrupo2, g3.CodGrupo3, g4.CodGrupo4  "
        sql = sql & " FROM PCGrupo4 g4 RIGHT JOIN (PCGrupo3 g3 RIGHT JOIN (PCGrupo2 g2 RIGHT JOIN (PCGrupo1 g1 RIGHT JOIN Empleado pc " & _
            " left join personal p on p.idempleado = pc.idprovcli" & _
            " left join Anexo_TipoDocumento a on pc.IdTipoDocumento  = a.Id" & _
                          " ON g1.IdGrupo1 = pc.IdGrupo1) " & _
                    " ON g2.IdGrupo2 = pc.IdGrupo2) " & _
                " ON g3.IdGrupo3 = pc.IdGrupo3) " & _
                " ON g4.IdGrupo4 = pc.IdGrupo4 "
            sql = sql & " WHERE BandGestion=" & CadenaBool(True, TipoDB)
    If Len(codPC) > 0 Then
        cond = cond & " and (CodProvCli LIKE '" & codPC & comodin & "') "
    End If
    If Len(Nombre) > 0 Then
        cond = cond & " and ((Nombre LIKE '" & Nombre & comodin & "') " & _
                      "OR (Nombre LIKE '" & Nombre & comodin & "')) "
    End If
    If Len(Direccion) > 0 Then
        cond = cond & " and (Direccion1 LIKE '" & Descripcion & comodin & "') "
    End If
    If Len(RUC) > 0 Then
        cond = cond & " and (ruc LIKE '" & RUC & comodin & "') "
    End If
    If Not (Len(CodGrupoDesde) = 0 And Len(CodGrupoHasta) = 0) Then
        cond = cond & " AND (CodGrupo" & numG & " BETWEEN '" & CodGrupoDesde & _
            "' AND '" & CodGrupoHasta & "')"
    End If
    If BandActivo And Not bandNoActivo Then
        cond = cond & " AND p.bandactivo = 1 "
    ElseIf Not BandActivo And bandNoActivo Then
        cond = cond & " AND p.bandactivo = 0 "
    Else
        'saca todo
    End If
    If Len(cond) > 0 Then sql = sql & cond
    sql = sql & " ORDER BY Nombre "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaEmpleadoG = rs
    Else
        ListaEmpleadoG = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


Public Function ConsCTBalanceComparativoxMes(Optional ByVal bandBalance As Boolean) As Variant
    Dim sql As String, cond As String, rs As Recordset, k As Integer
    Dim v As Variant, v2() As Variant, i As Long, j As Long, numReg As Long
    Dim mes As Long, MesFin As Integer
    Dim MesB As Long, MesBFin As Integer
    
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    
'/*-------------------------------------------------
 '* Filtrar solo los asientos que est n dentro del rango fecha 1
 '--------------------------------------------------*/
    For i = 0 To 12
        sql = " SELECT"
        sql = sql & " CT.idCuenta,"
        sql = sql & " Debe/Cotizacion2 as Debe0,"
        sql = sql & " Haber/Cotizacion2 AS Haber0,"
        sql = sql & " 0 AS Saldo"
        sql = sql & " Into tmpa" & i
        sql = sql & " FROM " & gobjCond.NomCliente & ".dbo.CTCuenta CT INNER JOIN (" & gobjCond.NomCliente & ".dbo.GNComprobante GNC"
        sql = sql & " INNER JOIN " & gobjCond.NomCliente & ".dbo.CTLibroDetalle CTL"
        sql = sql & " ON GNC.CodAsiento = CTL.CodAsiento)"
        sql = sql & " ON CT.IdCuenta = CTL.IdCuenta"
        sql = sql & " WHERE "
        If i = 12 Then
            sql = sql & " GNC.FechaTrans Between " & FechaYMD(gobjCond.fecha1, TipoDB) & " And " & FechaYMD(DateAdd("d", -1, DateAdd("yyyy", 1, gobjCond.fecha1)), TipoDB)
        Else
            sql = sql & " GNC.FechaTrans Between " & FechaYMD(DateAdd("m", i, gobjCond.fecha1), TipoDB) & " And " & FechaYMD(DateAdd("d", -1, DateAdd("m", i + 1, gobjCond.fecha1)), TipoDB)
        End If
        sql = sql & " AND GNC.Estado  <>3 And GNC.Estado <>0"
        If Len(gobjCond.Sucursal) > 0 Then
            sql = sql & "   and idLocal like " & gobjCond.Sucursal
        End If
        
        VerificaExistenciaTablaTemp "tmpa" & i
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
        '/*-------------------------------------------------
         '* Filtrar solo los asientos que est n dentro del rango fecha 2
         '--------------------------------------------------*/
            
            
        sql = " SELECT"
        sql = sql & " CTCuenta.idCuenta,"
        sql = sql & " Debe/Cotizacion2 as Debe0,"
        sql = sql & " Haber/Cotizacion2 AS Haber0,"
        sql = sql & " 0 AS Saldo"
        sql = sql & " Into tmpb" & i
        sql = sql & " FROM CTCuenta INNER JOIN (GNComprobante"
        sql = sql & " INNER JOIN CTLibroDetalle"
        sql = sql & " ON GNComprobante.CodAsiento = CTLibroDetalle.CodAsiento)"
        sql = sql & " ON CTCuenta.IdCuenta = CTLibroDetalle.IdCuenta"
        sql = sql & " WHERE "
'        sql = sql & " GNComprobante.FechaTrans Between " & FechaYMD(gobjCond.Hora1, TipoDB) & " And " & FechaYMD(gobjCond.Hora2, TipoDB)
        If i = 12 Then
            sql = sql & " GNComprobante.FechaTrans Between " & FechaYMD(gobjCond.Hora1, TipoDB) & " And " & FechaYMD(DateAdd("d", -1, DateAdd("yyyy", i + 1, gobjCond.Hora1)), TipoDB)
        Else
            sql = sql & " GNComprobante.FechaTrans Between " & FechaYMD(DateAdd("m", i, gobjCond.Hora1), TipoDB) & " And " & FechaYMD(DateAdd("d", -1, DateAdd("m", i + 1, gobjCond.Hora1)), TipoDB)
        End If
        sql = sql & " AND GNComprobante.Estado  <>3 And GNComprobante.Estado <>0"
        If Len(gobjCond.Sucursal) > 0 Then
            sql = sql & "   and idLocal like " & gobjCond.Sucursal
        End If
'        If Len(gobjCond.CodCuenta1) > 0 And Len(gobjCond.CodCuenta2) > 0 Then
 '           sql = sql & "   CTCuenta.CodCuenta Between '" & gobjCond.CodCuenta1 & "' AND '" & gobjCond.CodCuenta2 & "'"
  '      End If
        
        
        VerificaExistenciaTablaTemp "tmpb" & i
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
'        Debug.Print sql
            
        '/*-------------------------------------------------
        ' * Calcular la suma por cuenta rango fecha 1
        ' --------------------------------------------------*/
            
        sql = " SELECT"
        sql = sql & " tmp1.idCuenta,"
        sql = sql & " Sum(tmp1.Debe0) AS Debe, Sum(tmp1.Haber0) AS Haber"
        sql = sql & " INTO tmpc" & i
        sql = sql & " FROM tmpa" & i & " tmp1"
        sql = sql & " GROUP BY tmp1.idCuenta"
            
        VerificaExistenciaTablaTemp "tmpc" & i
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        
        '/*-------------------------------------------------
        ' * Calcular la suma por cuenta rango fecha 2
        ' --------------------------------------------------*/
            
        sql = " SELECT"
        sql = sql & " tmp2.idCuenta,"
        sql = sql & " Sum(tmp2.Debe0) AS Debe, Sum(tmp2.Haber0) AS Haber"
        sql = sql & " INTO tmpd" & i
        sql = sql & " FROM tmpb" & i & " tmp2"
        sql = sql & " GROUP BY tmp2.idCuenta"
            
        VerificaExistenciaTablaTemp "tmpd" & i
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
    
    Next i

 '/*-------------------------------------------------
' * Devolver en formato de Balance/Estado P.G.
' --------------------------------------------------*/
 sql = " SELECT"
sql = sql & " ct.IdCuenta,"
sql = sql & " ct.CodCuenta,"
sql = sql & " ct.NombreCuenta, "
sql = sql & " CTL.Nombre, ct.BandTotal, "
sql = sql & " ct.Nivel,"
sql = sql & " ct.IdCuentaSuma,"
sql = sql & " ct.TipoCuenta,"
sql = sql & " ct.BandTotal, "
For i = 0 To 12
    sql = sql & " isnull(csb" & i & ".Debe,0) - isnull(csb" & i & ".Haber,0) AS Valor2,"
    sql = sql & " isnull(csa" & i & ".Debe,0) - isnull(csa" & i & ".Haber,0) AS Valor,"
    sql = sql & " abs(isnull(csb" & i & ".Debe,0) - isnull(csb" & i & ".Haber,0) ) - abs(isnull(csa" & i & ".Debe,0) - isnull(csa" & i & ".Haber,0)) AS Diferencia ,"
    sql = sql & " case when (isnull(csb" & i & ".Debe,0) - isnull(csb" & i & ".Haber,0))<>0 then ((abs(isnull(csb" & i & ".Debe,0) - isnull(csb" & i & ".Haber,0) ) - abs(isnull(csa" & i & ".Debe,0) - isnull(csa" & i & ".Haber,0)))/ (isnull(csb" & i & ".Debe,0) - isnull(csb" & i & ".Haber,0))) else 0 end AS PorDiferencia ,"
Next i
sql = sql & " 1 as a"
sql = sql & " FROM CTLocal ctl"
sql = sql & " right join CTcuenta ct"
For i = 0 To 12
    sql = sql & " left JOIN tmpc" & i & " csa" & i
    sql = sql & " full JOIN tmpd" & i & " csb" & i
    sql = sql & " ON csa" & i & ".idCuenta = csb" & i & ".idCuenta"
    sql = sql & " ON ct.idCuenta = csa" & i & ".idCuenta or ct.idCuenta = csb" & i & ".idCuenta"
Next i
sql = sql & " on ct.idlocal=ctl.IDLocal"
If Not gobjCond.IncluirCero Then
    sql = sql & " where ct.BandTotal=" & 0
End If



sql = sql & " ORDER BY ct.CodCuenta"

rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
UltimoRecordset rs
If Not rs.EOF Then v = rs.GetRows()
    
    'Mayoriza los valores
    MayorizaComparativoxMes v, gobjCond.Nivel

    'Pasa los valores de v a v2 cambiando formato
    ' y filtrando registros por TipoCuenta, Nivel y Valor
    j = 0
    For i = 0 To UBound(v, 2)
'        If Not IsNull(v(BAL_VALOR + 1, i)) Or Not IsNull(v(BAL_VALOR + 2, i)) Then
            'Solo los que tengan valor diferente de 0
'            If v(BAL_VALOR + 1, i) <> 0 Or v(BAL_VALOR + 2, i) <> 0 Then
                'Si es para balance, solo tipo 1,2 y 3, sino solo tipo 4 y 5
                If (bandBalance And (v(BAL_TIPO, i) <= 3)) Or _
                   ((Not bandBalance) And (v(BAL_TIPO, i) >= 4)) Then
                   'Solo hasta el nivel indicado
                   If v(BAL_NIVEL, i) <= gobjCond.Nivel Then
                        ReDim Preserve v2(100, j)
                        v2(0, j) = v(BAL_TIPO, i)          'TipoCuenta
                        v2(1, j) = v(BAL_CODCUENTA, i)      'CodCuenta
                        v2(2, j) = v(BAL_NOMBRECUENTA, i)   'Cuenta
                        v2(3, j) = v(BAL_CODSUCURSAL, i)          'CODSUCURSAL   JEAA 16/01/04
                        v2(4, j) = IIf(v(4, i), 1, 0)  'Cuenta de total
                        v2(5, j) = v(BAL_NIVEL, i)          'nivel
                        For k = 0 To 12
                            v2(6 + 4 * k, j) = v(BAL_VALOR + 5 + 4 * k, i) 'Valor
                            If Not bandBalance Then v2(6 + 4 * k, j) = v2(6 + 4 * k, j) * -1 'Invierta el signo cuando es EstadoPG
                            v2(7 + 4 * k, j) = v(BAL_VALOR + 6 + 4 * k, i) 'Valor
                            If Not bandBalance Then v2(7 + 4 * k, j) = v2(7 + 4 * k, j) * -1 'Invierta el signo cuando es EstadoPG
                            v2(8 + 4 * k, j) = v(BAL_VALOR + 7 + 4 * k, i) 'diferencia
                            If Not bandBalance Then v2(8 + 4 * k, j) = v2(8 + 4 * k, j) * -1 'Invierta el signo cuando es EstadoPG
                            v2(9 + 4 * k, j) = v(BAL_VALOR + 8 + 4 * k, i) ' % diferencia
                            
                        Next k
                        j = j + 1
                    End If
                End If
'            End If
'        End If
    Next i

    If j Then ConsCTBalanceComparativoxMes = v2
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Balance Comparativo x Mes", "CT"
End Function


Private Sub MayorizaComparativoxMes(ByRef v As Variant, Nivel As Integer)
    Dim i As Integer, nmax As Integer, j As Long, k As Integer
    Dim num As Integer
    Const INTER = 6
    Const VAL_A = 9
    Const VAL_B = 10
    Const VAL_D = 11
    Const VAL_P = 12
#If DAOLIB Then
    nmax = ObtieneMax(mdbEmpresa, "CTCuenta", "Nivel")
#Else
    nmax = ObtieneMaxconNivel(mcnEmpresa, "CTCuenta", "Nivel", Nivel)
#End If
    'Desde el nivel inferior hacia el nivel superior
    For num = 0 To Nivel
       For i = nmax To 0 Step -1
            For j = 0 To UBound(v, 2)
                If (v(BAL_NIVEL, j) = i) And (v(BAL_BANDTOTAL, j) = True) Then
'                    For k = 0 To 12
'                        v(VAL_A + 4 * k, j) = SumaHijosComparativoxMes(v, j, 4 * k)
'                        v(VAL_B + 4 * k, j) = SumaHijosComparativoxMes(v, j, 4 * k)
'                        v(VAL_D + 4 * k, j) = SumaHijosComparativoxMes(v, j, 4 * k)
'                        v(VAL_P + 4 * k, j) = SumaHijosComparativoxMes(v, j, 4 * k)
'                    Next k

                    For k = 9 To 58
'                        If k = 13 Then MsgBox ""
                    Select Case k
                        Case 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60
                            
                        Case Else
                            v(k, j) = SumaHijosComparativoxMes(v, j, k)
                        End Select
                    Next


                End If
            
            Next j
        Next i
  Next num
End Sub

Private Function SumaHijosComparativoxMes(ByRef v As Variant, ByVal j As Long, ByVal mes As Integer) As Currency
    Dim i As Long, t As Currency
    Dim col_val As Integer
    'col_val = 9 + (mes)
    col_val = mes
    'Busca todos los hijos de la cuenta indicada por j
    ' saca la suma total de los hijos en t
    
    For i = 0 To UBound(v, 2)
'        If v(1, i) = "411" Then MsgBox "hola"
        'Si IdCuentaSuma es igual a IdCuenta de j, es hijo de la cuenta j
        If v(6, i) = v(BAL_IDCUENTA, j) Then
            If Not IsNull(v(col_val, i)) Then t = t + v(col_val, i)
        End If
    Next i
    SumaHijosComparativoxMes = t
End Function

Public Function CargaConsolidadoBufferYolita() As Variant
    Dim sql As String, cond As String, CadenaPrecio As String, Trans As String, rs As Recordset
    Dim Dias As Integer, mes As Currency, numReg As Long
    Dim i As Long
    With gobjCond
        'dias = DateDiff("d", .fecha1, .fecha2)
        'mes = dias / 30
        Dias = DatePart("d", .fecha2)
        '------------ existencias
        sql = "select idinventario, sum(exist) as exist into tmpexist from ivexist group by idinventario"
        VerificaExistenciaTablaTemp "tmpexist"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        '---------- COMPRA ANTERIOR
        sql = " select iv.idinventario, pc.nombre, cantidad,fecha, costounitario "
        sql = sql & " Into tmpcp"
        sql = sql & " from ivinventario iv"
        sql = sql & " left join IVProveedorDetalle ip"
        sql = sql & " inner join pcprovcli pc on ip.IdProveedor=pc.idprovcli"
        sql = sql & " on iv.idinventario=ip.idinventario"
        VerificaExistenciaTablaTemp "tmpcp"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        '--------- buffer
            sql = " select "
            sql = sql & " i.idinventario"
            'sql = sql & " sum(i.cantidad*-1) as Cant,g.fechatrans "
            sql = sql & " Into tmpBUFFER"
            sql = sql & " from gncomprobante g inner join gntrans gnt on g.codtrans=gnt.codtrans"
            sql = sql & " inner join ivkardex i "
            sql = sql & " full join ivinventario iv left join tmpexist t on iv.idinventario= t.idinventario"
            sql = sql & " on i.idinventario = iv.idinventario"
            sql = sql & " on g.transid=i.transid"
            sql = sql & " Where Estado <> 3"
            sql = sql & " AND fechatrans between '" & .fecha1 & "' and '" & .fecha2 & "'"
            sql = sql & " AND  AnexoCodTipoComp in (" & PreparaCadena(.CodBanco2) & ") "
            sql = sql & " AND  AnexoCodTipoTrans in (" & PreparaCadena(.CodBanco1) & ") "
                If Not (Len(.Grupo1) = 0 And Len(.Grupo2) = 0) Then
                    sql = sql & " AND (codGrupo" & .NumGrupo & " BETWEEN '" & _
                    .Grupo1 & "' AND '" & .Grupo2 & "') "
                End If
                If Not (Len(.CodItem1) = 0 And Len(.CodItem2) = 0) Then
                    sql = sql & " AND (CodInventario BETWEEN '" & .CodItem1 & "' AND '" & .CodItem2 & "') "
                End If
            sql = sql & "  group by i.idinventario"
            VerificaExistenciaTablaTemp "tmpBUFFER"
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        For i = 0 To Dias - 1
            sql = " select "
            sql = sql & " i.idinventario,'" & DateAdd("d", i, .fecha1) & "'as Fechatrans,"
            sql = sql & " sum(i.cantidad*-1) as Cant "
            sql = sql & " Into tmpBUFFER" & i
            sql = sql & " from gncomprobante g inner join gntrans gnt on g.codtrans=gnt.codtrans"
            sql = sql & " inner join ivkardex i "
            sql = sql & " full join ivinventario iv left join tmpexist t on iv.idinventario= t.idinventario"
            sql = sql & " on i.idinventario = iv.idinventario"
            sql = sql & " on g.transid=i.transid"
            sql = sql & " Where Estado <> 3"
            sql = sql & " AND fechatrans between '" & DateAdd("d", i, .fecha1) & "' and '" & DateAdd("d", i, .fecha1) & "'"
            sql = sql & " AND  AnexoCodTipoComp in (" & PreparaCadena(.CodBanco2) & ") "
            sql = sql & " AND  AnexoCodTipoTrans in (" & PreparaCadena(.CodBanco1) & ") "
                If Not (Len(.Grupo1) = 0 And Len(.Grupo2) = 0) Then
                    sql = sql & " AND (codGrupo" & .NumGrupo & " BETWEEN '" & _
                    .Grupo1 & "' AND '" & .Grupo2 & "') "
                End If
                If Not (Len(.CodItem1) = 0 And Len(.CodItem2) = 0) Then
                    sql = sql & " AND (CodInventario BETWEEN '" & .CodItem1 & "' AND '" & .CodItem2 & "') "
                End If
            sql = sql & "  group by i.idinventario,g.fechatrans,iv.tiemporeposicion "
            VerificaExistenciaTablaTemp "tmpBUFFER" & i
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        Next
        For i = 0 To Dias - 1
            sql = "select t.idinventario,isnull(tb.cant,0) as cant,'" & DateAdd("d", i, .fecha1) & "' as Fechatrans"
            sql = sql & " Into tmpB" & i & " from tmpbuffer t "
            sql = sql & " full join tmpbuffer" & i & " tb on tb.idinventario = t.idinventario "
            VerificaExistenciaTablaTemp "tmpB" & i
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        Next
        'UNION FINAL
        sql = "Select * Into tmpBuffer from tmpb0"
        For i = 1 To Dias - 1
            sql = sql & " UNION ALL"
            sql = sql & " Select * from tmpb" & i
        Next
'        sql = Left(sql, Len(sql) - 9)
        VerificaExistenciaTablaTemp "tmpBuffer"
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        sql = "SELECT ivg1.codgrupo1,ivg1.Descripcion,"
        sql = sql & " ivg2.codgrupo2,ivg2.Descripcion,"
        sql = sql & " ivg3.codgrupo3,ivg3.Descripcion,"
        sql = sql & " ivg4.codgrupo4,ivg4.Descripcion,"
        sql = sql & " ivg5.codgrupo5,ivg5.Descripcion,"
        sql = sql & "iv.codinventario, IV.descripcion,iv.tiemporeposicion,"
        sql = sql & "((sum(buffer.cant)/" & Dias & " )*iv.tiemporeposicion) + (max(buffer.cant)*iv.tiemporeposicion)+(min(buffer.cant)*iv.tiemporeposicion) as Pp"
        'sql = sql & " ((sum(buffer.cant)/" & dias &) *iv.tiemporeposicion)+ ((max(buffer.cant)*iv.tiemporeposicion)+ (min(buffer.cant)*iv.tiemporeposicion)) as Pp"
        sql = sql & " ,isnull(exist,0) as exist,"
        sql = sql & "((max(buffer.cant)*iv.tiemporeposicion)+ (min(buffer.cant)*iv.tiemporeposicion)) as EMax,"
        sql = sql & "(min(buffer.cant)*iv.tiemporeposicion) as Emin,"
        sql = sql & "((max(buffer.cant)*iv.tiemporeposicion) + (Min(buffer.cant)*iv.tiemporeposicion))-isnull(exist,0)  as CantPed,"
        sql = sql & " Nombre , Cantidad, CostoUnitario, fecha "
        sql = sql & " from ivinventario iv "
        sql = sql & " left join ivgrupo1 ivg1  on iv.idgrupo1=ivg1.idgrupo1 "
        sql = sql & " left join ivgrupo2 ivg2  on iv.idgrupo2=ivg2.idgrupo2 "
        sql = sql & " left join ivgrupo3 ivg3  on iv.idgrupo3=ivg3.idgrupo3 "
        sql = sql & " left join ivgrupo4 ivg4  on iv.idgrupo4=ivg4.idgrupo4 "
        sql = sql & " left join ivgrupo5 ivg5  on iv.idgrupo5=ivg5.idgrupo5 "
        sql = sql & " left join tmpexist exist on iv.idinventario= exist.idinventario"
        sql = sql & " Inner join  tmpBUFFER BUFFER on iv.idinventario= BUFFER.idinventario"
        sql = sql & " left join  tmpcp cp on iv.idinventario= cp.idinventario"
        sql = sql & " where bandservicio=0"
         If Not (Len(.Grupo1) = 0 And Len(.Grupo2) = 0) Then
                sql = sql & " AND (IVG" & .NumGrupo & ".codGrupo" & .NumGrupo & " BETWEEN '" & _
                .Grupo1 & "' AND '" & .Grupo2 & "') "
            End If
            If Not (Len(.CodItem1) = 0 And Len(.CodItem2) = 0) Then
                sql = sql & " AND (CodInventario BETWEEN '" & .CodItem1 & "' AND '" & .CodItem2 & "') "
            End If
        sql = sql & " Group by "
        sql = sql & "ivg1.codgrupo1,ivg1.Descripcion, ivg2.codgrupo2,ivg2.Descripcion, ivg3.codgrupo3,ivg3.Descripcion, "
        sql = sql & "ivg4.codgrupo4,ivg4.Descripcion, ivg5.codgrupo5,ivg5.Descripcion,iv.codinventario, IV.descripcion,iv.tiemporeposicion"
        sql = sql & ",exist.exist,nombre,cantidad,costounitario,fecha"
'        sql = sql & " order by descripcion"
        Set rs = gobjMain.EmpresaActual.OpenRecordset(sql)
        Set CargaConsolidadoBufferYolita = rs
        Set rs = Nothing
    End With
End Function

'AUC empleados configurado tipo gestion
Public Function ListaEmpleadosGFlex(BandActivo As Boolean, BandInactivo As Boolean) As Variant
    Dim sql As String
    Dim rs As Recordset
    sql = "SELECT  pc.CodProvCli, pc.Nombre FROM Empleado pc "
    sql = sql & " Inner join personal p on p.idempleado = pc.idprovcli "
    sql = sql & " Where BandGestion=" & CadenaBool(True, Me.TipoDB)
    If BandActivo And Not BandInactivo Then
        sql = sql & " And p.bandActivo = 1"
    ElseIf BandInactivo And Not BandActivo Then
        sql = sql & " And p.bandActivo = 0"
    End If
    sql = sql & " ORDER BY pc.Nombre"
    Set rs = Me.OpenRecordset(sql)
    If Not (rs.EOF) Then
        rs.MoveLast
        rs.MoveFirst
        ListaEmpleadosGFlex = rs.GetRows(rs.RecordCount)
    Else
        Set ListaEmpleadosGFlex = rs
   End If
    Set rs = Nothing
End Function


Public Function ConsGNTransSinArchivoXML( _
                    Optional ByVal OrdenAscendente As Boolean) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    '*** MAKOTO 03/oct/00
    sql = "SELECT"
    'gobjCond.TopN = 1
    If gobjCond.TopN > 0 Then
        sql = sql & " TOP " & gobjCond.TopN
    End If
    '*** MAKOTO 05/feb/01 Mod. Aumentado 'NumDocRef' y 'Nombre'
    sql = sql & " vwConsGNTrans.TransID, vwConsGNTrans.FechaTrans, vwConsGNTrans.CodAsiento, vwConsGNTrans.CodTrans, "
    sql = sql & " vwConsGNTrans.NumTrans, "
    sql = sql & " vwConsGNTrans.NumDocRef, vwConsGNTrans.Nombre, claveacceso as Descripcion, archivoxml as CodCentro,"
    sql = sql & " vwConsGNTrans.Estado , "
    sql = sql & " case vwConsGNTrans.Estado when '0' THEN 'NO CONT' when '1' THEN 'APROV' when '2' THEN 'DESPA' when '3' THEN 'ANULA' when '4' THEN 'SEM DESP' END AS estadoL, "
    sql = sql & " vwConsGNTrans.CodPRAsiento,  "
    sql = sql & " enviado, informacionAdicional "
    sql = sql & "  FROM infocomprobantes inf inner join gncomprobante vwConsGNTrans on inf.transid = vwConsGNTrans.transid"
    

   
   sql = sql & " WHERE codigocomprobante =1 "
   'Ordern de filas
    If OrdenAscendente Then
'        sql = sql & " ORDER BY FechaTrans, TransID"         '*** MAKOTO 03/oct/00 Modificado para que salga más actual al primero
        sql = sql & " ORDER BY vwConsGNTrans.FechaTrans, vwConsGNTrans.HoraTrans, vwConsGNTrans.TransID"         '*** MAKOTO 07/dic/00 Modificado para HoraTrans
    Else
'        sql = sql & " ORDER BY FechaTrans DESC, TransID DESC"
        sql = sql & " ORDER BY vwConsGNTrans.FechaTrans DESC, vwConsGNTrans.HoraTrans DESC, vwConsGNTrans.TransID DESC"       '*** MAKOTO 07/dic/00 HoraTrans agregado
    End If
    Set rs = Me.OpenRecordset(sql)
    Set ConsGNTransSinArchivoXML = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta General " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function


Public Function ConsGNTrans2conArchivoXML( _
                    Optional ByVal OrdenAscendente As Boolean) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    '*** MAKOTO 03/oct/00
    sql = "SELECT"
    'gobjCond.TopN = 1
    If gobjCond.TopN > 0 Then
        sql = sql & " TOP " & gobjCond.TopN
    End If
    '*** MAKOTO 05/feb/01 Mod. Aumentado 'NumDocRef' y 'Nombre'
    sql = sql & " vwConsGNTrans.TransID, vwConsGNTrans.FechaTrans, vwConsGNTrans.CodAsiento, vwConsGNTrans.CodTrans, "
    sql = sql & " vwConsGNTrans.NumTrans, "
    sql = sql & " vwConsGNTrans.NumDocRef, vwConsGNTrans.Nombre, claveacceso as Descripcion, archivoXML as CodCentro,"
    sql = sql & " vwConsGNTrans.Estado , "
    sql = sql & " case vwConsGNTrans.Estado when '0' THEN 'NO CONT' when '1' THEN 'APROV' when '2' THEN 'DESPA' when '3' THEN 'ANULA' when '4' THEN 'SEM DESP' END AS estadoL, "
    sql = sql & " vwConsGNTrans.CodPRAsiento,  "
    'sql = sql & " vwConsGNTrans.EstadoFacElect  "
    'sql = sql & " case vwConsGNTrans.EstadoFacElect when '0' THEN 'GENERADO' when '1' THEN 'OK-AUTOR' when '2' THEN 'NO-AUTOR' when '3' THEN 'CONTINGEN' when '' THEN 'SEM DESP' END  "
    sql = sql & " vwConsGNTrans.enviado, vwConsGNTrans.informacionAdicional "
    sql = sql & "  FROM vwConsGNTrans inner join infocomprobantes info on vwConsGNTrans.TransID = info.transid"
    If Not gobjCond.IncluirCero Then
        If gobjCond.Cliente Then
            sql = sql & " INNER JOIN GNComprobante gn inner join PCProvCli pc "
            If gobjMain.GrupoActual.PermisoActual.ConsRepVen Then
                sql = sql & "  INNER JOIN FCVendedor  v"
                sql = sql & " ON v.idvendedor = pc.idvendedor "
            End If
                sql = sql & " ON pc.IdProvcli = gn.idClienteRef or pc.IdProvcli = gn.idProveedorRef "
                sql = sql & " ON gn.transid = vwConsGNTrans.transid "
        ElseIf gobjCond.Proveedor Then
            sql = sql & " INNER JOIN GNComprobante gn inner join PCProvCli pc "
            sql = sql & " ON pc.IdProvcli = gn.idProveedorRef "
            sql = sql & " ON gn.transid = vwConsGNTrans.transid "
        ElseIf gobjCond.Empleado Then
            sql = sql & " INNER JOIN GNComprobante gn inner join gnoferta gof inner join empleado pc "
            sql = sql & " ON pc.IdProvcli = gof.idempleadoRef "
            sql = sql & " ON gof.transid = gn.transid "
            sql = sql & " ON gn.transid = vwConsGNTrans.transid "
        End If
    End If
    'Condición de FechaTrans
    cond = "vwConsGNTrans.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB)
   'Condición de CodTrans
    If Len(cond) > 0 Then cond = cond & " AND "
    If Len(gobjCond.CodTrans) > 0 Then      'Si está especificado transaccion
        'Si es una sola transaccion
        If InStr(gobjCond.CodTrans, ",") = 0 Then
            cond = cond & "(vwConsGNTrans.CodTrans='" & gobjCond.CodTrans & "')"

        'Si está seleccionado varias trans.
       Else
            cond = cond & "(vwConsGNTrans.CodTrans IN (" & gobjCond.CodTrans & "))"
        End If
    Else
        'Si no hay condicion de cod.trans, selecciona todas las trans.
        ' que tenga permiso
        s = gobjMain.GrupoActual.PermisoActual.ListaTrans(True)
        If Len(s) > 0 Then
            cond = cond & "(vwConsGNTrans.CodTrans " & s & ")"
        Else
            cond = cond & "(vwConsGNTrans.CodTrans = '-------')"    'Para que NO devuelva nada si no tiene ningún permiso  '*** MAKOTO 26/dic/00
        End If
    End If
    'Condición de NumTrans
    If (gobjCond.NumTrans1 > 0) And (gobjCond.NumTrans2 > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.NumTrans BETWEEN " & gobjCond.NumTrans1 & " AND " & gobjCond.NumTrans2 & ")"
    ElseIf gobjCond.NumTrans1 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.NumTrans>=" & gobjCond.NumTrans1 & ")"
    ElseIf gobjCond.NumTrans2 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.NumTrans<=" & gobjCond.NumTrans2 & ")"
    End If
    'Condición de Estado
    If gobjCond.EstadoBool(ESTADO_NOAPROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.Estado<>" & ESTADO_NOAPROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_APROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.Estado<>" & ESTADO_APROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_DESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.Estado<>" & ESTADO_DESPACHADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_ANULADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.Estado<>" & ESTADO_ANULADO & ")"
    End If
    '----------------------------------------
    '----- CAO 13/06/2006
    '-----------------------------------------
    If gobjCond.EstadoBool(ESTADO_SEMDESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.Estado<>" & ESTADO_SEMDESPACHADO & ")"
   End If
    If Len(gobjCond.CodCentro1) > 0 And Len(gobjCond.CodCentro2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " codCentro between '" & gobjCond.CodCentro1 & "' and '" & gobjCond.CodCentro2 & "'"
    End If
    If Len(gobjCond.Codciudad1) > 0 And Len(gobjCond.Codciudad2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " vwConsGNTrans.codVendedor between '" & gobjCond.Codciudad1 & "' and '" & gobjCond.Codciudad2 & "'"
    End If
    If gobjMain.GrupoActual.PermisoActual.ConsRepVen Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " v.codvendedor = '" & gobjMain.UsuarioActual.codUsuario & "'  "
    End If
    If Len(gobjCond.CodPC1) > 0 And Not gobjCond.IncluirCero Then
        If Len(cond) > 0 Then cond = cond & " AND "
        If gobjMain.GrupoActual.PermisoActual.ConsRepVen Then
            cond = cond & " pc.codprovcli = '" & gobjCond.CodPC1 & "' " 'AUC aqui porque tiene filtro de vendedor
        Else
            cond = cond & " pc.codprovcli = '" & gobjCond.CodPC1 & "' " 'AQUI con el filtro de la vista
       End If
    End If

   If Len(cond) > 0 Then sql = sql & " WHERE " & cond
   'Ordern de filas
    If OrdenAscendente Then
'        sql = sql & " ORDER BY FechaTrans, TransID"         '*** MAKOTO 03/oct/00 Modificado para que salga más actual al primero
        sql = sql & " ORDER BY vwConsGNTrans.FechaTrans, vwConsGNTrans.HoraTrans, vwConsGNTrans.TransID"         '*** MAKOTO 07/dic/00 Modificado para HoraTrans
    Else
'        sql = sql & " ORDER BY FechaTrans DESC, TransID DESC"
        sql = sql & " ORDER BY vwConsGNTrans.FechaTrans DESC, vwConsGNTrans.HoraTrans DESC, vwConsGNTrans.TransID DESC"       '*** MAKOTO 07/dic/00 HoraTrans agregado
    End If
    Set rs = Me.OpenRecordset(sql)
    Set ConsGNTrans2conArchivoXML = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta General " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function


Public Function ConsVentas3M() As Variant


    Dim sql As String, cond As String, CadenaValores As String, Condicion As String
    Dim rs As Recordset, f1 As String, numReg As Long, Trans As String
    Dim aux As String
        
        
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   With gobjCond
   
        sql = "SELECT * from vwVentas3M"
        sql = sql & " WHERE "
        If (.fecha1 <> 0) Or (.fecha2 <> 0) Then
                sql = sql & "  (FechaTrans BETWEEN " & _
                       FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                        FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
        End If

    End With
   
    
    
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsVentas3M = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Ventas 3M " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
End Function

Public Function ConsExist3M() As Variant


    Dim sql As String, cond As String, CadenaValores As String, Condicion As String
    Dim rs As Recordset, f1 As String, numReg As Long, Trans As String
    Dim aux As String
        
    
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   With gobjCond
   
         sql = "SELECT "
        sql = sql & "IVInventario.CodInventario,"
        sql = sql & "IVInventario.Descripcion, "
        sql = sql & " SUM(IVKardex.Cantidad) AS Existencia,  "
        sql = sql & "IVUnidad.CodUnidad, '" & .FechaCorte & "' as fecha "
    
        sql = sql & " from IVInventario"
        sql = sql & " left join ivunidad on ivunidad.idunidad=ivinventario.idunidad"
        sql = sql & " inner join IVKardex"
        sql = sql & " INNER JOIN  GNtrans"
        sql = sql & " INNER JOIN GNComprobante"
        sql = sql & " ON GNtrans.Codtrans = GNCOmprobante.Codtrans"
        sql = sql & " ON IVKardex.transID = GNComprobante.transID"
        sql = sql & " ON IVInventario.IdInventario = IVKardex.IdInventario"
    
        'If Len(cond) > 0 Then cond = cond & " AND "

        cond = cond & " where ((GNtrans.AfectaCantidad) = " & CadenaBool(True, gobjMain.EmpresaActual.TipoDB) & ") "
        cond = cond & " AND GNComprobante.Estado <> 3 AND BandServicio = " & CadenaBool(False, gobjMain.EmpresaActual.TipoDB)
        cond = cond & " and GNComprobante.FechaTrans <= " & FechaYMD(.FechaCorte, gobjMain.EmpresaActual.TipoDB) & " "
         If InStr(cond, "WHERE IDGRUPO5=385 ") = 0 Then sql = sql & " and IDGRUPO5=385 "
         sql = sql & cond
         sql = sql & " GROUP BY "
         sql = sql & "IVInventario.CodInventario, IVInventario.Descripcion, "
         sql = sql & "IVUnidad.CodUnidad"
        sql = sql & " HAVING SUM(IVKardex.Cantidad) <> 0 "
        sql = sql & " order by CodInventario"

    End With
   
    
    
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsExist3M = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons exist 3M " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
End Function


Public Function ListaEmpleadoGFlexGrid() As String
    Dim s As String, sql As String
    Dim rs As Recordset
    
    sql = "SELECT CodProvcli,Nombre FROM Empleado "
    sql = sql & " Inner join personal on personal.idempleado = empleado.idprovcli"
    sql = sql & " WHERE BandActivo=" & CadenaBool(True, TipoDB)
    sql = sql & " AND BandGestion=" & CadenaBool(True, TipoDB)
    sql = sql & " ORDER BY CodProvcli"

    Set rs = Me.OpenRecordset(sql)
#If DAOLIB Then
    s = "|" & GetStringDAO(rs, 10 + 40)         '*** MAKOTO 25/ene/01 Mod.
#Else
    If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
#End If
    ListaEmpleadoGFlexGrid = s
    rs.Close
    Set rs = Nothing
End Function

Public Function ConsIVTransImpresionEtiquetasISOxFacturacionFecha(ByVal CodTrans As String, ByVal NumTrans As Long, fechadesde As Date, fechaHasta As Date, motivo As Integer) As Recordset
    Dim sql As String, cond As String, s As String, rs As Recordset, i As Integer, rsItem As Recordset
    Dim numReg As Long, CantItem As Integer
    'Condición de CodTrans
'    If Len(NumDocRef) > 0 Then
'          cond = cond & "(gning.numdocref ='" & NumDocRef & "')"
'    End If
    If Len(CodTrans) > 0 Then
        cond = cond & " and gnpro.codtrans='" & CodTrans & "' "
    End If
    If NumTrans > 0 Then
        cond = cond & " and gnpro.numtrans=" & NumTrans
    End If
    
'    cond = cond & " and motivo= " & Motivo
        
    'If Len(CodTrans) > 0 Then
'        cond = cond & " and gnpro.fechatrans between " & FechaYMD(FechaDesde, gobjMain.TipoDB) & " and " & FechaYMD(FechaHasta, gobjMain.TipoDB)

    'End If
        
        sql = "select"
        sql = sql & " gning.numdocref ,"
        sql = sql & " ivk.orden, iviso.id as tiket,"
        sql = sql & " ivmar.codinventario as marca,  ivtam.codinventario as tamanio,"
        sql = sql & " iviso.NumSerie, DisenioOri,ivtra.codinventario as trabajo,"
        sql = sql & " (gning.CodTrans+' '+CONVERT(VARCHAR,gning.NumTrans)) AS TransIng, gning.fechatrans,"
        sql = sql & " pc.codprovcli, pc.NombreAlterno, fc.codvendedor, pcg.NombreAlterno, "
        sql = sql & " case motivo when 0 then 'Rencauche' when 1 then 'Compra' when 2 then 'Devolucion' when 3 then 'Reparacion' end as motivo"
        sql = sql & " from IVInventarioDetalleISO iviso"
        sql = sql & " inner join ivkardex ivk"
        sql = sql & " inner join ivinventario ivtam on ivk.Idinventario=ivtam.idinventario"
        sql = sql & " on iviso.idkardex=ivk.id"
        sql = sql & " left join ivinventario ivmar on iviso.IdMarca=ivmar.idinventario"
        sql = sql & " left join ivinventario ivtra on iviso.IdTrabajo=ivtra.idinventario"
       sql = sql & " left join gncomprobante gning"
        sql = sql & " inner join pcprovcli pc on gning.idclienteref= pc.idprovcli"
        sql = sql & " inner join fcVendedor fc on gning.idvendedor= fc.idvendedor"
        sql = sql & " left join pcprovcli pcg on gning.idgaranteref= pcg.idprovcli"
        sql = sql & " on iviso.transid = gning.transid"
       sql = sql & " left join gncomprobante gnpro"
       sql = sql & " on gnpro.transid = iviso.transidFactura"
        
        
        sql = sql & " WHERE gning.estado <>3   " & cond
        sql = sql & "  ORDER BY pc.NombreAlterno, ivtam.codinventario "
   Set rs = Me.OpenRecordset(sql)
    Set ConsIVTransImpresionEtiquetasISOxFacturacionFecha = rs
    Set rs = Nothing
        Me.GrabaGNLogAccion "CONSULTA", "Consulta Impresion Etiqueta x Lote " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function

Public Function ListaElementosTipoRolNew(ByVal mNuevo As Boolean, ByVal transid As Long) As Variant                                'Recordset
    Dim sql As String, rs As Recordset
    If mNuevo Then
        sql = "SELECT * FROM vwElemento"
        sql = sql & " WHERE bandActivo=1"
        sql = sql & " AND (CodTipoRol = '" & gobjMain.objCondicion.CodTipoRol & "'"
        sql = sql & " OR CodTipoRol1 = '" & gobjMain.objCondicion.CodTipoRol & "'"
        sql = sql & " OR CodTipoRol2 = '" & gobjMain.objCondicion.CodTipoRol & "'"
        sql = sql & " OR CodTipoRol3 = '" & gobjMain.objCondicion.CodTipoRol & "')"
        sql = sql & " ORDER BY Orden"
    Else
        sql = "SELECT vw.* FROM vwElemento vw"
        sql = sql & " Inner join roldetalle rd on rd.idelemento = vw.idelemento "
        sql = sql & " Where rd.transid = " & transid
        sql = sql & " AND (vw.CodTipoRol = '" & gobjMain.objCondicion.CodTipoRol & "'"
        sql = sql & " OR vw.CodTipoRol1 = '" & gobjMain.objCondicion.CodTipoRol & "'"
        sql = sql & " OR vw.CodTipoRol2 = '" & gobjMain.objCondicion.CodTipoRol & "'"
        sql = sql & " OR vw.CodTipoRol3 = '" & gobjMain.objCondicion.CodTipoRol & "')"
        sql = sql & " Group by vw.IdElemento,vw.CodElemento,vw.Nombre,vw.Descripcion,vw.Formula,vw.Meses,vw.Tipo,vw.Editable,"
        sql = sql & " vw.Orden,vw.BandActivo,vw.Visible,vw.Imprimir,vw.FechaGrabado,vw.BandValidarAsignar,vw.BandMostrarenreporte,"
        sql = sql & " vw.BandMostrarenprovision , vw.BandAcumular, "
        sql = sql & " vw.AfectaEmp,vw.Debe,vw.Haber,vw.IdTipoRol1,vw.IdTipoRol2,vw.IdTipoRol3,"
        sql = sql & " vw.BandGastoDist , vw.BandBanco, vw.IdTipoRol4, vw.IdTipoRol5, vw.IdTipoRol6, vw.IdTipoRol, "
        sql = sql & " vw.IdTipoRol7,vw.IdTipoRol8,vw.IdTipoRol9,vw.IdTipoRol10,vw.codTipoROL,"
        sql = sql & " vw.codTipoROL1,vw.codTipoROL2,vw.codTipoROL3,vw.codTipoROL4,vw.codTipoROL5,vw.codTipoROL6,"
        sql = sql & " vw.codTipoROL7,vw.codTipoROL8,vw.codTipoROL9,vw.codTipoROL10,  vw.BandGastoDistPorc"
        sql = sql & " ORDER BY vw.Orden"
    End If
        Set rs = Me.OpenRecordset(sql)
    Set ListaElementosTipoRolNew = rs
    Set rs = Nothing
End Function
'AUC deuda por garante para yolita
Public Function ConsTSPorCobrarPagarGar( _
                    ByVal PorCobrar As Boolean, _
                    ByVal CodProvcli As String, _
                    ByVal FechaVenci As Date, _
                    ByVal CodForma As String, _
                    ByVal CodMoneda As String, _
                    ByVal CodGrupo1 As String) As Variant
    Dim aux_codpc As String, aux_f1 As Date, aux_f2 As Date
    Dim aux_PorCobrar As Boolean, aux_Cliente As Boolean, aux_Proveedor As Boolean
    Dim aux_CodForma As String, aux_CodMoneda As String, aux_codgrupo As String
    Dim aux_incluircero As Boolean
    With gobjMain.objCondicion
        'Conservar valores actuales para que no afecte a otras consultas
        aux_codpc = .CodPC1
        aux_f1 = .fecha1
        aux_f2 = .fecha2
        aux_PorCobrar = .PorCobrar
        aux_Cliente = .Cliente
        aux_Proveedor = .Proveedor
        aux_CodForma = .CodForma
        aux_CodMoneda = .CodMoneda
        aux_codgrupo = .CodGrupo
        aux_incluircero = .IncluirCero
        .PorCobrar = PorCobrar
        .Cliente = True
        .Proveedor = True
        .CodPC1 = CodProvcli
        .fecha1 = Me.GNOpcion.FechaInicio
        .fecha2 = FechaVenci
        .CodForma = CodForma
        .CodMoneda = CodMoneda
        .CodGrupo = CodGrupo1
        .IncluirCero = False
        Set ConsTSPorCobrarPagarGar = ConsTSPorCobrarPagar7()
        'Recuperar valores reservados
        .CodPC1 = aux_codpc
        .fecha1 = aux_f1
        .fecha2 = aux_f2
        .PorCobrar = aux_PorCobrar
        .Cliente = aux_Cliente
        .Proveedor = aux_Proveedor
        .CodForma = aux_CodForma
        .CodMoneda = aux_CodMoneda
        .CodGrupo = aux_codgrupo
        .IncluirCero = aux_incluircero
    End With
End Function
Public Function ConsTSPorCobrarPagar7() As Variant
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim objCond As Condicion
    Set objCond = gobjMain.objCondicion
    'Si no está especificada la moneda, coge la Moneda predeterminada
    If Len(objCond.CodMoneda) = 0 Then objCond.CodMoneda = MONEDA_PRE
    numMoneda = Me.GNOpcion.IndiceMoneda(objCond.CodMoneda)
    sql = "spConsTSPorCobrarpagarGarante " & numMoneda & ", " & _
                objCond.CodMoneda & "," & _
                CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                CadenaBool(False, TipoDB) & "," & _
                FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                objCond.CodPC1 & "','" & _
                objCond.CodPC1 & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodGrupo & "'"
    Set rs = Me.OpenRecordset(sql)
    Set ConsTSPorCobrarPagar7 = rs
    Set rs = Nothing
    Set objCond = Nothing
End Function

Public Function CalculaValorDetalleVCreditoRet(ByVal transid As Long) As Currency
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    
    sql = "  select ISNULL(Sum(Valor),0) AS Valor "
    sql = sql & "from TSDetalleVCredito"
    sql = sql & " Where Transid = " & transid
    sql = sql & " And bandret= 1"
    
    Set rs = Me.OpenRecordset(sql)
    
    If rs.RecordCount > 0 Then
        CalculaValorDetalleVCreditoRet = rs.Fields("Valor")
    Else
        CalculaValorDetalleVCreditoRet = 0
    End If
    Set rs = Nothing
End Function

Public Function ConsVentasDINARDAP2015() As Variant
    Dim sql As String, cond As String, CadenaValores As String, Condicion As String
    Dim rs As Recordset, f1 As String, numReg As Long, Trans As String
    Dim aux As String, MontoMinimo As Currency
       
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   With gobjCond
        

        f1 = .fecha1
        
        If DatePart("yyyy", f1) > 2013 Then
            f1 = .fecha1
            If DatePart("yyyy", f1) = 2015 Then
                MontoMinimo = 53.1
            ElseIf DatePart("yyyy", f1) = 2014 Then
                MontoMinimo = 51
            End If
        ElseIf DatePart("yyyy", f1) = 2013 Then
            f1 = "31/12/2013"
            MontoMinimo = 51
        ElseIf DatePart("yyyy", f1) = 2012 Then
            f1 = "31/12/2012"
            MontoMinimo = 43.8
        ElseIf DatePart("yyyy", f1) = 2011 Then
            f1 = "31/12/2011"
            MontoMinimo = 39.6
        ElseIf DatePart("yyyy", f1) = 2010 Then
            f1 = "31/12/2010"
            MontoMinimo = 36
        End If
        If Len(gobjCond.CodGrupo) > 0 Then
            sql = sql & " and G.CODTRANS IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
        End If
        '------------------------- FACTURAS x Vencer
        
        sql = " SELECT  gnc.transid,"
        sql = sql & " max(p.FechaEmision) as FechaEmision ,"
        sql = sql & " sum(p.debe) as TotalFactura,"
        sql = sql & " max(p.FechaVenci) As FechaVenci"
        sql = sql & " into tmpFactura0"
        sql = sql & " FROM GNComprobante gnc"
        sql = sql & " inner join PCKARDEX p"
        sql = sql & " inner join tsformacobropago tsf on p.idforma = tsf.idforma"
        sql = sql & " on gnc.transid=p.transid"
        sql = sql & " Where gnc.Estado <> 3"
        sql = sql & " and p.debe>0"
        sql = sql & " and tsf.considerarcomoefectivo=0"
        sql = sql & " AND p.FechaEmision<=" & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB)
        sql = sql & " AND p.FechaVenci=dateadd(d,0," & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") "
        If Len(gobjCond.CodGrupo) > 0 Then
            sql = sql & " and Gnc.CODTRANS IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
        End If
        
        sql = sql & "  group by gnc.transid"
        
        VerificaExistenciaTablaTemp "tmpFactura0"
        Me.EjecutarSQL sql, numReg
        
        
        sql = " SELECT  gnc.transid,"
        sql = sql & " max(p.FechaEmision) as FechaEmision ,"
        sql = sql & " sum(p.debe) as TotalFactura,"
        sql = sql & " max(p.FechaVenci) As FechaVenci"
        sql = sql & " into tmpFactura30"
        sql = sql & " FROM GNComprobante gnc"
        sql = sql & " inner join PCKARDEX p"
        sql = sql & " inner join tsformacobropago tsf on p.idforma = tsf.idforma"
        sql = sql & " on gnc.transid=p.transid"
        sql = sql & " Where gnc.Estado <> 3"
        sql = sql & " and p.debe>0"
        sql = sql & " and tsf.considerarcomoefectivo=0"
        sql = sql & " and DATEDIFF(D, FECHAEMISION,FechaVenci)>0 AND DATEDIFF(D, FECHAEMISION,FechaVenci)<31"
        If Len(gobjCond.CodGrupo) > 0 Then
            sql = sql & " and Gnc.CODTRANS IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
        End If
        
        sql = sql & "  group by gnc.transid"
        
        VerificaExistenciaTablaTemp "tmpFactura30"
        Me.EjecutarSQL sql, numReg
        
        sql = " SELECT  gnc.transid,"
        sql = sql & " max(p.FechaEmision) as FechaEmision ,"
        sql = sql & " sum(p.debe) as TotalFactura,"
        sql = sql & " max(p.FechaVenci) As FechaVenci"
        sql = sql & " into tmpFactura90"
        sql = sql & " FROM GNComprobante gnc"
        sql = sql & " inner join PCKARDEX p"
        sql = sql & " inner join tsformacobropago tsf on p.idforma = tsf.idforma"
        sql = sql & " on gnc.transid=p.transid"
        sql = sql & " Where gnc.Estado <> 3"
        sql = sql & " and p.debe>0"
        sql = sql & " and tsf.considerarcomoefectivo=0"
        sql = sql & " and DATEDIFF(D, FECHAEMISION,FechaVenci)>30 AND DATEDIFF(D, FECHAEMISION,FechaVenci)<91"
        If Len(gobjCond.CodGrupo) > 0 Then
            sql = sql & " and Gnc.CODTRANS IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
        End If
        
        sql = sql & "  group by gnc.transid"
        
        VerificaExistenciaTablaTemp "tmpFactura90"
        Me.EjecutarSQL sql, numReg
        
        sql = " SELECT  gnc.transid,"
        sql = sql & " max(p.FechaEmision) as FechaEmision ,"
        sql = sql & " sum(p.debe) as TotalFactura,"
        sql = sql & " max(p.FechaVenci) As FechaVenci"
        sql = sql & " into tmpFactura180"
        sql = sql & " FROM GNComprobante gnc"
        sql = sql & " inner join PCKARDEX p"
        sql = sql & " inner join tsformacobropago tsf on p.idforma = tsf.idforma"
        sql = sql & " on gnc.transid=p.transid"
        sql = sql & " Where gnc.Estado <> 3"
        sql = sql & " and p.debe>0"
        sql = sql & " and tsf.considerarcomoefectivo=0"
        sql = sql & " and DATEDIFF(D, FECHAEMISION,FechaVenci)>90 AND DATEDIFF(D, FECHAEMISION,FechaVenci)<181"
        If Len(gobjCond.CodGrupo) > 0 Then
            sql = sql & " and Gnc.CODTRANS IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
        End If
        
        sql = sql & "  group by gnc.transid"
        
        VerificaExistenciaTablaTemp "tmpFactura180"
        Me.EjecutarSQL sql, numReg
        
        sql = " SELECT  gnc.transid,"
        sql = sql & " max(p.FechaEmision) as FechaEmision ,"
        sql = sql & " sum(p.debe) as TotalFactura,"
        sql = sql & " max(p.FechaVenci) As FechaVenci"
        sql = sql & " into tmpFactura360"
        sql = sql & " FROM GNComprobante gnc"
        sql = sql & " inner join PCKARDEX p"
        sql = sql & " inner join tsformacobropago tsf on p.idforma = tsf.idforma"
        sql = sql & " on gnc.transid=p.transid"
        sql = sql & " Where gnc.Estado <> 3"
        sql = sql & " and p.debe>0"
        sql = sql & " and tsf.considerarcomoefectivo=0"
        sql = sql & " and DATEDIFF(D, FECHAEMISION,FechaVenci)>180 AND DATEDIFF(D, FECHAEMISION,FechaVenci)<361"
        If Len(gobjCond.CodGrupo) > 0 Then
            sql = sql & " and Gnc.CODTRANS IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
        End If
        
        sql = sql & "  group by gnc.transid"
        
        VerificaExistenciaTablaTemp "tmpFactura360"
        Me.EjecutarSQL sql, numReg
        
        sql = " SELECT  gnc.transid,"
        sql = sql & " max(p.FechaEmision) as FechaEmision ,"
        sql = sql & " sum(p.debe) as TotalFactura,"
        sql = sql & " max(p.FechaVenci) As FechaVenci"
        sql = sql & " into tmpFacturaM360"
        sql = sql & " FROM GNComprobante gnc"
        sql = sql & " inner join PCKARDEX p"
        sql = sql & " inner join tsformacobropago tsf on p.idforma = tsf.idforma"
        sql = sql & " on gnc.transid=p.transid"
        sql = sql & " Where gnc.Estado <> 3"
        sql = sql & " and p.debe>0"
        sql = sql & " and tsf.considerarcomoefectivo=0"
        sql = sql & " and DATEDIFF(D, FECHAEMISION,FechaVenci)>360"
        If Len(gobjCond.CodGrupo) > 0 Then
            sql = sql & " and Gnc.CODTRANS IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
        End If
        
        sql = sql & "  group by gnc.transid"
        
        VerificaExistenciaTablaTemp "tmpFacturaM360"
        Me.EjecutarSQL sql, numReg
        
  
        '------------------------- FACTURAS x Vencidas
        
        sql = " SELECT  gnc.transid,"
        sql = sql & " max(p.FechaEmision) as FechaEmision ,"
        sql = sql & " sum(p.debe) as TotalFactura,"
        sql = sql & " max(p.FechaVenci) As FechaVenci"
        sql = sql & " into tmpFacturaV0"
        sql = sql & " FROM GNComprobante gnc"
        sql = sql & " inner join PCKARDEX p"
        sql = sql & " inner join tsformacobropago tsf on p.idforma = tsf.idforma"
        sql = sql & " on gnc.transid=p.transid"
        sql = sql & " Where gnc.Estado <> 3"
        sql = sql & " and p.debe>0"
        sql = sql & " and tsf.considerarcomoefectivo=0"
        sql = sql & " AND p.FechaEmision<=" & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB)
        sql = sql & " AND p.FechaVenci=dateadd(d,0," & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") "
        If Len(gobjCond.CodGrupo) > 0 Then
            sql = sql & " and Gnc.CODTRANS IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
        End If
        
        sql = sql & "  group by gnc.transid"
        
        VerificaExistenciaTablaTemp "tmpFacturav0"
        Me.EjecutarSQL sql, numReg
        
        
        sql = " SELECT  gnc.transid,"
        sql = sql & " max(p.FechaEmision) as FechaEmision ,"
        sql = sql & " sum(p.debe) as TotalFactura,"
        sql = sql & " max(p.FechaVenci) As FechaVenci"
        sql = sql & " into tmpFacturav30"
        sql = sql & " FROM GNComprobante gnc"
        sql = sql & " inner join PCKARDEX p"
        sql = sql & " inner join tsformacobropago tsf on p.idforma = tsf.idforma"
        sql = sql & " on gnc.transid=p.transid"
        sql = sql & " Where gnc.Estado <> 3"
        sql = sql & " and p.debe>0"
        sql = sql & " and tsf.considerarcomoefectivo=0"
        sql = sql & " and p.FechaVenci between DATEadd(d, -30 ," & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") AND DATEadd(d, 0," & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")"
        If Len(gobjCond.CodGrupo) > 0 Then
            sql = sql & " and Gnc.CODTRANS IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
        End If
        
        sql = sql & "  group by gnc.transid"
        
        VerificaExistenciaTablaTemp "tmpFacturav30"
        Me.EjecutarSQL sql, numReg
        
        sql = " SELECT  gnc.transid,"
        sql = sql & " max(p.FechaEmision) as FechaEmision ,"
        sql = sql & " sum(p.debe) as TotalFactura,"
        sql = sql & " max(p.FechaVenci) As FechaVenci"
        sql = sql & " into tmpFacturav90"
        sql = sql & " FROM GNComprobante gnc"
        sql = sql & " inner join PCKARDEX p"
        sql = sql & " inner join tsformacobropago tsf on p.idforma = tsf.idforma"
        sql = sql & " on gnc.transid=p.transid"
        sql = sql & " Where gnc.Estado <> 3"
        sql = sql & " and p.debe>0"
        sql = sql & " and tsf.considerarcomoefectivo=0"
        sql = sql & " and p.FechaVenci between DATEadd(d, -90 ," & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") AND DATEadd(d, -30," & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")"
        If Len(gobjCond.CodGrupo) > 0 Then
            sql = sql & " and Gnc.CODTRANS IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
        End If
        
        sql = sql & "  group by gnc.transid"
        
        VerificaExistenciaTablaTemp "tmpFacturav90"
        Me.EjecutarSQL sql, numReg
        
        sql = " SELECT  gnc.transid,"
        sql = sql & " max(p.FechaEmision) as FechaEmision ,"
        sql = sql & " sum(p.debe) as TotalFactura,"
        sql = sql & " max(p.FechaVenci) As FechaVenci"
        sql = sql & " into tmpFacturav180"
        sql = sql & " FROM GNComprobante gnc"
        sql = sql & " inner join PCKARDEX p"
        sql = sql & " inner join tsformacobropago tsf on p.idforma = tsf.idforma"
        sql = sql & " on gnc.transid=p.transid"
        sql = sql & " Where gnc.Estado <> 3"
        sql = sql & " and p.debe>0"
        sql = sql & " and tsf.considerarcomoefectivo=0"
        sql = sql & " and p.FechaVenci between DATEadd(d, -180 ," & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") AND DATEadd(d, -90," & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")"
        If Len(gobjCond.CodGrupo) > 0 Then
            sql = sql & " and Gnc.CODTRANS IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
        End If
        
        sql = sql & "  group by gnc.transid"
        
        VerificaExistenciaTablaTemp "tmpFacturav180"
        Me.EjecutarSQL sql, numReg
        
        sql = " SELECT  gnc.transid,"
        sql = sql & " max(p.FechaEmision) as FechaEmision ,"
        sql = sql & " sum(p.debe) as TotalFactura,"
        sql = sql & " max(p.FechaVenci) As FechaVenci"
        sql = sql & " into tmpFacturav360"
        sql = sql & " FROM GNComprobante gnc"
        sql = sql & " inner join PCKARDEX p"
        sql = sql & " inner join tsformacobropago tsf on p.idforma = tsf.idforma"
        sql = sql & " on gnc.transid=p.transid"
        sql = sql & " Where gnc.Estado <> 3"
        sql = sql & " and p.debe>0"
        sql = sql & " and tsf.considerarcomoefectivo=0"
        sql = sql & " and p.FechaVenci between DATEadd(d, -360 ," & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") AND DATEadd(d, -180," & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")"
        If Len(gobjCond.CodGrupo) > 0 Then
            sql = sql & " and Gnc.CODTRANS IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
        End If
        
        sql = sql & "  group by gnc.transid"
        
        VerificaExistenciaTablaTemp "tmpFacturav360"
        Me.EjecutarSQL sql, numReg
        
        sql = " SELECT  gnc.transid,"
        sql = sql & " max(p.FechaEmision) as FechaEmision ,"
        sql = sql & " sum(p.debe) as TotalFactura,"
        sql = sql & " max(p.FechaVenci) As FechaVenci"
        sql = sql & " into tmpFacturavM360"
        sql = sql & " FROM GNComprobante gnc"
        sql = sql & " inner join PCKARDEX p"
        sql = sql & " inner join tsformacobropago tsf on p.idforma = tsf.idforma"
        sql = sql & " on gnc.transid=p.transid"
        sql = sql & " Where gnc.Estado <> 3"
        sql = sql & " and p.debe>0"
        sql = sql & " and tsf.considerarcomoefectivo=0"
        sql = sql & " and p.FechaVenci < DATEadd(d, -360 ," & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")"
        If Len(gobjCond.CodGrupo) > 0 Then
            sql = sql & " and Gnc.CODTRANS IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
        End If
        
        sql = sql & "  group by gnc.transid"
        
        VerificaExistenciaTablaTemp "tmpFacturavM360"
        Me.EjecutarSQL sql, numReg
    
        
    '---------------  datos factura
        sql = " SELECT  max(p.transid) as transid "
        sql = sql & " Into tmpTrasFactura "
        sql = sql & " FROM GNComprobante gnc"
        sql = sql & " LEFT join PCKardex p inner join tsformacobropago tsf on p.idforma = tsf.idforma "
        sql = sql & " on gnc.transid=p.transid"
        sql = sql & " Where"
        sql = sql & " gnc.Estado<>3"
        sql = sql & " and p.debe>0"
        sql = sql & " and tsf.considerarcomoefectivo=0"
        
        If DatePart("yyyy", f1) > 2013 Then
            sql = sql & " and  fechaEmision between "
            sql = sql & FechaYMD("01/" & DatePart("m", f1) & "/" & DatePart("yyyy", f1), gobjMain.EmpresaActual.TipoDB)
            sql = sql & " and"
            sql = sql & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB)
        ElseIf DatePart("yyyy", f1) = 2013 Then
            sql = sql & " and  fechaTrans between '01/01/2013' and '31/12/2013' "
        ElseIf DatePart("yyyy", f1) = 2012 Then
            sql = sql & " and  fechaTrans between '01/01/2012' and '31/12/2012' "
        ElseIf DatePart("yyyy", f1) = 2011 Then
            sql = sql & " and  fechaTrans between '01/01/2011' and '31/12/2011' "
        ElseIf DatePart("yyyy", f1) = 2010 Then
            sql = sql & " and  fechaTrans between '01/01/2010' and '31/12/2010' "
        End If
        If Len(gobjCond.CodGrupo) > 0 Then
            sql = sql & " and Gnc.CODTRANS IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
        End If
        
        sql = sql & " group by p.transid"
        
        VerificaExistenciaTablaTemp "tmpTrasFactura"
        Me.EjecutarSQL sql, numReg
        
        
        
        sql = " SELECT p.transid ,"
        sql = sql & " isnull(sum(v0.TotalFactura),0) as debe0,"
        sql = sql & " isnull(sum(v30.TotalFactura),0) as debe30,"
        sql = sql & " isnull(sum(v90.TotalFactura),0) as debe90,"
        sql = sql & " isnull(sum(v180.TotalFactura),0) as debe180,"
        sql = sql & " isnull(sum(v360.TotalFactura),0) as debe360,"
        sql = sql & " isnull(sum(vm360.TotalFactura),0) as debemas360,"
        
        sql = sql & " isnull(sum(vv0.TotalFactura),0) as debev0,"
        sql = sql & " isnull(sum(vv30.TotalFactura),0) as debev30,"
        sql = sql & " isnull(sum(vv90.TotalFactura),0) as debev90,"
        sql = sql & " isnull(sum(vv180.TotalFactura),0) as debev180,"
        sql = sql & " isnull(sum(vv360.TotalFactura),0) as debev360,"
        sql = sql & " isnull(sum(vvm360.TotalFactura),0) as debemasv360,"
        
        
        sql = sql & " isnull(sum(v0.TotalFactura),0) +isnull(sum(v30.TotalFactura),0) +isnull(sum(v90.TotalFactura),0) +isnull(sum(v180.TotalFactura),0) +isnull(sum(v360.TotalFactura),0) +isnull(sum(vm360.TotalFactura),0)  as TotalFactura"
        'sql = sql & " isnull(max(v0.FEchaPago),isnull(max(v30.FEchaPago),isnull(max(v90.FEchaPago), isnull(max(v180.FEchaPago), isnull(max(v360.FEchaPago),isnull(max(vm360.Fechapago),NUll)))))) as fechapago,"
        'sql = sql & " max(v0.FEchaPago) as FEchaPago0,"
        'sql = sql & " max(v30.FEchaPago) as FEchaPago30,"
        'sql = sql & " max(v90.FEchaPago) as FEchaPago90,"
        'sql = sql & " max(v180.FEchaPago) as FEchaPago180,"
        'sql = sql & " max(v360.FEchaPago) as FEchaPago360,"
        'sql = sql & " max(vm360.FEchaPago) As FEchaPagom360"
        sql = sql & " into tmpClasificaCarteraNoNULL"
        sql = sql & " from"
        sql = sql & " tmpTrasFactura p"
        sql = sql & " left join tmpFactura0  v0  on p.transid = v0.transid"
        sql = sql & " left join tmpFactura30 v30 oN p.transid=V30.TRANSID"
        sql = sql & " left join tmpFactura90 v90 oN p.transid=V90.TRANSID"
        sql = sql & " left join tmpFactura180 v180 oN p.transid=V180.TRANSID"
        sql = sql & " left join tmpFactura360 v360 oN p.transid=V360.TRANSID"
        sql = sql & " left join tmpFacturaM360 vm360 oN p.transid=Vm360.TRANSID"
        sql = sql & " left join tmpFacturav0  vv0  on p.transid = vv0.transid"
        sql = sql & " left join tmpFacturav30 vv30 oN p.transid=Vv30.TRANSID"
        sql = sql & " left join tmpFacturav90 vv90 oN p.transid=Vv90.TRANSID"
        sql = sql & " left join tmpFacturav180 vv180 oN p.transid=Vv180.TRANSID"
        sql = sql & " left join tmpFacturav360 vv360 oN p.transid=Vv360.TRANSID"
        sql = sql & " left join tmpFacturavM360 vvm360 oN p.transid=Vvm360.TRANSID"
        
        sql = sql & " group by p.transid"
        sql = sql & " having "
        sql = sql & " not sum(v0.TotalFActura) is null or"
        sql = sql & " not sum(v30.TotalFactura) is null or"
        sql = sql & " not sum(v90.TotalFactura) is null or"
        sql = sql & " not sum(v180.TotalFactura) is null or"
        sql = sql & " not sum(v360.TotalFactura) is null or"
        sql = sql & " not sum(vm360.TotalFactura) is null or"
        
        sql = sql & " not sum(vv0.TotalFActura) is null or"
        sql = sql & " not sum(vv30.TotalFactura) is null or"
        sql = sql & " not sum(vv90.TotalFactura) is null or"
        sql = sql & " not sum(vv180.TotalFactura) is null or"
        sql = sql & " not sum(vv360.TotalFactura) is null or"
        sql = sql & " not sum(vvm360.TotalFactura) is null"
        VerificaExistenciaTablaTemp "tmpClasificaCarteraNoNULL"
        Me.EjecutarSQL sql, numReg
        
        
        '----------------------- pagos
        sql = " SELECT  g.transid,  sum(p.Haber) as TotalPago,  max(p.FechaEmision) As FechaPago,  max(pck.FechaEmision) as FechaEmision"
        sql = sql & " into tmpPagoPlazo0"
        sql = sql & " FROM GNComprobante gnc"
        sql = sql & " inner join PCKARDEX p"
        sql = sql & " LEFT join PCKardex pck inner join tsformacobropago tsf on pck.idforma = tsf.idforma"
        sql = sql & " inner join GNComprobante g on pck.TransID = g.TransID on p.idasignado =pck.id on gnc.transid=p.transid"
        sql = sql & " Where gnc.Estado <> 3"
        sql = sql & " and p.haber>0"
        sql = sql & " and tsf.considerarcomoefectivo=0"
        sql = sql & " and pck.FechaEmision <= dateadd(d, 0,pck.FechaEmision)"
        sql = sql & " and datediff(d, (pck.FechaEmision) , (pck.FechaVenci) )=0 "
        sql = sql & " AND p.FechaEmision<=" & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB)
        sql = sql & " group by g.transid"
        
        VerificaExistenciaTablaTemp "tmpPagoPlazo0"
        Me.EjecutarSQL sql, numReg
        
        
        
        sql = " SELECT  g.transid,  sum(p.Haber) as TotalPago,  max(p.FechaEmision) As FechaPago,  max(pck.FechaEmision) as FechaEmision"
        sql = sql & " into tmpPagoPlazo30"
        sql = sql & " FROM GNComprobante gnc"
        sql = sql & " inner join PCKARDEX p"
        sql = sql & " LEFT join PCKardex pck inner join tsformacobropago tsf on pck.idforma = tsf.idforma"
        sql = sql & " inner join GNComprobante g on pck.TransID = g.TransID on p.idasignado =pck.id on gnc.transid=p.transid"
        sql = sql & " Where gnc.Estado <> 3"
        sql = sql & " and p.haber>0"
        sql = sql & " and tsf.considerarcomoefectivo=0"
        sql = sql & " and pck.FechaEmision <= dateadd(d, 30,pck.FechaEmision)"
        sql = sql & " and datediff(d, (pck.FechaEmision) , (pck.FechaVenci) )>0 AND datediff(d, (pck.FechaEmision) , (pck.FechaVenci) )<31"
        sql = sql & " AND p.FechaEmision<=" & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB)
        sql = sql & " group by g.transid"
        
        VerificaExistenciaTablaTemp "tmpPagoPlazo30"
        Me.EjecutarSQL sql, numReg
        
        
        sql = " SELECT  g.transid,  sum(p.Haber) as TotalPago,  max(p.FechaEmision) As FechaPago,  max(pck.FechaEmision) as FechaEmision"
        sql = sql & " into tmpPagoPlazo90"
        sql = sql & " FROM GNComprobante gnc"
        sql = sql & " inner join PCKARDEX p"
        sql = sql & " LEFT join PCKardex pck inner join tsformacobropago tsf on pck.idforma = tsf.idforma"
        sql = sql & " inner join GNComprobante g on pck.TransID = g.TransID on p.idasignado =pck.id on gnc.transid=p.transid"
        sql = sql & " Where gnc.Estado <> 3"
        sql = sql & " and p.haber>0"
        sql = sql & " and tsf.considerarcomoefectivo=0"
        sql = sql & " and pck.FechaEmision <= dateadd(d, 90,pck.FechaEmision)"
        sql = sql & " and datediff(d, (pck.FechaEmision) , (pck.FechaVenci) )>30 AND datediff(d, (pck.FechaEmision) , (pck.FechaVenci) )<91"
        sql = sql & " AND p.FechaEmision<=" & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB)
        sql = sql & " group by g.transid"
        
        VerificaExistenciaTablaTemp "tmpPagoPlazo90"
        Me.EjecutarSQL sql, numReg
        
        
        sql = " SELECT  g.transid,  sum(p.Haber) as TotalPago,  max(p.FechaEmision) As FechaPago,  max(pck.FechaEmision) as FechaEmision"
        sql = sql & " into tmpPagoPlazo180"
        sql = sql & " FROM GNComprobante gnc"
        sql = sql & " inner join PCKARDEX p"
        sql = sql & " LEFT join PCKardex pck inner join tsformacobropago tsf on pck.idforma = tsf.idforma"
        sql = sql & " inner join GNComprobante g on pck.TransID = g.TransID on p.idasignado =pck.id on gnc.transid=p.transid"
        sql = sql & " Where gnc.Estado <> 3"
        sql = sql & " and p.haber>0"
        sql = sql & " and tsf.considerarcomoefectivo=0"
        sql = sql & " and pck.FechaEmision <= dateadd(d, 180,pck.FechaEmision)"
        sql = sql & " and datediff(d, (pck.FechaEmision) , (pck.FechaVenci) )>90 AND datediff(d, (pck.FechaEmision) , (pck.FechaVenci) )<181"
        sql = sql & " AND p.FechaEmision<=" & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB)
        sql = sql & " group by g.transid"
        
        VerificaExistenciaTablaTemp "tmpPagoPlazo180"
        Me.EjecutarSQL sql, numReg
        
        
        sql = " SELECT  g.transid,  sum(p.Haber) as TotalPago,  max(p.FechaEmision) As FechaPago,  max(pck.FechaEmision) as FechaEmision"
        sql = sql & " into tmpPagoPlazo360"
        sql = sql & " FROM GNComprobante gnc"
        sql = sql & " inner join PCKARDEX p"
        sql = sql & " LEFT join PCKardex pck inner join tsformacobropago tsf on pck.idforma = tsf.idforma"
        sql = sql & " inner join GNComprobante g on pck.TransID = g.TransID on p.idasignado =pck.id on gnc.transid=p.transid"
        sql = sql & " Where gnc.Estado <> 3"
        sql = sql & " and p.haber>0"
        sql = sql & " and tsf.considerarcomoefectivo=0"
        sql = sql & " and pck.FechaEmision <= dateadd(d, 360,pck.FechaEmision)"
        sql = sql & " and datediff(d, (pck.FechaEmision) , (pck.FechaVenci) )>180 AND datediff(d, (pck.FechaEmision) , (pck.FechaVenci) )<361"
        sql = sql & " AND p.FechaEmision<=" & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB)
        sql = sql & " group by g.transid"
        
        VerificaExistenciaTablaTemp "tmpPagoPlazo360"
        Me.EjecutarSQL sql, numReg
        
        
        sql = " SELECT  g.transid,  sum(p.Haber) as TotalPago,  max(p.FechaEmision) As FechaPago,  max(pck.FechaEmision) as FechaEmision"
        sql = sql & " into tmpPagoPlazoM360"
        sql = sql & " FROM GNComprobante gnc"
        sql = sql & " inner join PCKARDEX p"
        sql = sql & " LEFT join PCKardex pck inner join tsformacobropago tsf on pck.idforma = tsf.idforma"
        sql = sql & " inner join GNComprobante g on pck.TransID = g.TransID on p.idasignado =pck.id on gnc.transid=p.transid"
        sql = sql & " Where gnc.Estado <> 3"
        sql = sql & " and p.haber>0"
        sql = sql & " and tsf.considerarcomoefectivo=0"
        sql = sql & " and pck.FechaEmision >= dateadd(d, 360,pck.FechaEmision)"
        sql = sql & " and datediff(d, (pck.FechaEmision) , (pck.FechaVenci) )>360 "
        sql = sql & " AND p.FechaEmision<=" & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB)
        sql = sql & " group by g.transid"
        
        VerificaExistenciaTablaTemp "tmpPagoPlazoM360"
        Me.EjecutarSQL sql, numReg
        
        sql = " SELECT  max(p.transid) as transid "
        sql = sql & " Into tmpTrasPago "
        sql = sql & " FROM GNComprobante gnc"
        sql = sql & " inner join PCKARDEX p"
        sql = sql & " LEFT join PCKardex pck inner join tsformacobropago tsf on pck.idforma = tsf.idforma "
        sql = sql & " inner join GNComprobante g"
        sql = sql & " on pck.TransID = g.TransID"
        sql = sql & " on p.idasignado =pck.id"
        sql = sql & " on gnc.transid=p.transid"
        sql = sql & " Where"
        sql = sql & " gnc.Estado<>3"
        sql = sql & " and p.haber>0"
        sql = sql & " and tsf.considerarcomoefectivo=0"
        sql = sql & " AND p.FechaEmision<=" & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB)
        sql = sql & " group by p.transid"
        
        VerificaExistenciaTablaTemp "tmpTrasPago"
        Me.EjecutarSQL sql, numReg
        
        
        sql = " SELECT p.transid ,"
        sql = sql & " isnull(sum(v0.TotalPago),0) as TotalPago0,"
        sql = sql & " isnull(sum(v30.TotalPago),0) as TotalPago30,"
        sql = sql & " isnull(sum(v90.TotalPago),0) as TotalPago90,"
        sql = sql & " isnull(sum(v180.TotalPago),0) as TotalPago180,"
        sql = sql & " isnull(sum(v360.TotalPago),0) as TotalPago360,"
        sql = sql & " isnull(sum(vm360.TotalPago),0) as TotalPagom360,"
        sql = sql & " isnull(sum(v0.TotalPago),0) +isnull(sum(v30.TotalPago),0) +isnull(sum(v90.TotalPago),0) +isnull(sum(v180.TotalPago),0) +isnull(sum(v360.TotalPago),0) +isnull(sum(vm360.TotalPago),0)  as TotalPago,"
        sql = sql & " isnull(max(v0.FEchaPago),isnull(max(v30.FEchaPago),isnull(max(v90.FEchaPago), isnull(max(v180.FEchaPago), isnull(max(v360.FEchaPago),isnull(max(vm360.Fechapago),NUll)))))) as fechapago,"
        sql = sql & " max(v0.FEchaPago) as FEchaPago0,"
        sql = sql & " max(v30.FEchaPago) as FEchaPago30,"
        sql = sql & " max(v90.FEchaPago) as FEchaPago90,"
        sql = sql & " max(v180.FEchaPago) as FEchaPago180,"
        sql = sql & " max(v360.FEchaPago) as FEchaPago360,"
        sql = sql & " max(vm360.FEchaPago) As FEchaPagom360"
        sql = sql & " into tmpClasificaPagoNoNULL"
        sql = sql & " from"
        sql = sql & " tmpTrasPago p"
        sql = sql & " left join tmpPagoPlazo0  v0  on p.transid = v0.transid"
        sql = sql & " left join tmpPagoPlazo30 v30 oN p.transid=V30.TRANSID"
        sql = sql & " left join tmpPagoPlazo90 v90 oN p.transid=V90.TRANSID"
        sql = sql & " left join tmpPagoPlazo180 v180 oN p.transid=V180.TRANSID"
        sql = sql & " left join tmpPagoPlazo360 v360 oN p.transid=V360.TRANSID"
        sql = sql & " left join tmpPagoPlazoM360 vm360 oN p.transid=Vm360.TRANSID"
        sql = sql & " group by p.transid"
        sql = sql & " having not sum(v0.TotalPago) is null or"
        sql = sql & " not sum(v30.TotalPago) is null or"
        sql = sql & " not sum(v90.TotalPago) is null or"
        sql = sql & " not sum(v180.TotalPago) is null or"
        sql = sql & " not sum(v360.TotalPago) is null or"
        sql = sql & " not sum(vm360.TotalPago) is null"
        
        VerificaExistenciaTablaTemp "tmpClasificaPagoNoNULL"
        Me.EjecutarSQL sql, numReg
        
        
        
        sql = " SELECT  g.transid,"
        sql = sql & " sum(p.Haber) as TotalPago,"
        sql = sql & " MAX(p.FechaEmision) As FEchaPago"
        sql = sql & " Into TMPDIN1 "
        sql = sql & " FROM GNComprobante gnc"
        sql = sql & " inner join PCKARDEX p"
        sql = sql & " LEFT join PCKardex pck inner join tsformacobropago tsf on pck.idforma = tsf.idforma "
        sql = sql & " inner join GNComprobante g"
        sql = sql & " on pck.TransID = g.TransID"
        sql = sql & " on p.idasignado =pck.id"
        sql = sql & " on gnc.transid=p.transid"
        sql = sql & " Where"
        sql = sql & " gnc.Estado<>3"
        sql = sql & " and p.haber>0"
        sql = sql & " and tsf.considerarcomoefectivo=0"
        sql = sql & " AND p.FechaEmision<=" & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB)
        sql = sql & " group by g.transid"
        
        sql = sql & " Union All"
        
        sql = sql & " SELECT  gNC.transid,"
        sql = sql & " sum(p.DEBE) AS Anticipo,"
        sql = sql & " MAX(p.FechaEmision) As FEchaPago"
        sql = sql & " FROM GNComprobante gnc"
        sql = sql & " inner join PCKARDEX p"
        sql = sql & " on gnc.transid=p.transid"
        sql = sql & " Where"
        sql = sql & " gnc.Estado<>3"
        sql = sql & " and GNC.CODTRANS IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
        sql = sql & " AND IdAsignado<>0"

        sql = sql & " group by gNC.transid"
        
        VerificaExistenciaTablaTemp "TMPDIN1"
'        Me.EjecutarSQL sql, numReg
        
        
        sql = " SELECT  transid,"
        sql = sql & " sum(TotalPago) as TotalPago, max(FEchaPago) as FEchaPago"
        sql = sql & " Into TMPDIN "
        sql = sql & " FROM TMPDIN1 "
        sql = sql & " group by transid"



        
        
        VerificaExistenciaTablaTemp "TMPDIN"
'        Me.EjecutarSQL sql, numReg
        
        
        
        sql = ""
        
        
        sql = " select  "
        sql = sql & "'" & gobjMain.EmpresaActual.GNOpcion.CodigoSC & "' as codEntidad, '" & f1 & "' as  fechaDatos, "
        sql = sql & " an.codtipoDocumento , RUC, pc.Nombre, "
        sql = sql & " TipoSujeto ,pcprov.codprovinciasc, pccan.CodCantonsc, pcparr.CodParroquia,"
        sql = sql & " case when TipoSujeto = 'J' then null else Sexo end as sexo, "
        sql = sql & " case when TipoSujeto = 'J' then null else EstadoCivil end as EstadoCivil ,"
        sql = sql & " case when TipoSujeto = 'J' then null else OrigenIngresos end as OrigenIngresos,"
        If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura")) > 0 Then
            If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura") > 0 Then
                If DatePart("yyyy", f1) = 2010 Or DatePart("yyyy", f1) = 2011 Or DatePart("yyyy", f1) = 2012 Or DatePart("yyyy", f1) = 2013 Then

                    sql = sql & "    case when len(numdocref)=9"
                    sql = sql & "     then g.NumSerieEstaSRI + g.NumSeriePuntoSRI+ right('000000000' + convert(varchar,NumDocRef),9)"
                    sql = sql & "     else "
                    sql = sql & "        case when len(numdocref)>9 "
                    sql = sql & "        then g.NumSerieEstaSRI + g.NumSeriePuntoSRI+ right('000000000' + right(NumDocRef,5),9)   "
                    sql = sql & "        else g.NumSerieEstaSRI + g.NumSeriePuntoSRI+ right('000000000' + NumDocRef,9)   "
                    sql = sql & "     end "
                    sql = sql & " end "
                    sql = sql & " as numtrans,"
                Else
                    sql = sql & " case when (tipoemision='1' and TipoAmbiente = '2' ) then"
                    sql = sql & " g.NumSerieEstaSRI + g.NumSeriePuntoSRI+ right('000000000' + convert(varchar,numtrans),9) "
                    sql = sql & "    else "
                    sql = sql & " case when len(NumDocRef)=9 then"
                    sql = sql & " g.NumSerieEstaSRI + g.NumSeriePuntoSRI+ right('000000000' + convert(varchar,NumDocRef),9) "
                    sql = sql & " else"
                    sql = sql & " g.NumSerieEstaSRI + g.NumSeriePuntoSRI+ right('000000000' + convert(varchar,right(NumDocRef,9)),9) end "
                    sql = sql & "     end "
                    sql = sql & " as numtrans,"
                End If
            Else
                 sql = sql & " g.NumSerieEstaSRI + g.NumSeriePuntoSRI+ right('000000000' + convert(varchar,numtrans),9) as numtrans,"
             End If
        Else
            sql = sql & " g.NumSerieEstaSRI + g.NumSeriePuntoSRI+ right('000000000' + convert(varchar,numtrans),9) as numtrans,"
        End If
        sql = sql & " TOTALFACTURA as Valor, "
        sql = sql & " case when fechaPago <= " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & " and not(fechaPago is null) then  TOTALFACTURA-ISNULL(TotalPago,0) else TOTALFACTURA end AS SALDO, "
        sql = sql & " fechaEmision, "
        sql = sql & " FechaVenci as fechavenci,"
        sql = sql & " FechaVenci as FechaExigible,"
        sql = sql & " DiasCredito, "
        sql = sql & " PeriocidadPago , "
        sql = sql & " case when fechaPago <= " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & " and not(fechaPago is null) then  "
        sql = sql & " case when (TOTALFACTURA-ISNULL(TotalPago,0) )=0 then "
        sql = sql & " case when FechaVenci < FECHAPAGO  "
        sql = sql & " then DATEDIFF( d, FechaVenci , FECHAPAGO) else 0 end else 0 end else 0 end as diasmora, "
        sql = sql & " case when fechaPago <= " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & " and not(fechaPago is null) then  "
        sql = sql & " case when (TOTALFACTURA-ISNULL(TotalPago,0) )=0 and "
        sql = sql & " FechaVenci < FECHAPAGO "
        sql = sql & " then TOTALFACTURA-ISNULL(TotalPago,0) else 0 end else 0 end as SALDOMora, "
        sql = sql & " 0 as intMora,"
        sql = sql & " debe30, debe90, debe180, debe360, debemas360,"
        sql = sql & " debev30-TotalPago30, debev90-TotalPago90, debev180-TotalPago180, debev360-TotalPago360, debemasv360,"
        sql = sql & " 0 as valordemanda ,0 as carteracastigada, "
        sql = sql & " case when fechaPago <= " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & " and not(fechaPago is null) then  TOTALFACTURA-ISNULL(TotalPago,0) else TOTALFACTURA end AS CuotaCRedito, "
        sql = sql & " case when FEchaPago <= "
        sql = sql & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & " and (TOTALFACTURA-ISNULL(TotalPago,0) )=0 "
        sql = sql & " then FEchaPago else null end as  FEchaPago ,"
        sql = sql & " case when FEchaPago <= "
        sql = sql & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & " and (TOTALFACTURA-ISNULL(TotalPago,0) )=0 "
        sql = sql & " then 'C' else NULL end as  FormaPago ,"
        sql = sql & " g. CodTrans , g.numtrans, g.transid, "
        sql = sql & " '1 VENTA' as TipoTrans "
        sql = sql & " from gncomprobante g  "
        sql = sql & " left join gnoferta gno on g.transid=gno.transid  "
        sql = sql & " left join gntrans gnt on g.codtrans=gnt.codtrans"
        sql = sql & " left join infocomprobantes i on g.transid = i.transid  "
        sql = sql & " inner join tmpClasificaCarteraNoNULL vw"
        
        sql = sql & " left join tmpClasificaPagoNoNULL vwp"
        sql = sql & " on vw.transid=vwp.transid"
        sql = sql & " on g.TransID=vw.TRANSID"
        sql = sql & " inner join PCProvCli pc on g.IdClienteRef=pc.IdProvCli"
        sql = sql & " left join Anexo_TipoDocumento an on pc.IdTipoDocumento= an.Id"
        sql = sql & " left join pcprovincia pcprov on pc.idprovincia =pcprov.idprovincia"
        sql = sql & " left join pccanton pccan on pc.idcanton =pccan.idCanton"
        sql = sql & " left join pcparroquia pcparr on pc.idParroquia =pcparr.idparroquia"
        sql = sql & " inner join vwDatosVenciFactura vwdatos on g.TransID = vwDatos.transid"
        sql = sql & " Where"
        sql = sql & " g.estado<>3  "
        'sql = sql & " and TOTALFACTURA-ISNULL(TotalPago,0) <>0 "
        sql = sql & " AND BANDEMPRESAPUBLICA=0 "
        sql = sql & " and (BandOmitir =0 or BandOmitir is null) "
        sql = sql & " and FechaVenci>Fechaemision "
        sql = sql & " and substring(ruc,3,1)<>'6' "
        
        sql = sql & " and TOTALFACTURA> " & MontoMinimo
        sql = sql & " and g.transid=39006"
        

        If DatePart("yyyy", f1) > 2013 Then
            sql = sql & " and  fechaEmision between "
            sql = sql & FechaYMD("01/" & DatePart("m", f1) & "/" & DatePart("yyyy", f1), gobjMain.EmpresaActual.TipoDB)
            sql = sql & " and"
            sql = sql & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB)
        ElseIf DatePart("yyyy", f1) = 2013 Then
            sql = sql & " and  fechaTrans between '01/01/2013' and '31/12/2013' "
        ElseIf DatePart("yyyy", f1) = 2012 Then
            sql = sql & " and  fechaTrans between '01/01/2012' and '31/12/2012' "
        ElseIf DatePart("yyyy", f1) = 2011 Then
            sql = sql & " and  fechaTrans between '01/01/2011' and '31/12/2011' "
        ElseIf DatePart("yyyy", f1) = 2010 Then
            sql = sql & " and  fechaTrans between '01/01/2010' and '31/12/2010' "
        End If
        If Len(gobjCond.CodGrupo) > 0 Then
            sql = sql & " and G.CODTRANS IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
        End If

        
        sql = sql & " order by TipoTrans,fechaEmision, g.NUMTRANS "
        

   
    End With
    
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsVentasDINARDAP2015 = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Ventas DINARDAP " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
End Function

Public Function ConsTSPorCobrarCapInteresNew_1( _
                    ByVal PorCobrar As Boolean, _
                    ByVal CodProvcli As String, _
                    ByVal FechaVenci As Date, _
                    ByVal CodForma As String, _
                    ByVal CodMoneda As String, _
                    ByVal CodGrupo1 As String, _
                    ByVal CodVendedor As String, _
                    ByVal TasaMensual As Currency, _
                    ByVal diasGracia As Integer, _
                    ByVal CodSucursal As String, _
                    ByVal Precio As Currency, ByVal PrecioV As Currency _
                    ) As Variant
   Dim aux_codpc As String, aux_f1 As Date, aux_f2 As Date
    Dim aux_PorCobrar As Boolean, aux_Cliente As Boolean, aux_Proveedor As Boolean
    Dim aux_CodForma As String, aux_CodMoneda As String, aux_codgrupo As String
    Dim aux_incluircero As Boolean, aux_codVendedor As String, aux_codSucursal As String
    Dim aux_precio As Boolean, aux_precioV As Boolean
   With gobjMain.objCondicion
        'Conservar valores actuales para que no afecte a otras consultas
        aux_codpc = .CodPC1
        aux_f1 = .fecha1
        aux_f2 = .fecha2
        aux_PorCobrar = .PorCobrar
        aux_Cliente = .Cliente
        aux_Proveedor = .Proveedor
        aux_CodForma = .CodForma
        aux_CodMoneda = .CodMoneda
        aux_codgrupo = .CodGrupo
        aux_incluircero = .IncluirCero
        aux_codVendedor = .Usuario1
        aux_codSucursal = .Sucursal
        aux_precio = .Precio
        aux_precioV = .PrecioV
       .PorCobrar = PorCobrar
        .Cliente = True
        .Proveedor = True
        .CodPC1 = CodProvcli
        .fecha1 = Me.GNOpcion.FechaInicio
        .fecha2 = FechaVenci
        .CodForma = CodForma
        .CodMoneda = CodMoneda
        .CodGrupo = CodGrupo1
        .IncluirCero = False
        .Usuario1 = CodVendedor
        .NumDias1 = diasGracia
        .TasaMensual = TasaMensual
        .NumDias2 = IIf(Len(Me.GNOpcion.ObtenerValor("NumDecimales")) > 0, Me.GNOpcion.ObtenerValor("NumDecimales"), 2)
        .Sucursal = CodSucursal
        .Precio = Precio
        .PrecioV = PrecioV
        Set ConsTSPorCobrarCapInteresNew_1 = ConsTSPorCobrarCapitalInteres()
       'Recuperar valores reservados
        .CodPC1 = aux_codpc
        .fecha1 = aux_f1
        .fecha2 = aux_f2
        .PorCobrar = aux_PorCobrar
        .Cliente = aux_Cliente
        .Proveedor = aux_Proveedor
        .CodForma = aux_CodForma
        .CodMoneda = aux_CodMoneda
        .CodGrupo = aux_codgrupo
        .IncluirCero = aux_incluircero
        .Usuario1 = aux_codVendedor
        .Sucursal = aux_codSucursal
        .Precio = aux_precio
        .PrecioV = aux_precioV
   End With
End Function


Public Function ListaTipoProvCli() As Variant
    Dim v(1, 8) As Variant
   v(0, 0) = "CE"
    v(1, 0) = "CONTRIBUYENTE ESPECIAL"
   v(0, 1) = "CO"
    v(1, 1) = "COMPAÑIA"
   v(0, 2) = "SC"
    v(1, 2) = "OBLIGADO A LLEVAR CONTABILIDAD"
   v(0, 3) = "NC"
    v(1, 3) = "NO OBLIGADO A LLEVAR CONTABILIDAD"
   v(0, 4) = "RISE"
    v(1, 4) = "REGIMEN SIMPLIFICADO"
   v(0, 5) = "ARTE"
    v(1, 5) = "ARTESANO"
   v(0, 6) = "OT"
    v(1, 6) = "OTRO"
    v(0, 7) = "RPN"
    v(1, 7) = "PERSONA NATURAL CON PASAPORTE"
    v(0, 8) = "RSO"
    v(1, 8) = "SOCIEDAD CON PASAPORTE"
  ListaTipoProvCli = v
End Function

Public Sub CambiaDiasPlazoDINARDAP2015(ByVal diasGracia As Integer)


    Dim sql As String, cond As String, CadenaValores As String, Condicion As String
    Dim rs As Recordset, f1 As String, numReg As Long, Trans As String
    Dim aux As String, MontoMinimo As Currency
       
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   
        sql = "ALTER VIEW vwPlazo0"
        sql = sql & " AS"
        sql = sql & " SELECT  TRANSID, SUM(DEBE) AS DEBE0"
        sql = sql & " from PCKardex"
        sql = sql & " Where Debe > 0 And DateDiff(d, FechaEmision, dateadd(d," & diasGracia & ", FechaVenci)) = 0"
        sql = sql & " GROUP BY TRANSID"
        rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
        
        
        sql = " ALTER VIEW vwPlazo30"
        sql = sql & " as"
        sql = sql & " SELECT  TRANSID, SUM(DEBE) AS DEBE30"
        sql = sql & " from PCKardex"
        sql = sql & " Where Debe > 0 And DateDiff(d, FechaEmision, dateadd(d," & diasGracia & ", FechaVenci)) > 0 And DateDiff(d, FechaEmision, dateadd(d," & diasGracia & ", FechaVenci)) < 31"
        sql = sql & " GROUP BY TRANSID"
        rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
        
        sql = " ALTER VIEW vwPlazo90"
        sql = sql & " as"
        sql = sql & " SELECT  TRANSID,SUM(DEBE) AS DEBE90"
        sql = sql & " from PCKardex"
        sql = sql & " Where Debe > 0 And DateDiff(d, FechaEmision, dateadd(d," & diasGracia & ", FechaVenci)) > 30 And DateDiff(d, FechaEmision, dateadd(d," & diasGracia & ", FechaVenci)) < 91"
        sql = sql & " GROUP BY TRANSID"
        rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
        
        sql = " ALTER VIEW vwPlazo180"
        sql = sql & " as"
        sql = sql & " SELECT  TRANSID,SUM(DEBE) AS DEBE180"
        sql = sql & " from PCKardex"
        sql = sql & " Where Debe > 0 And DateDiff(d, FechaEmision, dateadd(d," & diasGracia & ", FechaVenci)) > 90 And DateDiff(d, FechaEmision, dateadd(d," & diasGracia & ", FechaVenci)) < 181"
        sql = sql & " GROUP BY TRANSID"
        rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
        
        sql = " ALTER VIEW vwPlazo360"
        sql = sql & " as"
        sql = sql & " SELECT  TRANSID,SUM(DEBE) AS DEBE360"
        sql = sql & " from PCKardex"
        sql = sql & " Where Debe > 0 And DateDiff(d, FechaEmision, dateadd(d," & diasGracia & ", FechaVenci)) > 180 And DateDiff(d, FechaEmision, dateadd(d," & diasGracia & ", FechaVenci)) < 361"
        sql = sql & " GROUP BY TRANSID"
        rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
        
        sql = " ALTER VIEW vwPlazomas360"
        sql = sql & " as"
        sql = sql & " SELECT  TRANSID,SUM(DEBE) AS DEBEMAS360"
        sql = sql & " from PCKardex"
        sql = sql & " Where Debe > 0 And DateDiff(d, FechaEmision, dateadd(d," & diasGracia & ", FechaVenci)) > 360"
        sql = sql & " GROUP BY TRANSID"
        rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
       
    
        sql = " ALTER view vwDatosVenciFactura"
        sql = sql & " as"
        sql = sql & " SELECT"
        sql = sql & " gnc.transid,"
        sql = sql & " case when max(fechaVenci)<> max(fechaEmision) then"
        sql = sql & " dateadd(d," & diasGracia & ",max(fechaVenci)) "
        sql = sql & " else"
        sql = sql & " max(fechaVenci) "
        sql = sql & " end"
        sql = sql & " as FechaVenci,"
        sql = sql & " max(fechaEmision) AS fechaEmision,"
        sql = sql & " case when max(fechaVenci)<> max(fechaEmision) then"
        sql = sql & " datediff(d,max(fechaEmision),dateadd(d," & diasGracia & ",max(fechaVenci))) "
        sql = sql & " else"
        sql = sql & " datediff(d,max(fechaEmision),max(fechaVenci)) "
        sql = sql & " end"
        sql = sql & " as DiasCredito,"
        sql = sql & " count(id) as Numpagos,"
        sql = sql & " case when max(fechaVenci)<> max(fechaEmision) then"
        sql = sql & " datediff(d,max(fechaEmision),dateadd(d," & diasGracia & ",max(fechaVenci))) /count(id) "
        sql = sql & " else"
        sql = sql & " datediff(d,max(fechaEmision),max(fechaVenci)) /count(id) "
        sql = sql & " end "
        sql = sql & " as PeriocidadPago"
        sql = sql & " FROM GNComprobante gnc"
        sql = sql & " inner join PCKARDEX p"
        sql = sql & " inner join TSFormaCobroPago tsf"
        sql = sql & " on p.idforma=tsf.idforma"
        sql = sql & " on gnc.transid=p.transid"
        sql = sql & " Where"
        sql = sql & " gnc.Estado<>3"
        sql = sql & " and p.idasignado=0"
        sql = sql & " and ConsiderarComoEfectivo=0"
        sql = sql & " group by gnc.TransID"
        rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly



    
    
        Me.GrabaGNLogAccion "CONSULTA", "Cons Ventas DINARDAP " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    End Sub

Public Function CreaFCVTablaComision() As FCVTablaComision
    Dim obj As FCVTablaComision
    Set obj = New FCVTablaComision
    Set obj.Empresa = Me
    Set CreaFCVTablaComision = obj
    Set obj = Nothing
End Function


Public Function RecuperaFCVTablaComision(key As Variant) As FCVTablaComision
    Dim obj As FCVTablaComision
    Set obj = New FCVTablaComision
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaFCVTablaComision = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function ListaFCVTablaComision(BandRS As Boolean, bandResumido As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodTablaComision,Nombre FROM FCVTablaComision "
'    If BandResumido Then
        sql = "SELECT CodTablaComision,Nombre FROM FCVTablaComision "
'    Else
'        sql = "SELECT idTablaComision,CodTablaComision,Nombre FROM FCVTablaComision "
'    End If
    sql = sql & " ORDER BY CodTablaComision"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaFCVTablaComision = rs
    Else
        ListaFCVTablaComision = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaIVPlan(BandRS As Boolean, BandResumen As Boolean) As Variant
    Dim sql As String, cond As String
    Dim rs As Recordset
        sql = "SELECT IVPlan.CodPlan,iv.descripcion, IVPlan.Nivel, IVPlan_1.CodPlan as codPlanEnlaza, "
        sql = sql & " IVPlan.BandTotal From IVPlan "
        sql = sql & " Inner Join IVINVENTARIO iv on iv.idinventario = ivplan.idinventario"
        sql = sql & " LEFT JOIN IVPLAN IVPLAN_1 On IVPLAN_1.IdPlan = IVPlan.idPlanEnlaza"
        If BandResumen Then
            sql = sql & " WHERE IVPlan.Nivel = 0"
        End If
    sql = sql & " ORDER BY ivplan.CodPlan"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVPlan = rs
    Else
        ListaIVPlan = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function
Public Function CreaIVPlan() As IVPlan
    Dim obj As IVPlan
   Set obj = New IVPlan
    Set obj.Empresa = Me
    Set CreaIVPlan = obj
    Set obj = Nothing
End Function
Public Function RecuperaIVPLAN(key As Variant) As IVPlan
    Dim obj As IVPlan
    Set obj = New IVPlan
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaIVPLAN = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function
Public Function ListaIVPlanItem(ByVal CodPlan As String) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT idPlanItem,iv.Descripcion,ivpi.frecuencia,ivg.descripcion as descIvg1,"
    sql = sql & " Case when Prioridad = 0  then 'ALTA' When prioridad = 1 then 'MEDIA' When prioridad = 2 then 'BAJA' End as prioridad "
    sql = sql & "FROM ivplanitem ivpi  "
    sql = sql & "Inner Join ivPlan ivp on  ivp.idPlan =  ivpi.idplan  "
    sql = sql & " Inner Join ivinventario iv on  iv.idInventario =  ivpi.idInventario"
    sql = sql & " Left Join ivGrupo1 ivg on  ivg.idGrupo1 =  ivpi.idgrupo1"
    sql = sql & " Where ivp.codPlan = '" & CodPlan & "'"
    sql = sql & " ORDER BY idPlanItem"
    Set rs = Me.OpenRecordset(sql)
        Set ListaIVPlanItem = rs
    Set rs = Nothing
End Function
Public Function CadenaPlan(ByVal cod As String) As String
Dim sql As String, cad As String
Dim rs As Recordset
Dim i As Long
sql = "Select ivplan4.descripcion as ivpDes4,"
sql = sql & "ivplan3.descripcion as ivpDes3,"
sql = sql & "ivplan2.descripcion as ivpDes2,"
sql = sql & "ivplan1.descripcion as ivpDes1,"
sql = sql & "IVPlan.Descripcion as ivpDes"
sql = sql & " from IVPlan "
sql = sql & "left join ivplan ivplan1 "
sql = sql & "left join ivplan ivplan2 "
sql = sql & "left join ivplan ivplan3 "
sql = sql & "left join ivplan ivplan4 "
sql = sql & "on ivplan4.idplan = ivplan3.idplanenlaza "
sql = sql & "on ivplan3.idplan = ivplan2.idplanenlaza "
sql = sql & "on ivplan2.idplan = ivplan1.idplanenlaza "
sql = sql & "on ivplan1.idplan = ivplan.idplanenlaza "
sql = sql & "where ivplan.codplan = '" & cod & "'"
Set rs = Me.OpenRecordset(sql)
If rs.RecordCount > 0 Then
    cad = cad & rs!ivpDes4 & "/" & rs!ivpDes3 & "/" & rs!ivpDes2 & "/" & rs!ivpDes1 & "/" & rs!ivpDes
End If
For i = 1 To Len(cad)
    If Left(cad, 1) = "/" Then
        cad = Right(cad, Len(cad) - 1)
    Else
        Exit For
    End If
Next
CadenaPlan = cad
End Function
Public Function ListaGNVehiculoPlanCalendario(ByVal IdPlan As Long, ByVal fecha2 As Date, bandResumido As Boolean) As Recordset
    Dim sql As String, rs As Recordset
    Dim i As Long, s As String, s1 As String
    Dim v
    Dim v1
    s = ""
    s1 = ""
    'armar sql
    sql = "Select codvehiculo, planmant from gnvehiculo where len(planmant) > 0"
    Set rs = Me.OpenRecordset(sql)
    Do While Not rs.EOF
        s = s & rs!PlanMant & ","
        s1 = s1 & rs!CodVehiculo & ","
        rs.MoveNext
    Loop
    s = Left(s, Len(s) - 1)
    s1 = Left(s1, Len(s1) - 1)
    v = Split(s, ",")
    v1 = Split(s1, ",")
    sql = ""
    VerificaExistenciaTabla 1
    For i = 0 To UBound(v)
        If i = 0 Then
            sql = sql & "select " & v(i) & " as idPlan, iv.codinventario into tmp1 from ivplan ivp "
        Else
            sql = sql & "select " & v(i) & " as idPlan, iv.codinventario from ivplan ivp "
        End If
        sql = sql & " inner join ivinventario iv on iv.idinventario = ivp.idinventario "
        sql = sql & " Where nivel = 0"
        sql = sql & " AND ivp.idplan =" & v(i)
        sql = sql & " UNION ALL "
    Next
        If Len(sql) > 0 Then
            sql = Left(sql, Len(sql) - 10)
            Me.EjecutarSQL sql, 1
        End If
        sql = "Select tmp1.* from tmp1 "
        sql = sql & "Inner Join gnvehiculoPlan gp on gp.idplan = tmp1.idplan "
        sql = sql & " Where gp.fechaProx <= '" & fecha2 & "'"
        sql = sql & " And idtrans <> 1 And gp.bandvalida = 1"
        sql = sql & " Group by tmp1.idplan,tmp1.codinventario,gp.fechaprox,gp.idvehiculo,gp.idtrans "
        sql = sql & " order by tmp1.idPlan"
        Set rs = Me.OpenRecordset(sql)
    Set ListaGNVehiculoPlanCalendario = rs
    Set rs = Nothing
End Function
Public Function ListaIVPlanSimple(BandRS As Boolean) As Variant
    Dim sql As String
    Dim rs As Recordset
        sql = "SELECT IVPlan.idPlan, iv.codInventario, "
        sql = sql & " IVPlan.BandTotal From IVPlan "
        sql = sql & " Inner Join IVINVENTARIO iv on iv.idinventario = ivplan.idinventario"
        sql = sql & " WHERE IVPlan.nivel = 0"
    sql = sql & " ORDER BY ivplan.CodPlan"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVPlanSimple = rs
    Else
        ListaIVPlanSimple = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function
Public Function GNVehiculoProximoMan(ByVal IdVehiculo As Long, ByVal IdPlan As Long) As String
    Dim sql As String, rs As Recordset
    Dim s As String
    sql = "SELECT max(gp.fechaProxMan) as fechaProxMan from GNVehiculoPlan gp "
    sql = sql & " Where gp.idvehiculo =  " & IdVehiculo
    sql = sql & " And gp.idplan =  " & IdPlan
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        If Not IsNull(rs!fechaProxMan) Then s = rs!fechaProxMan
    End If
    GNVehiculoProximoMan = s
    Set rs = Nothing
End Function
Public Function ListaFeriadoR(BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
        sql = "SELECT Fecha"
        sql = sql & " FROM RFeriado"
        sql = sql & " ORDER BY Fecha"
    Set rs = Me.OpenRecordset(sql)
        ListaFeriadoR = MiGetRows(rs)
        rs.Close
    Set rs = Nothing
End Function
Public Function ListaGNVehiculoPlanOT(ByVal fecha1 As Date, ByVal fecha2 As Date) As Recordset
'AUC quitado para compilar si se necesita copiar a empresa2
'    Dim sql As String, rs As Recordset
'    Dim i As Long
'            sql = sql & "Select '' as sel, g.codvehiculo,g.descripcion as kilometraje,gnv.fechaprox from  gnvehiculovisita gnv inner join gnvehiculo g on g.idvehiculo = gnv.idvehiculo "
'            sql = sql & " Where fechaprox  <= '" & fecha2 & "'"
'            sql = sql & " group by g.codvehiculo,g.descripcion,gnv.fechaprox"
'            sql = sql & "  "
'            sql = sql & " "
'            sql = sql & " "
'            sql = sql & " "
'            sql = sql & " "
'            Set rs = Me.OpenRecordset(sql)
'    Set ListaGNVehiculoPlanOT = rs
'    Set rs = Nothing
End Function
Public Function ListaCalendarioxVehi(ByVal CodVehiculo As String) As Recordset
    Dim sql As String, rs As Recordset
    Dim i As Long
    Dim v
    v = Split(CodVehiculo, ",")
    For i = 0 To UBound(v)
            sql = sql & " Select '-1' as sel, '" & v(i) & "' as Placa ,iv.codinventario,iv.descripcion,ivp.dias as frecuecia"
            sql = sql & " from ivplan ivp inner join ivplan ivpOri "
            sql = sql & " Left Join GNVehiculoPlan gnvp Inner Join GNVehiculo gnv on gnv.idvehiculo = gnvp.idvehiculo on gnvp.idplan = ivpOri.idplan"
            sql = sql & " inner join ivinventario ivOri on ivori.idinventario = ivpori.idinventario "
            sql = sql & " on ivpori.idplan = ivp.idplanenlaza inner join ivinventario iv on iv.idinventario = ivp.idinventario "
            'sql = sql & " Where ivp.idplanenlaza in (" & idPlan & ")"
            sql = sql & " And gnv.codvehiculo = '" & v(i) & "'"
            sql = sql & " group by iv.codinventario,iv.descripcion,ivp.dias"
            sql = sql & " UNION ALL"
 '           rs.MoveNext
    Next
        If Len(sql) > 0 Then
            sql = Left(sql, Len(sql) - 9)
            Set rs = Me.OpenRecordset(sql)
        End If
    'End If
    Set ListaCalendarioxVehi = rs
    Set rs = Nothing
End Function
Public Function RecuperaGNCentroCostoxVehi(key As Variant) As GNCentroCosto
    Dim obj As GNCentroCosto
    Set obj = New GNCentroCosto
    Set obj.Empresa = Me
    On Error Resume Next
    obj.RecuperarxVeh key
    If Err.Number = 0 Then Set RecuperaGNCentroCostoxVehi = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function
Public Sub ActualizaPlanFechaprox(ByVal IdPlan As Long, CodVehiculo As String, ByVal FechaAnt As Date, ByVal NuevaFecha As Date)
Dim sql As String
Dim gnv As GnVehiculo
    Set gnv = Me.RecuperaGNVehiculo(CodVehiculo)
    sql = "Update gnvehiculoPlan set "
    sql = sql & " BandValida =  0"
    sql = sql & " Where idplan =  " & IdPlan
    sql = sql & " And IdVehiculo = " & gnv.IdVehiculo
    sql = sql & " And FechaProx = '" & FechaAnt & "'"
    Me.EjecutarSQL sql, 1
    sql = "Insert into gnvehiculoPlan (IdVehiculo,IdPlan,FechaProx,IdTrans,bandCambiaFecha,bandValida) Values ("
    sql = sql & gnv.IdVehiculo & "," & IdPlan & ",'" & NuevaFecha & "',0,0,1)"
    Me.EjecutarSQL sql, 1
Set gnv = Nothing
End Sub
Public Function VerificaOTGenerado(ByVal IdVehiculo As Long, ByVal fecha As Date, ByVal IdPlan As Long, ByRef CodTrans As String, ByRef NumTrans As Long) As Boolean
    Dim sql As String
    Dim rs As Recordset
        sql = "Select gn.codtrans,gn.numtrans "
        sql = sql & " From GNComprobante gn  "
        sql = sql & " Inner Join GNCentroCosto gc on gc.idcentro = gn.idcentro "
        sql = sql & " Inner Join gnoferta gof on gof.transid = gn.transid  "
        sql = sql & " Where gn.estado <> 3"
        sql = sql & " And gn.fechatrans = '" & fecha & "'"
        sql = sql & " And gof.idplan = " & IdPlan
        sql = sql & " And gc.idvehiculo = " & IdVehiculo
        Set rs = Me.OpenRecordset(sql)
        If rs.RecordCount > 0 Then
            VerificaOTGenerado = True
            CodTrans = rs!CodTrans
            NumTrans = rs!NumTrans
        Else
            VerificaOTGenerado = False
        End If
        Set rs = Nothing
End Function

Public Function ListaGNTranporteNew(BandSoloValida As Boolean, BandRS As Boolean) As Variant 'DATOS PARA EL CHOFER
    Dim sql As String, rs As Recordset
    sql = "SELECT CodTransporte, Descripcion,observacion,observacion1,observacion2,bandvalida  FROM GNTransporte "
    If BandSoloValida Then
        sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY CodTransporte"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaGNTranporteNew = rs
    Else
        ListaGNTranporteNew = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ConsVentasDINARDAP2015New() As Variant
    Dim sql As String, cond As String, CadenaValores As String, Condicion As String
    Dim rs As Recordset, f1 As String, numReg As Long, Trans As String, cadfecha As String, cadfechaCartera As String, cadfechaCarteraVen As String
    Dim CadFechaCobro As String
    Dim cadFechaVenci As String, cadFechaVta As String
    Dim aux As String, MontoMinimo As Currency
       
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   With gobjCond
        
        cadFechaVenci = " dateadd(d," & .NumDias1 & ",FechaVenci) "
        f1 = .fecha1
        
        If DatePart("yyyy", f1) > 2013 Then
            If DatePart("yyyy", f1) = 2015 Then
                MontoMinimo = 53.1
            ElseIf DatePart("yyyy", f1) = 2014 Then
                MontoMinimo = 51
            End If
            cadFechaVta = "  between '01/" & DatePart("m", f1) & "/" & DatePart("yyyy", f1) & "' and " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB)
            cadfecha = "  between '01/01/" & DatePart("yyyy", f1) & "' and " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB)
            cadfechaCartera = "  between '01/01/2010' and " & FechaYMD(DateAdd("m", -1, f1), gobjMain.EmpresaActual.TipoDB)
            cadfechaCarteraVen = "  between '01/01/2010' and " & FechaYMD(DateAdd("m", 0, f1), gobjMain.EmpresaActual.TipoDB)
            CadFechaCobro = "  between '01/01/2010' and " & FechaYMD(DateAdd("m", 0, f1), gobjMain.EmpresaActual.TipoDB)
        ElseIf DatePart("yyyy", f1) = 2013 Then
            f1 = "31/12/2013"
            MontoMinimo = 51
            cadfecha = " between '01/01/2013' and '31/12/2013'"
            cadfechaCartera = "  between '01/01/2010' and '31/12/2012'"
            cadfechaCarteraVen = "  between '01/01/2010' and '31/12/2013'"
            CadFechaCobro = "  between '01/01/2010' and '31/12/2013'"
            cadFechaVta = cadfecha
        ElseIf DatePart("yyyy", f1) = 2012 Then
            f1 = "31/12/2012"
            MontoMinimo = 43.8
            cadfecha = " between '01/01/2012' and '31/12/2012'"
            cadfechaCartera = "  between '01/01/2010' and '31/12/2011'"
            cadfechaCarteraVen = "  between '01/01/2010' and '31/12/2011'"
            CadFechaCobro = "  between '01/01/2010' and '31/12/2012'"
            cadFechaVta = cadfecha
        ElseIf DatePart("yyyy", f1) = 2011 Then
            f1 = "31/12/2011"
            MontoMinimo = 39.6
            cadfecha = " between '01/01/2011' and '31/12/2011'"
            cadfechaCartera = "  between '01/01/2010' and '31/12/2010'"
            cadfechaCarteraVen = "  between '01/01/2010' and '31/12/2010'"
            CadFechaCobro = "  between '01/01/2010' and '31/12/2011'"
            cadFechaVta = cadfecha
        ElseIf DatePart("yyyy", f1) = 2010 Then
            f1 = "31/12/2010"
            MontoMinimo = 36
            cadfecha = " between '01/01/2010' and '31/12/2010'"
'            cadfechaCartera = "  between '31/01/2010' and '01/01/2010'"
 '           cadfechaCarteraVen = "  between '31/01/2010' and '01/01/2010'"
            cadfechaCartera = "  between '01/01/2010' and '31/12/2010'"
           cadfechaCarteraVen = "  between '01/01/2010' and '31/12/2010'"
           CadFechaCobro = "  between '01/01/2010' and '31/12/2010'"
            cadFechaVta = cadfecha
        End If
        
        If Len(gobjCond.CodGrupo) > 0 Then
            sql = sql & " and G.CODTRANS IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
        End If
        
        
        
        'sql = " CREATE view vwDatosFacturaDinardap as"
        sql = " select g.transid, g.codtrans, NumTrans, FechaTrans ,"
        If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura")) > 0 Then
            If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosFactura") > 0 Then
                If DatePart("yyyy", f1) = 2010 Or DatePart("yyyy", f1) = 2011 Or DatePart("yyyy", f1) = 2012 Or DatePart("yyyy", f1) = 2013 Then

                    sql = sql & "    case when len(numdocref)=9"
                    sql = sql & "     then g.codtrans+g.NumSerieEstaSRI + g.NumSeriePuntoSRI+ right('000000000' + convert(varchar,NumDocRef),9)"
                    sql = sql & "     else "
                    sql = sql & "        case when len(numdocref)>9 "
                    sql = sql & "        then g.codtrans+g.NumSerieEstaSRI + g.NumSeriePuntoSRI+ right('000000000' + right(NumDocRef,5),9)   "
                    sql = sql & "        else g.codtrans+g.NumSerieEstaSRI + g.NumSeriePuntoSRI+ right('000000000' + NumDocRef,9)   "
                    sql = sql & "     end "
                    sql = sql & " end "
                    sql = sql & " as numfactura,"
                Else
                    sql = sql & " case when (tipoemision='1' and TipoAmbiente = '2' ) then"
                    sql = sql & " g.codtrans+g.NumSerieEstaSRI + g.NumSeriePuntoSRI+ right('000000000' + convert(varchar,numtrans),9) "
                    sql = sql & "    else "
                    sql = sql & " case when len(NumDocRef)=9 then"
                    sql = sql & " g.codtrans+g.NumSerieEstaSRI + g.NumSeriePuntoSRI+ right('000000000' + convert(varchar,NumDocRef),9) "
                    sql = sql & " else"
                    sql = sql & " g.codtrans+g.NumSerieEstaSRI + g.NumSeriePuntoSRI+ right('000000000' + convert(varchar,right(NumDocRef,9)),9) end "
                    sql = sql & "     end "
                    sql = sql & " as numfactura,"
                End If
            Else
                 sql = sql & " g.codtrans+g.NumSerieEstaSRI + g.NumSeriePuntoSRI+ right('000000000' + convert(varchar,numtrans),9) as numfactura,"
             End If
        Else
            sql = sql & " g.codtrans+g.NumSerieEstaSRI + g.NumSeriePuntoSRI+ right('000000000' + convert(varchar,numtrans),9) as numfactura,"
        End If
        
        sql = sql & " pc.idprovcli, pc.ruc, pc.nombre, TipoSujeto ,pcprov.codprovinciasc, pccan.CodCantonsc, pcparr.CodParroquia, an.codtipoDocumento, "
        sql = sql & " case when TipoSujeto = 'J' then null else Sexo end as sexo,"
        sql = sql & " case when TipoSujeto = 'J' then null else EstadoCivil end as EstadoCivil ,"
        sql = sql & " case when TipoSujeto = 'J' then null else OrigenIngresos end as OrigenIngresos,"
        sql = sql & " sum(debe) as TotalFactura, "
         sql = sql & "max(" & cadFechaVenci & ") as fechaVenci,"
        sql = sql & " '1' as numpagos, "
        sql = sql & " datediff(d, FechaTrans, max(" & cadFechaVenci & ")) As diascredito,"
        sql = sql & " datediff(d, FechaTrans, max(" & cadFechaVenci & ")) as PeriocidadPago"
        sql = sql & " into tmpDatosFacturaDinardap"
        sql = sql & " from gncomprobante g inner join gntrans gnt on g.codtrans= gnt.codtrans"
        sql = sql & " left join Infocomprobantes inf on g.transid= inf.transid "
        sql = sql & " inner join pckardex p"
        sql = sql & " left join pcprovcli pc"
        sql = sql & " left join Anexo_TipoDocumento an on pc.IdTipoDocumento= an.Id"
        sql = sql & " left join pcprovincia pcprov on pc.idprovincia =pcprov.idprovincia"
        sql = sql & " left join pccanton pccan on pc.idcanton =pccan.idCanton"
        sql = sql & " left join pcparroquia pcparr on pc.idParroquia =pcparr.idparroquia"
        
        sql = sql & " on p.idprovcli=pc.idprovcli"
        sql = sql & " left join TSFormaCobroPago tsf"
        sql = sql & " on p.IdForma = tsf.IdForma"
        sql = sql & " on g.transid = p.transid"
        sql = sql & " left join gnoferta gno on g.transid=gno.transid  "
        sql = sql & " Where g.Estado <> 3 "
        sql = sql & " and pc.bandcliente=1 "
        sql = sql & " and BandOmitirDinardap=0 "
        sql = sql & " AND BANDEMPRESAPUBLICA=0 "
        sql = sql & " and substring(ruc,3,1)<>'6' "
        sql = sql & " and (BandOmitir =0 or BandOmitir is null) "
        sql = sql & " and G.CODTRANS IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
        sql = sql & " and tsf.ConsiderarComoEfectivo=0"
        sql = sql & " Group By"
        sql = sql & " g.transid, g.codtrans, NumTrans, FechaTrans, NumSerieEstaSRI, NumSeriePuntoSRI, numtrans,"
        sql = sql & " pc.idprovcli, pc.ruc, pc.nombre , TipoSujeto ,pcprov.codprovinciasc, NumDocRef, tipoemision, TipoAmbiente, "
        sql = sql & " pccan.CodCantonSC , pcparr.CodParroquia, Sexo, EstadoCivil, OrigenIngresos, an.codtipoDocumento"
        sql = sql & " Having sum(Debe) > " & MontoMinimo
        sql = sql & " And datediff(d, FechaTrans, max(" & cadFechaVenci & ")) > 0"
        
        VerificaExistenciaTablaTemp "tmpDatosFacturaDinardap"
        Me.EjecutarSQL sql, numReg
        
        
        'sql = " CREATE view vwDatosPagosDinardap as"
        sql = " SELECT  g.transid,"
        sql = sql & " sum(p.Haber) as TotalPago,"
        sql = sql & " MAX(gnc.fechatrans) As FEchaPago"
        sql = sql & " into tmpDatosPagosDinardap"
        sql = sql & " FROM GNComprobante gnc"
        sql = sql & " inner join PCKARDEX p"
        sql = sql & " LEFT join PCKardex pck"
        sql = sql & " inner join tsformacobropago tsf on pck.idforma = tsf.idforma"
        sql = sql & " inner join GNComprobante g"
        sql = sql & " on pck.TransID = g.TransID"
        sql = sql & " on p.idasignado =pck.id"
        sql = sql & " on gnc.transid=p.transid"
        sql = sql & " Where gnc.Estado<>3"
        sql = sql & " and p.haber>0"
        sql = sql & " and tsf.considerarcomoefectivo=0"
        sql = sql & " and (gnc.fechatrans)   " & CadFechaCobro
        sql = sql & " group by g.transid"
        sql = sql & " having MAX(gnc.fechatrans) " & CadFechaCobro
        
        VerificaExistenciaTablaTemp "tmpDatosPagosDinardap"
        Me.EjecutarSQL sql, numReg
        
        
        
        'sql = " CREATE view vwDatosPagosDinardapCartera as"
        sql = " SELECT  g.transid,"
        sql = sql & " sum(p.Haber) as TotalPago,"
        sql = sql & " MAX(gnc.fechatrans) As FEchaPago"
        sql = sql & " into tmpDatosPagosDinardapCartera "
        sql = sql & " FROM GNComprobante gnc"
        sql = sql & " inner join PCKARDEX p"
        sql = sql & " LEFT join PCKardex pck"
        sql = sql & " inner join tsformacobropago tsf on pck.idforma = tsf.idforma"
        sql = sql & " inner join GNComprobante g"
        sql = sql & " on pck.TransID = g.TransID"
        sql = sql & " on p.idasignado =pck.id"
        sql = sql & " on gnc.transid=p.transid"
        sql = sql & " Where gnc.Estado<>3"
        sql = sql & " and p.haber>0"
        sql = sql & " and gnc.Fechatrans " & cadfechaCarteraVen
        sql = sql & " and tsf.considerarcomoefectivo=0"
        'sql = sql & " and (gnc.fechatrans) " & cadfechaCarteraVen
        sql = sql & " group by g.transid"
        sql = sql & " having MAX(gnc.fechatrans) " & cadfechaCarteraVen
        
        VerificaExistenciaTablaTemp "tmpDatosPagosDinardapCartera"
        Me.EjecutarSQL sql, numReg
        
        
        '------------------------------------------------------------
        '---------------------------------  VENTAS
        '------------------------------------------------------------

            
               
        sql = " select  "
        sql = sql & "'" & gobjMain.EmpresaActual.GNOpcion.CodigoSC & "' as codEntidad, '" & f1 & "' as  fechaDatos, "
        sql = sql & " codtipoDocumento , RUC, Nombre, "
        sql = sql & " TipoSujeto , codprovinciasc, CodCantonsc, CodParroquia,"
        sql = sql & " sexo, "
        sql = sql & " EstadoCivil ,"
        sql = sql & " OrigenIngresos,"
        sql = sql & " numfactura, "
        sql = sql & " TotalFactura , "
        sql = sql & " TotalFactura -isnull(TotalPago,0) as SALDO, "
        sql = sql & " FechaTrans, "
        sql = sql & " fechavenci,"
        sql = sql & " FechaVenci as FechaExi,"
        sql = sql & " DiasCredito, "
        sql = sql & " PeriocidadPago,   "
        
        sql = sql & " case when  FEchaPago is null"
        sql = sql & " then"
        sql = sql & " datediff(d,FechaVenci, " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")"
        sql = sql & " Else"
        sql = sql & " CASE WHEN (TotalFactura -isnull(TotalPago,0))=0 THEN"
        sql = sql & " case when FechaVenci>" & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ""
        sql = sql & " then"
        sql = sql & " datediff(d,FechaVenci, " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")"
        sql = sql & " Else"
        sql = sql & " datediff(d,FechaVenci, fechapago)"
        sql = sql & " End"
        sql = sql & " Else"
        sql = sql & " datediff(d,FechaVenci, " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")"
        sql = sql & " End"
        
        sql = sql & " End"
        sql = sql & " as Diasmora,"
        sql = sql & " case when  FEchaPago is null then"
        sql = sql & " case when  FechaVenci > " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & " then 0 else"
        sql = sql & " TotalFactura -isnull(TotalPago,0)  end "
        sql = sql & " else "
        sql = sql & " case when  FEchaPago < FechaVenci then 0 else TotalFactura -isnull(TotalPago,0) end end as MontoMorosidad, "
        sql = sql & " 0 as IntereMora, "
        sql = sql & " 0 as ValorDwmanda, "
        sql = sql & " 0 as CarteraCastigada, "
        sql = sql & " TotalFactura -isnull(TotalPago,0) as CuotaCredito, "
        'sql = sql & " FEchaPago,  "
        sql = sql & " case when FEchaPago is null then null else case when (TotalFactura -isnull(TotalPago,0))=0 then FEchaPago else null end end as FEchaPago,"
        sql = sql & " case when FEchaPago is null then null else case when (TotalFactura -isnull(TotalPago,0))=0 then 'C' else null end end as FormaPago,"
        sql = sql & " codtrans, "
        sql = sql & " numtrans, "
        sql = sql & " vwf.transid, "
        sql = sql & " '1 VENTAS' as TipoTrans "
        sql = sql & " INTO tmpVentaDINARDAP_A "
        sql = sql & " from tmpDatosFacturaDinardap vwf left join tmpDatosPagosDinardap vwp"
        sql = sql & " on vwf.transid= vwp.transid "
        sql = sql & " where fechatrans " & cadFechaVta
                    
        
        VerificaExistenciaTablaTemp "tmpVentaDINARDAP_A"
        Me.EjecutarSQL sql, numReg
        
        
        sql = " select "
        sql = sql & " codEntidad, fechaDatos, "
        sql = sql & " codtipoDocumento , RUC, Nombre, "
        sql = sql & " TipoSujeto , codprovinciasc, CodCantonsc, CodParroquia,"
        sql = sql & " sexo, "
        sql = sql & " EstadoCivil ,"
        sql = sql & " OrigenIngresos,"
        sql = sql & " numfactura, "
        sql = sql & " TotalFactura , "
        sql = sql & " SALDO, "
        sql = sql & " FechaTrans, "
        sql = sql & " fechavenci,"
        sql = sql & " FechaExi,"
        sql = sql & " DiasCredito, "
        sql = sql & " PeriocidadPago,   "
        sql = sql & " CASE WHEN Diasmora<0 THEN 0 ELSE DIASMORA END AS DIASMORA, "
        sql = sql & "  CASE WHEN FECHAVENCI > " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & " THEN 0 ELSE SALDO END AS MontoMorosidad, "
        sql = sql & " IntereMora, "
        sql = sql & " case when diasmora >= -30 and diasmora < 0 then saldo else 0 end as SaldoxV1_30,"
        sql = sql & " case when diasmora < -30 and diasmora >= -90 then saldo else 0 end as SaldoxV31_90,"
        sql = sql & " case when diasmora < -90 and diasmora >= -180 then saldo else 0 end as SaldoxV91_180,"
        sql = sql & " case when diasmora < -180 and diasmora >= -360 then saldo else 0 end as SaldoxV180_360,"
        sql = sql & " case when diasmora < -360 then saldo else 0 end as SaldoxV1_mas360,"
        sql = sql & " case when diasmora <= 30 and diasmora >= 0 then saldo else 0 end as SaldoV1_30,"
        sql = sql & " case when diasmora > 30 and diasmora <= 90 then saldo else 0 end as SaldoV31_90,"
        sql = sql & " case when diasmora > 90 and diasmora <= 180 then saldo else 0 end as SaldoV91_180,"
        sql = sql & " case when diasmora > 180 and diasmora <= 360 then saldo else 0 end as SaldoV181_360,"
        sql = sql & " case when diasmora > 360 then saldo else 0 end as SaldoVmas360, "
        sql = sql & " ValorDwmanda, "
        sql = sql & " CarteraCastigada, "
        sql = sql & " CuotaCredito, "
        sql = sql & " FEchaPago,"
        sql = sql & " FormaPago,"
        sql = sql & " codtrans, "
        sql = sql & " numtrans, "
        sql = sql & " transid, "
        sql = sql & " TipoTrans "
        sql = sql & " INTO tmpVentaDINARDAP "
        sql = sql & " from tmpVentaDINARDAP_a"
        
        VerificaExistenciaTablaTemp "tmpVentaDINARDAP"
        Me.EjecutarSQL sql, numReg
        
        
'        sql = sql & " UNION ALL "
               
        sql = " select  "
        sql = sql & "'" & gobjMain.EmpresaActual.GNOpcion.CodigoSC & "' as codEntidad, '" & f1 & "' as  fechaDatos, "
        sql = sql & " codtipoDocumento , RUC, Nombre, "
        sql = sql & " TipoSujeto , codprovinciasc, CodCantonsc, CodParroquia,"
        sql = sql & " sexo, "
        sql = sql & " EstadoCivil ,"
        sql = sql & " OrigenIngresos,"
        sql = sql & " numfactura, "
        sql = sql & " TotalFactura , "
        sql = sql & " TotalFactura -isnull(TotalPago,0) as SALDO, "
        sql = sql & " FechaTrans, "
        sql = sql & " fechavenci,"
        sql = sql & " FechaVenci as FechaExi,"
        sql = sql & " DiasCredito, "
        sql = sql & " PeriocidadPago,   "
        
        sql = sql & " case when  FEchaPago is null then"
        sql = sql & " case when  FechaVenci > " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & " then 0 else"
        sql = sql & " datediff(d,FechaVenci, " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") end "
        sql = sql & " else "
        sql = sql & " case when  FEchaPago < FechaVenci then 0 else datediff(d,FechaVenci, FEchaPago) end end as DiasMora, "
        
        
        sql = sql & " case when  FEchaPago is null then"
        sql = sql & " case when  FechaVenci > " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & " then 0 else"
        sql = sql & " TotalFactura -isnull(TotalPago,0)  end "
        sql = sql & " else "
        sql = sql & " case when  FEchaPago < FechaVenci then 0 else TotalFactura -isnull(TotalPago,0) end end as MontoMorosidad, "
       
        sql = sql & " 0 as IntereMora, "
        
        sql = sql & " case when  FEchaPago is null then"
        sql = sql & " case when  FechaVenci between  "
        sql = sql & " dateadd(d,1," & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") and"
        sql = sql & " dateadd(d,30," & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")"
        sql = sql & " then "
        sql = sql & " TotalFactura -isnull(TotalPago,0)  "
        sql = sql & " else"
        sql = sql & " 0 "
        sql = sql & " end "
        sql = sql & " else "
        sql = sql & " case when  FechaVenci between  "
        sql = sql & " dateadd(d,1," & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") and"
        sql = sql & " dateadd(d,30," & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")"
        sql = sql & " then "
        sql = sql & " TotalFactura -isnull(TotalPago,0) "
        sql = sql & " else "
        sql = sql & " 0 "
        sql = sql & " end "
        sql = sql & " end "
        sql = sql & " as SaldoxV1_30, "
        
        sql = sql & " case when  FEchaPago is null then"
        sql = sql & " case when  FechaVenci between  "
        sql = sql & " dateadd(d,31," & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") and"
        sql = sql & " dateadd(d,90," & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")"
        sql = sql & " then "
        sql = sql & " TotalFactura -isnull(TotalPago,0)  "
        sql = sql & " else"
        sql = sql & " 0 "
        sql = sql & " end "
        sql = sql & " else "
        sql = sql & " case when  FechaVenci between  "
        sql = sql & " dateadd(d,31," & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") and"
        sql = sql & " dateadd(d,90," & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")"
        sql = sql & " then "
        sql = sql & " TotalFactura -isnull(TotalPago,0) "
        sql = sql & " else "
        sql = sql & " 0 "
        sql = sql & " end "
        sql = sql & " end "
        sql = sql & " as SaldoxV1_90, "
        
        sql = sql & " case when  FEchaPago is null then"
        sql = sql & " case when  FechaVenci between  "
        sql = sql & " dateadd(d,91," & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") and"
        sql = sql & " dateadd(d,180," & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")"
        sql = sql & " then "
        sql = sql & " TotalFactura -isnull(TotalPago,0)  "
        sql = sql & " else"
        sql = sql & " 0 "
        sql = sql & " end "
        sql = sql & " else "
        sql = sql & " case when  FechaVenci between  "
        sql = sql & " dateadd(d,91," & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") and"
        sql = sql & " dateadd(d,180," & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")"
        sql = sql & " then "
        sql = sql & " TotalFactura -isnull(TotalPago,0) "
        sql = sql & " else "
        sql = sql & " 0 "
        sql = sql & " end "
        sql = sql & " end "
        sql = sql & " as SaldoxV1_180, "
       
        sql = sql & " case when  FEchaPago is null then"
        sql = sql & " case when  FechaVenci between  "
        sql = sql & " dateadd(d,181," & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") and"
        sql = sql & " dateadd(d,360," & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")"
        sql = sql & " then "
        sql = sql & " TotalFactura -isnull(TotalPago,0)  "
        sql = sql & " else"
        sql = sql & " 0 "
        sql = sql & " end "
        sql = sql & " else "
        sql = sql & " case when  FechaVenci between  "
        sql = sql & " dateadd(d,181," & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") and"
        sql = sql & " dateadd(d,360," & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")"
        sql = sql & " then "
        sql = sql & " TotalFactura -isnull(TotalPago,0) "
        sql = sql & " else "
        sql = sql & " 0 "
        sql = sql & " end "
        sql = sql & " end "
        sql = sql & " as SaldoxV1_360, "
       
        sql = sql & " case when  FEchaPago is null then"
        sql = sql & " case when  FechaVenci >  "
        sql = sql & " dateadd(d,361," & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")"
        sql = sql & " then "
        sql = sql & " TotalFactura -isnull(TotalPago,0)  "
        sql = sql & " else"
        sql = sql & " 0 "
        sql = sql & " end "
        sql = sql & " else "
        sql = sql & " case when  FechaVenci >  "
        sql = sql & " dateadd(d,361," & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")"
        sql = sql & " then "
        sql = sql & " TotalFactura -isnull(TotalPago,0) "
        sql = sql & " else "
        sql = sql & " 0 "
        sql = sql & " end "
        sql = sql & " end "
        sql = sql & " as SaldoxV1_mas360, "
        
        sql = sql & " case when  FEchaPago is null "
            sql = sql & " then"
            sql = sql & " case when  FechaVenci > " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & " "
                sql = sql & " then "
                sql = sql & " 0 "
                sql = sql & " else"
                    sql = sql & " case when datediff(d,FechaVenci, " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") between 1 and 30 "
                    sql = sql & " then"
                    sql = sql & " TotalFactura -isnull(TotalPago,0) "
                    sql = sql & " else"
                    sql = sql & " 0 "
                    sql = sql & " end"
                sql = sql & " end "
        sql = sql & " else "
            sql = sql & " case when  FEchaPago < FechaVenci "
                sql = sql & " then "
                sql = sql & " 0 "
                sql = sql & " else "
                    sql = sql & " case when datediff(d,FechaVenci, FEchaPago) between 1 and 30 "
                    sql = sql & " then"
                    sql = sql & " TotalFactura -isnull(TotalPago,0) "
                    sql = sql & " else"
                    sql = sql & " 0 "
                    sql = sql & " end"
                sql = sql & " end "
                sql = sql & " end "
        sql = sql & " as SaldoV1_30, "
        
        sql = sql & " case when  FEchaPago is null "
            sql = sql & " then"
            sql = sql & " case when  FechaVenci > " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & " "
                sql = sql & " then "
                sql = sql & " 0 "
                sql = sql & " else"
                    sql = sql & " case when datediff(d,FechaVenci, " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") between 31 and 90 "
                    sql = sql & " then"
                    sql = sql & " TotalFactura -isnull(TotalPago,0) "
                    sql = sql & " else"
                    sql = sql & " 0 "
                    sql = sql & " end"
                sql = sql & " end "
        sql = sql & " else "
            sql = sql & " case when  FEchaPago < FechaVenci "
                sql = sql & " then "
                sql = sql & " 0 "
                sql = sql & " else "
                    sql = sql & " case when datediff(d,FechaVenci, FEchaPago) between 31 and 90 "
                    sql = sql & " then"
                    sql = sql & " TotalFactura -isnull(TotalPago,0) "
                    sql = sql & " else"
                    sql = sql & " 0 "
                    sql = sql & " end"
                sql = sql & " end "
                sql = sql & " end "
        sql = sql & " as SaldoV31_90, "
        
        sql = sql & " case when  FEchaPago is null "
            sql = sql & " then"
            sql = sql & " case when  FechaVenci > " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & " "
                sql = sql & " then "
                sql = sql & " 0 "
                sql = sql & " else"
                    sql = sql & " case when datediff(d,FechaVenci, " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") between 91 and 180 "
                    sql = sql & " then"
                    sql = sql & " TotalFactura -isnull(TotalPago,0) "
                    sql = sql & " else"
                    sql = sql & " 0 "
                    sql = sql & " end"
                sql = sql & " end "
        sql = sql & " else "
            sql = sql & " case when  FEchaPago < FechaVenci "
                sql = sql & " then "
                sql = sql & " 0 "
                sql = sql & " else "
                    sql = sql & " case when datediff(d,FechaVenci, FEchaPago) between 91 and 180 "
                    sql = sql & " then"
                    sql = sql & " TotalFactura -isnull(TotalPago,0) "
                    sql = sql & " else"
                    sql = sql & " 0 "
                    sql = sql & " end"
                sql = sql & " end "
                sql = sql & " end "
        sql = sql & " as SaldoV91_180, "
        
        sql = sql & " case when  FEchaPago is null "
            sql = sql & " then"
            sql = sql & " case when  FechaVenci > " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & " "
                sql = sql & " then "
                sql = sql & " 0 "
                sql = sql & " else"
                    sql = sql & " case when datediff(d,FechaVenci, " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") between 181 and 360 "
                    sql = sql & " then"
                    sql = sql & " TotalFactura -isnull(TotalPago,0) "
                    sql = sql & " else"
                    sql = sql & " 0 "
                    sql = sql & " end"
                sql = sql & " end "
        sql = sql & " else "
            sql = sql & " case when  FEchaPago < FechaVenci "
                sql = sql & " then "
                sql = sql & " 0 "
                sql = sql & " else "
                    sql = sql & " case when datediff(d,FechaVenci, FEchaPago) between 181 and 360 "
                    sql = sql & " then"
                    sql = sql & " TotalFactura -isnull(TotalPago,0) "
                    sql = sql & " else"
                    sql = sql & " 0 "
                    sql = sql & " end"
                sql = sql & " end "
                sql = sql & " end "
        sql = sql & " as SaldoV181_360, "
        
        sql = sql & " case when  FEchaPago is null "
            sql = sql & " then"
            sql = sql & " case when  FechaVenci > " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & " "
                sql = sql & " then "
                sql = sql & " 0 "
                sql = sql & " else"
                    sql = sql & " case when datediff(d,FechaVenci, " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ") > 360 "
                    sql = sql & " then"
                    sql = sql & " TotalFactura -isnull(TotalPago,0) "
                    sql = sql & " else"
                    sql = sql & " 0 "
                    sql = sql & " end"
                sql = sql & " end "
        sql = sql & " else "
            sql = sql & " case when  FEchaPago < FechaVenci "
                sql = sql & " then "
                sql = sql & " 0 "
                sql = sql & " else "
                    sql = sql & " case when datediff(d,FechaVenci, FEchaPago) > 360 "
                    sql = sql & " then"
                    sql = sql & " TotalFactura -isnull(TotalPago,0) "
                    sql = sql & " else"
                    sql = sql & " 0 "
                    sql = sql & " end"
                sql = sql & " end "
                sql = sql & " end "
        sql = sql & " as SaldoVmas360, "
        
        
        sql = sql & " 0 as ValorDwmanda, "
        sql = sql & " 0 as CarteraCastigada, "
        sql = sql & " TotalFactura -isnull(TotalPago,0) as CuotaCredito, "
        sql = sql & " FEchaPago,  "
        sql = sql & " case when FEchaPago is null then null else 'C' end as FormaPago,"
        sql = sql & " codtrans, "
        sql = sql & " numtrans, "
        sql = sql & " vwf.transid, "
        sql = sql & " '2 COBROS' as TipoTrans "
        sql = sql & " into tmpCobrosDINARDAP "
        
        
        sql = sql & " from tmpDatosFacturaDinardap vwf left join tmpDatosPagosDinardap vwp"
        sql = sql & " on vwf.transid= vwp.transid "
        sql = sql & " where vwf.fechatrans between '01/01/2010' and   " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB)

        If DatePart("yyyy", f1) > 2013 Then
            sql = sql & " and fechapago between '01/" & DatePart("m", f1) & "/" & DatePart("yyyy", f1) & "' and " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB)
        Else
            sql = sql & " and fechapago between '01/01/" & DatePart("yyyy", f1) & "' and " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB)
        End If
        
        sql = sql & "  and (TotalFactura -IsNull(TotalPago, 0))=0 "

        sql = sql & " and   vwf.transid not in (select transid from tmpVentaDINARDAP)"


        VerificaExistenciaTablaTemp "tmpCobrosDINARDAP"
        Me.EjecutarSQL sql, numReg


        sql = " select  "
        sql = sql & "'" & gobjMain.EmpresaActual.GNOpcion.CodigoSC & "' as codEntidad, '" & f1 & "' as  fechaDatos, "
        sql = sql & " codtipoDocumento , RUC, Nombre, "
        sql = sql & " TipoSujeto , codprovinciasc, CodCantonsc, CodParroquia,"
        sql = sql & " sexo, "
        sql = sql & " EstadoCivil ,"
        sql = sql & " OrigenIngresos,"
        sql = sql & " numfactura, "
        sql = sql & " TotalFactura , "
        sql = sql & " TotalFactura -isnull(TotalPago,0) as SALDO, "
        sql = sql & " FechaTrans, "
        sql = sql & " fechavenci,"
        sql = sql & " FechaVenci as FechaExi,"
        sql = sql & " DiasCredito, "
        sql = sql & " PeriocidadPago,   "
        sql = sql & " case when  FEchaPago is null"
        sql = sql & " then"
        sql = sql & " datediff(d,FechaVenci, " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")"
        sql = sql & " Else"
        sql = sql & " CASE WHEN (TotalFactura -isnull(TotalPago,0))=0 THEN"
        sql = sql & " case when FechaVenci>" & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ""
        sql = sql & " then"
        sql = sql & " datediff(d,FechaVenci, " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")"
        sql = sql & " Else"
        sql = sql & " datediff(d,FechaVenci, fechapago)"
        sql = sql & " End"
        sql = sql & " Else"
        sql = sql & " datediff(d,FechaVenci, " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & ")"
        sql = sql & " End"
        sql = sql & " End"
        sql = sql & " as Diasmora,"
        sql = sql & " case when  FEchaPago is null then"
        sql = sql & " case when  FechaVenci > " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & " then 0 else"
        sql = sql & " TotalFactura -isnull(TotalPago,0)  end "
        sql = sql & " else "
        sql = sql & " case when  FEchaPago < FechaVenci then 0 else TotalFactura -isnull(TotalPago,0) end end as MontoMorosidad, "
        sql = sql & " 0 as IntereMora, "
        sql = sql & " 0 as ValorDwmanda, "
        sql = sql & " 0 as CarteraCastigada, "
        sql = sql & " TotalFactura -isnull(TotalPago,0) as CuotaCredito, "
        
        sql = sql & " case when (TotalFactura -IsNull(TotalPago, 0))>0 then null else FEchaPago end as FEchaPago ,  "
        sql = sql & " case when FEchaPago  is null then null else   case when (TotalFactura -IsNull(TotalPago, 0))>0 then null else   'C' end end as FormaPago,  "
        sql = sql & " codtrans, "
        sql = sql & " numtrans, "
        sql = sql & " vwf.transid, "

        sql = sql & " '3 CARTEREA ' as TipoTrans "
        sql = sql & " into tmpCarteraDINARDAP_A "
        sql = sql & " from tmpDatosFacturaDinardap vwf left join tmpDatosPagosDinardapCartera vwp"
        sql = sql & " on vwf.transid= vwp.transid "
        sql = sql & " where 1=1"
        sql = sql & " and fechatrans  " & cadfechaCartera
        sql = sql & " and (TotalFactura -IsNull(TotalPago, 0))>0 "
        sql = sql & " and   vwf.transid not in (select transid from tmpVentaDINARDAP)"
        sql = sql & " and   vwf.transid not in (select transid from tmpCobrosDINARDAP)"
        
        VerificaExistenciaTablaTemp "tmpCarteraDINARDAP_A"
        Me.EjecutarSQL sql, numReg
        

        sql = " select "
        sql = sql & " codEntidad, fechaDatos, "
        sql = sql & " codtipoDocumento , RUC, Nombre, "
        sql = sql & " TipoSujeto , codprovinciasc, CodCantonsc, CodParroquia,"
        sql = sql & " sexo, "
        sql = sql & " EstadoCivil ,"
        sql = sql & " OrigenIngresos,"
        sql = sql & " numfactura, "
        sql = sql & " TotalFactura , "
        sql = sql & " SALDO, "
        sql = sql & " FechaTrans, "
        sql = sql & " fechavenci,"
        sql = sql & " FechaExi,"
        sql = sql & " DiasCredito, "
        sql = sql & " PeriocidadPago,    "
        sql = sql & " CASE WHEN Diasmora<0 THEN 0 ELSE DIASMORA END AS DIASMORA, "
        sql = sql & "  CASE WHEN FECHAVENCI > " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & " THEN 0 ELSE SALDO END AS MontoMorosidad, "
        sql = sql & " IntereMora, "
        sql = sql & " case when diasmora >= -30 and diasmora < 0 then saldo else 0 end as SaldoxV1_30,"
        sql = sql & " case when diasmora < -30 and diasmora >= -90 then saldo else 0 end as SaldoxV31_90,"
        sql = sql & " case when diasmora < -90 and diasmora >= -180 then saldo else 0 end as SaldoxV91_180,"
        sql = sql & " case when diasmora < -180 and diasmora >= -360 then saldo else 0 end as SaldoxV180_360,"
        sql = sql & " case when diasmora < -360 then saldo else 0 end as SaldoxV1_mas360,"
        sql = sql & " case when diasmora <= 30 and diasmora >= 0 then saldo else 0 end as SaldoV1_30,"
        sql = sql & " case when diasmora > 30 and diasmora <= 90 then saldo else 0 end as SaldoV31_90,"
        sql = sql & " case when diasmora > 90 and diasmora <= 180 then saldo else 0 end as SaldoV91_180,"
        sql = sql & " case when diasmora > 180 and diasmora <= 360 then saldo else 0 end as SaldoV181_360,"
        sql = sql & " case when diasmora > 360 then saldo else 0 end as SaldoVmas360, "
        sql = sql & " ValorDwmanda, "
        sql = sql & " CarteraCastigada, "
        sql = sql & " CuotaCredito, "
        sql = sql & " FEchaPago,"
        sql = sql & " FormaPago,"
        sql = sql & " codtrans, "
        sql = sql & " numtrans, "
        sql = sql & " transid, "
        sql = sql & " TipoTrans "
        sql = sql & " INTO tmpCarteraDINARDAP "
        sql = sql & " from tmpCarteraDINARDAP_a"
        
        VerificaExistenciaTablaTemp "tmpCarteraDINARDAP"
        Me.EjecutarSQL sql, numReg
        sql = " select * from tmpVentaDINARDAP"
        sql = sql & " union all "
        sql = sql & " select * from tmpCobrosDINARDAP"
        sql = sql & " union all "
        sql = sql & " select * from tmpCarteraDINARDAP"
        sql = sql & " order by  nombre, fechatrans, codtrans, numtrans" '
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsVentasDINARDAP2015New = rs
    
    
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Ventas DINARDAP " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
End Function

Public Function ConsANCompras2015ParaXML() As Variant
    Dim pck As PCKardex, pcd As PCDocAsignado
    Dim objGnComp As GNComprobante, objGnCompDocOriginal As GNComprobante
    Dim sql As String, cond As String, CadenaValores As String
    Dim Recargo As String 'CadenaAgrupa  As String
    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
    Dim from As String, numReg As Long
    Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
    Dim Servicios As String, Bienes As String, RowRet As Long
    Const COL_BASESER = 15
    'segunda parte de la consulta: carga los valores de  Detalles de Anexos
    Const COL_FECHA = 2
    Const COL_CODCREDTRIB = 7
    Const COL_TRANSID = 1
    Const COL_TRANSRET = 5
    Dim condServ As String
    Dim condBien As String
    
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   
    With gobjCond
        
            cond = " AND (GNC.FechaTrans  BETWEEN " & _
                    FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                    FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            
            VerificaExistenciaTabla 0
            VerificaExistenciaTabla 1
            VerificaExistenciaTabla 2
            VerificaExistenciaTabla 3
            VerificaExistenciaTabla 4
            VerificaExistenciaTabla 5
            VerificaExistenciaTabla 6
            
            
            VerificaExistenciaTabla 10
            VerificaExistenciaTabla 11
            VerificaExistenciaTabla 12
            VerificaExistenciaTabla 13
            VerificaExistenciaTabla 14
            VerificaExistenciaTabla 15
            VerificaExistenciaTabla 16
            
            
            
            
            sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as TotalDescuento Into tmp0 " & _
                    "From IvRecargo ivR inner join " & _
                        "IvKardexRecargo ivkR Inner join " & _
                            "GnComprobante gNc  " & _
                        "On ivkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = IvkR.IdRecargo "
            sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.Servicios) & ") " & cond & _
                    " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")" & _
                  "Group by IvkR.TransID"
                  
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as TotalDescuento Into tmp10 " & _
                    "From IvRecargo ivR inner join " & _
                        "AFKardexRecargo ivkR Inner join " & _
                            "GnComprobante gNc  " & _
                        "On ivkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = IvkR.IdRecargo "
            sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.Servicios) & ") " & cond & _
                    " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")" & _
                  "Group by IvkR.TransID"
                  
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            'jeaa 09/01/2007
            'datos ICE
            sql = " Select Ivkr.TransID, "
            sql = sql & " SUM(IVK.CostoRealTotal) AS BASEice,"
            sql = sql & " MAX(IVC.CodICE) AS CodICE, SUM(ivkr.Valor) As ValorICE"
            sql = sql & " Into tmp6"
            sql = sql & " From IvRecargo ivR"
            sql = sql & " inner join IvKardexRecargo ivkR"
            sql = sql & " INNER JOIN IVKARDEX IVK"
            sql = sql & " INNER JOIN IVINVENTARIO IV"
            sql = sql & " INNER JOIN IVRECARGOICE IVC"
            sql = sql & " ON IV.IDICE=IVC.IDICE"
            sql = sql & " ON IVK.IDINVENTARIO=IV.IDINVENTARIO"
            sql = sql & " ON IVKR.TRANSID=IVK.TRANSID"
            sql = sql & " Inner join GnComprobante gNc"
            sql = sql & " On ivkr.TransID = gNc.TransID"
            sql = sql & " On Ivr.IdRecargo = IvkR.IdRecargo"
            sql = sql & " Where gnc.Estado <> 3"
            sql = sql & " AND ivr.CodRecargo IN ('" & gobjMain.EmpresaActual.GNOpcion.ObtenerValor("RecDescParaICE") & "')" & cond
            sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")"
            sql = sql & " Group by IvkR.TransID"
            
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            
'--datos de indices
            VerificaExistenciaTabla 3
            sql = " Select  DISTINCT GNC.TransID AS cp_id, GNC_b.TransID AS rtp_id"
            sql = sql & " Into tmp3"
            sql = sql & " From    (gncomprobante GNC Inner join pckardex pck_a ON GNC.TransID = pck_a.TransID ) INNER JOIN"
            sql = sql & "  (gncomprobante GNC_b Inner join pckardex pck_B ON GNC_b.TransID = pck_B.TransID )"
            sql = sql & " ON  PCK_A.ID = PCK_B.IDASIGNADO"
            sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " AND GNC_b.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion1) & ")"
            sql = sql & " AND (GNC.FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = sql & " and GNC.Estado<>3 and GNC_b.estado<>3 "
            
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            sql = " Select  DISTINCT GNC.TransID AS cp_id, GNC_b.TransID AS rtp_id"
            sql = sql & " Into tmp13"
            sql = sql & " From    (gncomprobante GNC Inner join pckardex pck_a ON GNC.TransID = pck_a.TransID ) INNER JOIN"
            sql = sql & "  (gncomprobante GNC_b Inner join pckardex pck_B ON GNC_b.TransID = pck_B.TransID )"
            sql = sql & " ON  PCK_A.ID = PCK_B.IDASIGNADO"
            sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " AND GNC_b.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion1) & ")"
            sql = sql & " AND (GNC.FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = sql & " and GNC.Estado<>3 and GNC_b.estado<>3 "
            
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            '--datos de la compra
            sql = " Select  GNC.TransID, Ane.FechaAnexos, GNC.FechaTrans, CodTipoDocumento, pcprovcli.ruc,"
            sql = sql & " GNC.Nombre, Ane.CodCredTrib, Ane.CodTipoComp, Ane.NumAutSRI,"
            sql = sql & " Ane.NumSerie, Ane.NumSecuencial, GNC.Descripcion, CodFormaPagoSRI, BandPagoExterior, CodPaisSRI , BandDobleTributa, BandPagoSujRet, "
            sql = sql & " Case Ane.BandDevolucion WHEN 0 THEN 'N' ELSE 'S' END AS BandDev,"
            sql = sql & " Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as Trans,"
            sql = sql & " Gnc.CodTrans as Transa, Gnc.NumTrans as NumTransa,"
            sql = sql & " Case vw.CostoTotalBase0 When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBase0 + (vw.CostoTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))) ) end As Valor0, "
            sql = sql & " Case vw.CostoTotalBaseIVA When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseIVA + (vw.CostoTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) end AS Valor12, "
            sql = sql & " Case vw.CostoTotalBaseNOIVA When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseNOIVA + (vw.CostoTotalBaseNOIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) end AS ValorNOIVA, "
            sql = sql & " Case vw.CostoTotal When 0 then 0 else "
            sql = sql & " vw.SignoCompra  * (vw.CostoTotal + (vw.CostoTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))))  End AS CostoTotal,  "
            sql = sql & " ane.NumSerieEstablecimiento ,ane.NumSeriePunto ,ane.FechaCaducidad, "
            sql = sql & " tmp6.BASEice, tmp6.CodICE ,tmp6.ValorICE,BANDREToTRO, idproveedorref, GNc.porcentajeiva "
            sql = sql & " Into tmp1"
            sql = sql & " from    (( tmp0 Right join gncomprobante Gnc "
            sql = sql & " inner join gntrans gnt"
            sql = sql & " inner join GNTransRecargo gntr"
            sql = sql & " inner join ivrecargo ivr"
            sql = sql & " on ivr.idrecargo=gntr.idrecargo"
            sql = sql & " on gnt.codtrans= gntr.codtrans"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " left join tmp6 on gnc.transid=tmp6.transid"
            sql = sql & " inner join vwConsSUMIVKardexIVA vw ON Gnc.TransID = vw.transid "
            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " inner join Anexos Ane on Gnc.TransID = Ane.Transid)"
            sql = sql & " right join pcprovcli  "
            sql = sql & " left join anexo_TipoDocumento atd on pcprovcli.IdTipoDocumento=atd.Id"
            sql = sql & " on gnc.IdProveedorRef=pcprovcli.idprovcli"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " and GNC.Estado<>3 " & cond
            
            sql = sql & " union all"
            
            
            '--datos de la compra activos
            sql = sql & " Select  GNC.TransID, Ane.FechaAnexos, GNC.FechaTrans, CodTipoDocumento, pcprovcli.ruc,"
            sql = sql & " GNC.Nombre, Ane.CodCredTrib, Ane.CodTipoComp, Ane.NumAutSRI,"
            sql = sql & " Ane.NumSerie, Ane.NumSecuencial, GNC.Descripcion, CodFormaPagoSRI, BandPagoExterior, CodPaisSRI , BandDobleTributa, BandPagoSujRet, "
            sql = sql & " Case Ane.BandDevolucion WHEN 0 THEN 'N' ELSE 'S' END AS BandDev,"
            sql = sql & " Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as Trans,"
            sql = sql & " Gnc.CodTrans as Transa, Gnc.NumTrans as NumTransa,"
            sql = sql & " Case vw.CostoTotalBase0 When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBase0 + (vw.CostoTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))) ) end As Valor0, "
            sql = sql & " Case vw.CostoTotalBaseIVA When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseIVA + (vw.CostoTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) end AS Valor12, "
            sql = sql & " 0 as ValorNOIVA, "
            sql = sql & " Case vw.CostoTotal When 0 then 0 else "
            sql = sql & " vw.SignoCompra  * (vw.CostoTotal + (vw.CostoTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))))  End AS CostoTotal,  "
            sql = sql & " ane.NumSerieEstablecimiento ,ane.NumSeriePunto ,ane.FechaCaducidad, "
            sql = sql & " 0 as BASEice, '0' as CodICE , 0 as ValorICE,BANDREToTRO, idproveedorref, GNc.porcentajeiva "
            sql = sql & " from    (( tmp10 Right join gncomprobante Gnc "
            sql = sql & " inner join gntrans gnt"
            sql = sql & " inner join GNTransRecargo gntr"
            sql = sql & " inner join ivrecargo ivr"
            sql = sql & " on ivr.idrecargo=gntr.idrecargo"
            sql = sql & " on gnt.codtrans= gntr.codtrans"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " inner join vwConsSUMAFKardexIVA vw ON Gnc.TransID = vw.transid "
            sql = sql & " ON tmp10.TransID = Gnc.TransID)"
            sql = sql & " inner join Anexos Ane on Gnc.TransID = Ane.Transid)"
            sql = sql & " right join pcprovcli  "
            sql = sql & " left join anexo_TipoDocumento atd on pcprovcli.IdTipoDocumento=atd.Id"
            sql = sql & " on gnc.IdProveedorRef=pcprovcli.idprovcli"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " and GNC.Estado<>3 " & cond
            
            VerificaExistenciaTabla 1
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
            
            '-- datos de las retenciones
            
            
            
            ' union de las tres tablas
            ' union de las tres tablas
            sql = " select  DISTINCT  a.Transid,a.FechaAnexos, a.FechaTrans, a.Transa,  a.NumTransa, "
            sql = sql & "a.CodTipoDocumento, a.idproveedorref, a.RUC, a.Nombre, "
            sql = sql & " a.NumSerieEstablecimiento , a.NumSeriePunto, "
            sql = sql & " case when len(a.NumSecuencial)>9 then right(a.NumSecuencial,9) else a.NumSecuencial end as NumSecuencial ,  "
            sql = sql & " a.NumAutSRI, a.FechaCaducidad, "
            sql = sql & "a.CodCredTrib, a.CodTipoComp, a.CodFormaPagoSRI, a.BandPagoExterior, a.CodPaisSRI , a.BandDobleTributa, a.BandPagoSujRet, "
            sql = sql & " a.Valor0, a.Valor12,a.ValorNOIVA, CodICE, ISNULL(ValorICE,0) AS ValorICE, BANDREToTRO, (a.porcentajeiva) "
                sql = sql & " From tmp1 a  "
            sql = sql & " order by a.CodTipoComp"

            
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANCompras2015ParaXML = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Compraspara Anexos 2015 XML" & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 4
End Function

'auc 08/09/2015
Public Function ListaAnexoTipoIVA(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodRetencion, Descripcion,porcentaje/100 as Porcentaje FROM anexos_retencion_IVA"
    sql = sql & " ORDER BY CodRetencion"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaAnexoTipoIVA = rs
    Else
        ListaAnexoTipoIVA = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function RecuperaAnexosRetIVA(key As Variant) As Anexos
Dim obj As Anexos
    Set obj = New Anexos
    Set obj.Empresa = Me
    On Error Resume Next
    obj.RecuperarAnexoRetIVA key
    If Err.Number = 0 Then Set RecuperaAnexosRetIVA = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function ListaAnexoTipoRetencionIVA(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodRetencion, Descripcion,porcentaje/100 as Porcentaje FROM anexos_retencion_IVA"
    sql = sql & " ORDER BY CodRetencion"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaAnexoTipoRetencionIVA = rs
    Else
        ListaAnexoTipoRetencionIVA = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ConsANRetencionCompras2015() As Variant
    Dim pck As PCKardex, pcd As PCDocAsignado
    Dim objGnComp As GNComprobante, objGnCompDocOriginal As GNComprobante
    Dim sql As String, cond As String, CadenaValores As String
    Dim Recargo As String 'CadenaAgrupa  As String
    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
    Dim from As String, numReg As Long
    Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
    Dim Servicios As String, Bienes As String, RowRet As Long, rsaux As Recordset
    Const COL_BASESER = 15
    'segunda parte de la consulta: carga los valores de  Detalles de Anexos
    Const COL_FECHA = 2
    Const COL_CODCREDTRIB = 7
    Const COL_TRANSID = 1
    Const COL_TRANSRET = 5
    Dim condServ As String
    Dim condBien As String
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    With gobjCond
            cond = " AND (GNC.FechaTrans  BETWEEN " & _
                    FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                    FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            VerificaExistenciaTabla 0
            VerificaExistenciaTabla 1
            VerificaExistenciaTabla 2
            VerificaExistenciaTabla 3
            VerificaExistenciaTabla 4
            VerificaExistenciaTabla 5
            VerificaExistenciaTabla 6
            VerificaExistenciaTablaTemp "t0"
            sql = "Select Ivkr.TransID, SUM(IvKr.Valor) as TotalDescuento Into tmp0 " & _
                    "From IvRecargo ivR inner join " & _
                        "IvKardexRecargo ivkR Inner join " & _
                            "GnComprobante gNc  " & _
                        "On ivkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = IvkR.IdRecargo "
            sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.CodForma) & ") " & cond & _
                    " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")" & _
                  "Group by IvkR.TransID"
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            VerificaExistenciaTablaTemp "t0"
            sql = "Select AfkR.TransID, SUM(AfkR.Valor) as TotalDescuento Into t0 " & _
                    "From IvRecargo ivR inner join " & _
                        "AFKardexRecargo AfkR Inner join " & _
                            "GnComprobante gNc  " & _
                        "On afkr.TransID = gNc.TransID " & _
                    "On Ivr.IdRecargo = AfkR.IdRecargo "
            sql = sql & "WHERE gNc.Estado <> 3 AND ivr.CodRecargo IN (" & PreparaCadena(.CodForma) & ") " & cond & _
                    " AND GNC.CodTrans IN (" & PreparaCadena(.Usuario1) & ")" & _
                  "Group by afkR.TransID"
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            'VerificaExistenciaTablaTemp "t0"
            'jeaa 09/01/2007
            'datos ICE
            sql = " Select Ivkr.TransID, "
            If Me.GNOpcion.IVKTipoDatoDouble Then
                sql = sql & " SUM(IVK.CostoRealTotalDou) AS BASEice,"
            Else
                sql = sql & " SUM(IVK.CostoRealTotal) AS BASEice,"
            End If
           sql = sql & " MAX(IVC.CodICE) AS CodICE, SUM(ivkr.Valor) As ValorICE"
            sql = sql & " Into tmp6"
            sql = sql & " From IvRecargo ivR"
            sql = sql & " inner join IvKardexRecargo ivkR"
            sql = sql & " INNER JOIN IVKARDEX IVK"
            sql = sql & " INNER JOIN IVINVENTARIO IV"
            sql = sql & " INNER JOIN IVRECARGOICE IVC"
            sql = sql & " ON IV.IDICE=IVC.IDICE"
            sql = sql & " ON IVK.IDINVENTARIO=IV.IDINVENTARIO"
            sql = sql & " ON IVKR.TRANSID=IVK.TRANSID"
            sql = sql & " Inner join GnComprobante gNc"
            sql = sql & " On ivkr.TransID = gNc.TransID"
            sql = sql & " On Ivr.IdRecargo = IvkR.IdRecargo"
            sql = sql & " Where gnc.Estado <> 3"
            sql = sql & " AND ivr.CodRecargo IN ('" & gobjMain.EmpresaActual.GNOpcion.ObtenerValor("RecDescParaICE") & "')" & cond
            sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(.CodTrans) & ")"
            sql = sql & " Group by IvkR.TransID"
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
'--datos de indices
            VerificaExistenciaTabla 3
            sql = " Select  DISTINCT GNC.TransID AS cp_id, GNC_b.TransID AS rtp_id"
            sql = sql & " Into tmp3"
            sql = sql & " From    (gncomprobante GNC Inner join pckardex pck_a ON GNC.TransID = pck_a.TransID ) INNER JOIN"
            sql = sql & "  (gncomprobante GNC_b Inner join pckardex pck_B ON GNC_b.TransID = pck_B.TransID )"
            sql = sql & " ON  PCK_A.ID = PCK_B.IDASIGNADO"
            If Len(gobjMain.objCondicion.Usuario1) > 0 Then
                sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(gobjMain.objCondicion.CodTrans) + "," + PreparaCadena(gobjMain.objCondicion.Usuario1) & ")"
            Else
                sql = sql & " AND GNC.CodTrans IN (" & PreparaCadena(gobjMain.objCondicion.CodTrans) + "," + PreparaCadena(gobjMain.objCondicion.Usuario1) & ")"
            End If
            sql = sql & " AND GNC_b.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion1) & ")"
            sql = sql & " AND (GNC.FechaTrans  BETWEEN " & _
                FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & " AND " & _
                FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            sql = sql & " and GNC.Estado<>3 and GNC_b.estado<>3 "
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            '--datos de la compra
            sql = " Select  GNC.TransID, GNC.FechaTrans, pcprovcli.ruc,"
            sql = sql & " GNC.Nombre, "
            sql = sql & " GNC.Descripcion,"
            sql = sql & " Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as Trans,"
            sql = sql & " Gnc.CodTrans as Transa, Gnc.NumTrans as NumTransa,"
            sql = sql & " Case vw.CostoTotalBase0 When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBase0 + (vw.CostoTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))) ) end As Valor0, "
            sql = sql & " Case vw.CostoTotalBaseIVA When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseIVA + (vw.CostoTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) end AS Valor12, "
            sql = sql & " Case vw.CostoTotal When 0 then 0 else "
            sql = sql & " vw.SignoCompra  * (vw.CostoTotal + (vw.CostoTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))))  End AS CostoTotal,  "
            sql = sql & " Case vw.CostoTotalBaseNOIVA When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseNOIVA + (vw.CostoTotalBaseNOIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) end AS ValorNOIVA, "
            sql = sql & " tmp6.BASEice, tmp6.CodICE ,tmp6.ValorICE"
            sql = sql & " Into tmp1"
            sql = sql & " from    (( tmp0 Right join gncomprobante Gnc "
            sql = sql & " inner join gntrans gnt"
            sql = sql & " inner join GNTransRecargo gntr"
            sql = sql & " inner join ivrecargo ivr"
            sql = sql & " on ivr.idrecargo=gntr.idrecargo"
            sql = sql & " on gnt.codtrans= gntr.codtrans"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " left join tmp6 on gnc.transid=tmp6.transid"
            If Me.GNOpcion.IVKTipoDatoDouble Then
                sql = sql & " inner join vwConsSUMIVKardexIVADou vw ON Gnc.TransID = vw.transid "
            Else
                sql = sql & " inner join vwConsSUMIVKardexIVA vw ON Gnc.TransID = vw.transid "
            End If
           sql = sql & " ON tmp0.TransID = Gnc.TransID))"
            sql = sql & " right join pcprovcli  on gnc.IdProveedorRef=pcprovcli.idprovcli"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " and GNC.Estado<>3 " & cond
            sql = sql & " union all "
            sql = sql & " Select  GNC.TransID, GNC.FechaTrans, pcprovcli.ruc,"
            sql = sql & " GNC.Nombre, "
            sql = sql & " GNC.Descripcion,"
            sql = sql & " Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as Trans,"
            sql = sql & " Gnc.CodTrans as Transa, Gnc.NumTrans as NumTransa,"
            sql = sql & " Case vw.CostoTotalBase0 When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBase0 + (vw.CostoTotalBase0 * (cast( isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))) ) end As Valor0, "
            sql = sql & " Case vw.CostoTotalBaseIVA When 0 then 0 else "
            sql = sql & " vw.SignoCompra * (vw.CostoTotalBaseIVA + (vw.CostoTotalBaseIVA * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) end AS Valor12, "
            sql = sql & " Case vw.CostoTotal When 0 then 0 else "
            sql = sql & " vw.SignoCompra  * (vw.CostoTotal + (vw.CostoTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float))))  End AS CostoTotal,  0 AS ValorNOIVA, "
            sql = sql & " 0 as BASEice, '0' as CodICE , 0 as ValorICE"
            sql = sql & " from    (( t0 Right join gncomprobante Gnc "
            sql = sql & " inner join gntrans gnt"
            sql = sql & " inner join GNTransRecargo gntr"
            sql = sql & " inner join ivrecargo ivr"
            sql = sql & " on ivr.idrecargo=gntr.idrecargo"
            sql = sql & " on gnt.codtrans= gntr.codtrans"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " left join tmp6 on gnc.transid=tmp6.transid"
            sql = sql & " inner join vwConsSUMAFKardexIVA vw ON Gnc.TransID = vw.transid "
            sql = sql & " ON t0.TransID = Gnc.TransID))"
            sql = sql & " right join pcprovcli  on gnc.IdProveedorRef=pcprovcli.idprovcli"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.Usuario1) & ")"
            sql = sql & " and GNC.Estado<>3 " & cond
            VerificaExistenciaTabla 1
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            '-- datos de las retenciones
        sql = "select t.codretencion, t.descripcion, a.descripcion as descSRI"
        sql = sql & " from tsretencion t left join anexos_retencion_iva a on idanexo=id"
        sql = sql & " Where t.BandValida = 1 And BandIVA = 1 And BandCompras = 1"
        Set rsaux = Me.OpenRecordset(sql)
            sql = " "
             'For i = 1 To 3
            For i = 1 To rsaux.RecordCount
                sql = sql & " select GNC.TransID, Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as TransRet,"
                sql = sql & " sum(ts_ret.base) as Base, "
                sql = sql & "'" & rsaux("codretencion") & "' as Cod,"
                sql = sql & " sum(ts_ret.Debe+ts_ret.Haber) as Valor ,"
                sql = sql & " NumSerieEstablecimiento, NumSeriePunto ,"
                If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosRetencion")) > 0 Then
                    If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosRetencion") > 0 Then
                        sql = sql & " gnc.NumDocRef as NumeroTrans , "
                    Else
                        sql = sql & " gnc.NumTrans as NumeroTrans, "
                    End If
                Else
                    sql = sql & " gnc.NumTrans as NumeroTrans, "
                End If
                If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion")) > 0 Then
                    If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion") > 0 Then
                        sql = sql & " gnc.AutorizacionSRI as NumAutorizacion , "
                    Else
                        sql = sql & " gnt.NumAutorizacion as NumAutorizacion, "
                    End If
                Else
                    sql = sql & " gnt.NumAutorizacion as NumAutorizacion, "
                End If
                sql = sql & " gnc.FechaTRans, BANDIVA, "
                sql = sql & "'" & rsaux("descSRI") & "' as CodSRI "
                If i = 1 Then
                    sql = sql & " into tmp2 "
                End If
                sql = sql & " from    gntrans gnt"
                sql = sql & " inner join gncomprobante Gnc"
                sql = sql & " inner join (tskardexret ts_ret"
                sql = sql & " inner join tsretencion tsr left join anexos_retencion_ir ar on tsr.idanexo=ar.id on ts_ret.IdRetencion = tsr.IdRetencion )"
                sql = sql & " on GNC.TransID=ts_ret.TransID"
                sql = sql & " on gnc.codtrans=gnt.codtrans"
                sql = sql & " WHERE GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion1) & ")"
                sql = sql & " and GNC.Estado<>3"
                sql = sql & "and tsr.CodRetencion='" & rsaux("codretencion") & "' "
                sql = sql & " Group By ts_ret.TransID, GNC.TransId, GNC.CodTrans,"
                sql = sql & " GnC.NumTrans, NumSerieEstablecimiento, NumSeriePunto,"
                sql = sql & " gnc.NumDocRef ,  gnc.FechaTrans, ar.codretencion, "
                If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion")) > 0 Then
                    If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion") > 0 Then
                        sql = sql & " gnc.AutorizacionSRI   "
                    Else
                        sql = sql & " gnt.NumAutorizacion  "
                    End If
                Else
                    sql = sql & " gnt.NumAutorizacion  "
                End If
                sql = sql & " ,tsr.Porcentaje, BANDIVA"
                sql = sql & " union all "
                rsaux.MoveNext
            Next i
            sql = sql & " select  GNC.TransID, Gnc.CodTrans+' '+CONVERT(varchar,Gnc.NumTrans) as TransRet,"
            sql = sql & " (ts_ret.base) as Base,"
            sql = sql & " CASE WHEN BANDIVA=1 THEN  'BIENES'  ELSE (tsr.CodRetencion) END as Cod,"
            sql = sql & " (ts_ret.Debe+ts_ret.Haber) as Valor ,"
            sql = sql & " NumSerieEstablecimiento, NumSeriePunto ,"
                If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosRetencion")) > 0 Then
                    If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaDatosRetencion") > 0 Then
                        sql = sql & " gnc.NumDocRef as NumeroTrans , "
                    Else
                        sql = sql & " gnc.NumTrans as NumeroTrans, "
                    End If
                Else
                    sql = sql & " gnc.NumTrans as NumeroTrans, "
                End If
                If Len(gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion")) > 0 Then
                    If gobjMain.EmpresaActual.GNOpcion.ObtenerValor("ImportaAutorizacion") > 0 Then
                        sql = sql & " gnc.AutorizacionSRI as NumAutorizacion , "
                    Else
                        sql = sql & " gnt.NumAutorizacion as NumAutorizacion, "
                    End If
                Else
                    sql = sql & " gnt.NumAutorizacion as NumAutorizacion, "
                End If
            sql = sql & "  gnc.FechaTRans, BANDIVA , ar.codretencion as CODSRI " '
            sql = sql & " from    gntrans gnt"
            sql = sql & " inner join gncomprobante Gnc"
            sql = sql & " inner join (tskardexret ts_ret"
            sql = sql & " inner join tsretencion tsr   left join anexos_retencion_ir ar on tsr.idanexo=ar.id on ts_ret.IdRetencion = tsr.IdRetencion )" '
            sql = sql & " on GNC.TransID=ts_ret.TransID"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " WHERE GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodRetencion1) & ")"
            sql = sql & " and GNC.Estado<>3"
            sql = sql & " and (tsr.CodRetencion NOT in "
            sql = sql & " (" & PreparaCadena(gobjCond.Bienes) & ")"
            sql = sql & " AND tsr.CodRetencion NOT in"
            sql = sql & " (" & PreparaCadena(gobjCond.Servicios) & "))"
            VerificaExistenciaTabla 2
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            ' union de las tres tablas
            ' union de las tres tablas
            sql = " select  DISTINCT  "
            sql = sql & " CASE When BandIVA=1 then 'IVA' else 'RENTA' end as IVA, b.CODSRI, b.Cod, "
            sql = sql & "  a.TransID, a.FechaTrans, a.Transa, a.NumTransa, "
            sql = sql & "  a.RUC, a.Nombre, "
            sql = sql & "  b.TransRet as TransRet,"
            sql = sql & "  b.FechaTrans As FechaTrans, "
            sql = sql & "  b.NumSerieEstablecimiento as NumSerieEstablecimiento,"
            sql = sql & "  b.NumSeriePunto NumSeriePunto ,"
            sql = sql & "  b.NumeroTrans as NumTrans,"
            sql = sql & "  b.NumAutorizacion as NumAutorizacion,"
            sql = sql & " b.Base ,  b.valor "
            sql = sql & " From tmp1 a  inner join tmp2 b right join tmp3 c  on b.Transid=c.rtp_id on a.Transid=c.cp_id"
            '--datos de la compra sin retencion
            sql = sql & " union all "
            sql = sql & " Select  DISTINCT 'RENTA' as IVA, ane.CodTipoRetencion, ane.CodTipoRetencion, GNC.TransID, "
            sql = sql & " GNC.FechaTrans,  gnc.codtrans, gnc.numtrans, pcprovcli.ruc, GNC.Nombre, "
            sql = sql & " '' as transret, GNC.FechaTrans, "
            sql = sql & " '' as NumSerieEstablecimiento, '' as NumSeriePunto , '' as NumTrans, '' NumAutorizacion, "
            sql = sql & " Case vw.CostoTotal When 0 then 0 else "
            sql = sql & " vw.SignoCompra  * (vw.CostoTotal + (vw.CostoTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) End AS CostoTotal,  "
            sql = sql & " 0  as valorRetenido "
            sql = sql & " from    (( tmp0 Right join gncomprobante Gnc "
            sql = sql & " inner join gntrans gnt"
            sql = sql & " inner join GNTransRecargo gntr"
            sql = sql & " inner join ivrecargo ivr"
            sql = sql & " on ivr.idrecargo=gntr.idrecargo"
            sql = sql & " on gnt.codtrans= gntr.codtrans"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " left join tmp6 on gnc.transid=tmp6.transid"
            sql = sql & " inner join vwConsSUMIVKardexIVA vw ON Gnc.TransID = vw.transid "
            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " inner join Anexos Ane on Gnc.TransID = Ane.Transid)"
            sql = sql & " right join pcprovcli  on gnc.IdProveedorRef=pcprovcli.idprovcli"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " and GNC.Estado<>3 and BandCompraSinRetencion=1 " & cond
'            sql = sql & " order by  CASE When BandIVA=1 then 'IVA' else 'RENTA' end, b.Codsri,  NumTrans "
'41
            sql = sql & " union all "
            sql = sql & " Select  DISTINCT 'RENTA' as IVA, '332_41', ane.CodTipoRetencion, GNC.TransID, "
            sql = sql & " GNC.FechaTrans,  gnc.codtrans, gnc.numtrans, pcprovcli.ruc, GNC.Nombre, "
            sql = sql & " '' as transret, GNC.FechaTrans, "
            sql = sql & " '' as NumSerieEstablecimiento, '' as NumSeriePunto , '' as NumTrans, 'Comp. 41' NumAutorizacion, "
            sql = sql & " Case vw.CostoTotal When 0 then 0 else "
            sql = sql & " vw.SignoCompra  * (vw.CostoTotal + (vw.CostoTotal * (cast(isnull(TotalDescuento,0) as float) / cast(vw.CostoTotal as float)))) End AS CostoTotal,  "
            sql = sql & " 0  as valorRetenido "
            sql = sql & " from    (( tmp0 Right join gncomprobante Gnc "
            sql = sql & " inner join gntrans gnt"
            sql = sql & " inner join GNTransRecargo gntr"
            sql = sql & " inner join ivrecargo ivr"
            sql = sql & " on ivr.idrecargo=gntr.idrecargo"
            sql = sql & " on gnt.codtrans= gntr.codtrans"
            sql = sql & " on gnc.codtrans=gnt.codtrans"
            sql = sql & " left join tmp6 on gnc.transid=tmp6.transid"
            sql = sql & " inner join vwConsSUMIVKardexIVA vw ON Gnc.TransID = vw.transid "
            sql = sql & " ON tmp0.TransID = Gnc.TransID)"
            sql = sql & " inner join Anexos Ane on Gnc.TransID = Ane.Transid)"
            sql = sql & " right join pcprovcli  on gnc.IdProveedorRef=pcprovcli.idprovcli"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodTrans) & ")"
            sql = sql & " and GNC.Estado<>3 and CodTipoComp= 41 " & cond
            sql = sql & " order by  CASE When BandIVA=1 then 'IVA' else 'RENTA' end, b.Codsri,  NumTrans "
    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANRetencionCompras2015 = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Retencion Compras para Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
    VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 4
End Function

Public Function ConsPCGARKardexPorTrans2PCK(ByVal BandProveedor As Boolean, _
                                     ByVal BandCliente As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsPCKardexPorTrans")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodProvCli1") = IIf(Len(gobjCond.CodPC1) = 0, "!", gobjCond.CodPC1)
    qdef.Parameters("CodProvCli2") = IIf(Len(gobjCond.CodPC2) = 0, String$(20, "z"), gobjCond.CodPC2)
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    qdef.Parameters("prmBandProveedor") = BandProveedor
    qdef.Parameters("prmBandCliente") = BandCliente
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient

    If gobjMain.GrupoActual.PermisoActual.ConsRepVen And BandCliente Then
        sql = "spConsPCKardexPorTransVen " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodPC1 & "','" & _
                gobjCond.CodPC2 & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB) & "," & _
                CadenaBool(BandProveedor, TipoDB) & "," & _
                CadenaBool(BandCliente, TipoDB) & ",'" & _
                gobjMain.UsuarioActual.codUsuario & "'"
    Else
        sql = "spConsPCKardexPorTrans2PCK " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodPC1 & "','" & _
                gobjCond.CodPC2 & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB) & "," & _
                CadenaBool(BandProveedor, TipoDB) & "," & _
                CadenaBool(BandCliente, TipoDB)
    End If
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    Set ConsPCGARKardexPorTrans2PCK = rs
    Set rs = Nothing
End Function


Public Function ConsPCKardexGarPorTrans(ByVal BandProveedor As Boolean, _
                                     ByVal BandCliente As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsPCKardexPorTrans")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodProvCli1") = IIf(Len(gobjCond.CodPC1) = 0, "!", gobjCond.CodPC1)
    qdef.Parameters("CodProvCli2") = IIf(Len(gobjCond.CodPC2) = 0, String$(20, "z"), gobjCond.CodPC2)
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    qdef.Parameters("prmBandProveedor") = BandProveedor
    qdef.Parameters("prmBandCliente") = BandCliente
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient

        sql = "spConsPCKardexgarPorTrans " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodPC1 & "','" & _
                gobjCond.CodPC2 & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB) & "," & _
                CadenaBool(BandProveedor, TipoDB) & "," & _
                CadenaBool(BandCliente, TipoDB)
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    
    Set ConsPCKardexGarPorTrans = rs
    Set rs = Nothing
End Function


Public Function ListaPCGar(BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
             sql = "SELECT pc.CodProvCli, pc.Nombre, g1.CodGrupo1, g2.CodGrupo2, g3.CodGrupo3,g4.codgrupo4,pc.observacion, pc.estado  "
             sql = sql & " FROM PCGrupo4 g4 RIGHT JOIN( PCGrupo3 g3 RIGHT JOIN (PCGrupo2 g2 RIGHT JOIN (PCGrupo1 g1 RIGHT JOIN PCProvCli pc " & _
                          " ON g1.IdGrupo1 = pc.IdGrupo1) " & _
                    " ON g2.IdGrupo2 = pc.IdGrupo2) " & _
                " ON g3.IdGrupo3 = pc.IdGrupo3) " & _
               " ON g4.idgrupo4 = pc.idgrupo4 "
            sql = sql & " WHERE pc.BandGarante=" & CadenaBool(True, TipoDB)
            
            'sql = sql & "and Estado <> 2 "
    
    sql = sql & " ORDER BY pc.Nombre"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCGar = rs
    Else
        ListaPCGar = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


Public Function ConsANExportacion2015paraXML() As Variant
   Dim pck As PCKardex, pcd As PCDocAsignado
    Dim objGnComp As GNComprobante, objGnCompDocOriginal As GNComprobante
    Dim sql As String, cond As String, CadenaValores As String
    Dim Recargo As String 'CadenaAgrupa  As String
    Dim v As Variant, max As Integer, i As Integer, j As Integer, X As Integer
    Dim from As String, numReg As Long, f1 As String
   Dim rs As Recordset, Retenidos As Variant, NumRet As Long, v1 As Variant
    Dim Servicios As String, Bienes As String, RowRet As Long
   Const COL_BASESER = 15
    'segunda parte de la consulta: carga los valores de  Detalles de Anexos
    Const COL_FECHA = 2
    Const COL_CODCREDTRIB = 7
    Const COL_TRANSID = 1
    Const COL_TRANSRET = 5
    Dim condServ As String
    Dim condBien As String
    Dim Vista As String
    Dim pos As Integer, pos1 As Integer
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
   With gobjCond
        'Reporte de un mes a la vez
        f1 = DateSerial(Year(.fecha1), Month(.fecha1), 1)
        cond = " AND GNC.FechaTrans BETWEEN " & FechaYMD(f1, gobjMain.EmpresaActual.TipoDB) & _
               " AND " & FechaYMD(DateAdd("m", 1, f1) - 1, gobjMain.EmpresaActual.TipoDB)
            sql = sql & " Select pc.ruc , pc.nombre as Nombre,"
            sql = sql & " case when BandReferendo=1 then '01' else '02' end as Referendo,"
            sql = sql & " '0' + TipoTrans as TipoComprobante, CodDistrito, Anio, CodRegimen,"
            sql = sql & " Correlativo, DocTransporte , FechaEmbarque, ValorFOB, ValorFOBLocal,"
            sql = sql & " numserieestasri, numseriepuntosri, numtrans,  "
            sql = sql & " case when substring(Opcion2, 122, 1)='S' and tipoemision='1' and TipoAmbiente = '2'  then NumeroAutorizacion else AutorizacionSRI end as AutorizacionSRI,"
            sql = sql & " FechaTrans , "
            sql = sql & " CASE WHEN (vw.PrecioRealTotal)<>0 THEN ( vw.PrecioRealTotal)  END  AS PrecioRealTotal,codpaisdestino"
            sql = sql & " from     gncomprobante Gnc"
            sql = sql & " inner join GnTrans gnt on gnc.codtrans=GnT.codtrans"
            sql = sql & " left join InfoComprobantes Inf  on gnc.transid=inf.transID"
            sql = sql & " inner join anexosexportacion at on gnc.transId = at.TransId"
            sql = sql & " INNER JOIN PCPROVClI pc  ON GNC.IdClienteRef=pc.idprovcli"
            sql = sql & " inner join vwConsSUMIVKardexIVA vw ON Gnc.TransID = vw.transid"
            sql = sql & " where  GNC.CodTrans IN (" & PreparaCadena(gobjCond.CodGrupo) & ")"
            sql = sql & " AND Gnc.BandCierre=9 "
            sql = sql & " and GNC.Estado<>3 " & cond

    End With
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsANExportacion2015paraXML = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Cons Compraspara Anexos " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "AN"
   VerificaExistenciaTabla 0
    VerificaExistenciaTabla 1
    VerificaExistenciaTabla 2
    VerificaExistenciaTabla 3
    VerificaExistenciaTabla 4
End Function

Public Function ConsTSPorCobrarPagarGarante( _
                    ByVal PorCobrar As Boolean, _
                    ByVal CodProvcli As String, _
                    ByVal FechaVenci As Date, _
                    ByVal CodForma As String, _
                    ByVal CodMoneda As String, _
                    ByVal CodGrupo1 As String, _
                    ByVal CodVendedor As String, _
                    ByVal CodSucursal As String, _
                    ByVal Codelemento As String) As Variant
    Dim aux_codpc As String, aux_f1 As Date, aux_f2 As Date
    Dim aux_PorCobrar As Boolean, aux_Cliente As Boolean, aux_Proveedor As Boolean
    Dim aux_CodForma As String, aux_CodMoneda As String, aux_codgrupo As String
    Dim aux_incluircero As Boolean, aux_codVendedor As String, aux_Empleado As Boolean
    Dim aux_codElemento As String

   With gobjMain.objCondicion
        'Conservar valores actuales para que no afecte a otras consultas
        aux_codpc = .CodPC1
        aux_f1 = .fecha1
        aux_f2 = .fecha2
        aux_PorCobrar = .PorCobrar
        aux_Cliente = .Cliente
        aux_Proveedor = .Proveedor
        aux_Empleado = .Empleado
        aux_CodForma = .CodForma
        aux_CodMoneda = .CodMoneda
        aux_codgrupo = .CodGrupo
        aux_incluircero = .IncluirCero
        aux_codVendedor = .Usuario1
        aux_codElemento = .Codelemento

        .PorCobrar = PorCobrar
        .Cliente = True
        .Proveedor = True

        
        .CodPC1 = CodProvcli
        .fecha1 = Me.GNOpcion.FechaInicio
        .fecha2 = FechaVenci
        .CodForma = CodForma
        .CodMoneda = CodMoneda
        .CodGrupo = CodGrupo1
        .IncluirCero = False
        .Usuario1 = CodVendedor
        .Sucursal = CodSucursal
        .Codelemento = Codelemento

        Set ConsTSPorCobrarPagarGarante = ConsTSPorCobrarPagarGarantes()
        
        'Recuperar valores reservados
        .CodPC1 = aux_codpc
        .fecha1 = aux_f1
        .fecha2 = aux_f2
        .PorCobrar = aux_PorCobrar
        .Cliente = aux_Cliente
        .Proveedor = aux_Proveedor
        .Empleado = aux_Empleado
        .CodForma = aux_CodForma
        .CodMoneda = aux_CodMoneda
        .CodGrupo = aux_codgrupo
        .IncluirCero = aux_incluircero
        .Usuario1 = aux_codVendedor
        .Sucursal = CodSucursal
        .Codelemento = Codelemento

   End With
End Function


Public Function ConsTSPorCobrarPagarGarantes() As Variant
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim objCond As Condicion
    Dim BandModulo As Boolean
    Set objCond = gobjMain.objCondicion
    'Si no está especificada la moneda, coge la Moneda predeterminada
    If Len(objCond.CodMoneda) = 0 Then objCond.CodMoneda = MONEDA_PRE
    numMoneda = Me.GNOpcion.IndiceMoneda(objCond.CodMoneda)
#If DAOLIB Then
    sql = "SELECT Id, CodProvCli, Nombre, TransID, CodTrans, Trans, CodForma,NumLetra, Doc, "
    Select Case numMoneda
    Case 1:  sql = sql & "Valor1 AS Valor, VCancelado1 AS VCancelado, " & _
                          "Valor1-VCancelado1 AS Saldo, CodMoneda, Cancela, 1 AS Cotizacion, "
    Case 2:  sql = sql & "Valor2 AS Valor, VCancelado2 AS VCancelado, " & _
                          "Valor2-VCancelado2 AS Saldo, CodMoneda, Cancela, Cotizacion2 AS Cotizacion, "
    Case 3:  sql = sql & "Valor3 AS Valor, VCancelado3 AS VCancelado, " & _
                          "Valor3-VCancelado3 AS Saldo, CodMoneda, Cancela, Cotizacion3 AS Cotizacion, "
    Case 4:  sql = sql & "Valor4 AS Valor, VCancelado4 AS VCancelado, " & _
                          "Valor4-VCancelado4 AS Saldo, CodMoneda, Cancela, Cotizacion4 AS Cotizacion, "
    End Select
    sql = sql & "FechaEmision, Plazo, FechaVenci "
    If objCond.PorCobrar Then
        sql = sql & " FROM vwConsPCPorCobrar "
    Else
        sql = sql & " FROM vwConsPCPorPagar "
    End If
    'Solo los que tengan saldo >0   (Necesario)
    cond = "(Valor" & objCond.numMoneda & ">VCancelado" & objCond.numMoneda & ")"
    'Condición de FechaVenci    (Necesario)             '*** MAKOTO 10/dic/00 Modificado
    cond = cond & " AND (FechaVenci BETWEEN " & _
                    FechaYMD(objCond.fecha1, TipoDB) & " AND " & _
                    FechaYMD(objCond.fecha2, TipoDB) & ")"
    'Condición de CodMoneda     (Necesario)
    If Len(cond) > 0 Then cond = cond & " AND "
    cond = cond & "(CodMoneda='" & Me.GNOpcion.CodMoneda(numMoneda) & "')"
    'Condición de CodProvCli    (Opcional)
    If Len(objCond.CodPC1) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodProvCli='" & objCond.CodPC1 & "')"
    End If
    'Condición de CodForma    (Opcional)
    If Len(objCond.CodForma) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodForma='" & objCond.CodForma & "')"
    End If
    'Condición de Cod. Grupo1 de prov/cliente (Opcional)
    If Len(objCond.CodGrupo) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(CodGrupo1='" & objCond.CodGrupo & "')"
    End If
    'Condición de si incluir cliente/proveedor          '*** MAKOTO 10/dic/00
    If Len(cond) > 0 Then cond = cond & " AND "
    cond = cond & "(BandCliente=" & CadenaBool(objCond.Cliente, TipoDB) & _
                    " OR BandProveedor=" & CadenaBool(objCond.Proveedor, TipoDB) & ")"
    If Len(cond) > 0 Then sql = sql & " WHERE (" & cond & ")"
    sql = sql & " ORDER BY CodProvCli,FechaVenci"
#Else
    If Len(objCond.Sucursal) = 0 Then
        BandModulo = gobjMain.PermisoModuloEspecial(gobjMain.UsuarioActual.codUsuario, ModuloPagaRol)
                If (BandModulo And objCond.Empleado) Or objCond.BandAnticipo Then  'Esto es para pagar ets
            sql = "spConsTSPorCobrarPagarEmpleado " & numMoneda & ", " & _
                   objCond.CodMoneda & "," & _
                    CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                    FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                    objCond.CodPC1 & "','" & _
                    objCond.CodPC1 & "','" & _
                    objCond.CodForma & "','" & _
                    objCond.CodForma & "','" & _
                    objCond.Codelemento & "','" & _
                    objCond.Codelemento & "','" & _
                    objCond.CodGrupo & "'"
        Else
                sql = "spConsTSPorCobrarPagarGarante1 " & numMoneda & ", " & _
                    objCond.CodMoneda & "," & _
                    CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                    CadenaBool(objCond.Cliente, TipoDB) & "," & _
                    CadenaBool(objCond.Proveedor, TipoDB) & "," & _
                    FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                    objCond.CodPC1 & "','" & _
                    objCond.CodPC1 & "','" & _
                    objCond.CodForma & "','" & _
                    objCond.CodForma & "','" & _
                    objCond.CodGrupo & "','" & _
                    objCond.Usuario1 & "','" & _
                    objCond.Usuario1 & "'," & _
                    IIf(Me.GNOpcion.Los100DocCobroPago, 1, 0)
                    If InStr(1, UCase(Me.GNOpcion.NombreEmpresa), "ITAL") Then
                        sql = sql & ",2"
                    Else
                        sql = sql & ",1"
                    End If
        End If
    Else               'AUC cambiado para agregar el filtro sucusal
            sql = "spConsTSPorCobrarPagarVendedorSucursal " & numMoneda & ", " & _
                objCond.CodMoneda & "," & _
                CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                CadenaBool(objCond.Cliente, TipoDB) & "," & _
                CadenaBool(objCond.Proveedor, TipoDB) & "," & _
                FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                objCond.CodPC1 & "','" & _
                objCond.CodPC1 & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodGrupo & "','" & _
                objCond.Usuario1 & "','" & _
                objCond.Usuario1 & "'," & _
                IIf(Me.GNOpcion.Los100DocCobroPago, 1, 0) & ",'" & _
                objCond.Sucursal & "','" & _
                objCond.Sucursal & "'"
    End If
#End If
    Set rs = Me.OpenRecordset(sql)
    Set ConsTSPorCobrarPagarGarantes = rs
    Set rs = Nothing
    Set objCond = Nothing
End Function


Public Function ListaPCProvCliXGarante(NumGrupo As Integer, CodGrupo As String, f As Date) As Variant
    Dim sql As String, rs As Recordset, numReg As Long
    On Error GoTo CapturaError
            
        sql = " SELECT codgrupo1, pc.idprovcli, pc.CodProvCli, pc.Nombre, "
        sql = sql & " pct.idinventario ,codinventario, iv.descripcion, precio1, 0 as transid,"
        sql = sql & " Case NumEmiteFactura"
        sql = sql & " when 1 then idpadre when 2 then idmadre when 3 then idOtro end as idFactura,"
        sql = sql & " Case NumEmiteFactura when 1 then pcp.codprovcli when 2 then pcm.codprovcli when 3 then pco.codprovcli end as codprovcli,"
        sql = sql & " Case NumEmiteFactura when 1 then pcp.nombre when 2 then pcm.nombre when 3 then pco.nombre end as Nombre "
        sql = sql & " FROM PCGrupo4 g4 RIGHT JOIN (PCGrupo3 g3 RIGHT JOIN (PCGrupo2 g2 RIGHT JOIN (PCGrupo1 g1"
        sql = sql & " RIGHT JOIN PCProvCli pc"
        sql = sql & " ON g1.IdGrupo1 = pc.IdGrupo1)  ON g2.IdGrupo2 = pc.IdGrupo2)  ON g3.IdGrupo3 = pc.IdGrupo3)"
        sql = sql & " ON g4.idgrupo4 = pc.IdGrupo4"
        sql = sql & " INNER JOIN pctransporte pct"
        sql = sql & " inner join ivinventario iv on pct.idinventario=iv.idinventario"
        sql = sql & " left join pcprovcli pcp on pct.idpadre = pcp.idprovcli"
        sql = sql & " left join pcprovcli pcm on pct.idmadre = pcm.idprovcli"
        sql = sql & " left join pcprovcli pco on pct.idotro = pco.idprovcli"
        sql = sql & " on pc.idprovcli= pct.idprovcli"
        sql = sql & " Where pc.BandGarante = 1 and pc.estado <> 2 "
        sql = sql & " AND  g" & NumGrupo & ".codgrupo" & NumGrupo & " = '" & CodGrupo & "'"
        sql = sql & " GROUP BY pc.idprovcli, pc.CodProvCli, pc.Nombre ,pct.idinventario,"
        sql = sql & " codinventario, iv.descripcion, precio1 , codgrupo" & NumGrupo & ", codgrupo1, g1.idgrupo1,"
        sql = sql & " numemitefactura,idpadre, idmadre, idotro,"
        sql = sql & " pcp.codprovcli, pcm.codprovcli, pco.codprovcli,"
        sql = sql & " pcp.Nombre , pcm.Nombre, pco.Nombre"
        sql = sql & " ORDER BY codgrupo1, pc.nombre"
            
       Set rs = Me.OpenRecordset(sql)
        Set ListaPCProvCliXGarante = rs
     Set rs = Nothing
    Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function


Public Function ListaPCProvCliGarFiltroNew1(codPC As String, _
                                    Nombre As String, _
                                    nombreAlt As String, _
                                    Direccion As String, _
                                    RUC As String, _
                                    CodGrupoDesde As String, _
                                    CodGrupoHasta As String, _
                                    numG As Integer, _
                                    CodProvincia As String, _
                                    CodCanton As String, _
                                    CodVendedor As String, _
                                    BandSoloValida As Boolean, _
                                    BandRS As Boolean) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset, i As Integer
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If
    sql = "SELECT pc.CodProvCli, pc.Nombre,  a.CodTipoDocumento, pc.RUC, TipoProvCli , "
    'pcp.descripcion, pcc.descripcion, pcparr.descripcion,
    sql = sql & " g1.CodGrupo1, g2.CodGrupo2, g3.CodGrupo3, g4.CodGrupo4 ,pc.observacion, codvendedor, PC.ESTADO  FROM " & _
          " PCGrupo4 g4 RIGHT JOIN (PCGrupo3 g3 RIGHT JOIN (PCGrupo2 g2 RIGHT JOIN (PCGrupo1 g1 RIGHT JOIN PCProvCli pc " & _
            " left join Anexo_TipoDocumento a on pc.IdTipoDocumento  = a.Id" & _
                          " ON g1.IdGrupo1 = pc.IdGrupo1) " & _
                    " ON g2.IdGrupo2 = pc.IdGrupo2) " & _
                " ON g3.IdGrupo3 = pc.IdGrupo3) " & _
                " ON g4.IdGrupo4 = pc.IdGrupo4 "
            sql = sql & " left join pcprovincia pcp on pcp.idprovincia=pc.idprovincia "
            sql = sql & " left join pccanton pcc on pcc.idcanton=pc.idcanton "
            sql = sql & " left join pcparroquia pcparr on pcparr.idparroquia = pc.idparroquia "
            sql = sql & " left join fcvendedor fcv on fcv.idvendedor = pc.idvendedor "
            sql = sql & " WHERE pc.Bandgarante=" & CadenaBool(True, TipoDB)
    If Len(codPC) > 0 Then
        cond = cond & " and (CodProvCli LIKE '" & codPC & comodin & "') "
    End If
    If Len(Nombre) > 0 Then
        cond = cond & " and ((pc.Nombre LIKE '" & Nombre & comodin & "') " & _
                      "OR (pc. Nombre LIKE '" & Nombre & comodin & "')) "
    End If
    If Len(nombreAlt) > 0 Then
        cond = cond & " and ((pc.NombreAlterno LIKE '" & nombreAlt & comodin & "') " & _
                      "OR (pc. NombreAlterno LIKE '" & nombreAlt & comodin & "')) "
    End If
    If Len(Direccion) > 0 Then
        cond = cond & " and (Direccion1 LIKE '" & Descripcion & comodin & "') "
    End If
    If Len(RUC) > 0 Then
        cond = cond & " and (ruc LIKE '" & RUC & comodin & "') "
    End If
    If Not (Len(CodGrupoDesde) = 0 And Len(CodGrupoHasta) = 0) Then
        cond = cond & " AND (CodGrupo" & numG & " BETWEEN '" & CodGrupoDesde & _
            "' AND '" & CodGrupoHasta & "')"
    End If
    If Len(CodProvincia) > 0 Then
        cond = cond & " and (pcp.codprovincia='" & CodProvincia & "') "
    End If
    If Len(CodCanton) > 0 Then
        cond = cond & " and (pcc.codcanton='" & CodCanton & "') "
    End If
    If Len(CodVendedor) > 0 Then
        cond = cond & " and (fcv.codvendedor='" & CodVendedor & "') "
    End If
    If Len(cond) > 0 Then sql = sql & cond
    sql = sql & " ORDER BY pc.Nombre "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCProvCliGarFiltroNew1 = rs
    Else
        ListaPCProvCliGarFiltroNew1 = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


'Para bella luz
Public Function ConsTSPorCobrarCliente(ByVal CodCobrador As String, ByVal NumTrans As Long, ByVal CodTrans As String) As Recordset
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim objCond As Condicion
    Dim BandModulo As Boolean
    Set objCond = gobjMain.objCondicion
    objCond.PorCobrar = True
    objCond.Cliente = True
    objCond.Proveedor = False
    objCond.CodPC1 = "" 'No manda nada para que salga de cualquier cliente
    objCond.fecha2 = "31/12/2099"
    objCond.NumTrans1 = NumTrans
    objCond.CodTrans = CodTrans
    objCond.Usuario1 = CodCobrador
    objCond.CodForma = ""
   'Si no está especificada la moneda, coge la Moneda predeterminada
    If Len(objCond.CodMoneda) = 0 Then objCond.CodMoneda = MONEDA_PRE
        numMoneda = Me.GNOpcion.IndiceMoneda(objCond.CodMoneda)
            sql = "spConsTSPorCobrarPorClientePorTrans " & numMoneda & ", " & _
                objCond.CodMoneda & "," & _
                CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                CadenaBool(objCond.Cliente, TipoDB) & ",'" & _
                objCond.CodTrans & "'," & _
                objCond.NumTrans1 & "," & _
                FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                objCond.CodPC1 & "','" & _
                objCond.CodPC1 & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodGrupo & "','" & _
                objCond.Usuario1 & "','" & _
                objCond.Usuario1 & "'"
    Set rs = Me.OpenRecordset(sql)
    Set ConsTSPorCobrarCliente = rs
    Set rs = Nothing
    Set objCond = Nothing
End Function
Public Function RecuperaPCProvClixCobrador(key As String) As PCProvCli
    Dim obj As PCProvCli
    Set obj = New PCProvCli
    Set obj.Empresa = Me
    On Error Resume Next
    obj.RecuperarxCobrador key
    If Err.Number = 0 Then Set RecuperaPCProvClixCobrador = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function ConsTSPorCobrarClienteNew(ByVal CodCobrador As String, ByVal NumTrans As Long, ByVal CodTrans As String, ByVal CodForma As String) As Recordset
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim objCond As Condicion
    Dim BandModulo As Boolean
    Set objCond = gobjMain.objCondicion
    objCond.PorCobrar = True
    objCond.Cliente = True
    objCond.Proveedor = False
    objCond.CodPC1 = "" 'No manda nada para que salga de cualquier cliente
    objCond.fecha2 = "31/12/2099"
    objCond.NumTrans1 = NumTrans
    objCond.CodTrans = CodTrans
    objCond.Usuario1 = CodCobrador
    objCond.CodForma = CodForma
   'Si no está especificada la moneda, coge la Moneda predeterminada
    If Len(objCond.CodMoneda) = 0 Then objCond.CodMoneda = MONEDA_PRE
        numMoneda = Me.GNOpcion.IndiceMoneda(objCond.CodMoneda)
            sql = "spConsTSPorCobrarPorClientePorTrans " & numMoneda & ", " & _
                objCond.CodMoneda & "," & _
                CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                CadenaBool(objCond.Cliente, TipoDB) & ",'" & _
                objCond.CodTrans & "'," & _
                objCond.NumTrans1 & "," & _
                FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                objCond.CodPC1 & "','" & _
                objCond.CodPC1 & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodGrupo & "','" & _
                objCond.Usuario1 & "','" & _
                objCond.Usuario1 & "'"
    Set rs = Me.OpenRecordset(sql)
    Set ConsTSPorCobrarClienteNew = rs
    Set rs = Nothing
    Set objCond = Nothing
End Function


Public Function ConsTSPorCobrarClienteVendCob(ByVal BandCobrador As Boolean, ByVal CodCobrador As String, ByVal NumTrans As Long, ByVal CodTrans As String, ByVal CodForma As String) As Recordset
    Dim sql As String, cond As String, numMoneda As Integer, rs As Recordset
    Dim objCond As Condicion
    Dim BandModulo As Boolean
    Set objCond = gobjMain.objCondicion
    objCond.PorCobrar = True
    objCond.Cliente = True
    objCond.Proveedor = False
    objCond.CodPC1 = "" 'No manda nada para que salga de cualquier cliente
    objCond.fecha2 = "31/12/2099"
    objCond.NumTrans1 = NumTrans
    objCond.CodTrans = CodTrans
    objCond.Usuario1 = CodCobrador
    objCond.CodForma = CodForma
    objCond.Estado = BandCobrador
   'Si no está especificada la moneda, coge la Moneda predeterminada
    If Len(objCond.CodMoneda) = 0 Then objCond.CodMoneda = MONEDA_PRE
        numMoneda = Me.GNOpcion.IndiceMoneda(objCond.CodMoneda)
            sql = "spConsTSPorCobrarPorClientePorTrans " & numMoneda & ", " & _
                objCond.CodMoneda & "," & _
                CadenaBool(objCond.PorCobrar, TipoDB) & "," & _
                CadenaBool(objCond.Cliente, TipoDB) & "," & _
                CadenaBool(objCond.Estado, TipoDB) & ",'" & _
                objCond.CodTrans & "'," & _
                objCond.NumTrans1 & "," & _
                FechaYMD(objCond.fecha2, TipoDB) & ",'" & _
                objCond.CodPC1 & "','" & _
                objCond.CodPC1 & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodForma & "','" & _
                objCond.CodGrupo & "','" & _
                objCond.Usuario1 & "','" & _
                objCond.Usuario1 & "'"
    Set rs = Me.OpenRecordset(sql)
    Set ConsTSPorCobrarClienteVendCob = rs
    Set rs = Nothing
    Set objCond = Nothing
End Function


Public Function ConsGNTransCompElec( _
                    Optional ByVal OrdenAscendente As Boolean, Optional NOAutorizado As Boolean) As Variant
    Dim sql As String, cond As String, s As String, rs As Recordset
    sql = "SELECT"
    sql = sql & " vwConsGNTrans.TransID, vwConsGNTrans.FechaTrans, vwConsGNTrans.CodAsiento, vwConsGNTrans.CodTrans, "
    sql = sql & " vwConsGNTrans.NumTrans, "
    sql = sql & " vwConsGNTrans.NumDocRef, vwConsGNTrans.Nombre, vwConsGNTrans.Descripcion, vwConsGNTrans.CodCentro,"
    sql = sql & " vwConsGNTrans.Estado , "
    sql = sql & " case vwConsGNTrans.Estado when '0' THEN 'NO CONT' when '1' THEN 'APROV' when '2' THEN 'DESPA' when '3' THEN 'ANULA' when '4' THEN 'SEM DESP' END AS estadoL, "
    sql = sql & " vwConsGNTrans.CodPRAsiento,  "
    sql = sql & " enviado, informacionAdicional "
    sql = sql & "  FROM vwConsGNTrans "
    If Not gobjCond.BandTodo Then
        If gobjCond.Cliente Then
            sql = sql & " INNER JOIN GNComprobante gn inner join PCProvCli pc "
            If gobjMain.GrupoActual.PermisoActual.ConsRepVen Then
                sql = sql & "  INNER JOIN FCVendedor  v"
                sql = sql & " ON v.idvendedor = pc.idvendedor "
            End If
                sql = sql & " ON pc.IdProvcli = gn.idClienteRef "
                sql = sql & " ON gn.transid = vwConsGNTrans.transid "
        ElseIf gobjCond.Proveedor Then
            sql = sql & " INNER JOIN GNComprobante gn Left join PCProvCli pc "
            sql = sql & " ON pc.IdProvcli = gn.idProveedorRef "
            sql = sql & " ON gn.transid = vwConsGNTrans.transid "
        ElseIf gobjCond.Empleado Then
            sql = sql & " INNER JOIN GNComprobante gn inner join gnoferta gof inner join empleado pc "
            sql = sql & " ON pc.IdProvcli = gof.idempleadoRef "
            sql = sql & " ON gof.transid = gn.transid "
            sql = sql & " ON gn.transid = vwConsGNTrans.transid "
        End If
    End If
    'Condición de FechaTrans
    cond = "vwConsGNTrans.FechaTrans BETWEEN " & FechaYMD(gobjCond.fecha1, mProps.TipoDB) & " AND " & FechaYMD(gobjCond.fecha2, mProps.TipoDB)
   'Condición de CodTrans
    If Len(cond) > 0 Then cond = cond & " AND "
    If Len(gobjCond.CodTrans) > 0 Then      'Si está especificado transaccion
        'Si es una sola transaccion
        If InStr(gobjCond.CodTrans, ",") = 0 Then
            cond = cond & "(vwConsGNTrans.CodTrans='" & gobjCond.CodTrans & "')"

        'Si está seleccionado varias trans.
       Else
            cond = cond & "(vwConsGNTrans.CodTrans IN (" & gobjCond.CodTrans & "))"
        End If
    Else
        'Si no hay condicion de cod.trans, selecciona todas las trans.
        ' que tenga permiso
        s = gobjMain.GrupoActual.PermisoActual.ListaTrans(True)
        If Len(s) > 0 Then
            cond = cond & "(vwConsGNTrans.CodTrans " & s & ")"
        Else
            cond = cond & "(vwConsGNTrans.CodTrans = '-------')"    'Para que NO devuelva nada si no tiene ningún permiso  '*** MAKOTO 26/dic/00
        End If
    End If
    'Condición de NumTrans
    If (gobjCond.NumTrans1 > 0) And (gobjCond.NumTrans2 > 0) Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.NumTrans BETWEEN " & gobjCond.NumTrans1 & " AND " & gobjCond.NumTrans2 & ")"
    ElseIf gobjCond.NumTrans1 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.NumTrans>=" & gobjCond.NumTrans1 & ")"
    ElseIf gobjCond.NumTrans2 > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.NumTrans<=" & gobjCond.NumTrans2 & ")"
    End If
    'Condición de Estado
    If gobjCond.EstadoBool(ESTADO_NOAPROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.Estado<>" & ESTADO_NOAPROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_APROBADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.Estado<>" & ESTADO_APROBADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_DESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.Estado<>" & ESTADO_DESPACHADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_ANULADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.Estado<>" & ESTADO_ANULADO & ")"
    End If
    If gobjCond.EstadoBool(ESTADO_SEMDESPACHADO) = False Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & "(vwConsGNTrans.Estado<>" & ESTADO_SEMDESPACHADO & ")"
   End If
    If Len(gobjCond.CodCentro1) > 0 And Len(gobjCond.CodCentro2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " codCentro between '" & gobjCond.CodCentro1 & "' and '" & gobjCond.CodCentro2 & "'"
    End If
    If Len(gobjCond.Codciudad1) > 0 And Len(gobjCond.Codciudad2) > 0 Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " vwConsGNTrans.codVendedor between '" & gobjCond.Codciudad1 & "' and '" & gobjCond.Codciudad2 & "'"
    End If
    If gobjMain.GrupoActual.PermisoActual.ConsRepVen Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " vw.codvendedor = '" & gobjMain.UsuarioActual.codUsuario & "'  "
    End If
    
    If NOAutorizado Then
        If Len(cond) > 0 Then cond = cond & " AND "
        cond = cond & " SUBSTRING(informacionAdicional,1, 4)<> 'AUTO'"
    End If
    
    If Len(gobjCond.CodPC1) > 0 Then ' And Not gobjCond.IncluirCero Then
        If Not gobjCond.BandTodo Then
            If Len(cond) > 0 Then cond = cond & " AND "
            If gobjMain.GrupoActual.PermisoActual.ConsRepVen Then
                cond = cond & " pc.codprovcli = '" & gobjCond.CodPC1 & "' " 'AUC aqui porque tiene filtro de vendedor
        Else
                cond = cond & " pc.codprovcli = '" & gobjCond.CodPC1 & "' " 'AQUI con el filtro de la vista
        End If
       End If
    End If

   If Len(cond) > 0 Then sql = sql & " WHERE " & cond
   'Ordern de filas
    If OrdenAscendente Then
        sql = sql & " ORDER BY vwConsGNTrans.FechaTrans, vwConsGNTrans.HoraTrans, vwConsGNTrans.TransID"         '*** MAKOTO 07/dic/00 Modificado para HoraTrans
    Else
        sql = sql & " ORDER BY vwConsGNTrans.FechaTrans DESC, vwConsGNTrans.HoraTrans DESC, vwConsGNTrans.TransID DESC"       '*** MAKOTO 07/dic/00 HoraTrans agregado
    End If
    Set rs = Me.OpenRecordset(sql)
    Set ConsGNTransCompElec = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta General " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "GN"
End Function


Public Function CargaBufferMP3xALM() As Variant
    'jeaa 07-07-04
    ' PARA SIETE EMPRESAS COMO MAXIMO
    Dim sql As String, cond As String, CadenaPrecio As String, Trans As String
    Dim cadempresa As String, cadBodega As String, totalcero As Boolean, cond1 As String
    Dim v As Variant, max As Integer, TotalC As String, TotalP As String, i As Integer, rs As Recordset, TotalCMAx As String
    Dim CodInv As String, codBod As String, Orden As String, cadTrans As String
    Dim W As Variant, j As Integer, Grupo As String
    Dim vBod As Variant, vNomEmp As Variant, vTrans As Variant
    Dim Cadtitulo As String, k As Integer
    Dim condTrans As String, vaux As Variant
    Dim numReg As Long, numMoneda As String
    Dim cadETrans As Variant, cadEBodega As Variant, basePrincipal As String
    Dim TotalE As String, TotalProm As String, difDias As Integer, Intervalo As Double
    Dim TotalCUC As String, TotalUtil As String, TotalPUtil As String, Fijo As Integer
    Dim NumMeses As Long
    Dim gnt As GNTrans
    With gobjCond
        NumMeses = DateDiff("m", .fecha1, .fecha2)
        difDias = DateDiff("d", .fecha1, .fecha2)
        NumMeses = Round(difDias / 30, 0)
        If NumMeses = 0 Then NumMeses = 1
       numMoneda = Trim(IIf(.numMoneda > 0, Str(.numMoneda + 1), ""))
        v = Split(.Sucursal, ";")
        vTrans = Split(.CodTrans, ";")
        For i = 0 To UBound(v)
            vNomEmp = Split(v(i), ",")
            Cadtitulo = Cadtitulo & vNomEmp(1) & " - "
        Next i
        'para quitar el ultimo "-"
        Cadtitulo = Mid$(Cadtitulo, 1, Len(Cadtitulo) - 3)
        cond = " "
        TotalC = ", ( "
        TotalCMAx = ", ( "
        TotalP = ", ( "
        TotalProm = ", ( "
        TotalE = ", ( "
        TotalCUC = ", ( "
        TotalUtil = ", ( "
        TotalPUtil = ", ( "
        max = UBound(v, 1)
        ReDim cadETrans(max, 2)
        ReDim cadEBodega(max, 2)
        cadETrans = llenaCadxEmpresa(vTrans, UBound(v))
        W = Split(v(0), ",")
        basePrincipal = W(1)
        difDias = DateDiff("d", .fecha1, .fecha2)
'        max = 0
        For k = 0 To max
            sql = "SELECT   DISTINCT "
            sql = sql & "  idinventario, CodInventario, Descripcion, DESCRIPCION2, CODUNIDAD, " & NumMeses & "  as TiempoPromVta, TiempoRep as TiempoReposicion, "
            sql = sql & " CodGrupo" & .NumGrupo & " as CodGrupo,"
            sql = sql & "  DescGrupo" & .NumGrupo & "  as DescGrupo,"
            sql = sql & " isnull(sum(Cant),0) * -1  AS TCant,  "

            sql = sql & "  0 AS CantMax , bufferxBod"
            sql = sql & "  Into " & basePrincipal & ".dbo.T" & k
            W = Split(v(k), ",")
            sql = sql & " from "
            sql = sql & W(1) & ".dbo.vwVentasPorBodegaxALM "
            cond = " WHERE (FechaTrans BETWEEN " & _
                         FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & _
                        " AND " & FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            cond = cond & " AND  AnexoCodTipoComp in (" & PreparaCadena(.CodBanco2) & ") "
            cond = cond & " AND  AnexoCodTipoTrans in (" & PreparaCadena(.CodBanco1) & ") "
            If Not (Len(.Grupo1) = 0 And Len(.Grupo2) = 0) Then
                cond = cond & " AND (codGrupo" & .NumGrupo & " BETWEEN '" & _
                .Grupo1 & "' AND '" & .Grupo2 & "') "
            End If
            If Not (Len(.CodItem1) = 0 And Len(.CodItem2) = 0) Then
                cond = cond & " AND (CodInventario BETWEEN '" & .CodItem1 & "' AND '" & .CodItem2 & "') "
            End If
            
            If Len(.CodBodega1) > 0 Then
                cond = cond & " AND (CodBodega in (" & PreparaCadena(.CodBodega1) & ")) "
            End If
            
            Grupo = " group by "
            Grupo = Grupo & "  idinventario, CodInventario, Descripcion,   DESCRIPCION2, CODUNIDAD, "
            Orden = " ORDER BY CodInventario"
            Grupo = Grupo & " CodGrupo" & .NumGrupo & " , DescGrupo" & .NumGrupo
            Grupo = Grupo & " , TiempoPromVta , TiempoRep, BufferxBod  "
            sql = sql & cond & cond1 & Grupo & Orden
            
            VerificaExistenciaTablaTemporal k
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
            
    
            sql = "  SELECT     idinventario,"
            sql = sql & "  isnull(max(Abs(cant)), 0) As CantMax"
            sql = sql & "  Into " & basePrincipal & ".dbo.T" & k + 50
            sql = sql & "  from "
            sql = sql & W(1) & ".dbo.vwVentasPorBodegaxALM"
            sql = sql & " WHERE (FechaTrans BETWEEN " & _
                         FechaYMD(.fecha1, gobjMain.EmpresaActual.TipoDB) & _
                        " AND " & FechaYMD(.fecha2, gobjMain.EmpresaActual.TipoDB) & ") "
            
            sql = sql & " AND  AnexoCodTipoComp in ('18') "
            sql = sql & " AND  AnexoCodTipoTrans in (" & PreparaCadena(.CodBanco1) & ") "
            
            If Not (Len(.Grupo1) = 0 And Len(.Grupo2) = 0) Then
                sql = sql & " AND (codGrupo" & .NumGrupo & " BETWEEN '" & _
                .Grupo1 & "' AND '" & .Grupo2 & "') "
            End If
            If Not (Len(.CodItem1) = 0 And Len(.CodItem2) = 0) Then
                sql = sql & " AND (CodInventario BETWEEN '" & .CodItem1 & "' AND '" & .CodItem2 & "') "
            End If
        
            If Len(.CodBodega1) > 0 Then
                sql = sql & " AND (CodBodega in (" & PreparaCadena(.CodBodega1) & ")) "
            End If
        
                sql = sql & " group by   idinventario"
            
            VerificaExistenciaTablaTemporal k + 50
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
                            
            
            
            
            sql = "select "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".Codinventario, i.Codinventario) As Codinventario, "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".Descripcion, i.Descripcion) as Descripcion, "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".Descripcion2, i.Descripcion2) as Descripcion2, "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".CodUnidad, i.CodUnidad) as CodUnidad, "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".BufferxBod, i.BufferxBod) as BufferxBod, "
            sql = sql & basePrincipal & ".dbo.T" & k & ".TiempoPromVta as TiempoPromVta, "
            sql = sql & basePrincipal & ".dbo.T" & k & ".TiempoReposicion as TiempoReposicion, "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".CodGrupo,i.CodGrupo" & .NumGrupo & ") as CodGrupo, "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".DescGrupo, i.DescGrupo" & .NumGrupo & ") as DescGrupo, "
            sql = sql & "  isnull(max(" & basePrincipal & ".dbo.T" & k & ".TCant), 0) as TCant, "
            sql = sql & "  isnull(max(" & basePrincipal & ".dbo.T" & k + 50 & ".CantMax), 0)  as TCAntMAx, "
            sql = sql & "  isnull(max(" & basePrincipal & ".dbo.T" & k & ".TCant), 0)/" & NumMeses & "as Prom, "
            sql = sql & "  round(isnull(max(" & basePrincipal & ".dbo.T" & k & ".TCant), 2)/( " & NumMeses & "   *30"
            sql = sql & "   ),2) as PromDiario, "
            sql = sql & "  isnull(sum(i.exist), 0) as Existencia "
            sql = sql & "  Into " & basePrincipal & ".dbo.Tmp" & k
            sql = sql & " from "
            sql = sql & basePrincipal & ".dbo.T" & k & " left join " & basePrincipal & ".dbo.T" & k + 50 & " on " & basePrincipal & ".dbo.T" & k & ".idinventario = " & basePrincipal & ".dbo.T" & k + 50 & ".idinventario"
            
            If Len(.CodBodega1) > 0 Then
                sql = sql & "  full join " & W(1) & ".dbo.VWivexistxBodega i "
            Else
                sql = sql & "  full join " & W(1) & ".dbo.vwivexist i "
            End If
            
            
            
            sql = sql & " on " & basePrincipal & ".dbo.T" & k & ".idinventario=i.idinventario"
            sql = sql & " WHERE ((i.exist <> 0) OR (i.exist= 0))  "

            If Len(.CodBodega1) > 0 Then
                'sql = sql & " AND (i.CodBodega = '" & .CodBodega1 & "') "
                sql = sql & " AND (CodBodega in (" & PreparaCadena(.CodBodega1) & ")) "
            End If


            If Not (Len(.Grupo1) = 0 And Len(.Grupo2) = 0) Then
                sql = sql & "  AND (codGrupo" & .NumGrupo & " BETWEEN '" & _
                .Grupo1 & "' AND '" & .Grupo2 & "') "
            End If
            If Not (Len(.CodItem1) = 0 And Len(.CodItem2) = 0) Then
                sql = sql & "AND (i.CodInventario BETWEEN '" & .CodItem1 & "' AND '" & .CodItem2 & "') "
            End If
            
            
            
            sql = sql & "  group by "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".Codinventario, i.Codinventario) , "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".Descripcion, i.Descripcion) , "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".Descripcion2, i.Descripcion2) , "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".CodUnidad, i.CodUnidad) , "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".BufferxBod, i.BufferxBod) , "
            

            sql = sql & basePrincipal & ".dbo.T" & k & ".TiempoPromVta, "
            sql = sql & basePrincipal & ".dbo.T" & k & ".TiempoReposicion, "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".CodGrupo,i.CodGrupo" & .NumGrupo & ") , "
            sql = sql & "  isnull(" & basePrincipal & ".dbo.T" & k & ".DescGrupo, i.DescGrupo" & .NumGrupo & ")  "
                
            VerificaExistenciaTabla k
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        Next k
        
        
        sql = " select "
        sql = sql & ArmaSQL("CodInventario", max)
        sql = sql & ArmaSQL("descripcion", max)
        sql = sql & ArmaSQL("descripcion2", max)
        sql = sql & ArmaSQL("CodUnidad", max)
        sql = sql & ArmaSQL("BUFFERxbod", max)
        sql = sql & ArmaSQL("TiempoReposicion", max)
        sql = Mid$(sql, 1, Len(sql) - 2)
       For i = 0 To max
           TotalC = TotalC & " isnull(TMP" & i & ".TCant,0) +"
           TotalCMAx = TotalCMAx & " isnull(TMP" & i & ".TCantMax,0) +"
            TotalProm = TotalProm & " isnull(TMP" & i & ".prom,0) +"
            TotalP = TotalP & " isnull(TMP" & i & ".PromDiario,0) +"
            TotalE = TotalE & " isnull(TMP" & i & ".Existencia,0) +"
        Next i
        For i = max + 1 To 6
            sql = sql & "  , 0 as TiempoReposicion" & i
            'sql = sql & " , 0 as Cant" & i & ", 0 as PTot" & i
            sql = sql & " , 0 as Cant" & i
            sql = sql & " , 0 as CantMax" & i & ", 0 as PTot" & i
            sql = sql & " , 0 as Prom" & i & ", 0 as existencia" & i
            sql = sql & " , 0 as ExistOptima" & i & " , 0 as Diferencia" & i & ""
        Next i

        TotalC = Mid(TotalC, 1, Len(TotalC) - 1)
        TotalCMAx = Mid(TotalCMAx, 1, Len(TotalCMAx) - 1)
        TotalP = Mid(TotalP, 1, Len(TotalP) - 1)
        TotalProm = Mid(TotalProm, 1, Len(TotalProm) - 1)
        TotalE = Mid(TotalE, 1, Len(TotalE) - 1)
        i = 0
        sql = sql & "  ,isnull(TMP" & i & ".TiempoReposicion,0) AS TiempoRep"
        sql = sql & ", Round(" & Mid$(TotalProm, 2, Len(TotalProm)) & "),2)  as TotalPromMen "
        sql = sql & ", Round(" & Mid$(TotalP, 2, Len(TotalP)) & "),2)  as TotalPromDia "
        sql = sql & ", Round(" & Mid$(TotalE, 2, Len(TotalE)) & "),2)  as TotalExist "
        sql = sql & ", Round(" & Mid$(TotalC, 2, Len(TotalC)) & "),2)  as TotalC "
        sql = sql & ", Round(" & Mid$(TotalCMAx, 2, Len(TotalCMAx)) & "),2)  as Totalcmax "
        sql = sql & ", Round(" & Mid(TotalP, 2, Len(TotalP) - 1) & ")  *  isnull(TMP" & i & ".TiempoReposicion,0),2) AS ExistenciaOptima "

        sql = sql & "  Into " & basePrincipal & ".dbo.Tmp" & k + 1

         For i = max To 0 Step -1
            If i = max Then
                sql = sql & " From "
            Else
                sql = sql & " FULL JOIN "
           End If
            sql = sql & " " & basePrincipal & ".dbo.TMP" & i & " "
        Next i
        If max > 0 Then
            For i = 0 To max - 1
                If i = 0 Then
                    CodInv = " ON " & basePrincipal & ".dbo.TMP" & i & ".CodInventario="
                    CodInv = CodInv & "" & basePrincipal & ".dbo.TMP" & i + 1 & ".CodInventario"
                    sql = sql & CodInv
                Else
                    Dim m As Integer
                    CodInv = ""
                    For m = 0 To i
                        If m = 0 Then
                            CodInv = CodInv & " ON " & basePrincipal & ".dbo.TMP" & i & ".CodInventario="
                            CodInv = CodInv & "" & basePrincipal & ".dbo.TMP" & i + 1 & ".CodInventario"
                        Else
                            CodInv = CodInv & " OR " & basePrincipal & ".dbo.TMP" & m - 1 & ".CodInventario="
                            CodInv = CodInv & "" & basePrincipal & ".dbo.TMP" & i + 1 & ".CodInventario"
                        End If
                    Next m
                    sql = sql & CodInv
                End If
            Next i
        End If
        
        VerificaExistenciaTabla k + 1
        gobjMain.EmpresaActual.EjecutarSQL sql, numReg
        
        Set gnt = gobjMain.EmpresaActual.RecuperaGNTrans(.CodComp)
        
            sql = "select idinventario, exist"
            sql = sql & "  Into " & basePrincipal & ".dbo.T" & k + 4000
            sql = sql & " from " & W(1) & ".dbo.VWivexistxBodega "
            
            If Len(.CodBodega1) > 0 Then
                sql = sql & " where (CodBodega in (" & PreparaCadena(gnt.CodBodegaPre) & ")) "
            End If
            
            VerificaExistenciaTablaTemporal k + 4000
            gobjMain.EmpresaActual.EjecutarSQL sql, numReg
                
        sql = " select distinct "
        sql = sql & " i.idinventario, t.CodInventario, "
        sql = sql & " t.descripcion, ivg.descripcion, BUFFERxbod,  TotalExist , traC.exist, 0,  "
         sql = sql & "  CASE WHEN (   BUFFERxbod-TotalExist) >0 THEN    (  BUFFERxbod - TotalExist) ELSE 0 END as saldo,"
        sql = sql & "  0 as BandPedido,  ISNULL(TotalC,0)as TotalC, ISNULL(TotalPromMen,0)as TotalPromMen , ISNULL(TotalPromDia,0) as TotalPromDia, "
        sql = sql & " case when ISNULL(TotalPromDia,0)<>0 then TotalExist /ISNULL(TotalPromDia,0) else TotalExist end , "
        sql = sql & " pc.nombre, ISNULL(IP.Cantidad,0), ISNULL(CostoUnitario,0), ip.Fecha, BUFFERxbod, ISNULL(t.tiemporeposicion,0) , "
        sql = sql & " CASE WHEN ISNULL(t.tiemporeposicion,0)<>0 THEN " & gobjMain.objCondicion.NumDias1 & "/t.tiemporeposicion ELSE " & gobjMain.objCondicion.NumDias1 & " END,"
        sql = sql & " CASE WHEN ISNULL(t.tiemporeposicion,0)<>0 THEN BUFFERxbod*" & gobjMain.objCondicion.NumDias1 & "/t.tiemporeposicion ELSE  BUFFERxbod * " & gobjMain.objCondicion.NumDias1 & " END "
        sql = sql & " from tmp" & k + 1 & " t "
        sql = sql & " inner join ivinventario i on t.codinventario=i.codinventario "
        sql = sql & " left join " & basePrincipal & ".dbo.T" & k + 4000 & " traC on i.idinventario=traC.idinventario "

        sql = sql & " left join ivgrupo4 ivg on i.idgrupo4=ivg.idgrupo4 "
        Select Case .Nivel
        Case 0
            sql = sql & " left join IVProveedorDetalle ip"
            sql = sql & " inner join pcprovcli pc on ip.IdProveedor=pc.idprovcli and ip.bandprincipal=1"
            sql = sql & " on i.idinventario=ip.idinventario"
        Case 1
            sql = sql & " left join VWIVProveedorDetalle ip"
            sql = sql & " inner join pcprovcli pc on ip.IdProveedor=pc.idprovcli"
            sql = sql & " on i.idinventario=ip.idinventario"
        End Select
        sql = sql & " WHERE i.bandvalida=1 "
        
        If gobjMain.objCondicion.IncluirCero Then
        Else
            sql = sql & " and BUFFERxbod<>0 "
        End If
        If .tipoItem1 Then
            sql = sql & "  and  ((TotalExist)  >= ( BUFFERxbod+ (BUFFERxbod*0.5))) and ((TotalExist ) <= TotalPromMen)"
            If .IncluirCero Then
                sql = sql & " or  ((TotalExist)  <  BUFFERxbod) "
            End If
        Else
        End If
        
        i = 0
        
        
       sql = sql & " order by "
        sql = sql & "t.CodInventario"

       Set rs = gobjMain.EmpresaActual.OpenRecordset(sql)
    Set CargaBufferMP3xALM = rs
    Set rs = Nothing
       
    End With
End Function


Public Function ListaIVInventarioSimplexGrupo(NumGrupo As Integer, _
                                  CodGrupo As String) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset, i As Integer
    Dim NumIVGrupo As Integer, NumPCGrupo As Integer
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If
    
    sql = "SELECT CodInventario, iv.Descripcion FROM IVInventario iv"
    sql = sql & " inner join ivgrupo" & NumGrupo & " ivg"
    sql = sql & " on iv.Idgrupo" & NumGrupo & "=ivg.idgrupo" & NumGrupo
    sql = sql & " where 1=1 "

    If Len(CodGrupo) > 0 Then
        sql = sql & " and ivg.codgrupo" & NumGrupo & "= '" & CodGrupo & " ' "
    End If
    sql = sql & " order by Codgrupo" & NumGrupo
    Set rs = Me.OpenRecordset(sql)
    
    ListaIVInventarioSimplexGrupo = MiGetRows(rs)
    rs.Close

    Set rs = Nothing
End Function


Public Function ListaRAsistenciaProv(CodProvcli As String, bandOcupada As Boolean, BandRS As Boolean, Intervalo As Integer, HoraActual As Date, fecha As Date) As Variant
    Dim sql As String, rs As Recordset
    sql = " select idjornada,  convert(varchar(8),hora,108) as hora, fecha "
    sql = sql & " from RAsistencia ras"
    sql = sql & " inner join pcprovcli pc"
    sql = sql & " on ras.idproveedor=pc.idprovcli"
    sql = sql & " where codprovcli='" & CodProvcli & "'"
    sql = sql & " And fecha='" & fecha & "'"
    sql = sql & " And (Hora between  DateAdd(mi, -" & Intervalo & ", '" & HoraActual & "')  and '" & HoraActual & "')"
    If bandOcupada Then sql = sql & " AND BandOcupada=" & CadenaBool(False, TipoDB)
    sql = sql & " ORDER BY idjornada "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaRAsistenciaProv = rs
    Else
        ListaRAsistenciaProv = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaIVInventario6(CodInventario As String, _
                                  CodAlterno As String, _
                                  Descripcion As String, _
                                  CodBodega As String, _
                                  CodGrupo() As String, _
                                  Tipo As String, _
                                  BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, cond As String, comodin As String
    Dim rs As Recordset, i As Integer, W As Variant, sqltotal As String, sqlbodegas As String, numbodega  As Integer
    Dim colbodega As Integer, bod  As String, ordenbod As String, NEWordenbod As String, CodigoBodega  As String
    Dim idbod As Long, ivb As IVBodega
#If DAOLIB Then
    comodin = "*"
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    comodin = "%"
#End If
sqlbodegas = ""
sqltotal = ""
bod = GetSetting(APPNAME, SECTION, "CodSucursal_Activa_" & Me.CodEmpresa, "")


    sql = "SELECT CodInventario, CodAlterno1, iv.Descripcion, Descripcion2, CodUnidad, "
    
    
            If Len(Me.GNOpcion.OrdenBodegas) > 0 Then
                ordenbod = Me.GNOpcion.OrdenBodegas
            End If
            NEWordenbod = ""
            If Len(Me.GNOpcion.OrdenBodegas) > 0 Then
                W = Split(Me.GNOpcion.OrdenBodegas, ",")
                For i = 0 To UBound(W)
                    idbod = Mid$(W(i), 2, Len(W(i)) - 2)
                    Set ivb = Me.RecuperaIVBodega(idbod)
                    If Not ivb Is Nothing Then
                        If bod = ivb.CodSucursal Then
                            NEWordenbod = NEWordenbod & "'" & idbod & "',"
                            If CodigoBodega = ivb.CodBodega Then
                                colbodega = i
                            End If
                            sqlbodegas = sqlbodegas & " vw" & idbod & ".Exist, "
                            sqltotal = sqltotal & "isnull( vw" & idbod & ".Exist,0) + "
                            
                        End If
                    Else
                        sqlbodegas = sqlbodegas & " vw" & i & ".Exist, "
                    End If
                    If bod = ivb.CodSucursal Then
                        numbodega = numbodega + 1
                    End If
                Next i
                Set ivb = Nothing
                
                For i = 0 To UBound(W)
                    idbod = Mid$(W(i), 2, Len(W(i)) - 2)
                    Set ivb = Me.RecuperaIVBodega(idbod)
                    If Not ivb Is Nothing Then
                        If bod <> ivb.CodSucursal Then
                            NEWordenbod = NEWordenbod & "'" & idbod & "',"
                            If CodigoBodega = ivb.CodBodega Then
                                colbodega = i
                            End If
                            sqlbodegas = sqlbodegas & " vw" & idbod & ".Exist, "
                            sqltotal = sqltotal & "isnull( vw" & idbod & ".Exist,0) + "
 
                        End If
                    Else
                        sqlbodegas = sqlbodegas & " vw" & i & ".Exist, "
                        sqltotal = sqltotal & "isnull( vw" & i & ".Exist,0) + "

                    End If
                    If bod <> ivb.CodSucursal Then
                        numbodega = numbodega + 1
                    End If
                Next i
                Set ivb = Nothing
            End If
    
    If Len(sqltotal) > 0 Then
        sqltotal = "(" & Mid$(sqltotal, 1, Len(sqltotal) - 2) & "), "
        sql = sql & sqltotal
    End If
    If Len(sqlbodegas) > 0 Then
        sql = sql & sqlbodegas
    End If
    
    sql = sql & " Precio1, "
    sql = sql & " Precio2, "
    sql = sql & " Precio3, "
    sql = sql & " Precio4, "
    sql = sql & " Precio5,"
    sql = sql & " Precio6, "
    sql = sql & " Precio7, "
    sql = sql & " BandIVA, "
    sql = sql & " CodGrupo1, IVG1.descripcion, CodGrupo2, IVG2.descripcion, CodGrupo3, IVG3.descripcion, "
    sql = sql & " CodGrupo4, IVG4.descripcion, CodGrupo5,IVG5.descripcion, Tipo,   "
    sql = sql & " Case IV.Tipo"
    sql = sql & " when 0 then 'NORMAL'"
    sql = sql & " when 1 then 'RECETA'"
    sql = sql & " when 2 then 'FAMILIA'"
    sql = sql & " when 3 then 'CAM.PRE'"
    sql = sql & " when 4 then 'PREPARA'"
    sql = sql & " when 5 then 'PROMO'"
    sql = sql & " when 6 then 'RUBRO'"
    sql = sql & " when 7 then 'POR.PRE'"
    sql = sql & " when 8 then 'MATRIZ' END AS TipoDesc, iv.BandValida "
            
    sql = sql & " FROM IVInventario IV"
    sql = sql & " left JOIN IVUnidad IVU on Iv.idunidad = IVU.IDUnidad"
    sql = sql & " left join IVGRUPO1 IVG1 ON IV.IDGRUPO1=IVG1.IDGRUPO1"
    sql = sql & " left join IVGRUPO2 IVG2 ON IV.IDGRUPO2=IVG2.IDGRUPO2"
    sql = sql & " left join IVGRUPO3 IVG3 ON IV.IDGRUPO3=IVG3.IDGRUPO3"
    sql = sql & " left join IVGRUPO4 IVG4 ON IV.IDGRUPO4=IVG4.IDGRUPO4"
    sql = sql & " left join IVGRUPO5 IVG5 ON IV.IDGRUPO5=IVG5.IDGRUPO5"
   
    
            If Len(Me.GNOpcion.OrdenBodegas) > 0 Then
                ordenbod = Me.GNOpcion.OrdenBodegas
            End If
            NEWordenbod = ""
            If Len(Me.GNOpcion.OrdenBodegas) > 0 Then
                W = Split(Me.GNOpcion.OrdenBodegas, ",")
                For i = 0 To UBound(W)
                    idbod = Mid$(W(i), 2, Len(W(i)) - 2)
                    Set ivb = Me.RecuperaIVBodega(idbod)
                    If Not ivb Is Nothing Then
                        If bod = ivb.CodSucursal Then
                            NEWordenbod = NEWordenbod & "'" & idbod & "',"
                            If CodigoBodega = ivb.CodBodega Then
                                colbodega = i
                            End If
                            sql = sql & " LEFT JOIN vwExistencia" & idbod & " vw" & idbod & " on iv.idinventario = vw" & idbod & ".idinventario"
                            
                        End If
                    Else
                        sql = sql & " LEFT JOIN vwExistencia" & idbod & " vw" & i & " on iv.idinventario = vw" & i & ".idinventario"
                    End If
                    If bod = ivb.CodSucursal Then
                        numbodega = numbodega + 1
                    End If
                Next i
                Set ivb = Nothing
                
                For i = 0 To UBound(W)
                    idbod = Mid$(W(i), 2, Len(W(i)) - 2)
                    Set ivb = Me.RecuperaIVBodega(idbod)
                    If Not ivb Is Nothing Then
                        If bod <> ivb.CodSucursal Then
                            NEWordenbod = NEWordenbod & "'" & idbod & "',"
                            If CodigoBodega = ivb.CodBodega Then
                                colbodega = i
                            End If
                            sql = sql & " LEFT JOIN vwExistencia" & idbod & " vw" & idbod & " on iv.idinventario = vw" & idbod & ".idinventario"
 
                        End If
                    Else
                        sql = sql & " LEFT JOIN vwExistencia" & idbod & " vw" & i & " on iv.idinventario = vw" & i & ".idinventario"
                    End If
                    If bod <> ivb.CodSucursal Then
                        numbodega = numbodega + 1
                    End If
                Next i
                Set ivb = Nothing
            End If
    
    
            
    If BandSoloValida Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(iv.BandValida=" & CadenaBool(True, TipoDB) & ")"
    End If
    If Len(CodInventario) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodInventario LIKE '" & CodInventario & comodin & "') "
    End If
    If Len(CodAlterno) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "((CodAlterno1 LIKE '" & CodAlterno & comodin & "') " & _
                      "OR (CodAlterno2 LIKE '" & CodAlterno & comodin & "')) "
    End If
    If Len(Descripcion) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(iv.Descripcion LIKE '" & Descripcion & comodin & "') "
    End If
    If Len(CodBodega) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(CodBodega='" & CodBodega & "') "
    End If
    
    If Len(Tipo) > 0 Then
        If Len(cond) > 0 Then cond = cond & "AND "
        cond = cond & "(Tipo=" & Tipo & ") "
    End If
    
    
    For i = LBound(CodGrupo) To UBound(CodGrupo)
        If Len(CodGrupo(i)) > 0 Then
            If Len(cond) > 0 Then cond = cond & "AND "
            cond = cond & "(CodGrupo" & i & " = '" & CodGrupo(i) & "') "
        End If
    Next i
    If Len(cond) > 0 Then sql = sql & " WHERE " & cond
    sql = sql & " ORDER BY CodInventario "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaIVInventario6 = rs
    Else
        ListaIVInventario6 = MiGetRows(rs)
        rs.Close
   End If
    Set rs = Nothing
End Function

Public Function RecuperaIdSerieItem(key As Long) As Recordset
Dim sql As String
Dim rs As Recordset
    sql = "SELECT ivs.idserie FROM IVSerie ivs "
    sql = sql & "Inner Join Ivinventario iv on iv.idinventario = ivs.idinventario "
    sql = sql & "Where iv.IdInventario = " & key
    Set rs = Me.OpenRecordset(sql)
    Set RecuperaIdSerieItem = rs
    Set rs = Nothing
End Function

Public Function ListaProcesoFlexPorOrden(BandRS As Boolean, transid As Long, Sec As Integer) As Variant
    Dim sql As String, rs As Recordset
    sql = "Select ivp.codproceso,ivp.descripcion,ivp.CodUsuario,ivp.Secuencia as Prioridad"
    sql = sql & " From ivproceso ivp  Inner Join ivkproceso ivkp"
    sql = sql & " Inner join gncomprobante g on g.transid = ivkp.transid "
    sql = sql & " On ivkp.idproceso = ivp.idproceso"
    sql = sql & " Where g.transid =" & transid
    sql = sql & " And ivkp.secuencia >0 And ivkp.secuencia<" & Sec
    sql = sql & " group by g.transid,ivp.codproceso,ivp.descripcion,ivp.CodUsuario,ivp.Secuencia"
    sql = sql & " Order by ivp.Secuencia "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaProcesoFlexPorOrden = rs
    Else
        ListaProcesoFlexPorOrden = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function RecuperaIVSxidIvKardex(key As Long) As IVNumSerie
    Dim obj As IVNumSerie
    Set obj = New IVNumSerie
    Set obj.Empresa = Me
    On Error Resume Next
    obj.RecuperarxidIvKardex key
    If Err.Number = 0 Then Set RecuperaIVSxidIvKardex = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function RecuperaidInventarioxIvGrupoProd(key As Long, idG As Integer, ByVal IdIvkardex As Long) As Long
    Dim sql As String
    Dim rs As Recordset
    sql = "Select * from ivgrupo" & idG & " where idGrupo" & idG & "= " & key
    'sql = sql & "And idivkardex = " & idivkarex
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        RecuperaidInventarioxIvGrupoProd = rs!iditemprod
    End If
End Function

Public Function ListaTSFormaCobroPagoParaFlexSoloEfectivo(ByVal BandEfectivo As Boolean, BandCobro As Boolean) As Variant
    Dim sql As String, s As String, i As Integer
    Dim rs As Recordset
        sql = "SELECT CodForma,NombreForma"
        sql = sql & " From  TSFormaCobroPago "
        sql = sql & " Where bandvalida=1 "
        If BandEfectivo Then
            sql = sql & " and considerarComoEfectivo= " & CadenaBool(BandEfectivo, TipoDB)
        End If
        sql = sql & " AND BandCobro=" & CadenaBool(BandCobro, TipoDB)
        sql = sql & " ORDER BY CodForma "
        Set rs = Me.OpenRecordset(sql)
        If Not rs.EOF Then s = "|" & rs.GetString(adClipString, , vbTab, "|")
         ListaTSFormaCobroPagoParaFlexSoloEfectivo = s
         rs.Close
         Set rs = Nothing
End Function

Public Function ListaTSFormaCobroPagoSoloEfectivo(ByVal BandEfectivo As Boolean, BandCobro As Boolean) As Variant
    Dim sql As String, s As String, i As Integer
    Dim rs As Recordset
        sql = "SELECT CodForma,NombreForma"
        sql = sql & " From  TSFormaCobroPago "
        sql = sql & " Where bandvalida=1 "
        If BandEfectivo Then
            sql = sql & " and considerarComoEfectivo= " & CadenaBool(BandEfectivo, TipoDB)
        End If
        sql = sql & " AND BandCobro=" & CadenaBool(BandCobro, TipoDB)
        sql = sql & " ORDER BY CodForma "
        Set rs = Me.OpenRecordset(sql)
         ListaTSFormaCobroPagoSoloEfectivo = MiGetRows(rs)
         rs.Close
         Set rs = Nothing
End Function

Public Function CreaGNReservaHotel() As GNReservaHotel
'    Dim obj As GNReservaHotel
'    Set obj = New GNReservaHotel
'    Set obj.Empresa = Me
'    Set CreaGNReservaHotel = obj
'    Set obj = Nothing
End Function

Public Function ListaTipoHabitacion(BandSoloValida As Boolean, BandRS As Boolean) As Variant
'    Dim sql As String, rs As Recordset
'    sql = "SELECT Codigo, Nombre FROM TipoHabitacion"
'    sql = sql & " ORDER BY Codigo"
'   Set rs = Me.OpenRecordset(sql)
'    If BandRS Then
'        Set ListaTipoHabitacion = rs
'    Else
'        ListaTipoHabitacion = MiGetRows(rs)
'        rs.Close
'    End If
'    Set rs = Nothing
End Function

Public Function ListaGNCentroCostoRes(BandSoloValida As Boolean, BandRS As Boolean) As Variant
End Function

Public Function ListaGNEstadoHotel(BandRS As Boolean) As Variant
    'Auc desactivo para poder generar otro modulo empreda 2 si se necesita copiar en otro modulo
'    Dim sql As String, rs As Recordset
'        sql = "SELECT idestado,Codestado,descripcion,menu,color FROM GNestadoprod Where bandvalida = 1 "
'        sql = sql & " AND MENU IN ('Mantenimiento','Disponible')  ORDER BY Codestado"
'        Set rs = Me.OpenRecordset(sql)
'    If BandRS Then
'        Set ListaGNEstadoHotel = rs
'    Else
'        ListaGNEstadoHotel = MiGetRows(rs)
'        rs.Close
'    End If
'    Set rs = Nothing
End Function

Public Function RecuperaGNReservahotel(key As Long) As GNReservaHotel
'    Dim obj As GNReservaHotel
'    Set obj = New GNReservaHotel
'    Set obj.Empresa = Me
'    On Error Resume Next
'    obj.Recuperar key
'    If Err.Number = 0 Then Set RecuperaGNReservahotel = obj
'    Err.Clear
'    On Error GoTo 0
'    Set obj = Nothing
End Function


Public Function ObtieneDesctoPCxIVxDia(ByVal CodIVGrupo As String, ByVal codPC As String, ByVal codFC As String, ByRef CodDescuento As String, ByRef FechaTrans As Date, ByRef HoraTrans As Date) As Double
Dim sql As String, rs As Recordset, NumIVGrupo As Integer, NumPCGrupo As Integer
    CodDescuento = ""
    NumIVGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumIVGrupo")) + 1
    NumPCGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumPCGrupo")) + 1
    sql = " select top 1"
    sql = sql & " ivD.codDescuento as codDesc,"
    sql = sql & " case when ivdiv.Descuento-Penal>0 then ivdiv.Descuento-Penal else 0 end as TotalDesc, "
    sql = sql & " ivd.IdDescuento , ivd.BandCaducidad, ivd.FechaDesde, ivd.FechaHasta, ivd.HoraDesde, ivd.HoraHasta "
    sql = sql & " From"
    sql = sql & " ivdescuentodetallepc ivdpc "
    sql = sql & " left join pcprovcli pcc  on ivdpc.idprovcli=pcc.idprovcli"
    sql = sql & " left join pcgrupo" & NumPCGrupo & " pcg "
    sql = sql & " inner join pcprovcli pc "
    sql = sql & " on pcg.idgrupo" & NumPCGrupo & "=pc.idgrupo" & NumPCGrupo
    sql = sql & " on ivdpc.IdPCGrupo = pcg.idgrupo" & NumPCGrupo
    sql = sql & " inner join ivdescuentodetalleiv ivdiv "
    sql = sql & " inner join ivgrupo" & NumIVGrupo & " ivg "
    sql = sql & " on ivdiv.IdIVGrupo = ivg.idgrupo" & NumIVGrupo
    sql = sql & " inner join ivdescuentodetallefc ivdfc "
    sql = sql & " inner join TsFormaCobroPago tsf "
    sql = sql & " on ivdfc.idforma=tsf.idforma"
    sql = sql & " inner join ivdescuento ivd"
    sql = sql & " on ivd.iddescuento=ivdfc.iddescuento"
    sql = sql & " on ivd.iddescuento=ivdiv.iddescuento"
    sql = sql & " on ivd.iddescuento=ivdpc.iddescuento"
    sql = sql & " WHERE "
    sql = sql & " ivd.BandValida=1 and "
    sql = sql & " ivg.CodGrupo" & NumIVGrupo & " = '" & CodIVGrupo & "'"
    sql = sql & " and ( pc.CodProvCli ='" & codPC & "' or pcc.CodProvCli ='" & codPC & "')"
    sql = sql & " and tsf.codforma='" & codFC & "'"
    sql = sql & " and ivd.fechaDesde = '" & FechaTrans & "'"
    sql = sql & " OR ivd.fechaHasta = '" & FechaTrans & "'"
    sql = sql & " order by ivd.fechagrabado"
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        If rs.Fields("BandCaducidad") Then
            If FechaTrans >= rs.Fields("FechaDesde") And FechaTrans <= rs.Fields("FechaHasta") Then
                ObtieneDesctoPCxIVxDia = rs!TotalDesc
                CodDescuento = rs!codDesc
            Else
                ObtieneDesctoPCxIVxDia = 0
                CodDescuento = "" ' 0
            End If
        Else
                ObtieneDesctoPCxIVxDia = rs!TotalDesc
                CodDescuento = rs!codDesc
        
        End If
    
    End If
    Set rs = Nothing
End Function

Public Function ListaPCProvCliXCC(NumGrupo As Integer, f As Date) As Variant
    Dim sql As String, rs As Recordset, numReg As Long
    On Error GoTo CapturaError
     
     
    sql = "SELECT IdProvCli,COUNT(idprovcli) AS NumReg,FechaIni, FechaFin, "
    sql = sql & " i.codinventario, i.descripcion as descItem, (precio1*cantidad) as pu , "
    sql = sql & " i.idInventario, Referencia,bandPublicidad, plazO, CONTRATO "
    sql = sql & " Into TMP1299 "
    sql = sql & " FROM PCProvCliInv inner join ivinventario i on  PCProvCliInv.idinventario= i.idinventario"
    sql = sql & " WHERE CHARINDEX('" & DatePart("m", f) & "', frecuencia)> 0 "
    sql = sql & " GROUP BY IDPROVCLI, FechaIni, FechaFin,i.codinventario, i.descripcion, precio1, "
    sql = sql & " cantidad, i.idInventario, Referencia,bandPublicidad, plazo, CONTRATO  "
    
    VerificaExistenciaTabla 1299 'tmp99 sera utilizada para guardar la primer parte del sql
    Me.EjecutarSQL sql, numReg
    
    sql = "SELECT   "
    sql = sql & " pc.IdProvCli , gcc.CodCentro, pc.Nombre, T.Referencia, t.IdInventario, "
    sql = sql & " codinventario, descItem, pu, 0 as transid, idcentro "
    sql = sql & " FROM gncentrocosto gcc  "
    sql = sql & " inner join PCProvCli pc  on gcc.idcliente =pc.idprovcli  "
    sql = sql & " INNER JOIN TMP1299 T ON T.idprovcli = PC.idprovcli AND GCC.CODCENTRO= T.CONTRATO"
    sql = sql & " WHERE BandCliente=" & CadenaBool(True, TipoDB)
    sql = sql & " AND BandLote=" & CadenaBool(True, TipoDB)
    sql = sql & " and " & FechaYMD(f, TipoDB) & " between t.FechaIni AND t.FechaFin "
    sql = sql & " GROUP BY pc.idprovcli, pc.CodProvCli, pc.Nombre,pu, t.idinventario,codinventario, "
    sql = sql & " descItem , T.Referencia,bandPublicidad "
    sql = sql & " ,idcentro, gcc.codcentro"
    sql = sql & " ORDER BY pc.nombre, idcentro, T.Referencia ,bandPublicidad desc"
     Set rs = Me.OpenRecordset(sql)
     Set ListaPCProvCliXCC = rs
      Set rs = Nothing
    Exit Function
CapturaError:
    MsgBox Err.Description
    Set rs = Nothing
    Exit Function
End Function


Public Function CreaIVEquipo() As IVEquipo
    Dim obj As IVEquipo
    Set obj = New IVEquipo
    Set obj.Empresa = Me
    Set CreaIVEquipo = obj
    Set obj = Nothing
End Function

Public Function RecuperaIVEquipo(key As Variant) As IVEquipo
    Dim obj As IVEquipo
    Set obj = New IVEquipo
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaIVEquipo = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function


Public Function ListaIVEquipo(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    

    sql = "SELECT CodEquipo, Descripcion FROM IVEquipo "

    If BandSoloValida Then
        sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY CodEquipo"

    Set rs = Me.OpenRecordset(sql)
    
    If BandRS Then
        Set ListaIVEquipo = rs
    Else
        ListaIVEquipo = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ListaPCProvinciaxPais(BandSoloValida As Boolean, BandRS As Boolean, CodPais As String) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodProvincia,CodProvinciaSC as CodigoINEC, pcProv.Descripcion , pcpais.Descripcion FROM PCProvincia pcprov left join pcPais  on pcprov.idpais = pcpais.idpais "
    sql = sql & " where pcpais.codpais='" & CodPais & " '"
    If BandSoloValida Then
        sql = sql & "and pcprov.BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY pcpais.descripcion, codPais "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCProvinciaxPais = rs
    Else
        ListaPCProvinciaxPais = MiGetRows(rs)

        rs.Close
   End If
    Set rs = Nothing
End Function

Public Function CreaPCPais() As PCPais
    Dim obj As PCPais
    Set obj = New PCPais
    Set obj.Empresa = Me
    Set CreaPCPais = obj
    Set obj = Nothing
End Function

Public Function ListaPCPais(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodPais, Descripcion FROM PCPais "
    If BandSoloValida Then
        sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY Codpais "
   Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCPais = rs
   Else
        ListaPCPais = MiGetRows(rs)
       rs.Close
    End If
    Set rs = Nothing
End Function

Public Function RecuperaPCPais(key As Variant) As PCPais
    Dim obj As PCPais
    Set obj = New PCPais
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaPCPais = obj
   Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function ListaGNAgenciaCurier(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT gna.CodAgeCurier, gna.Descripcion, gna.Direccion,gna.Telefono,gna.codpostal,pcpais.descripcion as pais"
    sql = sql & ",pcprov.descripcion as provincia,pcc.descripcion as canton,pcparr.descripcion as parroquia FROM GNAgenciaCurier gna"
    sql = sql & " Left Join pcpais on pcpais.idpais = gna.idpais"
    sql = sql & " Left Join pcprovincia pcprov on pcprov.idprovincia = gna.idprovincia"
    sql = sql & " Left Join pccanton pcc on pcc.idcanton= gna.idcanton"
    sql = sql & " Left Join pcparroquia pcparr on pcparr.idparroquia= gna.idparroquia"
    If BandSoloValida Then
        sql = sql & " WHERE gna.BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY CodAgecurier "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaGNAgenciaCurier = rs
    Else
        ListaGNAgenciaCurier = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function
Public Function CreaGNAgenciaCurier() As GNAgenciaCurier
    Dim obj As GNAgenciaCurier
    Set obj = New GNAgenciaCurier
    Set obj.Empresa = Me
    Set CreaGNAgenciaCurier = obj
    Set obj = Nothing
End Function

Public Function RecuperaGNAgenciaCurier(key As Variant) As GNAgenciaCurier
    Dim obj As GNAgenciaCurier
    Set obj = New GNAgenciaCurier
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaGNAgenciaCurier = obj
   Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function ConsIVKardexPACA() As Variant
    Dim sql As String, cond As String, rs As Recordset
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient
    sql = "spConsIVKardexPorFechaPACA " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodBodega1 & "','" & _
                gobjCond.CodItem1 & "','" & _
                gobjCond.CodItem2 & "','" & _
                gobjCond.NombreItem & "'," & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB)
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
    Set ConsIVKardexPACA = rs
    Set rs = Nothing
    Me.GrabaGNLogAccion "CONSULTA", "Consulta Kardex inv. " & gobjCond.fecha1 & "-" & gobjCond.fecha2, "IV"
End Function

Public Function ListaGNTransPacas() As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT Transid, g.CodTrans + CONVERT(varchar,NumTrans) AS Trans "
    sql = sql & "FROM GnComprobante g  Inner Join gntrans gt on gt.codtrans = g.codtrans"
        sql = sql & " Where estado <> 3  And SUBSTRING(gt.OPCION2,167,1)= 'S'  ORDER BY Transid desc"
    Set rs = Me.OpenRecordset(sql)
    ListaGNTransPacas = MiGetRows(rs)
    rs.Close
    Set rs = Nothing
End Function

Public Function CreaPCCalle() As PCCalle
    Dim obj As PCCalle
    Set obj = New PCCalle
    Set obj.Empresa = Me
    Set CreaPCCalle = obj
    Set obj = Nothing
End Function

Public Function RecuperaPCCalle(key As Variant) As PCCalle
    Dim obj As PCCalle
    Set obj = New PCCalle
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaPCCalle = obj
   Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function
   
    
Public Function ListaPCCalle(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodCalle,  Descripcion FROM PCCalle "
    If BandSoloValida Then
        sql = sql & "WHERE BandValida=" & CadenaBool(True, TipoDB)
    End If
    sql = sql & " ORDER BY Codcalle "
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaPCCalle = rs
    Else
        ListaPCCalle = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function ConsVTConciliacioTrabajo() As Variant
    Dim sql As String, rs As Recordset
    
#If DAOLIB Then
    Dim qdef As QueryDef
    Set qdef = mdbEmpresa.QueryDefs("spConsTSConciliacion")
    qdef.Parameters("NumMoneda") = gobjCond.numMoneda
    qdef.Parameters("CodBanco") = gobjCond.CodBanco1
    qdef.Parameters("FechaDesde") = gobjCond.fecha1
    qdef.Parameters("FechaHasta") = gobjCond.fecha2
    Set rs = qdef.OpenRecordset(dbOpenSnapshot, dbReadOnly)
#Else
    Set rs = New ADODB.Recordset
    rs.CursorLocation = adUseClient

    sql = "spConsVTConciliacionTraBAJO " & _
                gobjCond.numMoneda & ",'" & _
                gobjCond.CodBanco1 & "', " & _
                FechaYMD(gobjCond.fecha1, TipoDB) & "," & _
                FechaYMD(gobjCond.fecha2, TipoDB)
    rs.Open sql, Me.Coneccion, adOpenStatic, adLockReadOnly
    UltimoRecordset rs
#End If
    ConsVTConciliacioTrabajo = MiGetRows(rs)
    
    Set rs = Nothing
End Function

Public Function CargarPCProvCliItemsxContrato(ByVal IdProvcli As Long, ByVal BandProntoPago As Boolean, ByVal Ref As String) As Recordset
Dim rs As Recordset
Dim sql As String
On Error GoTo CapturaError
    sql = "Select pcInv.idInventario,iv.codInventario,pcinv.cantidad,iv.precio1 as pu,pcinv.frecuencia, fechaini, fechafin from PCProvCliInv pcInv "
    sql = sql & " Inner join pcprovcli pc ON pc.idProvCli = pcInv.idProvCli"
    sql = sql & " Inner join Ivinventario Iv ON iv.idinventario = pcInv.idinventario"
    sql = sql & " Where pc.idprovcli = " & IdProvcli
    sql = sql & " AND pcInv.contrato = '" & Ref & "'"
    
    Set rs = Me.OpenRecordset(sql)
    Set CargarPCProvCliItemsxContrato = rs
Exit Function
CapturaError:
    MsgBox Err.Description
    Exit Function
End Function
Private Function ObtieneIdFuente(cad As String) As Long
    Dim s As String, i As Long
    Dim CodTrans As String, sql As String
    Dim NumTrans As Long
    Dim rs As Recordset
    Dim IdTrans As Long
    For i = 1 To Len(cad)
        If Not IsNumeric(Mid$(cad, i, 1)) Then
            s = s & Mid$(cad, i, 1)
        End If
    Next
    CodTrans = s
    NumTrans = Right(cad, Len(cad) - Len(s))
    sql = "Select transid from gncomprobante Where Codtrans = '" & CodTrans & "' And Numtrans = " & NumTrans
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        IdTrans = rs!transid
    End If
    ObtieneIdFuente = IdTrans
    Set rs = Nothing
End Function

Public Function ListaPCAsigna(IdProvcli As Long) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT pca.idprovcliasignado, pc.codprovcli,pc.nombre,pc.direccion1,pc.direccion2,pc.telefono1,pc.ruc,pcpa.codpais ,pcprov.Descripcion as Estado,"
    sql = sql & "pcc.descripcion as Ciudad,pcparr.Descripcion as Parroquia "
    sql = sql & " FROM pcprovcli pc Inner Join pcasigna pca on pca.idprovcliasignado = pc.idprovcli"
    sql = sql & " Left Join PCpais pcpa on pcpa.idpais=pc.idPais"
    sql = sql & " Left Join PCprovincia pcprov on pcprov.idProvincia=pc.idProvincia"
    sql = sql & " Left Join PCCanton pcc on pcc.idcanton=pc.idcanton"
    sql = sql & " Left Join PCparroquia pcparr on pcparr.idparroquia=pc.idparroquia"
    sql = sql & " Where pca.idprovcli=  " & IdProvcli
    sql = sql & " ORDER BY pc.nombre"
    Set rs = Me.OpenRecordset(sql)
    Set ListaPCAsigna = rs
    Set rs = Nothing
End Function

Public Function RecuperaPCAsigna(key As Long) As PCAsignado
    Dim obj As PCAsignado
    Set obj = New PCAsignado
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaPCAsigna = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Friend Sub VerificaAnulacionCurier( _
                ByVal tid As Long, _
                ByVal bandAnulacion As Boolean)
    Dim sql As String, rs As Recordset, s As String
    sql = "SELECT gc.CodTrans,gc.NumTrans, gc.Estado " & _
          "FROM ivkardex ivk Inner Join ivinventariodetallepaca ivp  " & _
                "on ivp.idkardex = ivk.id Inner join gncomprobante gc on gc.transid = ivk.transid  " & _
          "WHERE (ivp.transid in " & _
             "(select transid from gncomprobante gc2 " & _
                "Where gc2.TransID = " & tid & ")) "
    If bandAnulacion Then       'Cuando está eliminando no debe ir ésta condición
        sql = sql & " AND (gc.Estado <> " & ESTADO_ANULADO & ") "
    End If
    sql = sql & " AND (gc.TransID <>" & tid & ")"
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        Do Until rs.EOF
            s = s & "        " & rs.Fields("CodTrans") & " " & _
                                 rs.Fields("NumTrans")
            If rs.Fields("Estado") = ESTADO_ANULADO Then s = s & " (Anulado)"
            s = s & vbCr
            rs.MoveNext
        Loop
        If Len(s) > 0 Then
            s = Left$(s, Len(s) - 1)
            If bandAnulacion Then
                Err.Raise ERR_INVALIDO, "Empresa.CambiaEstadoGNComp", _
                    "No se puede anular la transacción porque tiene generados movimientos." & vbCr & _
                    "Primero tendrá que anular ó modificar las siguientes transacciones: " & vbCr & vbCr & s
            Else
                Err.Raise ERR_INVALIDO, "GNComprobante.Eliminar", _
                    "No se puede eliminar la transacción porque tiene generados movimientos." & vbCr & _
                    "Primero tendrá que eliminar las siguientes transacciones: " & vbCr & vbCr & s
            End If
        End If
    End If
    rs.Close
    Set rs = Nothing
End Sub


Public Sub CambiaEstadoBandFinalizado(transid As Long, value As Boolean)
    Dim sql As String, pt As PermisoTrans, CodT As String, gc As GNComprobante
    Dim est As Boolean, rs As Recordset, idCentro As Long, EstadoOriginal As Byte, pos As Integer
    Dim idAsiento As Long, gcaux As GNComprobante, IdTransFuente As Long, i As Long
    Dim rsA As Recordset
    Dim IdFuente As Long
    If transid = 0 Then Exit Sub        '*** MAKOTO 15/dic/00
    'Obtiene CodTrans de la transacción
    sql = "SELECT CodTrans, BandFinalizado, IdCentro, idtransfuente  FROM GNComprobante WHERE TransID=" & transid
    Set rs = Me.OpenRecordset(sql)
    If rs.EOF Then
        Err.Raise ERR_NOHAYCODIGO, "Empresa.CambiaEstadoGNComp", "No se enencuentra la transacción."
    End If
    CodT = rs!CodTrans
    est = rs!BandFinalizado                 'Estado actual de la trans.
    idCentro = rs!idCentro
    IdTransFuente = rs!IdTransFuente
    rs.Close
    
    'Si no está cambiando no hace nada
    If est = value Then Exit Sub
            
    'Recupera el permiso para la transacción
    Set pt = gobjMain.GrupoActual.PermisoActual.Trans(CodT)
    If Not pt Is Nothing Then
            sql = "Update GNComprobante  set BandFinalizado=0"
            sql = sql & " Where Transid =" & transid
            Me.EjecutarSQL sql, 1
    End If

#If DAOLIB Then
    gobjWS.CommitTrans          '============ Completa la transacción
#Else
'    mcnEmpresa.CommitTrans      '============ Completa la transacción
#End If
    Set gc = Nothing
    Set rsA = Nothing

    Exit Sub

ErrTrap:
#If DAOLIB Then
    gobjWS.Rollback             '============ Anula la transacción
#Else
    mcnEmpresa.RollbackTrans    '============ Anula la transacción
#End If
    
    Err.Raise Err.Number, Err.Source, Err.Description
    Exit Sub
End Sub


Public Function ListaAnexoICE(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    sql = "SELECT CodICE,  Descripcion FROM Anexo_ICE"
    sql = sql & " ORDER BY CodIce"
    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaAnexoICE = rs
    Else
        ListaAnexoICE = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function

Public Function RecuperaAnexosICE(key As Variant) As Anexos
Dim obj As Anexos
    Set obj = New Anexos
    Set obj.Empresa = Me
    On Error Resume Next
    obj.RecuperarAnexoICE key
    If Err.Number = 0 Then Set RecuperaAnexosICE = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function ConsTSPorCobrarPagar2pck( _
                    ByVal PorCobrar As Boolean, _
                    ByVal CodProvcli As String, _
                    ByVal FechaVenci As Date, _
                    ByVal CodForma As String, _
                    ByVal CodMoneda As String, _
                    ByVal CodGrupo1 As String, _
                    ByVal CodVendedor As String, _
                    ByVal CodSucursal As String, _
                    ByVal Codelemento As String) As Variant
    Dim aux_codpc As String, aux_f1 As Date, aux_f2 As Date
    Dim aux_PorCobrar As Boolean, aux_Cliente As Boolean, aux_Proveedor As Boolean
    Dim aux_CodForma As String, aux_CodMoneda As String, aux_codgrupo As String
    Dim aux_incluircero As Boolean, aux_codVendedor As String, aux_Empleado As Boolean
    Dim aux_codElemento As String

   With gobjMain.objCondicion
        'Conservar valores actuales para que no afecte a otras consultas
        aux_codpc = .CodPC1
        aux_f1 = .fecha1
        aux_f2 = .fecha2
        aux_PorCobrar = .PorCobrar
        aux_Cliente = .Cliente
        aux_Proveedor = .Proveedor
        aux_Empleado = .Empleado
        aux_CodForma = .CodForma
        aux_CodMoneda = .CodMoneda
        aux_codgrupo = .CodGrupo
        aux_incluircero = .IncluirCero
        aux_codVendedor = .Usuario1
        aux_codElemento = .Codelemento

        .PorCobrar = PorCobrar
        .Cliente = True
        .Proveedor = True
        '.Empleado = True
        
        .CodPC1 = CodProvcli
        .fecha1 = Me.GNOpcion.FechaInicio
        .fecha2 = FechaVenci
        .CodForma = CodForma
        .CodMoneda = CodMoneda
        .CodGrupo = CodGrupo1
        .IncluirCero = False
        .Usuario1 = CodVendedor
        .Sucursal = CodSucursal
        .Codelemento = Codelemento

        Set ConsTSPorCobrarPagar2pck = ConsTSPorCobrarPagar32pck()
        
        'Recuperar valores reservados
        .CodPC1 = aux_codpc
        .fecha1 = aux_f1
        .fecha2 = aux_f2
        .PorCobrar = aux_PorCobrar
        .Cliente = aux_Cliente
        .Proveedor = aux_Proveedor
        .Empleado = aux_Empleado
        .CodForma = aux_CodForma
        .CodMoneda = aux_CodMoneda
        .CodGrupo = aux_codgrupo
        .IncluirCero = aux_incluircero
        .Usuario1 = aux_codVendedor
        .Sucursal = CodSucursal
        .Codelemento = Codelemento

   End With
End Function

Public Function RecuperaObrasxUbicacion(ByVal CodUbicacion As String) As Recordset
Dim sql As String
Dim rs As Recordset
    sql = "select Idobra, Nombre, d.iddestino "
    sql = sql & "from gnObra m inner join gndestino  d on m.iddestino = d.iddestino"
    sql = sql & " WHERE m.bandvalida=1 and  d.Iddestino IN (" & CodUbicacion & ")"
    sql = sql & " order by coddestino, nombre "
    Set rs = Me.OpenRecordset(sql)
    If Not rs Is Nothing Then
        Set RecuperaObrasxUbicacion = rs
    End If
    Exit Function
End Function

Public Function ObtieneDesctoPCGxIVxFechaNew(ByVal CodIVGrupo As String, ByVal codPCG As String, ByVal codFC As String, ByRef CodDescuento As String, ByRef FechaTrans As Date, ByRef HoraTrans As Date) As Double
Dim sql As String, rs As Recordset, NumIVGrupo As Integer, NumPCGrupo As Integer
    CodDescuento = ""
    NumIVGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumIVGrupo")) + 1
    NumPCGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumPCGrupo")) + 1
    sql = " select top 1"
    sql = sql & " ivD.codDescuento as codDesc,"
    sql = sql & " case when ivdiv.Descuento-Penal>0 then ivdiv.Descuento-Penal else 0 end as TotalDesc, "
    sql = sql & " ivd.IdDescuento , ivd.BandCaducidad, ivd.FechaDesde, ivd.FechaHasta, ivd.HoraDesde, ivd.HoraHasta "
    sql = sql & " From"
    sql = sql & " ivdescuentodetallepc ivdpc "
    sql = sql & " left join pcgrupo" & NumPCGrupo & " pcg "
    sql = sql & " on ivdpc.IdPCGrupo = pcg.idgrupo" & NumPCGrupo
    sql = sql & " inner join ivdescuentodetalleiv ivdiv "
    sql = sql & " inner join ivgrupo" & NumIVGrupo & " ivg "
    sql = sql & " on ivdiv.IdIVGrupo = ivg.idgrupo" & NumIVGrupo
    sql = sql & " inner join ivdescuentodetallefc ivdfc "
    sql = sql & " inner join TsFormaCobroPago tsf "
    sql = sql & " on ivdfc.idforma=tsf.idforma"
    sql = sql & " inner join ivdescuento ivd"
    sql = sql & " on ivd.iddescuento=ivdfc.iddescuento"
    sql = sql & " on ivd.iddescuento=ivdiv.iddescuento"
    sql = sql & " on ivd.iddescuento=ivdpc.iddescuento"
    sql = sql & " WHERE "
    sql = sql & " ivd.BandValida=1 and "
    sql = sql & " ivg.CodGrupo" & NumIVGrupo & " = '" & CodIVGrupo & "'"
    sql = sql & " and pcg.codgrupo" & NumPCGrupo & "='" & codPCG & "'"
    sql = sql & " and tsf.codforma='" & codFC & "'"
    sql = sql & " and ivdiv.cantmin= 0"
    sql = sql & " order by ivd.fechagrabado"
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        If rs.Fields("BandCaducidad") Then
            If FechaTrans >= rs.Fields("FechaDesde") And FechaTrans <= rs.Fields("FechaHasta") Then
                ObtieneDesctoPCGxIVxFechaNew = rs!TotalDesc
                CodDescuento = rs!codDesc
            Else
                ObtieneDesctoPCGxIVxFechaNew = 0
                CodDescuento = "" ' 0
            End If
        Else
                ObtieneDesctoPCGxIVxFechaNew = rs!TotalDesc
                CodDescuento = rs!codDesc
        
        End If
    
    End If
    Set rs = Nothing
End Function

Public Function ObtieneDesctoIdPCxIVxFechaNew(ByVal CodIVGrupo As String, ByVal idPC As Long, ByVal codFC As String, ByRef CodDescuento As String, ByRef FechaTrans As Date, ByRef HoraTrans As Date) As Double
Dim sql As String, rs As Recordset, NumIVGrupo As Integer, NumPCGrupo As Integer
    CodDescuento = ""
    NumIVGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumIVGrupo")) + 1
    NumPCGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumPCGrupo")) + 1
    sql = " select top 1"
    sql = sql & " ivD.codDescuento as codDesc,"
    sql = sql & " case when ivdiv.Descuento-Penal>0 then ivdiv.Descuento-Penal else 0 end as TotalDesc, "
    sql = sql & " ivd.IdDescuento , ivd.BandCaducidad, ivd.FechaDesde, ivd.FechaHasta, ivd.HoraDesde, ivd.HoraHasta "
    sql = sql & " From"
    sql = sql & " ivdescuentodetallepc ivdpc "
    sql = sql & " inner join ivdescuentodetalleiv ivdiv "
    sql = sql & " inner join ivgrupo" & NumIVGrupo & " ivg "
    sql = sql & " on ivdiv.IdIVGrupo = ivg.idgrupo" & NumIVGrupo
    sql = sql & " inner join ivdescuentodetallefc ivdfc "
    sql = sql & " inner join TsFormaCobroPago tsf "
    sql = sql & " on ivdfc.idforma=tsf.idforma"
    sql = sql & " inner join ivdescuento ivd"
    sql = sql & " on ivd.iddescuento=ivdfc.iddescuento"
    sql = sql & " on ivd.iddescuento=ivdiv.iddescuento"
    sql = sql & " on ivd.iddescuento=ivdpc.iddescuento"
    sql = sql & " WHERE "
    sql = sql & " ivd.BandValida=1 and "
    sql = sql & " ivg.CodGrupo" & NumIVGrupo & " = '" & CodIVGrupo & "'"
    sql = sql & " and ( ivdpc.idProvCli =" & idPC & ")"
    sql = sql & " and tsf.codforma='" & codFC & "'"
    sql = sql & " and ivdiv.cantmin= 0"
    sql = sql & " order by ivd.fechagrabado"
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        If rs.Fields("BandCaducidad") Then
            If FechaTrans >= rs.Fields("FechaDesde") And FechaTrans <= rs.Fields("FechaHasta") Then
                ObtieneDesctoIdPCxIVxFechaNew = rs!TotalDesc
                CodDescuento = rs!codDesc
            Else
                ObtieneDesctoIdPCxIVxFechaNew = 0
                CodDescuento = "" ' 0
            End If
        Else
                ObtieneDesctoIdPCxIVxFechaNew = rs!TotalDesc
                CodDescuento = rs!codDesc
        
        End If
    
    End If
    Set rs = Nothing
End Function

Public Function ObtieneDesctoPCGxItemxFechaAcumulaNew(ByVal CodInventario As String, ByVal codPCG As String, ByVal codFC As String, ByRef CodDescuento As String, ByRef BandAcumula As Boolean, ByRef FechaTrans As Date, ByRef HoraTrans As Date) As Double
    Dim sql As String, rs As Recordset, NumIVGrupo As Integer, NumPCGrupo As Integer
    CodDescuento = ""
    NumIVGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumIVGrupo")) + 1
    NumPCGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumPCGrupo")) + 1
    sql = " select top 1"
    sql = sql & " ivD.codDescuento as codDesc, ivD.BandAcumula,"
    sql = sql & " case when ivdiv.Descuento-Penal>0 then ivdiv.Descuento-Penal else 0 end as TotalDesc,"
    sql = sql & " ivd.IdDescuento , ivd.BandCaducidad, ivd.FechaDesde, ivd.FechaHasta, ivd.HoraDesde, ivd.HoraHasta "
    sql = sql & " From"
    sql = sql & " ivdescuentodetallepc ivdpc "
    sql = sql & " left join pcgrupo" & NumPCGrupo & " pcg "
    sql = sql & " on ivdpc.IdPCGrupo = pcg.idgrupo" & NumPCGrupo
    sql = sql & " inner join ivdescuentodetalleiv ivdiv "
    sql = sql & " inner join ivinventario ivi on ivdiv.idinventario=ivi.idinventario"
    sql = sql & " inner join ivdescuentodetallefc ivdfc "
    sql = sql & " inner join TsFormaCobroPago tsf "
    sql = sql & " on ivdfc.idforma=tsf.idforma"
    sql = sql & " inner join ivdescuento ivd"
    sql = sql & " on ivd.iddescuento=ivdfc.iddescuento"
    sql = sql & " on ivd.iddescuento=ivdiv.iddescuento"
    sql = sql & " on ivd.iddescuento=ivdpc.iddescuento"
    sql = sql & " WHERE "
    sql = sql & " ivd.BandValida=1 "
    sql = sql & " and pcg.codgrupo" & NumPCGrupo & "='" & codPCG & "'"
    sql = sql & " and tsf.codforma='" & codFC & "'"
    sql = sql & " and codinventario='" & CodInventario & "'"
    sql = sql & " and ivdiv.cantmin= 0"
    sql = sql & " order by ivd.fechagrabado"
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        If rs.Fields("BandCaducidad") Then
            If FechaTrans >= rs.Fields("FechaDesde") And FechaTrans <= rs.Fields("FechaHasta") Then
                ObtieneDesctoPCGxItemxFechaAcumulaNew = rs!TotalDesc
                CodDescuento = rs!codDesc
                BandAcumula = rs!BandAcumula
            Else
                ObtieneDesctoPCGxItemxFechaAcumulaNew = 0
                CodDescuento = 0
                BandAcumula = False
            End If
        Else
            ObtieneDesctoPCGxItemxFechaAcumulaNew = rs!TotalDesc
            CodDescuento = rs!codDesc
            BandAcumula = rs!BandAcumula
        End If
   End If
    Set rs = Nothing
End Function

Public Function ObtieneDesctoIdPCxItemxFechaAcumulaNew(ByVal CodInventario As String, ByVal idPC As Long, ByVal codFC As String, ByRef CodDescuento As String, ByRef BandAcumula As Boolean, ByRef FechaTrans As Date, ByRef HoraTrans As Date) As Double
    Dim sql As String, rs As Recordset, NumIVGrupo As Integer, NumPCGrupo As Integer
    CodDescuento = ""
    NumIVGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumIVGrupo")) + 1
    NumPCGrupo = CInt(Me.GNOpcion.ObtenerValor("DescuentoNumPCGrupo")) + 1
    sql = " select top 1"
    sql = sql & " ivD.codDescuento as codDesc, ivD.BandAcumula,"
    sql = sql & " case when ivdiv.Descuento-Penal>0 then ivdiv.Descuento-Penal else 0 end as TotalDesc,"
    sql = sql & " ivd.IdDescuento , ivd.BandCaducidad, ivd.FechaDesde, ivd.FechaHasta, ivd.HoraDesde, ivd.HoraHasta "
    sql = sql & " From"
    sql = sql & " ivdescuentodetallepc ivdpc "
   sql = sql & " inner join ivdescuentodetalleiv ivdiv "
    sql = sql & " inner join ivinventario ivi on ivdiv.idinventario=ivi.idinventario"
    sql = sql & " inner join ivdescuentodetallefc ivdfc "
    sql = sql & " inner join TsFormaCobroPago tsf "
    sql = sql & " on ivdfc.idforma=tsf.idforma"
    sql = sql & " inner join ivdescuento ivd"
    sql = sql & " on ivd.iddescuento=ivdfc.iddescuento"
    sql = sql & " on ivd.iddescuento=ivdiv.iddescuento"
    sql = sql & " on ivd.iddescuento=ivdpc.iddescuento"
    sql = sql & " WHERE "
    sql = sql & " ivd.BandValida=1 "
    sql = sql & " and ( ivdpc.idProvCli =" & idPC & ")"
    sql = sql & " and tsf.codforma='" & codFC & "'"
    sql = sql & " and codinventario='" & CodInventario & "'"
    sql = sql & " and ivdiv.cantmin= 0"
    sql = sql & " order by ivd.fechagrabado"
    Set rs = Me.OpenRecordset(sql)
    If Not rs.EOF Then
        If rs.Fields("BandCaducidad") Then
            If FechaTrans >= rs.Fields("FechaDesde") And FechaTrans <= rs.Fields("FechaHasta") Then
                ObtieneDesctoIdPCxItemxFechaAcumulaNew = rs!TotalDesc
                CodDescuento = rs!codDesc
                BandAcumula = rs!BandAcumula
            Else
                ObtieneDesctoIdPCxItemxFechaAcumulaNew = 0
                CodDescuento = 0
                BandAcumula = False
            End If
        Else
            ObtieneDesctoIdPCxItemxFechaAcumulaNew = rs!TotalDesc
            CodDescuento = rs!codDesc
            BandAcumula = rs!BandAcumula
        End If
   End If
    Set rs = Nothing
End Function

Public Function ListaIVRecetas(BandRS As Boolean) As Variant
End Function

Public Function CreaIVReceta() As IVReceta
    Dim obj As IVReceta
    Set obj = New IVReceta
   Set obj.Empresa = Me
    Set CreaIVReceta = obj
    Set obj = Nothing
End Function

Public Function RecuperaUltimoNumIVReceta() As Long
    Dim sql As String, s As String
    Dim rs As Recordset, rs1 As Recordset
    sql = " select  top 1 codReceta "
    sql = sql & " from IVReceta "
    sql = sql & " order by Id desc "
    Set rs = Me.OpenRecordset(sql)
    If rs.RecordCount > 0 Then
        RecuperaUltimoNumIVReceta = rs.Fields("codReceta")
    Else
        RecuperaUltimoNumIVReceta = 0
    End If
    rs.Close
    Set rs = Nothing
End Function
Public Function RecuperaIVReceta(key As Variant) As IVReceta
    Dim obj As IVReceta
    Set obj = New IVReceta
    Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaIVReceta = obj
   Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function ListaGNCentroCosto2xNombre(BandSoloValida As Boolean, BandRS As Boolean) As Variant
    Dim sql As String, rs As Recordset
    
#If DAOLIB Then
    sql = "SELECT CodCentro, " & _
                "IIF((Nombre Is NULL) OR (Len(Nombre)=0), Descripcion, " & _
                "Nombre + ' ' + Descripcion) AS Descripcion " & _
          "FROM GNCentroCosto "
#Else
    sql = "SELECT CodCentro, " & _
                "CASE WHEN (Nombre Is NULL) OR Len(Nombre)=0 THEN Descripcion " & _
                "  ELSE Nombre + ' ' + Descripcion " & _
                "END AS Descripcion " & _
          "FROM GNCentroCosto "
#End If
    If BandSoloValida Then sql = sql & "WHERE FechaFinal Is Null "
    sql = sql & " ORDER BY Nombre"

    Set rs = Me.OpenRecordset(sql)
    If BandRS Then
        Set ListaGNCentroCosto2xNombre = rs
    Else
        ListaGNCentroCosto2xNombre = MiGetRows(rs)
        rs.Close
    End If
    Set rs = Nothing
End Function


Public Function ListaGNCentroCostoCC(BandSoloValida As Boolean, BandDetallado As Boolean, BandRS As Boolean) As Variant

    If BandRS Then
        Set ListaGNCentroCostoCC = Me.Empresa2.ListaGNCentroCostoCCNew(BandSoloValida, BandDetallado, BandRS)
    Else
        ListaGNCentroCostoCC = Me.Empresa2.ListaGNCentroCostoCCNew(BandSoloValida, BandDetallado, BandRS)
    End If
End Function

Public Function ConsIVCorrecExistDou() As Variant
End Function

Public Function Empresa2() As Empresa2
    If mProps.ObjEmp2 Is Nothing Then
        Set mProps.ObjEmp2 = New Empresa2
    End If
    Set Empresa2 = mProps.ObjEmp2
End Function

Public Function RecuperaTSRetencionxSRI(key As Variant) As TSRetencion
End Function

Public Function RecuperaGNSeguro(key As Variant) As GNSeguro
    Dim obj As GNSeguro
    Set obj = New GNSeguro
   Set obj.Empresa = Me
    On Error Resume Next
    obj.Recuperar key
    If Err.Number = 0 Then Set RecuperaGNSeguro = obj
   Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

Public Function RecuperaTSRetencionxSRIxIVA(key As Variant, BandIVA As Boolean) As TSRetencion
    Dim obj As TSRetencion
    Set obj = New TSRetencion
    Set obj.Empresa = Me
    On Error Resume Next
    obj.RecuperarxSRIxIVA key, BandIVA
    If Err.Number = 0 Then Set RecuperaTSRetencionxSRIxIVA = obj
    Err.Clear
    On Error GoTo 0
    Set obj = Nothing
End Function

